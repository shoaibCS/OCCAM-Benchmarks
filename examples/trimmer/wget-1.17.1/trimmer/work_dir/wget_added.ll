; ModuleID = './work_dir/wget_added.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hash_table = type { i64 (i8*)*, i32 (i8*, i8*)*, %struct.param_token*, i32, i32, i32, i32 }
%struct.param_token = type { i8*, i8* }
%struct.ip_address = type { i32, %union.anon, i32 }
%union.anon = type { %struct.in6_addr }
%struct.in6_addr = type { %union.anon.0 }
%union.anon.0 = type { [4 x i32] }
%struct.transport_info = type { %struct.transport_implementation*, i8* }
%struct.transport_implementation = type { i32 (i32, i8*, i32, i8*)*, i32 (i32, i8*, i32, i8*)*, i32 (i32, double, i32, i8*)*, i32 (i32, i8*, i32, i8*)*, i8* (i32, i8*)*, void (i32, i8*)* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.yy_buffer_state = type { %struct._IO_FILE*, i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.known_tag = type { i32, i8*, void (i32, %struct.taginfo*, %struct.map_context*)* }
%struct.taginfo = type { i8*, i32, i32, %struct.attr_pair*, i8*, i8*, i8*, i8* }
%struct.attr_pair = type { i8*, i8*, i8*, i32, i32, i32 }
%struct.map_context = type { i8*, i8*, i8*, i8*, i8, %struct.urlpos* }
%struct.urlpos = type { %struct.url*, i8*, i16, i32, i32, i32, i32, %struct.urlpos* }
%struct.url = type { i8*, i32, i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8 }
%struct.anon = type { i32, i8*, i32 }
%struct.cookie_jar = type { %struct.hash_table*, i32 }
%struct.anon.65 = type { i32, i8*, i32, i8, i8, %struct.ntlmdata }
%struct.ntlmdata = type { i32, [8 x i8] }
%struct.response = type { i8*, i8** }
%struct.anon.83 = type { i8*, i8*, i1 (i8*, i8*, i8*)* }
%struct.hsts_kh = type { i8*, i32 }
%struct.log_ln = type { [129 x i8], i8*, i8* }
%struct.options = type { i32, i8, i32, i8, i8, i8, i8, i8, i32, i8, i8, i32, i8, i8, i32, i8, i8, i8, i8, i8*, i8*, i8*, i8*, i8, i8, i8*, i8, i8**, i8**, i8**, i8**, i8, i8*, i8*, i8*, i8*, i32, i8* (i8*)*, i1 (i8*, i8*)*, i8**, i8**, i8, i8**, i8**, i8, i8, i8*, i8*, i8*, i8*, i64, i8, i8, i8, i8, i8**, i8*, i8*, i8, i8, i64, i8*, i8*, i8, i8, i8, i8*, i8*, i8**, i8, i8, i8, i8*, i8*, i8*, i8**, i8*, i8*, i32, i8, i8*, i8*, double, double, double, i8, double, double, i8, i64, i64, i8, i8, i8, i8, i8, i8, i8, i32, i8*, i8*, i8, i8, i8, i8, i8*, i64, i32, i32, i8, i8, i8, i8*, i32, i32, i8*, i8*, i32, i32, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8*, i8*, i8, i8*, i8*, i8*, i8*, i8*, i32, i8, i8, i32, i8, i8, i8, i8, i32, i8, i8, i8, i8*, i8*, i8, i8, i8, i8, i8*, i8, i8* }
%struct.hsts_store = type { %struct.hash_table*, i64 }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.cmdline_option = type { i8*, i8, i32, i8*, i32 }
%struct._acc_t = type { i8*, i8*, i8*, %struct._acc_t* }
%struct.progress_implementation = type { i8*, i8, i8* (i8*, i64, i64)*, void (i8*, i64, double)*, void (i8*)*, void (i8*, double)*, void (i8*)* }
%struct.anon.103 = type { i32, i32 }
%struct.anon.123 = type { i64, double, double }
%struct.scheme_data = type { i8*, i8*, i32, i32 }
%struct.gzFile_s = type { i32, i8*, i64 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.fd_set }
%struct.fd_set = type { [16 x i64] }
%struct.gnutls_certificate_credentials_st = type opaque
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.sockaddr_storage = type { i16, [118 x i8], i64 }
%union.__CONST_SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.sockaddr_in6 = type { i16, i16, i32, %struct.in6_addr, i32 }
%struct.address_list = type { i32, %struct.ip_address*, i32, i8, i32 }
%struct.cwt_context = type { i32, %struct.sockaddr*, i32, i32 }
%struct.timeval = type { i64, i64 }
%struct.ptimer = type { %struct.timeval, double, double }
%struct.iri = type { i8*, i8*, i8*, i8 }
%struct.file_memory = type { i8*, i64, i32 }
%struct.hash_table_iterator = type { i8*, i8*, i8*, i8* }
%struct.cookie = type { i8*, i32, i8*, i8, i64, i8*, i8*, %struct.cookie* }
%struct.weighed_cookie = type { %struct.cookie*, i32, i32 }
%struct.ccon = type { i32, i32, i32, double, i32, i32, i8*, i8*, %struct.url* }
%struct.fileinfo = type { i32, i8*, i64, i64, i32, i32, i8*, %struct.fileinfo*, %struct.fileinfo* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timeval, %struct.timeval, %struct.timeval, [3 x i64] }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.gaiwt_context = type { i8*, i8*, %struct.addrinfo*, %struct.addrinfo**, i32 }
%struct.hsts_kh_info = type { i64, i64, i8 }
%struct.pool = type { i8*, i32, i32, i8, i8*, i32 }
%struct.tagstack_item = type { i8*, i8*, i8*, %struct.tagstack_item*, %struct.tagstack_item* }
%struct.http_stat = type { i64, i64, i64, i32, i8*, i8*, i8*, i8*, i32, i8*, i64, double, i8*, i8*, i8, i8, i8*, i64, i64 }
%struct.request = type { i8*, i8*, %struct.request_header*, i32, i32 }
%struct.request_header = type { i8*, i8*, i32 }
%struct.md5_ctx = type { i32, i32, i32, i32, [2 x i32], i32, [32 x i32] }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.logvprintf_state = type { i8*, i32, i32 }
%struct.dot_progress = type { i64, i64, i32, double, i32, i32, double }
%struct.bar_progress = type { i8*, i64, i64, i64, double, double, i32, i8*, i32, %struct.bar_progress_hist, double, i64, i8, double, i32 }
%struct.bar_progress_hist = type { i32, [20 x double], [20 x i64], double, i64 }
%struct.mbchar = type { i8*, i64, i8, i32, [24 x i8] }
%struct.mbiter_multi = type { i8*, i8, %struct.__mbstate_t, i8, %struct.mbchar }
%struct.__mbstate_t = type { i32, %struct.in_addr }
%struct.url_queue = type { %struct.queue_element*, %struct.queue_element*, i32, i32 }
%struct.queue_element = type { i8*, i8*, i32, i8, %struct.iri*, i8, %struct.queue_element* }
%struct.robot_specs = type { i32, i32, %struct.path_info* }
%struct.path_info = type { i8*, i8, i8 }
%struct.sha1_ctx = type { i32, i32, i32, i32, i32, [2 x i32], i32, [32 x i32] }
%struct.warc_cdx_record = type { i8*, i8*, [20 x i8] }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.itimerval = type { %struct.timeval, %struct.timeval }
%struct.real_pcre = type opaque
%struct.re_pattern_buffer = type { %struct.re_dfa_t*, i64, i64, i64, i8*, i8*, i64, i8 }
%struct.re_dfa_t = type opaque
%struct.pcre_extra = type { i64, i8*, i64, i8*, i8*, i64, i8**, i8* }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.gnutls_session_int = type opaque
%struct.wgnutls_transport_context = type { %struct.gnutls_session_int*, %struct.hsts_kh*, i32, [512 x i8], i32 }
%struct.gnutls_x509_crt_int = type opaque
%struct.des_ctx = type { [32 x i32] }
%struct.md4_ctx = type { [4 x i32], i64, [64 x i8], i32 }
%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }

@.str = private unnamed_addr constant [8 x i8] c"%s (%s)\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Connecting to %s|%s|:%d... \00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Connecting to %s:%d... \00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Connecting to [%s]:%d... \00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Failed setting IPV6_V6ONLY: %s\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"connected.\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Created socket %d.\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"failed: %s.\0A\00", align 1
@transport_map = internal global %struct.hash_table* null, align 8, !track !0
@transport_map_modified_tick = internal global i32 0, align 4
@.str.14 = private unnamed_addr constant [14 x i8] c"Closed fd %d\0A\00", align 1
@resolve_bind_address.called = internal global i8 0, align 1
@resolve_bind_address.should_bind = internal global i8 0, align 1
@resolve_bind_address.ip = internal global %struct.ip_address zeroinitializer, align 4, !track !1
@.str.13 = private unnamed_addr constant [56 x i8] c"%s: unable to resolve bind address %s; disabling bind.\0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"%s: unable to resolve host address %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"Local socket fd %d bound.\0A\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"binding to address %s using port %i.\0A\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"Accepted client at socket %d.\0A\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"conaddr is: %s\0A\00", align 1
@fd_read.last_fd = internal global i32 -1, align 4
@fd_read.last_tick = internal global i32 0, align 4
@fd_read.last_info = internal global %struct.transport_info* null, align 8, !track !2
@fd_peek.last_fd = internal global i32 -1, align 4
@fd_peek.last_tick = internal global i32 0, align 4
@fd_peek.last_info = internal global %struct.transport_info* null, align 8, !track !3
@fd_write.last_fd = internal global i32 -1, align 4
@fd_write.last_tick = internal global i32 0, align 4
@fd_write.last_info = internal global %struct.transport_info* null, align 8, !track !4
@downloaded_html_set = common dso_local global %struct.hash_table* null, align 8, !track !5
@downloaded_css_set = common dso_local global %struct.hash_table* null, align 8, !track !6
@dl_url_file_map = common dso_local global %struct.hash_table* null, align 8, !track !7
@.str.15 = private unnamed_addr constant [44 x i8] c"Converted links in %d files in %s seconds.\0A\00", align 1
@dl_file_url_map = internal global %struct.hash_table* null, align 8, !track !8
@.str.1.16 = private unnamed_addr constant [33 x i8] c"Apparently %s has been removed.\0A\00", align 1
@.str.2.17 = private unnamed_addr constant [23 x i8] c"Scanning %s (from %s)\0A\00", align 1
@.str.3.18 = private unnamed_addr constant [33 x i8] c"will convert url %s to local %s\0A\00", align 1
@.str.4.19 = private unnamed_addr constant [33 x i8] c"will convert url %s to complete\0A\00", align 1
@.str.5.20 = private unnamed_addr constant [27 x i8] c"Converting links in %s... \00", align 1
@.str.6.21 = private unnamed_addr constant [16 x i8] c"nothing to do.\0A\00", align 1
@.str.7.22 = private unnamed_addr constant [32 x i8] c"Cannot convert links in %s: %s\0A\00", align 1
@.str.8.23 = private unnamed_addr constant [25 x i8] c"Unable to delete %s: %s\0A\00", align 1
@.str.9.24 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.10.25 = private unnamed_addr constant [52 x i8] c"Something strange is going on.  Please investigate.\00", align 1
@.str.11.26 = private unnamed_addr constant [29 x i8] c"Skipping %s at position %d.\0A\00", align 1
@.str.12.27 = private unnamed_addr constant [45 x i8] c"TO_RELATIVE: %s to %s at position %d in %s.\0A\00", align 1
@.str.13.28 = private unnamed_addr constant [58 x i8] c"Converted file part only: %s to %s at position %d in %s.\0A\00", align 1
@.str.14.29 = private unnamed_addr constant [54 x i8] c"TO_COMPLETE: <something> to %s at position %d in %s.\0A\00", align 1
@.str.15.30 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"%d-%d\0A\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"%d; URL=%s\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"?#%;\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"/:\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"./\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"orig\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c".orig\00", align 1
@converted_files = internal global %struct.hash_table* null, align 8, !track !9
@.str.19 = private unnamed_addr constant [29 x i8] c"Cannot back up %s as %s: %s\0A\00", align 1
@downloaded_files_hash = internal global %struct.hash_table* null, align 8, !track !10
@downloaded_mode_to_ptr.v1 = internal global i32 0, align 4
@downloaded_mode_to_ptr.v2 = internal global i32 1, align 4
@downloaded_mode_to_ptr.v3 = internal global i32 2, align 4
@downloaded_mode_to_ptr.v4 = internal global i32 3, align 4, !track !11
@.str.25 = private unnamed_addr constant [12 x i8] c"/index.html\00", align 1
@cookies_now = internal global i64 0, align 8
@.str.31 = private unnamed_addr constant [50 x i8] c"Cookie coming from %s attempted to set domain to \00", align 1
@.str.1.32 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2.33 = private unnamed_addr constant [34 x i8] c"Attempt to fake the path: %s, %s\0A\00", align 1
@.str.40 = private unnamed_addr constant [38 x i8] c"Deleted old cookie (to be replaced.)\0A\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c" (ANY)\00", align 1
@.str.43 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"permanent\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"session\00", align 1
@.str.22.34 = private unnamed_addr constant [7 x i8] c"secure\00", align 1
@.str.46 = private unnamed_addr constant [9 x i8] c"insecure\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.41 = private unnamed_addr constant [55 x i8] c"\0AStored cookie %s %d%s %s <%s> <%s> [expiry %s] %s %s\0A\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"Unable to get cookie for %s\0A\00", align 1
@.str.39 = private unnamed_addr constant [23 x i8] c"Discarded old cookie.\0A\00", align 1
@.str.24.35 = private unnamed_addr constant [7 x i8] c"cdm: 2\00", align 1
@.str.25.36 = private unnamed_addr constant [3 x i8] c" 3\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c" 4\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c" 5\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c" 6\00", align 1
@check_domain_match.known_toplevel_domains = internal global [7 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)], align 16
@.str.36 = private unnamed_addr constant [3 x i8] c" 7\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c" 8\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c".com\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c".edu\00", align 1
@.str.31.37 = private unnamed_addr constant [5 x i8] c".net\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c".org\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c".gov\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c".mil\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c".int\00", align 1
@.str.18.38 = private unnamed_addr constant [7 x i8] c"domain\00", align 1
@.str.19.39 = private unnamed_addr constant [5 x i8] c"path\00", align 1
@.str.20.40 = private unnamed_addr constant [8 x i8] c"expires\00", align 1
@.str.21.41 = private unnamed_addr constant [8 x i8] c"max-age\00", align 1
@.str.6.42 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.23.43 = private unnamed_addr constant [48 x i8] c"Syntax error in Set-Cookie: %s at position %d.\0A\00", align 1
@.str.3.44 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.4.45 = private unnamed_addr constant [33 x i8] c"Cannot open cookies file %s: %s\0A\00", align 1
@.str.5.46 = private unnamed_addr constant [5 x i8] c"TRUE\00", align 1
@.str.7.47 = private unnamed_addr constant [23 x i8] c"Saving cookies to %s.\0A\00", align 1
@.str.8.48 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.9.49 = private unnamed_addr constant [21 x i8] c"# HTTP cookie file.\0A\00", align 1
@.str.10.50 = private unnamed_addr constant [28 x i8] c"# Generated by Wget on %s.\0A\00", align 1
@.str.11.51 = private unnamed_addr constant [27 x i8] c"# Edit at your own risk.\0A\0A\00", align 1
@.str.12.52 = private unnamed_addr constant [4 x i8] c":%d\00", align 1
@.str.14.53 = private unnamed_addr constant [6 x i8] c"FALSE\00", align 1
@.str.13.54 = private unnamed_addr constant [22 x i8] c"\09%s\09%s\09%s\09%.0f\09%s\09%s\0A\00", align 1
@.str.15.55 = private unnamed_addr constant [25 x i8] c"Error writing to %s: %s\0A\00", align 1
@.str.16.56 = private unnamed_addr constant [22 x i8] c"Error closing %s: %s\0A\00", align 1
@.str.17.57 = private unnamed_addr constant [22 x i8] c"Done saving cookies.\0A\00", align 1
@.str.58 = private unnamed_addr constant [35 x i8] c"Wrote HTML-ized index to %s [%s].\0A\00", align 1
@.str.1.59 = private unnamed_addr constant [30 x i8] c"Wrote HTML-ized index to %s.\0A\00", align 1
@.str.29.60 = private unnamed_addr constant [40 x i8] c"File %s already there; not retrieving.\0A\00", align 1
@.str.30.61 = private unnamed_addr constant [9 x i8] c"        \00", align 1
@.str.31.62 = private unnamed_addr constant [10 x i8] c"(try:%2d)\00", align 1
@.str.32.63 = private unnamed_addr constant [23 x i8] c"--%s--  %s\0A  %s => %s\0A\00", align 1
@.str.33.64 = private unnamed_addr constant [35 x i8] c"Server does not support AUTH TLS.\0A\00", align 1
@.str.34.65 = private unnamed_addr constant [49 x i8] c"Server does not like implicit FTPS connections.\0A\00", align 1
@.str.35.66 = private unnamed_addr constant [37 x i8] c"%s (%s) - written to stdout %s[%s]\0A\0A\00", align 1
@.str.36.67 = private unnamed_addr constant [26 x i8] c"%s (%s) - %s saved [%s]\0A\0A\00", align 1
@.str.37.68 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.38.69 = private unnamed_addr constant [30 x i8] c"%s URL: %s [%s] -> \22%s\22 [%d]\0A\00", align 1
@.str.39.70 = private unnamed_addr constant [61 x i8] c"Removing file due to --delete-after in ftp_loop_internal():\0A\00", align 1
@.str.40.71 = private unnamed_addr constant [14 x i8] c"Removing %s.\0A\00", align 1
@.str.4.72 = private unnamed_addr constant [12 x i8] c"unlink: %s\0A\00", align 1
@.str.41.73 = private unnamed_addr constant [10 x i8] c"anonymous\00", align 1
@.str.42.74 = private unnamed_addr constant [7 x i8] c"-wget@\00", align 1
@.str.43.75 = private unnamed_addr constant [47 x i8] c"Could not initialize SSL. It will be disabled.\00", align 1
@.str.44.76 = private unnamed_addr constant [60 x i8] c"Implicit FTPS was specified. Rewriting default port to %d.\0A\00", align 1
@.str.45.77 = private unnamed_addr constant [22 x i8] c"Logging in as %s ... \00", align 1
@.str.18.78 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.46.79 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.47.80 = private unnamed_addr constant [55 x i8] c"Error in server response, closing control connection.\0A\00", align 1
@.str.48 = private unnamed_addr constant [27 x i8] c"Error in server greeting.\0A\00", align 1
@.str.49 = private unnamed_addr constant [43 x i8] c"Write failed, closing control connection.\0A\00", align 1
@.str.50 = private unnamed_addr constant [27 x i8] c"The server refuses login.\0A\00", align 1
@.str.51 = private unnamed_addr constant [18 x i8] c"Login incorrect.\0A\00", align 1
@.str.52 = private unnamed_addr constant [12 x i8] c"Logged in!\0A\00", align 1
@.str.53 = private unnamed_addr constant [16 x i8] c"==> PBSZ 0 ... \00", align 1
@.str.54 = private unnamed_addr constant [45 x i8] c"Server did not accept the 'PBSZ 0' command.\0A\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"done.\00", align 1
@.str.56 = private unnamed_addr constant [19 x i8] c"  ==> PROT %c ... \00", align 1
@.str.57 = private unnamed_addr constant [46 x i8] c"Server did not accept the 'PROT %c' command.\0A\00", align 1
@.str.58.81 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@.str.59 = private unnamed_addr constant [14 x i8] c"==> SYST ... \00", align 1
@.str.60 = private unnamed_addr constant [44 x i8] c"Server error, can't determine system type.\0A\00", align 1
@.str.61 = private unnamed_addr constant [10 x i8] c"done.    \00", align 1
@.str.62 = private unnamed_addr constant [64 x i8] c"\0AVMS: I know it and I will use \22LIST\22 as standard list command\0A\00", align 1
@.str.63 = private unnamed_addr constant [74 x i8] c"\0AUNIX MultiNet: I know it and I will use \22LIST\22 as standard list command\0A\00", align 1
@.str.64 = private unnamed_addr constant [76 x i8] c"\0AUNIX TYPE L8: I know it and I will use \22LIST -a\22 as standard list command\0A\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"==> PWD ... \00", align 1
@.str.66 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.67 = private unnamed_addr constant [17 x i8] c"==> TYPE %c ... \00", align 1
@.str.68 = private unnamed_addr constant [48 x i8] c"Unknown type `%c', closing control connection.\0A\00", align 1
@.str.69 = private unnamed_addr constant [8 x i8] c"done.  \00", align 1
@.str.70 = private unnamed_addr constant [21 x i8] c"==> CWD not needed.\0A\00", align 1
@.str.71 = private unnamed_addr constant [28 x i8] c"changing working directory\0A\00", align 1
@.str.72 = private unnamed_addr constant [41 x i8] c"Prepended initial PWD to relative path:\0A\00", align 1
@.str.73 = private unnamed_addr constant [39 x i8] c"   pwd: '%s'\0A   old: '%s'\0A  new: '%s'\0A\00", align 1
@.str.74 = private unnamed_addr constant [39 x i8] c"Using two-step CWD for relative path.\0A\00", align 1
@.str.75 = private unnamed_addr constant [43 x i8] c"Using extra \22CWD []\22 step for VMS server.\0A\00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.77 = private unnamed_addr constant [49 x i8] c"Logically impossible section reached in getftp()\00", align 1
@.str.78 = private unnamed_addr constant [41 x i8] c"cwd_count: %d\0Acwd_start: %d\0Acwd_end: %d\0A\00", align 1
@.str.79 = private unnamed_addr constant [21 x i8] c"==> CWD (%d) %s ... \00", align 1
@.str.80 = private unnamed_addr constant [24 x i8] c"No such directory %s.\0A\0A\00", align 1
@.str.81 = private unnamed_addr constant [23 x i8] c"==> CWD not required.\0A\00", align 1
@.str.82 = private unnamed_addr constant [17 x i8] c"==> SIZE %s ... \00", align 1
@.str.83 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.84 = private unnamed_addr constant [34 x i8] c"File has already been retrieved.\0A\00", align 1
@.str.85 = private unnamed_addr constant [32 x i8] c"Cannot initiate PASV transfer.\0A\00", align 1
@.str.86 = private unnamed_addr constant [29 x i8] c"Cannot parse PASV response.\0A\00", align 1
@.str.87 = private unnamed_addr constant [33 x i8] c"trying to connect to %s port %d\0A\00", align 1
@.str.88 = private unnamed_addr constant [36 x i8] c"couldn't connect to %s port %d: %s\0A\00", align 1
@.str.89 = private unnamed_addr constant [12 x i8] c"socket: %s\0A\00", align 1
@.str.90 = private unnamed_addr constant [18 x i8] c"Bind error (%s).\0A\00", align 1
@.str.91 = private unnamed_addr constant [15 x i8] c"Invalid PORT.\0A\00", align 1
@.str.92 = private unnamed_addr constant [17 x i8] c"==> REST %s ... \00", align 1
@.str.93 = private unnamed_addr constant [38 x i8] c"\0AREST failed, starting from scratch.\0A\00", align 1
@.str.94 = private unnamed_addr constant [17 x i8] c"File %s exists.\0A\00", align 1
@.str.95 = private unnamed_addr constant [18 x i8] c"No such file %s.\0A\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"==> RETR %s ... \00", align 1
@.str.97 = private unnamed_addr constant [19 x i8] c"No such file %s.\0A\0A\00", align 1
@.str.98 = private unnamed_addr constant [14 x i8] c"==> LIST ... \00", align 1
@.str.99 = private unnamed_addr constant [32 x i8] c"No such file or directory %s.\0A\0A\00", align 1
@.str.100 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.101 = private unnamed_addr constant [36 x i8] c"Lying FTP server found, adjusting.\0A\00", align 1
@.str.102 = private unnamed_addr constant [12 x i8] c"accept: %s\0A\00", align 1
@.str.103 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.104 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.105 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.106 = private unnamed_addr constant [31 x i8] c"%s has sprung into existence.\0A\00", align 1
@.str.107 = private unnamed_addr constant [72 x i8] c"Server does not want to resume the SSL session. Trying with a new one.\0A\00", align 1
@.str.108 = private unnamed_addr constant [34 x i8] c"Could not perform SSL handshake.\0A\00", align 1
@.str.109 = private unnamed_addr constant [42 x i8] c"Resuming SSL session in data connection.\0A\00", align 1
@.str.110 = private unnamed_addr constant [37 x i8] c"%s: %s, closing control connection.\0A\00", align 1
@.str.111 = private unnamed_addr constant [32 x i8] c"%s (%s) - Data connection: %s; \00", align 1
@.str.112 = private unnamed_addr constant [11 x i8] c"%s (%s) - \00", align 1
@.str.113 = private unnamed_addr constant [28 x i8] c"Control connection closed.\0A\00", align 1
@.str.114 = private unnamed_addr constant [24 x i8] c"Data transfer aborted.\0A\00", align 1
@.str.115 = private unnamed_addr constant [4 x i8] c"425\00", align 1
@.str.116 = private unnamed_addr constant [62 x i8] c"FTPS server rejects new SSL sessions in the data connection.\0A\00", align 1
@.str.117 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.118 = private unnamed_addr constant [84 x i8] c"LIST returned more data than \22LIST -a\22: I will use \22LIST\22 as standard list command\0A\00", align 1
@.str.119 = private unnamed_addr constant [87 x i8] c"LIST returned less data than \22LIST -a\22: I will use \22LIST -a\22 as standard list command\0A\00", align 1
@.str.120 = private unnamed_addr constant [99 x i8] c"LIST returned the same amount of data of \22LIST -a\22: I will use \22LIST -a\22 as standard list command\0A\00", align 1
@.str.121 = private unnamed_addr constant [62 x i8] c"\22LIST -a\22 failed: I will use \22LIST\22 as standard list command\0A\00", align 1
@.str.137 = private unnamed_addr constant [5 x i8] c"byte\00", align 1
@.str.132 = private unnamed_addr constant [11 x i8] c"Length: %s\00", align 1
@.str.133 = private unnamed_addr constant [6 x i8] c" (%s)\00", align 1
@.str.134 = private unnamed_addr constant [20 x i8] c", %s (%s) remaining\00", align 1
@.str.135 = private unnamed_addr constant [15 x i8] c", %s remaining\00", align 1
@.str.136 = private unnamed_addr constant [20 x i8] c" (unauthoritative)\0A\00", align 1
@.str.129 = private unnamed_addr constant [14 x i8] c"==> PORT ... \00", align 1
@.str.130 = private unnamed_addr constant [14 x i8] c"==> EPRT ... \00", align 1
@.str.131 = private unnamed_addr constant [14 x i8] c"==> LPRT ... \00", align 1
@.str.126 = private unnamed_addr constant [14 x i8] c"==> PASV ... \00", align 1
@.str.127 = private unnamed_addr constant [14 x i8] c"==> EPSV ... \00", align 1
@.str.128 = private unnamed_addr constant [14 x i8] c"==> LPSV ... \00", align 1
@.str.125 = private unnamed_addr constant [36 x i8] c"Error in server response. Closing.\0A\00", align 1
@.str.122 = private unnamed_addr constant [18 x i8] c"==> AUTH TLS ... \00", align 1
@.str.123 = private unnamed_addr constant [8 x i8] c" done.\0A\00", align 1
@.str.124 = private unnamed_addr constant [56 x i8] c"Server does not support AUTH TLS. Falling back to FTP.\0A\00", align 1
@.str.6.82 = private unnamed_addr constant [15 x i8] c"Rejecting %s.\0A\00", align 1
@.str.7.83 = private unnamed_addr constant [34 x i8] c"Error matching %s against %s: %s\0A\00", align 1
@.str.8.84 = private unnamed_addr constant [27 x i8] c"No matches on pattern %s.\0A\00", align 1
@ftp_retrieve_list.depth = internal global i32 0, align 4
@.str.10.85 = private unnamed_addr constant [44 x i8] c"Recursion depth %d exceeded max. depth %d.\0A\00", align 1
@.str.11.86 = private unnamed_addr constant [60 x i8] c"Remote file no newer than local file %s -- not retrieving.\0A\00", align 1
@.str.12.87 = private unnamed_addr constant [57 x i8] c"Remote file is newer than local file %s -- retrieving.\0A\0A\00", align 1
@.str.13.88 = private unnamed_addr constant [51 x i8] c"The sizes do not match (local %s) -- retrieving.\0A\0A\00", align 1
@.str.14.89 = private unnamed_addr constant [40 x i8] c"Invalid name of the symlink, skipping.\0A\00", align 1
@.str.15.90 = private unnamed_addr constant [40 x i8] c"Already have correct symlink %s -> %s\0A\0A\00", align 1
@.str.16.91 = private unnamed_addr constant [27 x i8] c"Creating symlink %s -> %s\0A\00", align 1
@.str.17.92 = private unnamed_addr constant [13 x i8] c"symlink: %s\0A\00", align 1
@.str.19.93 = private unnamed_addr constant [24 x i8] c"Skipping directory %s.\0A\00", align 1
@.str.20.94 = private unnamed_addr constant [36 x i8] c"%s: unknown/unsupported file type.\0A\00", align 1
@.str.21.95 = private unnamed_addr constant [34 x i8] c"Unrecognized permissions for %s.\0A\00", align 1
@.str.22.96 = private unnamed_addr constant [25 x i8] c"%s: corrupt time-stamp.\0A\00", align 1
@.str.23.97 = private unnamed_addr constant [52 x i8] c"Will not retrieve dirs since depth is %d (max %d).\0A\00", align 1
@.str.24.98 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.25.99 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.26.100 = private unnamed_addr constant [54 x i8] c"Composing new CWD relative to the initial directory.\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [49 x i8] c"  odir = '%s'\0A  f->name = '%s'\0A  newdir = '%s'\0A\0A\00", align 1
@.str.28.102 = private unnamed_addr constant [54 x i8] c"Not descending to %s as it is excluded/not-included.\0A\00", align 1
@.str.9.103 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.2.104 = private unnamed_addr constant [9 x i8] c".listing\00", align 1
@.str.3.105 = private unnamed_addr constant [31 x i8] c"Using %s as listing tmp file.\0A\00", align 1
@.str.5.106 = private unnamed_addr constant [13 x i8] c"Removed %s.\0A\00", align 1
@yyin = dso_local global %struct._IO_FILE* null, align 8, !track !12
@yyout = dso_local global %struct._IO_FILE* null, align 8, !track !13
@yylineno = dso_local global i32 1, align 4
@yy_flex_debug = dso_local global i32 0, align 4
@yytext = common dso_local global i8* null, align 8, !track !14
@yyleng = common dso_local global i64 0, align 8
@yy_init = internal global i32 0, align 4
@yy_start = internal global i32 0, align 4
@stdin = external dso_local global %struct._IO_FILE*, align 8
@stdout = external dso_local global %struct._IO_FILE*, align 8
@yy_buffer_stack = internal global %struct.yy_buffer_state** null, align 8, !track !15
@yy_buffer_stack_top = internal global i64 0, align 8
@yy_c_buf_p = internal global i8* null, align 8, !track !16
@yy_hold_char = internal global i8 0, align 1
@yy_ec = internal constant [256 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 1, i32 4, i32 5, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 10, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 10, i32 10, i32 31, i32 32, i32 33, i32 10, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 44, i32 51, i32 52, i32 53, i32 54, i32 44, i32 44, i32 55, i32 44, i32 56, i32 10, i32 57, i32 10, i32 10, i32 44, i32 10, i32 58, i32 59, i32 60, i32 61, i32 62, i32 40, i32 63, i32 64, i32 65, i32 44, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 44, i32 72, i32 73, i32 74, i32 75, i32 44, i32 44, i32 76, i32 44, i32 77, i32 78, i32 79, i32 10, i32 80, i32 1, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81, i32 81], align 16
@yy_accept = internal constant <{ [1132 x i16], [21 x i16] }> <{ [1132 x i16] [i16 0, i16 0, i16 0, i16 43, i16 41, i16 1, i16 1, i16 41, i16 12, i16 41, i16 12, i16 8, i16 10, i16 41, i16 41, i16 41, i16 37, i16 41, i16 9, i16 41, i16 13, i16 13, i16 41, i16 7, i16 41, i16 41, i16 0, i16 8, i16 10, i16 0, i16 9, i16 7, i16 0, i16 0, i16 0, i16 12, i16 11, i16 0, i16 14, i16 0, i16 12, i16 0, i16 0, i16 13, i16 0, i16 37, i16 0, i16 36, i16 0, i16 0, i16 37, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 32, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 40, i16 13, i16 0, i16 13, i16 13, i16 13, i16 6, i16 5, i16 0, i16 0, i16 0, i16 12, i16 12, i16 12, i16 14, i16 14, i16 12, i16 12, i16 12, i16 4, i16 0, i16 0, i16 0, i16 35, i16 0, i16 23, i16 0, i16 35, i16 0, i16 20, i16 21, i16 0, i16 35, i16 0, i16 33, i16 0, i16 25, i16 0, i16 35, i16 0, i16 24, i16 31, i16 0, i16 27, i16 26, i16 22, i16 0, i16 35, i16 0, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 32, i16 0, i16 0, i16 0, i16 0, i16 0, i16 13, i16 13, i16 13, i16 13, i16 13, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 12, i16 12, i16 14, i16 14, i16 12, i16 12, i16 12, i16 0, i16 2, i16 35, i16 35, i16 35, i16 35, i16 35, i16 23, i16 28, i16 0, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 20, i16 21, i16 35, i16 0, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 33, i16 35, i16 35, i16 35, i16 25, i16 34, i16 0, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 24, i16 31, i16 35, i16 35, i16 35, i16 35, i16 35, i16 26, i16 22, i16 29, i16 0, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 32, i16 35, i16 35, i16 3, i16 0, i16 0, i16 0, i16 0, i16 13, i16 13, i16 40, i16 13, i16 0, i16 0, i16 0, i16 12, i16 14, i16 12, i16 0, i16 0, i16 35, i16 35, i16 35, i16 35, i16 35, i16 23, i16 23, i16 35, i16 35, i16 35, i16 28, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 20, i16 21, i16 20, i16 30, i16 0, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 33, i16 33, i16 35, i16 35, i16 35, i16 25, i16 25, i16 35, i16 35, i16 35, i16 34, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 24, i16 31, i16 24, i16 35, i16 35, i16 35, i16 35, i16 35, i16 27, i16 26, i16 22, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 32, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 27, i16 35, i16 35, i16 35, i16 32, i16 32, i16 0, i16 0, i16 0, i16 16, i16 13, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 13, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 14, i16 12, i16 35, i16 35, i16 35, i16 35, i16 23, i16 23, i16 23, i16 23, i16 35, i16 35, i16 35, i16 28, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 20, i16 21, i16 20, i16 20, i16 20, i16 21, i16 21, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 33, i16 33, i16 33, i16 33, i16 35, i16 35, i16 35, i16 25, i16 25, i16 25, i16 25, i16 35, i16 35, i16 35, i16 34, i16 34, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 24, i16 31, i16 24, i16 24, i16 24, i16 31, i16 31, i16 35, i16 35, i16 35, i16 35, i16 35, i16 27, i16 26, i16 22, i16 27, i16 27, i16 26, i16 26, i16 22, i16 22, i16 35, i16 35, i16 35, i16 29, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 29, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 32, i16 35, i16 35, i16 35, i16 27, i16 35, i16 29, i16 0, i16 0, i16 17, i16 13, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 13, i16 0, i16 12, i16 14, i16 12, i16 35, i16 35, i16 35, i16 35, i16 23, i16 23, i16 35, i16 35, i16 35, i16 28, i16 28, i16 28, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 20, i16 21, i16 20, i16 35, i16 35, i16 35, i16 30, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 30, i16 35, i16 35, i16 35, i16 35, i16 35, i16 30, i16 35, i16 35, i16 35, i16 33, i16 33, i16 35, i16 35, i16 35, i16 25, i16 25, i16 35, i16 35, i16 35, i16 34, i16 34, i16 34, i16 34, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 24, i16 31, i16 24, i16 35, i16 35, i16 35, i16 35, i16 35, i16 27, i16 26, i16 22, i16 35, i16 35, i16 35, i16 29, i16 29, i16 29, i16 35, i16 35, i16 35, i16 35, i16 29, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 32, i16 35, i16 35, i16 35, i16 27, i16 35, i16 29, i16 0, i16 15, i16 13, i16 0, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 13, i16 0, i16 12, i16 14, i16 12, i16 35, i16 35, i16 35, i16 23, i16 23, i16 35, i16 35, i16 35, i16 28, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 20, i16 21, i16 20, i16 35, i16 35, i16 35, i16 30, i16 30, i16 30, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 30, i16 35, i16 35, i16 33, i16 33, i16 35, i16 35, i16 25, i16 25, i16 35, i16 35, i16 35, i16 34, i16 34, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 24, i16 31, i16 24, i16 35, i16 35, i16 35, i16 35, i16 27, i16 26, i16 22, i16 35, i16 35, i16 35, i16 29, i16 35, i16 35, i16 35, i16 29, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 32, i16 35, i16 35, i16 35, i16 27, i16 35, i16 29, i16 0, i16 13, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 35, i16 23, i16 23, i16 35, i16 35, i16 28, i16 35, i16 20, i16 21, i16 20, i16 35, i16 35, i16 35, i16 30, i16 35, i16 35, i16 35, i16 35, i16 35, i16 30, i16 33, i16 33, i16 25, i16 25, i16 35, i16 35, i16 34, i16 34, i16 35, i16 24, i16 31, i16 24, i16 27, i16 26, i16 22, i16 35, i16 35, i16 29, i16 35, i16 29, i16 18, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 19, i16 28, i16 35, i16 35, i16 30, i16 35, i16 34, i16 34, i16 29, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 30, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 38, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 39, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 38], [21 x i16] zeroinitializer }>, align 16
@yy_last_accepting_state = internal global i32 0, align 4
@yy_last_accepting_cpos = internal global i8* null, align 8, !track !17
@yy_base = internal constant [1307 x i16] [i16 0, i16 0, i16 0, i16 3517, i16 17264, i16 80, i16 85, i16 104, i16 84, i16 3459, i16 81, i16 17264, i16 17264, i16 76, i16 127, i16 3494, i16 159, i16 3501, i16 17264, i16 200, i16 82, i16 225, i16 277, i16 17264, i16 3474, i16 3462, i16 250, i16 17264, i16 17264, i16 3478, i16 17264, i16 17264, i16 125, i16 3456, i16 51, i16 103, i16 17264, i16 337, i16 3413, i16 379, i16 87, i16 439, i16 3436, i16 102, i16 481, i16 265, i16 3453, i16 17264, i16 3400, i16 297, i16 0, i16 3399, i16 57, i16 64, i16 204, i16 65, i16 115, i16 200, i16 78, i16 377, i16 294, i16 108, i16 3398, i16 543, i16 3416, i16 70, i16 93, i16 84, i16 204, i16 17264, i16 119, i16 604, i16 365, i16 228, i16 665, i16 17264, i16 17264, i16 3418, i16 3417, i16 192, i16 273, i16 326, i16 726, i16 3363, i16 787, i16 105, i16 368, i16 848, i16 17264, i16 3404, i16 159, i16 890, i16 3361, i16 943, i16 3353, i16 985, i16 328, i16 363, i16 3352, i16 3351, i16 630, i16 275, i16 875, i16 3321, i16 690, i16 3320, i16 465, i16 336, i16 1008, i16 3319, i16 3318, i16 1013, i16 3310, i16 3308, i16 3307, i16 1036, i16 390, i16 468, i16 3306, i16 1111, i16 427, i16 1069, i16 501, i16 397, i16 715, i16 207, i16 414, i16 425, i16 595, i16 877, i16 720, i16 603, i16 3297, i16 3335, i16 238, i16 386, i16 318, i16 386, i16 295, i16 1172, i16 296, i16 825, i16 1214, i16 3326, i16 229, i16 3324, i16 328, i16 410, i16 337, i16 480, i16 1256, i16 188, i16 1298, i16 332, i16 642, i16 1340, i16 3323, i16 1387, i16 3275, i16 1464, i16 460, i16 385, i16 485, i16 3274, i16 3260, i16 1384, i16 654, i16 3289, i16 3283, i16 774, i16 611, i16 3266, i16 612, i16 3265, i16 3223, i16 3215, i16 721, i16 812, i16 329, i16 3248, i16 3240, i16 639, i16 686, i16 618, i16 675, i16 3204, i16 747, i16 682, i16 742, i16 3189, i16 3180, i16 1136, i16 809, i16 3207, i16 3197, i16 741, i16 836, i16 768, i16 3199, i16 781, i16 3188, i16 3141, i16 3132, i16 963, i16 3164, i16 249, i16 3163, i16 357, i16 3129, i16 3122, i16 3121, i16 1053, i16 868, i16 3149, i16 3147, i16 427, i16 1506, i16 971, i16 1412, i16 1099, i16 820, i16 1161, i16 1567, i16 1550, i16 1340, i16 1572, i16 1580, i16 1598, i16 1628, i16 1647, i16 1719, i16 1794, i16 1212, i16 1674, i16 1737, i16 17264, i16 463, i16 771, i16 670, i16 793, i16 891, i16 1851, i16 1745, i16 1893, i16 3136, i16 3135, i16 840, i16 1935, i16 1977, i16 2019, i16 3128, i16 406, i16 840, i16 2061, i16 898, i16 829, i16 860, i16 1064, i16 1150, i16 1027, i16 3112, i16 3104, i16 3073, i16 1050, i16 3102, i16 3093, i16 1454, i16 1198, i16 875, i16 3089, i16 890, i16 3087, i16 1253, i16 1258, i16 1295, i16 3048, i16 2103, i16 1081, i16 3081, i16 3079, i16 918, i16 3071, i16 3068, i16 1503, i16 931, i16 942, i16 958, i16 1300, i16 1305, i16 1326, i16 955, i16 956, i16 1379, i16 1424, i16 1030, i16 984, i16 991, i16 3021, i16 1327, i16 3043, i16 3036, i16 1656, i16 1396, i16 998, i16 3040, i16 1050, i16 3039, i16 1472, i16 1477, i16 1510, i16 1661, i16 3032, i16 655, i16 3030, i16 778, i16 1545, i16 1724, i16 1758, i16 1385, i16 3021, i16 2981, i16 1424, i16 2983, i16 2977, i16 1844, i16 2145, i16 1680, i16 1806, i16 1871, i16 1106, i16 1913, i16 2206, i16 2189, i16 2211, i16 2218, i16 2235, i16 2291, i16 2304, i16 2317, i16 2389, i16 2464, i16 1974, i16 2323, i16 2331, i16 1035, i16 1687, i16 1209, i16 1559, i16 1843, i16 1733, i16 2295, i16 1109, i16 1554, i16 1102, i16 1441, i16 1386, i16 1415, i16 1163, i16 1653, i16 1646, i16 2215, i16 2329, i16 2359, i16 1786, i16 1171, i16 1606, i16 2403, i16 2932, i16 863, i16 1194, i16 1217, i16 1145, i16 17264, i16 2502, i16 2492, i16 2563, i16 712, i16 748, i16 17264, i16 2576, i16 2633, i16 2713, i16 2973, i16 756, i16 2954, i16 820, i16 1276, i16 2774, i16 2835, i16 2915, i16 2957, i16 1644, i16 1184, i16 1227, i16 1765, i16 1835, i16 2878, i16 971, i16 1647, i16 2900, i16 2887, i16 1856, i16 1756, i16 2888, i16 2887, i16 2513, i16 1331, i16 2185, i16 1921, i16 1252, i16 2840, i16 1294, i16 2839, i16 1979, i16 1984, i16 2016, i16 2810, i16 973, i16 2798, i16 1028, i16 2002, i16 2829, i16 2826, i16 2003, i16 2786, i16 2784, i16 2448, i16 1587, i16 2770, i16 2740, i16 2058, i16 1523, i16 2099, i16 1358, i16 1797, i16 1461, i16 1505, i16 2063, i16 2068, i16 2688, i16 1284, i16 2082, i16 1548, i16 1560, i16 2108, i16 2142, i16 2687, i16 1534, i16 2132, i16 1585, i16 1700, i16 2194, i16 2311, i16 2222, i16 2704, i16 2702, i16 2405, i16 1729, i16 2173, i16 2328, i16 1714, i16 2701, i16 1765, i16 2608, i16 2469, i16 2474, i16 2541, i16 2561, i16 1680, i16 2560, i16 1688, i16 2530, i16 2565, i16 1613, i16 2563, i16 1753, i16 2595, i16 2600, i16 2605, i16 2529, i16 1697, i16 2528, i16 1788, i16 2502, i16 2047, i16 2234, i16 2527, i16 2495, i16 2610, i16 2320, i16 2492, i16 2486, i16 2724, i16 1847, i16 2216, i16 0, i16 2999, i16 1899, i16 2730, i16 2598, i16 2791, i16 2821, i16 3005, i16 3038, i16 2998, i16 3045, i16 3065, i16 3077, i16 3084, i16 3133, i16 3205, i16 3156, i16 2955, i16 3161, i16 3170, i16 2905, i16 1941, i16 3167, i16 2124, i16 1804, i16 1361, i16 17264, i16 3261, i16 3227, i16 3322, i16 857, i16 3341, i16 3377, i16 918, i16 3437, i16 3499, i16 3354, i16 3518, i16 3531, i16 3556, i16 3575, i16 3631, i16 3693, i16 3773, i16 1975, i16 3834, i16 3876, i16 3937, i16 3979, i16 148, i16 1973, i16 2014, i16 2625, i16 2718, i16 2352, i16 2474, i16 2465, i16 2820, i16 2427, i16 2048, i16 250, i16 2433, i16 2430, i16 3251, i16 2274, i16 2015, i16 2389, i16 2056, i16 2371, i16 2920, i16 2961, i16 3105, i16 2396, i16 2372, i16 2351, i16 3151, i16 2413, i16 2348, i16 2335, i16 3272, i16 2098, i16 2729, i16 0, i16 504, i16 2308, i16 2301, i16 3386, i16 2382, i16 0, i16 620, i16 2060, i16 2119, i16 3264, i16 3300, i16 960, i16 2139, i16 2140, i16 3346, i16 3367, i16 2250, i16 2246, i16 2309, i16 3381, i16 3391, i16 2227, i16 2132, i16 1104, i16 2241, i16 2231, i16 3544, i16 2508, i16 2337, i16 2221, i16 2364, i16 2211, i16 3420, i16 3425, i16 3443, i16 2567, i16 2201, i16 1779, i16 2163, i16 1799, i16 3448, i16 3476, i16 3481, i16 2486, i16 2161, i16 2001, i16 3486, i16 1968, i16 2187, i16 1118, i16 1986, i16 1970, i16 3624, i16 0, i16 4021, i16 3579, i16 1350, i16 3790, i16 2424, i16 3819, i16 4027, i16 3876, i16 4018, i16 3978, i16 3922, i16 4068, i16 4089, i16 4094, i16 4102, i16 3644, i16 4110, i16 4124, i16 2248, i16 0, i16 2708, i16 0, i16 1379, i16 17264, i16 4177, i16 1976, i16 4239, i16 4258, i16 17264, i16 1920, i16 1405, i16 2398, i16 4295, i16 1061, i16 3072, i16 4356, i16 1887, i16 4265, i16 4418, i16 1878, i16 4475, i16 4532, i16 4589, i16 4288, i16 4669, i16 4730, i16 1548, i16 3784, i16 4772, i16 4814, i16 4856, i16 2420, i16 2449, i16 3670, i16 3778, i16 1918, i16 1855, i16 1835, i16 3841, i16 1791, i16 1790, i16 4115, i16 2512, i16 1763, i16 2709, i16 1744, i16 3915, i16 3951, i16 3983, i16 2767, i16 1721, i16 1711, i16 4180, i16 1661, i16 2261, i16 2081, i16 1689, i16 1675, i16 4220, i16 1661, i16 1631, i16 4307, i16 2726, i16 0, i16 2726, i16 2770, i16 4185, i16 4225, i16 2768, i16 2804, i16 4334, i16 4344, i16 2304, i16 2912, i16 2913, i16 4367, i16 4395, i16 1618, i16 1596, i16 4405, i16 2953, i16 1582, i16 3038, i16 1555, i16 4400, i16 4437, i16 4442, i16 1535, i16 1878, i16 1515, i16 2227, i16 4447, i16 4452, i16 4461, i16 2388, i16 1496, i16 1495, i16 4466, i16 1442, i16 1432, i16 4501, i16 0, i16 4494, i16 4506, i16 4511, i16 4853, i16 4862, i16 4769, i16 4518, i16 4682, i16 4899, i16 4920, i16 4524, i16 4812, i16 4934, i16 4956, i16 4979, i16 4984, i16 5012, i16 5028, i16 1440, i16 4574, i16 1371, i16 1334, i16 5041, i16 5085, i16 1325, i16 5142, i16 5199, i16 5256, i16 1324, i16 1453, i16 3090, i16 5336, i16 1616, i16 3111, i16 5397, i16 1064, i16 1316, i16 1315, i16 5060, i16 5459, i16 1297, i16 5104, i16 5516, i16 5597, i16 5654, i16 5711, i16 5768, i16 5825, i16 5882, i16 5939, i16 5996, i16 6058, i16 6138, i16 1628, i16 5123, i16 5128, i16 5133, i16 6199, i16 0, i16 4674, i16 5165, i16 5170, i16 5189, i16 5347, i16 6241, i16 2476, i16 2547, i16 4713, i16 359, i16 1922, i16 5438, i16 5381, i16 5443, i16 5616, i16 5621, i16 5626, i16 5631, i16 5636, i16 3069, i16 3142, i16 4775, i16 4817, i16 5641, i16 5646, i16 5702, i16 5730, i16 5735, i16 5740, i16 5745, i16 139, i16 2315, i16 5227, i16 5751, i16 5758, i16 17264, i16 2265, i16 1206, i16 1176, i16 5233, i16 6303, i16 1175, i16 5844, i16 6360, i16 6441, i16 6498, i16 6555, i16 6612, i16 6669, i16 6726, i16 6783, i16 6840, i16 6902, i16 1104, i16 2407, i16 6982, i16 7043, i16 2417, i16 1094, i16 2468, i16 5482, i16 1086, i16 1072, i16 7105, i16 7162, i16 7219, i16 7276, i16 7357, i16 7414, i16 7471, i16 7528, i16 7585, i16 7642, i16 7699, i16 0, i16 1022, i16 5851, i16 7761, i16 1012, i16 7818, i16 7875, i16 7956, i16 8013, i16 8074, i16 17264, i16 5815, i16 8135, i16 0, i16 4739, i16 5871, i16 5901, i16 5908, i16 5913, i16 2533, i16 971, i16 2914, i16 5958, i16 945, i16 934, i16 8197, i16 8254, i16 8311, i16 8368, i16 8449, i16 8506, i16 8563, i16 8620, i16 8677, i16 8734, i16 8791, i16 0, i16 923, i16 6322, i16 8853, i16 912, i16 8910, i16 8967, i16 9048, i16 9105, i16 884, i16 9166, i16 9227, i16 9289, i16 3100, i16 9346, i16 9403, i16 9460, i16 877, i16 3129, i16 6329, i16 853, i16 816, i16 9522, i16 9579, i16 9636, i16 9693, i16 4940, i16 3607, i16 9774, i16 9831, i16 9888, i16 9945, i16 10002, i16 10059, i16 10116, i16 10173, i16 0, i16 10235, i16 10315, i16 5918, i16 3182, i16 10377, i16 10434, i16 10491, i16 806, i16 3184, i16 6460, i16 764, i16 755, i16 10553, i16 10610, i16 10667, i16 10724, i16 10805, i16 10862, i16 10919, i16 10976, i16 11033, i16 11090, i16 11147, i16 0, i16 11209, i16 730, i16 3200, i16 11270, i16 11331, i16 11393, i16 3201, i16 11474, i16 4996, i16 6467, i16 5672, i16 11529, i16 4271, i16 6228, i16 11589, i16 11651, i16 11708, i16 11765, i16 11827, i16 6517, i16 11908, i16 3219, i16 11989, i16 12046, i16 12103, i16 12165, i16 5980, i16 6284, i16 12226, i16 6524, i16 704, i16 694, i16 5374, i16 6574, i16 6579, i16 12286, i16 5795, i16 4706, i16 6587, i16 12347, i16 5922, i16 6635, i16 12407, i16 6593, i16 3587, i16 6648, i16 12468, i16 693, i16 6692, i16 12530, i16 668, i16 12587, i16 12644, i16 12725, i16 12806, i16 12868, i16 12949, i16 13030, i16 13091, i16 3220, i16 6696, i16 6745, i16 6705, i16 13151, i16 6752, i16 667, i16 632, i16 1582, i16 2941, i16 6765, i16 5044, i16 6801, i16 13212, i16 6815, i16 6824, i16 13273, i16 6630, i16 7072, i16 13333, i16 2080, i16 3236, i16 7123, i16 4138, i16 7127, i16 13394, i16 7140, i16 7145, i16 13455, i16 621, i16 3229, i16 7184, i16 620, i16 533, i16 13517, i16 13574, i16 13631, i16 13688, i16 13769, i16 13826, i16 13883, i16 13940, i16 13997, i16 14054, i16 14111, i16 0, i16 14173, i16 14254, i16 14311, i16 14392, i16 14473, i16 14530, i16 532, i16 3230, i16 7238, i16 3244, i16 7188, i16 7202, i16 7375, i16 14586, i16 14647, i16 7381, i16 7394, i16 7398, i16 14689, i16 14731, i16 3292, i16 14793, i16 14850, i16 14887, i16 14929, i16 14971, i16 15013, i16 523, i16 3296, i16 516, i16 5487, i16 481, i16 457, i16 15055, i16 15097, i16 15139, i16 15181, i16 15223, i16 15265, i16 15307, i16 405, i16 3298, i16 17264, i16 397, i16 3320, i16 15349, i16 15391, i16 15433, i16 15475, i16 15517, i16 331, i16 296, i16 15559, i16 15601, i16 15643, i16 15685, i16 15727, i16 231, i16 178, i16 3495, i16 15769, i16 15811, i16 15853, i16 17264, i16 15915, i16 15918, i16 15927, i16 15930, i16 15934, i16 15943, i16 15952, i16 15961, i16 15970, i16 15979, i16 127, i16 15982, i16 15991, i16 16000, i16 16009, i16 16018, i16 16027, i16 16036, i16 16045, i16 16054, i16 16062, i16 16071, i16 16080, i16 16089, i16 16098, i16 16107, i16 16116, i16 16125, i16 16134, i16 16143, i16 16152, i16 16161, i16 16170, i16 16179, i16 16188, i16 16197, i16 16206, i16 16215, i16 16224, i16 16232, i16 16241, i16 16250, i16 16259, i16 16268, i16 16277, i16 16286, i16 16295, i16 16304, i16 16313, i16 16322, i16 16331, i16 16340, i16 16349, i16 16358, i16 16367, i16 16376, i16 16385, i16 16394, i16 16403, i16 16412, i16 16421, i16 16430, i16 16439, i16 16448, i16 16457, i16 16466, i16 16475, i16 16484, i16 16493, i16 16501, i16 16510, i16 16519, i16 16528, i16 16537, i16 16546, i16 16555, i16 16564, i16 16573, i16 16582, i16 16591, i16 16600, i16 16609, i16 16618, i16 16627, i16 16636, i16 16645, i16 16654, i16 16663, i16 16672, i16 16680, i16 16688, i16 16697, i16 16706, i16 16715, i16 16724, i16 16733, i16 16742, i16 16751, i16 16760, i16 16769, i16 16778, i16 16787, i16 16796, i16 16805, i16 16814, i16 16823, i16 16832, i16 16841, i16 16850, i16 16859, i16 16868, i16 16877, i16 16886, i16 16894, i16 16903, i16 16912, i16 16921, i16 16930, i16 16939, i16 16948, i16 16957, i16 16966, i16 16975, i16 16984, i16 16993, i16 17002, i16 17011, i16 17020, i16 17029, i16 17038, i16 17047, i16 17056, i16 17065, i16 17074, i16 17083, i16 17092, i16 17101, i16 17110, i16 17119, i16 17128, i16 17137, i16 17146, i16 17155, i16 17164, i16 17173, i16 17182, i16 17191, i16 17200, i16 17209, i16 17218, i16 17227, i16 17236, i16 17245, i16 17254], align 16
@yy_chk = internal constant [17346 x i16] [i16 0, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 5, i16 5, i16 5, i16 5, i16 5, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 13, i16 20, i16 5, i16 5, i16 34, i16 40, i16 5, i16 6, i16 6, i16 53, i16 52, i16 6, i16 7, i16 7, i16 7, i16 7, i16 7, i16 35, i16 65, i16 5, i16 52, i16 43, i16 55, i16 85, i16 6, i16 34, i16 58, i16 53, i16 55, i16 67, i16 7, i16 52, i16 53, i16 32, i16 32, i16 32, i16 32, i16 32, i16 70, i16 13, i16 65, i16 58, i16 1163, i16 55, i16 10, i16 20, i16 66, i16 8, i16 58, i16 61, i16 40, i16 32, i16 67, i16 7, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 14, i16 5, i16 43, i16 35, i16 66, i16 85, i16 6, i16 843, i16 61, i16 61, i16 843, i16 32, i16 7, i16 16, i16 56, i16 56, i16 544, i16 90, i16 544, i16 70, i16 16, i16 16, i16 90, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 32, i16 151, i16 56, i16 1147, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 19, i16 21, i16 68, i16 16, i16 73, i16 79, i16 19, i16 144, i16 151, i16 1146, i16 19, i16 57, i16 144, i16 19, i16 54, i16 26, i16 26, i16 26, i16 26, i16 26, i16 57, i16 125, i16 54, i16 19, i16 54, i16 68, i16 79, i16 125, i16 19, i16 26, i16 26, i16 19, i16 57, i16 26, i16 19, i16 54, i16 134, i16 205, i16 555, i16 21, i16 555, i16 205, i16 125, i16 54, i16 80, i16 21, i16 26, i16 45, i16 73, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 134, i16 21, i16 22, i16 22, i16 22, i16 22, i16 22, i16 22, i16 22, i16 22, i16 22, i16 22, i16 138, i16 140, i16 101, i16 1140, i16 22, i16 22, i16 22, i16 22, i16 22, i16 22, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 49, i16 26, i16 81, i16 80, i16 60, i16 101, i16 101, i16 81, i16 22, i16 22, i16 22, i16 22, i16 22, i16 37, i16 37, i16 37, i16 146, i16 153, i16 148, i16 1139, i16 60, i16 146, i16 60, i16 178, i16 60, i16 138, i16 140, i16 60, i16 178, i16 136, i16 178, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 60, i16 96, i16 60, i16 86, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 72, i16 136, i16 86, i16 822, i16 207, i16 81, i16 97, i16 96, i16 207, i16 822, i16 97, i16 153, i16 97, i16 96, i16 107, i16 107, i16 148, i16 37, i16 37, i16 37, i16 37, i16 37, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 97, i16 72, i16 1132, i16 107, i16 39, i16 39, i16 39, i16 39, i16 39, i16 39, i16 1129, i16 251, i16 72, i16 161, i16 59, i16 86, i16 251, i16 137, i16 116, i16 59, i16 215, i16 97, i16 72, i16 123, i16 59, i16 123, i16 135, i16 39, i16 39, i16 39, i16 39, i16 39, i16 41, i16 41, i16 41, i16 59, i16 161, i16 116, i16 120, i16 137, i16 59, i16 116, i16 120, i16 120, i16 120, i16 120, i16 123, i16 135, i16 123, i16 147, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 126, i16 126, i16 1121, i16 127, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 147, i16 160, i16 127, i16 149, i16 215, i16 160, i16 106, i16 160, i16 149, i16 117, i16 106, i16 126, i16 106, i16 117, i16 127, i16 117, i16 1120, i16 41, i16 41, i16 41, i16 41, i16 41, i16 44, i16 44, i16 44, i16 44, i16 44, i16 44, i16 44, i16 44, i16 44, i16 44, i16 106, i16 106, i16 236, i16 117, i16 44, i16 44, i16 44, i16 44, i16 44, i16 44, i16 122, i16 162, i16 122, i16 122, i16 122, i16 122, i16 122, i16 122, i16 578, i16 1118, i16 578, i16 106, i16 106, i16 236, i16 117, i16 149, i16 1116, i16 44, i16 44, i16 44, i16 44, i16 44, i16 63, i16 63, i16 162, i16 1095, i16 1076, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 71, i16 71, i16 71, i16 71, i16 71, i16 71, i16 71, i16 71, i16 71, i16 71, i16 1075, i16 1072, i16 128, i16 131, i16 71, i16 71, i16 71, i16 71, i16 71, i16 71, i16 154, i16 584, i16 1050, i16 584, i16 170, i16 172, i16 100, i16 128, i16 183, i16 154, i16 100, i16 100, i16 100, i16 100, i16 128, i16 131, i16 131, i16 71, i16 71, i16 71, i16 71, i16 71, i16 74, i16 74, i16 74, i16 74, i16 74, i16 170, i16 172, i16 181, i16 166, i16 183, i16 100, i16 74, i16 166, i16 312, i16 166, i16 1049, i16 1034, i16 312, i16 100, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 181, i16 181, i16 100, i16 154, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 100, i16 182, i16 1031, i16 1015, i16 184, i16 104, i16 182, i16 238, i16 182, i16 104, i16 104, i16 104, i16 104, i16 1014, i16 376, i16 187, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 82, i16 82, i16 82, i16 82, i16 82, i16 184, i16 82, i16 238, i16 124, i16 104, i16 124, i16 124, i16 124, i16 124, i16 124, i16 124, i16 187, i16 985, i16 104, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 130, i16 104, i16 176, i16 377, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 104, i16 186, i16 376, i16 971, i16 383, i16 186, i16 130, i16 186, i16 130, i16 383, i16 130, i16 176, i16 970, i16 130, i16 188, i16 176, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 84, i16 84, i16 84, i16 84, i16 84, i16 130, i16 169, i16 130, i16 195, i16 195, i16 169, i16 169, i16 169, i16 169, i16 314, i16 188, i16 377, i16 197, i16 314, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 195, i16 199, i16 237, i16 967, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 141, i16 197, i16 192, i16 944, i16 239, i16 177, i16 192, i16 385, i16 192, i16 177, i16 141, i16 177, i16 385, i16 237, i16 199, i16 252, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 87, i16 87, i16 87, i16 87, i16 87, i16 239, i16 220, i16 196, i16 220, i16 177, i16 87, i16 196, i16 196, i16 196, i16 196, i16 525, i16 368, i16 255, i16 943, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 220, i16 177, i16 220, i16 141, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 212, i16 255, i16 246, i16 940, i16 212, i16 240, i16 212, i16 102, i16 252, i16 256, i16 932, i16 102, i16 102, i16 102, i16 102, i16 240, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 91, i16 246, i16 268, i16 525, i16 91, i16 91, i16 91, i16 91, i16 254, i16 368, i16 256, i16 102, i16 254, i16 129, i16 254, i16 102, i16 927, i16 270, i16 129, i16 528, i16 91, i16 91, i16 91, i16 129, i16 91, i16 268, i16 91, i16 924, i16 280, i16 91, i16 91, i16 91, i16 102, i16 280, i16 129, i16 280, i16 102, i16 240, i16 911, i16 129, i16 270, i16 284, i16 91, i16 91, i16 91, i16 91, i16 284, i16 91, i16 284, i16 910, i16 91, i16 91, i16 91, i16 93, i16 93, i16 93, i16 93, i16 93, i16 93, i16 93, i16 93, i16 93, i16 93, i16 397, i16 528, i16 417, i16 285, i16 93, i16 93, i16 93, i16 93, i16 93, i16 93, i16 203, i16 589, i16 907, i16 589, i16 203, i16 203, i16 203, i16 203, i16 217, i16 286, i16 290, i16 291, i16 217, i16 217, i16 217, i16 217, i16 285, i16 93, i16 93, i16 93, i16 93, i16 93, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 286, i16 290, i16 291, i16 295, i16 95, i16 95, i16 95, i16 95, i16 95, i16 95, i16 296, i16 891, i16 397, i16 108, i16 417, i16 419, i16 95, i16 108, i16 111, i16 108, i16 303, i16 888, i16 111, i16 111, i16 111, i16 111, i16 295, i16 95, i16 95, i16 95, i16 95, i16 95, i16 259, i16 296, i16 108, i16 294, i16 259, i16 95, i16 259, i16 108, i16 294, i16 115, i16 294, i16 303, i16 111, i16 115, i16 115, i16 115, i16 115, i16 111, i16 257, i16 257, i16 257, i16 257, i16 257, i16 263, i16 108, i16 665, i16 211, i16 263, i16 108, i16 263, i16 211, i16 789, i16 211, i16 111, i16 344, i16 115, i16 789, i16 419, i16 111, i16 875, i16 305, i16 115, i16 121, i16 115, i16 344, i16 121, i16 121, i16 121, i16 121, i16 121, i16 121, i16 121, i16 211, i16 874, i16 277, i16 344, i16 115, i16 121, i16 277, i16 121, i16 277, i16 871, i16 115, i16 305, i16 115, i16 119, i16 119, i16 119, i16 119, i16 119, i16 665, i16 866, i16 219, i16 211, i16 219, i16 219, i16 219, i16 219, i16 219, i16 219, i16 121, i16 601, i16 121, i16 601, i16 119, i16 119, i16 119, i16 119, i16 119, i16 119, i16 119, i16 119, i16 119, i16 119, i16 329, i16 627, i16 329, i16 627, i16 119, i16 119, i16 119, i16 119, i16 119, i16 119, i16 258, i16 258, i16 258, i16 258, i16 258, i16 191, i16 353, i16 353, i16 351, i16 191, i16 191, i16 191, i16 191, i16 329, i16 351, i16 329, i16 119, i16 119, i16 119, i16 119, i16 119, i16 119, i16 139, i16 139, i16 139, i16 139, i16 139, i16 353, i16 371, i16 351, i16 221, i16 191, i16 221, i16 221, i16 221, i16 221, i16 221, i16 221, i16 854, i16 851, i16 191, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 371, i16 191, i16 357, i16 364, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 191, i16 232, i16 232, i16 232, i16 232, i16 232, i16 267, i16 357, i16 850, i16 392, i16 267, i16 267, i16 267, i16 267, i16 357, i16 364, i16 364, i16 139, i16 139, i16 139, i16 139, i16 139, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 392, i16 369, i16 232, i16 346, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 272, i16 272, i16 272, i16 272, i16 272, i16 273, i16 273, i16 273, i16 273, i16 273, i16 393, i16 346, i16 369, i16 370, i16 232, i16 232, i16 346, i16 142, i16 142, i16 142, i16 142, i16 142, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 440, i16 393, i16 370, i16 409, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 274, i16 274, i16 274, i16 274, i16 274, i16 287, i16 287, i16 287, i16 287, i16 287, i16 288, i16 288, i16 288, i16 288, i16 288, i16 794, i16 409, i16 150, i16 150, i16 150, i16 150, i16 150, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 386, i16 791, i16 790, i16 411, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 782, i16 778, i16 440, i16 224, i16 224, i16 224, i16 224, i16 224, i16 289, i16 298, i16 775, i16 386, i16 289, i16 298, i16 289, i16 298, i16 411, i16 152, i16 152, i16 152, i16 152, i16 152, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 634, i16 406, i16 634, i16 634, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 292, i16 292, i16 292, i16 292, i16 292, i16 774, i16 224, i16 406, i16 157, i16 157, i16 157, i16 157, i16 157, i16 406, i16 224, i16 433, i16 224, i16 155, i16 155, i16 155, i16 155, i16 155, i16 157, i16 157, i16 165, i16 318, i16 157, i16 224, i16 165, i16 318, i16 165, i16 318, i16 662, i16 520, i16 433, i16 224, i16 302, i16 356, i16 433, i16 157, i16 302, i16 302, i16 302, i16 302, i16 165, i16 293, i16 293, i16 293, i16 293, i16 293, i16 165, i16 654, i16 218, i16 355, i16 520, i16 218, i16 218, i16 218, i16 218, i16 218, i16 218, i16 218, i16 355, i16 354, i16 321, i16 772, i16 165, i16 218, i16 321, i16 218, i16 321, i16 165, i16 654, i16 751, i16 355, i16 266, i16 266, i16 266, i16 266, i16 266, i16 783, i16 662, i16 356, i16 750, i16 157, i16 159, i16 159, i16 159, i16 159, i16 159, i16 218, i16 356, i16 218, i16 307, i16 307, i16 307, i16 307, i16 307, i16 308, i16 308, i16 308, i16 308, i16 308, i16 356, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 266, i16 435, i16 354, i16 354, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 283, i16 283, i16 283, i16 283, i16 283, i16 783, i16 266, i16 309, i16 309, i16 309, i16 309, i16 309, i16 266, i16 354, i16 435, i16 748, i16 747, i16 159, i16 159, i16 159, i16 159, i16 159, i16 216, i16 216, i16 216, i16 216, i16 216, i16 216, i16 216, i16 216, i16 216, i16 216, i16 447, i16 283, i16 741, i16 436, i16 216, i16 216, i16 216, i16 216, i16 216, i16 216, i16 315, i16 315, i16 315, i16 315, i16 315, i16 223, i16 223, i16 223, i16 223, i16 223, i16 352, i16 431, i16 739, i16 283, i16 283, i16 347, i16 436, i16 216, i16 216, i16 216, i16 216, i16 216, i16 222, i16 222, i16 222, i16 222, i16 222, i16 225, i16 225, i16 225, i16 225, i16 225, i16 735, i16 431, i16 431, i16 226, i16 226, i16 226, i16 226, i16 226, i16 442, i16 222, i16 223, i16 1051, i16 447, i16 222, i16 222, i16 222, i16 222, i16 678, i16 223, i16 347, i16 443, i16 227, i16 227, i16 227, i16 227, i16 227, i16 352, i16 733, i16 223, i16 427, i16 365, i16 442, i16 352, i16 223, i16 427, i16 222, i16 427, i16 347, i16 678, i16 223, i16 225, i16 449, i16 347, i16 443, i16 225, i16 222, i16 730, i16 352, i16 226, i16 786, i16 225, i16 228, i16 228, i16 228, i16 228, i16 228, i16 222, i16 226, i16 226, i16 473, i16 1051, i16 225, i16 365, i16 473, i16 449, i16 225, i16 227, i16 227, i16 729, i16 226, i16 229, i16 229, i16 229, i16 229, i16 229, i16 712, i16 227, i16 358, i16 226, i16 301, i16 301, i16 301, i16 301, i16 301, i16 365, i16 365, i16 391, i16 227, i16 227, i16 398, i16 391, i16 228, i16 391, i16 398, i16 786, i16 398, i16 228, i16 233, i16 233, i16 233, i16 233, i16 233, i16 807, i16 310, i16 468, i16 711, i16 228, i16 310, i16 310, i16 310, i16 310, i16 345, i16 470, i16 228, i16 359, i16 229, i16 358, i16 228, i16 709, i16 359, i16 229, i16 480, i16 326, i16 807, i16 359, i16 229, i16 326, i16 326, i16 326, i16 326, i16 233, i16 358, i16 708, i16 301, i16 301, i16 359, i16 229, i16 233, i16 358, i16 705, i16 359, i16 229, i16 230, i16 230, i16 230, i16 230, i16 230, i16 316, i16 316, i16 316, i16 316, i16 316, i16 233, i16 233, i16 301, i16 345, i16 450, i16 703, i16 468, i16 233, i16 234, i16 234, i16 234, i16 234, i16 234, i16 345, i16 470, i16 702, i16 242, i16 242, i16 242, i16 242, i16 242, i16 460, i16 242, i16 480, i16 345, i16 230, i16 242, i16 450, i16 242, i16 317, i16 317, i16 317, i16 317, i16 317, i16 242, i16 230, i16 394, i16 394, i16 394, i16 394, i16 394, i16 230, i16 697, i16 230, i16 460, i16 230, i16 402, i16 475, i16 230, i16 349, i16 402, i16 475, i16 402, i16 234, i16 457, i16 457, i16 230, i16 349, i16 234, i16 349, i16 482, i16 695, i16 230, i16 234, i16 230, i16 231, i16 231, i16 231, i16 231, i16 231, i16 349, i16 242, i16 462, i16 615, i16 234, i16 457, i16 363, i16 615, i16 349, i16 234, i16 363, i16 363, i16 363, i16 363, i16 231, i16 692, i16 691, i16 434, i16 231, i16 231, i16 231, i16 231, i16 434, i16 617, i16 434, i16 462, i16 327, i16 617, i16 231, i16 327, i16 327, i16 327, i16 327, i16 327, i16 327, i16 327, i16 395, i16 395, i16 395, i16 395, i16 395, i16 327, i16 519, i16 327, i16 482, i16 324, i16 324, i16 324, i16 324, i16 324, i16 231, i16 231, i16 241, i16 241, i16 241, i16 241, i16 241, i16 401, i16 401, i16 401, i16 401, i16 401, i16 689, i16 348, i16 327, i16 519, i16 327, i16 348, i16 348, i16 348, i16 348, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 324, i16 688, i16 348, i16 493, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 328, i16 671, i16 328, i16 328, i16 328, i16 328, i16 328, i16 328, i16 348, i16 324, i16 668, i16 740, i16 493, i16 324, i16 348, i16 740, i16 493, i16 241, i16 241, i16 241, i16 241, i16 241, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 497, i16 497, i16 497, i16 497, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 330, i16 661, i16 330, i16 330, i16 330, i16 330, i16 330, i16 330, i16 408, i16 687, i16 823, i16 687, i16 408, i16 408, i16 408, i16 408, i16 823, i16 243, i16 243, i16 243, i16 243, i16 243, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 516, i16 516, i16 516, i16 516, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 341, i16 341, i16 341, i16 341, i16 341, i16 413, i16 413, i16 413, i16 413, i16 413, i16 414, i16 414, i16 414, i16 414, i16 414, i16 657, i16 629, i16 247, i16 247, i16 247, i16 247, i16 247, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 628, i16 341, i16 539, i16 545, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 415, i16 415, i16 415, i16 415, i16 415, i16 420, i16 423, i16 625, i16 623, i16 420, i16 423, i16 420, i16 423, i16 341, i16 341, i16 539, i16 545, i16 248, i16 248, i16 248, i16 248, i16 248, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 484, i16 554, i16 546, i16 560, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 430, i16 430, i16 430, i16 430, i16 430, i16 437, i16 437, i16 437, i16 437, i16 437, i16 438, i16 438, i16 438, i16 438, i16 438, i16 546, i16 560, i16 249, i16 249, i16 249, i16 249, i16 249, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 1063, i16 430, i16 562, i16 585, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 432, i16 441, i16 484, i16 554, i16 707, i16 441, i16 707, i16 441, i16 444, i16 444, i16 444, i16 444, i16 444, i16 430, i16 430, i16 562, i16 585, i16 253, i16 253, i16 253, i16 253, i16 253, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 432, i16 600, i16 575, i16 1063, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 445, i16 445, i16 445, i16 445, i16 445, i16 518, i16 518, i16 518, i16 518, i16 448, i16 586, i16 575, i16 432, i16 432, i16 448, i16 575, i16 448, i16 276, i16 276, i16 276, i16 276, i16 276, i16 325, i16 325, i16 325, i16 325, i16 325, i16 325, i16 325, i16 325, i16 325, i16 325, i16 458, i16 586, i16 590, i16 591, i16 325, i16 325, i16 325, i16 325, i16 325, i16 325, i16 622, i16 616, i16 407, i16 600, i16 626, i16 332, i16 332, i16 332, i16 332, i16 332, i16 451, i16 451, i16 451, i16 451, i16 451, i16 590, i16 591, i16 325, i16 325, i16 325, i16 325, i16 325, i16 331, i16 331, i16 331, i16 331, i16 331, i16 333, i16 333, i16 333, i16 333, i16 333, i16 360, i16 494, i16 334, i16 334, i16 334, i16 334, i16 334, i16 614, i16 407, i16 331, i16 332, i16 458, i16 458, i16 331, i16 331, i16 331, i16 331, i16 609, i16 332, i16 335, i16 335, i16 335, i16 335, i16 335, i16 407, i16 453, i16 626, i16 607, i16 332, i16 453, i16 407, i16 453, i16 458, i16 332, i16 742, i16 331, i16 494, i16 485, i16 742, i16 332, i16 333, i16 485, i16 603, i16 485, i16 360, i16 331, i16 706, i16 334, i16 333, i16 360, i16 333, i16 334, i16 602, i16 594, i16 360, i16 494, i16 331, i16 334, i16 594, i16 494, i16 594, i16 333, i16 849, i16 595, i16 335, i16 360, i16 599, i16 849, i16 334, i16 333, i16 360, i16 650, i16 334, i16 335, i16 335, i16 336, i16 336, i16 336, i16 336, i16 336, i16 350, i16 559, i16 559, i16 559, i16 559, i16 335, i16 595, i16 650, i16 337, i16 337, i16 337, i16 337, i16 337, i16 650, i16 335, i16 452, i16 452, i16 452, i16 452, i16 452, i16 706, i16 338, i16 338, i16 338, i16 338, i16 338, i16 580, i16 342, i16 342, i16 342, i16 342, i16 342, i16 724, i16 579, i16 724, i16 343, i16 343, i16 343, i16 343, i16 343, i16 336, i16 336, i16 844, i16 489, i16 350, i16 844, i16 596, i16 489, i16 337, i16 489, i16 336, i16 459, i16 350, i16 337, i16 350, i16 459, i16 459, i16 459, i16 459, i16 573, i16 342, i16 336, i16 336, i16 337, i16 362, i16 350, i16 338, i16 342, i16 361, i16 596, i16 337, i16 338, i16 572, i16 350, i16 337, i16 549, i16 338, i16 606, i16 569, i16 549, i16 343, i16 549, i16 342, i16 342, i16 361, i16 343, i16 361, i16 338, i16 361, i16 342, i16 343, i16 361, i16 338, i16 339, i16 339, i16 339, i16 339, i16 339, i16 362, i16 568, i16 606, i16 343, i16 563, i16 663, i16 608, i16 361, i16 343, i16 361, i16 663, i16 456, i16 456, i16 456, i16 456, i16 456, i16 362, i16 746, i16 362, i16 746, i16 362, i16 567, i16 561, i16 362, i16 582, i16 567, i16 867, i16 567, i16 366, i16 608, i16 339, i16 867, i16 366, i16 366, i16 366, i16 366, i16 870, i16 362, i16 571, i16 362, i16 339, i16 870, i16 571, i16 582, i16 571, i16 366, i16 339, i16 582, i16 339, i16 636, i16 339, i16 636, i16 636, i16 339, i16 426, i16 426, i16 426, i16 426, i16 426, i16 663, i16 557, i16 339, i16 683, i16 556, i16 366, i16 456, i16 456, i16 339, i16 366, i16 339, i16 340, i16 340, i16 340, i16 340, i16 340, i16 464, i16 464, i16 464, i16 464, i16 464, i16 465, i16 465, i16 465, i16 465, i16 465, i16 683, i16 456, i16 872, i16 553, i16 340, i16 426, i16 684, i16 872, i16 340, i16 340, i16 340, i16 340, i16 551, i16 374, i16 374, i16 374, i16 374, i16 374, i16 340, i16 374, i16 819, i16 550, i16 819, i16 374, i16 426, i16 374, i16 621, i16 491, i16 426, i16 684, i16 621, i16 374, i16 621, i16 490, i16 405, i16 405, i16 405, i16 405, i16 405, i16 487, i16 340, i16 340, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 605, i16 605, i16 605, i16 605, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 466, i16 466, i16 466, i16 466, i16 466, i16 906, i16 374, i16 694, i16 471, i16 486, i16 906, i16 405, i16 471, i16 471, i16 471, i16 471, i16 483, i16 373, i16 373, i16 373, i16 373, i16 373, i16 375, i16 375, i16 375, i16 375, i16 375, i16 405, i16 375, i16 820, i16 694, i16 820, i16 375, i16 405, i16 375, i16 379, i16 379, i16 379, i16 379, i16 379, i16 375, i16 379, i16 481, i16 479, i16 474, i16 379, i16 472, i16 379, i16 379, i16 613, i16 613, i16 613, i16 613, i16 379, i16 476, i16 476, i16 476, i16 476, i16 476, i16 477, i16 477, i16 477, i16 477, i16 477, i16 478, i16 478, i16 478, i16 478, i16 478, i16 488, i16 488, i16 488, i16 488, i16 488, i16 469, i16 467, i16 499, i16 375, i16 499, i16 499, i16 499, i16 499, i16 499, i16 499, i16 547, i16 547, i16 547, i16 547, i16 547, i16 463, i16 379, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 380, i16 381, i16 381, i16 381, i16 381, i16 381, i16 548, i16 548, i16 548, i16 548, i16 548, i16 461, i16 492, i16 492, i16 492, i16 492, i16 492, i16 455, i16 576, i16 454, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 446, i16 439, i16 652, i16 696, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 498, i16 498, i16 498, i16 498, i16 498, i16 498, i16 498, i16 716, i16 492, i16 429, i16 714, i16 652, i16 498, i16 576, i16 498, i16 652, i16 696, i16 381, i16 381, i16 381, i16 381, i16 381, i16 387, i16 387, i16 387, i16 387, i16 387, i16 492, i16 387, i16 714, i16 716, i16 492, i16 576, i16 714, i16 701, i16 498, i16 576, i16 498, i16 701, i16 428, i16 701, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 717, i16 425, i16 720, i16 424, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 500, i16 500, i16 500, i16 500, i16 500, i16 500, i16 500, i16 552, i16 552, i16 552, i16 552, i16 552, i16 500, i16 717, i16 500, i16 720, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 388, i16 388, i16 388, i16 388, i16 388, i16 501, i16 721, i16 501, i16 501, i16 501, i16 501, i16 501, i16 501, i16 500, i16 422, i16 500, i16 388, i16 421, i16 418, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 721, i16 416, i16 412, i16 410, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 404, i16 403, i16 400, i16 388, i16 389, i16 389, i16 389, i16 389, i16 389, i16 564, i16 564, i16 564, i16 564, i16 564, i16 389, i16 399, i16 908, i16 515, i16 515, i16 515, i16 515, i16 908, i16 396, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 515, i16 725, i16 726, i16 1052, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 1052, i16 512, i16 512, i16 512, i16 512, i16 512, i16 515, i16 565, i16 565, i16 565, i16 565, i16 565, i16 515, i16 384, i16 725, i16 726, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 382, i16 367, i16 512, i16 732, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1052, i16 323, i16 504, i16 504, i16 504, i16 504, i16 504, i16 322, i16 320, i16 502, i16 502, i16 502, i16 502, i16 502, i16 512, i16 512, i16 732, i16 390, i16 390, i16 390, i16 390, i16 390, i16 496, i16 496, i16 496, i16 496, i16 496, i16 496, i16 496, i16 496, i16 496, i16 496, i16 502, i16 502, i16 502, i16 502, i16 496, i16 496, i16 496, i16 496, i16 496, i16 496, i16 503, i16 503, i16 503, i16 503, i16 503, i16 504, i16 319, i16 505, i16 505, i16 505, i16 505, i16 505, i16 502, i16 504, i16 313, i16 504, i16 311, i16 496, i16 496, i16 496, i16 496, i16 496, i16 502, i16 306, i16 304, i16 300, i16 504, i16 506, i16 506, i16 506, i16 506, i16 506, i16 299, i16 502, i16 504, i16 666, i16 734, i16 503, i16 297, i16 507, i16 507, i16 507, i16 507, i16 507, i16 666, i16 503, i16 508, i16 508, i16 508, i16 508, i16 508, i16 282, i16 505, i16 784, i16 281, i16 503, i16 505, i16 832, i16 784, i16 734, i16 503, i16 279, i16 505, i16 278, i16 832, i16 275, i16 503, i16 566, i16 566, i16 566, i16 566, i16 566, i16 506, i16 505, i16 787, i16 936, i16 271, i16 505, i16 269, i16 265, i16 936, i16 506, i16 506, i16 787, i16 507, i16 507, i16 508, i16 832, i16 264, i16 666, i16 262, i16 508, i16 261, i16 506, i16 507, i16 509, i16 509, i16 509, i16 509, i16 509, i16 260, i16 508, i16 506, i16 250, i16 941, i16 507, i16 507, i16 784, i16 508, i16 941, i16 245, i16 244, i16 508, i16 570, i16 570, i16 570, i16 570, i16 570, i16 511, i16 511, i16 511, i16 511, i16 511, i16 513, i16 513, i16 513, i16 513, i16 513, i16 787, i16 214, i16 833, i16 213, i16 514, i16 514, i16 514, i16 514, i16 514, i16 833, i16 210, i16 209, i16 509, i16 511, i16 511, i16 511, i16 511, i16 509, i16 208, i16 206, i16 204, i16 202, i16 509, i16 511, i16 517, i16 517, i16 517, i16 517, i16 513, i16 963, i16 201, i16 968, i16 833, i16 509, i16 963, i16 513, i16 968, i16 517, i16 509, i16 510, i16 510, i16 510, i16 510, i16 510, i16 200, i16 511, i16 511, i16 986, i16 990, i16 514, i16 513, i16 513, i16 986, i16 990, i16 514, i16 198, i16 517, i16 513, i16 194, i16 514, i16 517, i16 523, i16 523, i16 523, i16 523, i16 523, i16 1005, i16 1043, i16 193, i16 190, i16 514, i16 1005, i16 1043, i16 523, i16 510, i16 514, i16 1073, i16 1096, i16 189, i16 523, i16 1064, i16 1073, i16 1096, i16 1064, i16 510, i16 558, i16 558, i16 558, i16 558, i16 558, i16 510, i16 1098, i16 510, i16 185, i16 510, i16 180, i16 1098, i16 510, i16 587, i16 587, i16 587, i16 587, i16 587, i16 179, i16 175, i16 510, i16 574, i16 574, i16 574, i16 574, i16 574, i16 510, i16 174, i16 510, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 558, i16 1064, i16 173, i16 171, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 588, i16 588, i16 588, i16 588, i16 588, i16 1109, i16 558, i16 168, i16 574, i16 1117, i16 1109, i16 1130, i16 558, i16 167, i16 1117, i16 164, i16 1130, i16 522, i16 522, i16 522, i16 522, i16 522, i16 524, i16 524, i16 524, i16 524, i16 524, i16 574, i16 524, i16 163, i16 158, i16 574, i16 524, i16 1133, i16 524, i16 524, i16 156, i16 145, i16 1133, i16 143, i16 524, i16 526, i16 526, i16 526, i16 526, i16 526, i16 592, i16 592, i16 592, i16 592, i16 592, i16 133, i16 132, i16 526, i16 531, i16 531, i16 531, i16 531, i16 531, i16 526, i16 531, i16 118, i16 114, i16 113, i16 531, i16 112, i16 531, i16 593, i16 593, i16 593, i16 593, i16 593, i16 531, i16 110, i16 109, i16 105, i16 103, i16 524, i16 527, i16 527, i16 527, i16 597, i16 597, i16 597, i16 597, i16 597, i16 581, i16 581, i16 581, i16 581, i16 581, i16 598, i16 598, i16 598, i16 598, i16 598, i16 527, i16 527, i16 527, i16 527, i16 527, i16 527, i16 527, i16 527, i16 527, i16 527, i16 99, i16 98, i16 94, i16 531, i16 527, i16 527, i16 527, i16 527, i16 527, i16 527, i16 92, i16 89, i16 83, i16 581, i16 610, i16 610, i16 610, i16 610, i16 610, i16 611, i16 611, i16 611, i16 611, i16 611, i16 78, i16 77, i16 64, i16 527, i16 527, i16 527, i16 527, i16 527, i16 529, i16 529, i16 529, i16 581, i16 581, i16 612, i16 612, i16 612, i16 612, i16 612, i16 618, i16 618, i16 618, i16 618, i16 618, i16 62, i16 51, i16 48, i16 529, i16 529, i16 529, i16 529, i16 529, i16 529, i16 529, i16 529, i16 529, i16 529, i16 46, i16 42, i16 38, i16 33, i16 529, i16 529, i16 529, i16 529, i16 529, i16 529, i16 619, i16 619, i16 619, i16 619, i16 619, i16 620, i16 620, i16 620, i16 620, i16 620, i16 624, i16 624, i16 624, i16 624, i16 624, i16 29, i16 25, i16 529, i16 529, i16 529, i16 529, i16 529, i16 530, i16 530, i16 530, i16 530, i16 530, i16 530, i16 24, i16 530, i16 17, i16 15, i16 1148, i16 530, i16 530, i16 530, i16 530, i16 1148, i16 9, i16 3, i16 0, i16 530, i16 532, i16 532, i16 532, i16 532, i16 532, i16 0, i16 532, i16 0, i16 0, i16 0, i16 532, i16 0, i16 532, i16 533, i16 533, i16 533, i16 533, i16 533, i16 532, i16 533, i16 0, i16 0, i16 0, i16 533, i16 0, i16 533, i16 604, i16 604, i16 604, i16 604, i16 604, i16 533, i16 0, i16 0, i16 0, i16 0, i16 530, i16 0, i16 534, i16 534, i16 534, i16 534, i16 534, i16 0, i16 534, i16 0, i16 0, i16 0, i16 534, i16 0, i16 534, i16 0, i16 0, i16 0, i16 0, i16 532, i16 534, i16 535, i16 535, i16 535, i16 535, i16 535, i16 0, i16 535, i16 0, i16 0, i16 0, i16 535, i16 533, i16 535, i16 535, i16 1028, i16 1028, i16 0, i16 0, i16 535, i16 0, i16 0, i16 0, i16 1028, i16 604, i16 604, i16 1028, i16 633, i16 633, i16 633, i16 0, i16 633, i16 633, i16 633, i16 950, i16 950, i16 950, i16 534, i16 0, i16 633, i16 0, i16 633, i16 0, i16 950, i16 0, i16 604, i16 950, i16 0, i16 0, i16 0, i16 630, i16 630, i16 630, i16 630, i16 630, i16 0, i16 535, i16 536, i16 536, i16 536, i16 536, i16 536, i16 633, i16 536, i16 633, i16 0, i16 0, i16 536, i16 1028, i16 536, i16 647, i16 647, i16 647, i16 647, i16 647, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 630, i16 0, i16 950, i16 0, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 685, i16 685, i16 685, i16 685, i16 685, i16 0, i16 0, i16 0, i16 0, i16 630, i16 0, i16 0, i16 0, i16 630, i16 0, i16 0, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 537, i16 538, i16 538, i16 538, i16 538, i16 538, i16 686, i16 686, i16 686, i16 686, i16 686, i16 0, i16 679, i16 679, i16 679, i16 679, i16 679, i16 0, i16 679, i16 0, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 0, i16 0, i16 0, i16 0, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 635, i16 635, i16 635, i16 0, i16 635, i16 635, i16 635, i16 637, i16 637, i16 637, i16 637, i16 637, i16 635, i16 0, i16 635, i16 0, i16 0, i16 538, i16 538, i16 538, i16 538, i16 538, i16 540, i16 540, i16 540, i16 540, i16 540, i16 679, i16 540, i16 690, i16 690, i16 690, i16 690, i16 690, i16 0, i16 635, i16 0, i16 635, i16 0, i16 0, i16 0, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 0, i16 637, i16 0, i16 0, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 0, i16 637, i16 0, i16 639, i16 639, i16 639, i16 639, i16 639, i16 0, i16 0, i16 0, i16 0, i16 637, i16 0, i16 0, i16 0, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 0, i16 0, i16 0, i16 0, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 698, i16 698, i16 698, i16 698, i16 698, i16 0, i16 639, i16 642, i16 642, i16 642, i16 642, i16 642, i16 0, i16 0, i16 639, i16 0, i16 639, i16 541, i16 541, i16 541, i16 541, i16 541, i16 542, i16 542, i16 542, i16 542, i16 542, i16 639, i16 0, i16 0, i16 0, i16 0, i16 542, i16 0, i16 0, i16 639, i16 699, i16 699, i16 699, i16 699, i16 699, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 0, i16 0, i16 642, i16 0, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 0, i16 642, i16 641, i16 641, i16 641, i16 641, i16 641, i16 700, i16 700, i16 700, i16 700, i16 700, i16 0, i16 642, i16 0, i16 0, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 0, i16 0, i16 0, i16 0, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 640, i16 640, i16 640, i16 640, i16 640, i16 0, i16 0, i16 0, i16 0, i16 638, i16 638, i16 638, i16 638, i16 638, i16 641, i16 641, i16 0, i16 543, i16 543, i16 543, i16 543, i16 543, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 0, i16 0, i16 0, i16 641, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 0, i16 0, i16 0, i16 0, i16 638, i16 0, i16 0, i16 640, i16 643, i16 643, i16 643, i16 643, i16 643, i16 640, i16 0, i16 0, i16 0, i16 632, i16 632, i16 632, i16 632, i16 632, i16 638, i16 0, i16 0, i16 0, i16 0, i16 638, i16 640, i16 644, i16 644, i16 644, i16 644, i16 644, i16 645, i16 645, i16 645, i16 645, i16 645, i16 0, i16 0, i16 0, i16 646, i16 646, i16 646, i16 646, i16 646, i16 0, i16 643, i16 0, i16 648, i16 648, i16 648, i16 648, i16 648, i16 693, i16 693, i16 693, i16 693, i16 693, i16 0, i16 0, i16 0, i16 643, i16 649, i16 649, i16 649, i16 649, i16 649, i16 645, i16 643, i16 0, i16 0, i16 0, i16 644, i16 646, i16 0, i16 0, i16 0, i16 644, i16 1066, i16 1066, i16 0, i16 0, i16 644, i16 645, i16 0, i16 645, i16 1066, i16 645, i16 648, i16 1066, i16 645, i16 0, i16 693, i16 644, i16 0, i16 646, i16 646, i16 0, i16 644, i16 0, i16 0, i16 0, i16 0, i16 648, i16 645, i16 0, i16 645, i16 649, i16 693, i16 0, i16 648, i16 0, i16 649, i16 0, i16 693, i16 0, i16 0, i16 649, i16 704, i16 704, i16 704, i16 704, i16 704, i16 718, i16 718, i16 718, i16 718, i16 718, i16 649, i16 0, i16 0, i16 1066, i16 0, i16 649, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 0, i16 0, i16 0, i16 0, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 0, i16 0, i16 0, i16 0, i16 710, i16 710, i16 710, i16 710, i16 710, i16 719, i16 719, i16 719, i16 719, i16 719, i16 0, i16 0, i16 0, i16 656, i16 656, i16 656, i16 656, i16 656, i16 658, i16 658, i16 658, i16 658, i16 658, i16 658, i16 0, i16 658, i16 0, i16 0, i16 0, i16 658, i16 658, i16 658, i16 658, i16 0, i16 0, i16 0, i16 710, i16 658, i16 659, i16 659, i16 659, i16 659, i16 659, i16 0, i16 0, i16 669, i16 669, i16 669, i16 669, i16 669, i16 659, i16 0, i16 996, i16 996, i16 996, i16 710, i16 659, i16 669, i16 669, i16 710, i16 0, i16 996, i16 0, i16 669, i16 996, i16 0, i16 0, i16 0, i16 675, i16 675, i16 675, i16 675, i16 675, i16 0, i16 658, i16 664, i16 664, i16 664, i16 664, i16 664, i16 675, i16 664, i16 0, i16 0, i16 0, i16 0, i16 675, i16 713, i16 713, i16 713, i16 713, i16 713, i16 0, i16 0, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 0, i16 0, i16 996, i16 0, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 722, i16 722, i16 722, i16 722, i16 722, i16 0, i16 713, i16 0, i16 0, i16 675, i16 723, i16 723, i16 723, i16 723, i16 723, i16 0, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 667, i16 667, i16 667, i16 667, i16 667, i16 0, i16 713, i16 713, i16 0, i16 0, i16 667, i16 727, i16 727, i16 727, i16 727, i16 727, i16 0, i16 0, i16 0, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 0, i16 0, i16 0, i16 0, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 728, i16 728, i16 728, i16 728, i16 728, i16 736, i16 736, i16 736, i16 736, i16 736, i16 731, i16 731, i16 731, i16 731, i16 731, i16 0, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 0, i16 670, i16 0, i16 0, i16 0, i16 670, i16 670, i16 670, i16 670, i16 0, i16 0, i16 0, i16 0, i16 670, i16 737, i16 737, i16 737, i16 737, i16 737, i16 738, i16 738, i16 738, i16 738, i16 738, i16 743, i16 743, i16 743, i16 743, i16 743, i16 744, i16 744, i16 744, i16 744, i16 744, i16 0, i16 0, i16 731, i16 731, i16 745, i16 745, i16 745, i16 745, i16 745, i16 749, i16 749, i16 749, i16 749, i16 749, i16 0, i16 0, i16 670, i16 672, i16 672, i16 672, i16 672, i16 672, i16 672, i16 731, i16 672, i16 0, i16 0, i16 0, i16 672, i16 672, i16 672, i16 672, i16 0, i16 0, i16 0, i16 0, i16 672, i16 754, i16 754, i16 754, i16 754, i16 754, i16 0, i16 0, i16 752, i16 752, i16 752, i16 752, i16 752, i16 755, i16 755, i16 755, i16 755, i16 755, i16 756, i16 756, i16 756, i16 756, i16 756, i16 0, i16 0, i16 760, i16 760, i16 760, i16 760, i16 760, i16 0, i16 764, i16 764, i16 764, i16 764, i16 764, i16 0, i16 672, i16 673, i16 673, i16 673, i16 673, i16 673, i16 673, i16 752, i16 673, i16 0, i16 0, i16 0, i16 673, i16 673, i16 673, i16 673, i16 0, i16 0, i16 756, i16 754, i16 673, i16 755, i16 0, i16 0, i16 0, i16 0, i16 752, i16 764, i16 0, i16 0, i16 752, i16 755, i16 0, i16 0, i16 760, i16 0, i16 756, i16 0, i16 0, i16 0, i16 0, i16 756, i16 755, i16 760, i16 773, i16 773, i16 773, i16 773, i16 773, i16 764, i16 764, i16 0, i16 0, i16 0, i16 0, i16 760, i16 0, i16 673, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 674, i16 676, i16 676, i16 676, i16 676, i16 676, i16 813, i16 813, i16 813, i16 813, i16 813, i16 0, i16 0, i16 676, i16 761, i16 761, i16 761, i16 761, i16 761, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 0, i16 0, i16 813, i16 0, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 1021, i16 1021, i16 0, i16 0, i16 1021, i16 821, i16 821, i16 821, i16 821, i16 821, i16 0, i16 1021, i16 0, i16 0, i16 761, i16 0, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 677, i16 677, i16 677, i16 677, i16 677, i16 0, i16 821, i16 761, i16 821, i16 901, i16 901, i16 901, i16 901, i16 901, i16 761, i16 0, i16 0, i16 0, i16 0, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 0, i16 0, i16 1021, i16 901, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 759, i16 759, i16 759, i16 759, i16 759, i16 0, i16 834, i16 834, i16 834, i16 834, i16 834, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 677, i16 677, i16 677, i16 677, i16 677, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 834, i16 0, i16 0, i16 0, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 0, i16 765, i16 765, i16 765, i16 765, i16 765, i16 835, i16 835, i16 835, i16 835, i16 835, i16 0, i16 759, i16 759, i16 0, i16 0, i16 0, i16 680, i16 680, i16 680, i16 680, i16 680, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 835, i16 759, i16 0, i16 0, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 757, i16 757, i16 757, i16 757, i16 757, i16 0, i16 0, i16 0, i16 0, i16 758, i16 758, i16 758, i16 758, i16 758, i16 765, i16 0, i16 0, i16 681, i16 681, i16 681, i16 681, i16 681, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 0, i16 0, i16 0, i16 0, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 0, i16 0, i16 0, i16 757, i16 762, i16 762, i16 762, i16 762, i16 762, i16 0, i16 0, i16 757, i16 0, i16 757, i16 0, i16 0, i16 758, i16 682, i16 682, i16 682, i16 682, i16 682, i16 758, i16 0, i16 757, i16 763, i16 763, i16 763, i16 763, i16 763, i16 0, i16 0, i16 757, i16 0, i16 0, i16 0, i16 0, i16 758, i16 0, i16 766, i16 766, i16 766, i16 766, i16 766, i16 0, i16 0, i16 949, i16 949, i16 949, i16 762, i16 0, i16 949, i16 0, i16 0, i16 762, i16 0, i16 0, i16 0, i16 949, i16 762, i16 763, i16 767, i16 767, i16 767, i16 767, i16 767, i16 0, i16 0, i16 0, i16 0, i16 762, i16 0, i16 0, i16 0, i16 0, i16 762, i16 763, i16 0, i16 763, i16 766, i16 763, i16 0, i16 0, i16 763, i16 768, i16 768, i16 768, i16 768, i16 768, i16 769, i16 769, i16 769, i16 769, i16 769, i16 766, i16 0, i16 0, i16 763, i16 0, i16 763, i16 949, i16 766, i16 992, i16 992, i16 992, i16 0, i16 767, i16 992, i16 0, i16 0, i16 0, i16 767, i16 0, i16 0, i16 992, i16 0, i16 767, i16 770, i16 770, i16 770, i16 770, i16 770, i16 0, i16 768, i16 0, i16 0, i16 0, i16 767, i16 0, i16 0, i16 0, i16 0, i16 767, i16 771, i16 771, i16 771, i16 771, i16 771, i16 0, i16 768, i16 0, i16 0, i16 0, i16 0, i16 769, i16 768, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1054, i16 1054, i16 770, i16 0, i16 1054, i16 992, i16 0, i16 776, i16 776, i16 0, i16 0, i16 1054, i16 0, i16 776, i16 792, i16 792, i16 792, i16 792, i16 792, i16 0, i16 0, i16 770, i16 0, i16 0, i16 0, i16 770, i16 792, i16 792, i16 0, i16 0, i16 0, i16 0, i16 792, i16 0, i16 0, i16 0, i16 0, i16 771, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 0, i16 777, i16 0, i16 0, i16 0, i16 777, i16 777, i16 777, i16 777, i16 1054, i16 0, i16 0, i16 0, i16 777, i16 795, i16 795, i16 795, i16 795, i16 795, i16 0, i16 795, i16 0, i16 0, i16 0, i16 795, i16 0, i16 795, i16 795, i16 0, i16 0, i16 0, i16 0, i16 795, i16 808, i16 808, i16 808, i16 808, i16 808, i16 809, i16 809, i16 809, i16 809, i16 809, i16 810, i16 810, i16 810, i16 810, i16 810, i16 0, i16 0, i16 777, i16 779, i16 779, i16 779, i16 779, i16 779, i16 779, i16 0, i16 779, i16 0, i16 0, i16 0, i16 779, i16 779, i16 779, i16 779, i16 0, i16 0, i16 0, i16 795, i16 779, i16 0, i16 0, i16 0, i16 0, i16 814, i16 814, i16 814, i16 814, i16 814, i16 815, i16 815, i16 815, i16 815, i16 815, i16 0, i16 0, i16 0, i16 808, i16 0, i16 0, i16 0, i16 0, i16 809, i16 0, i16 0, i16 0, i16 0, i16 810, i16 816, i16 816, i16 816, i16 816, i16 816, i16 0, i16 0, i16 0, i16 779, i16 780, i16 780, i16 780, i16 780, i16 780, i16 780, i16 814, i16 780, i16 0, i16 0, i16 0, i16 780, i16 780, i16 780, i16 780, i16 0, i16 0, i16 0, i16 0, i16 780, i16 0, i16 0, i16 814, i16 0, i16 0, i16 0, i16 0, i16 815, i16 814, i16 845, i16 845, i16 845, i16 845, i16 845, i16 0, i16 852, i16 852, i16 852, i16 852, i16 852, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 816, i16 852, i16 852, i16 0, i16 0, i16 0, i16 0, i16 852, i16 0, i16 845, i16 780, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 781, i16 785, i16 785, i16 785, i16 785, i16 785, i16 0, i16 785, i16 0, i16 0, i16 0, i16 0, i16 817, i16 817, i16 817, i16 817, i16 817, i16 0, i16 0, i16 0, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 0, i16 0, i16 0, i16 0, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 1016, i16 1016, i16 1016, i16 0, i16 0, i16 1016, i16 825, i16 825, i16 825, i16 825, i16 825, i16 0, i16 1016, i16 0, i16 0, i16 0, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 788, i16 788, i16 788, i16 788, i16 788, i16 817, i16 0, i16 0, i16 0, i16 0, i16 788, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 825, i16 0, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 0, i16 0, i16 0, i16 1016, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 825, i16 825, i16 824, i16 824, i16 824, i16 824, i16 824, i16 826, i16 826, i16 826, i16 826, i16 826, i16 0, i16 0, i16 0, i16 0, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 824, i16 793, i16 0, i16 0, i16 0, i16 793, i16 793, i16 793, i16 793, i16 0, i16 824, i16 0, i16 0, i16 793, i16 0, i16 826, i16 0, i16 0, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1119, i16 1119, i16 1119, i16 1119, i16 1119, i16 0, i16 824, i16 873, i16 873, i16 0, i16 824, i16 826, i16 1119, i16 873, i16 0, i16 826, i16 0, i16 0, i16 1119, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 793, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 796, i16 797, i16 797, i16 797, i16 797, i16 797, i16 797, i16 0, i16 797, i16 0, i16 0, i16 0, i16 797, i16 797, i16 797, i16 797, i16 0, i16 0, i16 0, i16 0, i16 797, i16 827, i16 827, i16 827, i16 827, i16 827, i16 828, i16 828, i16 828, i16 828, i16 828, i16 829, i16 829, i16 829, i16 829, i16 829, i16 830, i16 830, i16 830, i16 830, i16 830, i16 831, i16 831, i16 831, i16 831, i16 831, i16 836, i16 836, i16 836, i16 836, i16 836, i16 837, i16 837, i16 837, i16 837, i16 837, i16 0, i16 797, i16 798, i16 798, i16 798, i16 798, i16 798, i16 798, i16 0, i16 798, i16 0, i16 0, i16 0, i16 798, i16 798, i16 798, i16 798, i16 0, i16 0, i16 0, i16 827, i16 798, i16 994, i16 994, i16 994, i16 828, i16 0, i16 994, i16 0, i16 0, i16 829, i16 0, i16 0, i16 0, i16 994, i16 830, i16 0, i16 0, i16 0, i16 994, i16 831, i16 0, i16 0, i16 0, i16 836, i16 836, i16 0, i16 0, i16 0, i16 0, i16 837, i16 838, i16 838, i16 838, i16 838, i16 838, i16 0, i16 0, i16 798, i16 799, i16 799, i16 799, i16 799, i16 799, i16 799, i16 836, i16 799, i16 0, i16 0, i16 0, i16 799, i16 799, i16 799, i16 799, i16 0, i16 0, i16 994, i16 0, i16 799, i16 839, i16 839, i16 839, i16 839, i16 839, i16 840, i16 840, i16 840, i16 840, i16 840, i16 841, i16 841, i16 841, i16 841, i16 841, i16 842, i16 842, i16 842, i16 842, i16 842, i16 0, i16 846, i16 846, i16 846, i16 846, i16 846, i16 0, i16 838, i16 847, i16 847, i16 847, i16 847, i16 847, i16 0, i16 0, i16 0, i16 799, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 0, i16 800, i16 0, i16 0, i16 0, i16 800, i16 800, i16 800, i16 800, i16 0, i16 0, i16 0, i16 839, i16 800, i16 846, i16 0, i16 0, i16 840, i16 0, i16 0, i16 0, i16 0, i16 841, i16 1020, i16 1020, i16 1020, i16 0, i16 842, i16 1020, i16 0, i16 0, i16 0, i16 0, i16 846, i16 0, i16 1020, i16 0, i16 846, i16 0, i16 0, i16 847, i16 0, i16 898, i16 898, i16 898, i16 898, i16 898, i16 0, i16 0, i16 0, i16 800, i16 801, i16 801, i16 801, i16 801, i16 801, i16 801, i16 0, i16 801, i16 0, i16 0, i16 0, i16 801, i16 801, i16 801, i16 801, i16 0, i16 0, i16 0, i16 0, i16 801, i16 855, i16 855, i16 855, i16 855, i16 855, i16 0, i16 1020, i16 889, i16 889, i16 889, i16 889, i16 889, i16 855, i16 855, i16 0, i16 0, i16 0, i16 0, i16 855, i16 889, i16 889, i16 0, i16 0, i16 0, i16 0, i16 889, i16 898, i16 902, i16 902, i16 902, i16 902, i16 902, i16 0, i16 0, i16 0, i16 0, i16 801, i16 802, i16 802, i16 802, i16 802, i16 802, i16 802, i16 0, i16 802, i16 0, i16 0, i16 0, i16 802, i16 802, i16 802, i16 802, i16 0, i16 0, i16 0, i16 855, i16 802, i16 903, i16 903, i16 903, i16 903, i16 903, i16 0, i16 902, i16 904, i16 904, i16 904, i16 904, i16 904, i16 905, i16 905, i16 905, i16 905, i16 905, i16 962, i16 962, i16 962, i16 962, i16 962, i16 1024, i16 1024, i16 1024, i16 902, i16 0, i16 0, i16 0, i16 902, i16 0, i16 1024, i16 0, i16 0, i16 1024, i16 0, i16 802, i16 803, i16 803, i16 803, i16 803, i16 803, i16 803, i16 0, i16 803, i16 0, i16 0, i16 0, i16 803, i16 803, i16 803, i16 803, i16 0, i16 0, i16 0, i16 903, i16 803, i16 909, i16 909, i16 909, i16 909, i16 909, i16 904, i16 0, i16 0, i16 0, i16 0, i16 905, i16 0, i16 909, i16 909, i16 0, i16 962, i16 0, i16 0, i16 909, i16 1024, i16 0, i16 0, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 0, i16 1010, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 803, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 0, i16 804, i16 0, i16 0, i16 0, i16 804, i16 804, i16 804, i16 804, i16 0, i16 0, i16 0, i16 0, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 0, i16 0, i16 0, i16 0, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 1010, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 805, i16 806, i16 806, i16 806, i16 806, i16 806, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 806, i16 0, i16 0, i16 0, i16 0, i16 0, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 0, i16 0, i16 0, i16 0, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 811, i16 811, i16 811, i16 811, i16 811, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 811, i16 811, i16 811, i16 811, i16 811, i16 811, i16 811, i16 811, i16 811, i16 811, i16 0, i16 997, i16 997, i16 997, i16 811, i16 811, i16 811, i16 811, i16 811, i16 811, i16 997, i16 0, i16 0, i16 997, i16 0, i16 0, i16 0, i16 0, i16 997, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 811, i16 811, i16 811, i16 811, i16 811, i16 811, i16 818, i16 818, i16 818, i16 818, i16 818, i16 818, i16 818, i16 818, i16 818, i16 818, i16 0, i16 0, i16 0, i16 0, i16 818, i16 818, i16 818, i16 818, i16 818, i16 818, i16 0, i16 0, i16 0, i16 997, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1011, i16 0, i16 0, i16 818, i16 818, i16 818, i16 818, i16 818, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 0, i16 853, i16 0, i16 0, i16 0, i16 853, i16 853, i16 853, i16 853, i16 0, i16 0, i16 0, i16 0, i16 853, i16 925, i16 925, i16 925, i16 925, i16 925, i16 0, i16 0, i16 942, i16 942, i16 942, i16 942, i16 942, i16 925, i16 925, i16 0, i16 0, i16 0, i16 1011, i16 925, i16 942, i16 942, i16 0, i16 0, i16 0, i16 0, i16 942, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 853, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 856, i16 857, i16 857, i16 857, i16 857, i16 857, i16 857, i16 0, i16 857, i16 0, i16 0, i16 0, i16 857, i16 857, i16 857, i16 857, i16 0, i16 0, i16 0, i16 0, i16 857, i16 969, i16 969, i16 969, i16 969, i16 969, i16 0, i16 0, i16 993, i16 993, i16 993, i16 993, i16 993, i16 969, i16 969, i16 0, i16 0, i16 0, i16 0, i16 969, i16 993, i16 993, i16 0, i16 0, i16 0, i16 0, i16 993, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 857, i16 858, i16 858, i16 858, i16 858, i16 858, i16 858, i16 0, i16 858, i16 0, i16 0, i16 0, i16 858, i16 858, i16 858, i16 858, i16 0, i16 0, i16 0, i16 0, i16 858, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 0, i16 0, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 1003, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1003, i16 1013, i16 1013, i16 0, i16 0, i16 0, i16 0, i16 1013, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 858, i16 859, i16 859, i16 859, i16 859, i16 859, i16 859, i16 0, i16 859, i16 0, i16 0, i16 0, i16 859, i16 859, i16 859, i16 859, i16 0, i16 0, i16 0, i16 1003, i16 859, i16 1017, i16 1017, i16 1017, i16 1017, i16 1017, i16 1018, i16 1018, i16 1018, i16 1018, i16 1018, i16 0, i16 1018, i16 1017, i16 1017, i16 1022, i16 1022, i16 1022, i16 1018, i16 1017, i16 1022, i16 1027, i16 1027, i16 1027, i16 1018, i16 0, i16 0, i16 1022, i16 0, i16 0, i16 1027, i16 0, i16 1022, i16 1027, i16 0, i16 0, i16 0, i16 859, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 0, i16 860, i16 0, i16 0, i16 0, i16 860, i16 860, i16 860, i16 860, i16 0, i16 0, i16 0, i16 0, i16 860, i16 1060, i16 1060, i16 1060, i16 1018, i16 1025, i16 1025, i16 1025, i16 1025, i16 1025, i16 1060, i16 0, i16 1022, i16 1060, i16 0, i16 1025, i16 0, i16 1025, i16 1027, i16 1029, i16 1029, i16 1029, i16 0, i16 1025, i16 0, i16 0, i16 0, i16 0, i16 1029, i16 0, i16 0, i16 1029, i16 0, i16 0, i16 0, i16 0, i16 1029, i16 860, i16 861, i16 861, i16 861, i16 861, i16 861, i16 861, i16 0, i16 861, i16 0, i16 0, i16 0, i16 861, i16 861, i16 861, i16 861, i16 0, i16 0, i16 1060, i16 0, i16 861, i16 0, i16 0, i16 1025, i16 0, i16 1032, i16 1032, i16 1032, i16 1032, i16 1032, i16 1044, i16 1044, i16 1044, i16 0, i16 0, i16 1044, i16 1029, i16 1032, i16 1032, i16 1046, i16 1046, i16 1046, i16 1044, i16 1032, i16 1046, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1046, i16 0, i16 0, i16 0, i16 0, i16 1046, i16 861, i16 862, i16 862, i16 862, i16 862, i16 862, i16 862, i16 0, i16 862, i16 0, i16 0, i16 0, i16 862, i16 862, i16 862, i16 862, i16 0, i16 0, i16 0, i16 0, i16 862, i16 1045, i16 1045, i16 1045, i16 1045, i16 1045, i16 0, i16 1044, i16 1048, i16 1048, i16 1048, i16 1048, i16 1048, i16 1045, i16 1045, i16 0, i16 1046, i16 0, i16 0, i16 1045, i16 1048, i16 1048, i16 1053, i16 1053, i16 1053, i16 0, i16 1048, i16 1053, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1053, i16 0, i16 0, i16 862, i16 863, i16 863, i16 863, i16 863, i16 863, i16 863, i16 0, i16 863, i16 0, i16 0, i16 0, i16 863, i16 863, i16 863, i16 863, i16 0, i16 0, i16 0, i16 0, i16 863, i16 1055, i16 1055, i16 1055, i16 0, i16 0, i16 1055, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1055, i16 0, i16 1057, i16 1057, i16 1057, i16 1055, i16 1053, i16 1057, i16 0, i16 0, i16 0, i16 1058, i16 1058, i16 1058, i16 1057, i16 0, i16 1058, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1058, i16 863, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 0, i16 864, i16 0, i16 0, i16 0, i16 864, i16 864, i16 864, i16 864, i16 0, i16 0, i16 1055, i16 0, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 0, i16 1057, i16 0, i16 0, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 1058, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 865, i16 868, i16 868, i16 868, i16 868, i16 868, i16 0, i16 868, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 0, i16 0, i16 0, i16 0, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 869, i16 869, i16 869, i16 869, i16 869, i16 0, i16 0, i16 0, i16 0, i16 0, i16 869, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 0, i16 1061, i16 1061, i16 1061, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 1061, i16 0, i16 0, i16 1061, i16 0, i16 0, i16 0, i16 0, i16 1061, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 0, i16 876, i16 0, i16 0, i16 0, i16 876, i16 876, i16 876, i16 876, i16 0, i16 0, i16 0, i16 0, i16 876, i16 1065, i16 1065, i16 1065, i16 1061, i16 1067, i16 1067, i16 1067, i16 0, i16 0, i16 1065, i16 0, i16 0, i16 1065, i16 1067, i16 0, i16 0, i16 1067, i16 1069, i16 1069, i16 1069, i16 0, i16 1067, i16 1070, i16 1070, i16 1070, i16 0, i16 1069, i16 0, i16 0, i16 1069, i16 0, i16 1070, i16 0, i16 0, i16 1070, i16 0, i16 876, i16 877, i16 877, i16 877, i16 877, i16 877, i16 877, i16 0, i16 877, i16 0, i16 0, i16 0, i16 877, i16 877, i16 877, i16 877, i16 0, i16 0, i16 1065, i16 0, i16 877, i16 0, i16 1067, i16 0, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1099, i16 1099, i16 1099, i16 0, i16 0, i16 1099, i16 1069, i16 1074, i16 1074, i16 0, i16 0, i16 1070, i16 1099, i16 1074, i16 1100, i16 1100, i16 1100, i16 0, i16 0, i16 1100, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1100, i16 0, i16 877, i16 878, i16 878, i16 878, i16 878, i16 878, i16 878, i16 0, i16 878, i16 0, i16 0, i16 0, i16 878, i16 878, i16 878, i16 878, i16 0, i16 0, i16 0, i16 0, i16 878, i16 1097, i16 1097, i16 1097, i16 1097, i16 1097, i16 1099, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1097, i16 1097, i16 0, i16 0, i16 0, i16 0, i16 1097, i16 1100, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 878, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 879, i16 880, i16 880, i16 880, i16 880, i16 880, i16 880, i16 0, i16 880, i16 0, i16 0, i16 0, i16 880, i16 880, i16 880, i16 880, i16 0, i16 0, i16 0, i16 0, i16 880, i16 1101, i16 1101, i16 1101, i16 0, i16 0, i16 1101, i16 1104, i16 1104, i16 1104, i16 0, i16 0, i16 0, i16 1101, i16 0, i16 0, i16 1104, i16 0, i16 0, i16 1104, i16 1105, i16 1105, i16 1105, i16 0, i16 1106, i16 1106, i16 1106, i16 0, i16 0, i16 1105, i16 0, i16 0, i16 1105, i16 1106, i16 0, i16 0, i16 1106, i16 880, i16 881, i16 881, i16 881, i16 881, i16 881, i16 881, i16 0, i16 881, i16 0, i16 0, i16 0, i16 881, i16 881, i16 881, i16 881, i16 0, i16 0, i16 1101, i16 0, i16 881, i16 0, i16 0, i16 0, i16 1104, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1105, i16 0, i16 0, i16 0, i16 1106, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 881, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 0, i16 882, i16 0, i16 0, i16 0, i16 882, i16 882, i16 882, i16 882, i16 0, i16 0, i16 0, i16 0, i16 882, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 882, i16 883, i16 883, i16 883, i16 883, i16 883, i16 883, i16 0, i16 883, i16 0, i16 0, i16 0, i16 883, i16 883, i16 883, i16 883, i16 0, i16 0, i16 0, i16 0, i16 883, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 883, i16 884, i16 884, i16 884, i16 884, i16 884, i16 884, i16 0, i16 884, i16 0, i16 0, i16 0, i16 884, i16 884, i16 884, i16 884, i16 0, i16 0, i16 0, i16 0, i16 884, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 884, i16 885, i16 885, i16 885, i16 885, i16 885, i16 885, i16 0, i16 885, i16 0, i16 0, i16 0, i16 885, i16 885, i16 885, i16 885, i16 0, i16 0, i16 0, i16 0, i16 885, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 885, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 0, i16 886, i16 0, i16 0, i16 0, i16 886, i16 886, i16 886, i16 886, i16 0, i16 0, i16 0, i16 0, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 0, i16 0, i16 0, i16 0, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 0, i16 890, i16 0, i16 0, i16 0, i16 890, i16 890, i16 890, i16 890, i16 0, i16 0, i16 0, i16 0, i16 890, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 890, i16 892, i16 892, i16 892, i16 892, i16 892, i16 892, i16 0, i16 892, i16 0, i16 0, i16 0, i16 892, i16 892, i16 892, i16 892, i16 0, i16 0, i16 0, i16 0, i16 892, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 892, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 893, i16 894, i16 894, i16 894, i16 894, i16 894, i16 894, i16 0, i16 894, i16 0, i16 0, i16 0, i16 894, i16 894, i16 894, i16 894, i16 0, i16 0, i16 0, i16 0, i16 894, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 894, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 0, i16 895, i16 0, i16 0, i16 0, i16 895, i16 895, i16 895, i16 895, i16 0, i16 0, i16 0, i16 0, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 0, i16 0, i16 0, i16 0, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 896, i16 896, i16 896, i16 896, i16 896, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 896, i16 0, i16 0, i16 0, i16 0, i16 0, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 0, i16 0, i16 0, i16 0, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 899, i16 899, i16 899, i16 899, i16 899, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 899, i16 899, i16 899, i16 899, i16 899, i16 899, i16 899, i16 899, i16 899, i16 899, i16 0, i16 0, i16 0, i16 0, i16 899, i16 899, i16 899, i16 899, i16 899, i16 899, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 899, i16 899, i16 899, i16 899, i16 899, i16 899, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 0, i16 912, i16 0, i16 0, i16 0, i16 912, i16 912, i16 912, i16 912, i16 0, i16 0, i16 0, i16 0, i16 912, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 912, i16 913, i16 913, i16 913, i16 913, i16 913, i16 913, i16 0, i16 913, i16 0, i16 0, i16 0, i16 913, i16 913, i16 913, i16 913, i16 0, i16 0, i16 0, i16 0, i16 913, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 913, i16 914, i16 914, i16 914, i16 914, i16 914, i16 914, i16 0, i16 914, i16 0, i16 0, i16 0, i16 914, i16 914, i16 914, i16 914, i16 0, i16 0, i16 0, i16 0, i16 914, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 914, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 915, i16 916, i16 916, i16 916, i16 916, i16 916, i16 916, i16 0, i16 916, i16 0, i16 0, i16 0, i16 916, i16 916, i16 916, i16 916, i16 0, i16 0, i16 0, i16 0, i16 916, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 916, i16 917, i16 917, i16 917, i16 917, i16 917, i16 917, i16 0, i16 917, i16 0, i16 0, i16 0, i16 917, i16 917, i16 917, i16 917, i16 0, i16 0, i16 0, i16 0, i16 917, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 917, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 0, i16 918, i16 0, i16 0, i16 0, i16 918, i16 918, i16 918, i16 918, i16 0, i16 0, i16 0, i16 0, i16 918, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 918, i16 919, i16 919, i16 919, i16 919, i16 919, i16 919, i16 0, i16 919, i16 0, i16 0, i16 0, i16 919, i16 919, i16 919, i16 919, i16 0, i16 0, i16 0, i16 0, i16 919, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 919, i16 920, i16 920, i16 920, i16 920, i16 920, i16 920, i16 0, i16 920, i16 0, i16 0, i16 0, i16 920, i16 920, i16 920, i16 920, i16 0, i16 0, i16 0, i16 0, i16 920, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 920, i16 921, i16 921, i16 921, i16 921, i16 921, i16 921, i16 0, i16 921, i16 0, i16 0, i16 0, i16 921, i16 921, i16 921, i16 921, i16 0, i16 0, i16 0, i16 0, i16 921, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 921, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 0, i16 922, i16 0, i16 0, i16 0, i16 922, i16 922, i16 922, i16 922, i16 0, i16 0, i16 0, i16 0, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 0, i16 0, i16 0, i16 0, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 0, i16 926, i16 0, i16 0, i16 0, i16 926, i16 926, i16 926, i16 926, i16 0, i16 0, i16 0, i16 0, i16 926, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 926, i16 928, i16 928, i16 928, i16 928, i16 928, i16 928, i16 0, i16 928, i16 0, i16 0, i16 0, i16 928, i16 928, i16 928, i16 928, i16 0, i16 0, i16 0, i16 0, i16 928, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 928, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 929, i16 930, i16 930, i16 930, i16 930, i16 930, i16 930, i16 0, i16 930, i16 0, i16 0, i16 0, i16 930, i16 930, i16 930, i16 930, i16 0, i16 0, i16 0, i16 0, i16 930, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 930, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 0, i16 931, i16 0, i16 0, i16 0, i16 931, i16 931, i16 931, i16 931, i16 0, i16 0, i16 0, i16 0, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 0, i16 0, i16 0, i16 0, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 933, i16 933, i16 933, i16 933, i16 933, i16 0, i16 933, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 0, i16 0, i16 0, i16 0, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 934, i16 934, i16 934, i16 934, i16 934, i16 0, i16 0, i16 0, i16 0, i16 0, i16 934, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 0, i16 0, i16 0, i16 0, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 935, i16 935, i16 935, i16 935, i16 935, i16 935, i16 0, i16 935, i16 0, i16 0, i16 0, i16 935, i16 935, i16 935, i16 935, i16 0, i16 0, i16 0, i16 0, i16 935, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 935, i16 937, i16 937, i16 937, i16 937, i16 937, i16 937, i16 0, i16 937, i16 0, i16 0, i16 0, i16 937, i16 937, i16 937, i16 937, i16 0, i16 0, i16 0, i16 0, i16 937, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 937, i16 938, i16 938, i16 938, i16 938, i16 938, i16 938, i16 0, i16 938, i16 0, i16 0, i16 0, i16 938, i16 938, i16 938, i16 938, i16 0, i16 0, i16 0, i16 0, i16 938, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 938, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 0, i16 939, i16 0, i16 0, i16 0, i16 939, i16 939, i16 939, i16 939, i16 0, i16 0, i16 0, i16 0, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 0, i16 0, i16 0, i16 0, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 0, i16 945, i16 0, i16 0, i16 0, i16 945, i16 945, i16 945, i16 945, i16 0, i16 0, i16 0, i16 0, i16 945, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 945, i16 946, i16 946, i16 946, i16 946, i16 946, i16 946, i16 0, i16 946, i16 0, i16 0, i16 0, i16 946, i16 946, i16 946, i16 946, i16 0, i16 0, i16 0, i16 0, i16 946, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 946, i16 947, i16 947, i16 947, i16 947, i16 947, i16 947, i16 0, i16 947, i16 0, i16 0, i16 0, i16 947, i16 947, i16 947, i16 947, i16 0, i16 0, i16 0, i16 0, i16 947, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 947, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 948, i16 951, i16 951, i16 951, i16 951, i16 951, i16 951, i16 0, i16 951, i16 0, i16 0, i16 0, i16 951, i16 951, i16 951, i16 951, i16 0, i16 0, i16 0, i16 0, i16 951, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 951, i16 952, i16 952, i16 952, i16 952, i16 952, i16 952, i16 0, i16 952, i16 0, i16 0, i16 0, i16 952, i16 952, i16 952, i16 952, i16 0, i16 0, i16 0, i16 0, i16 952, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 952, i16 953, i16 953, i16 953, i16 953, i16 953, i16 953, i16 0, i16 953, i16 0, i16 0, i16 0, i16 953, i16 953, i16 953, i16 953, i16 0, i16 0, i16 0, i16 0, i16 953, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 953, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 0, i16 954, i16 0, i16 0, i16 0, i16 954, i16 954, i16 954, i16 954, i16 0, i16 0, i16 0, i16 0, i16 954, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 954, i16 955, i16 955, i16 955, i16 955, i16 955, i16 955, i16 0, i16 955, i16 0, i16 0, i16 0, i16 955, i16 955, i16 955, i16 955, i16 0, i16 0, i16 0, i16 0, i16 955, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 955, i16 956, i16 956, i16 956, i16 956, i16 956, i16 956, i16 0, i16 956, i16 0, i16 0, i16 0, i16 956, i16 956, i16 956, i16 956, i16 0, i16 0, i16 0, i16 0, i16 956, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 956, i16 957, i16 957, i16 957, i16 957, i16 957, i16 957, i16 0, i16 957, i16 0, i16 0, i16 0, i16 957, i16 957, i16 957, i16 957, i16 0, i16 0, i16 0, i16 0, i16 957, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 957, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 0, i16 958, i16 0, i16 0, i16 0, i16 958, i16 958, i16 958, i16 958, i16 0, i16 0, i16 0, i16 0, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 0, i16 0, i16 0, i16 0, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 961, i16 961, i16 961, i16 961, i16 961, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 961, i16 0, i16 0, i16 0, i16 0, i16 0, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 0, i16 0, i16 0, i16 0, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 964, i16 964, i16 964, i16 964, i16 964, i16 964, i16 0, i16 964, i16 0, i16 0, i16 0, i16 964, i16 964, i16 964, i16 964, i16 0, i16 0, i16 0, i16 0, i16 964, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 964, i16 965, i16 965, i16 965, i16 965, i16 965, i16 965, i16 0, i16 965, i16 0, i16 0, i16 0, i16 965, i16 965, i16 965, i16 965, i16 0, i16 0, i16 0, i16 0, i16 965, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 965, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 0, i16 966, i16 0, i16 0, i16 0, i16 966, i16 966, i16 966, i16 966, i16 0, i16 0, i16 0, i16 0, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 0, i16 0, i16 0, i16 0, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 0, i16 972, i16 0, i16 0, i16 0, i16 972, i16 972, i16 972, i16 972, i16 0, i16 0, i16 0, i16 0, i16 972, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 972, i16 973, i16 973, i16 973, i16 973, i16 973, i16 973, i16 0, i16 973, i16 0, i16 0, i16 0, i16 973, i16 973, i16 973, i16 973, i16 0, i16 0, i16 0, i16 0, i16 973, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 973, i16 974, i16 974, i16 974, i16 974, i16 974, i16 974, i16 0, i16 974, i16 0, i16 0, i16 0, i16 974, i16 974, i16 974, i16 974, i16 0, i16 0, i16 0, i16 0, i16 974, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 974, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 975, i16 976, i16 976, i16 976, i16 976, i16 976, i16 976, i16 0, i16 976, i16 0, i16 0, i16 0, i16 976, i16 976, i16 976, i16 976, i16 0, i16 0, i16 0, i16 0, i16 976, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 976, i16 977, i16 977, i16 977, i16 977, i16 977, i16 977, i16 0, i16 977, i16 0, i16 0, i16 0, i16 977, i16 977, i16 977, i16 977, i16 0, i16 0, i16 0, i16 0, i16 977, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 977, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 0, i16 978, i16 0, i16 0, i16 0, i16 978, i16 978, i16 978, i16 978, i16 0, i16 0, i16 0, i16 0, i16 978, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 978, i16 979, i16 979, i16 979, i16 979, i16 979, i16 979, i16 0, i16 979, i16 0, i16 0, i16 0, i16 979, i16 979, i16 979, i16 979, i16 0, i16 0, i16 0, i16 0, i16 979, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 979, i16 980, i16 980, i16 980, i16 980, i16 980, i16 980, i16 0, i16 980, i16 0, i16 0, i16 0, i16 980, i16 980, i16 980, i16 980, i16 0, i16 0, i16 0, i16 0, i16 980, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 980, i16 981, i16 981, i16 981, i16 981, i16 981, i16 981, i16 0, i16 981, i16 0, i16 0, i16 0, i16 981, i16 981, i16 981, i16 981, i16 0, i16 0, i16 0, i16 0, i16 981, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 981, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 0, i16 982, i16 0, i16 0, i16 0, i16 982, i16 982, i16 982, i16 982, i16 0, i16 0, i16 0, i16 0, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 0, i16 0, i16 0, i16 0, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 0, i16 984, i16 0, i16 0, i16 0, i16 984, i16 984, i16 984, i16 984, i16 0, i16 0, i16 0, i16 0, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 0, i16 0, i16 0, i16 0, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 987, i16 987, i16 987, i16 987, i16 987, i16 0, i16 987, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 0, i16 0, i16 0, i16 0, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 988, i16 988, i16 988, i16 988, i16 988, i16 0, i16 0, i16 0, i16 0, i16 0, i16 988, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 0, i16 0, i16 0, i16 0, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 991, i16 991, i16 991, i16 991, i16 991, i16 991, i16 0, i16 991, i16 0, i16 0, i16 0, i16 991, i16 991, i16 991, i16 991, i16 0, i16 0, i16 0, i16 0, i16 991, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 991, i16 995, i16 995, i16 995, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 995, i16 0, i16 0, i16 0, i16 0, i16 0, i16 995, i16 995, i16 995, i16 995, i16 995, i16 995, i16 995, i16 995, i16 995, i16 995, i16 0, i16 0, i16 0, i16 0, i16 995, i16 995, i16 995, i16 995, i16 995, i16 995, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 995, i16 995, i16 995, i16 995, i16 995, i16 998, i16 998, i16 998, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 998, i16 0, i16 0, i16 0, i16 0, i16 0, i16 998, i16 998, i16 998, i16 998, i16 998, i16 998, i16 998, i16 998, i16 998, i16 998, i16 0, i16 0, i16 0, i16 0, i16 998, i16 998, i16 998, i16 998, i16 998, i16 998, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 998, i16 998, i16 998, i16 998, i16 998, i16 999, i16 999, i16 999, i16 999, i16 999, i16 999, i16 0, i16 999, i16 0, i16 0, i16 0, i16 999, i16 999, i16 999, i16 999, i16 0, i16 0, i16 0, i16 0, i16 999, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 999, i16 1000, i16 1000, i16 1000, i16 1000, i16 1000, i16 1000, i16 0, i16 1000, i16 0, i16 0, i16 0, i16 1000, i16 1000, i16 1000, i16 1000, i16 0, i16 0, i16 0, i16 0, i16 1000, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1000, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 0, i16 1001, i16 0, i16 0, i16 0, i16 1001, i16 1001, i16 1001, i16 1001, i16 0, i16 0, i16 0, i16 0, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 0, i16 0, i16 0, i16 0, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1006, i16 1006, i16 1006, i16 1006, i16 1006, i16 1006, i16 0, i16 1006, i16 0, i16 0, i16 0, i16 1006, i16 1006, i16 1006, i16 1006, i16 0, i16 0, i16 0, i16 0, i16 1006, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1006, i16 1007, i16 1007, i16 1007, i16 1007, i16 1007, i16 1007, i16 0, i16 1007, i16 0, i16 0, i16 0, i16 1007, i16 1007, i16 1007, i16 1007, i16 0, i16 0, i16 0, i16 0, i16 1007, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1007, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 0, i16 1008, i16 0, i16 0, i16 0, i16 1008, i16 1008, i16 1008, i16 1008, i16 0, i16 0, i16 0, i16 0, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 0, i16 0, i16 0, i16 0, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 0, i16 0, i16 0, i16 0, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1019, i16 1019, i16 1019, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1019, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 0, i16 0, i16 0, i16 0, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 0, i16 1023, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1023, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 0, i16 0, i16 0, i16 0, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1026, i16 1026, i16 1026, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1026, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 0, i16 0, i16 0, i16 0, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1026, i16 1026, i16 1026, i16 1026, i16 1026, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1030, i16 0, i16 0, i16 1030, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 0, i16 0, i16 0, i16 0, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1033, i16 1033, i16 1033, i16 1033, i16 1033, i16 1033, i16 0, i16 1033, i16 0, i16 0, i16 0, i16 1033, i16 1033, i16 1033, i16 1033, i16 0, i16 0, i16 0, i16 0, i16 1033, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1033, i16 1035, i16 1035, i16 1035, i16 1035, i16 1035, i16 1035, i16 0, i16 1035, i16 0, i16 0, i16 0, i16 1035, i16 1035, i16 1035, i16 1035, i16 0, i16 0, i16 0, i16 0, i16 1035, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1035, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1036, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 0, i16 1038, i16 0, i16 0, i16 0, i16 1038, i16 1038, i16 1038, i16 1038, i16 0, i16 0, i16 0, i16 0, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 0, i16 0, i16 0, i16 0, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 0, i16 0, i16 0, i16 0, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1047, i16 1047, i16 1047, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1047, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 0, i16 0, i16 0, i16 0, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1047, i16 1047, i16 1047, i16 1047, i16 1047, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 0, i16 1056, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1056, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 0, i16 0, i16 0, i16 0, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 0, i16 1059, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1059, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 0, i16 0, i16 0, i16 0, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1062, i16 1062, i16 1062, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1062, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 0, i16 0, i16 0, i16 0, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1062, i16 1062, i16 1062, i16 1062, i16 1062, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1068, i16 0, i16 0, i16 1068, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 0, i16 0, i16 0, i16 0, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1071, i16 0, i16 0, i16 1071, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 0, i16 0, i16 0, i16 0, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 0, i16 1077, i16 0, i16 0, i16 0, i16 1077, i16 1077, i16 1077, i16 1077, i16 0, i16 0, i16 0, i16 0, i16 1077, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1077, i16 1078, i16 1078, i16 1078, i16 1078, i16 1078, i16 1078, i16 0, i16 1078, i16 0, i16 0, i16 0, i16 1078, i16 1078, i16 1078, i16 1078, i16 0, i16 0, i16 0, i16 0, i16 1078, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1078, i16 1079, i16 1079, i16 1079, i16 1079, i16 1079, i16 1079, i16 0, i16 1079, i16 0, i16 0, i16 0, i16 1079, i16 1079, i16 1079, i16 1079, i16 0, i16 0, i16 0, i16 0, i16 1079, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1079, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1080, i16 1081, i16 1081, i16 1081, i16 1081, i16 1081, i16 1081, i16 0, i16 1081, i16 0, i16 0, i16 0, i16 1081, i16 1081, i16 1081, i16 1081, i16 0, i16 0, i16 0, i16 0, i16 1081, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1081, i16 1082, i16 1082, i16 1082, i16 1082, i16 1082, i16 1082, i16 0, i16 1082, i16 0, i16 0, i16 0, i16 1082, i16 1082, i16 1082, i16 1082, i16 0, i16 0, i16 0, i16 0, i16 1082, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1082, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 0, i16 1083, i16 0, i16 0, i16 0, i16 1083, i16 1083, i16 1083, i16 1083, i16 0, i16 0, i16 0, i16 0, i16 1083, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1083, i16 1084, i16 1084, i16 1084, i16 1084, i16 1084, i16 1084, i16 0, i16 1084, i16 0, i16 0, i16 0, i16 1084, i16 1084, i16 1084, i16 1084, i16 0, i16 0, i16 0, i16 0, i16 1084, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1084, i16 1085, i16 1085, i16 1085, i16 1085, i16 1085, i16 1085, i16 0, i16 1085, i16 0, i16 0, i16 0, i16 1085, i16 1085, i16 1085, i16 1085, i16 0, i16 0, i16 0, i16 0, i16 1085, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1085, i16 1086, i16 1086, i16 1086, i16 1086, i16 1086, i16 1086, i16 0, i16 1086, i16 0, i16 0, i16 0, i16 1086, i16 1086, i16 1086, i16 1086, i16 0, i16 0, i16 0, i16 0, i16 1086, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1086, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 0, i16 1087, i16 0, i16 0, i16 0, i16 1087, i16 1087, i16 1087, i16 1087, i16 0, i16 0, i16 0, i16 0, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 0, i16 0, i16 0, i16 0, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 0, i16 1090, i16 0, i16 0, i16 0, i16 1090, i16 1090, i16 1090, i16 1090, i16 0, i16 0, i16 0, i16 0, i16 1090, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1090, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 0, i16 1093, i16 0, i16 0, i16 0, i16 1093, i16 1093, i16 1093, i16 1093, i16 0, i16 0, i16 0, i16 0, i16 1093, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1093, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 0, i16 1094, i16 0, i16 0, i16 0, i16 1094, i16 1094, i16 1094, i16 1094, i16 0, i16 0, i16 0, i16 0, i16 1094, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1094, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 0, i16 1102, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1102, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 0, i16 0, i16 0, i16 0, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 0, i16 1103, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1103, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 0, i16 0, i16 0, i16 0, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 0, i16 0, i16 0, i16 0, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 0, i16 0, i16 0, i16 0, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1110, i16 1110, i16 1110, i16 1110, i16 1110, i16 1110, i16 0, i16 1110, i16 0, i16 0, i16 0, i16 1110, i16 1110, i16 1110, i16 1110, i16 0, i16 0, i16 0, i16 0, i16 1110, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1110, i16 1111, i16 1111, i16 1111, i16 1111, i16 1111, i16 1111, i16 0, i16 1111, i16 0, i16 0, i16 0, i16 1111, i16 1111, i16 1111, i16 1111, i16 0, i16 0, i16 0, i16 0, i16 1111, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1111, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 0, i16 0, i16 0, i16 0, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 0, i16 0, i16 0, i16 0, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 0, i16 0, i16 0, i16 0, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 0, i16 0, i16 0, i16 0, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 0, i16 0, i16 0, i16 0, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 0, i16 0, i16 0, i16 0, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 0, i16 0, i16 0, i16 0, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 0, i16 0, i16 0, i16 0, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 0, i16 0, i16 0, i16 0, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 0, i16 0, i16 0, i16 0, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 0, i16 0, i16 0, i16 0, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 0, i16 0, i16 0, i16 0, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 0, i16 0, i16 0, i16 0, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 0, i16 0, i16 0, i16 0, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 0, i16 0, i16 0, i16 0, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 0, i16 0, i16 0, i16 0, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 0, i16 0, i16 0, i16 0, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 0, i16 0, i16 0, i16 0, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 0, i16 0, i16 0, i16 0, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 0, i16 0, i16 0, i16 0, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 0, i16 0, i16 0, i16 0, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 0, i16 0, i16 0, i16 0, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 0, i16 0, i16 0, i16 0, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 0, i16 0, i16 0, i16 0, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1153, i16 1153, i16 0, i16 1153, i16 1153, i16 1153, i16 1153, i16 1153, i16 1153, i16 1154, i16 1154, i16 1154, i16 1155, i16 1155, i16 0, i16 1155, i16 1155, i16 1155, i16 1155, i16 1155, i16 1155, i16 1156, i16 0, i16 1156, i16 1157, i16 1157, i16 1157, i16 1157, i16 1158, i16 1158, i16 0, i16 1158, i16 1158, i16 1158, i16 1158, i16 1158, i16 1158, i16 1159, i16 1159, i16 1159, i16 1159, i16 1159, i16 1159, i16 1159, i16 1159, i16 1159, i16 1160, i16 1160, i16 0, i16 1160, i16 1160, i16 1160, i16 1160, i16 1160, i16 1160, i16 1161, i16 1161, i16 1161, i16 1161, i16 1161, i16 1161, i16 1161, i16 1161, i16 1161, i16 1162, i16 1162, i16 1162, i16 1162, i16 1162, i16 1162, i16 1162, i16 1162, i16 1162, i16 1164, i16 1164, i16 1164, i16 1165, i16 1165, i16 0, i16 1165, i16 1165, i16 1165, i16 1165, i16 1165, i16 1165, i16 1166, i16 1166, i16 1166, i16 1166, i16 1166, i16 1166, i16 1166, i16 1166, i16 1166, i16 1167, i16 1167, i16 1167, i16 1167, i16 1167, i16 1167, i16 1167, i16 1167, i16 1167, i16 1168, i16 1168, i16 1168, i16 1168, i16 1168, i16 1168, i16 1168, i16 1168, i16 1168, i16 1169, i16 1169, i16 0, i16 1169, i16 1169, i16 1169, i16 1169, i16 1169, i16 1169, i16 1170, i16 1170, i16 1170, i16 1170, i16 1170, i16 1170, i16 1170, i16 1170, i16 1170, i16 1171, i16 1171, i16 1171, i16 1171, i16 1171, i16 1171, i16 1171, i16 1171, i16 1171, i16 1172, i16 1172, i16 1172, i16 1172, i16 1172, i16 1172, i16 1172, i16 1172, i16 1172, i16 1173, i16 1173, i16 1173, i16 1173, i16 0, i16 1173, i16 1173, i16 1173, i16 1174, i16 1174, i16 1174, i16 1174, i16 1174, i16 1174, i16 1174, i16 1174, i16 1174, i16 1175, i16 1175, i16 1175, i16 1175, i16 1175, i16 1175, i16 1175, i16 1175, i16 1175, i16 1176, i16 1176, i16 1176, i16 1176, i16 1176, i16 1176, i16 1176, i16 1176, i16 1176, i16 1177, i16 1177, i16 0, i16 1177, i16 1177, i16 1177, i16 1177, i16 1177, i16 1177, i16 1178, i16 1178, i16 0, i16 1178, i16 1178, i16 1178, i16 1178, i16 1178, i16 1178, i16 1179, i16 1179, i16 0, i16 1179, i16 1179, i16 1179, i16 1179, i16 1179, i16 1179, i16 1180, i16 1180, i16 1180, i16 1180, i16 1180, i16 1180, i16 1180, i16 1180, i16 1180, i16 1181, i16 1181, i16 1181, i16 1181, i16 1181, i16 1181, i16 1181, i16 1181, i16 1181, i16 1182, i16 1182, i16 1182, i16 1182, i16 1182, i16 1182, i16 1182, i16 1182, i16 1182, i16 1183, i16 1183, i16 1183, i16 1183, i16 1183, i16 1183, i16 1183, i16 1183, i16 1183, i16 1184, i16 1184, i16 1184, i16 1184, i16 1184, i16 1184, i16 1184, i16 1184, i16 1184, i16 1185, i16 1185, i16 1185, i16 1185, i16 1185, i16 1185, i16 1185, i16 1185, i16 1185, i16 1186, i16 1186, i16 1186, i16 1186, i16 1186, i16 1186, i16 1186, i16 1186, i16 1186, i16 1187, i16 1187, i16 1187, i16 1187, i16 1187, i16 1187, i16 1187, i16 1187, i16 1187, i16 1188, i16 1188, i16 1188, i16 1188, i16 1188, i16 1188, i16 1188, i16 1188, i16 1188, i16 1189, i16 1189, i16 1189, i16 1189, i16 1189, i16 1189, i16 1189, i16 1189, i16 1189, i16 1190, i16 1190, i16 1190, i16 1190, i16 1190, i16 1190, i16 1190, i16 1190, i16 1190, i16 1191, i16 1191, i16 1191, i16 1191, i16 1191, i16 1191, i16 1191, i16 1191, i16 1191, i16 1192, i16 1192, i16 1192, i16 0, i16 0, i16 1192, i16 1192, i16 1192, i16 1193, i16 1193, i16 1193, i16 1193, i16 1193, i16 1193, i16 1193, i16 1193, i16 1193, i16 1194, i16 1194, i16 1194, i16 1194, i16 1194, i16 1194, i16 1194, i16 1194, i16 1194, i16 1195, i16 1195, i16 1195, i16 1195, i16 1195, i16 1195, i16 1195, i16 1195, i16 1195, i16 1196, i16 1196, i16 1196, i16 1196, i16 1196, i16 1196, i16 1196, i16 1196, i16 1196, i16 1197, i16 1197, i16 1197, i16 1197, i16 1197, i16 1197, i16 1197, i16 1197, i16 1197, i16 1198, i16 1198, i16 1198, i16 1198, i16 1198, i16 1198, i16 1198, i16 1198, i16 1198, i16 1199, i16 1199, i16 1199, i16 1199, i16 1199, i16 1199, i16 1199, i16 1199, i16 1199, i16 1200, i16 1200, i16 1200, i16 1200, i16 1200, i16 1200, i16 1200, i16 1200, i16 1200, i16 1201, i16 1201, i16 1201, i16 1201, i16 1201, i16 1201, i16 1201, i16 1201, i16 1201, i16 1202, i16 1202, i16 1202, i16 1202, i16 1202, i16 1202, i16 1202, i16 1202, i16 1202, i16 1203, i16 1203, i16 1203, i16 1203, i16 1203, i16 1203, i16 1203, i16 1203, i16 1203, i16 1204, i16 1204, i16 1204, i16 1204, i16 1204, i16 1204, i16 1204, i16 1204, i16 1204, i16 1205, i16 1205, i16 1205, i16 1205, i16 1205, i16 1205, i16 1205, i16 1205, i16 1205, i16 1206, i16 1206, i16 1206, i16 1206, i16 1206, i16 1206, i16 1206, i16 1206, i16 1206, i16 1207, i16 1207, i16 1207, i16 1207, i16 1207, i16 1207, i16 1207, i16 1207, i16 1207, i16 1208, i16 1208, i16 1208, i16 1208, i16 1208, i16 1208, i16 1208, i16 1208, i16 1208, i16 1209, i16 1209, i16 1209, i16 1209, i16 1209, i16 1209, i16 1209, i16 1209, i16 1209, i16 1210, i16 1210, i16 1210, i16 1210, i16 1210, i16 1210, i16 1210, i16 1210, i16 1210, i16 1211, i16 1211, i16 1211, i16 1211, i16 1211, i16 1211, i16 1211, i16 1211, i16 1211, i16 1212, i16 1212, i16 1212, i16 1212, i16 1212, i16 1212, i16 1212, i16 1212, i16 1212, i16 1213, i16 1213, i16 1213, i16 1213, i16 1213, i16 1213, i16 1213, i16 1213, i16 1213, i16 1214, i16 1214, i16 1214, i16 1214, i16 1214, i16 1214, i16 1214, i16 1214, i16 1214, i16 1215, i16 1215, i16 1215, i16 1215, i16 1215, i16 1215, i16 1215, i16 1215, i16 1215, i16 1216, i16 1216, i16 1216, i16 1216, i16 1216, i16 1216, i16 1216, i16 1216, i16 1216, i16 1217, i16 1217, i16 1217, i16 1217, i16 1217, i16 1217, i16 1217, i16 1217, i16 1217, i16 1218, i16 1218, i16 1218, i16 1218, i16 1218, i16 1218, i16 1218, i16 1218, i16 1218, i16 1219, i16 1219, i16 1219, i16 1219, i16 1219, i16 1219, i16 1219, i16 1219, i16 1219, i16 1220, i16 1220, i16 1220, i16 1220, i16 1220, i16 1220, i16 1220, i16 1220, i16 1220, i16 1221, i16 1221, i16 1221, i16 1221, i16 1221, i16 1221, i16 1221, i16 1221, i16 1221, i16 1222, i16 1222, i16 0, i16 0, i16 0, i16 1222, i16 1222, i16 1222, i16 1223, i16 1223, i16 1223, i16 1223, i16 1223, i16 1223, i16 1223, i16 1223, i16 1223, i16 1224, i16 1224, i16 1224, i16 1224, i16 1224, i16 1224, i16 1224, i16 1224, i16 1224, i16 1225, i16 1225, i16 1225, i16 1225, i16 1225, i16 1225, i16 1225, i16 1225, i16 1225, i16 1226, i16 1226, i16 1226, i16 1226, i16 1226, i16 1226, i16 1226, i16 1226, i16 1226, i16 1227, i16 1227, i16 1227, i16 1227, i16 1227, i16 1227, i16 1227, i16 1227, i16 1227, i16 1228, i16 1228, i16 1228, i16 1228, i16 1228, i16 1228, i16 1228, i16 1228, i16 1228, i16 1229, i16 1229, i16 1229, i16 1229, i16 1229, i16 1229, i16 1229, i16 1229, i16 1229, i16 1230, i16 1230, i16 1230, i16 1230, i16 1230, i16 1230, i16 1230, i16 1230, i16 1230, i16 1231, i16 1231, i16 1231, i16 1231, i16 1231, i16 1231, i16 1231, i16 1231, i16 1231, i16 1232, i16 1232, i16 1232, i16 1232, i16 1232, i16 1232, i16 1232, i16 1232, i16 1232, i16 1233, i16 1233, i16 1233, i16 1233, i16 1233, i16 1233, i16 1233, i16 1233, i16 1233, i16 1234, i16 1234, i16 1234, i16 1234, i16 1234, i16 1234, i16 1234, i16 1234, i16 1234, i16 1235, i16 1235, i16 1235, i16 1235, i16 1235, i16 1235, i16 1235, i16 1235, i16 1235, i16 1236, i16 1236, i16 1236, i16 1236, i16 1236, i16 1236, i16 1236, i16 1236, i16 1236, i16 1237, i16 1237, i16 1237, i16 1237, i16 1237, i16 1237, i16 1237, i16 1237, i16 1237, i16 1238, i16 1238, i16 1238, i16 1238, i16 1238, i16 1238, i16 1238, i16 1238, i16 1238, i16 1239, i16 1239, i16 1239, i16 1239, i16 1239, i16 1239, i16 1239, i16 1239, i16 1239, i16 1240, i16 1240, i16 1240, i16 1240, i16 1240, i16 1240, i16 1240, i16 1240, i16 1240, i16 1241, i16 1241, i16 1241, i16 1241, i16 1241, i16 1241, i16 1241, i16 1241, i16 1241, i16 1242, i16 1242, i16 1242, i16 0, i16 0, i16 1242, i16 1242, i16 1242, i16 1243, i16 1243, i16 0, i16 0, i16 0, i16 1243, i16 1243, i16 1243, i16 1244, i16 1244, i16 1244, i16 1244, i16 1244, i16 1244, i16 1244, i16 1244, i16 1244, i16 1245, i16 1245, i16 1245, i16 1245, i16 1245, i16 1245, i16 1245, i16 1245, i16 1245, i16 1246, i16 1246, i16 1246, i16 1246, i16 1246, i16 1246, i16 1246, i16 1246, i16 1246, i16 1247, i16 1247, i16 1247, i16 1247, i16 1247, i16 1247, i16 1247, i16 1247, i16 1247, i16 1248, i16 1248, i16 1248, i16 1248, i16 1248, i16 1248, i16 1248, i16 1248, i16 1248, i16 1249, i16 1249, i16 1249, i16 1249, i16 1249, i16 1249, i16 1249, i16 1249, i16 1249, i16 1250, i16 1250, i16 1250, i16 1250, i16 1250, i16 1250, i16 1250, i16 1250, i16 1250, i16 1251, i16 1251, i16 1251, i16 1251, i16 1251, i16 1251, i16 1251, i16 1251, i16 1251, i16 1252, i16 1252, i16 1252, i16 1252, i16 1252, i16 1252, i16 1252, i16 1252, i16 1252, i16 1253, i16 1253, i16 1253, i16 1253, i16 1253, i16 1253, i16 1253, i16 1253, i16 1253, i16 1254, i16 1254, i16 1254, i16 1254, i16 1254, i16 1254, i16 1254, i16 1254, i16 1254, i16 1255, i16 1255, i16 1255, i16 1255, i16 1255, i16 1255, i16 1255, i16 1255, i16 1255, i16 1256, i16 1256, i16 1256, i16 1256, i16 1256, i16 1256, i16 1256, i16 1256, i16 1256, i16 1257, i16 1257, i16 1257, i16 1257, i16 1257, i16 1257, i16 1257, i16 1257, i16 1257, i16 1258, i16 1258, i16 1258, i16 1258, i16 1258, i16 1258, i16 1258, i16 1258, i16 1258, i16 1259, i16 1259, i16 1259, i16 1259, i16 1259, i16 1259, i16 1259, i16 1259, i16 1259, i16 1260, i16 1260, i16 1260, i16 1260, i16 1260, i16 1260, i16 1260, i16 1260, i16 1260, i16 1261, i16 1261, i16 1261, i16 1261, i16 1261, i16 1261, i16 1261, i16 1261, i16 1261, i16 1262, i16 1262, i16 1262, i16 1262, i16 1262, i16 1262, i16 1262, i16 1262, i16 1262, i16 1263, i16 1263, i16 1263, i16 1263, i16 1263, i16 1263, i16 1263, i16 1263, i16 1263, i16 1264, i16 1264, i16 1264, i16 1264, i16 1264, i16 1264, i16 1264, i16 1264, i16 1264, i16 1265, i16 1265, i16 1265, i16 1265, i16 1265, i16 1265, i16 1265, i16 1265, i16 1265, i16 1266, i16 1266, i16 1266, i16 0, i16 0, i16 1266, i16 1266, i16 1266, i16 1267, i16 1267, i16 1267, i16 1267, i16 1267, i16 1267, i16 1267, i16 1267, i16 1267, i16 1268, i16 1268, i16 1268, i16 1268, i16 1268, i16 1268, i16 1268, i16 1268, i16 1268, i16 1269, i16 1269, i16 1269, i16 1269, i16 1269, i16 1269, i16 1269, i16 1269, i16 1269, i16 1270, i16 1270, i16 1270, i16 1270, i16 1270, i16 1270, i16 1270, i16 1270, i16 1270, i16 1271, i16 1271, i16 1271, i16 1271, i16 1271, i16 1271, i16 1271, i16 1271, i16 1271, i16 1272, i16 1272, i16 1272, i16 1272, i16 1272, i16 1272, i16 1272, i16 1272, i16 1272, i16 1273, i16 1273, i16 1273, i16 1273, i16 1273, i16 1273, i16 1273, i16 1273, i16 1273, i16 1274, i16 1274, i16 1274, i16 1274, i16 1274, i16 1274, i16 1274, i16 1274, i16 1274, i16 1275, i16 1275, i16 1275, i16 1275, i16 1275, i16 1275, i16 1275, i16 1275, i16 1275, i16 1276, i16 1276, i16 1276, i16 1276, i16 1276, i16 1276, i16 1276, i16 1276, i16 1276, i16 1277, i16 1277, i16 1277, i16 1277, i16 1277, i16 1277, i16 1277, i16 1277, i16 1277, i16 1278, i16 1278, i16 1278, i16 1278, i16 1278, i16 1278, i16 1278, i16 1278, i16 1278, i16 1279, i16 1279, i16 1279, i16 1279, i16 1279, i16 1279, i16 1279, i16 1279, i16 1279, i16 1280, i16 1280, i16 1280, i16 1280, i16 1280, i16 1280, i16 1280, i16 1280, i16 1280, i16 1281, i16 1281, i16 1281, i16 1281, i16 1281, i16 1281, i16 1281, i16 1281, i16 1281, i16 1282, i16 1282, i16 1282, i16 1282, i16 1282, i16 1282, i16 1282, i16 1282, i16 1282, i16 1283, i16 1283, i16 0, i16 1283, i16 1283, i16 1283, i16 1283, i16 1283, i16 1283, i16 1284, i16 1284, i16 1284, i16 1284, i16 1284, i16 1284, i16 1284, i16 1284, i16 1284, i16 1285, i16 1285, i16 1285, i16 1285, i16 1285, i16 1285, i16 1285, i16 1285, i16 1285, i16 1286, i16 1286, i16 1286, i16 1286, i16 1286, i16 1286, i16 1286, i16 1286, i16 1286, i16 1287, i16 1287, i16 0, i16 1287, i16 1287, i16 1287, i16 1287, i16 1287, i16 1287, i16 1288, i16 1288, i16 1288, i16 1288, i16 1288, i16 1288, i16 1288, i16 1288, i16 1288, i16 1289, i16 1289, i16 1289, i16 1289, i16 1289, i16 1289, i16 1289, i16 1289, i16 1289, i16 1290, i16 1290, i16 1290, i16 1290, i16 1290, i16 1290, i16 1290, i16 1290, i16 1290, i16 1291, i16 1291, i16 1291, i16 1291, i16 1291, i16 1291, i16 1291, i16 1291, i16 1291, i16 1292, i16 1292, i16 1292, i16 1292, i16 1292, i16 1292, i16 1292, i16 1292, i16 1292, i16 1293, i16 1293, i16 1293, i16 1293, i16 1293, i16 1293, i16 1293, i16 1293, i16 1293, i16 1294, i16 1294, i16 1294, i16 1294, i16 1294, i16 1294, i16 1294, i16 1294, i16 1294, i16 1295, i16 1295, i16 1295, i16 1295, i16 1295, i16 1295, i16 1295, i16 1295, i16 1295, i16 1296, i16 1296, i16 1296, i16 1296, i16 1296, i16 1296, i16 1296, i16 1296, i16 1296, i16 1297, i16 1297, i16 1297, i16 1297, i16 1297, i16 1297, i16 1297, i16 1297, i16 1297, i16 1298, i16 1298, i16 1298, i16 1298, i16 1298, i16 1298, i16 1298, i16 1298, i16 1298, i16 1299, i16 1299, i16 1299, i16 1299, i16 1299, i16 1299, i16 1299, i16 1299, i16 1299, i16 1300, i16 1300, i16 1300, i16 1300, i16 1300, i16 1300, i16 1300, i16 1300, i16 1300, i16 1301, i16 1301, i16 1301, i16 1301, i16 1301, i16 1301, i16 1301, i16 1301, i16 1301, i16 1302, i16 1302, i16 1302, i16 1302, i16 1302, i16 1302, i16 1302, i16 1302, i16 1302, i16 1303, i16 1303, i16 1303, i16 1303, i16 1303, i16 1303, i16 1303, i16 1303, i16 1303, i16 1304, i16 1304, i16 1304, i16 1304, i16 1304, i16 1304, i16 1304, i16 1304, i16 1304, i16 1305, i16 1305, i16 1305, i16 1305, i16 1305, i16 1305, i16 1305, i16 1305, i16 1305, i16 1306, i16 1306, i16 1306, i16 1306, i16 1306, i16 1306, i16 1306, i16 1306, i16 1306, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152], align 16
@yy_def = internal constant [1307 x i16] [i16 0, i16 1152, i16 1, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1153, i16 1154, i16 1155, i16 1152, i16 1152, i16 1156, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1157, i16 1157, i16 1158, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1153, i16 1152, i16 1159, i16 1154, i16 1160, i16 1155, i16 1161, i16 1152, i16 1157, i16 1158, i16 16, i16 1162, i16 1152, i16 1163, i16 1152, i16 16, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1157, i16 1165, i16 1157, i16 1157, i16 1157, i16 1152, i16 1152, i16 1166, i16 1167, i16 1152, i16 1153, i16 1153, i16 1153, i16 1154, i16 1154, i16 1155, i16 1155, i16 1155, i16 1152, i16 1162, i16 1168, i16 63, i16 1164, i16 1169, i16 1164, i16 1169, i16 1164, i16 95, i16 1164, i16 1164, i16 95, i16 1164, i16 95, i16 1164, i16 95, i16 1164, i16 95, i16 1164, i16 95, i16 1164, i16 1164, i16 95, i16 1164, i16 1164, i16 1164, i16 95, i16 1164, i16 95, i16 1164, i16 1164, i16 119, i16 119, i16 119, i16 121, i16 119, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1157, i16 74, i16 1157, i16 1157, i16 74, i16 1166, i16 1170, i16 1167, i16 1171, i16 1152, i16 1153, i16 1153, i16 82, i16 1154, i16 84, i16 1155, i16 1155, i16 87, i16 1172, i16 1152, i16 1164, i16 119, i16 159, i16 159, i16 159, i16 1164, i16 1164, i16 95, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 1164, i16 1164, i16 1164, i16 95, i16 159, i16 159, i16 159, i16 1164, i16 159, i16 159, i16 159, i16 1164, i16 159, i16 159, i16 159, i16 1164, i16 1164, i16 95, i16 159, i16 159, i16 159, i16 1164, i16 159, i16 159, i16 159, i16 159, i16 159, i16 1164, i16 1164, i16 159, i16 159, i16 159, i16 159, i16 159, i16 1164, i16 1164, i16 1164, i16 95, i16 159, i16 159, i16 159, i16 1164, i16 119, i16 216, i16 216, i16 216, i16 218, i16 216, i16 216, i16 222, i16 222, i16 222, i16 222, i16 222, i16 222, i16 222, i16 222, i16 216, i16 231, i16 231, i16 222, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1157, i16 74, i16 1173, i16 74, i16 1174, i16 1175, i16 1152, i16 82, i16 152, i16 155, i16 1172, i16 1176, i16 1164, i16 159, i16 253, i16 253, i16 253, i16 253, i16 253, i16 159, i16 159, i16 159, i16 1164, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 1164, i16 1177, i16 159, i16 159, i16 159, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 159, i16 159, i16 159, i16 1164, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 159, i16 159, i16 159, i16 253, i16 253, i16 253, i16 253, i16 216, i16 325, i16 325, i16 325, i16 327, i16 325, i16 325, i16 331, i16 331, i16 331, i16 331, i16 331, i16 331, i16 331, i16 331, i16 325, i16 340, i16 340, i16 331, i16 1164, i16 1164, i16 1164, i16 1164, i16 325, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 325, i16 1164, i16 1164, i16 325, i16 1164, i16 1164, i16 1152, i16 1152, i16 1152, i16 1152, i16 241, i16 1173, i16 1173, i16 1178, i16 1179, i16 1152, i16 1173, i16 1152, i16 373, i16 1180, i16 1181, i16 1182, i16 1183, i16 1152, i16 1184, i16 1152, i16 1185, i16 253, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 253, i16 253, i16 253, i16 253, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 1164, i16 1164, i16 159, i16 159, i16 159, i16 253, i16 253, i16 253, i16 253, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 253, i16 253, i16 253, i16 253, i16 253, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 1164, i16 1164, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 253, i16 253, i16 253, i16 253, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 390, i16 325, i16 496, i16 496, i16 496, i16 496, i16 496, i16 496, i16 502, i16 502, i16 502, i16 502, i16 502, i16 502, i16 502, i16 502, i16 496, i16 511, i16 511, i16 502, i16 496, i16 496, i16 496, i16 496, i16 1152, i16 1152, i16 1152, i16 373, i16 1152, i16 1173, i16 1178, i16 1152, i16 1186, i16 1179, i16 1187, i16 1188, i16 1173, i16 1173, i16 1173, i16 1173, i16 1173, i16 1173, i16 1152, i16 373, i16 1152, i16 1184, i16 388, i16 1185, i16 390, i16 543, i16 543, i16 543, i16 543, i16 543, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 253, i16 253, i16 253, i16 253, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 390, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 390, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 543, i16 543, i16 543, i16 543, i16 543, i16 496, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 1152, i16 1152, i16 373, i16 1152, i16 1189, i16 1152, i16 1152, i16 1152, i16 1178, i16 1178, i16 1178, i16 1179, i16 1179, i16 1179, i16 1190, i16 1190, i16 1188, i16 1190, i16 1191, i16 1188, i16 1152, i16 1192, i16 1192, i16 373, i16 1152, i16 1184, i16 541, i16 542, i16 543, i16 682, i16 682, i16 682, i16 682, i16 543, i16 543, i16 543, i16 543, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 390, i16 390, i16 390, i16 390, i16 1164, i16 1164, i16 543, i16 543, i16 543, i16 543, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 543, i16 543, i16 543, i16 543, i16 543, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 543, i16 543, i16 543, i16 543, i16 682, i16 682, i16 682, i16 682, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1152, i16 677, i16 1193, i16 1193, i16 1193, i16 1189, i16 1193, i16 1194, i16 1189, i16 1152, i16 1195, i16 1178, i16 1178, i16 1178, i16 1179, i16 1179, i16 1179, i16 1196, i16 1197, i16 1198, i16 1198, i16 1199, i16 1198, i16 1192, i16 1152, i16 1200, i16 1201, i16 1201, i16 1201, i16 1201, i16 1202, i16 1201, i16 1201, i16 1152, i16 1192, i16 1152, i16 1164, i16 1164, i16 1164, i16 1164, i16 811, i16 811, i16 1164, i16 1164, i16 1164, i16 1164, i16 811, i16 818, i16 818, i16 818, i16 811, i16 811, i16 811, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 811, i16 811, i16 811, i16 811, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 1164, i16 811, i16 811, i16 811, i16 1164, i16 1164, i16 1152, i16 1203, i16 1204, i16 1205, i16 1205, i16 1206, i16 1205, i16 1192, i16 1152, i16 1207, i16 1208, i16 1208, i16 1208, i16 1208, i16 1209, i16 1208, i16 1208, i16 1152, i16 1210, i16 1211, i16 1212, i16 1213, i16 1214, i16 1215, i16 1216, i16 1215, i16 1215, i16 1215, i16 1217, i16 1218, i16 1217, i16 1152, i16 1217, i16 1217, i16 1217, i16 1217, i16 1218, i16 1217, i16 1217, i16 879, i16 1219, i16 1219, i16 1220, i16 1219, i16 1208, i16 1152, i16 1221, i16 1221, i16 1192, i16 1152, i16 1222, i16 1222, i16 899, i16 899, i16 1222, i16 1222, i16 1222, i16 1222, i16 1223, i16 1224, i16 1225, i16 1224, i16 1224, i16 1224, i16 1226, i16 1227, i16 1226, i16 1152, i16 1226, i16 1226, i16 1226, i16 1226, i16 1227, i16 1226, i16 1226, i16 915, i16 1228, i16 1228, i16 1229, i16 1228, i16 1208, i16 1152, i16 1208, i16 1208, i16 1230, i16 1231, i16 1232, i16 1208, i16 1233, i16 1234, i16 1235, i16 1235, i16 1236, i16 1237, i16 1236, i16 1236, i16 1236, i16 1238, i16 1239, i16 1238, i16 1152, i16 1240, i16 1241, i16 1208, i16 1238, i16 1238, i16 1238, i16 1238, i16 1239, i16 1238, i16 1238, i16 948, i16 1152, i16 1242, i16 1243, i16 1244, i16 1245, i16 1246, i16 1246, i16 1247, i16 1248, i16 1247, i16 1247, i16 1247, i16 1249, i16 1250, i16 1249, i16 1152, i16 1249, i16 1249, i16 1249, i16 1249, i16 1250, i16 1249, i16 1249, i16 975, i16 1208, i16 1251, i16 1252, i16 1253, i16 1254, i16 1152, i16 1255, i16 1256, i16 1257, i16 1258, i16 1259, i16 1260, i16 1261, i16 1262, i16 1263, i16 1264, i16 1265, i16 1265, i16 1152, i16 1266, i16 1152, i16 1267, i16 1268, i16 1269, i16 1269, i16 1152, i16 1253, i16 1254, i16 989, i16 1258, i16 1258, i16 1258, i16 1270, i16 1271, i16 1253, i16 1272, i16 1273, i16 1273, i16 1274, i16 1273, i16 1275, i16 1254, i16 1276, i16 1277, i16 1277, i16 1278, i16 1277, i16 1279, i16 1279, i16 1280, i16 1279, i16 1281, i16 1152, i16 1152, i16 1281, i16 1152, i16 1152, i16 1152, i16 989, i16 1282, i16 1270, i16 1271, i16 1274, i16 1272, i16 1271, i16 1271, i16 1271, i16 1283, i16 1283, i16 1270, i16 1270, i16 1274, i16 1270, i16 1284, i16 1284, i16 1284, i16 1285, i16 1278, i16 1286, i16 1287, i16 1287, i16 1285, i16 1285, i16 1278, i16 1285, i16 1288, i16 1288, i16 1288, i16 1289, i16 1290, i16 1289, i16 1289, i16 1289, i16 1291, i16 1292, i16 1291, i16 1152, i16 1291, i16 1291, i16 1291, i16 1291, i16 1292, i16 1291, i16 1291, i16 1080, i16 1152, i16 1293, i16 1152, i16 1152, i16 1294, i16 1295, i16 1296, i16 1297, i16 1298, i16 1299, i16 1284, i16 1300, i16 1300, i16 1300, i16 1284, i16 1288, i16 1285, i16 1285, i16 1068, i16 1071, i16 1301, i16 1302, i16 1291, i16 1087, i16 1089, i16 1091, i16 1092, i16 1296, i16 1297, i16 1303, i16 1152, i16 1298, i16 1298, i16 1102, i16 1103, i16 1107, i16 1108, i16 1087, i16 1089, i16 1115, i16 1303, i16 1297, i16 1152, i16 1152, i16 1304, i16 1102, i16 1103, i16 1107, i16 1108, i16 1087, i16 1305, i16 1306, i16 1102, i16 1103, i16 1107, i16 1108, i16 1087, i16 1305, i16 1306, i16 1297, i16 1102, i16 1107, i16 1087, i16 0, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152], align 16
@yy_meta = internal constant [82 x i32] [i32 0, i32 1, i32 2, i32 3, i32 3, i32 3, i32 2, i32 4, i32 5, i32 4, i32 4, i32 4, i32 5, i32 6, i32 4, i32 4, i32 4, i32 4, i32 7, i32 4, i32 4, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 4, i32 4, i32 4, i32 4, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 4, i32 4, i32 4, i32 9], align 16
@yy_nxt = internal constant [17346 x i16] [i16 0, i16 4, i16 5, i16 6, i16 5, i16 5, i16 5, i16 7, i16 8, i16 9, i16 4, i16 4, i16 10, i16 4, i16 4, i16 4, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 17, i16 4, i16 18, i16 19, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 21, i16 20, i16 20, i16 22, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 20, i16 21, i16 20, i16 20, i16 23, i16 24, i16 25, i16 20, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 26, i16 36, i16 36, i16 42, i16 69, i16 27, i16 28, i16 79, i16 36, i16 29, i16 27, i16 28, i16 96, i16 94, i16 29, i16 32, i16 32, i16 32, i16 32, i16 32, i16 36, i16 134, i16 30, i16 95, i16 69, i16 101, i16 36, i16 30, i16 79, i16 107, i16 97, i16 102, i16 136, i16 33, i16 94, i16 96, i16 32, i16 32, i16 32, i16 32, i16 32, i16 69, i16 44, i16 134, i16 108, i16 51, i16 101, i16 41, i16 71, i16 135, i16 37, i16 107, i16 116, i16 41, i16 33, i16 136, i16 34, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 31, i16 71, i16 37, i16 135, i16 41, i16 31, i16 905, i16 117, i16 116, i16 808, i16 34, i16 34, i16 47, i16 103, i16 104, i16 683, i16 90, i16 684, i16 71, i16 48, i16 49, i16 157, i16 50, i16 50, i16 50, i16 50, i16 50, i16 50, i16 50, i16 50, i16 50, i16 50, i16 34, i16 83, i16 103, i16 1148, i16 51, i16 51, i16 52, i16 53, i16 54, i16 51, i16 55, i16 56, i16 57, i16 51, i16 58, i16 51, i16 59, i16 51, i16 51, i16 60, i16 61, i16 62, i16 51, i16 51, i16 51, i16 51, i16 63, i16 51, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 51, i16 59, i16 51, i16 51, i16 60, i16 61, i16 62, i16 51, i16 51, i16 51, i16 51, i16 65, i16 69, i16 137, i16 51, i16 69, i16 147, i16 66, i16 144, i16 39, i16 1096, i16 67, i16 105, i16 26, i16 68, i16 98, i16 26, i16 26, i16 26, i16 26, i16 26, i16 106, i16 101, i16 99, i16 65, i16 100, i16 137, i16 147, i16 102, i16 66, i16 27, i16 28, i16 67, i16 105, i16 29, i16 68, i16 98, i16 236, i16 316, i16 691, i16 72, i16 692, i16 317, i16 101, i16 99, i16 36, i16 71, i16 30, i16 1152, i16 71, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 236, i16 72, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 69, i16 242, i16 176, i16 1148, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 45, i16 31, i16 35, i16 37, i16 112, i16 177, i16 176, i16 36, i16 74, i16 74, i16 74, i16 74, i16 74, i16 35, i16 35, i16 81, i16 146, i16 36, i16 36, i16 1096, i16 113, i16 32, i16 114, i16 280, i16 115, i16 71, i16 71, i16 112, i16 281, i16 238, i16 282, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 113, i16 164, i16 114, i16 40, i16 82, i16 82, i16 82, i16 82, i16 82, i16 82, i16 69, i16 238, i16 36, i16 902, i16 316, i16 37, i16 166, i16 165, i16 317, i16 808, i16 167, i16 41, i16 168, i16 164, i16 190, i16 191, i16 37, i16 82, i16 82, i16 82, i16 82, i16 82, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 158, i16 140, i16 1139, i16 190, i16 84, i16 84, i16 84, i16 84, i16 84, i16 84, i16 1130, i16 251, i16 71, i16 257, i16 109, i16 41, i16 157, i16 239, i16 210, i16 110, i16 118, i16 158, i16 140, i16 233, i16 111, i16 234, i16 237, i16 84, i16 84, i16 84, i16 84, i16 84, i16 40, i16 40, i16 86, i16 109, i16 257, i16 211, i16 217, i16 239, i16 110, i16 210, i16 217, i16 217, i16 217, i16 217, i16 233, i16 237, i16 234, i16 246, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 103, i16 104, i16 1133, i16 105, i16 87, i16 87, i16 87, i16 87, i16 87, i16 87, i16 246, i16 254, i16 106, i16 80, i16 93, i16 255, i16 186, i16 256, i16 36, i16 212, i16 187, i16 103, i16 188, i16 213, i16 105, i16 214, i16 867, i16 87, i16 87, i16 87, i16 87, i16 87, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 158, i16 189, i16 369, i16 158, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 230, i16 258, i16 231, i16 232, i16 217, i16 217, i16 217, i16 217, i16 711, i16 1130, i16 712, i16 158, i16 189, i16 369, i16 158, i16 37, i16 1117, i16 74, i16 74, i16 74, i16 74, i16 74, i16 118, i16 118, i16 258, i16 1117, i16 1109, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 119, i16 120, i16 120, i16 120, i16 121, i16 122, i16 123, i16 124, i16 120, i16 120, i16 118, i16 118, i16 118, i16 118, i16 120, i16 120, i16 120, i16 120, i16 120, i16 120, i16 125, i16 126, i16 127, i16 118, i16 128, i16 118, i16 129, i16 118, i16 118, i16 130, i16 131, i16 132, i16 118, i16 118, i16 118, i16 118, i16 118, i16 120, i16 120, i16 120, i16 120, i16 120, i16 125, i16 126, i16 127, i16 128, i16 118, i16 129, i16 118, i16 118, i16 130, i16 131, i16 132, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 118, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 1073, i16 1073, i16 107, i16 116, i16 139, i16 139, i16 139, i16 139, i16 139, i16 139, i16 85, i16 716, i16 1098, i16 717, i16 272, i16 274, i16 169, i16 108, i16 287, i16 36, i16 170, i16 171, i16 172, i16 173, i16 107, i16 117, i16 116, i16 139, i16 139, i16 139, i16 139, i16 139, i16 73, i16 73, i16 73, i16 141, i16 73, i16 272, i16 274, i16 176, i16 263, i16 287, i16 174, i16 69, i16 264, i16 477, i16 265, i16 908, i16 1073, i16 478, i16 175, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 177, i16 176, i16 174, i16 41, i16 142, i16 142, i16 142, i16 142, i16 142, i16 142, i16 175, i16 284, i16 1073, i16 1043, i16 288, i16 182, i16 285, i16 371, i16 286, i16 159, i16 183, i16 159, i16 184, i16 849, i16 526, i16 292, i16 71, i16 142, i16 142, i16 142, i16 142, i16 142, i16 148, i16 80, i16 80, i16 149, i16 148, i16 288, i16 36, i16 371, i16 230, i16 158, i16 231, i16 232, i16 217, i16 217, i16 217, i16 217, i16 292, i16 986, i16 185, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 112, i16 158, i16 275, i16 526, i16 150, i16 150, i16 150, i16 150, i16 150, i16 150, i16 185, i16 289, i16 527, i16 1005, i16 383, i16 290, i16 113, i16 291, i16 114, i16 26, i16 115, i16 276, i16 968, i16 112, i16 293, i16 275, i16 37, i16 150, i16 150, i16 150, i16 150, i16 150, i16 83, i16 83, i16 83, i16 151, i16 83, i16 113, i16 267, i16 114, i16 190, i16 191, i16 268, i16 269, i16 270, i16 271, i16 477, i16 293, i16 529, i16 307, i16 478, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 190, i16 309, i16 370, i16 968, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 73, i16 307, i16 298, i16 990, i16 372, i16 277, i16 299, i16 385, i16 300, i16 278, i16 69, i16 279, i16 32, i16 370, i16 309, i16 158, i16 39, i16 152, i16 152, i16 152, i16 152, i16 152, i16 153, i16 85, i16 85, i16 154, i16 153, i16 372, i16 342, i16 302, i16 343, i16 158, i16 36, i16 303, i16 304, i16 305, i16 306, i16 526, i16 367, i16 394, i16 941, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 342, i16 158, i16 343, i16 71, i16 155, i16 155, i16 155, i16 155, i16 155, i16 155, i16 321, i16 394, i16 386, i16 941, i16 322, i16 138, i16 323, i16 178, i16 93, i16 395, i16 986, i16 159, i16 179, i16 159, i16 180, i16 69, i16 41, i16 155, i16 155, i16 155, i16 155, i16 155, i16 120, i16 386, i16 413, i16 527, i16 120, i16 120, i16 120, i16 120, i16 391, i16 93, i16 395, i16 158, i16 392, i16 109, i16 393, i16 181, i16 968, i16 415, i16 110, i16 526, i16 118, i16 118, i16 118, i16 111, i16 118, i16 413, i16 118, i16 968, i16 427, i16 118, i16 118, i16 118, i16 158, i16 428, i16 109, i16 429, i16 181, i16 71, i16 963, i16 110, i16 415, i16 434, i16 118, i16 118, i16 118, i16 118, i16 435, i16 118, i16 436, i16 908, i16 118, i16 118, i16 118, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 396, i16 529, i16 416, i16 437, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 310, i16 720, i16 908, i16 721, i16 311, i16 312, i16 313, i16 314, i16 326, i16 438, i16 444, i16 445, i16 326, i16 326, i16 326, i16 326, i16 437, i16 159, i16 159, i16 159, i16 159, i16 159, i16 160, i16 159, i16 159, i16 159, i16 161, i16 159, i16 162, i16 159, i16 159, i16 159, i16 438, i16 444, i16 445, i16 451, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 452, i16 941, i16 93, i16 192, i16 93, i16 418, i16 163, i16 193, i16 196, i16 194, i16 464, i16 941, i16 197, i16 198, i16 199, i16 200, i16 451, i16 159, i16 159, i16 159, i16 159, i16 159, i16 398, i16 452, i16 195, i16 448, i16 399, i16 163, i16 400, i16 158, i16 449, i16 203, i16 450, i16 464, i16 201, i16 204, i16 205, i16 206, i16 207, i16 202, i16 396, i16 396, i16 396, i16 397, i16 396, i16 402, i16 195, i16 526, i16 318, i16 403, i16 158, i16 404, i16 319, i16 789, i16 320, i16 201, i16 94, i16 158, i16 374, i16 93, i16 202, i16 936, i16 466, i16 208, i16 217, i16 209, i16 95, i16 222, i16 223, i16 224, i16 217, i16 225, i16 226, i16 227, i16 158, i16 872, i16 423, i16 94, i16 158, i16 228, i16 424, i16 229, i16 425, i16 872, i16 208, i16 466, i16 209, i16 118, i16 118, i16 118, i16 215, i16 118, i16 529, i16 867, i16 339, i16 158, i16 340, i16 341, i16 326, i16 326, i16 326, i16 326, i16 228, i16 729, i16 229, i16 730, i16 216, i16 217, i16 217, i16 217, i16 218, i16 219, i16 220, i16 221, i16 217, i16 217, i16 513, i16 750, i16 514, i16 751, i16 217, i16 217, i16 217, i16 217, i16 217, i16 217, i16 396, i16 396, i16 396, i16 397, i16 396, i16 294, i16 103, i16 104, i16 101, i16 159, i16 295, i16 159, i16 296, i16 513, i16 102, i16 514, i16 93, i16 217, i16 217, i16 217, i16 217, i16 217, i16 138, i16 138, i16 138, i16 240, i16 138, i16 103, i16 521, i16 101, i16 339, i16 158, i16 340, i16 341, i16 326, i16 326, i16 326, i16 326, i16 908, i16 908, i16 297, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 521, i16 158, i16 107, i16 116, i16 241, i16 241, i16 241, i16 241, i16 241, i16 241, i16 297, i16 367, i16 367, i16 367, i16 368, i16 367, i16 408, i16 108, i16 906, i16 547, i16 409, i16 410, i16 411, i16 412, i16 107, i16 117, i16 116, i16 241, i16 241, i16 241, i16 241, i16 241, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 547, i16 519, i16 326, i16 96, i16 243, i16 243, i16 243, i16 243, i16 243, i16 243, i16 416, i16 416, i16 416, i16 417, i16 416, i16 418, i16 418, i16 418, i16 419, i16 418, i16 548, i16 97, i16 519, i16 520, i16 93, i16 326, i16 96, i16 243, i16 243, i16 243, i16 243, i16 243, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 439, i16 548, i16 520, i16 564, i16 247, i16 247, i16 247, i16 247, i16 247, i16 247, i16 416, i16 416, i16 416, i16 417, i16 416, i16 439, i16 439, i16 439, i16 440, i16 439, i16 439, i16 439, i16 439, i16 440, i16 439, i16 872, i16 564, i16 247, i16 247, i16 247, i16 247, i16 247, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 539, i16 872, i16 870, i16 566, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 867, i16 849, i16 93, i16 349, i16 349, i16 349, i16 350, i16 349, i16 441, i16 453, i16 849, i16 539, i16 442, i16 454, i16 443, i16 455, i16 566, i16 248, i16 248, i16 248, i16 248, i16 248, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 763, i16 164, i16 764, i16 765, i16 249, i16 249, i16 249, i16 249, i16 249, i16 249, i16 446, i16 446, i16 446, i16 447, i16 446, i16 849, i16 98, i16 165, i16 26, i16 26, i16 26, i16 26, i16 26, i16 164, i16 99, i16 583, i16 100, i16 249, i16 249, i16 249, i16 249, i16 249, i16 27, i16 28, i16 259, i16 485, i16 29, i16 98, i16 260, i16 486, i16 261, i16 487, i16 526, i16 655, i16 276, i16 99, i16 459, i16 355, i16 583, i16 30, i16 460, i16 461, i16 462, i16 463, i16 262, i16 446, i16 446, i16 446, i16 447, i16 446, i16 158, i16 772, i16 326, i16 105, i16 655, i16 331, i16 332, i16 333, i16 326, i16 334, i16 335, i16 336, i16 106, i16 353, i16 489, i16 848, i16 262, i16 337, i16 490, i16 338, i16 491, i16 158, i16 772, i16 846, i16 105, i16 406, i16 406, i16 406, i16 407, i16 406, i16 526, i16 527, i16 105, i16 846, i16 31, i16 158, i16 158, i16 158, i16 252, i16 158, i16 337, i16 106, i16 338, i16 467, i16 467, i16 467, i16 468, i16 467, i16 469, i16 469, i16 469, i16 470, i16 469, i16 105, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 164, i16 587, i16 103, i16 104, i16 253, i16 253, i16 253, i16 253, i16 253, i16 253, i16 431, i16 431, i16 431, i16 432, i16 431, i16 527, i16 165, i16 467, i16 467, i16 467, i16 468, i16 467, i16 164, i16 103, i16 587, i16 845, i16 845, i16 253, i16 253, i16 253, i16 253, i16 253, i16 325, i16 326, i16 326, i16 326, i16 327, i16 328, i16 329, i16 330, i16 326, i16 326, i16 446, i16 433, i16 840, i16 588, i16 326, i16 326, i16 326, i16 326, i16 326, i16 326, i16 479, i16 479, i16 479, i16 480, i16 479, i16 346, i16 346, i16 346, i16 347, i16 346, i16 351, i16 176, i16 840, i16 177, i16 433, i16 346, i16 588, i16 326, i16 326, i16 326, i16 326, i16 326, i16 344, i16 344, i16 344, i16 345, i16 344, i16 351, i16 351, i16 351, i16 352, i16 351, i16 838, i16 177, i16 176, i16 353, i16 353, i16 353, i16 354, i16 353, i16 592, i16 326, i16 348, i16 526, i16 93, i16 326, i16 326, i16 326, i16 326, i16 807, i16 92, i16 96, i16 593, i16 355, i16 355, i16 355, i16 356, i16 355, i16 101, i16 838, i16 97, i16 578, i16 364, i16 592, i16 102, i16 348, i16 579, i16 94, i16 580, i16 97, i16 807, i16 92, i16 92, i16 597, i16 96, i16 593, i16 101, i16 95, i16 836, i16 101, i16 92, i16 526, i16 102, i16 357, i16 357, i16 357, i16 358, i16 357, i16 94, i16 103, i16 104, i16 619, i16 527, i16 92, i16 116, i16 620, i16 597, i16 101, i16 92, i16 105, i16 836, i16 92, i16 359, i16 359, i16 359, i16 360, i16 359, i16 825, i16 106, i16 357, i16 103, i16 457, i16 457, i16 457, i16 458, i16 457, i16 117, i16 116, i16 544, i16 92, i16 105, i16 549, i16 545, i16 107, i16 546, i16 550, i16 529, i16 551, i16 92, i16 357, i16 357, i16 357, i16 358, i16 357, i16 897, i16 471, i16 467, i16 825, i16 108, i16 472, i16 473, i16 474, i16 475, i16 344, i16 469, i16 107, i16 109, i16 109, i16 107, i16 92, i16 824, i16 110, i16 110, i16 479, i16 497, i16 897, i16 111, i16 111, i16 497, i16 497, i16 497, i16 497, i16 326, i16 108, i16 824, i16 190, i16 191, i16 109, i16 109, i16 107, i16 107, i16 93, i16 110, i16 110, i16 361, i16 361, i16 361, i16 362, i16 361, i16 481, i16 481, i16 481, i16 482, i16 481, i16 108, i16 326, i16 190, i16 94, i16 598, i16 821, i16 93, i16 107, i16 359, i16 359, i16 359, i16 360, i16 359, i16 95, i16 93, i16 821, i16 374, i16 374, i16 374, i16 374, i16 374, i16 610, i16 376, i16 93, i16 94, i16 363, i16 377, i16 598, i16 378, i16 483, i16 483, i16 483, i16 484, i16 483, i16 379, i16 92, i16 396, i16 396, i16 396, i16 397, i16 396, i16 113, i16 816, i16 114, i16 610, i16 115, i16 555, i16 619, i16 363, i16 98, i16 556, i16 620, i16 557, i16 109, i16 190, i16 191, i16 92, i16 99, i16 110, i16 100, i16 481, i16 816, i16 113, i16 111, i16 114, i16 364, i16 364, i16 364, i16 365, i16 364, i16 98, i16 380, i16 612, i16 744, i16 109, i16 190, i16 497, i16 745, i16 99, i16 110, i16 497, i16 497, i16 497, i16 497, i16 326, i16 814, i16 814, i16 584, i16 326, i16 326, i16 326, i16 326, i16 585, i16 744, i16 586, i16 612, i16 497, i16 745, i16 366, i16 502, i16 503, i16 504, i16 497, i16 505, i16 506, i16 507, i16 396, i16 396, i16 396, i16 397, i16 396, i16 508, i16 654, i16 509, i16 93, i16 493, i16 493, i16 493, i16 494, i16 493, i16 117, i16 366, i16 138, i16 138, i16 138, i16 240, i16 138, i16 553, i16 553, i16 553, i16 554, i16 553, i16 813, i16 497, i16 508, i16 654, i16 509, i16 497, i16 497, i16 497, i16 497, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 495, i16 813, i16 164, i16 210, i16 373, i16 373, i16 373, i16 373, i16 373, i16 373, i16 510, i16 789, i16 511, i16 512, i16 497, i16 497, i16 497, i16 497, i16 165, i16 211, i16 789, i16 841, i16 211, i16 495, i16 164, i16 842, i16 210, i16 373, i16 373, i16 373, i16 373, i16 373, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 632, i16 632, i16 632, i16 632, i16 381, i16 381, i16 381, i16 381, i16 381, i16 381, i16 510, i16 782, i16 511, i16 512, i16 497, i16 497, i16 497, i16 497, i16 559, i16 811, i16 902, i16 812, i16 560, i16 561, i16 562, i16 563, i16 808, i16 381, i16 381, i16 381, i16 381, i16 381, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 632, i16 632, i16 632, i16 632, i16 387, i16 387, i16 387, i16 387, i16 387, i16 387, i16 367, i16 367, i16 367, i16 368, i16 367, i16 416, i16 416, i16 416, i16 417, i16 416, i16 418, i16 418, i16 418, i16 419, i16 418, i16 774, i16 752, i16 387, i16 387, i16 387, i16 387, i16 387, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 752, i16 497, i16 678, i16 685, i16 388, i16 388, i16 388, i16 388, i16 388, i16 388, i16 416, i16 416, i16 416, i16 417, i16 416, i16 567, i16 571, i16 93, i16 749, i16 568, i16 572, i16 569, i16 573, i16 93, i16 497, i16 678, i16 685, i16 388, i16 388, i16 388, i16 388, i16 388, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 483, i16 553, i16 686, i16 698, i16 389, i16 389, i16 389, i16 389, i16 389, i16 389, i16 431, i16 431, i16 431, i16 432, i16 431, i16 439, i16 439, i16 439, i16 440, i16 439, i16 439, i16 439, i16 439, i16 440, i16 439, i16 686, i16 698, i16 389, i16 389, i16 389, i16 389, i16 389, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 526, i16 582, i16 700, i16 718, i16 390, i16 390, i16 390, i16 390, i16 390, i16 390, i16 431, i16 589, i16 93, i16 93, i16 822, i16 590, i16 823, i16 591, i16 446, i16 446, i16 446, i16 447, i16 446, i16 177, i16 582, i16 700, i16 718, i16 390, i16 390, i16 390, i16 390, i16 390, i16 420, i16 159, i16 159, i16 159, i16 421, i16 159, i16 422, i16 159, i16 159, i16 159, i16 176, i16 599, i16 275, i16 529, i16 159, i16 159, i16 159, i16 159, i16 159, i16 159, i16 446, i16 446, i16 446, i16 447, i16 446, i16 632, i16 632, i16 632, i16 632, i16 594, i16 719, i16 276, i16 177, i16 176, i16 595, i16 275, i16 596, i16 159, i16 159, i16 159, i16 159, i16 159, i16 496, i16 497, i16 497, i16 497, i16 498, i16 499, i16 500, i16 501, i16 497, i16 497, i16 457, i16 719, i16 722, i16 723, i16 497, i16 497, i16 497, i16 497, i16 497, i16 497, i16 749, i16 743, i16 406, i16 93, i16 625, i16 346, i16 346, i16 346, i16 347, i16 346, i16 599, i16 599, i16 599, i16 600, i16 599, i16 722, i16 723, i16 497, i16 497, i16 497, i16 497, i16 497, i16 344, i16 344, i16 344, i16 345, i16 344, i16 349, i16 349, i16 349, i16 350, i16 349, i16 359, i16 493, i16 351, i16 351, i16 351, i16 352, i16 351, i16 743, i16 164, i16 497, i16 515, i16 190, i16 191, i16 497, i16 497, i16 497, i16 497, i16 737, i16 92, i16 353, i16 353, i16 353, i16 354, i16 353, i16 165, i16 601, i16 93, i16 737, i16 97, i16 602, i16 164, i16 603, i16 190, i16 515, i16 841, i16 94, i16 210, i16 621, i16 842, i16 92, i16 98, i16 622, i16 731, i16 623, i16 109, i16 95, i16 705, i16 92, i16 99, i16 110, i16 100, i16 101, i16 731, i16 724, i16 111, i16 211, i16 94, i16 102, i16 725, i16 210, i16 726, i16 98, i16 849, i16 727, i16 92, i16 109, i16 93, i16 523, i16 92, i16 99, i16 110, i16 164, i16 101, i16 103, i16 104, i16 355, i16 355, i16 355, i16 356, i16 355, i16 349, i16 694, i16 695, i16 696, i16 697, i16 92, i16 727, i16 165, i16 357, i16 357, i16 357, i16 358, i16 357, i16 164, i16 103, i16 599, i16 599, i16 599, i16 600, i16 599, i16 93, i16 359, i16 359, i16 359, i16 360, i16 359, i16 713, i16 357, i16 357, i16 357, i16 358, i16 357, i16 832, i16 713, i16 833, i16 359, i16 359, i16 359, i16 360, i16 359, i16 92, i16 105, i16 905, i16 627, i16 98, i16 808, i16 728, i16 628, i16 107, i16 629, i16 106, i16 605, i16 99, i16 92, i16 100, i16 606, i16 607, i16 608, i16 609, i16 710, i16 497, i16 92, i16 105, i16 108, i16 361, i16 98, i16 109, i16 107, i16 112, i16 728, i16 107, i16 110, i16 710, i16 99, i16 92, i16 687, i16 111, i16 736, i16 704, i16 688, i16 109, i16 689, i16 108, i16 497, i16 113, i16 110, i16 114, i16 109, i16 115, i16 107, i16 111, i16 112, i16 110, i16 361, i16 361, i16 361, i16 362, i16 361, i16 112, i16 704, i16 736, i16 109, i16 699, i16 525, i16 738, i16 113, i16 110, i16 114, i16 526, i16 457, i16 457, i16 457, i16 458, i16 457, i16 113, i16 843, i16 114, i16 844, i16 115, i16 701, i16 699, i16 112, i16 715, i16 702, i16 867, i16 703, i16 497, i16 738, i16 516, i16 659, i16 497, i16 497, i16 497, i16 497, i16 789, i16 113, i16 707, i16 114, i16 92, i16 935, i16 708, i16 276, i16 709, i16 518, i16 113, i16 715, i16 114, i16 763, i16 115, i16 764, i16 765, i16 516, i16 575, i16 575, i16 575, i16 576, i16 575, i16 527, i16 693, i16 92, i16 809, i16 693, i16 211, i16 190, i16 191, i16 113, i16 518, i16 114, i16 364, i16 364, i16 364, i16 365, i16 364, i16 467, i16 467, i16 467, i16 468, i16 467, i16 469, i16 469, i16 469, i16 470, i16 469, i16 809, i16 190, i16 872, i16 93, i16 497, i16 577, i16 810, i16 374, i16 497, i16 497, i16 497, i16 497, i16 690, i16 374, i16 374, i16 374, i16 374, i16 374, i16 517, i16 376, i16 901, i16 690, i16 682, i16 377, i16 276, i16 378, i16 746, i16 630, i16 577, i16 810, i16 747, i16 379, i16 748, i16 630, i16 406, i16 406, i16 406, i16 407, i16 406, i16 624, i16 117, i16 517, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 732, i16 733, i16 734, i16 735, i16 522, i16 522, i16 522, i16 522, i16 522, i16 522, i16 467, i16 467, i16 467, i16 468, i16 467, i16 849, i16 380, i16 815, i16 613, i16 624, i16 776, i16 164, i16 614, i16 615, i16 616, i16 617, i16 93, i16 522, i16 522, i16 522, i16 522, i16 522, i16 523, i16 523, i16 523, i16 523, i16 523, i16 165, i16 1152, i16 901, i16 815, i16 682, i16 1152, i16 164, i16 378, i16 523, i16 523, i16 523, i16 523, i16 523, i16 524, i16 1152, i16 93, i16 93, i16 618, i16 1152, i16 618, i16 378, i16 530, i16 739, i16 740, i16 741, i16 742, i16 524, i16 479, i16 479, i16 479, i16 480, i16 479, i16 481, i16 481, i16 481, i16 482, i16 481, i16 483, i16 483, i16 483, i16 484, i16 483, i16 625, i16 625, i16 625, i16 626, i16 625, i16 93, i16 93, i16 645, i16 380, i16 646, i16 647, i16 632, i16 632, i16 632, i16 632, i16 396, i16 396, i16 396, i16 397, i16 396, i16 611, i16 380, i16 531, i16 532, i16 523, i16 523, i16 523, i16 532, i16 533, i16 531, i16 533, i16 533, i16 533, i16 531, i16 531, i16 534, i16 533, i16 533, i16 533, i16 533, i16 533, i16 535, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 533, i16 533, i16 533, i16 533, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 537, i16 536, i16 536, i16 536, i16 536, i16 536, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 73, i16 73, i16 73, i16 141, i16 73, i16 396, i16 396, i16 396, i16 397, i16 396, i16 611, i16 493, i16 493, i16 493, i16 494, i16 493, i16 604, i16 575, i16 604, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 93, i16 93, i16 771, i16 817, i16 538, i16 538, i16 538, i16 538, i16 538, i16 538, i16 637, i16 638, i16 639, i16 632, i16 640, i16 641, i16 642, i16 828, i16 631, i16 581, i16 827, i16 211, i16 643, i16 275, i16 644, i16 771, i16 817, i16 538, i16 538, i16 538, i16 538, i16 538, i16 148, i16 80, i16 80, i16 149, i16 148, i16 211, i16 36, i16 276, i16 828, i16 631, i16 276, i16 827, i16 818, i16 643, i16 275, i16 644, i16 819, i16 581, i16 820, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 829, i16 574, i16 830, i16 574, i16 540, i16 540, i16 540, i16 540, i16 540, i16 540, i16 637, i16 638, i16 639, i16 632, i16 640, i16 641, i16 642, i16 553, i16 553, i16 553, i16 554, i16 553, i16 648, i16 829, i16 649, i16 830, i16 37, i16 540, i16 540, i16 540, i16 540, i16 540, i16 83, i16 83, i16 83, i16 151, i16 83, i16 645, i16 831, i16 646, i16 647, i16 632, i16 632, i16 632, i16 632, i16 648, i16 570, i16 649, i16 38, i16 570, i16 93, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 831, i16 93, i16 565, i16 565, i16 541, i16 541, i16 541, i16 541, i16 541, i16 541, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 39, i16 541, i16 541, i16 541, i16 541, i16 541, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 558, i16 558, i16 552, i16 38, i16 153, i16 85, i16 85, i16 154, i16 153, i16 416, i16 416, i16 416, i16 417, i16 416, i16 36, i16 552, i16 908, i16 632, i16 632, i16 632, i16 632, i16 523, i16 93, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 164, i16 834, i16 835, i16 526, i16 542, i16 542, i16 542, i16 542, i16 542, i16 542, i16 1099, i16 367, i16 367, i16 367, i16 368, i16 367, i16 165, i16 418, i16 418, i16 418, i16 419, i16 418, i16 164, i16 385, i16 834, i16 835, i16 41, i16 542, i16 542, i16 542, i16 542, i16 542, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 383, i16 93, i16 632, i16 837, i16 543, i16 543, i16 543, i16 543, i16 543, i16 543, i16 527, i16 492, i16 349, i16 349, i16 349, i16 350, i16 349, i16 492, i16 488, i16 344, i16 344, i16 344, i16 345, i16 344, i16 93, i16 632, i16 837, i16 543, i16 543, i16 543, i16 543, i16 543, i16 632, i16 632, i16 632, i16 632, i16 633, i16 634, i16 635, i16 636, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 632, i16 346, i16 346, i16 346, i16 347, i16 346, i16 98, i16 488, i16 351, i16 351, i16 351, i16 352, i16 351, i16 94, i16 99, i16 476, i16 100, i16 476, i16 632, i16 632, i16 632, i16 632, i16 632, i16 95, i16 465, i16 465, i16 456, i16 98, i16 353, i16 353, i16 353, i16 354, i16 353, i16 456, i16 94, i16 99, i16 528, i16 839, i16 650, i16 93, i16 355, i16 355, i16 355, i16 356, i16 355, i16 526, i16 92, i16 357, i16 357, i16 357, i16 358, i16 357, i16 430, i16 92, i16 662, i16 430, i16 97, i16 101, i16 808, i16 526, i16 839, i16 650, i16 426, i16 102, i16 426, i16 903, i16 93, i16 92, i16 416, i16 416, i16 416, i16 417, i16 416, i16 92, i16 92, i16 665, i16 941, i16 414, i16 101, i16 414, i16 405, i16 935, i16 103, i16 104, i16 526, i16 92, i16 105, i16 107, i16 903, i16 405, i16 529, i16 93, i16 92, i16 401, i16 92, i16 106, i16 359, i16 359, i16 359, i16 360, i16 359, i16 401, i16 108, i16 103, i16 251, i16 941, i16 92, i16 105, i16 527, i16 107, i16 374, i16 385, i16 383, i16 92, i16 705, i16 705, i16 705, i16 706, i16 705, i16 364, i16 364, i16 364, i16 365, i16 364, i16 357, i16 357, i16 357, i16 358, i16 357, i16 529, i16 324, i16 808, i16 324, i16 359, i16 359, i16 359, i16 360, i16 359, i16 904, i16 93, i16 93, i16 109, i16 632, i16 632, i16 632, i16 632, i16 110, i16 93, i16 315, i16 315, i16 93, i16 111, i16 652, i16 632, i16 632, i16 632, i16 632, i16 632, i16 968, i16 93, i16 968, i16 904, i16 109, i16 776, i16 107, i16 523, i16 653, i16 110, i16 361, i16 361, i16 361, i16 362, i16 361, i16 308, i16 117, i16 652, i16 986, i16 941, i16 109, i16 108, i16 632, i16 659, i16 935, i16 110, i16 308, i16 211, i16 107, i16 301, i16 111, i16 653, i16 523, i16 523, i16 523, i16 523, i16 523, i16 968, i16 1096, i16 301, i16 93, i16 109, i16 776, i16 1097, i16 378, i16 651, i16 110, i16 1073, i16 1096, i16 93, i16 657, i16 526, i16 374, i16 1119, i16 1104, i16 92, i16 406, i16 406, i16 406, i16 407, i16 406, i16 113, i16 1117, i16 114, i16 93, i16 115, i16 283, i16 1097, i16 651, i16 439, i16 439, i16 439, i16 440, i16 439, i16 283, i16 93, i16 92, i16 575, i16 575, i16 575, i16 576, i16 575, i16 113, i16 93, i16 114, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 164, i16 529, i16 273, i16 273, i16 656, i16 656, i16 656, i16 656, i16 656, i16 656, i16 439, i16 439, i16 439, i16 440, i16 439, i16 1073, i16 165, i16 266, i16 583, i16 1117, i16 935, i16 1130, i16 164, i16 266, i16 1119, i16 93, i16 1119, i16 656, i16 656, i16 656, i16 656, i16 656, i16 523, i16 523, i16 523, i16 523, i16 523, i16 276, i16 1152, i16 93, i16 93, i16 583, i16 1152, i16 1096, i16 378, i16 658, i16 251, i16 146, i16 1013, i16 144, i16 524, i16 659, i16 659, i16 659, i16 659, i16 659, i16 446, i16 446, i16 446, i16 447, i16 446, i16 235, i16 93, i16 660, i16 523, i16 523, i16 523, i16 523, i16 523, i16 661, i16 1152, i16 93, i16 93, i16 93, i16 1152, i16 93, i16 378, i16 446, i16 446, i16 446, i16 447, i16 446, i16 524, i16 93, i16 93, i16 93, i16 93, i16 380, i16 525, i16 525, i16 663, i16 599, i16 599, i16 599, i16 600, i16 599, i16 431, i16 431, i16 431, i16 432, i16 431, i16 599, i16 599, i16 599, i16 600, i16 599, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 93, i16 93, i16 93, i16 380, i16 664, i16 664, i16 664, i16 664, i16 664, i16 664, i16 93, i16 90, i16 39, i16 714, i16 467, i16 467, i16 467, i16 468, i16 467, i16 469, i16 469, i16 469, i16 470, i16 469, i16 146, i16 144, i16 133, i16 664, i16 664, i16 664, i16 664, i16 664, i16 528, i16 528, i16 666, i16 177, i16 714, i16 467, i16 467, i16 467, i16 468, i16 467, i16 479, i16 479, i16 479, i16 480, i16 479, i16 93, i16 93, i16 91, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 90, i16 88, i16 39, i16 78, i16 667, i16 667, i16 667, i16 667, i16 667, i16 667, i16 481, i16 481, i16 481, i16 482, i16 481, i16 483, i16 483, i16 483, i16 484, i16 483, i16 625, i16 625, i16 625, i16 626, i16 625, i16 77, i16 76, i16 667, i16 667, i16 667, i16 667, i16 667, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 75, i16 668, i16 64, i16 46, i16 1148, i16 668, i16 668, i16 671, i16 672, i16 1119, i16 39, i16 1152, i16 1152, i16 673, i16 523, i16 523, i16 523, i16 523, i16 523, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 378, i16 523, i16 523, i16 523, i16 523, i16 523, i16 524, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 378, i16 457, i16 457, i16 457, i16 458, i16 457, i16 524, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 1152, i16 523, i16 523, i16 523, i16 523, i16 523, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 378, i16 1152, i16 1152, i16 1152, i16 1152, i16 380, i16 524, i16 523, i16 523, i16 523, i16 523, i16 523, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 380, i16 378, i16 658, i16 775, i16 775, i16 1152, i16 1152, i16 524, i16 1152, i16 1152, i16 1152, i16 993, i16 190, i16 191, i16 997, i16 755, i16 756, i16 757, i16 1152, i16 758, i16 759, i16 760, i16 775, i16 775, i16 775, i16 380, i16 1152, i16 761, i16 1152, i16 762, i16 1152, i16 993, i16 1152, i16 190, i16 997, i16 1152, i16 1152, i16 1152, i16 493, i16 493, i16 493, i16 494, i16 493, i16 1152, i16 380, i16 532, i16 532, i16 532, i16 675, i16 532, i16 761, i16 1152, i16 762, i16 1152, i16 1152, i16 1152, i16 998, i16 378, i16 367, i16 367, i16 367, i16 368, i16 367, i16 524, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 753, i16 1152, i16 998, i16 1152, i16 676, i16 676, i16 676, i16 676, i16 676, i16 676, i16 396, i16 396, i16 396, i16 397, i16 396, i16 1152, i16 1152, i16 1152, i16 1152, i16 211, i16 1152, i16 1152, i16 1152, i16 753, i16 1152, i16 1152, i16 380, i16 676, i16 676, i16 676, i16 676, i16 676, i16 531, i16 532, i16 523, i16 523, i16 523, i16 532, i16 533, i16 531, i16 533, i16 533, i16 533, i16 531, i16 531, i16 534, i16 533, i16 533, i16 533, i16 533, i16 533, i16 535, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 533, i16 533, i16 533, i16 533, i16 536, i16 536, i16 536, i16 536, i16 536, i16 536, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 537, i16 536, i16 536, i16 536, i16 536, i16 536, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 533, i16 73, i16 73, i16 73, i16 141, i16 73, i16 396, i16 396, i16 396, i16 397, i16 396, i16 1152, i16 148, i16 80, i16 80, i16 149, i16 148, i16 1152, i16 36, i16 1152, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 1152, i16 1152, i16 1152, i16 1152, i16 677, i16 677, i16 677, i16 677, i16 677, i16 677, i16 755, i16 756, i16 757, i16 1152, i16 758, i16 759, i16 760, i16 344, i16 344, i16 344, i16 345, i16 344, i16 766, i16 1152, i16 767, i16 1152, i16 1152, i16 677, i16 677, i16 677, i16 677, i16 677, i16 148, i16 80, i16 80, i16 149, i16 148, i16 37, i16 36, i16 553, i16 553, i16 553, i16 554, i16 553, i16 1152, i16 766, i16 1152, i16 767, i16 1152, i16 1152, i16 1152, i16 679, i16 679, i16 679, i16 679, i16 679, i16 679, i16 679, i16 679, i16 679, i16 679, i16 1152, i16 94, i16 1152, i16 1152, i16 679, i16 679, i16 679, i16 679, i16 679, i16 679, i16 1152, i16 95, i16 1152, i16 349, i16 349, i16 349, i16 350, i16 349, i16 1152, i16 1152, i16 1152, i16 1152, i16 94, i16 1152, i16 1152, i16 1152, i16 37, i16 679, i16 679, i16 679, i16 679, i16 679, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 1152, i16 1152, i16 1152, i16 1152, i16 680, i16 680, i16 680, i16 680, i16 680, i16 680, i16 416, i16 416, i16 416, i16 417, i16 416, i16 1152, i16 98, i16 355, i16 355, i16 355, i16 356, i16 355, i16 1152, i16 1152, i16 99, i16 1152, i16 100, i16 680, i16 680, i16 680, i16 680, i16 680, i16 153, i16 85, i16 85, i16 154, i16 153, i16 98, i16 1152, i16 1152, i16 1152, i16 1152, i16 36, i16 1152, i16 1152, i16 99, i16 418, i16 418, i16 418, i16 419, i16 418, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 1152, i16 1152, i16 105, i16 1152, i16 681, i16 681, i16 681, i16 681, i16 681, i16 681, i16 1152, i16 106, i16 353, i16 353, i16 353, i16 354, i16 353, i16 416, i16 416, i16 416, i16 417, i16 416, i16 1152, i16 105, i16 1152, i16 1152, i16 41, i16 681, i16 681, i16 681, i16 681, i16 681, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 1152, i16 1152, i16 1152, i16 1152, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 351, i16 351, i16 351, i16 352, i16 351, i16 1152, i16 1152, i16 1152, i16 1152, i16 346, i16 346, i16 346, i16 347, i16 346, i16 103, i16 104, i16 1152, i16 682, i16 682, i16 682, i16 682, i16 682, i16 754, i16 754, i16 754, i16 754, i16 754, i16 754, i16 754, i16 754, i16 754, i16 754, i16 1152, i16 1152, i16 1152, i16 103, i16 754, i16 754, i16 754, i16 754, i16 754, i16 754, i16 1152, i16 1152, i16 1152, i16 1152, i16 768, i16 1152, i16 1152, i16 101, i16 357, i16 357, i16 357, i16 358, i16 357, i16 102, i16 1152, i16 1152, i16 1152, i16 754, i16 754, i16 754, i16 754, i16 754, i16 97, i16 1152, i16 1152, i16 1152, i16 1152, i16 768, i16 101, i16 359, i16 359, i16 359, i16 360, i16 359, i16 361, i16 361, i16 361, i16 362, i16 361, i16 1152, i16 1152, i16 1152, i16 364, i16 364, i16 364, i16 365, i16 364, i16 1152, i16 107, i16 1152, i16 357, i16 357, i16 357, i16 358, i16 357, i16 406, i16 406, i16 406, i16 407, i16 406, i16 1152, i16 1152, i16 1152, i16 108, i16 359, i16 359, i16 359, i16 360, i16 359, i16 769, i16 107, i16 1152, i16 1152, i16 1152, i16 109, i16 770, i16 1152, i16 1152, i16 1152, i16 110, i16 907, i16 907, i16 1152, i16 1152, i16 111, i16 113, i16 1152, i16 114, i16 1045, i16 115, i16 107, i16 1061, i16 769, i16 1152, i16 164, i16 109, i16 1152, i16 117, i16 770, i16 1152, i16 110, i16 1152, i16 1152, i16 1152, i16 1152, i16 108, i16 113, i16 1152, i16 114, i16 109, i16 165, i16 1152, i16 107, i16 1152, i16 110, i16 1152, i16 164, i16 1152, i16 1152, i16 111, i16 705, i16 705, i16 705, i16 706, i16 705, i16 439, i16 439, i16 439, i16 440, i16 439, i16 109, i16 1152, i16 1152, i16 1062, i16 1152, i16 110, i16 773, i16 773, i16 773, i16 773, i16 773, i16 773, i16 773, i16 773, i16 773, i16 773, i16 1152, i16 1152, i16 1152, i16 1152, i16 773, i16 773, i16 773, i16 773, i16 773, i16 773, i16 1152, i16 1152, i16 1152, i16 1152, i16 575, i16 575, i16 575, i16 576, i16 575, i16 439, i16 439, i16 439, i16 440, i16 439, i16 1152, i16 1152, i16 1152, i16 773, i16 773, i16 773, i16 773, i16 773, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 715, i16 780, i16 659, i16 659, i16 659, i16 659, i16 659, i16 1152, i16 1152, i16 669, i16 669, i16 669, i16 669, i16 669, i16 660, i16 1152, i16 775, i16 775, i16 775, i16 276, i16 661, i16 671, i16 789, i16 715, i16 1152, i16 993, i16 1152, i16 790, i16 997, i16 1152, i16 1152, i16 1152, i16 523, i16 532, i16 523, i16 523, i16 523, i16 1152, i16 781, i16 783, i16 662, i16 662, i16 784, i16 783, i16 378, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 524, i16 431, i16 431, i16 431, i16 432, i16 431, i16 1152, i16 1152, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 1152, i16 1152, i16 998, i16 1152, i16 785, i16 785, i16 785, i16 785, i16 785, i16 785, i16 446, i16 446, i16 446, i16 447, i16 446, i16 1152, i16 826, i16 1152, i16 1152, i16 380, i16 446, i16 446, i16 446, i16 447, i16 446, i16 1152, i16 527, i16 785, i16 785, i16 785, i16 785, i16 785, i16 786, i16 665, i16 665, i16 787, i16 786, i16 1152, i16 177, i16 826, i16 1152, i16 1152, i16 526, i16 599, i16 599, i16 599, i16 600, i16 599, i16 1152, i16 1152, i16 1152, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 1152, i16 1152, i16 1152, i16 1152, i16 788, i16 788, i16 788, i16 788, i16 788, i16 788, i16 599, i16 599, i16 599, i16 600, i16 599, i16 467, i16 467, i16 467, i16 468, i16 467, i16 457, i16 457, i16 457, i16 458, i16 457, i16 1152, i16 529, i16 788, i16 788, i16 788, i16 788, i16 788, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 469, i16 469, i16 469, i16 470, i16 469, i16 467, i16 467, i16 467, i16 468, i16 467, i16 479, i16 479, i16 479, i16 480, i16 479, i16 481, i16 481, i16 481, i16 482, i16 481, i16 1152, i16 1152, i16 190, i16 191, i16 483, i16 483, i16 483, i16 484, i16 483, i16 625, i16 625, i16 625, i16 626, i16 625, i16 1152, i16 1152, i16 674, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 190, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 795, i16 118, i16 118, i16 118, i16 215, i16 118, i16 1152, i16 1152, i16 493, i16 493, i16 493, i16 494, i16 493, i16 344, i16 344, i16 344, i16 345, i16 344, i16 346, i16 346, i16 346, i16 347, i16 346, i16 1152, i16 1152, i16 355, i16 355, i16 355, i16 356, i16 355, i16 1152, i16 364, i16 364, i16 364, i16 365, i16 364, i16 1152, i16 796, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 847, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 797, i16 1152, i16 1152, i16 96, i16 93, i16 673, i16 94, i16 1152, i16 1152, i16 1152, i16 1152, i16 211, i16 116, i16 1152, i16 1152, i16 847, i16 95, i16 1152, i16 1152, i16 105, i16 1152, i16 97, i16 1152, i16 1152, i16 1152, i16 1152, i16 96, i16 94, i16 106, i16 138, i16 138, i16 138, i16 240, i16 138, i16 117, i16 116, i16 1152, i16 1152, i16 1152, i16 1152, i16 105, i16 1152, i16 674, i16 798, i16 799, i16 669, i16 669, i16 669, i16 799, i16 800, i16 798, i16 800, i16 800, i16 800, i16 798, i16 798, i16 801, i16 802, i16 800, i16 800, i16 800, i16 800, i16 803, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 800, i16 800, i16 800, i16 800, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 805, i16 804, i16 804, i16 804, i16 804, i16 804, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 532, i16 532, i16 532, i16 675, i16 532, i16 553, i16 553, i16 553, i16 554, i16 553, i16 1152, i16 1152, i16 378, i16 357, i16 357, i16 357, i16 358, i16 357, i16 524, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 1152, i16 1152, i16 808, i16 1152, i16 806, i16 806, i16 806, i16 806, i16 806, i16 806, i16 775, i16 775, i16 1152, i16 1152, i16 993, i16 705, i16 705, i16 705, i16 706, i16 705, i16 1152, i16 994, i16 1152, i16 1152, i16 107, i16 1152, i16 380, i16 806, i16 806, i16 806, i16 806, i16 806, i16 73, i16 73, i16 73, i16 141, i16 73, i16 1152, i16 682, i16 108, i16 682, i16 705, i16 705, i16 705, i16 706, i16 705, i16 107, i16 1152, i16 1152, i16 1152, i16 1152, i16 70, i16 70, i16 70, i16 70, i16 70, i16 70, i16 70, i16 70, i16 70, i16 70, i16 1152, i16 1152, i16 995, i16 808, i16 70, i16 70, i16 70, i16 70, i16 70, i16 70, i16 353, i16 353, i16 353, i16 354, i16 353, i16 1152, i16 599, i16 599, i16 599, i16 600, i16 599, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 70, i16 70, i16 70, i16 70, i16 70, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 808, i16 1152, i16 1152, i16 1152, i16 38, i16 38, i16 38, i16 38, i16 38, i16 38, i16 1152, i16 367, i16 367, i16 367, i16 368, i16 367, i16 599, i16 599, i16 599, i16 600, i16 599, i16 1152, i16 103, i16 104, i16 1152, i16 1152, i16 1152, i16 38, i16 38, i16 38, i16 38, i16 38, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 808, i16 103, i16 1152, i16 1152, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 349, i16 349, i16 349, i16 350, i16 349, i16 1152, i16 1152, i16 1152, i16 1152, i16 351, i16 351, i16 351, i16 352, i16 351, i16 93, i16 1152, i16 1152, i16 40, i16 40, i16 40, i16 40, i16 40, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 1152, i16 1152, i16 1152, i16 1152, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 1152, i16 1152, i16 1152, i16 98, i16 359, i16 359, i16 359, i16 360, i16 359, i16 1152, i16 1152, i16 99, i16 1152, i16 100, i16 1152, i16 1152, i16 101, i16 808, i16 808, i16 808, i16 808, i16 808, i16 102, i16 1152, i16 98, i16 361, i16 361, i16 361, i16 362, i16 361, i16 1152, i16 1152, i16 99, i16 1152, i16 1152, i16 1152, i16 1152, i16 101, i16 1152, i16 357, i16 357, i16 357, i16 358, i16 357, i16 1152, i16 1152, i16 775, i16 775, i16 775, i16 109, i16 1152, i16 993, i16 1152, i16 1152, i16 110, i16 1152, i16 1152, i16 1152, i16 994, i16 111, i16 112, i16 359, i16 359, i16 359, i16 360, i16 359, i16 1152, i16 1152, i16 1152, i16 1152, i16 109, i16 1152, i16 1152, i16 1152, i16 1152, i16 110, i16 113, i16 1152, i16 114, i16 107, i16 115, i16 1152, i16 1152, i16 112, i16 118, i16 118, i16 118, i16 215, i16 118, i16 118, i16 118, i16 118, i16 215, i16 118, i16 108, i16 1152, i16 1152, i16 113, i16 1152, i16 114, i16 995, i16 107, i16 775, i16 775, i16 775, i16 1152, i16 109, i16 993, i16 1152, i16 1152, i16 1152, i16 110, i16 1152, i16 1152, i16 994, i16 1152, i16 111, i16 118, i16 118, i16 118, i16 215, i16 118, i16 1152, i16 164, i16 1152, i16 1152, i16 1152, i16 109, i16 1152, i16 1152, i16 1152, i16 1152, i16 110, i16 118, i16 118, i16 118, i16 215, i16 118, i16 1152, i16 165, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 164, i16 776, i16 776, i16 776, i16 776, i16 776, i16 907, i16 907, i16 210, i16 1152, i16 1045, i16 995, i16 1152, i16 778, i16 849, i16 1152, i16 1152, i16 1046, i16 1152, i16 850, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 1152, i16 211, i16 1152, i16 1152, i16 1152, i16 210, i16 874, i16 872, i16 1152, i16 1152, i16 1152, i16 1152, i16 875, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1047, i16 1152, i16 1152, i16 1152, i16 780, i16 374, i16 374, i16 374, i16 374, i16 374, i16 1152, i16 376, i16 1152, i16 1152, i16 1152, i16 377, i16 1152, i16 378, i16 658, i16 1152, i16 1152, i16 1152, i16 1152, i16 379, i16 158, i16 158, i16 158, i16 252, i16 158, i16 396, i16 396, i16 396, i16 397, i16 396, i16 396, i16 396, i16 396, i16 397, i16 396, i16 1152, i16 1152, i16 781, i16 851, i16 852, i16 852, i16 852, i16 852, i16 852, i16 1152, i16 851, i16 1152, i16 1152, i16 1152, i16 851, i16 851, i16 854, i16 779, i16 1152, i16 1152, i16 1152, i16 380, i16 855, i16 1152, i16 1152, i16 1152, i16 1152, i16 406, i16 406, i16 406, i16 407, i16 406, i16 416, i16 416, i16 416, i16 417, i16 416, i16 1152, i16 1152, i16 1152, i16 93, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 418, i16 418, i16 418, i16 419, i16 418, i16 1152, i16 1152, i16 1152, i16 856, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 164, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 857, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 1152, i16 1152, i16 165, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 164, i16 625, i16 625, i16 625, i16 626, i16 625, i16 1152, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 910, i16 908, i16 1152, i16 1152, i16 1152, i16 1152, i16 911, i16 1152, i16 808, i16 781, i16 858, i16 859, i16 776, i16 776, i16 776, i16 859, i16 860, i16 858, i16 860, i16 860, i16 860, i16 858, i16 858, i16 861, i16 862, i16 860, i16 860, i16 860, i16 860, i16 863, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 860, i16 860, i16 860, i16 860, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 865, i16 864, i16 864, i16 864, i16 864, i16 864, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 783, i16 662, i16 662, i16 784, i16 783, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 416, i16 416, i16 416, i16 417, i16 416, i16 1152, i16 1152, i16 1152, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 1152, i16 1152, i16 1152, i16 1152, i16 868, i16 868, i16 868, i16 868, i16 868, i16 868, i16 907, i16 907, i16 907, i16 1152, i16 1152, i16 1045, i16 431, i16 431, i16 431, i16 432, i16 431, i16 1152, i16 1046, i16 1152, i16 1152, i16 1152, i16 527, i16 868, i16 868, i16 868, i16 868, i16 868, i16 786, i16 665, i16 665, i16 787, i16 786, i16 93, i16 1152, i16 1152, i16 1152, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 176, i16 1152, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 1152, i16 1152, i16 1152, i16 1047, i16 869, i16 869, i16 869, i16 869, i16 869, i16 869, i16 177, i16 176, i16 575, i16 575, i16 575, i16 576, i16 575, i16 158, i16 158, i16 158, i16 252, i16 158, i16 1152, i16 1152, i16 1152, i16 1152, i16 529, i16 869, i16 869, i16 869, i16 869, i16 869, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 808, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 827, i16 1152, i16 1152, i16 878, i16 1152, i16 275, i16 1152, i16 1152, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1119, i16 1119, i16 1119, i16 1119, i16 1119, i16 1152, i16 276, i16 874, i16 872, i16 1152, i16 827, i16 276, i16 1131, i16 875, i16 1152, i16 275, i16 1152, i16 1152, i16 1132, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 880, i16 881, i16 873, i16 873, i16 873, i16 881, i16 882, i16 880, i16 882, i16 882, i16 882, i16 880, i16 880, i16 883, i16 884, i16 882, i16 882, i16 882, i16 882, i16 885, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 882, i16 882, i16 882, i16 882, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 887, i16 886, i16 886, i16 886, i16 886, i16 886, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 888, i16 889, i16 889, i16 889, i16 889, i16 889, i16 1152, i16 888, i16 1152, i16 1152, i16 1152, i16 888, i16 888, i16 891, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 892, i16 158, i16 158, i16 158, i16 252, i16 158, i16 439, i16 439, i16 439, i16 440, i16 439, i16 439, i16 439, i16 439, i16 440, i16 439, i16 446, i16 446, i16 446, i16 447, i16 446, i16 446, i16 446, i16 446, i16 447, i16 446, i16 457, i16 457, i16 457, i16 458, i16 457, i16 467, i16 467, i16 467, i16 468, i16 467, i16 1152, i16 893, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 93, i16 673, i16 851, i16 851, i16 851, i16 93, i16 1152, i16 1017, i16 1152, i16 1152, i16 93, i16 1152, i16 1152, i16 1152, i16 994, i16 93, i16 1152, i16 1152, i16 1152, i16 1018, i16 93, i16 1152, i16 1152, i16 1152, i16 190, i16 191, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 469, i16 469, i16 469, i16 470, i16 469, i16 1152, i16 1152, i16 674, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 190, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1019, i16 1152, i16 673, i16 467, i16 467, i16 467, i16 468, i16 467, i16 479, i16 479, i16 479, i16 480, i16 479, i16 481, i16 481, i16 481, i16 482, i16 481, i16 483, i16 483, i16 483, i16 484, i16 483, i16 1152, i16 493, i16 493, i16 493, i16 494, i16 493, i16 1152, i16 93, i16 158, i16 158, i16 158, i16 252, i16 158, i16 1152, i16 1152, i16 1152, i16 674, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 93, i16 673, i16 210, i16 1152, i16 1152, i16 93, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 775, i16 775, i16 775, i16 1152, i16 93, i16 993, i16 1152, i16 1152, i16 1152, i16 1152, i16 211, i16 1152, i16 994, i16 1152, i16 210, i16 1152, i16 1152, i16 93, i16 1152, i16 553, i16 553, i16 553, i16 554, i16 553, i16 1152, i16 1152, i16 1152, i16 674, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 523, i16 523, i16 523, i16 523, i16 523, i16 1152, i16 995, i16 942, i16 942, i16 942, i16 942, i16 942, i16 378, i16 658, i16 1152, i16 1152, i16 1152, i16 1152, i16 524, i16 943, i16 941, i16 1152, i16 1152, i16 1152, i16 1152, i16 944, i16 93, i16 575, i16 575, i16 575, i16 576, i16 575, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 1152, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 672, i16 1152, i16 1152, i16 1152, i16 380, i16 795, i16 599, i16 599, i16 599, i16 600, i16 599, i16 1152, i16 275, i16 599, i16 599, i16 599, i16 600, i16 599, i16 625, i16 625, i16 625, i16 626, i16 625, i16 705, i16 705, i16 705, i16 706, i16 705, i16 907, i16 907, i16 907, i16 276, i16 1152, i16 1152, i16 1152, i16 275, i16 1152, i16 1045, i16 1152, i16 1152, i16 1061, i16 1152, i16 796, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 797, i16 1152, i16 1152, i16 1152, i16 93, i16 673, i16 909, i16 909, i16 909, i16 909, i16 909, i16 93, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 1152, i16 910, i16 908, i16 1152, i16 93, i16 1152, i16 1152, i16 911, i16 1062, i16 1152, i16 1152, i16 783, i16 662, i16 662, i16 784, i16 783, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 668, i16 799, i16 799, i16 799, i16 894, i16 799, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 1152, i16 1152, i16 1152, i16 1152, i16 895, i16 895, i16 895, i16 895, i16 895, i16 895, i16 527, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 895, i16 895, i16 895, i16 895, i16 895, i16 798, i16 799, i16 669, i16 669, i16 669, i16 799, i16 800, i16 798, i16 800, i16 800, i16 800, i16 798, i16 798, i16 801, i16 802, i16 800, i16 800, i16 800, i16 800, i16 803, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 800, i16 800, i16 800, i16 800, i16 804, i16 804, i16 804, i16 804, i16 804, i16 804, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 805, i16 804, i16 804, i16 804, i16 804, i16 804, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 800, i16 532, i16 532, i16 532, i16 675, i16 532, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 378, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 524, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 1152, i16 1152, i16 1152, i16 1152, i16 896, i16 896, i16 896, i16 896, i16 896, i16 896, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 380, i16 896, i16 896, i16 896, i16 896, i16 896, i16 158, i16 158, i16 158, i16 252, i16 158, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 898, i16 808, i16 808, i16 1152, i16 851, i16 851, i16 851, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 1017, i16 1152, i16 1152, i16 997, i16 1152, i16 1152, i16 1152, i16 1152, i16 1025, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 808, i16 808, i16 808, i16 808, i16 808, i16 682, i16 682, i16 682, i16 682, i16 899, i16 682, i16 900, i16 682, i16 682, i16 682, i16 1152, i16 1152, i16 1152, i16 1152, i16 682, i16 682, i16 682, i16 682, i16 682, i16 682, i16 1152, i16 1152, i16 1152, i16 1026, i16 786, i16 665, i16 665, i16 787, i16 786, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 526, i16 1152, i16 1152, i16 682, i16 682, i16 682, i16 682, i16 682, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 1152, i16 942, i16 942, i16 942, i16 942, i16 942, i16 970, i16 968, i16 1152, i16 1152, i16 1152, i16 529, i16 971, i16 943, i16 941, i16 1152, i16 1152, i16 1152, i16 1152, i16 944, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 916, i16 917, i16 909, i16 909, i16 909, i16 917, i16 918, i16 916, i16 918, i16 918, i16 918, i16 916, i16 916, i16 919, i16 920, i16 918, i16 918, i16 918, i16 918, i16 921, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 918, i16 918, i16 918, i16 918, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 923, i16 922, i16 922, i16 922, i16 922, i16 922, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 924, i16 925, i16 925, i16 925, i16 925, i16 925, i16 1152, i16 924, i16 1152, i16 1152, i16 1152, i16 924, i16 924, i16 927, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 928, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 1152, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 970, i16 968, i16 1152, i16 1152, i16 1152, i16 1152, i16 971, i16 1014, i16 849, i16 1152, i16 1152, i16 1152, i16 1152, i16 1015, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 929, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 532, i16 532, i16 532, i16 675, i16 532, i16 1152, i16 1152, i16 1013, i16 1013, i16 1013, i16 1013, i16 1013, i16 378, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 524, i16 1014, i16 849, i16 1152, i16 1152, i16 1152, i16 1152, i16 1015, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 380, i16 780, i16 1048, i16 1048, i16 1048, i16 1048, i16 1048, i16 1018, i16 523, i16 523, i16 523, i16 1018, i16 1152, i16 526, i16 1049, i16 908, i16 851, i16 851, i16 851, i16 1051, i16 1050, i16 1017, i16 775, i16 775, i16 775, i16 1052, i16 1152, i16 1152, i16 994, i16 1152, i16 1152, i16 993, i16 1152, i16 1018, i16 997, i16 1152, i16 1152, i16 1152, i16 781, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 907, i16 907, i16 907, i16 527, i16 1025, i16 523, i16 523, i16 523, i16 1025, i16 1045, i16 1152, i16 1019, i16 1061, i16 1152, i16 526, i16 1152, i16 1063, i16 998, i16 851, i16 851, i16 851, i16 1152, i16 1064, i16 1152, i16 1152, i16 1152, i16 1152, i16 1017, i16 1152, i16 1152, i16 997, i16 1152, i16 1152, i16 1152, i16 1152, i16 1025, i16 781, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1062, i16 1152, i16 780, i16 1152, i16 1152, i16 529, i16 1152, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 907, i16 907, i16 907, i16 1152, i16 1152, i16 1045, i16 1026, i16 1075, i16 1073, i16 851, i16 851, i16 851, i16 1046, i16 1076, i16 1017, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1046, i16 1152, i16 1152, i16 1152, i16 1152, i16 1018, i16 781, i16 851, i16 852, i16 852, i16 852, i16 852, i16 852, i16 1152, i16 851, i16 1152, i16 1152, i16 1152, i16 851, i16 851, i16 854, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 855, i16 1048, i16 1048, i16 1048, i16 1048, i16 1048, i16 1152, i16 1047, i16 1048, i16 1048, i16 1048, i16 1048, i16 1048, i16 1049, i16 908, i16 1152, i16 1019, i16 1152, i16 1152, i16 1050, i16 1049, i16 908, i16 907, i16 907, i16 907, i16 1152, i16 1050, i16 1045, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1046, i16 1152, i16 1152, i16 856, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 857, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 851, i16 851, i16 851, i16 1152, i16 1152, i16 1017, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1046, i16 1152, i16 775, i16 775, i16 775, i16 1018, i16 1047, i16 993, i16 1152, i16 1152, i16 1152, i16 1020, i16 775, i16 775, i16 994, i16 1152, i16 993, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 994, i16 781, i16 775, i16 859, i16 859, i16 859, i16 930, i16 859, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1019, i16 1152, i16 780, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 1152, i16 995, i16 1152, i16 1152, i16 931, i16 931, i16 931, i16 931, i16 931, i16 931, i16 995, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 931, i16 931, i16 931, i16 931, i16 931, i16 858, i16 859, i16 776, i16 776, i16 776, i16 859, i16 860, i16 858, i16 860, i16 860, i16 860, i16 858, i16 858, i16 861, i16 862, i16 860, i16 860, i16 860, i16 860, i16 863, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 860, i16 860, i16 860, i16 860, i16 864, i16 864, i16 864, i16 864, i16 864, i16 864, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 865, i16 864, i16 864, i16 864, i16 864, i16 864, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 860, i16 783, i16 662, i16 662, i16 784, i16 783, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 1152, i16 1152, i16 1152, i16 1152, i16 933, i16 933, i16 933, i16 933, i16 933, i16 933, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 527, i16 933, i16 933, i16 933, i16 933, i16 933, i16 786, i16 665, i16 665, i16 787, i16 786, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 1152, i16 851, i16 851, i16 851, i16 934, i16 934, i16 934, i16 934, i16 934, i16 934, i16 1017, i16 1152, i16 1152, i16 1061, i16 1152, i16 1152, i16 1152, i16 1152, i16 1025, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 529, i16 934, i16 934, i16 934, i16 934, i16 934, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 907, i16 907, i16 907, i16 1026, i16 851, i16 851, i16 851, i16 1152, i16 1152, i16 1045, i16 1152, i16 1152, i16 1061, i16 1017, i16 1152, i16 1152, i16 1061, i16 775, i16 775, i16 775, i16 1152, i16 1025, i16 1027, i16 775, i16 775, i16 1152, i16 993, i16 1152, i16 1152, i16 997, i16 1152, i16 993, i16 1152, i16 1152, i16 997, i16 1152, i16 879, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 1152, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 877, i16 1152, i16 1152, i16 1062, i16 1152, i16 795, i16 1152, i16 1026, i16 1152, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 775, i16 775, i16 775, i16 1152, i16 1152, i16 993, i16 998, i16 1075, i16 1073, i16 1152, i16 1152, i16 998, i16 994, i16 1076, i16 907, i16 907, i16 907, i16 1152, i16 1152, i16 1045, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1046, i16 1152, i16 796, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 937, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 1097, i16 1097, i16 1097, i16 1097, i16 1097, i16 995, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1120, i16 867, i16 1152, i16 1152, i16 1152, i16 1152, i16 1121, i16 1047, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 880, i16 881, i16 873, i16 873, i16 873, i16 881, i16 882, i16 880, i16 882, i16 882, i16 882, i16 880, i16 880, i16 883, i16 884, i16 882, i16 882, i16 882, i16 882, i16 885, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 882, i16 882, i16 882, i16 882, i16 886, i16 886, i16 886, i16 886, i16 886, i16 886, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 887, i16 886, i16 886, i16 886, i16 886, i16 886, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 882, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 1053, i16 907, i16 907, i16 1152, i16 1152, i16 1045, i16 775, i16 775, i16 775, i16 1152, i16 1152, i16 1152, i16 1046, i16 1152, i16 1152, i16 993, i16 1152, i16 1152, i16 997, i16 907, i16 907, i16 907, i16 1152, i16 1065, i16 907, i16 907, i16 1152, i16 1152, i16 1045, i16 1152, i16 1152, i16 1061, i16 1045, i16 1152, i16 1152, i16 1061, i16 879, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1047, i16 1152, i16 878, i16 1152, i16 1152, i16 1152, i16 998, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1062, i16 1152, i16 1152, i16 1152, i16 1062, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 1152, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 795, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 796, i16 871, i16 873, i16 873, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 937, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 871, i16 881, i16 881, i16 881, i16 938, i16 881, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 1152, i16 1152, i16 1152, i16 1152, i16 939, i16 939, i16 939, i16 939, i16 939, i16 939, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 939, i16 939, i16 939, i16 939, i16 939, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 775, i16 935, i16 935, i16 935, i16 935, i16 935, i16 1152, i16 949, i16 1152, i16 1152, i16 1152, i16 950, i16 775, i16 778, i16 857, i16 1152, i16 1152, i16 1152, i16 1152, i16 951, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 952, i16 953, i16 942, i16 942, i16 942, i16 953, i16 954, i16 952, i16 954, i16 954, i16 954, i16 952, i16 952, i16 955, i16 956, i16 954, i16 954, i16 954, i16 954, i16 957, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 954, i16 954, i16 954, i16 954, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 959, i16 958, i16 958, i16 958, i16 958, i16 958, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 668, i16 669, i16 799, i16 669, i16 669, i16 669, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 668, i16 799, i16 799, i16 799, i16 894, i16 799, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 1152, i16 1152, i16 1152, i16 1152, i16 960, i16 960, i16 960, i16 960, i16 960, i16 960, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 960, i16 960, i16 960, i16 960, i16 960, i16 532, i16 532, i16 532, i16 675, i16 532, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 378, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 524, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 1152, i16 1152, i16 1152, i16 1152, i16 961, i16 961, i16 961, i16 961, i16 961, i16 961, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 380, i16 961, i16 961, i16 961, i16 961, i16 961, i16 158, i16 158, i16 158, i16 252, i16 158, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 808, i16 808, i16 808, i16 808, i16 962, i16 808, i16 808, i16 808, i16 808, i16 808, i16 1152, i16 1152, i16 1152, i16 1152, i16 808, i16 808, i16 808, i16 808, i16 808, i16 808, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 93, i16 808, i16 808, i16 808, i16 808, i16 808, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 851, i16 852, i16 852, i16 852, i16 852, i16 852, i16 1152, i16 851, i16 1152, i16 1152, i16 1152, i16 851, i16 851, i16 854, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 855, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 856, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 964, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 916, i16 917, i16 909, i16 909, i16 909, i16 917, i16 918, i16 916, i16 918, i16 918, i16 918, i16 916, i16 916, i16 919, i16 920, i16 918, i16 918, i16 918, i16 918, i16 921, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 918, i16 918, i16 918, i16 918, i16 922, i16 922, i16 922, i16 922, i16 922, i16 922, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 923, i16 922, i16 922, i16 922, i16 922, i16 922, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 918, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 851, i16 852, i16 852, i16 852, i16 852, i16 852, i16 1152, i16 851, i16 1152, i16 1152, i16 1152, i16 851, i16 851, i16 854, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 855, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 856, i16 907, i16 909, i16 909, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 964, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 907, i16 917, i16 917, i16 917, i16 965, i16 917, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 1152, i16 1152, i16 1152, i16 1152, i16 966, i16 966, i16 966, i16 966, i16 966, i16 966, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 966, i16 966, i16 966, i16 966, i16 966, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 857, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 976, i16 977, i16 969, i16 969, i16 969, i16 977, i16 978, i16 976, i16 978, i16 978, i16 978, i16 976, i16 976, i16 979, i16 980, i16 978, i16 978, i16 978, i16 978, i16 981, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 978, i16 978, i16 978, i16 978, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 983, i16 982, i16 982, i16 982, i16 982, i16 982, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 775, i16 776, i16 859, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 775, i16 859, i16 859, i16 859, i16 930, i16 859, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 1152, i16 1152, i16 1152, i16 1152, i16 984, i16 984, i16 984, i16 984, i16 984, i16 984, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 984, i16 984, i16 984, i16 984, i16 984, i16 783, i16 662, i16 662, i16 784, i16 783, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 1152, i16 1152, i16 1152, i16 1152, i16 987, i16 987, i16 987, i16 987, i16 987, i16 987, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 527, i16 987, i16 987, i16 987, i16 987, i16 987, i16 786, i16 665, i16 665, i16 787, i16 786, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 1152, i16 1152, i16 1152, i16 1152, i16 988, i16 988, i16 988, i16 988, i16 988, i16 988, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 529, i16 988, i16 988, i16 988, i16 988, i16 988, i16 775, i16 935, i16 935, i16 935, i16 935, i16 935, i16 1152, i16 949, i16 1152, i16 1152, i16 1152, i16 950, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 951, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 888, i16 889, i16 889, i16 889, i16 889, i16 889, i16 1152, i16 888, i16 1152, i16 1152, i16 1152, i16 888, i16 888, i16 891, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 892, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 893, i16 871, i16 873, i16 881, i16 873, i16 873, i16 873, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 871, i16 881, i16 881, i16 881, i16 938, i16 881, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 1152, i16 1152, i16 1152, i16 1152, i16 989, i16 989, i16 989, i16 989, i16 989, i16 989, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 989, i16 989, i16 989, i16 989, i16 989, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 1152, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 795, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 796, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 991, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 952, i16 953, i16 942, i16 942, i16 942, i16 953, i16 954, i16 952, i16 954, i16 954, i16 954, i16 952, i16 952, i16 955, i16 956, i16 954, i16 954, i16 954, i16 954, i16 957, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 954, i16 954, i16 954, i16 954, i16 958, i16 958, i16 958, i16 958, i16 958, i16 958, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 959, i16 958, i16 958, i16 958, i16 958, i16 958, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 954, i16 775, i16 776, i16 776, i16 776, i16 776, i16 776, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 999, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 1152, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 795, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 796, i16 940, i16 942, i16 942, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 991, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 940, i16 953, i16 953, i16 953, i16 1000, i16 953, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1152, i16 1152, i16 1152, i16 1152, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 1001, i16 1001, i16 1001, i16 1001, i16 1001, i16 668, i16 799, i16 799, i16 799, i16 894, i16 799, i16 670, i16 668, i16 670, i16 670, i16 670, i16 668, i16 668, i16 671, i16 672, i16 670, i16 670, i16 670, i16 670, i16 673, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 670, i16 670, i16 670, i16 670, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 674, i16 1002, i16 1002, i16 1002, i16 1002, i16 1002, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 532, i16 532, i16 532, i16 675, i16 532, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 378, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 524, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1152, i16 1152, i16 1152, i16 1152, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 380, i16 1003, i16 1003, i16 1003, i16 1003, i16 1003, i16 924, i16 925, i16 925, i16 925, i16 925, i16 925, i16 1152, i16 924, i16 1152, i16 1152, i16 1152, i16 924, i16 924, i16 927, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 928, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 929, i16 907, i16 909, i16 917, i16 909, i16 909, i16 909, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 907, i16 917, i16 917, i16 917, i16 965, i16 917, i16 1152, i16 907, i16 1152, i16 1152, i16 1152, i16 907, i16 907, i16 910, i16 913, i16 1152, i16 1152, i16 1152, i16 1152, i16 914, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1152, i16 1152, i16 1152, i16 1152, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 915, i16 1004, i16 1004, i16 1004, i16 1004, i16 1004, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 851, i16 852, i16 852, i16 852, i16 852, i16 852, i16 1152, i16 851, i16 1152, i16 1152, i16 1152, i16 851, i16 851, i16 854, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 855, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 856, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 1006, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 976, i16 977, i16 969, i16 969, i16 969, i16 977, i16 978, i16 976, i16 978, i16 978, i16 978, i16 976, i16 976, i16 979, i16 980, i16 978, i16 978, i16 978, i16 978, i16 981, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 978, i16 978, i16 978, i16 978, i16 982, i16 982, i16 982, i16 982, i16 982, i16 982, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 983, i16 982, i16 982, i16 982, i16 982, i16 982, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 978, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 851, i16 852, i16 852, i16 852, i16 852, i16 852, i16 1152, i16 851, i16 1152, i16 1152, i16 1152, i16 851, i16 851, i16 854, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 855, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 856, i16 967, i16 969, i16 969, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 1006, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 967, i16 977, i16 977, i16 977, i16 1007, i16 977, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1152, i16 1152, i16 1152, i16 1152, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 1008, i16 1008, i16 1008, i16 1008, i16 1008, i16 775, i16 859, i16 859, i16 859, i16 930, i16 859, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1152, i16 1152, i16 1152, i16 1152, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 1009, i16 1009, i16 1009, i16 1009, i16 1009, i16 783, i16 662, i16 662, i16 784, i16 783, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1152, i16 1152, i16 1152, i16 1152, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 527, i16 1010, i16 1010, i16 1010, i16 1010, i16 1010, i16 786, i16 665, i16 665, i16 787, i16 786, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 526, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1152, i16 1152, i16 1152, i16 1152, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 529, i16 1011, i16 1011, i16 1011, i16 1011, i16 1011, i16 871, i16 881, i16 881, i16 881, i16 938, i16 881, i16 876, i16 871, i16 876, i16 876, i16 876, i16 871, i16 871, i16 874, i16 877, i16 876, i16 876, i16 876, i16 876, i16 878, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 876, i16 876, i16 876, i16 876, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 879, i16 1012, i16 1012, i16 1012, i16 1012, i16 1012, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 888, i16 889, i16 889, i16 889, i16 889, i16 889, i16 1152, i16 888, i16 1152, i16 1152, i16 1152, i16 888, i16 888, i16 891, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 892, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 893, i16 992, i16 992, i16 1021, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1022, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1152, i16 1152, i16 1152, i16 1152, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1023, i16 1023, i16 1023, i16 1023, i16 1023, i16 996, i16 996, i16 1028, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1029, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1152, i16 1152, i16 1152, i16 1152, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1030, i16 1030, i16 1030, i16 1030, i16 1030, i16 1031, i16 1032, i16 1032, i16 1032, i16 1032, i16 1032, i16 1152, i16 1031, i16 1152, i16 1152, i16 1152, i16 1031, i16 1031, i16 1034, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 1035, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1036, i16 940, i16 942, i16 953, i16 942, i16 942, i16 942, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 940, i16 953, i16 953, i16 953, i16 1000, i16 953, i16 1152, i16 940, i16 1152, i16 1152, i16 1152, i16 940, i16 940, i16 943, i16 946, i16 1152, i16 1152, i16 1152, i16 1152, i16 947, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1152, i16 1152, i16 1152, i16 1152, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 948, i16 1037, i16 1037, i16 1037, i16 1037, i16 1037, i16 668, i16 799, i16 799, i16 799, i16 894, i16 799, i16 670, i16 668, i16 670, i16 670, i16 670, i16 668, i16 668, i16 671, i16 672, i16 670, i16 670, i16 670, i16 670, i16 673, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 670, i16 670, i16 670, i16 670, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 674, i16 1038, i16 1038, i16 1038, i16 1038, i16 1038, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 907, i16 917, i16 917, i16 917, i16 965, i16 917, i16 912, i16 907, i16 912, i16 912, i16 912, i16 907, i16 907, i16 910, i16 913, i16 912, i16 912, i16 912, i16 912, i16 914, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 912, i16 912, i16 912, i16 912, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 915, i16 1039, i16 1039, i16 1039, i16 1039, i16 1039, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 924, i16 925, i16 925, i16 925, i16 925, i16 925, i16 1152, i16 924, i16 1152, i16 1152, i16 1152, i16 924, i16 924, i16 927, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 928, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 929, i16 967, i16 969, i16 977, i16 969, i16 969, i16 969, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 967, i16 977, i16 977, i16 977, i16 1007, i16 977, i16 1152, i16 967, i16 1152, i16 1152, i16 1152, i16 967, i16 967, i16 970, i16 973, i16 1152, i16 1152, i16 1152, i16 1152, i16 974, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1152, i16 1152, i16 1152, i16 1152, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 975, i16 1040, i16 1040, i16 1040, i16 1040, i16 1040, i16 775, i16 859, i16 859, i16 859, i16 930, i16 859, i16 777, i16 775, i16 777, i16 777, i16 777, i16 775, i16 775, i16 778, i16 779, i16 777, i16 777, i16 777, i16 777, i16 780, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 777, i16 777, i16 777, i16 777, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 781, i16 1041, i16 1041, i16 1041, i16 1041, i16 1041, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1152, i16 1152, i16 1152, i16 1152, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1042, i16 1042, i16 1042, i16 1042, i16 1042, i16 1044, i16 1044, i16 1054, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1055, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1152, i16 1152, i16 1152, i16 1152, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1057, i16 1020, i16 1020, i16 1058, i16 1057, i16 1152, i16 993, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 994, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1152, i16 1152, i16 1152, i16 1152, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 995, i16 1059, i16 1059, i16 1059, i16 1059, i16 1059, i16 1060, i16 1060, i16 1066, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1067, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1152, i16 1152, i16 1152, i16 1152, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1069, i16 1027, i16 1027, i16 1070, i16 1069, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 993, i16 1152, i16 1152, i16 997, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1152, i16 1152, i16 1152, i16 1152, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 998, i16 1071, i16 1071, i16 1071, i16 1071, i16 1071, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 668, i16 669, i16 669, i16 669, i16 669, i16 669, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 797, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 1081, i16 1082, i16 1074, i16 1074, i16 1074, i16 1082, i16 1083, i16 1081, i16 1083, i16 1083, i16 1083, i16 1081, i16 1081, i16 1084, i16 1085, i16 1083, i16 1083, i16 1083, i16 1083, i16 1086, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1083, i16 1083, i16 1083, i16 1083, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1088, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 940, i16 953, i16 953, i16 953, i16 1000, i16 953, i16 945, i16 940, i16 945, i16 945, i16 945, i16 940, i16 940, i16 943, i16 946, i16 945, i16 945, i16 945, i16 945, i16 947, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 945, i16 945, i16 945, i16 945, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 948, i16 1089, i16 1089, i16 1089, i16 1089, i16 1089, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 668, i16 799, i16 799, i16 799, i16 894, i16 799, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1152, i16 1152, i16 1152, i16 1152, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 1090, i16 1090, i16 1090, i16 1090, i16 1090, i16 907, i16 917, i16 917, i16 917, i16 965, i16 917, i16 912, i16 907, i16 912, i16 912, i16 912, i16 907, i16 907, i16 910, i16 913, i16 912, i16 912, i16 912, i16 912, i16 914, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 912, i16 912, i16 912, i16 912, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 915, i16 1091, i16 1091, i16 1091, i16 1091, i16 1091, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 967, i16 977, i16 977, i16 977, i16 1007, i16 977, i16 972, i16 967, i16 972, i16 972, i16 972, i16 967, i16 967, i16 970, i16 973, i16 972, i16 972, i16 972, i16 972, i16 974, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 972, i16 972, i16 972, i16 972, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 975, i16 1092, i16 1092, i16 1092, i16 1092, i16 1092, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 775, i16 859, i16 859, i16 859, i16 930, i16 859, i16 777, i16 775, i16 777, i16 777, i16 777, i16 775, i16 775, i16 778, i16 779, i16 777, i16 777, i16 777, i16 777, i16 780, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 777, i16 777, i16 777, i16 777, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 781, i16 1093, i16 1093, i16 1093, i16 1093, i16 1093, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1152, i16 1152, i16 1152, i16 1152, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1094, i16 1094, i16 1094, i16 1094, i16 1094, i16 1044, i16 1044, i16 1054, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1055, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1152, i16 1152, i16 1152, i16 1152, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1056, i16 1056, i16 1056, i16 1056, i16 1056, i16 1100, i16 1053, i16 1053, i16 1101, i16 1100, i16 1152, i16 1045, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1046, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1152, i16 1152, i16 1152, i16 1152, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1047, i16 1102, i16 1102, i16 1102, i16 1102, i16 1102, i16 1057, i16 1020, i16 1020, i16 1058, i16 1057, i16 1152, i16 993, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 994, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1152, i16 1152, i16 1152, i16 1152, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 995, i16 1103, i16 1103, i16 1103, i16 1103, i16 1103, i16 1060, i16 1060, i16 1066, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1067, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1152, i16 1152, i16 1152, i16 1152, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1068, i16 1068, i16 1068, i16 1068, i16 1068, i16 1105, i16 1065, i16 1065, i16 1106, i16 1105, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1045, i16 1152, i16 1152, i16 1061, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1152, i16 1152, i16 1152, i16 1152, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1062, i16 1107, i16 1107, i16 1107, i16 1107, i16 1107, i16 1069, i16 1027, i16 1027, i16 1070, i16 1069, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 993, i16 1152, i16 1152, i16 997, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1152, i16 1152, i16 1152, i16 1152, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 998, i16 1108, i16 1108, i16 1108, i16 1108, i16 1108, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 1152, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 795, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 796, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1110, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 1081, i16 1082, i16 1074, i16 1074, i16 1074, i16 1082, i16 1083, i16 1081, i16 1083, i16 1083, i16 1083, i16 1081, i16 1081, i16 1084, i16 1085, i16 1083, i16 1083, i16 1083, i16 1083, i16 1086, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1083, i16 1083, i16 1083, i16 1083, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1088, i16 1087, i16 1087, i16 1087, i16 1087, i16 1087, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1083, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 791, i16 792, i16 792, i16 792, i16 792, i16 792, i16 1152, i16 791, i16 1152, i16 1152, i16 1152, i16 791, i16 791, i16 794, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 795, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 796, i16 1072, i16 1074, i16 1074, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1110, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 1072, i16 1082, i16 1082, i16 1082, i16 1111, i16 1082, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1152, i16 1152, i16 1152, i16 1152, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 1112, i16 1112, i16 1112, i16 1112, i16 1112, i16 940, i16 953, i16 953, i16 953, i16 1000, i16 953, i16 945, i16 940, i16 945, i16 945, i16 945, i16 940, i16 940, i16 943, i16 946, i16 945, i16 945, i16 945, i16 945, i16 947, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 945, i16 945, i16 945, i16 945, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 948, i16 1113, i16 1113, i16 1113, i16 1113, i16 1113, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 668, i16 799, i16 799, i16 799, i16 894, i16 799, i16 1152, i16 668, i16 1152, i16 1152, i16 1152, i16 668, i16 668, i16 671, i16 672, i16 1152, i16 1152, i16 1152, i16 1152, i16 673, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 674, i16 907, i16 917, i16 917, i16 917, i16 965, i16 917, i16 912, i16 907, i16 912, i16 912, i16 912, i16 907, i16 907, i16 910, i16 913, i16 912, i16 912, i16 912, i16 912, i16 914, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 912, i16 912, i16 912, i16 912, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 915, i16 1114, i16 1114, i16 1114, i16 1114, i16 1114, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 967, i16 977, i16 977, i16 977, i16 1007, i16 977, i16 972, i16 967, i16 972, i16 972, i16 972, i16 967, i16 967, i16 970, i16 973, i16 972, i16 972, i16 972, i16 972, i16 974, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 972, i16 972, i16 972, i16 972, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 975, i16 1115, i16 1115, i16 1115, i16 1115, i16 1115, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 775, i16 859, i16 859, i16 859, i16 930, i16 859, i16 1152, i16 775, i16 1152, i16 1152, i16 1152, i16 775, i16 775, i16 778, i16 779, i16 1152, i16 1152, i16 1152, i16 1152, i16 780, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 781, i16 871, i16 881, i16 881, i16 881, i16 938, i16 881, i16 1152, i16 871, i16 1152, i16 1152, i16 1152, i16 871, i16 871, i16 874, i16 877, i16 1152, i16 1152, i16 1152, i16 1152, i16 878, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 879, i16 1100, i16 1053, i16 1053, i16 1101, i16 1100, i16 1152, i16 1045, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1046, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1152, i16 1152, i16 1152, i16 1152, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1047, i16 1122, i16 1122, i16 1122, i16 1122, i16 1122, i16 1057, i16 1020, i16 1020, i16 1058, i16 1057, i16 1152, i16 993, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 994, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1152, i16 1152, i16 1152, i16 1152, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 995, i16 1123, i16 1123, i16 1123, i16 1123, i16 1123, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1152, i16 1152, i16 1152, i16 1152, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1124, i16 1124, i16 1124, i16 1124, i16 1124, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1152, i16 1152, i16 1152, i16 1152, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1125, i16 1125, i16 1125, i16 1125, i16 1125, i16 888, i16 889, i16 889, i16 889, i16 889, i16 889, i16 1152, i16 888, i16 1152, i16 1152, i16 1152, i16 888, i16 888, i16 891, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 892, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 893, i16 1072, i16 1074, i16 1082, i16 1074, i16 1074, i16 1074, i16 1152, i16 1072, i16 1152, i16 1152, i16 1152, i16 1072, i16 1072, i16 1075, i16 1078, i16 1152, i16 1152, i16 1152, i16 1152, i16 1079, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1080, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1152, i16 1152, i16 1152, i16 1152, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1126, i16 1126, i16 1126, i16 1126, i16 1126, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1152, i16 1152, i16 1152, i16 1152, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1127, i16 1127, i16 1127, i16 1127, i16 1127, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 1152, i16 1152, i16 1152, i16 1152, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 912, i16 912, i16 912, i16 912, i16 912, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1152, i16 1152, i16 1152, i16 1152, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1128, i16 1128, i16 1128, i16 1128, i16 1128, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1152, i16 1152, i16 1152, i16 1152, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1134, i16 1134, i16 1134, i16 1134, i16 1134, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1152, i16 1152, i16 1152, i16 1152, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1135, i16 1135, i16 1135, i16 1135, i16 1135, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1152, i16 1152, i16 1152, i16 1152, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1136, i16 1136, i16 1136, i16 1136, i16 1136, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1152, i16 1152, i16 1152, i16 1152, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1137, i16 1137, i16 1137, i16 1137, i16 1137, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1152, i16 1152, i16 1152, i16 1152, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1138, i16 1138, i16 1138, i16 1138, i16 1138, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 1152, i16 1152, i16 1152, i16 1152, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 945, i16 945, i16 945, i16 945, i16 945, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 1152, i16 1152, i16 1152, i16 1152, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 972, i16 972, i16 972, i16 972, i16 972, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1152, i16 1152, i16 1152, i16 1152, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1141, i16 1141, i16 1141, i16 1141, i16 1141, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1152, i16 1152, i16 1152, i16 1152, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1142, i16 1142, i16 1142, i16 1142, i16 1142, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1152, i16 1152, i16 1152, i16 1152, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1143, i16 1143, i16 1143, i16 1143, i16 1143, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1152, i16 1152, i16 1152, i16 1152, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1144, i16 1144, i16 1144, i16 1144, i16 1144, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1152, i16 1152, i16 1152, i16 1152, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1145, i16 1145, i16 1145, i16 1145, i16 1145, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1152, i16 1152, i16 1152, i16 1152, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1149, i16 1149, i16 1149, i16 1149, i16 1149, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 1152, i16 1152, i16 1152, i16 1152, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 992, i16 992, i16 992, i16 992, i16 992, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1152, i16 1152, i16 1152, i16 1152, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1150, i16 1150, i16 1150, i16 1150, i16 1150, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 1152, i16 1152, i16 1152, i16 1152, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 996, i16 996, i16 996, i16 996, i16 996, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1152, i16 1152, i16 1152, i16 1152, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1151, i16 1151, i16 1151, i16 1151, i16 1151, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1152, i16 1152, i16 1152, i16 1152, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1152, i16 1152, i16 1152, i16 1152, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1152, i16 1152, i16 1152, i16 1152, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 35, i16 35, i16 1152, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 38, i16 38, i16 38, i16 40, i16 40, i16 1152, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 43, i16 1152, i16 43, i16 70, i16 70, i16 70, i16 70, i16 73, i16 73, i16 1152, i16 73, i16 73, i16 73, i16 73, i16 73, i16 73, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 83, i16 83, i16 1152, i16 83, i16 83, i16 83, i16 83, i16 83, i16 83, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 89, i16 89, i16 89, i16 89, i16 89, i16 89, i16 89, i16 89, i16 89, i16 92, i16 92, i16 92, i16 138, i16 138, i16 1152, i16 138, i16 138, i16 138, i16 138, i16 138, i16 138, i16 143, i16 143, i16 143, i16 143, i16 143, i16 143, i16 143, i16 143, i16 143, i16 145, i16 145, i16 145, i16 145, i16 145, i16 145, i16 145, i16 145, i16 145, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 158, i16 158, i16 1152, i16 158, i16 158, i16 158, i16 158, i16 158, i16 158, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 250, i16 250, i16 250, i16 250, i16 250, i16 250, i16 250, i16 250, i16 250, i16 375, i16 375, i16 375, i16 375, i16 1152, i16 375, i16 375, i16 375, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 156, i16 158, i16 158, i16 1152, i16 158, i16 158, i16 158, i16 158, i16 158, i16 158, i16 525, i16 525, i16 1152, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 528, i16 528, i16 1152, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 382, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 244, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 384, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 245, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 35, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 662, i16 662, i16 662, i16 662, i16 662, i16 662, i16 662, i16 662, i16 662, i16 665, i16 665, i16 665, i16 665, i16 665, i16 665, i16 665, i16 665, i16 665, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 375, i16 375, i16 375, i16 1152, i16 1152, i16 375, i16 375, i16 375, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 668, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 871, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 92, i16 92, i16 1152, i16 1152, i16 1152, i16 92, i16 92, i16 92, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 940, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 375, i16 375, i16 375, i16 1152, i16 1152, i16 375, i16 375, i16 375, i16 92, i16 92, i16 1152, i16 1152, i16 1152, i16 92, i16 92, i16 92, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 912, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 967, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 851, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 853, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 985, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 932, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 775, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1020, i16 1020, i16 1020, i16 1020, i16 1020, i16 1020, i16 1020, i16 1020, i16 1020, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1027, i16 1027, i16 1027, i16 1027, i16 1027, i16 1027, i16 1027, i16 1027, i16 1027, i16 1033, i16 1033, i16 1033, i16 1033, i16 1033, i16 1033, i16 1033, i16 1033, i16 1033, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 945, i16 375, i16 375, i16 375, i16 1152, i16 1152, i16 375, i16 375, i16 375, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 924, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 926, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 972, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 907, i16 1053, i16 1053, i16 1053, i16 1053, i16 1053, i16 1053, i16 1053, i16 1053, i16 1053, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1016, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 525, i16 525, i16 1152, i16 525, i16 525, i16 525, i16 525, i16 525, i16 525, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 992, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1060, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 1065, i16 528, i16 528, i16 1152, i16 528, i16 528, i16 528, i16 528, i16 528, i16 528, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 996, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 1072, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 791, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 1077, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 793, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 670, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 777, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 876, i16 1116, i16 1116, i16 1116, i16 1116, i16 1116, i16 1116, i16 1116, i16 1116, i16 1116, i16 1118, i16 1118, i16 1118, i16 1118, i16 1118, i16 1118, i16 1118, i16 1118, i16 1118, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 866, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1095, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 1044, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 888, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 890, i16 1129, i16 1129, i16 1129, i16 1129, i16 1129, i16 1129, i16 1129, i16 1129, i16 1129, i16 1140, i16 1140, i16 1140, i16 1140, i16 1140, i16 1140, i16 1140, i16 1140, i16 1140, i16 1146, i16 1146, i16 1146, i16 1146, i16 1146, i16 1146, i16 1146, i16 1146, i16 1146, i16 1147, i16 1147, i16 1147, i16 1147, i16 1147, i16 1147, i16 1147, i16 1147, i16 1147, i16 3, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152, i16 1152], align 16
@yy_n_chars = internal global i64 0, align 8
@yy_did_buffer_switch_on_eof = internal global i32 0, align 4
@.str.138 = private unnamed_addr constant [51 x i8] c"fatal flex scanner internal error--no action found\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.11.139 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.6.140 = private unnamed_addr constant [56 x i8] c"fatal flex scanner internal error--end of buffer missed\00", align 1
@.str.7.141 = private unnamed_addr constant [44 x i8] c"fatal error - scanner input buffer overflow\00", align 1
@.str.8.142 = private unnamed_addr constant [29 x i8] c"input in flex scanner failed\00", align 1
@.str.9.143 = private unnamed_addr constant [46 x i8] c"out of dynamic memory in yy_get_next_buffer()\00", align 1
@.str.1.144 = private unnamed_addr constant [44 x i8] c"out of dynamic memory in yy_create_buffer()\00", align 1
@.str.10.145 = private unnamed_addr constant [49 x i8] c"out of dynamic memory in yyensure_buffer_stack()\00", align 1
@yy_buffer_stack_max = internal global i64 0, align 8
@.str.2.146 = private unnamed_addr constant [42 x i8] c"out of dynamic memory in yy_scan_buffer()\00", align 1
@.str.3.147 = private unnamed_addr constant [41 x i8] c"out of dynamic memory in yy_scan_bytes()\00", align 1
@.str.4.148 = private unnamed_addr constant [30 x i8] c"bad buffer in yy_scan_bytes()\00", align 1
@.str.149 = private unnamed_addr constant [32 x i8] c"Found @import: [%s] at %d [%s]\0A\00", align 1
@.str.1.150 = private unnamed_addr constant [28 x i8] c"Found URI: [%s] at %d [%s]\0A\00", align 1
@.str.2.151 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5.152 = private unnamed_addr constant [5 x i8] c"url(\00", align 1
@.str.3.155 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.4.156 = private unnamed_addr constant [22 x i8] c"Loaded %s (size %s).\0A\00", align 1
@.str.159 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1.164 = private unnamed_addr constant [5 x i8] c"USER\00", align 1
@ftp_login.skey_head = internal global [2 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.166, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.167, i32 0, i32 0)], align 16, !track !18
@.str.4.165 = private unnamed_addr constant [5 x i8] c"PASS\00", align 1
@.str.2.166 = private unnamed_addr constant [11 x i8] c"331 s/key \00", align 1
@.str.3.167 = private unnamed_addr constant [13 x i8] c"331 opiekey \00", align 1
@.str.45.168 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.46.169 = private unnamed_addr constant [52 x i8] c"\0ADetected newlines in %s \22%s\22; changing to %s \22%s\22\0A\00", align 1
@.str.32.170 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.47.171 = private unnamed_addr constant [8 x i8] c"--> %s\0A\00", align 1
@.str.48.172 = private unnamed_addr constant [25 x i8] c"--> PASS Turtle Power!\0A\0A\00", align 1
@.str.49.173 = private unnamed_addr constant [9 x i8] c"\0A--> %s\0A\00", align 1
@.str.5.176 = private unnamed_addr constant [5 x i8] c"PORT\00", align 1
@.str.50.177 = private unnamed_addr constant [18 x i8] c"%d,%d,%d,%d,%d,%d\00", align 1
@.str.6.180 = private unnamed_addr constant [5 x i8] c"LPRT\00", align 1
@.str.51.181 = private unnamed_addr constant [27 x i8] c"%d,%d,%d,%d,%d,%d,%d,%d,%d\00", align 1
@.str.52.182 = private unnamed_addr constant [63 x i8] c"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\00", align 1
@.str.7.185 = private unnamed_addr constant [5 x i8] c"EPRT\00", align 1
@.str.53.186 = private unnamed_addr constant [11 x i8] c"|%d|%s|%d|\00", align 1
@.str.8.189 = private unnamed_addr constant [5 x i8] c"AUTH\00", align 1
@.str.9.190 = private unnamed_addr constant [4 x i8] c"TLS\00", align 1
@.str.10.193 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.11.194 = private unnamed_addr constant [5 x i8] c"PBSZ\00", align 1
@.str.12.197 = private unnamed_addr constant [5 x i8] c"PROT\00", align 1
@.str.13.200 = private unnamed_addr constant [5 x i8] c"PASV\00", align 1
@.str.14.203 = private unnamed_addr constant [5 x i8] c"LPSV\00", align 1
@.str.15.204 = private unnamed_addr constant [18 x i8] c"lpsv addr is: %s\0A\00", align 1
@.str.16.205 = private unnamed_addr constant [18 x i8] c"tmpprt[0] is: %d\0A\00", align 1
@.str.17.206 = private unnamed_addr constant [18 x i8] c"tmpprt[1] is: %d\0A\00", align 1
@.str.18.207 = private unnamed_addr constant [14 x i8] c"*port is: %d\0A\00", align 1
@.str.20.210 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.21.211 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.19.212 = private unnamed_addr constant [5 x i8] c"EPSV\00", align 1
@.str.22.213 = private unnamed_addr constant [16 x i8] c"respline is %s\0A\00", align 1
@.str.23.216 = private unnamed_addr constant [5 x i8] c"TYPE\00", align 1
@.str.24.219 = private unnamed_addr constant [4 x i8] c"CWD\00", align 1
@.str.25.222 = private unnamed_addr constant [5 x i8] c"REST\00", align 1
@.str.26.225 = private unnamed_addr constant [5 x i8] c"RETR\00", align 1
@.str.29.228 = private unnamed_addr constant [21 x i8] c"(skipping \22LIST -a\22)\00", align 1
@ftp_list.list_commands = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27.230, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.231, i32 0, i32 0)], align 16
@.str.30.229 = private unnamed_addr constant [18 x i8] c"(skipping \22LIST\22)\00", align 1
@.str.27.230 = private unnamed_addr constant [8 x i8] c"LIST -a\00", align 1
@.str.28.231 = private unnamed_addr constant [5 x i8] c"LIST\00", align 1
@.str.31.234 = private unnamed_addr constant [5 x i8] c"SYST\00", align 1
@.str.33.235 = private unnamed_addr constant [4 x i8] c"VMS\00", align 1
@.str.34.236 = private unnamed_addr constant [5 x i8] c"UNIX\00", align 1
@.str.35.237 = private unnamed_addr constant [18 x i8] c"215 UNIX Type: L8\00", align 1
@.str.36.238 = private unnamed_addr constant [42 x i8] c"215 UNIX MultiNet Unix Emulation V5.3(93)\00", align 1
@.str.37.239 = private unnamed_addr constant [11 x i8] c"WINDOWS_NT\00", align 1
@.str.38.240 = private unnamed_addr constant [12 x i8] c"WINDOWS2000\00", align 1
@.str.39.241 = private unnamed_addr constant [6 x i8] c"MACOS\00", align 1
@.str.40.242 = private unnamed_addr constant [7 x i8] c"OS/400\00", align 1
@.str.41.245 = private unnamed_addr constant [4 x i8] c"PWD\00", align 1
@.str.42.246 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.43.249 = private unnamed_addr constant [5 x i8] c"SIZE\00", align 1
@.str.44.252 = private unnamed_addr constant [6 x i8] c"type=\00", align 1
@.str.255 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.1.256 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.2.257 = private unnamed_addr constant [55 x i8] c"Unsupported listing type, trying Unix listing parser.\0A\00", align 1
@.str.71.258 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.72.259 = private unnamed_addr constant [10 x i8] c"Total of \00", align 1
@.str.42.260 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.73.261 = private unnamed_addr constant [19 x i8] c"file name:   '%s'\0A\00", align 1
@.str.74.262 = private unnamed_addr constant [19 x i8] c"file name-^: '%s'\0A\00", align 1
@.str.75.263 = private unnamed_addr constant [5 x i8] c".DIR\00", align 1
@.str.76.264 = private unnamed_addr constant [16 x i8] c"Directory (nv)\0A\00", align 1
@.str.77.265 = private unnamed_addr constant [7 x i8] c".DIR;1\00", align 1
@.str.78.266 = private unnamed_addr constant [15 x i8] c"Directory (v)\0A\00", align 1
@.str.79.267 = private unnamed_addr constant [6 x i8] c"File\0A\00", align 1
@.str.65.268 = private unnamed_addr constant [12 x i8] c"Name: '%s'\0A\00", align 1
@.str.80.269 = private unnamed_addr constant [26 x i8] c"Getting additional line.\0A\00", align 1
@.str.81.270 = private unnamed_addr constant [31 x i8] c"EOF.  Leaving listing parser.\0A\00", align 1
@.str.82.271 = private unnamed_addr constant [38 x i8] c"Blank line.  Leaving listing parser.\0A\00", align 1
@.str.83.272 = private unnamed_addr constant [50 x i8] c"Non-blank in column 1.  Must be a new file name?\0A\00", align 1
@.str.84.273 = private unnamed_addr constant [38 x i8] c"Null token.  Leaving listing parser.\0A\00", align 1
@.str.85.274 = private unnamed_addr constant [14 x i8] c"Token: >%s<: \00", align 1
@.str.86.275 = private unnamed_addr constant [7 x i8] c"Date.\0A\00", align 1
@.str.87.276 = private unnamed_addr constant [7 x i8] c"Time. \00", align 1
@.str.88.277 = private unnamed_addr constant [17 x i8] c"Date time: >%s<\0A\00", align 1
@.str.89.278 = private unnamed_addr constant [8 x i8] c"Owner.\0A\00", align 1
@.str.90.279 = private unnamed_addr constant [21 x i8] c"Prot.  perms = %0o.\0A\00", align 1
@.str.91.280 = private unnamed_addr constant [18 x i8] c"Ignored (size?).\0A\00", align 1
@.str.92.281 = private unnamed_addr constant [18 x i8] c"%d-%b-%Y %H:%M:%S\00", align 1
@.str.93.282 = private unnamed_addr constant [27 x i8] c"WGET_TIMEZONE_DIFFERENTIAL\00", align 1
@.str.94.283 = private unnamed_addr constant [25 x i8] c"Time differential = %d.\0A\00", align 1
@.str.68.284 = private unnamed_addr constant [16 x i8] c"Timestamp: %ld\0A\00", align 1
@.str.64.285 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.4.286 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.66.287 = private unnamed_addr constant [2 x i8] c"M\00", align 1
@.str.67.288 = private unnamed_addr constant [43 x i8] c"YYYY/MM/DD HH:MM - %d/%02d/%02d %02d:%02d\0A\00", align 1
@.str.69.289 = private unnamed_addr constant [11 x i8] c"Directory\0A\00", align 1
@.str.70.290 = private unnamed_addr constant [21 x i8] c"File, size %s bytes\0A\00", align 1
@.str.41.291 = private unnamed_addr constant [6 x i8] c"total\00", align 1
@.str.43.292 = private unnamed_addr constant [12 x i8] c"PLAINFILE; \00", align 1
@.str.44.293 = private unnamed_addr constant [12 x i8] c"DIRECTORY; \00", align 1
@.str.45.294 = private unnamed_addr constant [10 x i8] c"SYMLINK; \00", align 1
@.str.46.295 = private unnamed_addr constant [10 x i8] c"UNKNOWN; \00", align 1
@.str.47.296 = private unnamed_addr constant [21 x i8] c"implicit perms %0o; \00", align 1
@.str.48.297 = private unnamed_addr constant [12 x i8] c"perms %0o; \00", align 1
@ftp_parse_unix_ls.months = internal global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.314, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.315, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.316, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16.317, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.318, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18.319, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19.320, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.321, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21.322, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.323, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.324, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24.325, i32 0, i32 0)], align 16
@.str.49.298 = private unnamed_addr constant [11 x i8] c"size: %s; \00", align 1
@.str.50.299 = private unnamed_addr constant [12 x i8] c"month: %s; \00", align 1
@.str.51.300 = private unnamed_addr constant [10 x i8] c"day: %d; \00", align 1
@.str.52.301 = private unnamed_addr constant [19 x i8] c"year: %d (no tm); \00", align 1
@.str.53.302 = private unnamed_addr constant [31 x i8] c"time: %02d:%02d:%02d (no yr); \00", align 1
@.str.54.303 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@.str.55.304 = private unnamed_addr constant [13 x i8] c"link to: %s\0A\00", align 1
@.str.56.305 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.57.306 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.58.307 = private unnamed_addr constant [25 x i8] c"\0AIgnoring `.' and `..'; \00", align 1
@.str.59.308 = private unnamed_addr constant [22 x i8] c"trailing `/' on dir.\0A\00", align 1
@.str.60.309 = private unnamed_addr constant [23 x i8] c"trailing `@' on link.\0A\00", align 1
@.str.61.310 = private unnamed_addr constant [23 x i8] c"trailing `*' on exec.\0A\00", align 1
@.str.6.311 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.62.312 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.63.313 = private unnamed_addr constant [11 x i8] c"Skipping.\0A\00", align 1
@.str.13.314 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.14.315 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.15.316 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.16.317 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.17.318 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.18.319 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.19.320 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.20.321 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.21.322 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.22.323 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.23.324 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.24.325 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@.str.3.328 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.5.329 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.7.330 = private unnamed_addr constant [52 x i8] c"<!DOCTYPE HTML PUBLIC \22-//IETF//DTD HTML 2.0//EN\22>\0A\00", align 1
@.str.8.331 = private unnamed_addr constant [22 x i8] c"<html>\0A<head>\0A<title>\00", align 1
@.str.9.332 = private unnamed_addr constant [22 x i8] c"Index of /%s on %s:%d\00", align 1
@.str.10.333 = private unnamed_addr constant [29 x i8] c"</title>\0A</head>\0A<body>\0A<h1>\00", align 1
@.str.11.334 = private unnamed_addr constant [18 x i8] c"</h1>\0A<hr>\0A<pre>\0A\00", align 1
@.str.12.335 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@ftp_index.months = internal global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.314, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.315, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.316, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16.317, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.318, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18.319, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19.320, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.321, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21.322, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.323, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.324, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24.325, i32 0, i32 0)], align 16, !track !19
@.str.25.336 = private unnamed_addr constant [12 x i8] c"%d %s %02d \00", align 1
@.str.26.337 = private unnamed_addr constant [12 x i8] c"%02d:%02d  \00", align 1
@.str.27.338 = private unnamed_addr constant [8 x i8] c"       \00", align 1
@.str.28.339 = private unnamed_addr constant [20 x i8] c"time unknown       \00", align 1
@.str.29.340 = private unnamed_addr constant [13 x i8] c"File        \00", align 1
@.str.30.341 = private unnamed_addr constant [13 x i8] c"Directory   \00", align 1
@.str.31.342 = private unnamed_addr constant [13 x i8] c"Link        \00", align 1
@.str.32.343 = private unnamed_addr constant [13 x i8] c"Not sure    \00", align 1
@.str.33.344 = private unnamed_addr constant [23 x i8] c"<a href=\22ftp://%s%s:%d\00", align 1
@.str.34.345 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.35.346 = private unnamed_addr constant [5 x i8] c"\22>%s\00", align 1
@.str.36.347 = private unnamed_addr constant [6 x i8] c"</a> \00", align 1
@.str.37.348 = private unnamed_addr constant [12 x i8] c" (%s bytes)\00", align 1
@.str.39.349 = private unnamed_addr constant [6 x i8] c"(nil)\00", align 1
@.str.38.350 = private unnamed_addr constant [6 x i8] c"-> %s\00", align 1
@.str.40.351 = private unnamed_addr constant [24 x i8] c"</pre>\0A</body>\0A</html>\0A\00", align 1
@prime_size.primes = internal constant [71 x i32] [i32 13, i32 19, i32 29, i32 41, i32 59, i32 79, i32 107, i32 149, i32 197, i32 263, i32 347, i32 457, i32 599, i32 787, i32 1031, i32 1361, i32 1777, i32 2333, i32 3037, i32 3967, i32 5167, i32 6719, i32 8737, i32 11369, i32 14783, i32 19219, i32 24989, i32 32491, i32 42257, i32 54941, i32 71429, i32 92861, i32 120721, i32 156941, i32 204047, i32 265271, i32 344857, i32 448321, i32 582821, i32 757693, i32 985003, i32 1280519, i32 1664681, i32 2164111, i32 2813353, i32 3657361, i32 4754591, i32 6180989, i32 8035301, i32 10445899, i32 13579681, i32 17653589, i32 22949669, i32 29834603, i32 38784989, i32 50420551, i32 65546729, i32 85210757, i32 110774011, i32 144006217, i32 187208107, i32 243370577, i32 316381771, i32 411296309, i32 534685237, i32 695090819, i32 903618083, i32 1174703521, i32 1527114613, i32 1837299131, i32 2147483647], align 16
@.str.384 = private unnamed_addr constant [26 x i8] c"index: %d\0Aal->faulty: %d\0A\00", align 1
@.str.1.385 = private unnamed_addr constant [37 x i8] c"Error in handling the address list.\0A\00", align 1
@.str.2.386 = private unnamed_addr constant [46 x i8] c"Please report this issue to bug-wget@gnu.org\0A\00", align 1
@.str.3.393 = private unnamed_addr constant [38 x i8] c"Releasing 0x%0*lx (new refcount %d).\0A\00", align 1
@.str.4.394 = private unnamed_addr constant [26 x i8] c"Deleting unused 0x%0*lx.\0A\00", align 1
@print_address.buf = internal global [64 x i8] zeroinitializer, align 16, !track !20
@.str.5.397 = private unnamed_addr constant [12 x i8] c"<error: %s>\00", align 1
@.str.6.400 = private unnamed_addr constant [8 x i8] c"%s (%s)\00", align 1
@.str.7.401 = private unnamed_addr constant [17 x i8] c"Resolving %s... \00", align 1
@.str.8.402 = private unnamed_addr constant [13 x i8] c"failed: %s.\0A\00", align 1
@.str.9.403 = private unnamed_addr constant [42 x i8] c"failed: No IPv4/IPv6 addresses for host.\0A\00", align 1
@.str.10.404 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.11.405 = private unnamed_addr constant [6 x i8] c", ...\00", align 1
@.str.12.406 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@host_name_addresses_map = internal global %struct.hash_table* null, align 8, !track !21
@.str.14.407 = private unnamed_addr constant [14 x i8] c"Caching %s =>\00", align 1
@.str.15.408 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.13.409 = private unnamed_addr constant [42 x i8] c"Found %s in host_name_addresses_map (%p)\0A\00", align 1
@.str.410 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.411 = private unnamed_addr constant [20 x i8] c"%255s %d %d %lu %lu\00", align 1
@.str.1.412 = private unnamed_addr constant [3 x i8] c"a+\00", align 1
@.str.3.413 = private unnamed_addr constant [47 x i8] c"# HSTS 1.0 Known Hosts database for GNU Wget.\0A\00", align 1
@.str.4.414 = private unnamed_addr constant [26 x i8] c"# Edit at your own risk.\0A\00", align 1
@.str.5.415 = private unnamed_addr constant [62 x i8] c"# <hostname>[:<port>]\09<incl. subdomains>\09<created>\09<max-age>\0A\00", align 1
@.str.6.416 = private unnamed_addr constant [18 x i8] c"%s\09%d\09%d\09%lu\09%lu\0A\00", align 1
@.str.7.417 = private unnamed_addr constant [46 x i8] c"Could not write the HSTS database correctly.\0A\00", align 1
@.str.420 = private unnamed_addr constant [35 x i8] c"%s: no base, merge will use \22%s\22.\0A\00", align 1
@.str.1.421 = private unnamed_addr constant [40 x i8] c"%s: Cannot resolve incomplete link %s.\0A\00", align 1
@.str.2.422 = private unnamed_addr constant [30 x i8] c"%s: link \22%s\22 doesn't parse.\0A\00", align 1
@.str.3.423 = private unnamed_addr constant [25 x i8] c"%s: merge(%s, %s) -> %s\0A\00", align 1
@.str.4.424 = private unnamed_addr constant [37 x i8] c"%s: merged link \22%s\22 doesn't parse.\0A\00", align 1
@.str.5.425 = private unnamed_addr constant [25 x i8] c"appending %s to urlpos.\0A\00", align 1
@.str.6.428 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.7.429 = private unnamed_addr constant [22 x i8] c"Loaded %s (size %s).\0A\00", align 1
@interesting_tags = internal global %struct.hash_table* null, align 8, !track !22
@interesting_attributes = internal global %struct.hash_table* null, align 8, !track !23
@meta_charset = internal global i8* null, align 8, !track !24
@.str.8.430 = private unnamed_addr constant [21 x i8] c"no-follow in %s: %d\0A\00", align 1
@.str.53.431 = private unnamed_addr constant [6 x i8] c"style\00", align 1
@known_tags = internal global [25 x %struct.known_tag] [%struct.known_tag { i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.446, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.447, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.448, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.449, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_handle_base }, %struct.known_tag { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15.450, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.451, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17.452, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18.453, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.454, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_handle_form }, %struct.known_tag { i32 9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20.455, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21.456, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.457, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23.458, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24.459, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25.460, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_handle_link }, %struct.known_tag { i32 15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26.461, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_handle_meta }, %struct.known_tag { i32 16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.462, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 17, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28.463, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29.464, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30.465, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31.466, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.467, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 22, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.468, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34.469, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }, %struct.known_tag { i32 24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35.470, i32 0, i32 0), void (i32, %struct.taginfo*, %struct.map_context*)* @tag_find_urls }], align 16, !track !25
@additional_attributes = internal global [7 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38.440, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41.441, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44.442, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43.443, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46.444, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37.445, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53.431, i32 0, i32 0)], align 16, !track !26
@.str.10.432 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@tag_url_attributes = internal global [26 x %struct.anon] [%struct.anon { i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.433, i32 0, i32 0), i32 2 }, %struct.anon { i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54.434, i32 0, i32 0), i32 1 }, %struct.anon { i32 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.433, i32 0, i32 0), i32 2 }, %struct.anon { i32 4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }, %struct.anon { i32 5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56.436, i32 0, i32 0), i32 1 }, %struct.anon { i32 6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.433, i32 0, i32 0), i32 2 }, %struct.anon { i32 6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 3 }, %struct.anon { i32 7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }, %struct.anon { i32 9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 3 }, %struct.anon { i32 10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 3 }, %struct.anon { i32 11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.433, i32 0, i32 0), i32 1 }, %struct.anon { i32 11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.437, i32 0, i32 0), i32 1 }, %struct.anon { i32 11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }, %struct.anon { i32 12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }, %struct.anon { i32 13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 3 }, %struct.anon { i32 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58.438, i32 0, i32 0), i32 1 }, %struct.anon { i32 17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 3 }, %struct.anon { i32 18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }, %struct.anon { i32 19, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56.436, i32 0, i32 0), i32 1 }, %struct.anon { i32 20, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56.436, i32 0, i32 0), i32 1 }, %struct.anon { i32 21, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56.436, i32 0, i32 0), i32 1 }, %struct.anon { i32 22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }, %struct.anon { i32 22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59.439, i32 0, i32 0), i32 1 }, %struct.anon { i32 23, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }, %struct.anon { i32 23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59.439, i32 0, i32 0), i32 1 }, %struct.anon { i32 24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55.435, i32 0, i32 0), i32 1 }], align 16, !track !27
@.str.36.433 = private unnamed_addr constant [5 x i8] c"href\00", align 1
@.str.54.434 = private unnamed_addr constant [5 x i8] c"code\00", align 1
@.str.55.435 = private unnamed_addr constant [4 x i8] c"src\00", align 1
@.str.56.436 = private unnamed_addr constant [11 x i8] c"background\00", align 1
@.str.57.437 = private unnamed_addr constant [7 x i8] c"lowsrc\00", align 1
@.str.58.438 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.59.439 = private unnamed_addr constant [7 x i8] c"poster\00", align 1
@.str.38.440 = private unnamed_addr constant [4 x i8] c"rel\00", align 1
@.str.41.441 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.44.442 = private unnamed_addr constant [11 x i8] c"http-equiv\00", align 1
@.str.43.443 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.46.444 = private unnamed_addr constant [8 x i8] c"content\00", align 1
@.str.37.445 = private unnamed_addr constant [7 x i8] c"action\00", align 1
@.str.11.446 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.12.447 = private unnamed_addr constant [7 x i8] c"applet\00", align 1
@.str.13.448 = private unnamed_addr constant [5 x i8] c"area\00", align 1
@.str.14.449 = private unnamed_addr constant [5 x i8] c"base\00", align 1
@.str.15.450 = private unnamed_addr constant [8 x i8] c"bgsound\00", align 1
@.str.16.451 = private unnamed_addr constant [5 x i8] c"body\00", align 1
@.str.17.452 = private unnamed_addr constant [6 x i8] c"embed\00", align 1
@.str.18.453 = private unnamed_addr constant [4 x i8] c"fig\00", align 1
@.str.19.454 = private unnamed_addr constant [5 x i8] c"form\00", align 1
@.str.20.455 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.21.456 = private unnamed_addr constant [7 x i8] c"iframe\00", align 1
@.str.22.457 = private unnamed_addr constant [4 x i8] c"img\00", align 1
@.str.23.458 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.24.459 = private unnamed_addr constant [6 x i8] c"layer\00", align 1
@.str.25.460 = private unnamed_addr constant [5 x i8] c"link\00", align 1
@.str.26.461 = private unnamed_addr constant [5 x i8] c"meta\00", align 1
@.str.27.462 = private unnamed_addr constant [7 x i8] c"object\00", align 1
@.str.28.463 = private unnamed_addr constant [8 x i8] c"overlay\00", align 1
@.str.29.464 = private unnamed_addr constant [7 x i8] c"script\00", align 1
@.str.30.465 = private unnamed_addr constant [6 x i8] c"table\00", align 1
@.str.31.466 = private unnamed_addr constant [3 x i8] c"td\00", align 1
@.str.32.467 = private unnamed_addr constant [3 x i8] c"th\00", align 1
@.str.33.468 = private unnamed_addr constant [6 x i8] c"video\00", align 1
@.str.34.469 = private unnamed_addr constant [6 x i8] c"audio\00", align 1
@.str.35.470 = private unnamed_addr constant [7 x i8] c"source\00", align 1
@.str.45.471 = private unnamed_addr constant [8 x i8] c"refresh\00", align 1
@.str.47.472 = private unnamed_addr constant [13 x i8] c"content-type\00", align 1
@.str.48.473 = private unnamed_addr constant [7 x i8] c"robots\00", align 1
@.str.49.474 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.50.475 = private unnamed_addr constant [7 x i8] c" \0C\0A\0D\09\0B\00", align 1
@.str.51.476 = private unnamed_addr constant [8 x i8] c", \0C\0A\0D\09\0B\00", align 1
@.str.52.477 = private unnamed_addr constant [9 x i8] c"nofollow\00", align 1
@.str.39.478 = private unnamed_addr constant [11 x i8] c"stylesheet\00", align 1
@.str.40.479 = private unnamed_addr constant [14 x i8] c"shortcut icon\00", align 1
@.str.42.480 = private unnamed_addr constant [10 x i8] c"text/html\00", align 1
@.str.9.481 = private unnamed_addr constant [24 x i8] c"%s: Invalid URL %s: %s\0A\00", align 1
@.str.484 = private unnamed_addr constant [43 x i8] c"Warning: wildcards not supported in HTTP.\0A\00", align 1
@.str.1.485 = private unnamed_addr constant [51 x i8] c"Spider mode enabled. Check if remote file exists.\0A\00", align 1
@.str.2.486 = private unnamed_addr constant [10 x i8] c"(try:%2d)\00", align 1
@.str.3.487 = private unnamed_addr constant [16 x i8] c"--%s--  %s  %s\0A\00", align 1
@.str.4.488 = private unnamed_addr constant [12 x i8] c"--%s--  %s\0A\00", align 1
@.str.5.489 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6.490 = private unnamed_addr constant [26 x i8] c"Cannot write to %s (%s).\0A\00", align 1
@.str.7.491 = private unnamed_addr constant [50 x i8] c"Required attribute missing from Header received.\0A\00", align 1
@.str.8.492 = private unnamed_addr constant [42 x i8] c"Username/Password Authentication Failed.\0A\00", align 1
@.str.9.493 = private unnamed_addr constant [28 x i8] c"Cannot write to WARC file.\0A\00", align 1
@.str.10.494 = private unnamed_addr constant [38 x i8] c"Cannot write to temporary WARC file.\0A\00", align 1
@.str.11.495 = private unnamed_addr constant [37 x i8] c"Unable to establish SSL connection.\0A\00", align 1
@.str.12.496 = private unnamed_addr constant [24 x i8] c"Cannot unlink %s (%s).\0A\00", align 1
@.str.13.497 = private unnamed_addr constant [43 x i8] c"ERROR: Redirection (%d) without location.\0A\00", align 1
@.str.14.498 = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.15.499 = private unnamed_addr constant [46 x i8] c"Remote file does not exist -- broken link!!!\0A\00", align 1
@.str.16.500 = private unnamed_addr constant [18 x i8] c"%s ERROR %d: %s.\0A\00", align 1
@.str.17.501 = private unnamed_addr constant [57 x i8] c"Last-modified header missing -- time-stamps turned off.\0A\00", align 1
@.str.18.504 = private unnamed_addr constant [53 x i8] c"Last-modified header invalid -- time-stamp ignored.\0A\00", align 1
@.str.19.505 = private unnamed_addr constant [61 x i8] c"Server file no newer than local file %s -- not retrieving.\0A\0A\00", align 1
@.str.20.506 = private unnamed_addr constant [50 x i8] c"The sizes do not match (local %s) -- retrieving.\0A\00", align 1
@.str.21.507 = private unnamed_addr constant [35 x i8] c"Remote file is newer, retrieving.\0A\00", align 1
@.str.22.508 = private unnamed_addr constant [79 x i8] c"Remote file exists and could contain links to other resources -- retrieving.\0A\0A\00", align 1
@.str.23.509 = private unnamed_addr constant [70 x i8] c"Remote file exists but does not contain any link -- not retrieving.\0A\0A\00", align 1
@.str.24.510 = private unnamed_addr constant [99 x i8] c"Remote file exists and could contain further links,\0Abut recursion is disabled -- not retrieving.\0A\0A\00", align 1
@.str.25.511 = private unnamed_addr constant [22 x i8] c"Remote file exists.\0A\0A\00", align 1
@.str.26.512 = private unnamed_addr constant [19 x i8] c"%s URL: %s %2d %s\0A\00", align 1
@.str.27.513 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.28.514 = private unnamed_addr constant [40 x i8] c"%s (%s) - written to stdout %s[%s/%s]\0A\0A\00", align 1
@.str.29.515 = private unnamed_addr constant [29 x i8] c"%s (%s) - %s saved [%s/%s]\0A\0A\00", align 1
@.str.30.516 = private unnamed_addr constant [32 x i8] c"%s URL:%s [%s/%s] -> \22%s\22 [%d]\0A\00", align 1
@.str.31.517 = private unnamed_addr constant [37 x i8] c"%s (%s) - written to stdout %s[%s]\0A\0A\00", align 1
@.str.32.518 = private unnamed_addr constant [26 x i8] c"%s (%s) - %s saved [%s]\0A\0A\00", align 1
@.str.33.519 = private unnamed_addr constant [29 x i8] c"%s URL:%s [%s] -> \22%s\22 [%d]\0A\00", align 1
@.str.34.520 = private unnamed_addr constant [41 x i8] c"%s (%s) - Connection closed at byte %s. \00", align 1
@.str.35.521 = private unnamed_addr constant [38 x i8] c"%s (%s) - Read error at byte %s (%s).\00", align 1
@.str.36.522 = private unnamed_addr constant [42 x i8] c"%s (%s) - Read error at byte %s/%s (%s). \00", align 1
@.str.41.523 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@http_atotm.time_formats = internal global [4 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.37.524, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38.525, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39.526, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.40.527, i32 0, i32 0)], align 16, !track !28
@.str.37.524 = private unnamed_addr constant [16 x i8] c"%a, %d %b %Y %T\00", align 1
@.str.38.525 = private unnamed_addr constant [16 x i8] c"%A, %d-%b-%y %T\00", align 1
@.str.39.526 = private unnamed_addr constant [15 x i8] c"%a %b %d %T %Y\00", align 1
@.str.40.527 = private unnamed_addr constant [16 x i8] c"%a, %d-%b-%Y %T\00", align 1
@.str.44.528 = private unnamed_addr constant [42 x i8] c"Disabling SSL due to encountered errors.\0A\00", align 1
@wget_cookie_jar = internal global %struct.cookie_jar* null, align 8, !track !29
@.str.45.529 = private unnamed_addr constant [7 x i8] c"Cookie\00", align 1
@pconn_active = internal global i8 0, align 1
@pconn = internal global %struct.anon.65 zeroinitializer, align 8, !track !30
@.str.46.530 = private unnamed_addr constant [17 x i8] c"[BODY data: %s]\0A\00", align 1
@.str.47.531 = private unnamed_addr constant [39 x i8] c"%s request sent, awaiting response... \00", align 1
@.str.48.532 = private unnamed_addr constant [6 x i8] c"Proxy\00", align 1
@.str.49.533 = private unnamed_addr constant [5 x i8] c"HTTP\00", align 1
@.str.50.534 = private unnamed_addr constant [19 x i8] c"No data received.\0A\00", align 1
@.str.51.535 = private unnamed_addr constant [29 x i8] c"Read error (%s) in headers.\0A\00", align 1
@.str.52.536 = private unnamed_addr constant [44 x i8] c"\0A---response begin---\0A%s---response end---\0A\00", align 1
@.str.53.537 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.54.538 = private unnamed_addr constant [22 x i8] c"Malformed status line\00", align 1
@.str.55.539 = private unnamed_addr constant [19 x i8] c"Ignoring response\0A\00", align 1
@.str.56.540 = private unnamed_addr constant [8 x i8] c"%2d %s\0A\00", align 1
@.str.57.541 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.58.542 = private unnamed_addr constant [15 x i8] c"Content-Length\00", align 1
@.str.59.543 = private unnamed_addr constant [11 x i8] c"Connection\00", align 1
@.str.60.544 = private unnamed_addr constant [6 x i8] c"Close\00", align 1
@.str.61.545 = private unnamed_addr constant [18 x i8] c"Transfer-Encoding\00", align 1
@.str.62.546 = private unnamed_addr constant [8 x i8] c"chunked\00", align 1
@.str.63.547 = private unnamed_addr constant [11 x i8] c"Set-Cookie\00", align 1
@.str.64.548 = private unnamed_addr constant [13 x i8] c"Content-Type\00", align 1
@.str.65.549 = private unnamed_addr constant [17 x i8] c"(no description)\00", align 1
@.str.66.550 = private unnamed_addr constant [26 x i8] c"Strict-Transport-Security\00", align 1
@.str.68.551 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.69.552 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.67.553 = private unnamed_addr constant [65 x i8] c"Added new HSTS host: %s:%u (max-age: %u, includeSubdomains: %s)\0A\00", align 1
@.str.70.554 = private unnamed_addr constant [63 x i8] c"Updated HSTS host: %s:%u (max-age: %u, includeSubdomains: %s)\0A\00", align 1
@.str.71.555 = private unnamed_addr constant [9 x i8] c"Location\00", align 1
@.str.72.556 = private unnamed_addr constant [14 x i8] c"Last-Modified\00", align 1
@.str.73.557 = private unnamed_addr constant [14 x i8] c"Content-Range\00", align 1
@.str.74.558 = private unnamed_addr constant [16 x i8] c"Location: %s%s\0A\00", align 1
@.str.75.559 = private unnamed_addr constant [12 x i8] c"unspecified\00", align 1
@.str.76.560 = private unnamed_addr constant [13 x i8] c" [following]\00", align 1
@.str.77.561 = private unnamed_addr constant [5 x i8] c"post\00", align 1
@.str.78.562 = private unnamed_addr constant [6 x i8] c".html\00", align 1
@.str.79.563 = private unnamed_addr constant [5 x i8] c".css\00", align 1
@.str.80.564 = private unnamed_addr constant [53 x i8] c"File %s not modified on server. Omitting download.\0A\0A\00", align 1
@.str.81.565 = private unnamed_addr constant [108 x i8] c"Server ignored If-Modified-Since header for file %s.\0AYou might want to add --no-if-modified-since option.\0A\0A\00", align 1
@.str.82.566 = private unnamed_addr constant [59 x i8] c"\0A    The file is already fully retrieved; nothing to do.\0A\0A\00", align 1
@.str.83.567 = private unnamed_addr constant [9 x i8] c"Length: \00", align 1
@.str.84.568 = private unnamed_addr constant [6 x i8] c" (%s)\00", align 1
@.str.85.569 = private unnamed_addr constant [20 x i8] c", %s (%s) remaining\00", align 1
@.str.86.570 = private unnamed_addr constant [15 x i8] c", %s remaining\00", align 1
@.str.87.571 = private unnamed_addr constant [8 x i8] c"ignored\00", align 1
@.str.88.572 = private unnamed_addr constant [7 x i8] c" [%s]\0A\00", align 1
@.str.212 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.213 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.214 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.215 = private unnamed_addr constant [31 x i8] c"%s has sprung into existence.\0A\00", align 1
@.str.216 = private unnamed_addr constant [15 x i8] c"Saving to: %s\0A\00", align 1
@.str.217 = private unnamed_addr constant [7 x i8] c"STDOUT\00", align 1
@.str.211 = private unnamed_addr constant [6 x i8] c".%d%s\00", align 1
@.str.208 = private unnamed_addr constant [10 x i8] c"text/html\00", align 1
@.str.209 = private unnamed_addr constant [22 x i8] c"application/xhtml+xml\00", align 1
@.str.210 = private unnamed_addr constant [9 x i8] c"text/css\00", align 1
@.str.207 = private unnamed_addr constant [6 x i8] c"bytes\00", align 1
@.str.203 = private unnamed_addr constant [8 x i8] c"max-age\00", align 1
@.str.204 = private unnamed_addr constant [18 x i8] c"includeSubDomains\00", align 1
@.str.205 = private unnamed_addr constant [71 x i8] c"Parsed Strict-Transport-Security max-age = %s, includeSubDomains = %s\0A\00", align 1
@.str.206 = private unnamed_addr constant [50 x i8] c"Could not parse String-Transport-Security header\0A\00", align 1
@.str.200 = private unnamed_addr constant [20 x i8] c"Content-Disposition\00", align 1
@.str.201 = private unnamed_addr constant [46 x i8] c"Parsed filename from Content-Disposition: %s\0A\00", align 1
@.str.202 = private unnamed_addr constant [9 x i8] c"filename\00", align 1
@.str.172 = private unnamed_addr constant [17 x i8] c"WWW-Authenticate\00", align 1
@.str.173 = private unnamed_addr constant [26 x i8] c"Auth scheme found '%.*s'\0A\00", align 1
@.str.174 = private unnamed_addr constant [5 x i8] c"NTLM\00", align 1
@.str.175 = private unnamed_addr constant [7 x i8] c"Digest\00", align 1
@.str.176 = private unnamed_addr constant [6 x i8] c"Basic\00", align 1
@.str.177 = private unnamed_addr constant [22 x i8] c"Auth param list '%s'\0A\00", align 1
@.str.178 = private unnamed_addr constant [22 x i8] c"Auth param %.*s=%.*s\0A\00", align 1
@.str.179 = private unnamed_addr constant [32 x i8] c"Unknown authentication scheme.\0A\00", align 1
@.str.180 = private unnamed_addr constant [29 x i8] c"Authentication selected: %s\0A\00", align 1
@.str.144 = private unnamed_addr constant [14 x i8] c"Authorization\00", align 1
@basic_authed_hosts = internal global %struct.hash_table* null, align 8, !track !31
@.str.199 = private unnamed_addr constant [37 x i8] c"Inserted %s into basic_authed_hosts\0A\00", align 1
@digest_authentication_encode.qop = internal global i8* null, align 8, !track !32
@digest_authentication_encode.algorithm = internal global i8* null, align 8, !track !33
@digest_authentication_encode.nonce = internal global i8* null, align 8, !track !34
@digest_authentication_encode.opaque = internal global i8* null, align 8, !track !35
@digest_authentication_encode.realm = internal global i8* null, align 8, !track !36
@digest_authentication_encode.options = internal global [5 x %struct.response] [%struct.response { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.181, i32 0, i32 0), i8** @digest_authentication_encode.realm }, %struct.response { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.182, i32 0, i32 0), i8** @digest_authentication_encode.opaque }, %struct.response { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.183, i32 0, i32 0), i8** @digest_authentication_encode.nonce }, %struct.response { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.184, i32 0, i32 0), i8** @digest_authentication_encode.qop }, %struct.response { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.185, i32 0, i32 0), i8** @digest_authentication_encode.algorithm }], align 16, !track !37
@.str.186 = private unnamed_addr constant [5 x i8] c"auth\00", align 1
@.str.187 = private unnamed_addr constant [41 x i8] c"Unsupported quality of protection '%s'.\0A\00", align 1
@.str.188 = private unnamed_addr constant [4 x i8] c"MD5\00", align 1
@.str.189 = private unnamed_addr constant [9 x i8] c"MD5-sess\00", align 1
@.str.190 = private unnamed_addr constant [29 x i8] c"Unsupported algorithm '%s'.\0A\00", align 1
@.str.191 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.192 = private unnamed_addr constant [5 x i8] c"%08x\00", align 1
@.str.193 = private unnamed_addr constant [9 x i8] c"00000001\00", align 1
@.str.194 = private unnamed_addr constant [106 x i8] c"Digest username=\22%s\22, realm=\22%s\22, nonce=\22%s\22, uri=\22%s\22, response=\22%s\22, qop=auth, nc=00000001, cnonce=\22%s\22\00", align 1
@.str.195 = private unnamed_addr constant [70 x i8] c"Digest username=\22%s\22, realm=\22%s\22, nonce=\22%s\22, uri=\22%s\22, response=\22%s\22\00", align 1
@.str.196 = private unnamed_addr constant [14 x i8] c", opaque=\22%s\22\00", align 1
@.str.197 = private unnamed_addr constant [17 x i8] c", algorithm=\22%s\22\00", align 1
@.str.198 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.181 = private unnamed_addr constant [6 x i8] c"realm\00", align 1
@.str.182 = private unnamed_addr constant [7 x i8] c"opaque\00", align 1
@.str.183 = private unnamed_addr constant [6 x i8] c"nonce\00", align 1
@.str.184 = private unnamed_addr constant [4 x i8] c"qop\00", align 1
@.str.185 = private unnamed_addr constant [10 x i8] c"algorithm\00", align 1
@.str.145 = private unnamed_addr constant [6 x i8] c"%s:%s\00", align 1
@.str.146 = private unnamed_addr constant [7 x i8] c"Basic \00", align 1
@.str.167 = private unnamed_addr constant [29 x i8] c"Skipping %s bytes of body: [\00", align 1
@.str.169 = private unnamed_addr constant [13 x i8] c"EOF received\00", align 1
@.str.168 = private unnamed_addr constant [18 x i8] c"] aborting (%s).\0A\00", align 1
@.str.170 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@.str.171 = private unnamed_addr constant [9 x i8] c"] done.\0A\00", align 1
@.str.166 = private unnamed_addr constant [44 x i8] c"Registered socket %d for persistent reuse.\0A\00", align 1
@.str.165 = private unnamed_addr constant [6 x i8] c"%s%s\0A\00", align 1
@.str.164 = private unnamed_addr constant [30 x i8] c"No headers, assuming HTTP/0.9\00", align 1
@.str.161 = private unnamed_addr constant [27 x i8] c"[writing BODY file %s ... \00", align 1
@.str.162 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@body_file_send.chunk = internal global [8192 x i8] zeroinitializer, align 16, !track !38
@.str.163 = private unnamed_addr constant [7 x i8] c"done]\0A\00", align 1
@.str.158 = private unnamed_addr constant [11 x i8] c"HTTP/1.1\0D\0A\00", align 1
@.str.159.573 = private unnamed_addr constant [42 x i8] c"\0A---request begin---\0A%s---request end---\0A\00", align 1
@.str.160 = private unnamed_addr constant [34 x i8] c"Failed writing HTTP request: %s.\0A\00", align 1
@.str.157 = private unnamed_addr constant [39 x i8] c"Disabling further reuse of socket %d.\0A\00", align 1
@.str.148 = private unnamed_addr constant [41 x i8] c"Reusing existing connection to [%s]:%d.\0A\00", align 1
@.str.149.574 = private unnamed_addr constant [39 x i8] c"Reusing existing connection to %s:%d.\0A\00", align 1
@.str.150 = private unnamed_addr constant [16 x i8] c"Reusing fd %d.\0A\00", align 1
@.str.151 = private unnamed_addr constant [39 x i8] c"%s: unable to resolve host address %s\0A\00", align 1
@.str.110.575 = private unnamed_addr constant [6 x i8] c"%s:%d\00", align 1
@.str.152 = private unnamed_addr constant [8 x i8] c"CONNECT\00", align 1
@.str.102.576 = private unnamed_addr constant [13 x i8] c"Wget/%s (%s)\00", align 1
@.str.103.577 = private unnamed_addr constant [10 x i8] c"linux-gnu\00", align 1
@.str.101.578 = private unnamed_addr constant [11 x i8] c"User-Agent\00", align 1
@.str.147 = private unnamed_addr constant [20 x i8] c"Proxy-Authorization\00", align 1
@.str.112.579 = private unnamed_addr constant [5 x i8] c"Host\00", align 1
@.str.153 = private unnamed_addr constant [35 x i8] c"Failed reading proxy response: %s\0A\00", align 1
@.str.154 = private unnamed_addr constant [28 x i8] c"proxy responded with: [%s]\0A\00", align 1
@.str.155 = private unnamed_addr constant [27 x i8] c"Proxy tunneling failed: %s\00", align 1
@.str.156 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.89.580 = private unnamed_addr constant [4 x i8] c"GET\00", align 1
@.str.90.581 = private unnamed_addr constant [5 x i8] c"HEAD\00", align 1
@.str.91.582 = private unnamed_addr constant [8 x i8] c"Referer\00", align 1
@.str.92.583 = private unnamed_addr constant [14 x i8] c"Cache-Control\00", align 1
@.str.93.584 = private unnamed_addr constant [26 x i8] c"no-cache, must-revalidate\00", align 1
@.str.94.585 = private unnamed_addr constant [7 x i8] c"Pragma\00", align 1
@.str.95.586 = private unnamed_addr constant [9 x i8] c"no-cache\00", align 1
@.str.96.587 = private unnamed_addr constant [92 x i8] c"Cannot convert timestamp to http format. Falling back to time 0 as last modification time.\0A\00", align 1
@.str.97.588 = private unnamed_addr constant [30 x i8] c"Thu, 01 Jan 1970 00:00:00 GMT\00", align 1
@.str.98.589 = private unnamed_addr constant [18 x i8] c"If-Modified-Since\00", align 1
@.str.100.590 = private unnamed_addr constant [10 x i8] c"bytes=%s-\00", align 1
@.str.99.591 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@.str.104.592 = private unnamed_addr constant [7 x i8] c"Accept\00", align 1
@.str.105.593 = private unnamed_addr constant [4 x i8] c"*/*\00", align 1
@.str.106.594 = private unnamed_addr constant [16 x i8] c"Accept-Encoding\00", align 1
@.str.107.595 = private unnamed_addr constant [9 x i8] c"identity\00", align 1
@initialize_request.hfmt = internal global [2 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.108.603, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109.604, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110.575, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.111.605, i32 0, i32 0)]], align 16
@.str.113.596 = private unnamed_addr constant [11 x i8] c"Keep-Alive\00", align 1
@.str.114.597 = private unnamed_addr constant [17 x i8] c"Proxy-Connection\00", align 1
@.str.115.598 = private unnamed_addr constant [34 x i8] c"application/x-www-form-urlencoded\00", align 1
@.str.116.599 = private unnamed_addr constant [31 x i8] c"BODY data file %s missing: %s\0A\00", align 1
@.str.117.600 = private unnamed_addr constant [4 x i8] c"put\00", align 1
@.str.118.601 = private unnamed_addr constant [6 x i8] c"patch\00", align 1
@.str.119.602 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.108.603 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.109.604 = private unnamed_addr constant [5 x i8] c"[%s]\00", align 1
@.str.111.605 = private unnamed_addr constant [8 x i8] c"[%s]:%d\00", align 1
@.str.141 = private unnamed_addr constant [56 x i8] c"Auth-without-challenge set, sending Basic credentials.\0A\00", align 1
@.str.142 = private unnamed_addr constant [33 x i8] c"Found %s in basic_authed_hosts.\0A\00", align 1
@.str.143 = private unnamed_addr constant [51 x i8] c"Host %s has not issued a general basic challenge.\0A\00", align 1
@.str.140 = private unnamed_addr constant [40 x i8] c"gmtime failed. This is probably a bug.\0A\00", align 1
@time_to_rfc1123.time_format = internal global i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.139, i32 0, i32 0), align 8, !track !39
@time_to_rfc1123.wkday = internal global [7 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.120.618, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.121.619, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.122.620, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123.621, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.124.622, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.125.623, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.126.624, i32 0, i32 0)], align 16, !track !40
@time_to_rfc1123.month = internal global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127.606, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.128.607, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129.608, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130.609, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.131.610, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132.611, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.133.612, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134.613, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.135.614, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.136.615, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.137.616, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.138.617, i32 0, i32 0)], align 16, !track !41
@.str.127.606 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.128.607 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.129.608 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.130.609 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.131.610 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.132.611 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.133.612 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.134.613 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.135.614 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.136.615 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.137.616 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.138.617 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@.str.120.618 = private unnamed_addr constant [4 x i8] c"Sun\00", align 1
@.str.121.619 = private unnamed_addr constant [4 x i8] c"Mon\00", align 1
@.str.122.620 = private unnamed_addr constant [4 x i8] c"Tue\00", align 1
@.str.123.621 = private unnamed_addr constant [4 x i8] c"Wed\00", align 1
@.str.124.622 = private unnamed_addr constant [4 x i8] c"Thu\00", align 1
@.str.125.623 = private unnamed_addr constant [4 x i8] c"Fri\00", align 1
@.str.126.624 = private unnamed_addr constant [4 x i8] c"Sat\00", align 1
@.str.139 = private unnamed_addr constant [36 x i8] c"%s, %02d %s %04d %02d:%02d:%02d GMT\00", align 1
@.str.43.625 = private unnamed_addr constant [6 x i8] c".orig\00", align 1
@.str.42.626 = private unnamed_addr constant [41 x i8] c"File %s already there; not retrieving.\0A\0A\00", align 1
@cookies_loaded_p = internal global i8 0, align 1
@.str.627 = private unnamed_addr constant [9 x i8] c"no_proxy\00", align 1
@home_dir.home = internal global i8* null, align 8, !track !42
@.str.1.628 = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@home_dir.ret = internal global i8* null, align 8, !track !43
@home_dir.buf = internal global i8* null, align 8, !track !44
@.str.2.629 = private unnamed_addr constant [7 x i8] c"WGETRC\00", align 1
@.str.3.630 = private unnamed_addr constant [47 x i8] c"%s: WGETRC points to %s, which doesn't exist.\0A\00", align 1
@.str.4.631 = private unnamed_addr constant [11 x i8] c"%s/.wgetrc\00", align 1
@.str.5.632 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.6.633 = private unnamed_addr constant [26 x i8] c"%s: Cannot read %s (%s).\0A\00", align 1
@.str.7.634 = private unnamed_addr constant [29 x i8] c"%s: Error in %s at line %d.\0A\00", align 1
@.str.8.635 = private unnamed_addr constant [36 x i8] c"%s: Syntax error in %s at line %d.\0A\00", align 1
@.str.9.636 = private unnamed_addr constant [42 x i8] c"%s: Unknown command %s in %s at line %d.\0A\00", align 1
@commands = internal constant [160 x %struct.anon.83] [%struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.638, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 104), i1 (i8*, i8*, i8*)* @cmd_vector }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18.639, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 144), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19.640, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 40), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20.641, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 601), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21.642, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 321), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.643, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 320), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23.644, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 781), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24.645, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 13), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25.646, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 542), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26.647, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 544), i1 (i8*, i8*, i8*)* @cmd_number }, %struct.anon.83 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.648, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 424), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.28.649, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 608), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29.650, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 744), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30.651, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 752), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31.652, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 656), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32.653, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 386), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.33.654, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 648), i1 (i8*, i8*, i8*)* @cmd_directory }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.34.655, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 624), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35.656, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 640), i1 (i8*, i8*, i8*)* @cmd_cert_type }, %struct.anon.83 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.36.657, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 620), i1 (i8*, i8*, i8*)* @cmd_check_cert }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37.658, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 72), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.38.659, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 480), i1 (i8*, i8*, i8*)* @cmd_time }, %struct.anon.83 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.39.660, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 780), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.40.661, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 538), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.41.662, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 321), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42.663, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 569), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43.664, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 568), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44.665, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 693), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45.666, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 664), i1 (i8*, i8*, i8*)* @cmd_file_once }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46.667, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 36), i1 (i8*, i8*, i8*)* @cmd_number }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47.668, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 539), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.48.669, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 88), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.49.670, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 600), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50.671, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 48), i1 (i8*, i8*, i8*)* @cmd_directory }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51.672, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_dirstruct }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52.673, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 216), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53.674, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 472), i1 (i8*, i8*, i8*)* @cmd_time }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54.675, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 200), i1 (i8*, i8*, i8*)* @cmd_vector }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55.676, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 584), i1 (i8*, i8*, i8*)* @cmd_bytes }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56.677, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 592), i1 (i8*, i8*, i8*)* @cmd_number }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.57.678, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 596), i1 (i8*, i8*, i8*)* @cmd_number }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.58.679, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 576), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59.680, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 680), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.60.681, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 120), i1 (i8*, i8*, i8*)* @cmd_directory_vector }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.61.682, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 208), i1 (i8*, i8*, i8*)* @cmd_vector }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.62.683, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 240), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.63.684, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 224), i1 (i8*, i8*, i8*)* @cmd_vector }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.64.685, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 81), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.65.686, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 344), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.66.687, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 344), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.67.688, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 400), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.68.689, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 692), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.69.690, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 690), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.70.691, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 691), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71.692, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 689), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72.693, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 336), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73.694, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 353), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.74.695, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_header }, %struct.anon.83 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75.696, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 816), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76.697, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 824), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77.698, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 601), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.78.699, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_htmlify }, %struct.anon.83 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.79.700, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 384), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.80.701, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 368), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.81.702, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 368), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82.703, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 392), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.83.704, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 688), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84.705, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 408), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85.706, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 360), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.86.707, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 541), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.87.708, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 136), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.88.709, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 14), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.89.710, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 232), i1 (i8*, i8*, i8*)* @cmd_vector }, %struct.anon.83 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.90.711, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 128), i1 (i8*, i8*, i8*)* @cmd_directory_vector }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.91.712, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 774), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92.713, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 775), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93.714, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 64), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.94.715, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 782), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.95.716, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 712), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96.717, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 520), i1 (i8*, i8*, i8*)* @cmd_bytes }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.97.718, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 696), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.98.719, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 792), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.99.720, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 56), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100.721, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 336), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101.722, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 20), i1 (i8*, i8*, i8*)* @cmd_number }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.102.723, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 736), i1 (i8*, i8*, i8*)* @cmd_string_uppercase }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103.724, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_mirror }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.104.725, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 352), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.105.726, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 42), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106.727, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 80), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.107.728, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 25), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108.729, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 416), i1 (i8*, i8*, i8*)* @cmd_vector }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109.730, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 8), i1 (i8*, i8*, i8*)* @cmd_number_inf }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.110.731, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 248), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.111.732, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 602), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.112.733, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 354), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113.734, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 344), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114.735, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 312), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.115.736, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 720), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.116.737, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 728), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117.738, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_prefer_family }, %struct.anon.83 { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.118.739, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 773), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.119.740, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 632), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.120.741, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 644), i1 (i8*, i8*, i8*)* @cmd_cert_type }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.121.742, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 432), i1 (i8*, i8*, i8*)* @cmd_spec_progress }, %struct.anon.83 { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.122.743, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 41), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.123.744, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 456), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.124.745, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 456), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.125.746, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 448), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.126.747, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 4), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.127.748, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 528), i1 (i8*, i8*, i8*)* @cmd_bytes_sum }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128.749, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 672), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.129.750, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 488), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.130.751, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 464), i1 (i8*, i8*, i8*)* @cmd_time }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.131.752, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 28), i1 (i8*, i8*, i8*)* @cmd_number_inf }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.132.753, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_recursive }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.133.754, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 560), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.134.755, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 176), i1 (i8*, i8*, i8*)* @cmd_spec_regex_type }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.135.756, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 112), i1 (i8*, i8*, i8*)* @cmd_vector }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.136.757, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 808), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137.758, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 152), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.138.759, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 24), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.139.760, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 784), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.140.761, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 570), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141.762, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 803), i1 (i8*, i8*, i8*)* @cmd_spec_report_speed }, %struct.anon.83 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.142.763, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_restrict_file_names }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.143.764, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 241), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144.765, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 12), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.145.766, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 512), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.146.767, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 704), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.147.768, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 537), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.148.769, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 616), i1 (i8*, i8*, i8*)* @cmd_spec_secure_protocol }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.149.770, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 536), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.150.771, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 802), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.151.772, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 440), i1 (i8*, i8*, i8*)* @cmd_spec_progressdisp }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.152.773, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 16), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.153.774, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 96), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.154.775, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 328), i1 (i8*, i8*, i8*)* @cmd_bytes }, %struct.anon.83 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.155.776, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 772), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.156.777, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_timeout }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.157.778, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 540), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.158.779, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 8), i1 (i8*, i8*, i8*)* @cmd_number_inf }, %struct.anon.83 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.159.780, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 800), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.160.781, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 43), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.161.782, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 385), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162.783, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 304), i1 (i8*, i8*, i8*)* @cmd_string }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.163.784, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_useragent }, %struct.anon.83 { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.164.785, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 801), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.165.786, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_verbose }, %struct.anon.83 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.166.787, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 496), i1 (i8*, i8*, i8*)* @cmd_time }, %struct.anon.83 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.167.788, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 504), i1 (i8*, i8*, i8*)* @cmd_time }, %struct.anon.83 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.168.789, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 290), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.169.790, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 272), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.170.791, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 288), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.171.792, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 289), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.172.793, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 256), i1 (i8*, i8*, i8*)* @cmd_file }, %struct.anon.83 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.173.794, i32 0, i32 0), i8* null, i1 (i8*, i8*, i8*)* @cmd_spec_warc_header }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.174.795, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 291), i1 (i8*, i8*, i8*)* @cmd_boolean }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.175.796, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 280), i1 (i8*, i8*, i8*)* @cmd_bytes }, %struct.anon.83 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.176.797, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast (%struct.options* @opt to i8*), i64 264), i1 (i8*, i8*, i8*)* @cmd_directory }], align 16, !track !45
@.str.16.637 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.17.638 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.18.639 = private unnamed_addr constant [12 x i8] c"acceptregex\00", align 1
@.str.19.640 = private unnamed_addr constant [11 x i8] c"addhostdir\00", align 1
@.str.20.641 = private unnamed_addr constant [16 x i8] c"adjustextension\00", align 1
@.str.21.642 = private unnamed_addr constant [11 x i8] c"alwaysrest\00", align 1
@.str.22.643 = private unnamed_addr constant [12 x i8] c"askpassword\00", align 1
@.str.23.644 = private unnamed_addr constant [16 x i8] c"authnochallenge\00", align 1
@.str.24.645 = private unnamed_addr constant [11 x i8] c"background\00", align 1
@.str.25.646 = private unnamed_addr constant [16 x i8] c"backupconverted\00", align 1
@.str.26.647 = private unnamed_addr constant [8 x i8] c"backups\00", align 1
@.str.27.648 = private unnamed_addr constant [5 x i8] c"base\00", align 1
@.str.28.649 = private unnamed_addr constant [12 x i8] c"bindaddress\00", align 1
@.str.29.650 = private unnamed_addr constant [9 x i8] c"bodydata\00", align 1
@.str.30.651 = private unnamed_addr constant [9 x i8] c"bodyfile\00", align 1
@.str.31.652 = private unnamed_addr constant [14 x i8] c"cacertificate\00", align 1
@.str.32.653 = private unnamed_addr constant [6 x i8] c"cache\00", align 1
@.str.33.654 = private unnamed_addr constant [12 x i8] c"cadirectory\00", align 1
@.str.34.655 = private unnamed_addr constant [12 x i8] c"certificate\00", align 1
@.str.35.656 = private unnamed_addr constant [16 x i8] c"certificatetype\00", align 1
@.str.36.657 = private unnamed_addr constant [17 x i8] c"checkcertificate\00", align 1
@.str.37.658 = private unnamed_addr constant [13 x i8] c"chooseconfig\00", align 1
@.str.38.659 = private unnamed_addr constant [15 x i8] c"connecttimeout\00", align 1
@.str.39.660 = private unnamed_addr constant [19 x i8] c"contentdisposition\00", align 1
@.str.40.661 = private unnamed_addr constant [15 x i8] c"contentonerror\00", align 1
@.str.41.662 = private unnamed_addr constant [9 x i8] c"continue\00", align 1
@.str.42.663 = private unnamed_addr constant [16 x i8] c"convertfileonly\00", align 1
@.str.43.664 = private unnamed_addr constant [13 x i8] c"convertlinks\00", align 1
@.str.44.665 = private unnamed_addr constant [8 x i8] c"cookies\00", align 1
@.str.45.666 = private unnamed_addr constant [8 x i8] c"crlfile\00", align 1
@.str.46.667 = private unnamed_addr constant [8 x i8] c"cutdirs\00", align 1
@.str.47.668 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.48.669 = private unnamed_addr constant [12 x i8] c"defaultpage\00", align 1
@.str.49.670 = private unnamed_addr constant [12 x i8] c"deleteafter\00", align 1
@.str.50.671 = private unnamed_addr constant [10 x i8] c"dirprefix\00", align 1
@.str.51.672 = private unnamed_addr constant [10 x i8] c"dirstruct\00", align 1
@.str.52.673 = private unnamed_addr constant [9 x i8] c"dnscache\00", align 1
@.str.53.674 = private unnamed_addr constant [11 x i8] c"dnstimeout\00", align 1
@.str.54.675 = private unnamed_addr constant [8 x i8] c"domains\00", align 1
@.str.55.676 = private unnamed_addr constant [9 x i8] c"dotbytes\00", align 1
@.str.56.677 = private unnamed_addr constant [11 x i8] c"dotsinline\00", align 1
@.str.57.678 = private unnamed_addr constant [11 x i8] c"dotspacing\00", align 1
@.str.58.679 = private unnamed_addr constant [9 x i8] c"dotstyle\00", align 1
@.str.59.680 = private unnamed_addr constant [8 x i8] c"egdfile\00", align 1
@.str.60.681 = private unnamed_addr constant [19 x i8] c"excludedirectories\00", align 1
@.str.61.682 = private unnamed_addr constant [15 x i8] c"excludedomains\00", align 1
@.str.62.683 = private unnamed_addr constant [10 x i8] c"followftp\00", align 1
@.str.63.684 = private unnamed_addr constant [11 x i8] c"followtags\00", align 1
@.str.64.685 = private unnamed_addr constant [10 x i8] c"forcehtml\00", align 1
@.str.65.686 = private unnamed_addr constant [10 x i8] c"ftppasswd\00", align 1
@.str.66.687 = private unnamed_addr constant [12 x i8] c"ftppassword\00", align 1
@.str.67.688 = private unnamed_addr constant [9 x i8] c"ftpproxy\00", align 1
@.str.68.689 = private unnamed_addr constant [24 x i8] c"ftpscleardataconnection\00", align 1
@.str.69.690 = private unnamed_addr constant [18 x i8] c"ftpsfallbacktoftp\00", align 1
@.str.70.691 = private unnamed_addr constant [13 x i8] c"ftpsimplicit\00", align 1
@.str.71.692 = private unnamed_addr constant [14 x i8] c"ftpsresumessl\00", align 1
@.str.72.693 = private unnamed_addr constant [8 x i8] c"ftpuser\00", align 1
@.str.73.694 = private unnamed_addr constant [5 x i8] c"glob\00", align 1
@.str.74.695 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@.str.75.696 = private unnamed_addr constant [5 x i8] c"hsts\00", align 1
@.str.76.697 = private unnamed_addr constant [10 x i8] c"hsts-file\00", align 1
@.str.77.698 = private unnamed_addr constant [14 x i8] c"htmlextension\00", align 1
@.str.78.699 = private unnamed_addr constant [8 x i8] c"htmlify\00", align 1
@.str.79.700 = private unnamed_addr constant [14 x i8] c"httpkeepalive\00", align 1
@.str.80.701 = private unnamed_addr constant [11 x i8] c"httppasswd\00", align 1
@.str.81.702 = private unnamed_addr constant [13 x i8] c"httppassword\00", align 1
@.str.82.703 = private unnamed_addr constant [10 x i8] c"httpproxy\00", align 1
@.str.83.704 = private unnamed_addr constant [10 x i8] c"httpsonly\00", align 1
@.str.84.705 = private unnamed_addr constant [11 x i8] c"httpsproxy\00", align 1
@.str.85.706 = private unnamed_addr constant [9 x i8] c"httpuser\00", align 1
@.str.86.707 = private unnamed_addr constant [18 x i8] c"if-modified-since\00", align 1
@.str.87.708 = private unnamed_addr constant [11 x i8] c"ignorecase\00", align 1
@.str.88.709 = private unnamed_addr constant [13 x i8] c"ignorelength\00", align 1
@.str.89.710 = private unnamed_addr constant [11 x i8] c"ignoretags\00", align 1
@.str.90.711 = private unnamed_addr constant [19 x i8] c"includedirectories\00", align 1
@.str.91.712 = private unnamed_addr constant [10 x i8] c"inet4only\00", align 1
@.str.92.713 = private unnamed_addr constant [10 x i8] c"inet6only\00", align 1
@.str.93.714 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.94.715 = private unnamed_addr constant [4 x i8] c"iri\00", align 1
@.str.95.716 = private unnamed_addr constant [19 x i8] c"keepsessioncookies\00", align 1
@.str.96.717 = private unnamed_addr constant [10 x i8] c"limitrate\00", align 1
@.str.97.718 = private unnamed_addr constant [12 x i8] c"loadcookies\00", align 1
@.str.98.719 = private unnamed_addr constant [14 x i8] c"localencoding\00", align 1
@.str.99.720 = private unnamed_addr constant [8 x i8] c"logfile\00", align 1
@.str.100.721 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.101.722 = private unnamed_addr constant [12 x i8] c"maxredirect\00", align 1
@.str.102.723 = private unnamed_addr constant [7 x i8] c"method\00", align 1
@.str.103.724 = private unnamed_addr constant [7 x i8] c"mirror\00", align 1
@.str.104.725 = private unnamed_addr constant [6 x i8] c"netrc\00", align 1
@.str.105.726 = private unnamed_addr constant [10 x i8] c"noclobber\00", align 1
@.str.106.727 = private unnamed_addr constant [9 x i8] c"noconfig\00", align 1
@.str.107.728 = private unnamed_addr constant [9 x i8] c"noparent\00", align 1
@.str.108.729 = private unnamed_addr constant [8 x i8] c"noproxy\00", align 1
@.str.109.730 = private unnamed_addr constant [9 x i8] c"numtries\00", align 1
@.str.110.731 = private unnamed_addr constant [15 x i8] c"outputdocument\00", align 1
@.str.111.732 = private unnamed_addr constant [15 x i8] c"pagerequisites\00", align 1
@.str.112.733 = private unnamed_addr constant [11 x i8] c"passiveftp\00", align 1
@.str.113.734 = private unnamed_addr constant [7 x i8] c"passwd\00", align 1
@.str.114.735 = private unnamed_addr constant [9 x i8] c"password\00", align 1
@.str.115.736 = private unnamed_addr constant [9 x i8] c"postdata\00", align 1
@.str.116.737 = private unnamed_addr constant [9 x i8] c"postfile\00", align 1
@.str.117.738 = private unnamed_addr constant [13 x i8] c"preferfamily\00", align 1
@.str.118.739 = private unnamed_addr constant [20 x i8] c"preservepermissions\00", align 1
@.str.119.740 = private unnamed_addr constant [11 x i8] c"privatekey\00", align 1
@.str.120.741 = private unnamed_addr constant [15 x i8] c"privatekeytype\00", align 1
@.str.121.742 = private unnamed_addr constant [9 x i8] c"progress\00", align 1
@.str.122.743 = private unnamed_addr constant [20 x i8] c"protocoldirectories\00", align 1
@.str.123.744 = private unnamed_addr constant [12 x i8] c"proxypasswd\00", align 1
@.str.124.745 = private unnamed_addr constant [14 x i8] c"proxypassword\00", align 1
@.str.125.746 = private unnamed_addr constant [10 x i8] c"proxyuser\00", align 1
@.str.126.747 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.127.748 = private unnamed_addr constant [6 x i8] c"quota\00", align 1
@.str.128.749 = private unnamed_addr constant [11 x i8] c"randomfile\00", align 1
@.str.129.750 = private unnamed_addr constant [11 x i8] c"randomwait\00", align 1
@.str.130.751 = private unnamed_addr constant [12 x i8] c"readtimeout\00", align 1
@.str.131.752 = private unnamed_addr constant [9 x i8] c"reclevel\00", align 1
@.str.132.753 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@.str.133.754 = private unnamed_addr constant [8 x i8] c"referer\00", align 1
@.str.134.755 = private unnamed_addr constant [10 x i8] c"regextype\00", align 1
@.str.135.756 = private unnamed_addr constant [7 x i8] c"reject\00", align 1
@.str.136.757 = private unnamed_addr constant [12 x i8] c"rejectedlog\00", align 1
@.str.137.758 = private unnamed_addr constant [12 x i8] c"rejectregex\00", align 1
@.str.138.759 = private unnamed_addr constant [13 x i8] c"relativeonly\00", align 1
@.str.139.760 = private unnamed_addr constant [15 x i8] c"remoteencoding\00", align 1
@.str.140.761 = private unnamed_addr constant [14 x i8] c"removelisting\00", align 1
@.str.141.762 = private unnamed_addr constant [12 x i8] c"reportspeed\00", align 1
@.str.142.763 = private unnamed_addr constant [18 x i8] c"restrictfilenames\00", align 1
@.str.143.764 = private unnamed_addr constant [13 x i8] c"retrsymlinks\00", align 1
@.str.144.765 = private unnamed_addr constant [17 x i8] c"retryconnrefused\00", align 1
@.str.145.766 = private unnamed_addr constant [7 x i8] c"robots\00", align 1
@.str.146.767 = private unnamed_addr constant [12 x i8] c"savecookies\00", align 1
@.str.147.768 = private unnamed_addr constant [12 x i8] c"saveheaders\00", align 1
@.str.148.769 = private unnamed_addr constant [15 x i8] c"secureprotocol\00", align 1
@.str.149.770 = private unnamed_addr constant [15 x i8] c"serverresponse\00", align 1
@.str.150.771 = private unnamed_addr constant [18 x i8] c"showalldnsentries\00", align 1
@.str.151.772 = private unnamed_addr constant [13 x i8] c"showprogress\00", align 1
@.str.152.773 = private unnamed_addr constant [10 x i8] c"spanhosts\00", align 1
@.str.153.774 = private unnamed_addr constant [7 x i8] c"spider\00", align 1
@.str.154.775 = private unnamed_addr constant [9 x i8] c"startpos\00", align 1
@.str.155.776 = private unnamed_addr constant [15 x i8] c"strictcomments\00", align 1
@.str.156.777 = private unnamed_addr constant [8 x i8] c"timeout\00", align 1
@.str.157.778 = private unnamed_addr constant [13 x i8] c"timestamping\00", align 1
@.str.158.779 = private unnamed_addr constant [6 x i8] c"tries\00", align 1
@.str.159.780 = private unnamed_addr constant [17 x i8] c"trustservernames\00", align 1
@.str.160.781 = private unnamed_addr constant [7 x i8] c"unlink\00", align 1
@.str.161.782 = private unnamed_addr constant [9 x i8] c"useproxy\00", align 1
@.str.162.783 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.163.784 = private unnamed_addr constant [10 x i8] c"useragent\00", align 1
@.str.164.785 = private unnamed_addr constant [20 x i8] c"useservertimestamps\00", align 1
@.str.165.786 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.166.787 = private unnamed_addr constant [5 x i8] c"wait\00", align 1
@.str.167.788 = private unnamed_addr constant [10 x i8] c"waitretry\00", align 1
@.str.168.789 = private unnamed_addr constant [8 x i8] c"warccdx\00", align 1
@.str.169.790 = private unnamed_addr constant [13 x i8] c"warccdxdedup\00", align 1
@.str.170.791 = private unnamed_addr constant [16 x i8] c"warccompression\00", align 1
@.str.171.792 = private unnamed_addr constant [12 x i8] c"warcdigests\00", align 1
@.str.172.793 = private unnamed_addr constant [9 x i8] c"warcfile\00", align 1
@.str.173.794 = private unnamed_addr constant [11 x i8] c"warcheader\00", align 1
@.str.174.795 = private unnamed_addr constant [12 x i8] c"warckeeplog\00", align 1
@.str.175.796 = private unnamed_addr constant [12 x i8] c"warcmaxsize\00", align 1
@.str.176.797 = private unnamed_addr constant [12 x i8] c"warctempdir\00", align 1
@.str.211.798 = private unnamed_addr constant [33 x i8] c"%s: %s: Invalid WARC header %s.\0A\00", align 1
@.str.182.799 = private unnamed_addr constant [27 x i8] c"%s: %s: Invalid value %s.\0A\00", align 1
@cmd_spec_secure_protocol.choices = internal constant [7 x %struct.hsts_kh] [%struct.hsts_kh { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.204.800, i32 0, i32 0), i32 0 }, %struct.hsts_kh { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.205.801, i32 0, i32 0), i32 1 }, %struct.hsts_kh { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.206.802, i32 0, i32 0), i32 2 }, %struct.hsts_kh { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.207.803, i32 0, i32 0), i32 3 }, %struct.hsts_kh { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.208.804, i32 0, i32 0), i32 4 }, %struct.hsts_kh { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.209.805, i32 0, i32 0), i32 5 }, %struct.hsts_kh { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.210.806, i32 0, i32 0), i32 6 }], align 16
@.str.204.800 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.205.801 = private unnamed_addr constant [6 x i8] c"sslv2\00", align 1
@.str.206.802 = private unnamed_addr constant [6 x i8] c"sslv3\00", align 1
@.str.207.803 = private unnamed_addr constant [6 x i8] c"tlsv1\00", align 1
@.str.208.804 = private unnamed_addr constant [8 x i8] c"tlsv1_1\00", align 1
@.str.209.805 = private unnamed_addr constant [8 x i8] c"tlsv1_2\00", align 1
@.str.210.806 = private unnamed_addr constant [4 x i8] c"pfs\00", align 1
@.str.196.807 = private unnamed_addr constant [5 x i8] c"unix\00", align 1
@.str.197.808 = private unnamed_addr constant [4 x i8] c"vms\00", align 1
@.str.198.809 = private unnamed_addr constant [8 x i8] c"windows\00", align 1
@.str.199.810 = private unnamed_addr constant [10 x i8] c"lowercase\00", align 1
@.str.200.811 = private unnamed_addr constant [10 x i8] c"uppercase\00", align 1
@.str.201.812 = private unnamed_addr constant [10 x i8] c"nocontrol\00", align 1
@.str.202.813 = private unnamed_addr constant [6 x i8] c"ascii\00", align 1
@.str.203.814 = private unnamed_addr constant [103 x i8] c"%s: %s: Invalid restriction %s,\0A    use [unix|vms|windows],[lowercase|uppercase],[nocontrol],[ascii].\0A\00", align 1
@.str.195.815 = private unnamed_addr constant [5 x i8] c"bits\00", align 1
@cmd_spec_regex_type.choices = internal constant [2 x %struct.hsts_kh] [%struct.hsts_kh { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.193.816, i32 0, i32 0), i32 1 }, %struct.hsts_kh { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.194.817, i32 0, i32 0), i32 0 }], align 16
@.str.193.816 = private unnamed_addr constant [6 x i8] c"posix\00", align 1
@.str.194.817 = private unnamed_addr constant [5 x i8] c"pcre\00", align 1
@.str.186.818 = private unnamed_addr constant [31 x i8] c"%s: %s: Invalid byte value %s\0A\00", align 1
@.str.187.819 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.192.820 = private unnamed_addr constant [35 x i8] c"%s: %s: Invalid progress type %s.\0A\00", align 1
@cmd_spec_prefer_family.choices = internal constant [3 x %struct.hsts_kh] [%struct.hsts_kh { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.189.821, i32 0, i32 0), i32 0 }, %struct.hsts_kh { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.190.822, i32 0, i32 0), i32 1 }, %struct.hsts_kh { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.191.823, i32 0, i32 0), i32 2 }], align 16
@.str.189.821 = private unnamed_addr constant [5 x i8] c"IPv4\00", align 1
@.str.190.822 = private unnamed_addr constant [5 x i8] c"IPv6\00", align 1
@.str.191.823 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.188.824 = private unnamed_addr constant [28 x i8] c"%s: %s: Invalid header %s.\0A\00", align 1
@.str.185.825 = private unnamed_addr constant [31 x i8] c"%s: %s must only be used once\0A\00", align 1
@.str.184.826 = private unnamed_addr constant [32 x i8] c"%s: %s: Invalid time period %s\0A\00", align 1
@.str.183.827 = private unnamed_addr constant [49 x i8] c"%s: %s: Invalid %s; use `on', `off' or `quiet'.\0A\00", align 1
@cmd_cert_type.choices = internal constant [3 x %struct.hsts_kh] [%struct.hsts_kh { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.179.828, i32 0, i32 0), i32 0 }, %struct.hsts_kh { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.180.829, i32 0, i32 0), i32 1 }, %struct.hsts_kh { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.181.830, i32 0, i32 0), i32 1 }], align 16
@.str.179.828 = private unnamed_addr constant [4 x i8] c"pem\00", align 1
@.str.180.829 = private unnamed_addr constant [4 x i8] c"der\00", align 1
@.str.181.830 = private unnamed_addr constant [5 x i8] c"asn1\00", align 1
@.str.178.831 = private unnamed_addr constant [28 x i8] c"%s: %s: Invalid number %s.\0A\00", align 1
@.str.177.832 = private unnamed_addr constant [48 x i8] c"%s: %s: Invalid boolean %s; use `on' or `off'.\0A\00", align 1
@.str.212.833 = private unnamed_addr constant [23 x i8] c"Setting %s (%s) to %s\0A\00", align 1
@.str.10.834 = private unnamed_addr constant [14 x i8] c"SYSTEM_WGETRC\00", align 1
@.str.11.835 = private unnamed_addr constant [120 x i8] c"Parsing system wgetrc file (env SYSTEM_WGETRC) failed.  Please check\0A'%s',\0Aor specify a different file using --config.\0A\00", align 1
@.str.12.836 = private unnamed_addr constant [22 x i8] c"/usr/local/etc/wgetrc\00", align 1
@.str.13.837 = private unnamed_addr constant [100 x i8] c"Parsing system wgetrc file failed.  Please check\0A'%s',\0Aor specify a different file using --config.\0A\00", align 1
@.str.14.838 = private unnamed_addr constant [55 x i8] c"%s: Warning: Both system and user wgetrc point to %s.\0A\00", align 1
@.str.15.839 = private unnamed_addr constant [34 x i8] c"%s: Invalid --execute command %s\0A\00", align 1
@warclogfp = internal global %struct._IO_FILE* null, align 8, !track !46
@save_context_p = internal global i8 0, align 1
@flush_log_p = internal global i8 1, align 1
@needs_flushing = internal global i8 0, align 1
@trailing_line = internal global i8 0, align 1
@log_line_current = internal global i32 -1, align 4
@log_lines = internal global [24 x %struct.log_ln] zeroinitializer, align 16, !track !47
@inhibit_logging = internal global i8 0, align 1
@logfp = internal global %struct._IO_FILE* null, align 8, !track !48
@redirect_request = internal global i32 0, align 4
@.str.4.842 = private unnamed_addr constant [9 x i8] c"wget-log\00", align 1
@.str.5.843 = private unnamed_addr constant [41 x i8] c"\0A%s received, redirecting output to %s.\0A\00", align 1
@redirect_request_signal_name = internal global i8* null, align 8, !track !49
@.str.6.844 = private unnamed_addr constant [15 x i8] c"\0A%s received.\0A\00", align 1
@.str.7.845 = private unnamed_addr constant [28 x i8] c"%s: %s; disabling logging.\0A\00", align 1
@.str.850 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.1.851 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.2.852 = private unnamed_addr constant [12 x i8] c"%s: %s: %s\0A\00", align 1
@escnonprint_internal.ringpos = internal global i32 0, align 4
@ring = internal global [3 x %struct.hsts_kh] zeroinitializer, align 16, !track !50
@.str.3.855 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1
@numurls = dso_local global i32 0, align 4
@program_name = common dso_local global i8* null, align 8, !track !51
@exec_name = common dso_local global i8* null, align 8, !track !52
@program_argstring = common dso_local global i8* null, align 8, !track !53
@opt = common dso_local global %struct.options zeroinitializer, align 8, !track !54
@hsts_store = common dso_local global %struct.hsts_store* null, align 8, !track !55
@.str.866 = private unnamed_addr constant [27 x i8] c"Memory allocation problem\0A\00", align 1
@short_options = internal global [128 x i8] zeroinitializer, align 16, !track !56
@long_options = internal global [313 x %struct.option] zeroinitializer, align 16, !track !57
@option_data = internal global [156 x %struct.cmdline_option] [%struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63.927, i32 0, i32 0), i8 65, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63.927, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.64.928, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.65.929, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.66.930, i32 0, i32 0), i8 69, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.67.931, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.68.932, i32 0, i32 0), i8 97, i32 3, i8* null, i32 1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.69.933, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70.934, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.71.935, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.72.936, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.73.937, i32 0, i32 0), i8 98, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.73.937, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.74.938, i32 0, i32 0), i8 75, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.75.939, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.76.940, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.76.940, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77.941, i32 0, i32 0), i8 66, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77.941, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.78.942, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.79.943, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44.910, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43.909, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.46.912, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45.911, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.80.944, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81.945, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.82.946, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83.947, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84.948, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84.948, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.85.949, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.85.949, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.86.950, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.87.951, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.88.952, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.89.953, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90.954, i32 0, i32 0), i8 0, i32 4, i8* null, i32 2 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.868, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.91.955, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.92.956, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.93.957, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.94.958, i32 0, i32 0), i8 99, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.94.958, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.95.959, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.96.960, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.97.961, i32 0, i32 0), i8 107, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98.962, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.99.963, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.100.964, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.101.965, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102.966, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.103.967, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.103.967, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.104.968, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.105.969, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106.970, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.107.971, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108.972, i32 0, i32 0), i8 100, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108.972, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109.973, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110.974, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111.975, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.112.976, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.113.977, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11.877, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.114.978, i32 0, i32 0), i8 80, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.115.979, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116.980, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117.981, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.118.982, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.119.983, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120.984, i32 0, i32 0), i8 68, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120.984, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.121.985, i32 0, i32 0), i8 0, i32 5, i8* null, i32 0 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122.986, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.123.987, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.124.988, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.125.989, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.126.990, i32 0, i32 0), i8 88, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.127.991, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.128.992, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.129.993, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.130.994, i32 0, i32 0), i8 101, i32 6, i8* null, i32 1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.131.995, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.132.996, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.133.997, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.134.998, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.135.999, i32 0, i32 0), i8 120, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11.877, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.136.1000, i32 0, i32 0), i8 70, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.137.1001, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.138.1002, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.139.1003, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.140.1004, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.141.1005, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.142.1006, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.143.1007, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.144.1008, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.145.1009, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.146.1010, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.147.1011, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.148.1012, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.149.1013, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.150.1014, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.150.1014, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.151.1015, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.151.1015, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.152.1016, i32 0, i32 0), i8 104, i32 2, i8* bitcast (void ()* @print_help to i8*), i32 0 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.153.1017, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10.876, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.154.1018, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.154.1018, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.155.1019, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.155.1019, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.156.1020, i32 0, i32 0), i8 69, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.67.931, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157.1021, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157.1021, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.158.1022, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.159.1023, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.160.1024, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.161.1025, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.162.1026, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.161.1025, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.163.1027, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.164.1028, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.165.1029, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166.1030, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.167.1031, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.168.1032, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.169.1033, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.170.1034, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.171.1035, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.172.1036, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.173.1037, i32 0, i32 0), i8 73, i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.174.1038, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.175.1039, i32 0, i32 0), i8 52, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.176.1040, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.177.1041, i32 0, i32 0), i8 54, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.178.1042, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.179.1043, i32 0, i32 0), i8 105, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.180.1044, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.181.1045, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.181.1045, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.182.1046, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.183.1047, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.184.1048, i32 0, i32 0), i8 108, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.185.1049, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.186.1050, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.187.1051, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.188.1052, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.189.1053, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.190.1054, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.191.1055, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.192.1056, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.193.1057, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.194.1058, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.195.1059, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41.907, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41.907, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.196.1060, i32 0, i32 0), i8 109, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.196.1060, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197.1061, i32 0, i32 0), i8 110, i32 7, i8* null, i32 1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.198.1062, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12.878, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.867, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.199.1063, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.200.1064, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13.879, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.201.1065, i32 0, i32 0), i8 79, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.202.1066, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.203.1067, i32 0, i32 0), i8 111, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8.874, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.204.1068, i32 0, i32 0), i8 112, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.205.1069, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.206.1070, i32 0, i32 0), i8 0, i32 8, i8* null, i32 2 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.207.1071, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.208.1072, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.209.1073, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.209.1073, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.210.1074, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.211.1075, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.212.1076, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.213.1077, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.214.1078, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.215.1079, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.216.1080, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.217.1081, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.218, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.219, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.220, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.221, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.222, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.222, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.223, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.224, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.225, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.226, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.227, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.228, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.229, i32 0, i32 0), i8 89, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.228, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.230, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.231, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.232, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.231, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.233, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.234, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.235, i32 0, i32 0), i8 113, i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.235, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.236, i32 0, i32 0), i8 81, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.236, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.237, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.238, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.239, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.240, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.241, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.242, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.243, i32 0, i32 0), i8 114, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.243, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.244, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.244, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.245, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.246, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247, i32 0, i32 0), i8 82, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.250, i32 0, i32 0), i8 76, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.251, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.252, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.253, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.254, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15.881, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.255.1082, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.256, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.257, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.258, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.259, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.260, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.261, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.262, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.263, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.264, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.265, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.266, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.267, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.268, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i8 83, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.270, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.271, i32 0, i32 0), i8 72, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.272, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40.906, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40.906, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.273, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.274, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.275, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.276, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.277, i32 0, i32 0), i8 84, i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.277, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.278, i32 0, i32 0), i8 78, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.278, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.279, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.279, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.280, i32 0, i32 0), i8 116, i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.280, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.281, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.281, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.282, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.283, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.284, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.285, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.286, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.286, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0), i8 85, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.288, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.875, i32 0, i32 0), i8 118, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.875, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.875, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.875, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.289, i32 0, i32 0), i8 86, i32 2, i8* bitcast (void ()* @print_version to i8*), i32 0 }, %struct.cmdline_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.290, i32 0, i32 0), i8 119, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.290, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.291, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.291, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.292, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.293, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.294, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.295, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.296, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.297, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.298, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.299, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.301, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.302, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.303, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.304, i32 0, i32 0), i8 0, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.305, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.306, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.307, i32 0, i32 0), i32 -1 }, %struct.cmdline_option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.308, i32 0, i32 0), i8 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.309, i32 0, i32 0), i32 -1 }], align 16, !track !58
@.str.1.867 = private unnamed_addr constant [10 x i8] c"no-config\00", align 1
@.str.2.868 = private unnamed_addr constant [7 x i8] c"config\00", align 1
@optarg = external dso_local global i8*, align 8
@.str.3.869 = private unnamed_addr constant [28 x i8] c"Exiting due to error in %s\0A\00", align 1
@opterr = external dso_local global i32, align 4
@optind = external dso_local global i32, align 4
@.str.4.870 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5.871 = private unnamed_addr constant [35 x i8] c"Try `%s --help' for more options.\0A\00", align 1
@optmap = internal global [96 x i8] zeroinitializer, align 16, !track !59
@.str.6.872 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.7.873 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.8.874 = private unnamed_addr constant [8 x i8] c"logfile\00", align 1
@.str.9.875 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.10.876 = private unnamed_addr constant [11 x i8] c"addhostdir\00", align 1
@.str.11.877 = private unnamed_addr constant [10 x i8] c"dirstruct\00", align 1
@.str.12.878 = private unnamed_addr constant [10 x i8] c"noclobber\00", align 1
@.str.13.879 = private unnamed_addr constant [9 x i8] c"noparent\00", align 1
@.str.14.880 = private unnamed_addr constant [30 x i8] c"%s: illegal option -- `-n%c'\0A\00", align 1
@.str.15.881 = private unnamed_addr constant [14 x i8] c"removelisting\00", align 1
@.str.16.882 = private unnamed_addr constant [90 x i8] c"Both --no-clobber and --convert-links were specified, only --convert-links will be used.\0A\00", align 1
@.str.17.883 = private unnamed_addr constant [98 x i8] c"Both --no-clobber and --convert-file-only were specified, only --convert-file-only will be used.\0A\00", align 1
@.str.18.884 = private unnamed_addr constant [46 x i8] c"Can't be verbose and quiet at the same time.\0A\00", align 1
@.str.19.885 = private unnamed_addr constant [61 x i8] c"Can't timestamp and not clobber old files at the same time.\0A\00", align 1
@.str.20.886 = private unnamed_addr constant [52 x i8] c"Cannot specify both --inet4-only and --inet6-only.\0A\00", align 1
@.str.21.887 = private unnamed_addr constant [144 x i8] c"Cannot specify both -k or --convert-file-only and -O if multiple URLs are given, or in combination\0Awith -p or -r. See the manual for details.\0A\0A\00", align 1
@.str.23.888 = private unnamed_addr constant [125 x i8] c"WARNING: combining -O with -r or -p will mean that all downloaded content\0Awill be placed in the single file you specified.\0A\0A\00", align 1
@.str.22.889 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.24.890 = private unnamed_addr constant [89 x i8] c"WARNING: timestamping does nothing in combination with -O. See the manual\0Afor details.\0A\0A\00", align 1
@.str.25.891 = private unnamed_addr constant [42 x i8] c"File `%s' already there; not retrieving.\0A\00", align 1
@.str.26.892 = private unnamed_addr constant [77 x i8] c"WARC output does not work with --no-clobber, --no-clobber will be disabled.\0A\00", align 1
@.str.27.893 = private unnamed_addr constant [77 x i8] c"WARC output does not work with timestamping, timestamping will be disabled.\0A\00", align 1
@.str.28.894 = private unnamed_addr constant [42 x i8] c"WARC output does not work with --spider.\0A\00", align 1
@.str.29.895 = private unnamed_addr constant [82 x i8] c"WARC output does not work with --continue or --start-pos, they will be disabled.\0A\00", align 1
@.str.30.896 = private unnamed_addr constant [75 x i8] c"Digests are disabled; WARC deduplication will not find duplicate records.\0A\00", align 1
@.str.31.897 = private unnamed_addr constant [4 x i8] c"dot\00", align 1
@.str.32.898 = private unnamed_addr constant [52 x i8] c"Cannot specify both --ask-password and --password.\0A\00", align 1
@.str.33.899 = private unnamed_addr constant [93 x i8] c"Specifying both --start-pos and --continue is not recommended; --continue will be disabled.\0A\00", align 1
@.str.34.900 = private unnamed_addr constant [17 x i8] c"%s: missing URL\0A\00", align 1
@.str.35.901 = private unnamed_addr constant [54 x i8] c"You cannot specify both --post-data and --post-file.\0A\00", align 1
@.str.36.902 = private unnamed_addr constant [129 x i8] c"You cannot use --post-data or --post-file along with --method. --method expects data through --body-data and --body-file options\00", align 1
@.str.37.903 = private unnamed_addr constant [95 x i8] c"You must specify a method through --method=HTTPMethod to use with --body-data or --body-file.\0A\00", align 1
@.str.38.904 = private unnamed_addr constant [54 x i8] c"You cannot specify both --body-data and --body-file.\0A\00", align 1
@.str.39.905 = private unnamed_addr constant [5 x i8] c"HEAD\00", align 1
@.str.40.906 = private unnamed_addr constant [7 x i8] c"spider\00", align 1
@.str.41.907 = private unnamed_addr constant [7 x i8] c"method\00", align 1
@.str.42.908 = private unnamed_addr constant [5 x i8] c"POST\00", align 1
@.str.43.909 = private unnamed_addr constant [9 x i8] c"bodydata\00", align 1
@.str.44.910 = private unnamed_addr constant [10 x i8] c"body-data\00", align 1
@.str.45.911 = private unnamed_addr constant [9 x i8] c"bodyfile\00", align 1
@.str.46.912 = private unnamed_addr constant [10 x i8] c"body-file\00", align 1
@.str.47.913 = private unnamed_addr constant [41 x i8] c"DEBUG output created by Wget %s on %s.\0A\0A\00", align 1
@.str.48.914 = private unnamed_addr constant [10 x i8] c"linux-gnu\00", align 1
@.str.49.915 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.50.916 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.51.917 = private unnamed_addr constant [77 x i8] c"-k or -r can be used together with -O only if outputting to a regular file.\0A\00", align 1
@.str.52.918 = private unnamed_addr constant [99 x i8] c"--convert-links or --convert-file-only can be used together only if outputting to a regular file.\0A\00", align 1
@.str.53.919 = private unnamed_addr constant [9 x i8] c"%s: %s.\0A\00", align 1
@.str.54.920 = private unnamed_addr constant [48 x i8] c"Removing file due to --delete-after in main():\0A\00", align 1
@.str.55.921 = private unnamed_addr constant [14 x i8] c"Removing %s.\0A\00", align 1
@.str.56.922 = private unnamed_addr constant [12 x i8] c"unlink: %s\0A\00", align 1
@.str.57.923 = private unnamed_addr constant [22 x i8] c"No URLs found in %s.\0A\00", align 1
@.str.58.924 = private unnamed_addr constant [79 x i8] c"FINISHED --%s--\0ATotal wall clock time: %s\0ADownloaded: %d files, %s in %s (%s)\0A\00", align 1
@.str.59.925 = private unnamed_addr constant [32 x i8] c"Download quota of %s EXCEEDED!\0A\00", align 1
@.str.501 = private unnamed_addr constant [27 x i8] c"Saving HSTS entries to %s\0A\00", align 1
@.str.496 = private unnamed_addr constant [14 x i8] c"%s/.wget-hsts\00", align 1
@secs_to_human_time.buf = internal global [32 x i8] zeroinitializer, align 16, !track !60
@.str.497 = private unnamed_addr constant [16 x i8] c"%dd %dh %dm %ds\00", align 1
@.str.498 = private unnamed_addr constant [12 x i8] c"%dh %dm %ds\00", align 1
@.str.499 = private unnamed_addr constant [8 x i8] c"%dm %ds\00", align 1
@.str.500 = private unnamed_addr constant [4 x i8] c"%ss\00", align 1
@.str.493 = private unnamed_addr constant [30 x i8] c"Reading HSTS entries from %s\0A\00", align 1
@.str.494 = private unnamed_addr constant [66 x i8] c"ERROR: could not open HSTS store at '%s'. HSTS will be disabled.\0A\00", align 1
@.str.495 = private unnamed_addr constant [58 x i8] c"ERROR: could not open HSTS store. HSTS will be disabled.\0A\00", align 1
@.str.490 = private unnamed_addr constant [6 x i8] c"WTF?!\00", align 1
@.str.491 = private unnamed_addr constant [7 x i8] c"SIGHUP\00", align 1
@.str.492 = private unnamed_addr constant [8 x i8] c"SIGUSR1\00", align 1
@.str.488 = private unnamed_addr constant [23 x i8] c"Password for user %s: \00", align 1
@.str.489 = private unnamed_addr constant [11 x i8] c"Password: \00", align 1
@.str.60.926 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.487 = private unnamed_addr constant [32 x i8] c"Usage: %s [OPTION]... [URL]...\0A\00", align 1
@.str.63.927 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.64.928 = private unnamed_addr constant [13 x i8] c"accept-regex\00", align 1
@.str.65.929 = private unnamed_addr constant [12 x i8] c"acceptregex\00", align 1
@.str.66.930 = private unnamed_addr constant [17 x i8] c"adjust-extension\00", align 1
@.str.67.931 = private unnamed_addr constant [16 x i8] c"adjustextension\00", align 1
@.str.68.932 = private unnamed_addr constant [14 x i8] c"append-output\00", align 1
@.str.69.933 = private unnamed_addr constant [13 x i8] c"ask-password\00", align 1
@.str.70.934 = private unnamed_addr constant [12 x i8] c"askpassword\00", align 1
@.str.71.935 = private unnamed_addr constant [18 x i8] c"auth-no-challenge\00", align 1
@.str.72.936 = private unnamed_addr constant [16 x i8] c"authnochallenge\00", align 1
@.str.73.937 = private unnamed_addr constant [11 x i8] c"background\00", align 1
@.str.74.938 = private unnamed_addr constant [17 x i8] c"backup-converted\00", align 1
@.str.75.939 = private unnamed_addr constant [16 x i8] c"backupconverted\00", align 1
@.str.76.940 = private unnamed_addr constant [8 x i8] c"backups\00", align 1
@.str.77.941 = private unnamed_addr constant [5 x i8] c"base\00", align 1
@.str.78.942 = private unnamed_addr constant [13 x i8] c"bind-address\00", align 1
@.str.79.943 = private unnamed_addr constant [12 x i8] c"bindaddress\00", align 1
@.str.80.944 = private unnamed_addr constant [15 x i8] c"ca-certificate\00", align 1
@.str.81.945 = private unnamed_addr constant [14 x i8] c"cacertificate\00", align 1
@.str.82.946 = private unnamed_addr constant [13 x i8] c"ca-directory\00", align 1
@.str.83.947 = private unnamed_addr constant [12 x i8] c"cadirectory\00", align 1
@.str.84.948 = private unnamed_addr constant [6 x i8] c"cache\00", align 1
@.str.85.949 = private unnamed_addr constant [12 x i8] c"certificate\00", align 1
@.str.86.950 = private unnamed_addr constant [17 x i8] c"certificate-type\00", align 1
@.str.87.951 = private unnamed_addr constant [16 x i8] c"certificatetype\00", align 1
@.str.88.952 = private unnamed_addr constant [18 x i8] c"check-certificate\00", align 1
@.str.89.953 = private unnamed_addr constant [17 x i8] c"checkcertificate\00", align 1
@.str.90.954 = private unnamed_addr constant [8 x i8] c"clobber\00", align 1
@.str.91.955 = private unnamed_addr constant [13 x i8] c"chooseconfig\00", align 1
@.str.92.956 = private unnamed_addr constant [16 x i8] c"connect-timeout\00", align 1
@.str.93.957 = private unnamed_addr constant [15 x i8] c"connecttimeout\00", align 1
@.str.94.958 = private unnamed_addr constant [9 x i8] c"continue\00", align 1
@.str.95.959 = private unnamed_addr constant [18 x i8] c"convert-file-only\00", align 1
@.str.96.960 = private unnamed_addr constant [16 x i8] c"convertfileonly\00", align 1
@.str.97.961 = private unnamed_addr constant [14 x i8] c"convert-links\00", align 1
@.str.98.962 = private unnamed_addr constant [13 x i8] c"convertlinks\00", align 1
@.str.99.963 = private unnamed_addr constant [20 x i8] c"content-disposition\00", align 1
@.str.100.964 = private unnamed_addr constant [19 x i8] c"contentdisposition\00", align 1
@.str.101.965 = private unnamed_addr constant [17 x i8] c"content-on-error\00", align 1
@.str.102.966 = private unnamed_addr constant [15 x i8] c"contentonerror\00", align 1
@.str.103.967 = private unnamed_addr constant [8 x i8] c"cookies\00", align 1
@.str.104.968 = private unnamed_addr constant [9 x i8] c"crl-file\00", align 1
@.str.105.969 = private unnamed_addr constant [8 x i8] c"crlfile\00", align 1
@.str.106.970 = private unnamed_addr constant [9 x i8] c"cut-dirs\00", align 1
@.str.107.971 = private unnamed_addr constant [8 x i8] c"cutdirs\00", align 1
@.str.108.972 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.109.973 = private unnamed_addr constant [13 x i8] c"default-page\00", align 1
@.str.110.974 = private unnamed_addr constant [12 x i8] c"defaultpage\00", align 1
@.str.111.975 = private unnamed_addr constant [13 x i8] c"delete-after\00", align 1
@.str.112.976 = private unnamed_addr constant [12 x i8] c"deleteafter\00", align 1
@.str.113.977 = private unnamed_addr constant [12 x i8] c"directories\00", align 1
@.str.114.978 = private unnamed_addr constant [17 x i8] c"directory-prefix\00", align 1
@.str.115.979 = private unnamed_addr constant [10 x i8] c"dirprefix\00", align 1
@.str.116.980 = private unnamed_addr constant [10 x i8] c"dns-cache\00", align 1
@.str.117.981 = private unnamed_addr constant [9 x i8] c"dnscache\00", align 1
@.str.118.982 = private unnamed_addr constant [12 x i8] c"dns-timeout\00", align 1
@.str.119.983 = private unnamed_addr constant [11 x i8] c"dnstimeout\00", align 1
@.str.120.984 = private unnamed_addr constant [8 x i8] c"domains\00", align 1
@.str.121.985 = private unnamed_addr constant [20 x i8] c"dont-remove-listing\00", align 1
@.str.122.986 = private unnamed_addr constant [10 x i8] c"dot-style\00", align 1
@.str.123.987 = private unnamed_addr constant [9 x i8] c"dotstyle\00", align 1
@.str.124.988 = private unnamed_addr constant [9 x i8] c"egd-file\00", align 1
@.str.125.989 = private unnamed_addr constant [8 x i8] c"egdfile\00", align 1
@.str.126.990 = private unnamed_addr constant [20 x i8] c"exclude-directories\00", align 1
@.str.127.991 = private unnamed_addr constant [19 x i8] c"excludedirectories\00", align 1
@.str.128.992 = private unnamed_addr constant [16 x i8] c"exclude-domains\00", align 1
@.str.129.993 = private unnamed_addr constant [15 x i8] c"excludedomains\00", align 1
@.str.130.994 = private unnamed_addr constant [8 x i8] c"execute\00", align 1
@.str.131.995 = private unnamed_addr constant [11 x i8] c"follow-ftp\00", align 1
@.str.132.996 = private unnamed_addr constant [10 x i8] c"followftp\00", align 1
@.str.133.997 = private unnamed_addr constant [12 x i8] c"follow-tags\00", align 1
@.str.134.998 = private unnamed_addr constant [11 x i8] c"followtags\00", align 1
@.str.135.999 = private unnamed_addr constant [18 x i8] c"force-directories\00", align 1
@.str.136.1000 = private unnamed_addr constant [11 x i8] c"force-html\00", align 1
@.str.137.1001 = private unnamed_addr constant [10 x i8] c"forcehtml\00", align 1
@.str.138.1002 = private unnamed_addr constant [13 x i8] c"ftp-password\00", align 1
@.str.139.1003 = private unnamed_addr constant [12 x i8] c"ftppassword\00", align 1
@.str.140.1004 = private unnamed_addr constant [9 x i8] c"ftp-user\00", align 1
@.str.141.1005 = private unnamed_addr constant [8 x i8] c"ftpuser\00", align 1
@.str.142.1006 = private unnamed_addr constant [27 x i8] c"ftps-clear-data-connection\00", align 1
@.str.143.1007 = private unnamed_addr constant [24 x i8] c"ftpscleardataconnection\00", align 1
@.str.144.1008 = private unnamed_addr constant [21 x i8] c"ftps-fallback-to-ftp\00", align 1
@.str.145.1009 = private unnamed_addr constant [18 x i8] c"ftpsfallbacktoftp\00", align 1
@.str.146.1010 = private unnamed_addr constant [14 x i8] c"ftps-implicit\00", align 1
@.str.147.1011 = private unnamed_addr constant [13 x i8] c"ftpsimplicit\00", align 1
@.str.148.1012 = private unnamed_addr constant [16 x i8] c"ftps-resume-ssl\00", align 1
@.str.149.1013 = private unnamed_addr constant [14 x i8] c"ftpsresumessl\00", align 1
@.str.150.1014 = private unnamed_addr constant [5 x i8] c"glob\00", align 1
@.str.151.1015 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@.str.152.1016 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.153.1017 = private unnamed_addr constant [17 x i8] c"host-directories\00", align 1
@.str.154.1018 = private unnamed_addr constant [5 x i8] c"hsts\00", align 1
@.str.155.1019 = private unnamed_addr constant [10 x i8] c"hsts-file\00", align 1
@.str.156.1020 = private unnamed_addr constant [15 x i8] c"html-extension\00", align 1
@.str.157.1021 = private unnamed_addr constant [8 x i8] c"htmlify\00", align 1
@.str.158.1022 = private unnamed_addr constant [16 x i8] c"http-keep-alive\00", align 1
@.str.159.1023 = private unnamed_addr constant [14 x i8] c"httpkeepalive\00", align 1
@.str.160.1024 = private unnamed_addr constant [12 x i8] c"http-passwd\00", align 1
@.str.161.1025 = private unnamed_addr constant [13 x i8] c"httppassword\00", align 1
@.str.162.1026 = private unnamed_addr constant [14 x i8] c"http-password\00", align 1
@.str.163.1027 = private unnamed_addr constant [10 x i8] c"http-user\00", align 1
@.str.164.1028 = private unnamed_addr constant [9 x i8] c"httpuser\00", align 1
@.str.165.1029 = private unnamed_addr constant [11 x i8] c"https-only\00", align 1
@.str.166.1030 = private unnamed_addr constant [10 x i8] c"httpsonly\00", align 1
@.str.167.1031 = private unnamed_addr constant [12 x i8] c"ignore-case\00", align 1
@.str.168.1032 = private unnamed_addr constant [11 x i8] c"ignorecase\00", align 1
@.str.169.1033 = private unnamed_addr constant [14 x i8] c"ignore-length\00", align 1
@.str.170.1034 = private unnamed_addr constant [13 x i8] c"ignorelength\00", align 1
@.str.171.1035 = private unnamed_addr constant [12 x i8] c"ignore-tags\00", align 1
@.str.172.1036 = private unnamed_addr constant [11 x i8] c"ignoretags\00", align 1
@.str.173.1037 = private unnamed_addr constant [20 x i8] c"include-directories\00", align 1
@.str.174.1038 = private unnamed_addr constant [19 x i8] c"includedirectories\00", align 1
@.str.175.1039 = private unnamed_addr constant [11 x i8] c"inet4-only\00", align 1
@.str.176.1040 = private unnamed_addr constant [10 x i8] c"inet4only\00", align 1
@.str.177.1041 = private unnamed_addr constant [11 x i8] c"inet6-only\00", align 1
@.str.178.1042 = private unnamed_addr constant [10 x i8] c"inet6only\00", align 1
@.str.179.1043 = private unnamed_addr constant [11 x i8] c"input-file\00", align 1
@.str.180.1044 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.181.1045 = private unnamed_addr constant [4 x i8] c"iri\00", align 1
@.str.182.1046 = private unnamed_addr constant [21 x i8] c"keep-session-cookies\00", align 1
@.str.183.1047 = private unnamed_addr constant [19 x i8] c"keepsessioncookies\00", align 1
@.str.184.1048 = private unnamed_addr constant [6 x i8] c"level\00", align 1
@.str.185.1049 = private unnamed_addr constant [9 x i8] c"reclevel\00", align 1
@.str.186.1050 = private unnamed_addr constant [11 x i8] c"limit-rate\00", align 1
@.str.187.1051 = private unnamed_addr constant [10 x i8] c"limitrate\00", align 1
@.str.188.1052 = private unnamed_addr constant [13 x i8] c"load-cookies\00", align 1
@.str.189.1053 = private unnamed_addr constant [12 x i8] c"loadcookies\00", align 1
@.str.190.1054 = private unnamed_addr constant [15 x i8] c"local-encoding\00", align 1
@.str.191.1055 = private unnamed_addr constant [14 x i8] c"localencoding\00", align 1
@.str.192.1056 = private unnamed_addr constant [13 x i8] c"rejected-log\00", align 1
@.str.193.1057 = private unnamed_addr constant [12 x i8] c"rejectedlog\00", align 1
@.str.194.1058 = private unnamed_addr constant [13 x i8] c"max-redirect\00", align 1
@.str.195.1059 = private unnamed_addr constant [12 x i8] c"maxredirect\00", align 1
@.str.196.1060 = private unnamed_addr constant [7 x i8] c"mirror\00", align 1
@.str.197.1061 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.198.1062 = private unnamed_addr constant [11 x i8] c"no-clobber\00", align 1
@.str.199.1063 = private unnamed_addr constant [9 x i8] c"noconfig\00", align 1
@.str.200.1064 = private unnamed_addr constant [10 x i8] c"no-parent\00", align 1
@.str.201.1065 = private unnamed_addr constant [16 x i8] c"output-document\00", align 1
@.str.202.1066 = private unnamed_addr constant [15 x i8] c"outputdocument\00", align 1
@.str.203.1067 = private unnamed_addr constant [12 x i8] c"output-file\00", align 1
@.str.204.1068 = private unnamed_addr constant [16 x i8] c"page-requisites\00", align 1
@.str.205.1069 = private unnamed_addr constant [15 x i8] c"pagerequisites\00", align 1
@.str.206.1070 = private unnamed_addr constant [7 x i8] c"parent\00", align 1
@.str.207.1071 = private unnamed_addr constant [12 x i8] c"passive-ftp\00", align 1
@.str.208.1072 = private unnamed_addr constant [11 x i8] c"passiveftp\00", align 1
@.str.209.1073 = private unnamed_addr constant [9 x i8] c"password\00", align 1
@.str.210.1074 = private unnamed_addr constant [10 x i8] c"post-data\00", align 1
@.str.211.1075 = private unnamed_addr constant [9 x i8] c"postdata\00", align 1
@.str.212.1076 = private unnamed_addr constant [10 x i8] c"post-file\00", align 1
@.str.213.1077 = private unnamed_addr constant [9 x i8] c"postfile\00", align 1
@.str.214.1078 = private unnamed_addr constant [14 x i8] c"prefer-family\00", align 1
@.str.215.1079 = private unnamed_addr constant [13 x i8] c"preferfamily\00", align 1
@.str.216.1080 = private unnamed_addr constant [21 x i8] c"preserve-permissions\00", align 1
@.str.217.1081 = private unnamed_addr constant [20 x i8] c"preservepermissions\00", align 1
@.str.218 = private unnamed_addr constant [12 x i8] c"private-key\00", align 1
@.str.219 = private unnamed_addr constant [11 x i8] c"privatekey\00", align 1
@.str.220 = private unnamed_addr constant [17 x i8] c"private-key-type\00", align 1
@.str.221 = private unnamed_addr constant [15 x i8] c"privatekeytype\00", align 1
@.str.222 = private unnamed_addr constant [9 x i8] c"progress\00", align 1
@.str.223 = private unnamed_addr constant [14 x i8] c"show-progress\00", align 1
@.str.224 = private unnamed_addr constant [13 x i8] c"showprogress\00", align 1
@.str.225 = private unnamed_addr constant [21 x i8] c"protocol-directories\00", align 1
@.str.226 = private unnamed_addr constant [20 x i8] c"protocoldirectories\00", align 1
@.str.227 = private unnamed_addr constant [6 x i8] c"proxy\00", align 1
@.str.228 = private unnamed_addr constant [9 x i8] c"useproxy\00", align 1
@.str.229 = private unnamed_addr constant [14 x i8] c"proxy__compat\00", align 1
@.str.230 = private unnamed_addr constant [13 x i8] c"proxy-passwd\00", align 1
@.str.231 = private unnamed_addr constant [14 x i8] c"proxypassword\00", align 1
@.str.232 = private unnamed_addr constant [15 x i8] c"proxy-password\00", align 1
@.str.233 = private unnamed_addr constant [11 x i8] c"proxy-user\00", align 1
@.str.234 = private unnamed_addr constant [10 x i8] c"proxyuser\00", align 1
@.str.235 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.236 = private unnamed_addr constant [6 x i8] c"quota\00", align 1
@.str.237 = private unnamed_addr constant [12 x i8] c"random-file\00", align 1
@.str.238 = private unnamed_addr constant [11 x i8] c"randomfile\00", align 1
@.str.239 = private unnamed_addr constant [12 x i8] c"random-wait\00", align 1
@.str.240 = private unnamed_addr constant [11 x i8] c"randomwait\00", align 1
@.str.241 = private unnamed_addr constant [13 x i8] c"read-timeout\00", align 1
@.str.242 = private unnamed_addr constant [12 x i8] c"readtimeout\00", align 1
@.str.243 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@.str.244 = private unnamed_addr constant [8 x i8] c"referer\00", align 1
@.str.245 = private unnamed_addr constant [11 x i8] c"regex-type\00", align 1
@.str.246 = private unnamed_addr constant [10 x i8] c"regextype\00", align 1
@.str.247 = private unnamed_addr constant [7 x i8] c"reject\00", align 1
@.str.248 = private unnamed_addr constant [13 x i8] c"reject-regex\00", align 1
@.str.249 = private unnamed_addr constant [12 x i8] c"rejectregex\00", align 1
@.str.250 = private unnamed_addr constant [9 x i8] c"relative\00", align 1
@.str.251 = private unnamed_addr constant [13 x i8] c"relativeonly\00", align 1
@.str.252 = private unnamed_addr constant [16 x i8] c"remote-encoding\00", align 1
@.str.253 = private unnamed_addr constant [15 x i8] c"remoteencoding\00", align 1
@.str.254 = private unnamed_addr constant [15 x i8] c"remove-listing\00", align 1
@.str.255.1082 = private unnamed_addr constant [13 x i8] c"report-speed\00", align 1
@.str.256 = private unnamed_addr constant [12 x i8] c"reportspeed\00", align 1
@.str.257 = private unnamed_addr constant [20 x i8] c"restrict-file-names\00", align 1
@.str.258 = private unnamed_addr constant [18 x i8] c"restrictfilenames\00", align 1
@.str.259 = private unnamed_addr constant [14 x i8] c"retr-symlinks\00", align 1
@.str.260 = private unnamed_addr constant [13 x i8] c"retrsymlinks\00", align 1
@.str.261 = private unnamed_addr constant [18 x i8] c"retry-connrefused\00", align 1
@.str.262 = private unnamed_addr constant [17 x i8] c"retryconnrefused\00", align 1
@.str.263 = private unnamed_addr constant [13 x i8] c"save-cookies\00", align 1
@.str.264 = private unnamed_addr constant [12 x i8] c"savecookies\00", align 1
@.str.265 = private unnamed_addr constant [13 x i8] c"save-headers\00", align 1
@.str.266 = private unnamed_addr constant [12 x i8] c"saveheaders\00", align 1
@.str.267 = private unnamed_addr constant [16 x i8] c"secure-protocol\00", align 1
@.str.268 = private unnamed_addr constant [15 x i8] c"secureprotocol\00", align 1
@.str.269 = private unnamed_addr constant [16 x i8] c"server-response\00", align 1
@.str.270 = private unnamed_addr constant [15 x i8] c"serverresponse\00", align 1
@.str.271 = private unnamed_addr constant [11 x i8] c"span-hosts\00", align 1
@.str.272 = private unnamed_addr constant [10 x i8] c"spanhosts\00", align 1
@.str.273 = private unnamed_addr constant [10 x i8] c"start-pos\00", align 1
@.str.274 = private unnamed_addr constant [9 x i8] c"startpos\00", align 1
@.str.275 = private unnamed_addr constant [16 x i8] c"strict-comments\00", align 1
@.str.276 = private unnamed_addr constant [15 x i8] c"strictcomments\00", align 1
@.str.277 = private unnamed_addr constant [8 x i8] c"timeout\00", align 1
@.str.278 = private unnamed_addr constant [13 x i8] c"timestamping\00", align 1
@.str.279 = private unnamed_addr constant [18 x i8] c"if-modified-since\00", align 1
@.str.280 = private unnamed_addr constant [6 x i8] c"tries\00", align 1
@.str.281 = private unnamed_addr constant [7 x i8] c"unlink\00", align 1
@.str.282 = private unnamed_addr constant [19 x i8] c"trust-server-names\00", align 1
@.str.283 = private unnamed_addr constant [17 x i8] c"trustservernames\00", align 1
@.str.284 = private unnamed_addr constant [22 x i8] c"use-server-timestamps\00", align 1
@.str.285 = private unnamed_addr constant [20 x i8] c"useservertimestamps\00", align 1
@.str.286 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.287 = private unnamed_addr constant [11 x i8] c"user-agent\00", align 1
@.str.288 = private unnamed_addr constant [10 x i8] c"useragent\00", align 1
@.str.289 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.290 = private unnamed_addr constant [5 x i8] c"wait\00", align 1
@.str.291 = private unnamed_addr constant [10 x i8] c"waitretry\00", align 1
@.str.292 = private unnamed_addr constant [9 x i8] c"warc-cdx\00", align 1
@.str.293 = private unnamed_addr constant [8 x i8] c"warccdx\00", align 1
@.str.294 = private unnamed_addr constant [17 x i8] c"warc-compression\00", align 1
@.str.295 = private unnamed_addr constant [16 x i8] c"warccompression\00", align 1
@.str.296 = private unnamed_addr constant [11 x i8] c"warc-dedup\00", align 1
@.str.297 = private unnamed_addr constant [13 x i8] c"warccdxdedup\00", align 1
@.str.298 = private unnamed_addr constant [13 x i8] c"warc-digests\00", align 1
@.str.299 = private unnamed_addr constant [12 x i8] c"warcdigests\00", align 1
@.str.300 = private unnamed_addr constant [10 x i8] c"warc-file\00", align 1
@.str.301 = private unnamed_addr constant [9 x i8] c"warcfile\00", align 1
@.str.302 = private unnamed_addr constant [12 x i8] c"warc-header\00", align 1
@.str.303 = private unnamed_addr constant [11 x i8] c"warcheader\00", align 1
@.str.304 = private unnamed_addr constant [14 x i8] c"warc-keep-log\00", align 1
@.str.305 = private unnamed_addr constant [12 x i8] c"warckeeplog\00", align 1
@.str.306 = private unnamed_addr constant [14 x i8] c"warc-max-size\00", align 1
@.str.307 = private unnamed_addr constant [12 x i8] c"warcmaxsize\00", align 1
@.str.308 = private unnamed_addr constant [13 x i8] c"warc-tempdir\00", align 1
@.str.309 = private unnamed_addr constant [12 x i8] c"warctempdir\00", align 1
@.str.469 = private unnamed_addr constant [9 x i8] c"Wgetrc: \00", align 1
@.str.470 = private unnamed_addr constant [9 x i8] c"Locale: \00", align 1
@.str.471 = private unnamed_addr constant [10 x i8] c"Compile: \00", align 1
@.str.472 = private unnamed_addr constant [7 x i8] c"Link: \00", align 1
@.str.473 = private unnamed_addr constant [27 x i8] c"GNU Wget %s built on %s.\0A\0A\00", align 1
@.str.474 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.475 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.476 = private unnamed_addr constant [14 x i8] c"    %s (env)\0A\00", align 1
@.str.477 = private unnamed_addr constant [15 x i8] c"    %s (user)\0A\00", align 1
@.str.478 = private unnamed_addr constant [17 x i8] c"    %s (system)\0A\00", align 1
@.str.479 = private unnamed_addr constant [22 x i8] c"/usr/local/etc/wgetrc\00", align 1
@.str.62.1083 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.480 = private unnamed_addr constant [49 x i8] c"Copyright (C) %s Free Software Foundation, Inc.\0A\00", align 1
@.str.481 = private unnamed_addr constant [5 x i8] c"2015\00", align 1
@.str.482 = private unnamed_addr constant [205 x i8] c"License GPLv3+: GNU GPL version 3 or later\0A<http://www.gnu.org/licenses/gpl.html>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.483 = private unnamed_addr constant [60 x i8] c"\0AOriginally written by Hrvoje Niksic <hniksic@xemacs.org>.\0A\00", align 1
@.str.484.1084 = private unnamed_addr constant [62 x i8] c"Please send bug reports and questions to <bug-wget@gnu.org>.\0A\00", align 1
@.str.485 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.486 = private unnamed_addr constant [5 x i8] c"\0A%*c\00", align 1
@.str.468 = private unnamed_addr constant [51 x i8] c"GNU Wget %s, a non-interactive network retriever.\0A\00", align 1
@print_help.help = internal global [170 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.310, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.311, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.312, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.313, i32 0, i32 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.314, i32 0, i32 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.315, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.316, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.317, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.318, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.319, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.320, i32 0, i32 0), i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.321, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.322, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.323, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.324, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.325, i32 0, i32 0), i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.326, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.327, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.328, i32 0, i32 0), i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.329, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.330, i32 0, i32 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.331, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.332, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.333, i32 0, i32 0), i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.334, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.335, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.336, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.337, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.338, i32 0, i32 0), i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.339, i32 0, i32 0), i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.340, i32 0, i32 0), i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.341, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.342, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.343, i32 0, i32 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.344, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.345, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.346, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.347, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.348, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.349, i32 0, i32 0), i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.350, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.351, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.352, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.353, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.354, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.355, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.356, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.357, i32 0, i32 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.358, i32 0, i32 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.359, i32 0, i32 0), i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.360, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.361, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.362, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.363, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.364, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.365, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.366, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.367, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.368, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.369, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.370, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.371, i32 0, i32 0), i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.372, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.373, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.374, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.375, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.376, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.377, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.378, i32 0, i32 0), i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.379, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.380, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.381, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.382, i32 0, i32 0), i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.383, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.384.1085, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.385, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.386, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.387, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.388, i32 0, i32 0), i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.389, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.390, i32 0, i32 0), i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.391, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.392, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.393, i32 0, i32 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.394, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.395, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.396, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.397, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.398, i32 0, i32 0), i8* getelementptr inbounds ([156 x i8], [156 x i8]* @.str.399, i32 0, i32 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.400, i32 0, i32 0), i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.401, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.402, i32 0, i32 0), i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.403, i32 0, i32 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.404, i32 0, i32 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.405, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.406, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.407, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.408, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.409, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.410.1086, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.411, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.412, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.413, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.414, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.415, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.416, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.417, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.418, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.419, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.420.1087, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.421, i32 0, i32 0), i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.422, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.423, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.424, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.425, i32 0, i32 0), i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.426, i32 0, i32 0), i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.427, i32 0, i32 0), i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.428, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.429, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.430, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.431, i32 0, i32 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.432, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.433, i32 0, i32 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.434, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.435, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.436, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.437, i32 0, i32 0), i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.438, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.439, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.440, i32 0, i32 0), i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.441, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.442, i32 0, i32 0), i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.443, i32 0, i32 0), i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.444, i32 0, i32 0), i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.445, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.446, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.447, i32 0, i32 0), i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.448, i32 0, i32 0), i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.449, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.450, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.451, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.452, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.453, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.454, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.455, i32 0, i32 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.456, i32 0, i32 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.457, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.458, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.459, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.460, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.461, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.462, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.463, i32 0, i32 0), i8* getelementptr inbounds ([136 x i8], [136 x i8]* @.str.464, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.465, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.466, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.467, i32 0, i32 0)], align 16
@.str.310 = private unnamed_addr constant [75 x i8] c"Mandatory arguments to long options are mandatory for short options too.\0A\0A\00", align 1
@.str.311 = private unnamed_addr constant [10 x i8] c"Startup:\0A\00", align 1
@.str.312 = private unnamed_addr constant [73 x i8] c"  -V,  --version                   display the version of Wget and exit\0A\00", align 1
@.str.313 = private unnamed_addr constant [52 x i8] c"  -h,  --help                      print this help\0A\00", align 1
@.str.314 = private unnamed_addr constant [67 x i8] c"  -b,  --background                go to background after startup\0A\00", align 1
@.str.315 = private unnamed_addr constant [70 x i8] c"  -e,  --execute=COMMAND           execute a `.wgetrc'-style command\0A\00", align 1
@.str.316 = private unnamed_addr constant [25 x i8] c"Logging and input file:\0A\00", align 1
@.str.317 = private unnamed_addr constant [57 x i8] c"  -o,  --output-file=FILE          log messages to FILE\0A\00", align 1
@.str.318 = private unnamed_addr constant [60 x i8] c"  -a,  --append-output=FILE        append messages to FILE\0A\00", align 1
@.str.319 = private unnamed_addr constant [72 x i8] c"  -d,  --debug                     print lots of debugging information\0A\00", align 1
@.str.320 = private unnamed_addr constant [54 x i8] c"  -q,  --quiet                     quiet (no output)\0A\00", align 1
@.str.321 = private unnamed_addr constant [69 x i8] c"  -v,  --verbose                   be verbose (this is the default)\0A\00", align 1
@.str.322 = private unnamed_addr constant [78 x i8] c"  -nv, --no-verbose                turn off verboseness, without being quiet\0A\00", align 1
@.str.323 = private unnamed_addr constant [80 x i8] c"       --report-speed=TYPE         output bandwidth as TYPE.  TYPE can be bits\0A\00", align 1
@.str.324 = private unnamed_addr constant [82 x i8] c"  -i,  --input-file=FILE           download URLs found in local or external FILE\0A\00", align 1
@.str.325 = private unnamed_addr constant [61 x i8] c"  -F,  --force-html                treat input file as HTML\0A\00", align 1
@.str.326 = private unnamed_addr constant [128 x i8] c"  -B,  --base=URL                  resolves HTML input-file links (-i -F)\0A                                     relative to URL\0A\00", align 1
@.str.327 = private unnamed_addr constant [63 x i8] c"       --config=FILE               specify config file to use\0A\00", align 1
@.str.328 = private unnamed_addr constant [64 x i8] c"       --no-config                 do not read any config file\0A\00", align 1
@.str.329 = private unnamed_addr constant [74 x i8] c"       --rejected-log=FILE         log reasons for URL rejection to FILE\0A\00", align 1
@.str.330 = private unnamed_addr constant [11 x i8] c"Download:\0A\00", align 1
@.str.331 = private unnamed_addr constant [81 x i8] c"  -t,  --tries=NUMBER              set number of retries to NUMBER (0 unlimits)\0A\00", align 1
@.str.332 = private unnamed_addr constant [72 x i8] c"       --retry-connrefused         retry even if connection is refused\0A\00", align 1
@.str.333 = private unnamed_addr constant [60 x i8] c"  -O,  --output-document=FILE      write documents to FILE\0A\00", align 1
@.str.334 = private unnamed_addr constant [145 x i8] c"  -nc, --no-clobber                skip downloads that would download to\0A                                     existing files (overwriting them)\0A\00", align 1
@.str.335 = private unnamed_addr constant [79 x i8] c"  -c,  --continue                  resume getting a partially-downloaded file\0A\00", align 1
@.str.336 = private unnamed_addr constant [86 x i8] c"       --start-pos=OFFSET          start downloading from zero-based position OFFSET\0A\00", align 1
@.str.337 = private unnamed_addr constant [63 x i8] c"       --progress=TYPE             select progress gauge type\0A\00", align 1
@.str.338 = private unnamed_addr constant [83 x i8] c"       --show-progress             display the progress bar in any verbosity mode\0A\00", align 1
@.str.339 = private unnamed_addr constant [121 x i8] c"  -N,  --timestamping              don't re-retrieve files unless newer than\0A                                     local\0A\00", align 1
@.str.340 = private unnamed_addr constant [147 x i8] c"       --no-if-modified-since      don't use conditional if-modified-since get\0A                                     requests in timestamping mode\0A\00", align 1
@.str.341 = private unnamed_addr constant [135 x i8] c"       --no-use-server-timestamps  don't set the local file's timestamp by\0A                                     the one on the server\0A\00", align 1
@.str.342 = private unnamed_addr constant [58 x i8] c"  -S,  --server-response           print server response\0A\00", align 1
@.str.343 = private unnamed_addr constant [60 x i8] c"       --spider                    don't download anything\0A\00", align 1
@.str.344 = private unnamed_addr constant [70 x i8] c"  -T,  --timeout=SECONDS           set all timeout values to SECONDS\0A\00", align 1
@.str.345 = private unnamed_addr constant [71 x i8] c"       --dns-timeout=SECS          set the DNS lookup timeout to SECS\0A\00", align 1
@.str.346 = private unnamed_addr constant [68 x i8] c"       --connect-timeout=SECS      set the connect timeout to SECS\0A\00", align 1
@.str.347 = private unnamed_addr constant [65 x i8] c"       --read-timeout=SECS         set the read timeout to SECS\0A\00", align 1
@.str.348 = private unnamed_addr constant [68 x i8] c"  -w,  --wait=SECONDS              wait SECONDS between retrievals\0A\00", align 1
@.str.349 = private unnamed_addr constant [83 x i8] c"       --waitretry=SECONDS         wait 1..SECONDS between retries of a retrieval\0A\00", align 1
@.str.350 = private unnamed_addr constant [90 x i8] c"       --random-wait               wait from 0.5*WAIT...1.5*WAIT secs between retrievals\0A\00", align 1
@.str.351 = private unnamed_addr constant [62 x i8] c"       --no-proxy                  explicitly turn off proxy\0A\00", align 1
@.str.352 = private unnamed_addr constant [66 x i8] c"  -Q,  --quota=NUMBER              set retrieval quota to NUMBER\0A\00", align 1
@.str.353 = private unnamed_addr constant [83 x i8] c"       --bind-address=ADDRESS      bind to ADDRESS (hostname or IP) on local host\0A\00", align 1
@.str.354 = private unnamed_addr constant [64 x i8] c"       --limit-rate=RATE           limit download rate to RATE\0A\00", align 1
@.str.355 = private unnamed_addr constant [64 x i8] c"       --no-dns-cache              disable caching DNS lookups\0A\00", align 1
@.str.356 = private unnamed_addr constant [83 x i8] c"       --restrict-file-names=OS    restrict chars in file names to ones OS allows\0A\00", align 1
@.str.357 = private unnamed_addr constant [80 x i8] c"       --ignore-case               ignore case when matching files/directories\0A\00", align 1
@.str.358 = private unnamed_addr constant [67 x i8] c"  -4,  --inet4-only                connect only to IPv4 addresses\0A\00", align 1
@.str.359 = private unnamed_addr constant [67 x i8] c"  -6,  --inet6-only                connect only to IPv6 addresses\0A\00", align 1
@.str.360 = private unnamed_addr constant [148 x i8] c"       --prefer-family=FAMILY      connect first to addresses of specified family,\0A                                     one of IPv6, IPv4, or none\0A\00", align 1
@.str.361 = private unnamed_addr constant [71 x i8] c"       --user=USER                 set both ftp and http user to USER\0A\00", align 1
@.str.362 = private unnamed_addr constant [75 x i8] c"       --password=PASS             set both ftp and http password to PASS\0A\00", align 1
@.str.363 = private unnamed_addr constant [57 x i8] c"       --ask-password              prompt for passwords\0A\00", align 1
@.str.364 = private unnamed_addr constant [57 x i8] c"       --no-iri                    turn off IRI support\0A\00", align 1
@.str.365 = private unnamed_addr constant [75 x i8] c"       --local-encoding=ENC        use ENC as the local encoding for IRIs\0A\00", align 1
@.str.366 = private unnamed_addr constant [75 x i8] c"       --remote-encoding=ENC       use ENC as the default remote encoding\0A\00", align 1
@.str.367 = private unnamed_addr constant [63 x i8] c"       --unlink                    remove file before clobber\0A\00", align 1
@.str.368 = private unnamed_addr constant [14 x i8] c"Directories:\0A\00", align 1
@.str.369 = private unnamed_addr constant [61 x i8] c"  -nd, --no-directories            don't create directories\0A\00", align 1
@.str.370 = private unnamed_addr constant [66 x i8] c"  -x,  --force-directories         force creation of directories\0A\00", align 1
@.str.371 = private unnamed_addr constant [66 x i8] c"  -nH, --no-host-directories       don't create host directories\0A\00", align 1
@.str.372 = private unnamed_addr constant [69 x i8] c"       --protocol-directories      use protocol name in directories\0A\00", align 1
@.str.373 = private unnamed_addr constant [60 x i8] c"  -P,  --directory-prefix=PREFIX   save files to PREFIX/..\0A\00", align 1
@.str.374 = private unnamed_addr constant [78 x i8] c"       --cut-dirs=NUMBER           ignore NUMBER remote directory components\0A\00", align 1
@.str.375 = private unnamed_addr constant [15 x i8] c"HTTP options:\0A\00", align 1
@.str.376 = private unnamed_addr constant [58 x i8] c"       --http-user=USER            set http user to USER\0A\00", align 1
@.str.377 = private unnamed_addr constant [62 x i8] c"       --http-password=PASS        set http password to PASS\0A\00", align 1
@.str.378 = private unnamed_addr constant [64 x i8] c"       --no-cache                  disallow server-cached data\0A\00", align 1
@.str.379 = private unnamed_addr constant [135 x i8] c"       --default-page=NAME         change the default page name (normally\0A                                     this is 'index.html'.)\0A\00", align 1
@.str.380 = private unnamed_addr constant [83 x i8] c"  -E,  --adjust-extension          save HTML/CSS documents with proper extensions\0A\00", align 1
@.str.381 = private unnamed_addr constant [73 x i8] c"       --ignore-length             ignore 'Content-Length' header field\0A\00", align 1
@.str.382 = private unnamed_addr constant [68 x i8] c"       --header=STRING             insert STRING among the headers\0A\00", align 1
@.str.383 = private unnamed_addr constant [74 x i8] c"       --max-redirect              maximum redirections allowed per page\0A\00", align 1
@.str.384.1085 = private unnamed_addr constant [63 x i8] c"       --proxy-user=USER           set USER as proxy username\0A\00", align 1
@.str.385 = private unnamed_addr constant [63 x i8] c"       --proxy-password=PASS       set PASS as proxy password\0A\00", align 1
@.str.386 = private unnamed_addr constant [82 x i8] c"       --referer=URL               include 'Referer: URL' header in HTTP request\0A\00", align 1
@.str.387 = private unnamed_addr constant [66 x i8] c"       --save-headers              save the HTTP headers to file\0A\00", align 1
@.str.388 = private unnamed_addr constant [78 x i8] c"  -U,  --user-agent=AGENT          identify as AGENT instead of Wget/VERSION\0A\00", align 1
@.str.389 = private unnamed_addr constant [85 x i8] c"       --no-http-keep-alive        disable HTTP keep-alive (persistent connections)\0A\00", align 1
@.str.390 = private unnamed_addr constant [54 x i8] c"       --no-cookies                don't use cookies\0A\00", align 1
@.str.391 = private unnamed_addr constant [74 x i8] c"       --load-cookies=FILE         load cookies from FILE before session\0A\00", align 1
@.str.392 = private unnamed_addr constant [71 x i8] c"       --save-cookies=FILE         save cookies to FILE after session\0A\00", align 1
@.str.393 = private unnamed_addr constant [82 x i8] c"       --keep-session-cookies      load and save session (non-permanent) cookies\0A\00", align 1
@.str.394 = private unnamed_addr constant [81 x i8] c"       --post-data=STRING          use the POST method; send STRING as the data\0A\00", align 1
@.str.395 = private unnamed_addr constant [79 x i8] c"       --post-file=FILE            use the POST method; send contents of FILE\0A\00", align 1
@.str.396 = private unnamed_addr constant [75 x i8] c"       --method=HTTPMethod         use method \22HTTPMethod\22 in the request\0A\00", align 1
@.str.397 = private unnamed_addr constant [78 x i8] c"       --body-data=STRING          send STRING as data. --method MUST be set\0A\00", align 1
@.str.398 = private unnamed_addr constant [80 x i8] c"       --body-file=FILE            send contents of FILE. --method MUST be set\0A\00", align 1
@.str.399 = private unnamed_addr constant [156 x i8] c"       --content-disposition       honor the Content-Disposition header when\0A                                     choosing local file names (EXPERIMENTAL)\0A\00", align 1
@.str.400 = private unnamed_addr constant [81 x i8] c"       --content-on-error          output the received content on server errors\0A\00", align 1
@.str.401 = private unnamed_addr constant [202 x i8] c"       --auth-no-challenge         send Basic HTTP authentication information\0A                                     without first waiting for the server's\0A                                     challenge\0A\00", align 1
@.str.402 = private unnamed_addr constant [26 x i8] c"HTTPS (SSL/TLS) options:\0A\00", align 1
@.str.403 = private unnamed_addr constant [138 x i8] c"       --secure-protocol=PR        choose secure protocol, one of auto, SSLv2,\0A                                     SSLv3, TLSv1 and PFS\0A\00", align 1
@.str.404 = private unnamed_addr constant [67 x i8] c"       --https-only                only follow secure HTTPS links\0A\00", align 1
@.str.405 = private unnamed_addr constant [76 x i8] c"       --no-check-certificate      don't validate the server's certificate\0A\00", align 1
@.str.406 = private unnamed_addr constant [60 x i8] c"       --certificate=FILE          client certificate file\0A\00", align 1
@.str.407 = private unnamed_addr constant [72 x i8] c"       --certificate-type=TYPE     client certificate type, PEM or DER\0A\00", align 1
@.str.408 = private unnamed_addr constant [53 x i8] c"       --private-key=FILE          private key file\0A\00", align 1
@.str.409 = private unnamed_addr constant [65 x i8] c"       --private-key-type=TYPE     private key type, PEM or DER\0A\00", align 1
@.str.410.1086 = private unnamed_addr constant [64 x i8] c"       --ca-certificate=FILE       file with the bundle of CAs\0A\00", align 1
@.str.411 = private unnamed_addr constant [79 x i8] c"       --ca-directory=DIR          directory where hash list of CAs is stored\0A\00", align 1
@.str.412 = private unnamed_addr constant [61 x i8] c"       --crl-file=FILE             file with bundle of CRLs\0A\00", align 1
@.str.413 = private unnamed_addr constant [15 x i8] c"HSTS options:\0A\00", align 1
@.str.414 = private unnamed_addr constant [49 x i8] c"       --no-hsts                   disable HSTS\0A\00", align 1
@.str.415 = private unnamed_addr constant [82 x i8] c"       --hsts-file                 path of HSTS database (will override default)\0A\00", align 1
@.str.416 = private unnamed_addr constant [14 x i8] c"FTP options:\0A\00", align 1
@.str.417 = private unnamed_addr constant [57 x i8] c"       --ftp-user=USER             set ftp user to USER\0A\00", align 1
@.str.418 = private unnamed_addr constant [61 x i8] c"       --ftp-password=PASS         set ftp password to PASS\0A\00", align 1
@.str.419 = private unnamed_addr constant [66 x i8] c"       --no-remove-listing         don't remove '.listing' files\0A\00", align 1
@.str.420.1087 = private unnamed_addr constant [68 x i8] c"       --no-glob                   turn off FTP file name globbing\0A\00", align 1
@.str.421 = private unnamed_addr constant [72 x i8] c"       --no-passive-ftp            disable the \22passive\22 transfer mode\0A\00", align 1
@.str.422 = private unnamed_addr constant [69 x i8] c"       --preserve-permissions      preserve remote file permissions\0A\00", align 1
@.str.423 = private unnamed_addr constant [82 x i8] c"       --retr-symlinks             when recursing, get linked-to files (not dir)\0A\00", align 1
@.str.424 = private unnamed_addr constant [15 x i8] c"FTPS options:\0A\00", align 1
@.str.425 = private unnamed_addr constant [80 x i8] c"       --ftps-implicit                 use implicit FTPS (default port is 990)\0A\00", align 1
@.str.426 = private unnamed_addr constant [173 x i8] c"       --ftps-resume-ssl               resume the SSL/TLS session started in the control connection when\0A                                         opening a data connection\0A\00", align 1
@.str.427 = private unnamed_addr constant [107 x i8] c"       --ftps-clear-data-connection    cipher the control channel only; all the data will be in plaintext\0A\00", align 1
@.str.428 = private unnamed_addr constant [103 x i8] c"       --ftps-fallback-to-ftp          fall back to FTP if FTPS is not supported in the target server\0A\00", align 1
@.str.429 = private unnamed_addr constant [15 x i8] c"WARC options:\0A\00", align 1
@.str.430 = private unnamed_addr constant [82 x i8] c"       --warc-file=FILENAME        save request/response data to a .warc.gz file\0A\00", align 1
@.str.431 = private unnamed_addr constant [75 x i8] c"       --warc-header=STRING        insert STRING into the warcinfo record\0A\00", align 1
@.str.432 = private unnamed_addr constant [77 x i8] c"       --warc-max-size=NUMBER      set maximum size of WARC files to NUMBER\0A\00", align 1
@.str.433 = private unnamed_addr constant [58 x i8] c"       --warc-cdx                  write CDX index files\0A\00", align 1
@.str.434 = private unnamed_addr constant [81 x i8] c"       --warc-dedup=FILENAME       do not store records listed in this CDX file\0A\00", align 1
@.str.435 = private unnamed_addr constant [73 x i8] c"       --no-warc-compression       do not compress WARC files with GZIP\0A\00", align 1
@.str.436 = private unnamed_addr constant [66 x i8] c"       --no-warc-digests           do not calculate SHA1 digests\0A\00", align 1
@.str.437 = private unnamed_addr constant [79 x i8] c"       --no-warc-keep-log          do not store the log file in a WARC record\0A\00", align 1
@.str.438 = private unnamed_addr constant [129 x i8] c"       --warc-tempdir=DIRECTORY    location for temporary files created by the\0A                                     WARC writer\0A\00", align 1
@.str.439 = private unnamed_addr constant [21 x i8] c"Recursive download:\0A\00", align 1
@.str.440 = private unnamed_addr constant [63 x i8] c"  -r,  --recursive                 specify recursive download\0A\00", align 1
@.str.441 = private unnamed_addr constant [84 x i8] c"  -l,  --level=NUMBER              maximum recursion depth (inf or 0 for infinite)\0A\00", align 1
@.str.442 = private unnamed_addr constant [80 x i8] c"       --delete-after              delete files locally after downloading them\0A\00", align 1
@.str.443 = private unnamed_addr constant [131 x i8] c"  -k,  --convert-links             make links in downloaded HTML or CSS point to\0A                                     local files\0A\00", align 1
@.str.444 = private unnamed_addr constant [107 x i8] c"       --convert-file-only         convert the file part of the URLs only (usually known as the basename)\0A\00", align 1
@.str.445 = private unnamed_addr constant [87 x i8] c"       --backups=N                 before writing file X, rotate up to N backup files\0A\00", align 1
@.str.446 = private unnamed_addr constant [80 x i8] c"  -K,  --backup-converted          before converting file X, back up as X.orig\0A\00", align 1
@.str.447 = private unnamed_addr constant [82 x i8] c"  -m,  --mirror                    shortcut for -N -r -l inf --no-remove-listing\0A\00", align 1
@.str.448 = private unnamed_addr constant [85 x i8] c"  -p,  --page-requisites           get all images, etc. needed to display HTML page\0A\00", align 1
@.str.449 = private unnamed_addr constant [84 x i8] c"       --strict-comments           turn on strict (SGML) handling of HTML comments\0A\00", align 1
@.str.450 = private unnamed_addr constant [26 x i8] c"Recursive accept/reject:\0A\00", align 1
@.str.451 = private unnamed_addr constant [80 x i8] c"  -A,  --accept=LIST               comma-separated list of accepted extensions\0A\00", align 1
@.str.452 = private unnamed_addr constant [80 x i8] c"  -R,  --reject=LIST               comma-separated list of rejected extensions\0A\00", align 1
@.str.453 = private unnamed_addr constant [65 x i8] c"       --accept-regex=REGEX        regex matching accepted URLs\0A\00", align 1
@.str.454 = private unnamed_addr constant [65 x i8] c"       --reject-regex=REGEX        regex matching rejected URLs\0A\00", align 1
@.str.455 = private unnamed_addr constant [60 x i8] c"       --regex-type=TYPE           regex type (posix|pcre)\0A\00", align 1
@.str.456 = private unnamed_addr constant [77 x i8] c"  -D,  --domains=LIST              comma-separated list of accepted domains\0A\00", align 1
@.str.457 = private unnamed_addr constant [77 x i8] c"       --exclude-domains=LIST      comma-separated list of rejected domains\0A\00", align 1
@.str.458 = private unnamed_addr constant [73 x i8] c"       --follow-ftp                follow FTP links from HTML documents\0A\00", align 1
@.str.459 = private unnamed_addr constant [79 x i8] c"       --follow-tags=LIST          comma-separated list of followed HTML tags\0A\00", align 1
@.str.460 = private unnamed_addr constant [78 x i8] c"       --ignore-tags=LIST          comma-separated list of ignored HTML tags\0A\00", align 1
@.str.461 = private unnamed_addr constant [71 x i8] c"  -H,  --span-hosts                go to foreign hosts when recursive\0A\00", align 1
@.str.462 = private unnamed_addr constant [63 x i8] c"  -L,  --relative                  follow relative links only\0A\00", align 1
@.str.463 = private unnamed_addr constant [64 x i8] c"  -I,  --include-directories=LIST  list of allowed directories\0A\00", align 1
@.str.464 = private unnamed_addr constant [136 x i8] c"       --trust-server-names        use the name specified by the redirection\0A                                     URL's last component\0A\00", align 1
@.str.465 = private unnamed_addr constant [65 x i8] c"  -X,  --exclude-directories=LIST  list of excluded directories\0A\00", align 1
@.str.466 = private unnamed_addr constant [73 x i8] c"  -np, --no-parent                 don't ascend to the parent directory\0A\00", align 1
@.str.467 = private unnamed_addr constant [56 x i8] c"Mail bug reports and suggestions to <bug-wget@gnu.org>\0A\00", align 1
@no_prefix.p = internal global i8* getelementptr inbounds ([2048 x i8], [2048 x i8]* @no_prefix.buffer, i32 0, i32 0), align 8, !track !61
@no_prefix.buffer = internal global [2048 x i8] zeroinitializer, align 16
@.str.61.1088 = private unnamed_addr constant [5 x i8] c"wget\00", align 1
@netrc_list = internal global %struct._acc_t* null, align 8, !track !62
@search_netrc.processed_netrc = internal global i32 0, align 4
@.str.1091 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.1.1092 = private unnamed_addr constant [7 x i8] c".netrc\00", align 1
@.str.2.1093 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.3.1094 = private unnamed_addr constant [26 x i8] c"%s: Cannot read %s (%s).\0A\00", align 1
@.str.4.1095 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.5.1096 = private unnamed_addr constant [9 x i8] c"password\00", align 1
@.str.6.1097 = private unnamed_addr constant [7 x i8] c"macdef\00", align 1
@.str.7.1098 = private unnamed_addr constant [8 x i8] c"account\00", align 1
@.str.8.1099 = private unnamed_addr constant [62 x i8] c"%s: %s:%d: warning: %s token appears before any machine name\0A\00", align 1
@.str.9.1100 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.10.1101 = private unnamed_addr constant [8 x i8] c"machine\00", align 1
@.str.11.1102 = private unnamed_addr constant [31 x i8] c"%s: %s:%d: unknown token \22%s\22\0A\00", align 1
@implementations = internal global [2 x %struct.progress_implementation] [%struct.progress_implementation { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.1105, i32 0, i32 0), i8 0, i8* (i8*, i64, i64)* @dot_create, void (i8*, i64, double)* @dot_update, void (i8*)* @dot_draw, void (i8*, double)* @dot_finish, void (i8*)* @dot_set_params }, %struct.progress_implementation { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1106, i32 0, i32 0), i8 1, i8* (i8*, i64, i64)* @bar_create, void (i8*, i64, double)* @bar_update, void (i8*)* @bar_draw, void (i8*, double)* @bar_finish, void (i8*)* @bar_set_params }], align 16, !track !63
@.str.1.1105 = private unnamed_addr constant [4 x i8] c"dot\00", align 1
@.str.1106 = private unnamed_addr constant [4 x i8] c"bar\00", align 1
@.str.40.1107 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@.str.41.1108 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.42.1109 = private unnamed_addr constant [6 x i8] c"force\00", align 1
@current_impl_locked = internal global i32 0, align 4
@.str.43.1110 = private unnamed_addr constant [9 x i8] c"noscroll\00", align 1
@.str.44.1111 = private unnamed_addr constant [6 x i8] c"emacs\00", align 1
@current_impl = internal global %struct.progress_implementation* null, align 8, !track !64
@.str.24.1114 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.39.1115 = private unnamed_addr constant [2 x i8] c"\0D\00", align 1
@.str.25.1116 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.8.1117 = private unnamed_addr constant [6 x i8] c"%3d%%\00", align 1
@.str.26.1118 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@create_image.short_units = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.1134, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.1135, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29.1136, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30.1137, i32 0, i32 0)], align 16
@create_image.short_units_bits = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31.1130, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32.1131, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33.1132, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34.1133, i32 0, i32 0)], align 16
@.str.35.1119 = private unnamed_addr constant [10 x i8] c"  %4.*f%s\00", align 1
@.str.36.1120 = private unnamed_addr constant [11 x i8] c"  --.-KB/s\00", align 1
@.str.37.1121 = private unnamed_addr constant [8 x i8] c"    in \00", align 1
@.str.38.1122 = private unnamed_addr constant [4 x i8] c"%ss\00", align 1
@.str.3.1123 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5.1124 = private unnamed_addr constant [2 x i8] c" \00", align 1
@eta_to_human_short.last = internal global i32 -1, align 4
@eta_to_human_short.buf = internal global [10 x i8] zeroinitializer, align 1
@.str.13.1125 = private unnamed_addr constant [4 x i8] c"%ds\00", align 1
@.str.14.1126 = private unnamed_addr constant [9 x i8] c"%dm%s%ds\00", align 1
@.str.15.1127 = private unnamed_addr constant [9 x i8] c"%dh%s%dm\00", align 1
@.str.16.1128 = private unnamed_addr constant [9 x i8] c"%dd%s%dh\00", align 1
@.str.17.1129 = private unnamed_addr constant [4 x i8] c"%dd\00", align 1
@get_eta.eta_trans = internal global i8* null, align 8
@get_eta.eta_str = internal constant [11 x i8] c"    eta %s\00", align 1
@get_eta.bytes_cols_diff = internal global i32 0, align 4
@.str.31.1130 = private unnamed_addr constant [5 x i8] c" b/s\00", align 1
@.str.32.1131 = private unnamed_addr constant [5 x i8] c"Kb/s\00", align 1
@.str.33.1132 = private unnamed_addr constant [5 x i8] c"Mb/s\00", align 1
@.str.34.1133 = private unnamed_addr constant [5 x i8] c"Gb/s\00", align 1
@.str.27.1134 = private unnamed_addr constant [5 x i8] c" B/s\00", align 1
@.str.28.1135 = private unnamed_addr constant [5 x i8] c"KB/s\00", align 1
@.str.29.1136 = private unnamed_addr constant [5 x i8] c"MB/s\00", align 1
@.str.30.1137 = private unnamed_addr constant [5 x i8] c"GB/s\00", align 1
@received_sigwinch = internal global i32 0, align 4
@screen_width = internal global i32 0, align 4
@.str.19.1138 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.20.1139 = private unnamed_addr constant [7 x i8] c"binary\00", align 1
@.str.21.1140 = private unnamed_addr constant [5 x i8] c"mega\00", align 1
@.str.22.1141 = private unnamed_addr constant [5 x i8] c"giga\00", align 1
@.str.23.1142 = private unnamed_addr constant [56 x i8] c"Invalid dot style specification %s; leaving unchanged.\0A\00", align 1
@.str.4.1143 = private unnamed_addr constant [6 x i8] c"\0A%6sK\00", align 1
@.str.18.1144 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@print_row_stats.names = internal global [4 x i8] c" KMG", align 1
@.str.9.1145 = private unnamed_addr constant [9 x i8] c" %4.*f%c\00", align 1
@.str.10.1146 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.11.1147 = private unnamed_addr constant [4 x i8] c"=%s\00", align 1
@.str.12.1148 = private unnamed_addr constant [5 x i8] c"=%ss\00", align 1
@.str.7.1149 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.2.1150 = private unnamed_addr constant [21 x i8] c"\0A%*s[ skipping %sK ]\00", align 1
@.str.6.1151 = private unnamed_addr constant [2 x i8] c",\00", align 1
@output_redirected = internal global i32 0, align 4
@ptimer_new.init_done = internal global i8 0, align 1
@posix_clock_id = internal global i32 0, align 4
@posix_init.clocks = internal constant [2 x %struct.anon.103] [%struct.anon.103 { i32 1, i32 149 }, %struct.anon.103 { i32 0, i32 -1 }], align 16
@posix_clock_resolution = internal global double 0.000000e+00, align 8
@.str.1158 = private unnamed_addr constant [41 x i8] c"Cannot get REALTIME clock frequency: %s\0A\00", align 1
@.str.1165 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.1.1166 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.2.1167 = private unnamed_addr constant [48 x i8] c"Already downloaded \22%s\22, reusing it from \22%s\22.\0A\00", align 1
@.str.3.1168 = private unnamed_addr constant [9 x i8] c"%s: %s.\0A\00", align 1
@.str.4.1169 = private unnamed_addr constant [47 x i8] c"Not descending further; at depth %d, max. %d.\0A\00", align 1
@.str.7.1170 = private unnamed_addr constant [9 x i8] c"--spider\00", align 1
@.str.8.1171 = private unnamed_addr constant [29 x i8] c"recursive rejection criteria\00", align 1
@.str.6.1172 = private unnamed_addr constant [15 x i8] c"--delete-after\00", align 1
@.str.5.1173 = private unnamed_addr constant [50 x i8] c"Removing file due to %s in recursive_retrieve():\0A\00", align 1
@.str.9.1174 = private unnamed_addr constant [14 x i8] c"Removing %s.\0A\00", align 1
@.str.10.1175 = private unnamed_addr constant [42 x i8] c"Removing %s since it should be rejected.\0A\00", align 1
@.str.11.1176 = private unnamed_addr constant [12 x i8] c"unlink: %s\0A\00", align 1
@.str.12.1177 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.18.1178 = private unnamed_addr constant [35 x i8] c"Deciding whether to enqueue \22%s\22.\0A\00", align 1
@.str.19.1179 = private unnamed_addr constant [36 x i8] c"download_child: parent->url is: %s\0A\00", align 1
@.str.20.1180 = private unnamed_addr constant [28 x i8] c"Already on the black list.\0A\00", align 1
@.str.21.1181 = private unnamed_addr constant [32 x i8] c"Not following non-HTTPS links.\0A\00", align 1
@.str.22.1182 = private unnamed_addr constant [33 x i8] c"Not following non-HTTP schemes.\0A\00", align 1
@.str.23.1183 = private unnamed_addr constant [46 x i8] c"It doesn't really look like a relative link.\0A\00", align 1
@.str.24.1184 = private unnamed_addr constant [30 x i8] c"The domain was not accepted.\0A\00", align 1
@.str.25.1185 = private unnamed_addr constant [52 x i8] c"Going to \22%s\22 would escape \22%s\22 with no_parent on.\0A\00", align 1
@.str.26.1186 = private unnamed_addr constant [35 x i8] c"%s (%s) is excluded/not-included.\0A\00", align 1
@.str.27.1187 = private unnamed_addr constant [44 x i8] c"%s is excluded/not-included through regex.\0A\00", align 1
@.str.28.1188 = private unnamed_addr constant [39 x i8] c"%s (%s) does not match acc/rej rules.\0A\00", align 1
@.str.29.1189 = private unnamed_addr constant [60 x i8] c"This is not the same hostname as the parent's (%s and %s).\0A\00", align 1
@.str.30.1190 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.31.1191 = private unnamed_addr constant [49 x i8] c"Not following %s because robots.txt forbids it.\0A\00", align 1
@.str.32.1192 = private unnamed_addr constant [21 x i8] c"Decided to load it.\0A\00", align 1
@.str.33.1193 = private unnamed_addr constant [25 x i8] c"Decided NOT to load it.\0A\00", align 1
@.str.36.1194 = private unnamed_addr constant [8 x i8] c"SUCCESS\00", align 1
@.str.37.1195 = private unnamed_addr constant [10 x i8] c"BLACKLIST\00", align 1
@.str.38.1196 = private unnamed_addr constant [9 x i8] c"NOTHTTPS\00", align 1
@.str.39.1197 = private unnamed_addr constant [8 x i8] c"NONHTTP\00", align 1
@.str.40.1198 = private unnamed_addr constant [9 x i8] c"ABSOLUTE\00", align 1
@.str.41.1199 = private unnamed_addr constant [7 x i8] c"DOMAIN\00", align 1
@.str.42.1200 = private unnamed_addr constant [7 x i8] c"PARENT\00", align 1
@.str.43.1201 = private unnamed_addr constant [5 x i8] c"LIST\00", align 1
@.str.44.1202 = private unnamed_addr constant [6 x i8] c"REGEX\00", align 1
@.str.45.1203 = private unnamed_addr constant [6 x i8] c"RULES\00", align 1
@.str.46.1204 = private unnamed_addr constant [12 x i8] c"SPANNEDHOST\00", align 1
@.str.47.1205 = private unnamed_addr constant [7 x i8] c"ROBOTS\00", align 1
@.str.48.1206 = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@.str.49.1207 = private unnamed_addr constant [4 x i8] c"%s\09\00", align 1
@.str.50.1208 = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@.str.51.1209 = private unnamed_addr constant [12 x i8] c"SCHEME_HTTP\00", align 1
@.str.52.1210 = private unnamed_addr constant [13 x i8] c"SCHEME_HTTPS\00", align 1
@.str.53.1211 = private unnamed_addr constant [12 x i8] c"SCHEME_FTPS\00", align 1
@.str.54.1212 = private unnamed_addr constant [11 x i8] c"SCHEME_FTP\00", align 1
@.str.55.1213 = private unnamed_addr constant [15 x i8] c"SCHEME_INVALID\00", align 1
@.str.56.1214 = private unnamed_addr constant [24 x i8] c"%s\09%s\09%s\09%i\09%s\09%s\09%s\09%s\00", align 1
@.str.34.1215 = private unnamed_addr constant [35 x i8] c"Redirection \22%s\22 failed the test.\0A\00", align 1
@.str.17.1216 = private unnamed_addr constant [26 x i8] c"Dequeuing %s at depth %d\0A\00", align 1
@.str.14.1217 = private unnamed_addr constant [30 x i8] c"Queue count %d, maxcount %d.\0A\00", align 1
@.str.35.1218 = private unnamed_addr constant [136 x i8] c"REASON\09U_URL\09U_SCHEME\09U_HOST\09U_PORT\09U_PATH\09U_PARAMS\09U_QUERY\09U_FRAGMENT\09P_URL\09P_SCHEME\09P_HOST\09P_PORT\09P_PATH\09P_PARAMS\09P_QUERY\09P_FRAGMENT\0A\00", align 1
@.str.13.1219 = private unnamed_addr constant [26 x i8] c"Enqueuing %s at depth %d\0A\00", align 1
@.str.16.1220 = private unnamed_addr constant [5 x i8] c"None\00", align 1
@.str.15.1221 = private unnamed_addr constant [27 x i8] c"[IRI Enqueuing %s with %s\0A\00", align 1
@.str.1224 = private unnamed_addr constant [28 x i8] c"Ignoring malformed line %d\0A\00", align 1
@.str.1.1225 = private unnamed_addr constant [11 x i8] c"user-agent\00", align 1
@.str.2.1226 = private unnamed_addr constant [6 x i8] c"allow\00", align 1
@.str.3.1227 = private unnamed_addr constant [9 x i8] c"disallow\00", align 1
@.str.4.1228 = private unnamed_addr constant [35 x i8] c"Ignoring unknown field at line %d\0A\00", align 1
@.str.12.1229 = private unnamed_addr constant [5 x i8] c"wget\00", align 1
@.str.5.1232 = private unnamed_addr constant [19 x i8] c"Cannot open %s: %s\00", align 1
@.str.7.1235 = private unnamed_addr constant [9 x i8] c"Allowing\00", align 1
@.str.8.1236 = private unnamed_addr constant [10 x i8] c"Rejecting\00", align 1
@.str.6.1237 = private unnamed_addr constant [32 x i8] c"%s path %s because of rule %s.\0A\00", align 1
@registered_specs = internal global %struct.hash_table* null, align 8, !track !65
@.str.9.1244 = private unnamed_addr constant [12 x i8] c"/robots.txt\00", align 1
@.str.10.1245 = private unnamed_addr constant [43 x i8] c"Loading robots.txt; please ignore errors.\0A\00", align 1
@.str.11.1246 = private unnamed_addr constant [9 x i8] c"%s: %s.\0A\00", align 1
@total_downloaded_bytes = common dso_local global i64 0, align 8
@output_stream_regular = common dso_local global i8 0, align 1
@total_download_time = common dso_local global double 0.000000e+00, align 8
@output_stream = common dso_local global %struct._IO_FILE* null, align 8, !track !66
@limit_data = internal global %struct.anon.123 zeroinitializer, align 8, !track !67
@.str.24.1259 = private unnamed_addr constant [38 x i8] c"deferring a %.2f ms sleep (%s/%.2f).\0A\00", align 1
@.str.25.1260 = private unnamed_addr constant [48 x i8] c"\0Asleeping %.2f ms for %s bytes, adjust %.2f ms\0A\00", align 1
@retr_rate.rate_names = internal global [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1272, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.1273, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.1274, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.1275, i32 0, i32 0)], align 16
@retr_rate.rate_names_bits = internal global [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.1268, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.1269, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.1270, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.1271, i32 0, i32 0)], align 16
@retr_rate.res = internal global [20 x i8] zeroinitializer, align 16
@.str.8.1267 = private unnamed_addr constant [8 x i8] c"%.*f %s\00", align 1
@.str.4.1268 = private unnamed_addr constant [4 x i8] c"b/s\00", align 1
@.str.5.1269 = private unnamed_addr constant [5 x i8] c"Kb/s\00", align 1
@.str.6.1270 = private unnamed_addr constant [5 x i8] c"Mb/s\00", align 1
@.str.7.1271 = private unnamed_addr constant [5 x i8] c"Gb/s\00", align 1
@.str.1272 = private unnamed_addr constant [4 x i8] c"B/s\00", align 1
@.str.1.1273 = private unnamed_addr constant [5 x i8] c"KB/s\00", align 1
@.str.2.1274 = private unnamed_addr constant [5 x i8] c"MB/s\00", align 1
@.str.3.1275 = private unnamed_addr constant [5 x i8] c"GB/s\00", align 1
@.str.9.1278 = private unnamed_addr constant [33 x i8] c"Error parsing proxy URL %s: %s.\0A\00", align 1
@.str.10.1279 = private unnamed_addr constant [38 x i8] c"Error in proxy URL %s: Must be HTTP.\0A\00", align 1
@.str.11.1280 = private unnamed_addr constant [48 x i8] c"URL transformed to HTTPS due to an HSTS policy\0A\00", align 1
@.str.12.1281 = private unnamed_addr constant [9 x i8] c"%s: %s.\0A\00", align 1
@.str.13.1282 = private unnamed_addr constant [27 x i8] c"%d redirections exceeded.\0A\00", align 1
@.str.14.1283 = private unnamed_addr constant [37 x i8] c"[IRI fallbacking to non-utf8 for %s\0A\00", align 1
@.str.15.1284 = private unnamed_addr constant [39 x i8] c"[Couldn't fallback to non-utf8 for %s\0A\00", align 1
@.str.26.1285 = private unnamed_addr constant [11 x i8] c"http_proxy\00", align 1
@.str.27.1286 = private unnamed_addr constant [12 x i8] c"https_proxy\00", align 1
@.str.28.1287 = private unnamed_addr constant [11 x i8] c"ftps_proxy\00", align 1
@.str.29.1288 = private unnamed_addr constant [10 x i8] c"ftp_proxy\00", align 1
@.str.16.1291 = private unnamed_addr constant [62 x i8] c"Removing file due to --delete-after in retrieve_from_file():\0A\00", align 1
@.str.17.1292 = private unnamed_addr constant [14 x i8] c"Removing %s.\0A\00", align 1
@.str.18.1293 = private unnamed_addr constant [12 x i8] c"unlink: %s\0A\00", align 1
@.str.19.1298 = private unnamed_addr constant [13 x i8] c"Giving up.\0A\0A\00", align 1
@.str.20.1299 = private unnamed_addr constant [12 x i8] c"Retrying.\0A\0A\00", align 1
@sleep_between_retrievals.first_retrieval = internal global i8 1, align 1
@.str.21.1302 = private unnamed_addr constant [43 x i8] c"sleep_between_retrievals: avg=%f,sleep=%f\0A\00", align 1
@.str.22.1305 = private unnamed_addr constant [7 x i8] c"%s%s%d\00", align 1
@.str.23.1306 = private unnamed_addr constant [2 x i8] c".\00", align 1
@input_file_url.first = internal global i8 1, align 1
@nonexisting_urls_set = internal global %struct.hash_table* null, align 8, !track !68
@.str.1317 = private unnamed_addr constant [25 x i8] c"Found no broken links.\0A\0A\00", align 1
@.str.1.1318 = private unnamed_addr constant [24 x i8] c"Found %d broken link.\0A\0A\00", align 1
@.str.2.1319 = private unnamed_addr constant [25 x i8] c"Found %d broken links.\0A\0A\00", align 1
@.str.3.1320 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.4.1321 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@urlchr_table = internal constant [256 x i8] c"\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\00\02\03\01\02\01\00\00\00\00\01\01\00\00\01\00\00\00\00\00\00\00\00\00\00\03\01\02\01\02\01\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\02\03\02\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02", align 16
@.str.17.1326 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1
@supported_schemes = internal global [5 x %struct.scheme_data] [%struct.scheme_data { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18.1331, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19.1332, i32 0, i32 0), i32 80, i32 12 }, %struct.scheme_data { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.1333, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20.1334, i32 0, i32 0), i32 443, i32 12 }, %struct.scheme_data { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21.1335, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22.1336, i32 0, i32 0), i32 21, i32 10 }, %struct.scheme_data { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23.1337, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24.1338, i32 0, i32 0), i32 21, i32 10 }, %struct.scheme_data { i8* null, i8* null, i32 -1, i32 0 }], align 16, !track !69
@.str.18.1331 = private unnamed_addr constant [5 x i8] c"http\00", align 1
@.str.19.1332 = private unnamed_addr constant [8 x i8] c"http://\00", align 1
@.str.4.1333 = private unnamed_addr constant [6 x i8] c"https\00", align 1
@.str.20.1334 = private unnamed_addr constant [9 x i8] c"https://\00", align 1
@.str.21.1335 = private unnamed_addr constant [4 x i8] c"ftp\00", align 1
@.str.22.1336 = private unnamed_addr constant [7 x i8] c"ftp://\00", align 1
@.str.23.1337 = private unnamed_addr constant [5 x i8] c"ftps\00", align 1
@.str.24.1338 = private unnamed_addr constant [8 x i8] c"ftps://\00", align 1
@.str.1349 = private unnamed_addr constant [3 x i8] c":/\00", align 1
@.str.1.1350 = private unnamed_addr constant [11 x i8] c"0123456789\00", align 1
@.str.2.1351 = private unnamed_addr constant [9 x i8] c"ftp://%s\00", align 1
@.str.3.1352 = private unnamed_addr constant [10 x i8] c"http://%s\00", align 1
@.str.16.1357 = private unnamed_addr constant [11 x i8] c"*password*\00", align 1
@.str.35.1358 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@init_seps.seps = internal global [8 x i8] c":/\00\00\00\00\00\00", align 1
@.str.25.1359 = private unnamed_addr constant [6 x i8] c"@/?#;\00", align 1
@.str.5.1362 = private unnamed_addr constant [30 x i8] c"HTTPS support not compiled in\00", align 1
@parse_errors = internal global [9 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26.1363, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27.1364, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28.1365, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.29.1366, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30.1367, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.31.1368, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.32.1369, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.33.1370, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.34.1371, i32 0, i32 0)], align 16, !track !70
@.str.26.1363 = private unnamed_addr constant [9 x i8] c"No error\00", align 1
@.str.27.1364 = private unnamed_addr constant [22 x i8] c"Unsupported scheme %s\00", align 1
@.str.28.1365 = private unnamed_addr constant [15 x i8] c"Scheme missing\00", align 1
@.str.29.1366 = private unnamed_addr constant [18 x i8] c"Invalid host name\00", align 1
@.str.30.1367 = private unnamed_addr constant [16 x i8] c"Bad port number\00", align 1
@.str.31.1368 = private unnamed_addr constant [18 x i8] c"Invalid user name\00", align 1
@.str.32.1369 = private unnamed_addr constant [34 x i8] c"Unterminated IPv6 numeric address\00", align 1
@.str.33.1370 = private unnamed_addr constant [29 x i8] c"IPv6 addresses not supported\00", align 1
@.str.34.1371 = private unnamed_addr constant [29 x i8] c"Invalid IPv6 numeric address\00", align 1
@.str.6.1382 = private unnamed_addr constant [42 x i8] c"Removing %s because of directory danger!\0A\00", align 1
@.str.7.1383 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.8.1386 = private unnamed_addr constant [11 x i8] c"index.html\00", align 1
@.str.9.1387 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.10.1388 = private unnamed_addr constant [7 x i8] c"%2E%2E\00", align 1
@.str.11.1389 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.12.1390 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.13.1391 = private unnamed_addr constant [40 x i8] c"The name is too long, %lu chars total.\0A\00", align 1
@.str.14.1392 = private unnamed_addr constant [22 x i8] c"Trying to shorten...\0A\00", align 1
@.str.15.1393 = private unnamed_addr constant [17 x i8] c"New name is %s.\0A\00", align 1
@filechr_table = internal constant <{ [160 x i8], [96 x i8] }> <{ [160 x i8] c"\0F\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\00\00\04\00\00\00\00\00\00\00\06\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\04\00\04\00\04\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08", [96 x i8] zeroinitializer }>, align 16
@.str.1402 = private unnamed_addr constant [19 x i8] c"%Y-%m-%dT%H:%M:%SZ\00", align 1
@.str.1.1405 = private unnamed_addr constant [14 x i8] c"<urn:uuid:%s>\00", align 1
@warc_write_ok = internal global i8 0, align 1
@.str.2.1408 = private unnamed_addr constant [47 x i8] c"Could not read CDX file %s for deduplication.\0A\00", align 1
@warc_manifest_fp = internal global %struct._IO_FILE* null, align 8, !track !71
@.str.3.1411 = private unnamed_addr constant [46 x i8] c"Could not open temporary WARC manifest file.\0A\00", align 1
@warc_log_fp = internal global %struct._IO_FILE* null, align 8, !track !72
@.str.4.1412 = private unnamed_addr constant [41 x i8] c"Could not open temporary WARC log file.\0A\00", align 1
@warc_current_file_number = internal global i32 0, align 4
@.str.5.1413 = private unnamed_addr constant [27 x i8] c"Could not open WARC file.\0A\00", align 1
@.str.6.1414 = private unnamed_addr constant [37 x i8] c"Could not open CDX file for output.\0A\00", align 1
@.str.55.1415 = private unnamed_addr constant [5 x i8] c".cdx\00", align 1
@.str.56.1416 = private unnamed_addr constant [3 x i8] c"a+\00", align 1
@warc_current_cdx_file = internal global %struct._IO_FILE* null, align 8, !track !73
@.str.57.1417 = private unnamed_addr constant [28 x i8] c" CDX a b a m s k r M V g u\0A\00", align 1
@.str.32.1418 = private unnamed_addr constant [8 x i8] c"warc.gz\00", align 1
@.str.33.1419 = private unnamed_addr constant [5 x i8] c"warc\00", align 1
@warc_current_file = internal global %struct._IO_FILE* null, align 8, !track !74
@warc_current_warcinfo_uuid_str = internal global [48 x i8] zeroinitializer, align 16, !track !75
@warc_current_filename = internal global i8* null, align 8, !track !76
@.str.34.1420 = private unnamed_addr constant [11 x i8] c"%s-meta.%s\00", align 1
@.str.35.1421 = private unnamed_addr constant [11 x i8] c"%s-%05d.%s\00", align 1
@.str.36.1422 = private unnamed_addr constant [6 x i8] c"%s.%s\00", align 1
@.str.37.1423 = private unnamed_addr constant [24 x i8] c"Opening WARC file %s.\0A\0A\00", align 1
@.str.8.1424 = private unnamed_addr constant [4 x i8] c"wb+\00", align 1
@.str.38.1425 = private unnamed_addr constant [29 x i8] c"Error opening WARC file %s.\0A\00", align 1
@.str.39.1426 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.9.1427 = private unnamed_addr constant [10 x i8] c"WARC-Type\00", align 1
@.str.40.1428 = private unnamed_addr constant [9 x i8] c"warcinfo\00", align 1
@.str.12.1429 = private unnamed_addr constant [13 x i8] c"Content-Type\00", align 1
@.str.41.1430 = private unnamed_addr constant [24 x i8] c"application/warc-fields\00", align 1
@.str.42.1431 = private unnamed_addr constant [10 x i8] c"WARC-Date\00", align 1
@.str.14.1432 = private unnamed_addr constant [15 x i8] c"WARC-Record-ID\00", align 1
@.str.43.1433 = private unnamed_addr constant [14 x i8] c"WARC-Filename\00", align 1
@.str.44.1434 = private unnamed_addr constant [25 x i8] c"software: Wget/%s (%s)\0D\0A\00", align 1
@.str.45.1435 = private unnamed_addr constant [10 x i8] c"linux-gnu\00", align 1
@.str.46.1436 = private unnamed_addr constant [31 x i8] c"format: WARC File Format 1.0\0D\0A\00", align 1
@.str.47.1437 = private unnamed_addr constant [80 x i8] c"conformsTo: http://bibnum.bnf.fr/WARC/WARC_ISO_28500_version1_latestdraft.pdf\0D\0A\00", align 1
@.str.49.1438 = private unnamed_addr constant [8 x i8] c"classic\00", align 1
@.str.50.1439 = private unnamed_addr constant [4 x i8] c"off\00", align 1
@.str.48.1440 = private unnamed_addr constant [13 x i8] c"robots: %s\0D\0A\00", align 1
@.str.51.1441 = private unnamed_addr constant [21 x i8] c"wget-arguments: %s\0D\0A\00", align 1
@.str.52.1442 = private unnamed_addr constant [5 x i8] c"%s\0D\0A\00", align 1
@.str.53.1443 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.54.1444 = private unnamed_addr constant [45 x i8] c"Error writing warcinfo record to WARC file.\0A\00", align 1
@.str.69.1445 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@warc_current_gzfile = internal global %struct.gzFile_s* null, align 8, !track !77
@warc_current_gzfile_offset = internal global i64 0, align 8
@warc_current_gzfile_uncompressed_size = internal global i64 0, align 8
@.str.68.1446 = private unnamed_addr constant [15 x i8] c"Content-Length\00", align 1
@.str.19.1447 = private unnamed_addr constant [18 x i8] c"WARC-Block-Digest\00", align 1
@.str.20.1448 = private unnamed_addr constant [20 x i8] c"WARC-Payload-Digest\00", align 1
@.str.70.1449 = private unnamed_addr constant [6 x i8] c"sha1:\00", align 1
@.str.66.1450 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.63.1451 = private unnamed_addr constant [4 x i8] c"wb9\00", align 1
@.str.64.1452 = private unnamed_addr constant [41 x i8] c"Error opening GZIP stream to WARC file.\0A\00", align 1
@.str.65.1453 = private unnamed_addr constant [11 x i8] c"WARC/1.0\0D\0A\00", align 1
@.str.7.1454 = private unnamed_addr constant [5 x i8] c"wget\00", align 1
@.str.24.1455 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.25.1456 = private unnamed_addr constant [61 x i8] c"CDX file does not list original urls. (Missing column 'a'.)\0A\00", align 1
@.str.26.1457 = private unnamed_addr constant [57 x i8] c"CDX file does not list checksums. (Missing column 'k'.)\0A\00", align 1
@.str.27.1458 = private unnamed_addr constant [58 x i8] c"CDX file does not list record ids. (Missing column 'u'.)\0A\00", align 1
@warc_cdx_dedup_table = internal global %struct.hash_table* null, align 8, !track !78
@.str.28.1459 = private unnamed_addr constant [29 x i8] c"Loaded %d record from CDX.\0A\0A\00", align 1
@.str.29.1460 = private unnamed_addr constant [30 x i8] c"Loaded %d records from CDX.\0A\0A\00", align 1
@.str.30.1461 = private unnamed_addr constant [5 x i8] c" \09\0D\0A\00", align 1
@.str.31.1462 = private unnamed_addr constant [4 x i8] c"CDX\00", align 1
@.str.58.1465 = private unnamed_addr constant [51 x i8] c"metadata://gnu.org/software/wget/warc/MANIFEST.txt\00", align 1
@.str.59.1466 = private unnamed_addr constant [11 x i8] c"text/plain\00", align 1
@.str.60.1467 = private unnamed_addr constant [37 x i8] c"Could not open temporary WARC file.\0A\00", align 1
@.str.61.1468 = private unnamed_addr constant [57 x i8] c"metadata://gnu.org/software/wget/warc/wget_arguments.txt\00", align 1
@.str.62.1471 = private unnamed_addr constant [47 x i8] c"metadata://gnu.org/software/wget/warc/wget.log\00", align 1
@.str.22.1472 = private unnamed_addr constant [9 x i8] c"resource\00", align 1
@.str.79.1473 = private unnamed_addr constant [25 x i8] c"application/octet-stream\00", align 1
@.str.15.1474 = private unnamed_addr constant [17 x i8] c"WARC-Warcinfo-ID\00", align 1
@.str.18.1475 = private unnamed_addr constant [19 x i8] c"WARC-Concurrent-To\00", align 1
@.str.11.1476 = private unnamed_addr constant [16 x i8] c"WARC-Target-URI\00", align 1
@.str.67.1477 = private unnamed_addr constant [16 x i8] c"WARC-IP-Address\00", align 1
@.str.23.1478 = private unnamed_addr constant [9 x i8] c"metadata\00", align 1
@.str.10.1481 = private unnamed_addr constant [8 x i8] c"request\00", align 1
@.str.13.1482 = private unnamed_addr constant [33 x i8] c"application/http;msgtype=request\00", align 1
@.str.16.1485 = private unnamed_addr constant [63 x i8] c"Found exact match in CDX file. Saving revisit record to WARC.\0A\00", align 1
@.str.17.1486 = private unnamed_addr constant [9 x i8] c"response\00", align 1
@.str.21.1487 = private unnamed_addr constant [34 x i8] c"application/http;msgtype=response\00", align 1
@.str.77.1488 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.78.1489 = private unnamed_addr constant [33 x i8] c"%s %s %s %s %d %s %s - %s %s %s\0A\00", align 1
@.str.71.1490 = private unnamed_addr constant [8 x i8] c"revisit\00", align 1
@.str.72.1491 = private unnamed_addr constant [15 x i8] c"WARC-Refers-To\00", align 1
@.str.73.1492 = private unnamed_addr constant [13 x i8] c"WARC-Profile\00", align 1
@.str.74.1493 = private unnamed_addr constant [65 x i8] c"http://netpreserve.org/warc/1.0/revisit/identical-payload-digest\00", align 1
@.str.75.1494 = private unnamed_addr constant [15 x i8] c"WARC-Truncated\00", align 1
@.str.76.1495 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@char_prop = dso_local global [256 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\01\01\01\10\01\01\01\01\01\00\01\01\10\04\00PPPPPPPPPP\01\01\01\01\01\01\01PPPPPP\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\01\01\01\01\10\01``````                    \01\01\01\11\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08", align 16
@.str.1506 = private unnamed_addr constant [8 x i8] c"aprintf\00", align 1
@.str.36.1507 = private unnamed_addr constant [61 x i8] c"%s: %s: Failed to allocate enough memory; memory exhausted.\0A\00", align 1
@.str.37.1508 = private unnamed_addr constant [57 x i8] c"%s: %s: Failed to allocate %ld bytes; memory exhausted.\0A\00", align 1
@.str.1.1511 = private unnamed_addr constant [9 x i8] c"%H:%M:%S\00", align 1
@fmttime.output = internal global [32 x i8] zeroinitializer, align 16
@.str.2.1514 = private unnamed_addr constant [18 x i8] c"%Y-%m-%d %H:%M:%S\00", align 1
@.str.3.1517 = private unnamed_addr constant [9 x i8] c"wget-log\00", align 1
@.str.4.1520 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@.str.5.1521 = private unnamed_addr constant [35 x i8] c"Continuing in background, pid %d.\0A\00", align 1
@.str.6.1522 = private unnamed_addr constant [31 x i8] c"Output will be written to %s.\0A\00", align 1
@.str.7.1523 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str.8.1524 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.9.1525 = private unnamed_addr constant [40 x i8] c"Failed to redirect stdin to /dev/null.\0A\00", align 1
@.str.10.1526 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.11.1527 = private unnamed_addr constant [41 x i8] c"Failed to redirect stdout to /dev/null.\0A\00", align 1
@.str.12.1528 = private unnamed_addr constant [41 x i8] c"Failed to redirect stderr to /dev/null.\0A\00", align 1
@.str.17.1533 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.13.1540 = private unnamed_addr constant [15 x i8] c"utime(%s): %s\0A\00", align 1
@.str.14.1543 = private unnamed_addr constant [25 x i8] c"Unlinking %s (symlink).\0A\00", align 1
@.str.15.1544 = private unnamed_addr constant [33 x i8] c"Failed to unlink symlink %s: %s\0A\00", align 1
@.str.16.1549 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.18.1562 = private unnamed_addr constant [5 x i8] c"*?[]\00", align 1
@.str.19.1571 = private unnamed_addr constant [5 x i8] c"html\00", align 1
@.str.20.1572 = private unnamed_addr constant [4 x i8] c"htm\00", align 1
@.str.21.1585 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@with_thousand_seps.outbuf = internal global [48 x i8] zeroinitializer, align 16
@get_grouping_data.initialized = internal global i8 0, align 1
@get_grouping_data.cached_sep = internal global i8* null, align 8
@get_grouping_data.cached_grouping = internal global i8* null, align 8
@.str.38.1594 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.32.1595 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.39.1596 = private unnamed_addr constant [2 x i8] c"\03\00", align 1
@human_readable.buf = internal global [8 x i8] zeroinitializer, align 1
@.str.22.1599 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@human_readable.powers = internal global [6 x i8] c"KMGTPE", align 1
@.str.23.1600 = private unnamed_addr constant [7 x i8] c"%.*f%c\00", align 1
@number_to_static_string.ringpos = internal global i32 0, align 4
@number_to_static_string.ring = internal global [3 x [24 x i8]] zeroinitializer, align 16, !track !79
@rnd_seeded = internal global i32 0, align 4
@run_with_timeout_env = internal global [1 x %struct.__jmp_buf_tag] zeroinitializer, align 16
@base64_encode.tbl = internal constant [64 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", align 16
@base64_decode.base64_char_to_value = internal constant [128 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF>\FF\FF\FF?456789:;<=\FF\FF\FF\FF\FF\FF\FF\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\FF\FF\FF\FF\FF\FF\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123\FF\FF\FF\FF\FF", align 16
@.str.24.1621 = private unnamed_addr constant [35 x i8] c"Invalid regular expression %s, %s\0A\00", align 1
@.str.25.1626 = private unnamed_addr constant [29 x i8] c"Error while matching %s: %d\0A\00", align 1
@print_decimal.buf = internal global [32 x i8] zeroinitializer, align 16
@.str.26.1633 = private unnamed_addr constant [5 x i8] c"%.0f\00", align 1
@.str.27.1634 = private unnamed_addr constant [5 x i8] c"%.1f\00", align 1
@.str.28.1635 = private unnamed_addr constant [5 x i8] c"%.1g\00", align 1
@.str.29.1636 = private unnamed_addr constant [5 x i8] c"%.3f\00", align 1
@.str.30.1637 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.31.1640 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.33.1641 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.34.1642 = private unnamed_addr constant [9 x i8] c"pathconf\00", align 1
@.str.35.1643 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@final_exit_status = internal global i32 0, align 4
@compiled_features = dso_local global [13 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1650, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.1651, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.1652, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.1653, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.1654, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5.1655, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6.1656, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.1657, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.1658, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9.1659, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.1660, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11.1661, i32 0, i32 0), i8* null], align 16
@.str.1650 = private unnamed_addr constant [8 x i8] c"+digest\00", align 1
@.str.1.1651 = private unnamed_addr constant [7 x i8] c"-gpgme\00", align 1
@.str.2.1652 = private unnamed_addr constant [7 x i8] c"+https\00", align 1
@.str.3.1653 = private unnamed_addr constant [6 x i8] c"+ipv6\00", align 1
@.str.4.1654 = private unnamed_addr constant [5 x i8] c"+iri\00", align 1
@.str.5.1655 = private unnamed_addr constant [12 x i8] c"+large-file\00", align 1
@.str.6.1656 = private unnamed_addr constant [10 x i8] c"-metalink\00", align 1
@.str.7.1657 = private unnamed_addr constant [5 x i8] c"+nls\00", align 1
@.str.8.1658 = private unnamed_addr constant [6 x i8] c"+ntlm\00", align 1
@.str.9.1659 = private unnamed_addr constant [6 x i8] c"+opie\00", align 1
@.str.10.1660 = private unnamed_addr constant [5 x i8] c"-psl\00", align 1
@.str.11.1661 = private unnamed_addr constant [12 x i8] c"+ssl/gnutls\00", align 1
@.str.1664 = private unnamed_addr constant [9 x i8] c"charset=\00", align 1
@.str.1.1667 = private unnamed_addr constant [25 x i8] c"Encoding %s isn't valid\0A\00", align 1
@.str.2.1670 = private unnamed_addr constant [33 x i8] c"locale_to_utf8: locale is unset\0A\00", align 1
@.str.3.1671 = private unnamed_addr constant [6 x i8] c"utf-8\00", align 1
@.str.4.1672 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.11.1673 = private unnamed_addr constant [45 x i8] c"Conversion from %s to UTF-8 isn't supported\0A\00", align 1
@.str.12.1674 = private unnamed_addr constant [34 x i8] c"converted '%s' (%s) -> '%s' (%s)\0A\00", align 1
@.str.13.1675 = private unnamed_addr constant [54 x i8] c"%s: logging suppressed, strings may contain password\0A\00", align 1
@__func__.do_conversion = private unnamed_addr constant [14 x i8] c"do_conversion\00", align 1
@.str.14.1676 = private unnamed_addr constant [54 x i8] c"Incomplete or invalid multibyte sequence encountered\0A\00", align 1
@.str.15.1677 = private unnamed_addr constant [20 x i8] c"Unhandled errno %d\0A\00", align 1
@.str.5.1682 = private unnamed_addr constant [28 x i8] c"Invalid UTF-8 sequence: %s\0A\00", align 1
@.str.6.1683 = private unnamed_addr constant [28 x i8] c"idn_encode failed (%d): %s\0A\00", align 1
@.str.7.1686 = private unnamed_addr constant [28 x i8] c"idn_decode failed (%d): %s\0A\00", align 1
@.str.9.1695 = private unnamed_addr constant [5 x i8] c"None\00", align 1
@.str.8.1696 = private unnamed_addr constant [19 x i8] c"URI encoding = %s\0A\00", align 1
@.str.10.1699 = private unnamed_addr constant [27 x i8] c"URI content encoding = %s\0A\00", align 1
@version_string = dso_local global i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1702, i32 0, i32 0), align 8, !track !80
@.str.1702 = private unnamed_addr constant [7 x i8] c"1.17.1\00", align 1
@compilation_string = dso_local global i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.1.1705, i32 0, i32 0), align 8, !track !81
@.str.1.1705 = private unnamed_addr constant [239 x i8] c"wllvm -DHAVE_CONFIG_H -DSYSTEM_WGETRC=\22/usr/local/etc/wgetrc\22 -DLOCALEDIR=\22/usr/local/share/locale\22 -I. -I../lib -I../lib -I/usr/include/p11-kit-1 -DHAVE_LIBGNUTLS -DNDEBUG -O0 -Xclang -disable-O0-optnone -fno-inline -fno-inline-functions\00", align 1
@link_string = dso_local global i8* getelementptr inbounds ([213 x i8], [213 x i8]* @.str.2.1708, i32 0, i32 0), align 8, !track !82
@.str.2.1708 = private unnamed_addr constant [213 x i8] c"wllvm -I/usr/include/p11-kit-1 -DHAVE_LIBGNUTLS -DNDEBUG -O0 -Xclang -disable-O0-optnone -fno-inline -fno-inline-functions -lpcre -luuid -lnettle -lgnutls -lz -lidn ftp-opie.o gnutls.o http-ntlm.o ../lib/libgnu.a\00", align 1
@skey_response.english = internal global [30 x i8] zeroinitializer, align 16, !track !83
@Wp = internal global [2048 x [4 x i8]] [[4 x i8] c"A\00\00\00", [4 x i8] c"ABE\00", [4 x i8] c"ACE\00", [4 x i8] c"ACT\00", [4 x i8] c"AD\00\00", [4 x i8] c"ADA\00", [4 x i8] c"ADD\00", [4 x i8] c"AGO\00", [4 x i8] c"AID\00", [4 x i8] c"AIM\00", [4 x i8] c"AIR\00", [4 x i8] c"ALL\00", [4 x i8] c"ALP\00", [4 x i8] c"AM\00\00", [4 x i8] c"AMY\00", [4 x i8] c"AN\00\00", [4 x i8] c"ANA\00", [4 x i8] c"AND\00", [4 x i8] c"ANN\00", [4 x i8] c"ANT\00", [4 x i8] c"ANY\00", [4 x i8] c"APE\00", [4 x i8] c"APS\00", [4 x i8] c"APT\00", [4 x i8] c"ARC\00", [4 x i8] c"ARE\00", [4 x i8] c"ARK\00", [4 x i8] c"ARM\00", [4 x i8] c"ART\00", [4 x i8] c"AS\00\00", [4 x i8] c"ASH\00", [4 x i8] c"ASK\00", [4 x i8] c"AT\00\00", [4 x i8] c"ATE\00", [4 x i8] c"AUG\00", [4 x i8] c"AUK\00", [4 x i8] c"AVE\00", [4 x i8] c"AWE\00", [4 x i8] c"AWK\00", [4 x i8] c"AWL\00", [4 x i8] c"AWN\00", [4 x i8] c"AX\00\00", [4 x i8] c"AYE\00", [4 x i8] c"BAD\00", [4 x i8] c"BAG\00", [4 x i8] c"BAH\00", [4 x i8] c"BAM\00", [4 x i8] c"BAN\00", [4 x i8] c"BAR\00", [4 x i8] c"BAT\00", [4 x i8] c"BAY\00", [4 x i8] c"BE\00\00", [4 x i8] c"BED\00", [4 x i8] c"BEE\00", [4 x i8] c"BEG\00", [4 x i8] c"BEN\00", [4 x i8] c"BET\00", [4 x i8] c"BEY\00", [4 x i8] c"BIB\00", [4 x i8] c"BID\00", [4 x i8] c"BIG\00", [4 x i8] c"BIN\00", [4 x i8] c"BIT\00", [4 x i8] c"BOB\00", [4 x i8] c"BOG\00", [4 x i8] c"BON\00", [4 x i8] c"BOO\00", [4 x i8] c"BOP\00", [4 x i8] c"BOW\00", [4 x i8] c"BOY\00", [4 x i8] c"BUB\00", [4 x i8] c"BUD\00", [4 x i8] c"BUG\00", [4 x i8] c"BUM\00", [4 x i8] c"BUN\00", [4 x i8] c"BUS\00", [4 x i8] c"BUT\00", [4 x i8] c"BUY\00", [4 x i8] c"BY\00\00", [4 x i8] c"BYE\00", [4 x i8] c"CAB\00", [4 x i8] c"CAL\00", [4 x i8] c"CAM\00", [4 x i8] c"CAN\00", [4 x i8] c"CAP\00", [4 x i8] c"CAR\00", [4 x i8] c"CAT\00", [4 x i8] c"CAW\00", [4 x i8] c"COD\00", [4 x i8] c"COG\00", [4 x i8] c"COL\00", [4 x i8] c"CON\00", [4 x i8] c"COO\00", [4 x i8] c"COP\00", [4 x i8] c"COT\00", [4 x i8] c"COW\00", [4 x i8] c"COY\00", [4 x i8] c"CRY\00", [4 x i8] c"CUB\00", [4 x i8] c"CUE\00", [4 x i8] c"CUP\00", [4 x i8] c"CUR\00", [4 x i8] c"CUT\00", [4 x i8] c"DAB\00", [4 x i8] c"DAD\00", [4 x i8] c"DAM\00", [4 x i8] c"DAN\00", [4 x i8] c"DAR\00", [4 x i8] c"DAY\00", [4 x i8] c"DEE\00", [4 x i8] c"DEL\00", [4 x i8] c"DEN\00", [4 x i8] c"DES\00", [4 x i8] c"DEW\00", [4 x i8] c"DID\00", [4 x i8] c"DIE\00", [4 x i8] c"DIG\00", [4 x i8] c"DIN\00", [4 x i8] c"DIP\00", [4 x i8] c"DO\00\00", [4 x i8] c"DOE\00", [4 x i8] c"DOG\00", [4 x i8] c"DON\00", [4 x i8] c"DOT\00", [4 x i8] c"DOW\00", [4 x i8] c"DRY\00", [4 x i8] c"DUB\00", [4 x i8] c"DUD\00", [4 x i8] c"DUE\00", [4 x i8] c"DUG\00", [4 x i8] c"DUN\00", [4 x i8] c"EAR\00", [4 x i8] c"EAT\00", [4 x i8] c"ED\00\00", [4 x i8] c"EEL\00", [4 x i8] c"EGG\00", [4 x i8] c"EGO\00", [4 x i8] c"ELI\00", [4 x i8] c"ELK\00", [4 x i8] c"ELM\00", [4 x i8] c"ELY\00", [4 x i8] c"EM\00\00", [4 x i8] c"END\00", [4 x i8] c"EST\00", [4 x i8] c"ETC\00", [4 x i8] c"EVA\00", [4 x i8] c"EVE\00", [4 x i8] c"EWE\00", [4 x i8] c"EYE\00", [4 x i8] c"FAD\00", [4 x i8] c"FAN\00", [4 x i8] c"FAR\00", [4 x i8] c"FAT\00", [4 x i8] c"FAY\00", [4 x i8] c"FED\00", [4 x i8] c"FEE\00", [4 x i8] c"FEW\00", [4 x i8] c"FIB\00", [4 x i8] c"FIG\00", [4 x i8] c"FIN\00", [4 x i8] c"FIR\00", [4 x i8] c"FIT\00", [4 x i8] c"FLO\00", [4 x i8] c"FLY\00", [4 x i8] c"FOE\00", [4 x i8] c"FOG\00", [4 x i8] c"FOR\00", [4 x i8] c"FRY\00", [4 x i8] c"FUM\00", [4 x i8] c"FUN\00", [4 x i8] c"FUR\00", [4 x i8] c"GAB\00", [4 x i8] c"GAD\00", [4 x i8] c"GAG\00", [4 x i8] c"GAL\00", [4 x i8] c"GAM\00", [4 x i8] c"GAP\00", [4 x i8] c"GAS\00", [4 x i8] c"GAY\00", [4 x i8] c"GEE\00", [4 x i8] c"GEL\00", [4 x i8] c"GEM\00", [4 x i8] c"GET\00", [4 x i8] c"GIG\00", [4 x i8] c"GIL\00", [4 x i8] c"GIN\00", [4 x i8] c"GO\00\00", [4 x i8] c"GOT\00", [4 x i8] c"GUM\00", [4 x i8] c"GUN\00", [4 x i8] c"GUS\00", [4 x i8] c"GUT\00", [4 x i8] c"GUY\00", [4 x i8] c"GYM\00", [4 x i8] c"GYP\00", [4 x i8] c"HA\00\00", [4 x i8] c"HAD\00", [4 x i8] c"HAL\00", [4 x i8] c"HAM\00", [4 x i8] c"HAN\00", [4 x i8] c"HAP\00", [4 x i8] c"HAS\00", [4 x i8] c"HAT\00", [4 x i8] c"HAW\00", [4 x i8] c"HAY\00", [4 x i8] c"HE\00\00", [4 x i8] c"HEM\00", [4 x i8] c"HEN\00", [4 x i8] c"HER\00", [4 x i8] c"HEW\00", [4 x i8] c"HEY\00", [4 x i8] c"HI\00\00", [4 x i8] c"HID\00", [4 x i8] c"HIM\00", [4 x i8] c"HIP\00", [4 x i8] c"HIS\00", [4 x i8] c"HIT\00", [4 x i8] c"HO\00\00", [4 x i8] c"HOB\00", [4 x i8] c"HOC\00", [4 x i8] c"HOE\00", [4 x i8] c"HOG\00", [4 x i8] c"HOP\00", [4 x i8] c"HOT\00", [4 x i8] c"HOW\00", [4 x i8] c"HUB\00", [4 x i8] c"HUE\00", [4 x i8] c"HUG\00", [4 x i8] c"HUH\00", [4 x i8] c"HUM\00", [4 x i8] c"HUT\00", [4 x i8] c"I\00\00\00", [4 x i8] c"ICY\00", [4 x i8] c"IDA\00", [4 x i8] c"IF\00\00", [4 x i8] c"IKE\00", [4 x i8] c"ILL\00", [4 x i8] c"INK\00", [4 x i8] c"INN\00", [4 x i8] c"IO\00\00", [4 x i8] c"ION\00", [4 x i8] c"IQ\00\00", [4 x i8] c"IRA\00", [4 x i8] c"IRE\00", [4 x i8] c"IRK\00", [4 x i8] c"IS\00\00", [4 x i8] c"IT\00\00", [4 x i8] c"ITS\00", [4 x i8] c"IVY\00", [4 x i8] c"JAB\00", [4 x i8] c"JAG\00", [4 x i8] c"JAM\00", [4 x i8] c"JAN\00", [4 x i8] c"JAR\00", [4 x i8] c"JAW\00", [4 x i8] c"JAY\00", [4 x i8] c"JET\00", [4 x i8] c"JIG\00", [4 x i8] c"JIM\00", [4 x i8] c"JO\00\00", [4 x i8] c"JOB\00", [4 x i8] c"JOE\00", [4 x i8] c"JOG\00", [4 x i8] c"JOT\00", [4 x i8] c"JOY\00", [4 x i8] c"JUG\00", [4 x i8] c"JUT\00", [4 x i8] c"KAY\00", [4 x i8] c"KEG\00", [4 x i8] c"KEN\00", [4 x i8] c"KEY\00", [4 x i8] c"KID\00", [4 x i8] c"KIM\00", [4 x i8] c"KIN\00", [4 x i8] c"KIT\00", [4 x i8] c"LA\00\00", [4 x i8] c"LAB\00", [4 x i8] c"LAC\00", [4 x i8] c"LAD\00", [4 x i8] c"LAG\00", [4 x i8] c"LAM\00", [4 x i8] c"LAP\00", [4 x i8] c"LAW\00", [4 x i8] c"LAY\00", [4 x i8] c"LEA\00", [4 x i8] c"LED\00", [4 x i8] c"LEE\00", [4 x i8] c"LEG\00", [4 x i8] c"LEN\00", [4 x i8] c"LEO\00", [4 x i8] c"LET\00", [4 x i8] c"LEW\00", [4 x i8] c"LID\00", [4 x i8] c"LIE\00", [4 x i8] c"LIN\00", [4 x i8] c"LIP\00", [4 x i8] c"LIT\00", [4 x i8] c"LO\00\00", [4 x i8] c"LOB\00", [4 x i8] c"LOG\00", [4 x i8] c"LOP\00", [4 x i8] c"LOS\00", [4 x i8] c"LOT\00", [4 x i8] c"LOU\00", [4 x i8] c"LOW\00", [4 x i8] c"LOY\00", [4 x i8] c"LUG\00", [4 x i8] c"LYE\00", [4 x i8] c"MA\00\00", [4 x i8] c"MAC\00", [4 x i8] c"MAD\00", [4 x i8] c"MAE\00", [4 x i8] c"MAN\00", [4 x i8] c"MAO\00", [4 x i8] c"MAP\00", [4 x i8] c"MAT\00", [4 x i8] c"MAW\00", [4 x i8] c"MAY\00", [4 x i8] c"ME\00\00", [4 x i8] c"MEG\00", [4 x i8] c"MEL\00", [4 x i8] c"MEN\00", [4 x i8] c"MET\00", [4 x i8] c"MEW\00", [4 x i8] c"MID\00", [4 x i8] c"MIN\00", [4 x i8] c"MIT\00", [4 x i8] c"MOB\00", [4 x i8] c"MOD\00", [4 x i8] c"MOE\00", [4 x i8] c"MOO\00", [4 x i8] c"MOP\00", [4 x i8] c"MOS\00", [4 x i8] c"MOT\00", [4 x i8] c"MOW\00", [4 x i8] c"MUD\00", [4 x i8] c"MUG\00", [4 x i8] c"MUM\00", [4 x i8] c"MY\00\00", [4 x i8] c"NAB\00", [4 x i8] c"NAG\00", [4 x i8] c"NAN\00", [4 x i8] c"NAP\00", [4 x i8] c"NAT\00", [4 x i8] c"NAY\00", [4 x i8] c"NE\00\00", [4 x i8] c"NED\00", [4 x i8] c"NEE\00", [4 x i8] c"NET\00", [4 x i8] c"NEW\00", [4 x i8] c"NIB\00", [4 x i8] c"NIL\00", [4 x i8] c"NIP\00", [4 x i8] c"NIT\00", [4 x i8] c"NO\00\00", [4 x i8] c"NOB\00", [4 x i8] c"NOD\00", [4 x i8] c"NON\00", [4 x i8] c"NOR\00", [4 x i8] c"NOT\00", [4 x i8] c"NOV\00", [4 x i8] c"NOW\00", [4 x i8] c"NU\00\00", [4 x i8] c"NUN\00", [4 x i8] c"NUT\00", [4 x i8] c"O\00\00\00", [4 x i8] c"OAF\00", [4 x i8] c"OAK\00", [4 x i8] c"OAR\00", [4 x i8] c"OAT\00", [4 x i8] c"ODD\00", [4 x i8] c"ODE\00", [4 x i8] c"OF\00\00", [4 x i8] c"OFF\00", [4 x i8] c"OFT\00", [4 x i8] c"OH\00\00", [4 x i8] c"OIL\00", [4 x i8] c"OK\00\00", [4 x i8] c"OLD\00", [4 x i8] c"ON\00\00", [4 x i8] c"ONE\00", [4 x i8] c"OR\00\00", [4 x i8] c"ORB\00", [4 x i8] c"ORE\00", [4 x i8] c"ORR\00", [4 x i8] c"OS\00\00", [4 x i8] c"OTT\00", [4 x i8] c"OUR\00", [4 x i8] c"OUT\00", [4 x i8] c"OVA\00", [4 x i8] c"OW\00\00", [4 x i8] c"OWE\00", [4 x i8] c"OWL\00", [4 x i8] c"OWN\00", [4 x i8] c"OX\00\00", [4 x i8] c"PA\00\00", [4 x i8] c"PAD\00", [4 x i8] c"PAL\00", [4 x i8] c"PAM\00", [4 x i8] c"PAN\00", [4 x i8] c"PAP\00", [4 x i8] c"PAR\00", [4 x i8] c"PAT\00", [4 x i8] c"PAW\00", [4 x i8] c"PAY\00", [4 x i8] c"PEA\00", [4 x i8] c"PEG\00", [4 x i8] c"PEN\00", [4 x i8] c"PEP\00", [4 x i8] c"PER\00", [4 x i8] c"PET\00", [4 x i8] c"PEW\00", [4 x i8] c"PHI\00", [4 x i8] c"PI\00\00", [4 x i8] c"PIE\00", [4 x i8] c"PIN\00", [4 x i8] c"PIT\00", [4 x i8] c"PLY\00", [4 x i8] c"PO\00\00", [4 x i8] c"POD\00", [4 x i8] c"POE\00", [4 x i8] c"POP\00", [4 x i8] c"POT\00", [4 x i8] c"POW\00", [4 x i8] c"PRO\00", [4 x i8] c"PRY\00", [4 x i8] c"PUB\00", [4 x i8] c"PUG\00", [4 x i8] c"PUN\00", [4 x i8] c"PUP\00", [4 x i8] c"PUT\00", [4 x i8] c"QUO\00", [4 x i8] c"RAG\00", [4 x i8] c"RAM\00", [4 x i8] c"RAN\00", [4 x i8] c"RAP\00", [4 x i8] c"RAT\00", [4 x i8] c"RAW\00", [4 x i8] c"RAY\00", [4 x i8] c"REB\00", [4 x i8] c"RED\00", [4 x i8] c"REP\00", [4 x i8] c"RET\00", [4 x i8] c"RIB\00", [4 x i8] c"RID\00", [4 x i8] c"RIG\00", [4 x i8] c"RIM\00", [4 x i8] c"RIO\00", [4 x i8] c"RIP\00", [4 x i8] c"ROB\00", [4 x i8] c"ROD\00", [4 x i8] c"ROE\00", [4 x i8] c"RON\00", [4 x i8] c"ROT\00", [4 x i8] c"ROW\00", [4 x i8] c"ROY\00", [4 x i8] c"RUB\00", [4 x i8] c"RUE\00", [4 x i8] c"RUG\00", [4 x i8] c"RUM\00", [4 x i8] c"RUN\00", [4 x i8] c"RYE\00", [4 x i8] c"SAC\00", [4 x i8] c"SAD\00", [4 x i8] c"SAG\00", [4 x i8] c"SAL\00", [4 x i8] c"SAM\00", [4 x i8] c"SAN\00", [4 x i8] c"SAP\00", [4 x i8] c"SAT\00", [4 x i8] c"SAW\00", [4 x i8] c"SAY\00", [4 x i8] c"SEA\00", [4 x i8] c"SEC\00", [4 x i8] c"SEE\00", [4 x i8] c"SEN\00", [4 x i8] c"SET\00", [4 x i8] c"SEW\00", [4 x i8] c"SHE\00", [4 x i8] c"SHY\00", [4 x i8] c"SIN\00", [4 x i8] c"SIP\00", [4 x i8] c"SIR\00", [4 x i8] c"SIS\00", [4 x i8] c"SIT\00", [4 x i8] c"SKI\00", [4 x i8] c"SKY\00", [4 x i8] c"SLY\00", [4 x i8] c"SO\00\00", [4 x i8] c"SOB\00", [4 x i8] c"SOD\00", [4 x i8] c"SON\00", [4 x i8] c"SOP\00", [4 x i8] c"SOW\00", [4 x i8] c"SOY\00", [4 x i8] c"SPA\00", [4 x i8] c"SPY\00", [4 x i8] c"SUB\00", [4 x i8] c"SUD\00", [4 x i8] c"SUE\00", [4 x i8] c"SUM\00", [4 x i8] c"SUN\00", [4 x i8] c"SUP\00", [4 x i8] c"TAB\00", [4 x i8] c"TAD\00", [4 x i8] c"TAG\00", [4 x i8] c"TAN\00", [4 x i8] c"TAP\00", [4 x i8] c"TAR\00", [4 x i8] c"TEA\00", [4 x i8] c"TED\00", [4 x i8] c"TEE\00", [4 x i8] c"TEN\00", [4 x i8] c"THE\00", [4 x i8] c"THY\00", [4 x i8] c"TIC\00", [4 x i8] c"TIE\00", [4 x i8] c"TIM\00", [4 x i8] c"TIN\00", [4 x i8] c"TIP\00", [4 x i8] c"TO\00\00", [4 x i8] c"TOE\00", [4 x i8] c"TOG\00", [4 x i8] c"TOM\00", [4 x i8] c"TON\00", [4 x i8] c"TOO\00", [4 x i8] c"TOP\00", [4 x i8] c"TOW\00", [4 x i8] c"TOY\00", [4 x i8] c"TRY\00", [4 x i8] c"TUB\00", [4 x i8] c"TUG\00", [4 x i8] c"TUM\00", [4 x i8] c"TUN\00", [4 x i8] c"TWO\00", [4 x i8] c"UN\00\00", [4 x i8] c"UP\00\00", [4 x i8] c"US\00\00", [4 x i8] c"USE\00", [4 x i8] c"VAN\00", [4 x i8] c"VAT\00", [4 x i8] c"VET\00", [4 x i8] c"VIE\00", [4 x i8] c"WAD\00", [4 x i8] c"WAG\00", [4 x i8] c"WAR\00", [4 x i8] c"WAS\00", [4 x i8] c"WAY\00", [4 x i8] c"WE\00\00", [4 x i8] c"WEB\00", [4 x i8] c"WED\00", [4 x i8] c"WEE\00", [4 x i8] c"WET\00", [4 x i8] c"WHO\00", [4 x i8] c"WHY\00", [4 x i8] c"WIN\00", [4 x i8] c"WIT\00", [4 x i8] c"WOK\00", [4 x i8] c"WON\00", [4 x i8] c"WOO\00", [4 x i8] c"WOW\00", [4 x i8] c"WRY\00", [4 x i8] c"WU\00\00", [4 x i8] c"YAM\00", [4 x i8] c"YAP\00", [4 x i8] c"YAW\00", [4 x i8] c"YE\00\00", [4 x i8] c"YEA\00", [4 x i8] c"YES\00", [4 x i8] c"YET\00", [4 x i8] c"YOU\00", [4 x i8] c"ABED", [4 x i8] c"ABEL", [4 x i8] c"ABET", [4 x i8] c"ABLE", [4 x i8] c"ABUT", [4 x i8] c"ACHE", [4 x i8] c"ACID", [4 x i8] c"ACME", [4 x i8] c"ACRE", [4 x i8] c"ACTA", [4 x i8] c"ACTS", [4 x i8] c"ADAM", [4 x i8] c"ADDS", [4 x i8] c"ADEN", [4 x i8] c"AFAR", [4 x i8] c"AFRO", [4 x i8] c"AGEE", [4 x i8] c"AHEM", [4 x i8] c"AHOY", [4 x i8] c"AIDA", [4 x i8] c"AIDE", [4 x i8] c"AIDS", [4 x i8] c"AIRY", [4 x i8] c"AJAR", [4 x i8] c"AKIN", [4 x i8] c"ALAN", [4 x i8] c"ALEC", [4 x i8] c"ALGA", [4 x i8] c"ALIA", [4 x i8] c"ALLY", [4 x i8] c"ALMA", [4 x i8] c"ALOE", [4 x i8] c"ALSO", [4 x i8] c"ALTO", [4 x i8] c"ALUM", [4 x i8] c"ALVA", [4 x i8] c"AMEN", [4 x i8] c"AMES", [4 x i8] c"AMID", [4 x i8] c"AMMO", [4 x i8] c"AMOK", [4 x i8] c"AMOS", [4 x i8] c"AMRA", [4 x i8] c"ANDY", [4 x i8] c"ANEW", [4 x i8] c"ANNA", [4 x i8] c"ANNE", [4 x i8] c"ANTE", [4 x i8] c"ANTI", [4 x i8] c"AQUA", [4 x i8] c"ARAB", [4 x i8] c"ARCH", [4 x i8] c"AREA", [4 x i8] c"ARGO", [4 x i8] c"ARID", [4 x i8] c"ARMY", [4 x i8] c"ARTS", [4 x i8] c"ARTY", [4 x i8] c"ASIA", [4 x i8] c"ASKS", [4 x i8] c"ATOM", [4 x i8] c"AUNT", [4 x i8] c"AURA", [4 x i8] c"AUTO", [4 x i8] c"AVER", [4 x i8] c"AVID", [4 x i8] c"AVIS", [4 x i8] c"AVON", [4 x i8] c"AVOW", [4 x i8] c"AWAY", [4 x i8] c"AWRY", [4 x i8] c"BABE", [4 x i8] c"BABY", [4 x i8] c"BACH", [4 x i8] c"BACK", [4 x i8] c"BADE", [4 x i8] c"BAIL", [4 x i8] c"BAIT", [4 x i8] c"BAKE", [4 x i8] c"BALD", [4 x i8] c"BALE", [4 x i8] c"BALI", [4 x i8] c"BALK", [4 x i8] c"BALL", [4 x i8] c"BALM", [4 x i8] c"BAND", [4 x i8] c"BANE", [4 x i8] c"BANG", [4 x i8] c"BANK", [4 x i8] c"BARB", [4 x i8] c"BARD", [4 x i8] c"BARE", [4 x i8] c"BARK", [4 x i8] c"BARN", [4 x i8] c"BARR", [4 x i8] c"BASE", [4 x i8] c"BASH", [4 x i8] c"BASK", [4 x i8] c"BASS", [4 x i8] c"BATE", [4 x i8] c"BATH", [4 x i8] c"BAWD", [4 x i8] c"BAWL", [4 x i8] c"BEAD", [4 x i8] c"BEAK", [4 x i8] c"BEAM", [4 x i8] c"BEAN", [4 x i8] c"BEAR", [4 x i8] c"BEAT", [4 x i8] c"BEAU", [4 x i8] c"BECK", [4 x i8] c"BEEF", [4 x i8] c"BEEN", [4 x i8] c"BEER", [4 x i8] c"BEET", [4 x i8] c"BELA", [4 x i8] c"BELL", [4 x i8] c"BELT", [4 x i8] c"BEND", [4 x i8] c"BENT", [4 x i8] c"BERG", [4 x i8] c"BERN", [4 x i8] c"BERT", [4 x i8] c"BESS", [4 x i8] c"BEST", [4 x i8] c"BETA", [4 x i8] c"BETH", [4 x i8] c"BHOY", [4 x i8] c"BIAS", [4 x i8] c"BIDE", [4 x i8] c"BIEN", [4 x i8] c"BILE", [4 x i8] c"BILK", [4 x i8] c"BILL", [4 x i8] c"BIND", [4 x i8] c"BING", [4 x i8] c"BIRD", [4 x i8] c"BITE", [4 x i8] c"BITS", [4 x i8] c"BLAB", [4 x i8] c"BLAT", [4 x i8] c"BLED", [4 x i8] c"BLEW", [4 x i8] c"BLOB", [4 x i8] c"BLOC", [4 x i8] c"BLOT", [4 x i8] c"BLOW", [4 x i8] c"BLUE", [4 x i8] c"BLUM", [4 x i8] c"BLUR", [4 x i8] c"BOAR", [4 x i8] c"BOAT", [4 x i8] c"BOCA", [4 x i8] c"BOCK", [4 x i8] c"BODE", [4 x i8] c"BODY", [4 x i8] c"BOGY", [4 x i8] c"BOHR", [4 x i8] c"BOIL", [4 x i8] c"BOLD", [4 x i8] c"BOLO", [4 x i8] c"BOLT", [4 x i8] c"BOMB", [4 x i8] c"BONA", [4 x i8] c"BOND", [4 x i8] c"BONE", [4 x i8] c"BONG", [4 x i8] c"BONN", [4 x i8] c"BONY", [4 x i8] c"BOOK", [4 x i8] c"BOOM", [4 x i8] c"BOON", [4 x i8] c"BOOT", [4 x i8] c"BORE", [4 x i8] c"BORG", [4 x i8] c"BORN", [4 x i8] c"BOSE", [4 x i8] c"BOSS", [4 x i8] c"BOTH", [4 x i8] c"BOUT", [4 x i8] c"BOWL", [4 x i8] c"BOYD", [4 x i8] c"BRAD", [4 x i8] c"BRAE", [4 x i8] c"BRAG", [4 x i8] c"BRAN", [4 x i8] c"BRAY", [4 x i8] c"BRED", [4 x i8] c"BREW", [4 x i8] c"BRIG", [4 x i8] c"BRIM", [4 x i8] c"BROW", [4 x i8] c"BUCK", [4 x i8] c"BUDD", [4 x i8] c"BUFF", [4 x i8] c"BULB", [4 x i8] c"BULK", [4 x i8] c"BULL", [4 x i8] c"BUNK", [4 x i8] c"BUNT", [4 x i8] c"BUOY", [4 x i8] c"BURG", [4 x i8] c"BURL", [4 x i8] c"BURN", [4 x i8] c"BURR", [4 x i8] c"BURT", [4 x i8] c"BURY", [4 x i8] c"BUSH", [4 x i8] c"BUSS", [4 x i8] c"BUST", [4 x i8] c"BUSY", [4 x i8] c"BYTE", [4 x i8] c"CADY", [4 x i8] c"CAFE", [4 x i8] c"CAGE", [4 x i8] c"CAIN", [4 x i8] c"CAKE", [4 x i8] c"CALF", [4 x i8] c"CALL", [4 x i8] c"CALM", [4 x i8] c"CAME", [4 x i8] c"CANE", [4 x i8] c"CANT", [4 x i8] c"CARD", [4 x i8] c"CARE", [4 x i8] c"CARL", [4 x i8] c"CARR", [4 x i8] c"CART", [4 x i8] c"CASE", [4 x i8] c"CASH", [4 x i8] c"CASK", [4 x i8] c"CAST", [4 x i8] c"CAVE", [4 x i8] c"CEIL", [4 x i8] c"CELL", [4 x i8] c"CENT", [4 x i8] c"CERN", [4 x i8] c"CHAD", [4 x i8] c"CHAR", [4 x i8] c"CHAT", [4 x i8] c"CHAW", [4 x i8] c"CHEF", [4 x i8] c"CHEN", [4 x i8] c"CHEW", [4 x i8] c"CHIC", [4 x i8] c"CHIN", [4 x i8] c"CHOU", [4 x i8] c"CHOW", [4 x i8] c"CHUB", [4 x i8] c"CHUG", [4 x i8] c"CHUM", [4 x i8] c"CITE", [4 x i8] c"CITY", [4 x i8] c"CLAD", [4 x i8] c"CLAM", [4 x i8] c"CLAN", [4 x i8] c"CLAW", [4 x i8] c"CLAY", [4 x i8] c"CLOD", [4 x i8] c"CLOG", [4 x i8] c"CLOT", [4 x i8] c"CLUB", [4 x i8] c"CLUE", [4 x i8] c"COAL", [4 x i8] c"COAT", [4 x i8] c"COCA", [4 x i8] c"COCK", [4 x i8] c"COCO", [4 x i8] c"CODA", [4 x i8] c"CODE", [4 x i8] c"CODY", [4 x i8] c"COED", [4 x i8] c"COIL", [4 x i8] c"COIN", [4 x i8] c"COKE", [4 x i8] c"COLA", [4 x i8] c"COLD", [4 x i8] c"COLT", [4 x i8] c"COMA", [4 x i8] c"COMB", [4 x i8] c"COME", [4 x i8] c"COOK", [4 x i8] c"COOL", [4 x i8] c"COON", [4 x i8] c"COOT", [4 x i8] c"CORD", [4 x i8] c"CORE", [4 x i8] c"CORK", [4 x i8] c"CORN", [4 x i8] c"COST", [4 x i8] c"COVE", [4 x i8] c"COWL", [4 x i8] c"CRAB", [4 x i8] c"CRAG", [4 x i8] c"CRAM", [4 x i8] c"CRAY", [4 x i8] c"CREW", [4 x i8] c"CRIB", [4 x i8] c"CROW", [4 x i8] c"CRUD", [4 x i8] c"CUBA", [4 x i8] c"CUBE", [4 x i8] c"CUFF", [4 x i8] c"CULL", [4 x i8] c"CULT", [4 x i8] c"CUNY", [4 x i8] c"CURB", [4 x i8] c"CURD", [4 x i8] c"CURE", [4 x i8] c"CURL", [4 x i8] c"CURT", [4 x i8] c"CUTS", [4 x i8] c"DADE", [4 x i8] c"DALE", [4 x i8] c"DAME", [4 x i8] c"DANA", [4 x i8] c"DANE", [4 x i8] c"DANG", [4 x i8] c"DANK", [4 x i8] c"DARE", [4 x i8] c"DARK", [4 x i8] c"DARN", [4 x i8] c"DART", [4 x i8] c"DASH", [4 x i8] c"DATA", [4 x i8] c"DATE", [4 x i8] c"DAVE", [4 x i8] c"DAVY", [4 x i8] c"DAWN", [4 x i8] c"DAYS", [4 x i8] c"DEAD", [4 x i8] c"DEAF", [4 x i8] c"DEAL", [4 x i8] c"DEAN", [4 x i8] c"DEAR", [4 x i8] c"DEBT", [4 x i8] c"DECK", [4 x i8] c"DEED", [4 x i8] c"DEEM", [4 x i8] c"DEER", [4 x i8] c"DEFT", [4 x i8] c"DEFY", [4 x i8] c"DELL", [4 x i8] c"DENT", [4 x i8] c"DENY", [4 x i8] c"DESK", [4 x i8] c"DIAL", [4 x i8] c"DICE", [4 x i8] c"DIED", [4 x i8] c"DIET", [4 x i8] c"DIME", [4 x i8] c"DINE", [4 x i8] c"DING", [4 x i8] c"DINT", [4 x i8] c"DIRE", [4 x i8] c"DIRT", [4 x i8] c"DISC", [4 x i8] c"DISH", [4 x i8] c"DISK", [4 x i8] c"DIVE", [4 x i8] c"DOCK", [4 x i8] c"DOES", [4 x i8] c"DOLE", [4 x i8] c"DOLL", [4 x i8] c"DOLT", [4 x i8] c"DOME", [4 x i8] c"DONE", [4 x i8] c"DOOM", [4 x i8] c"DOOR", [4 x i8] c"DORA", [4 x i8] c"DOSE", [4 x i8] c"DOTE", [4 x i8] c"DOUG", [4 x i8] c"DOUR", [4 x i8] c"DOVE", [4 x i8] c"DOWN", [4 x i8] c"DRAB", [4 x i8] c"DRAG", [4 x i8] c"DRAM", [4 x i8] c"DRAW", [4 x i8] c"DREW", [4 x i8] c"DRUB", [4 x i8] c"DRUG", [4 x i8] c"DRUM", [4 x i8] c"DUAL", [4 x i8] c"DUCK", [4 x i8] c"DUCT", [4 x i8] c"DUEL", [4 x i8] c"DUET", [4 x i8] c"DUKE", [4 x i8] c"DULL", [4 x i8] c"DUMB", [4 x i8] c"DUNE", [4 x i8] c"DUNK", [4 x i8] c"DUSK", [4 x i8] c"DUST", [4 x i8] c"DUTY", [4 x i8] c"EACH", [4 x i8] c"EARL", [4 x i8] c"EARN", [4 x i8] c"EASE", [4 x i8] c"EAST", [4 x i8] c"EASY", [4 x i8] c"EBEN", [4 x i8] c"ECHO", [4 x i8] c"EDDY", [4 x i8] c"EDEN", [4 x i8] c"EDGE", [4 x i8] c"EDGY", [4 x i8] c"EDIT", [4 x i8] c"EDNA", [4 x i8] c"EGAN", [4 x i8] c"ELAN", [4 x i8] c"ELBA", [4 x i8] c"ELLA", [4 x i8] c"ELSE", [4 x i8] c"EMIL", [4 x i8] c"EMIT", [4 x i8] c"EMMA", [4 x i8] c"ENDS", [4 x i8] c"ERIC", [4 x i8] c"EROS", [4 x i8] c"EVEN", [4 x i8] c"EVER", [4 x i8] c"EVIL", [4 x i8] c"EYED", [4 x i8] c"FACE", [4 x i8] c"FACT", [4 x i8] c"FADE", [4 x i8] c"FAIL", [4 x i8] c"FAIN", [4 x i8] c"FAIR", [4 x i8] c"FAKE", [4 x i8] c"FALL", [4 x i8] c"FAME", [4 x i8] c"FANG", [4 x i8] c"FARM", [4 x i8] c"FAST", [4 x i8] c"FATE", [4 x i8] c"FAWN", [4 x i8] c"FEAR", [4 x i8] c"FEAT", [4 x i8] c"FEED", [4 x i8] c"FEEL", [4 x i8] c"FEET", [4 x i8] c"FELL", [4 x i8] c"FELT", [4 x i8] c"FEND", [4 x i8] c"FERN", [4 x i8] c"FEST", [4 x i8] c"FEUD", [4 x i8] c"FIEF", [4 x i8] c"FIGS", [4 x i8] c"FILE", [4 x i8] c"FILL", [4 x i8] c"FILM", [4 x i8] c"FIND", [4 x i8] c"FINE", [4 x i8] c"FINK", [4 x i8] c"FIRE", [4 x i8] c"FIRM", [4 x i8] c"FISH", [4 x i8] c"FISK", [4 x i8] c"FIST", [4 x i8] c"FITS", [4 x i8] c"FIVE", [4 x i8] c"FLAG", [4 x i8] c"FLAK", [4 x i8] c"FLAM", [4 x i8] c"FLAT", [4 x i8] c"FLAW", [4 x i8] c"FLEA", [4 x i8] c"FLED", [4 x i8] c"FLEW", [4 x i8] c"FLIT", [4 x i8] c"FLOC", [4 x i8] c"FLOG", [4 x i8] c"FLOW", [4 x i8] c"FLUB", [4 x i8] c"FLUE", [4 x i8] c"FOAL", [4 x i8] c"FOAM", [4 x i8] c"FOGY", [4 x i8] c"FOIL", [4 x i8] c"FOLD", [4 x i8] c"FOLK", [4 x i8] c"FOND", [4 x i8] c"FONT", [4 x i8] c"FOOD", [4 x i8] c"FOOL", [4 x i8] c"FOOT", [4 x i8] c"FORD", [4 x i8] c"FORE", [4 x i8] c"FORK", [4 x i8] c"FORM", [4 x i8] c"FORT", [4 x i8] c"FOSS", [4 x i8] c"FOUL", [4 x i8] c"FOUR", [4 x i8] c"FOWL", [4 x i8] c"FRAU", [4 x i8] c"FRAY", [4 x i8] c"FRED", [4 x i8] c"FREE", [4 x i8] c"FRET", [4 x i8] c"FREY", [4 x i8] c"FROG", [4 x i8] c"FROM", [4 x i8] c"FUEL", [4 x i8] c"FULL", [4 x i8] c"FUME", [4 x i8] c"FUND", [4 x i8] c"FUNK", [4 x i8] c"FURY", [4 x i8] c"FUSE", [4 x i8] c"FUSS", [4 x i8] c"GAFF", [4 x i8] c"GAGE", [4 x i8] c"GAIL", [4 x i8] c"GAIN", [4 x i8] c"GAIT", [4 x i8] c"GALA", [4 x i8] c"GALE", [4 x i8] c"GALL", [4 x i8] c"GALT", [4 x i8] c"GAME", [4 x i8] c"GANG", [4 x i8] c"GARB", [4 x i8] c"GARY", [4 x i8] c"GASH", [4 x i8] c"GATE", [4 x i8] c"GAUL", [4 x i8] c"GAUR", [4 x i8] c"GAVE", [4 x i8] c"GAWK", [4 x i8] c"GEAR", [4 x i8] c"GELD", [4 x i8] c"GENE", [4 x i8] c"GENT", [4 x i8] c"GERM", [4 x i8] c"GETS", [4 x i8] c"GIBE", [4 x i8] c"GIFT", [4 x i8] c"GILD", [4 x i8] c"GILL", [4 x i8] c"GILT", [4 x i8] c"GINA", [4 x i8] c"GIRD", [4 x i8] c"GIRL", [4 x i8] c"GIST", [4 x i8] c"GIVE", [4 x i8] c"GLAD", [4 x i8] c"GLEE", [4 x i8] c"GLEN", [4 x i8] c"GLIB", [4 x i8] c"GLOB", [4 x i8] c"GLOM", [4 x i8] c"GLOW", [4 x i8] c"GLUE", [4 x i8] c"GLUM", [4 x i8] c"GLUT", [4 x i8] c"GOAD", [4 x i8] c"GOAL", [4 x i8] c"GOAT", [4 x i8] c"GOER", [4 x i8] c"GOES", [4 x i8] c"GOLD", [4 x i8] c"GOLF", [4 x i8] c"GONE", [4 x i8] c"GONG", [4 x i8] c"GOOD", [4 x i8] c"GOOF", [4 x i8] c"GORE", [4 x i8] c"GORY", [4 x i8] c"GOSH", [4 x i8] c"GOUT", [4 x i8] c"GOWN", [4 x i8] c"GRAB", [4 x i8] c"GRAD", [4 x i8] c"GRAY", [4 x i8] c"GREG", [4 x i8] c"GREW", [4 x i8] c"GREY", [4 x i8] c"GRID", [4 x i8] c"GRIM", [4 x i8] c"GRIN", [4 x i8] c"GRIT", [4 x i8] c"GROW", [4 x i8] c"GRUB", [4 x i8] c"GULF", [4 x i8] c"GULL", [4 x i8] c"GUNK", [4 x i8] c"GURU", [4 x i8] c"GUSH", [4 x i8] c"GUST", [4 x i8] c"GWEN", [4 x i8] c"GWYN", [4 x i8] c"HAAG", [4 x i8] c"HAAS", [4 x i8] c"HACK", [4 x i8] c"HAIL", [4 x i8] c"HAIR", [4 x i8] c"HALE", [4 x i8] c"HALF", [4 x i8] c"HALL", [4 x i8] c"HALO", [4 x i8] c"HALT", [4 x i8] c"HAND", [4 x i8] c"HANG", [4 x i8] c"HANK", [4 x i8] c"HANS", [4 x i8] c"HARD", [4 x i8] c"HARK", [4 x i8] c"HARM", [4 x i8] c"HART", [4 x i8] c"HASH", [4 x i8] c"HAST", [4 x i8] c"HATE", [4 x i8] c"HATH", [4 x i8] c"HAUL", [4 x i8] c"HAVE", [4 x i8] c"HAWK", [4 x i8] c"HAYS", [4 x i8] c"HEAD", [4 x i8] c"HEAL", [4 x i8] c"HEAR", [4 x i8] c"HEAT", [4 x i8] c"HEBE", [4 x i8] c"HECK", [4 x i8] c"HEED", [4 x i8] c"HEEL", [4 x i8] c"HEFT", [4 x i8] c"HELD", [4 x i8] c"HELL", [4 x i8] c"HELM", [4 x i8] c"HERB", [4 x i8] c"HERD", [4 x i8] c"HERE", [4 x i8] c"HERO", [4 x i8] c"HERS", [4 x i8] c"HESS", [4 x i8] c"HEWN", [4 x i8] c"HICK", [4 x i8] c"HIDE", [4 x i8] c"HIGH", [4 x i8] c"HIKE", [4 x i8] c"HILL", [4 x i8] c"HILT", [4 x i8] c"HIND", [4 x i8] c"HINT", [4 x i8] c"HIRE", [4 x i8] c"HISS", [4 x i8] c"HIVE", [4 x i8] c"HOBO", [4 x i8] c"HOCK", [4 x i8] c"HOFF", [4 x i8] c"HOLD", [4 x i8] c"HOLE", [4 x i8] c"HOLM", [4 x i8] c"HOLT", [4 x i8] c"HOME", [4 x i8] c"HONE", [4 x i8] c"HONK", [4 x i8] c"HOOD", [4 x i8] c"HOOF", [4 x i8] c"HOOK", [4 x i8] c"HOOT", [4 x i8] c"HORN", [4 x i8] c"HOSE", [4 x i8] c"HOST", [4 x i8] c"HOUR", [4 x i8] c"HOVE", [4 x i8] c"HOWE", [4 x i8] c"HOWL", [4 x i8] c"HOYT", [4 x i8] c"HUCK", [4 x i8] c"HUED", [4 x i8] c"HUFF", [4 x i8] c"HUGE", [4 x i8] c"HUGH", [4 x i8] c"HUGO", [4 x i8] c"HULK", [4 x i8] c"HULL", [4 x i8] c"HUNK", [4 x i8] c"HUNT", [4 x i8] c"HURD", [4 x i8] c"HURL", [4 x i8] c"HURT", [4 x i8] c"HUSH", [4 x i8] c"HYDE", [4 x i8] c"HYMN", [4 x i8] c"IBIS", [4 x i8] c"ICON", [4 x i8] c"IDEA", [4 x i8] c"IDLE", [4 x i8] c"IFFY", [4 x i8] c"INCA", [4 x i8] c"INCH", [4 x i8] c"INTO", [4 x i8] c"IONS", [4 x i8] c"IOTA", [4 x i8] c"IOWA", [4 x i8] c"IRIS", [4 x i8] c"IRMA", [4 x i8] c"IRON", [4 x i8] c"ISLE", [4 x i8] c"ITCH", [4 x i8] c"ITEM", [4 x i8] c"IVAN", [4 x i8] c"JACK", [4 x i8] c"JADE", [4 x i8] c"JAIL", [4 x i8] c"JAKE", [4 x i8] c"JANE", [4 x i8] c"JAVA", [4 x i8] c"JEAN", [4 x i8] c"JEFF", [4 x i8] c"JERK", [4 x i8] c"JESS", [4 x i8] c"JEST", [4 x i8] c"JIBE", [4 x i8] c"JILL", [4 x i8] c"JILT", [4 x i8] c"JIVE", [4 x i8] c"JOAN", [4 x i8] c"JOBS", [4 x i8] c"JOCK", [4 x i8] c"JOEL", [4 x i8] c"JOEY", [4 x i8] c"JOHN", [4 x i8] c"JOIN", [4 x i8] c"JOKE", [4 x i8] c"JOLT", [4 x i8] c"JOVE", [4 x i8] c"JUDD", [4 x i8] c"JUDE", [4 x i8] c"JUDO", [4 x i8] c"JUDY", [4 x i8] c"JUJU", [4 x i8] c"JUKE", [4 x i8] c"JULY", [4 x i8] c"JUNE", [4 x i8] c"JUNK", [4 x i8] c"JUNO", [4 x i8] c"JURY", [4 x i8] c"JUST", [4 x i8] c"JUTE", [4 x i8] c"KAHN", [4 x i8] c"KALE", [4 x i8] c"KANE", [4 x i8] c"KANT", [4 x i8] c"KARL", [4 x i8] c"KATE", [4 x i8] c"KEEL", [4 x i8] c"KEEN", [4 x i8] c"KENO", [4 x i8] c"KENT", [4 x i8] c"KERN", [4 x i8] c"KERR", [4 x i8] c"KEYS", [4 x i8] c"KICK", [4 x i8] c"KILL", [4 x i8] c"KIND", [4 x i8] c"KING", [4 x i8] c"KIRK", [4 x i8] c"KISS", [4 x i8] c"KITE", [4 x i8] c"KLAN", [4 x i8] c"KNEE", [4 x i8] c"KNEW", [4 x i8] c"KNIT", [4 x i8] c"KNOB", [4 x i8] c"KNOT", [4 x i8] c"KNOW", [4 x i8] c"KOCH", [4 x i8] c"KONG", [4 x i8] c"KUDO", [4 x i8] c"KURD", [4 x i8] c"KURT", [4 x i8] c"KYLE", [4 x i8] c"LACE", [4 x i8] c"LACK", [4 x i8] c"LACY", [4 x i8] c"LADY", [4 x i8] c"LAID", [4 x i8] c"LAIN", [4 x i8] c"LAIR", [4 x i8] c"LAKE", [4 x i8] c"LAMB", [4 x i8] c"LAME", [4 x i8] c"LAND", [4 x i8] c"LANE", [4 x i8] c"LANG", [4 x i8] c"LARD", [4 x i8] c"LARK", [4 x i8] c"LASS", [4 x i8] c"LAST", [4 x i8] c"LATE", [4 x i8] c"LAUD", [4 x i8] c"LAVA", [4 x i8] c"LAWN", [4 x i8] c"LAWS", [4 x i8] c"LAYS", [4 x i8] c"LEAD", [4 x i8] c"LEAF", [4 x i8] c"LEAK", [4 x i8] c"LEAN", [4 x i8] c"LEAR", [4 x i8] c"LEEK", [4 x i8] c"LEER", [4 x i8] c"LEFT", [4 x i8] c"LEND", [4 x i8] c"LENS", [4 x i8] c"LENT", [4 x i8] c"LEON", [4 x i8] c"LESK", [4 x i8] c"LESS", [4 x i8] c"LEST", [4 x i8] c"LETS", [4 x i8] c"LIAR", [4 x i8] c"LICE", [4 x i8] c"LICK", [4 x i8] c"LIED", [4 x i8] c"LIEN", [4 x i8] c"LIES", [4 x i8] c"LIEU", [4 x i8] c"LIFE", [4 x i8] c"LIFT", [4 x i8] c"LIKE", [4 x i8] c"LILA", [4 x i8] c"LILT", [4 x i8] c"LILY", [4 x i8] c"LIMA", [4 x i8] c"LIMB", [4 x i8] c"LIME", [4 x i8] c"LIND", [4 x i8] c"LINE", [4 x i8] c"LINK", [4 x i8] c"LINT", [4 x i8] c"LION", [4 x i8] c"LISA", [4 x i8] c"LIST", [4 x i8] c"LIVE", [4 x i8] c"LOAD", [4 x i8] c"LOAF", [4 x i8] c"LOAM", [4 x i8] c"LOAN", [4 x i8] c"LOCK", [4 x i8] c"LOFT", [4 x i8] c"LOGE", [4 x i8] c"LOIS", [4 x i8] c"LOLA", [4 x i8] c"LONE", [4 x i8] c"LONG", [4 x i8] c"LOOK", [4 x i8] c"LOON", [4 x i8] c"LOOT", [4 x i8] c"LORD", [4 x i8] c"LORE", [4 x i8] c"LOSE", [4 x i8] c"LOSS", [4 x i8] c"LOST", [4 x i8] c"LOUD", [4 x i8] c"LOVE", [4 x i8] c"LOWE", [4 x i8] c"LUCK", [4 x i8] c"LUCY", [4 x i8] c"LUGE", [4 x i8] c"LUKE", [4 x i8] c"LULU", [4 x i8] c"LUND", [4 x i8] c"LUNG", [4 x i8] c"LURA", [4 x i8] c"LURE", [4 x i8] c"LURK", [4 x i8] c"LUSH", [4 x i8] c"LUST", [4 x i8] c"LYLE", [4 x i8] c"LYNN", [4 x i8] c"LYON", [4 x i8] c"LYRA", [4 x i8] c"MACE", [4 x i8] c"MADE", [4 x i8] c"MAGI", [4 x i8] c"MAID", [4 x i8] c"MAIL", [4 x i8] c"MAIN", [4 x i8] c"MAKE", [4 x i8] c"MALE", [4 x i8] c"MALI", [4 x i8] c"MALL", [4 x i8] c"MALT", [4 x i8] c"MANA", [4 x i8] c"MANN", [4 x i8] c"MANY", [4 x i8] c"MARC", [4 x i8] c"MARE", [4 x i8] c"MARK", [4 x i8] c"MARS", [4 x i8] c"MART", [4 x i8] c"MARY", [4 x i8] c"MASH", [4 x i8] c"MASK", [4 x i8] c"MASS", [4 x i8] c"MAST", [4 x i8] c"MATE", [4 x i8] c"MATH", [4 x i8] c"MAUL", [4 x i8] c"MAYO", [4 x i8] c"MEAD", [4 x i8] c"MEAL", [4 x i8] c"MEAN", [4 x i8] c"MEAT", [4 x i8] c"MEEK", [4 x i8] c"MEET", [4 x i8] c"MELD", [4 x i8] c"MELT", [4 x i8] c"MEMO", [4 x i8] c"MEND", [4 x i8] c"MENU", [4 x i8] c"MERT", [4 x i8] c"MESH", [4 x i8] c"MESS", [4 x i8] c"MICE", [4 x i8] c"MIKE", [4 x i8] c"MILD", [4 x i8] c"MILE", [4 x i8] c"MILK", [4 x i8] c"MILL", [4 x i8] c"MILT", [4 x i8] c"MIMI", [4 x i8] c"MIND", [4 x i8] c"MINE", [4 x i8] c"MINI", [4 x i8] c"MINK", [4 x i8] c"MINT", [4 x i8] c"MIRE", [4 x i8] c"MISS", [4 x i8] c"MIST", [4 x i8] c"MITE", [4 x i8] c"MITT", [4 x i8] c"MOAN", [4 x i8] c"MOAT", [4 x i8] c"MOCK", [4 x i8] c"MODE", [4 x i8] c"MOLD", [4 x i8] c"MOLE", [4 x i8] c"MOLL", [4 x i8] c"MOLT", [4 x i8] c"MONA", [4 x i8] c"MONK", [4 x i8] c"MONT", [4 x i8] c"MOOD", [4 x i8] c"MOON", [4 x i8] c"MOOR", [4 x i8] c"MOOT", [4 x i8] c"MORE", [4 x i8] c"MORN", [4 x i8] c"MORT", [4 x i8] c"MOSS", [4 x i8] c"MOST", [4 x i8] c"MOTH", [4 x i8] c"MOVE", [4 x i8] c"MUCH", [4 x i8] c"MUCK", [4 x i8] c"MUDD", [4 x i8] c"MUFF", [4 x i8] c"MULE", [4 x i8] c"MULL", [4 x i8] c"MURK", [4 x i8] c"MUSH", [4 x i8] c"MUST", [4 x i8] c"MUTE", [4 x i8] c"MUTT", [4 x i8] c"MYRA", [4 x i8] c"MYTH", [4 x i8] c"NAGY", [4 x i8] c"NAIL", [4 x i8] c"NAIR", [4 x i8] c"NAME", [4 x i8] c"NARY", [4 x i8] c"NASH", [4 x i8] c"NAVE", [4 x i8] c"NAVY", [4 x i8] c"NEAL", [4 x i8] c"NEAR", [4 x i8] c"NEAT", [4 x i8] c"NECK", [4 x i8] c"NEED", [4 x i8] c"NEIL", [4 x i8] c"NELL", [4 x i8] c"NEON", [4 x i8] c"NERO", [4 x i8] c"NESS", [4 x i8] c"NEST", [4 x i8] c"NEWS", [4 x i8] c"NEWT", [4 x i8] c"NIBS", [4 x i8] c"NICE", [4 x i8] c"NICK", [4 x i8] c"NILE", [4 x i8] c"NINA", [4 x i8] c"NINE", [4 x i8] c"NOAH", [4 x i8] c"NODE", [4 x i8] c"NOEL", [4 x i8] c"NOLL", [4 x i8] c"NONE", [4 x i8] c"NOOK", [4 x i8] c"NOON", [4 x i8] c"NORM", [4 x i8] c"NOSE", [4 x i8] c"NOTE", [4 x i8] c"NOUN", [4 x i8] c"NOVA", [4 x i8] c"NUDE", [4 x i8] c"NULL", [4 x i8] c"NUMB", [4 x i8] c"OATH", [4 x i8] c"OBEY", [4 x i8] c"OBOE", [4 x i8] c"ODIN", [4 x i8] c"OHIO", [4 x i8] c"OILY", [4 x i8] c"OINT", [4 x i8] c"OKAY", [4 x i8] c"OLAF", [4 x i8] c"OLDY", [4 x i8] c"OLGA", [4 x i8] c"OLIN", [4 x i8] c"OMAN", [4 x i8] c"OMEN", [4 x i8] c"OMIT", [4 x i8] c"ONCE", [4 x i8] c"ONES", [4 x i8] c"ONLY", [4 x i8] c"ONTO", [4 x i8] c"ONUS", [4 x i8] c"ORAL", [4 x i8] c"ORGY", [4 x i8] c"OSLO", [4 x i8] c"OTIS", [4 x i8] c"OTTO", [4 x i8] c"OUCH", [4 x i8] c"OUST", [4 x i8] c"OUTS", [4 x i8] c"OVAL", [4 x i8] c"OVEN", [4 x i8] c"OVER", [4 x i8] c"OWLY", [4 x i8] c"OWNS", [4 x i8] c"QUAD", [4 x i8] c"QUIT", [4 x i8] c"QUOD", [4 x i8] c"RACE", [4 x i8] c"RACK", [4 x i8] c"RACY", [4 x i8] c"RAFT", [4 x i8] c"RAGE", [4 x i8] c"RAID", [4 x i8] c"RAIL", [4 x i8] c"RAIN", [4 x i8] c"RAKE", [4 x i8] c"RANK", [4 x i8] c"RANT", [4 x i8] c"RARE", [4 x i8] c"RASH", [4 x i8] c"RATE", [4 x i8] c"RAVE", [4 x i8] c"RAYS", [4 x i8] c"READ", [4 x i8] c"REAL", [4 x i8] c"REAM", [4 x i8] c"REAR", [4 x i8] c"RECK", [4 x i8] c"REED", [4 x i8] c"REEF", [4 x i8] c"REEK", [4 x i8] c"REEL", [4 x i8] c"REID", [4 x i8] c"REIN", [4 x i8] c"RENA", [4 x i8] c"REND", [4 x i8] c"RENT", [4 x i8] c"REST", [4 x i8] c"RICE", [4 x i8] c"RICH", [4 x i8] c"RICK", [4 x i8] c"RIDE", [4 x i8] c"RIFT", [4 x i8] c"RILL", [4 x i8] c"RIME", [4 x i8] c"RING", [4 x i8] c"RINK", [4 x i8] c"RISE", [4 x i8] c"RISK", [4 x i8] c"RITE", [4 x i8] c"ROAD", [4 x i8] c"ROAM", [4 x i8] c"ROAR", [4 x i8] c"ROBE", [4 x i8] c"ROCK", [4 x i8] c"RODE", [4 x i8] c"ROIL", [4 x i8] c"ROLL", [4 x i8] c"ROME", [4 x i8] c"ROOD", [4 x i8] c"ROOF", [4 x i8] c"ROOK", [4 x i8] c"ROOM", [4 x i8] c"ROOT", [4 x i8] c"ROSA", [4 x i8] c"ROSE", [4 x i8] c"ROSS", [4 x i8] c"ROSY", [4 x i8] c"ROTH", [4 x i8] c"ROUT", [4 x i8] c"ROVE", [4 x i8] c"ROWE", [4 x i8] c"ROWS", [4 x i8] c"RUBE", [4 x i8] c"RUBY", [4 x i8] c"RUDE", [4 x i8] c"RUDY", [4 x i8] c"RUIN", [4 x i8] c"RULE", [4 x i8] c"RUNG", [4 x i8] c"RUNS", [4 x i8] c"RUNT", [4 x i8] c"RUSE", [4 x i8] c"RUSH", [4 x i8] c"RUSK", [4 x i8] c"RUSS", [4 x i8] c"RUST", [4 x i8] c"RUTH", [4 x i8] c"SACK", [4 x i8] c"SAFE", [4 x i8] c"SAGE", [4 x i8] c"SAID", [4 x i8] c"SAIL", [4 x i8] c"SALE", [4 x i8] c"SALK", [4 x i8] c"SALT", [4 x i8] c"SAME", [4 x i8] c"SAND", [4 x i8] c"SANE", [4 x i8] c"SANG", [4 x i8] c"SANK", [4 x i8] c"SARA", [4 x i8] c"SAUL", [4 x i8] c"SAVE", [4 x i8] c"SAYS", [4 x i8] c"SCAN", [4 x i8] c"SCAR", [4 x i8] c"SCAT", [4 x i8] c"SCOT", [4 x i8] c"SEAL", [4 x i8] c"SEAM", [4 x i8] c"SEAR", [4 x i8] c"SEAT", [4 x i8] c"SEED", [4 x i8] c"SEEK", [4 x i8] c"SEEM", [4 x i8] c"SEEN", [4 x i8] c"SEES", [4 x i8] c"SELF", [4 x i8] c"SELL", [4 x i8] c"SEND", [4 x i8] c"SENT", [4 x i8] c"SETS", [4 x i8] c"SEWN", [4 x i8] c"SHAG", [4 x i8] c"SHAM", [4 x i8] c"SHAW", [4 x i8] c"SHAY", [4 x i8] c"SHED", [4 x i8] c"SHIM", [4 x i8] c"SHIN", [4 x i8] c"SHOD", [4 x i8] c"SHOE", [4 x i8] c"SHOT", [4 x i8] c"SHOW", [4 x i8] c"SHUN", [4 x i8] c"SHUT", [4 x i8] c"SICK", [4 x i8] c"SIDE", [4 x i8] c"SIFT", [4 x i8] c"SIGH", [4 x i8] c"SIGN", [4 x i8] c"SILK", [4 x i8] c"SILL", [4 x i8] c"SILO", [4 x i8] c"SILT", [4 x i8] c"SINE", [4 x i8] c"SING", [4 x i8] c"SINK", [4 x i8] c"SIRE", [4 x i8] c"SITE", [4 x i8] c"SITS", [4 x i8] c"SITU", [4 x i8] c"SKAT", [4 x i8] c"SKEW", [4 x i8] c"SKID", [4 x i8] c"SKIM", [4 x i8] c"SKIN", [4 x i8] c"SKIT", [4 x i8] c"SLAB", [4 x i8] c"SLAM", [4 x i8] c"SLAT", [4 x i8] c"SLAY", [4 x i8] c"SLED", [4 x i8] c"SLEW", [4 x i8] c"SLID", [4 x i8] c"SLIM", [4 x i8] c"SLIT", [4 x i8] c"SLOB", [4 x i8] c"SLOG", [4 x i8] c"SLOT", [4 x i8] c"SLOW", [4 x i8] c"SLUG", [4 x i8] c"SLUM", [4 x i8] c"SLUR", [4 x i8] c"SMOG", [4 x i8] c"SMUG", [4 x i8] c"SNAG", [4 x i8] c"SNOB", [4 x i8] c"SNOW", [4 x i8] c"SNUB", [4 x i8] c"SNUG", [4 x i8] c"SOAK", [4 x i8] c"SOAR", [4 x i8] c"SOCK", [4 x i8] c"SODA", [4 x i8] c"SOFA", [4 x i8] c"SOFT", [4 x i8] c"SOIL", [4 x i8] c"SOLD", [4 x i8] c"SOME", [4 x i8] c"SONG", [4 x i8] c"SOON", [4 x i8] c"SOOT", [4 x i8] c"SORE", [4 x i8] c"SORT", [4 x i8] c"SOUL", [4 x i8] c"SOUR", [4 x i8] c"SOWN", [4 x i8] c"STAB", [4 x i8] c"STAG", [4 x i8] c"STAN", [4 x i8] c"STAR", [4 x i8] c"STAY", [4 x i8] c"STEM", [4 x i8] c"STEW", [4 x i8] c"STIR", [4 x i8] c"STOW", [4 x i8] c"STUB", [4 x i8] c"STUN", [4 x i8] c"SUCH", [4 x i8] c"SUDS", [4 x i8] c"SUIT", [4 x i8] c"SULK", [4 x i8] c"SUMS", [4 x i8] c"SUNG", [4 x i8] c"SUNK", [4 x i8] c"SURE", [4 x i8] c"SURF", [4 x i8] c"SWAB", [4 x i8] c"SWAG", [4 x i8] c"SWAM", [4 x i8] c"SWAN", [4 x i8] c"SWAT", [4 x i8] c"SWAY", [4 x i8] c"SWIM", [4 x i8] c"SWUM", [4 x i8] c"TACK", [4 x i8] c"TACT", [4 x i8] c"TAIL", [4 x i8] c"TAKE", [4 x i8] c"TALE", [4 x i8] c"TALK", [4 x i8] c"TALL", [4 x i8] c"TANK", [4 x i8] c"TASK", [4 x i8] c"TATE", [4 x i8] c"TAUT", [4 x i8] c"TEAL", [4 x i8] c"TEAM", [4 x i8] c"TEAR", [4 x i8] c"TECH", [4 x i8] c"TEEM", [4 x i8] c"TEEN", [4 x i8] c"TEET", [4 x i8] c"TELL", [4 x i8] c"TEND", [4 x i8] c"TENT", [4 x i8] c"TERM", [4 x i8] c"TERN", [4 x i8] c"TESS", [4 x i8] c"TEST", [4 x i8] c"THAN", [4 x i8] c"THAT", [4 x i8] c"THEE", [4 x i8] c"THEM", [4 x i8] c"THEN", [4 x i8] c"THEY", [4 x i8] c"THIN", [4 x i8] c"THIS", [4 x i8] c"THUD", [4 x i8] c"THUG", [4 x i8] c"TICK", [4 x i8] c"TIDE", [4 x i8] c"TIDY", [4 x i8] c"TIED", [4 x i8] c"TIER", [4 x i8] c"TILE", [4 x i8] c"TILL", [4 x i8] c"TILT", [4 x i8] c"TIME", [4 x i8] c"TINA", [4 x i8] c"TINE", [4 x i8] c"TINT", [4 x i8] c"TINY", [4 x i8] c"TIRE", [4 x i8] c"TOAD", [4 x i8] c"TOGO", [4 x i8] c"TOIL", [4 x i8] c"TOLD", [4 x i8] c"TOLL", [4 x i8] c"TONE", [4 x i8] c"TONG", [4 x i8] c"TONY", [4 x i8] c"TOOK", [4 x i8] c"TOOL", [4 x i8] c"TOOT", [4 x i8] c"TORE", [4 x i8] c"TORN", [4 x i8] c"TOTE", [4 x i8] c"TOUR", [4 x i8] c"TOUT", [4 x i8] c"TOWN", [4 x i8] c"TRAG", [4 x i8] c"TRAM", [4 x i8] c"TRAY", [4 x i8] c"TREE", [4 x i8] c"TREK", [4 x i8] c"TRIG", [4 x i8] c"TRIM", [4 x i8] c"TRIO", [4 x i8] c"TROD", [4 x i8] c"TROT", [4 x i8] c"TROY", [4 x i8] c"TRUE", [4 x i8] c"TUBA", [4 x i8] c"TUBE", [4 x i8] c"TUCK", [4 x i8] c"TUFT", [4 x i8] c"TUNA", [4 x i8] c"TUNE", [4 x i8] c"TUNG", [4 x i8] c"TURF", [4 x i8] c"TURN", [4 x i8] c"TUSK", [4 x i8] c"TWIG", [4 x i8] c"TWIN", [4 x i8] c"TWIT", [4 x i8] c"ULAN", [4 x i8] c"UNIT", [4 x i8] c"URGE", [4 x i8] c"USED", [4 x i8] c"USER", [4 x i8] c"USES", [4 x i8] c"UTAH", [4 x i8] c"VAIL", [4 x i8] c"VAIN", [4 x i8] c"VALE", [4 x i8] c"VARY", [4 x i8] c"VASE", [4 x i8] c"VAST", [4 x i8] c"VEAL", [4 x i8] c"VEDA", [4 x i8] c"VEIL", [4 x i8] c"VEIN", [4 x i8] c"VEND", [4 x i8] c"VENT", [4 x i8] c"VERB", [4 x i8] c"VERY", [4 x i8] c"VETO", [4 x i8] c"VICE", [4 x i8] c"VIEW", [4 x i8] c"VINE", [4 x i8] c"VISE", [4 x i8] c"VOID", [4 x i8] c"VOLT", [4 x i8] c"VOTE", [4 x i8] c"WACK", [4 x i8] c"WADE", [4 x i8] c"WAGE", [4 x i8] c"WAIL", [4 x i8] c"WAIT", [4 x i8] c"WAKE", [4 x i8] c"WALE", [4 x i8] c"WALK", [4 x i8] c"WALL", [4 x i8] c"WALT", [4 x i8] c"WAND", [4 x i8] c"WANE", [4 x i8] c"WANG", [4 x i8] c"WANT", [4 x i8] c"WARD", [4 x i8] c"WARM", [4 x i8] c"WARN", [4 x i8] c"WART", [4 x i8] c"WASH", [4 x i8] c"WAST", [4 x i8] c"WATS", [4 x i8] c"WATT", [4 x i8] c"WAVE", [4 x i8] c"WAVY", [4 x i8] c"WAYS", [4 x i8] c"WEAK", [4 x i8] c"WEAL", [4 x i8] c"WEAN", [4 x i8] c"WEAR", [4 x i8] c"WEED", [4 x i8] c"WEEK", [4 x i8] c"WEIR", [4 x i8] c"WELD", [4 x i8] c"WELL", [4 x i8] c"WELT", [4 x i8] c"WENT", [4 x i8] c"WERE", [4 x i8] c"WERT", [4 x i8] c"WEST", [4 x i8] c"WHAM", [4 x i8] c"WHAT", [4 x i8] c"WHEE", [4 x i8] c"WHEN", [4 x i8] c"WHET", [4 x i8] c"WHOA", [4 x i8] c"WHOM", [4 x i8] c"WICK", [4 x i8] c"WIFE", [4 x i8] c"WILD", [4 x i8] c"WILL", [4 x i8] c"WIND", [4 x i8] c"WINE", [4 x i8] c"WING", [4 x i8] c"WINK", [4 x i8] c"WINO", [4 x i8] c"WIRE", [4 x i8] c"WISE", [4 x i8] c"WISH", [4 x i8] c"WITH", [4 x i8] c"WOLF", [4 x i8] c"WONT", [4 x i8] c"WOOD", [4 x i8] c"WOOL", [4 x i8] c"WORD", [4 x i8] c"WORE", [4 x i8] c"WORK", [4 x i8] c"WORM", [4 x i8] c"WORN", [4 x i8] c"WOVE", [4 x i8] c"WRIT", [4 x i8] c"WYNN", [4 x i8] c"YALE", [4 x i8] c"YANG", [4 x i8] c"YANK", [4 x i8] c"YARD", [4 x i8] c"YARN", [4 x i8] c"YAWL", [4 x i8] c"YAWN", [4 x i8] c"YEAH", [4 x i8] c"YEAR", [4 x i8] c"YELL", [4 x i8] c"YOGA", [4 x i8] c"YOKE"], align 16, !track !84
@.str.1711 = private unnamed_addr constant [19 x i8] c"wrote %s to STORE\0A\00", align 1
@ssl_init.ssl_initialized = internal global i8 0, align 1
@credentials = internal global %struct.gnutls_certificate_credentials_st* null, align 8, !track !85
@.str.1714 = private unnamed_addr constant [15 x i8] c"/etc/ssl/certs\00", align 1
@.str.1.1715 = private unnamed_addr constant [34 x i8] c"ERROR: Cannot open directory %s.\0A\00", align 1
@.str.2.1716 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.3.1717 = private unnamed_addr constant [40 x i8] c"WARNING: Failed to open cert %s: (%d).\0A\00", align 1
@.str.4.1718 = private unnamed_addr constant [38 x i8] c"ERROR: Failed to open cert %s: (%d).\0A\00", align 1
@.str.5.1719 = private unnamed_addr constant [28 x i8] c"Loaded CA certificate '%s'\0A\00", align 1
@.str.6.1720 = private unnamed_addr constant [43 x i8] c"ERROR: Failed to load CRL file '%s': (%d)\0A\00", align 1
@.str.7.1721 = private unnamed_addr constant [22 x i8] c"Loaded CRL file '%s'\0A\00", align 1
@.str.8.1722 = private unnamed_addr constant [25 x i8] c"Certificates loaded: %d\0A\00", align 1
@.str.9.1723 = private unnamed_addr constant [69 x i8] c"ERROR: GnuTLS requires the key and the cert to be of the same type.\0A\00", align 1
@.str.10.1726 = private unnamed_addr constant [28 x i8] c"NORMAL:%COMPAT:-VERS-SSL3.0\00", align 1
@.str.11.1727 = private unnamed_addr constant [34 x i8] c"NORMAL:-VERS-TLS-ALL:+VERS-SSL3.0\00", align 1
@.str.12.1728 = private unnamed_addr constant [20 x i8] c"NORMAL:-VERS-SSL3.0\00", align 1
@.str.13.1729 = private unnamed_addr constant [33 x i8] c"NORMAL:-VERS-SSL3.0:-VERS-TLS1.0\00", align 1
@.str.14.1730 = private unnamed_addr constant [46 x i8] c"NORMAL:-VERS-SSL3.0:-VERS-TLS1.0:-VERS-TLS1.1\00", align 1
@.str.15.1731 = private unnamed_addr constant [17 x i8] c"PFS:-VERS-SSL3.0\00", align 1
@.str.16.1732 = private unnamed_addr constant [25 x i8] c"NORMAL:-RSA:-VERS-SSL3.0\00", align 1
@.str.17.1733 = private unnamed_addr constant [57 x i8] c"GnuTLS: unimplemented 'secure-protocol' option value %d\0A\00", align 1
@.str.18.1734 = private unnamed_addr constant [46 x i8] c"Please report this issue to bug-wget@gnu.org\0A\00", align 1
@.str.19.1735 = private unnamed_addr constant [12 x i8] c"GnuTLS: %s\0A\00", align 1
@gnutls_free = external dso_local global void (i8*)*, align 8
@.str.20.1736 = private unnamed_addr constant [51 x i8] c"SSL session has already been resumed. Continuing.\0A\00", align 1
@.str.21.1737 = private unnamed_addr constant [56 x i8] c"WARNING: Could not save SSL session data for socket %d\0A\00", align 1
@wgnutls_transport = internal global %struct.transport_implementation { i32 (i32, i8*, i32, i8*)* @wgnutls_read, i32 (i32, i8*, i32, i8*)* @wgnutls_write, i32 (i32, double, i32, i8*)* @wgnutls_poll, i32 (i32, i8*, i32, i8*)* @wgnutls_peek, i8* (i32, i8*)* @wgnutls_errstr, void (i32, i8*)* @wgnutls_close }, align 8
@.str.41.1738 = private unnamed_addr constant [39 x i8] c"GnuTLS: *** REHANDSHAKE while reading\0A\00", align 1
@.str.40.1739 = private unnamed_addr constant [10 x i8] c"(unknown)\00", align 1
@.str.39.1740 = private unnamed_addr constant [33 x i8] c"GnuTLS: received alert [%d]: %s\0A\00", align 1
@.str.22.1743 = private unnamed_addr constant [6 x i8] c"ERROR\00", align 1
@.str.23.1744 = private unnamed_addr constant [8 x i8] c"WARNING\00", align 1
@.str.24.1745 = private unnamed_addr constant [37 x i8] c"%s: No certificate presented by %s.\0A\00", align 1
@.str.25.1746 = private unnamed_addr constant [43 x i8] c"%s: The certificate of %s is not trusted.\0A\00", align 1
@.str.26.1747 = private unnamed_addr constant [54 x i8] c"%s: The certificate of %s hasn't got a known issuer.\0A\00", align 1
@.str.27.1748 = private unnamed_addr constant [45 x i8] c"%s: The certificate of %s has been revoked.\0A\00", align 1
@.str.28.1749 = private unnamed_addr constant [48 x i8] c"%s: The certificate signer of %s was not a CA.\0A\00", align 1
@.str.29.1750 = private unnamed_addr constant [67 x i8] c"%s: The certificate of %s was signed using an insecure algorithm.\0A\00", align 1
@.str.30.1751 = private unnamed_addr constant [49 x i8] c"%s: The certificate of %s is not yet activated.\0A\00", align 1
@.str.31.1752 = private unnamed_addr constant [40 x i8] c"%s: The certificate of %s has expired.\0A\00", align 1
@.str.32.1753 = private unnamed_addr constant [41 x i8] c"Error initializing X509 certificate: %s\0A\00", align 1
@.str.33.1754 = private unnamed_addr constant [22 x i8] c"No certificate found\0A\00", align 1
@.str.34.1755 = private unnamed_addr constant [31 x i8] c"Error parsing certificate: %s\0A\00", align 1
@.str.35.1756 = private unnamed_addr constant [44 x i8] c"The certificate has not yet been activated\0A\00", align 1
@.str.36.1757 = private unnamed_addr constant [29 x i8] c"The certificate has expired\0A\00", align 1
@.str.37.1758 = private unnamed_addr constant [52 x i8] c"The certificate's owner does not match hostname %s\0A\00", align 1
@.str.38.1759 = private unnamed_addr constant [27 x i8] c"Certificate must be X.509\0A\00", align 1
@.str.1762 = private unnamed_addr constant [5 x i8] c"NTLM\00", align 1
@.str.1.1763 = private unnamed_addr constant [33 x i8] c"Received a type-2 NTLM message.\0A\00", align 1
@.str.2.1764 = private unnamed_addr constant [32 x i8] c"Unexpected empty NTLM message.\0A\00", align 1
@.str.3.1765 = private unnamed_addr constant [43 x i8] c"Empty NTLM message, starting transaction.\0A\00", align 1
@.str.4.1768 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5.1769 = private unnamed_addr constant [33 x i8] c"Creating a type-1 NTLM message.\0A\00", align 1
@.str.6.1770 = private unnamed_addr constant [61 x i8] c"NTLMSSP%c\01%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%s%s\00", align 1
@.str.7.1771 = private unnamed_addr constant [6 x i8] c"NTLM \00", align 1
@.str.8.1772 = private unnamed_addr constant [33 x i8] c"Creating a type-3 NTLM message.\0A\00", align 1
@.str.9.1773 = private unnamed_addr constant [117 x i8] c"NTLMSSP%c\03%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\FF\FF%c%c\01\82%c%c\00", align 1
@mkhash.magic = internal constant [8 x i8] c"KGS!@#$%", align 1
@base32_encode.b32str = internal constant [32 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", align 16
@b32 = internal constant [256 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\1A\1B\1C\1D\1E\1F\FF\FF\FF\FF\FF\FF\FF\FF\FF\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", align 16
@fillbuf = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16
@fillbuf.1815 = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16
@is_basic_table = dso_local constant [8 x i32] [i32 6656, i32 -17, i32 -2, i32 2147483646, i32 0, i32 0, i32 0, i32 0], align 16
@quoting_style_args = dso_local constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1832, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.1833, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.1834, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.1835, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.1836, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.1837, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.1838, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.1839, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.1840, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.1841, i32 0, i32 0), i8* null], align 16
@.str.1832 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.1833 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.1834 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.1835 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.1836 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.1837 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.1838 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.1839 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.1840 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.1841 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_vals = dso_local constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@quote_quoting_options = dso_local global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !track !86
@.str.10.1842 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.1843 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.1844 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.1845 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.1846 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.1847 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.1848 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.1849 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.1850 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !track !87
@nslots = internal global i32 1, align 4
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !track !88
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !track !89
@.str.1861 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.1.1862 = private unnamed_addr constant [7 x i8] c"TMPDIR\00", align 1
@.str.2.1863 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str.3.1864 = private unnamed_addr constant [12 x i8] c"/%.*sXXXXXX\00", align 1
@.str.1.1879 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.1880 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@rpl_fcntl.have_dupfd_cloexec = internal global i32 0, align 4
@.str.1887 = private unnamed_addr constant [9 x i8] c"/dev/tty\00", align 1
@.str.1.1888 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@gnu_getpass.buf = internal global i8* null, align 8, !track !90
@gnu_getpass.bufsize = internal global i64 0, align 8
@__mon_yday = internal constant [2 x [13 x i16]] [[13 x i16] [i16 0, i16 31, i16 59, i16 90, i16 120, i16 151, i16 181, i16 212, i16 243, i16 273, i16 304, i16 334, i16 365], [13 x i16] [i16 0, i16 31, i16 60, i16 91, i16 121, i16 152, i16 182, i16 213, i16 244, i16 274, i16 305, i16 335, i16 366]], align 16
@localtime_offset = internal global i64 0, align 8
@exit_failure = dso_local global i32 1, align 4
@.str.1897 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.1898 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@charset_aliases = internal global i8* null, align 8, !track !91
@.str.2.1899 = private unnamed_addr constant [14 x i8] c"charset.alias\00", align 1
@.str.3.1900 = private unnamed_addr constant [16 x i8] c"CHARSETALIASDIR\00", align 1
@.str.4.1901 = private unnamed_addr constant [15 x i8] c"/usr/local/lib\00", align 1
@.str.5.1902 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.6.1903 = private unnamed_addr constant [10 x i8] c"%50s %50s\00", align 1
@0 = private constant [4 x i8] c"wget"
@1 = private constant [15 x i8] c"--config=wgetrc"
@2 = private constant [1 x i8] c"_"
@__argv_new__ = global i8** null, !track !92

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @connect_to_ip(%struct.ip_address*, i32, i8*) #0 {
  %4 = alloca %struct.sockaddr_storage, align 8, !track !95
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4, !track !96
  %7 = alloca %struct.sockaddr_storage, align 8, !track !97
  %8 = alloca %union.__CONST_SOCKADDR_ARG, align 8, !track !98
  %9 = bitcast %struct.sockaddr_storage* %4 to %struct.sockaddr*
  %10 = icmp ne i8* %2, null
  br i1 %10, label %11, label %58

; <label>:11:                                     ; preds = %3
  %12 = call i8* @print_address(%struct.ip_address* %0)
  %13 = call i32 @strcmp(i8* %2, i8* %12) #14
  %14 = icmp ne i32 0, %13
  br i1 %14, label %15, label %44

; <label>:15:                                     ; preds = %11
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %17 = load i8, i8* %16, align 2
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %36

; <label>:19:                                     ; preds = %15
  %20 = call i8* @idn_decode(i8* %2)
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %36

; <label>:22:                                     ; preds = %19
  %23 = call i64 @strlen(i8* %2) #14
  %24 = call i64 @strlen(i8* %20) #14
  %25 = add i64 %23, %24
  %26 = add i64 %25, 4
  %27 = trunc i64 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = call noalias i8* @xmalloc(i64 %28)
  %30 = sext i32 %27 to i64
  %31 = getelementptr [8 x i8], [8 x i8]* @.str, i32 0, i32 0
  %32 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %29, i64 %30, i8* %31, i8* %20, i8* %2) #8
  %33 = sub nsw i32 %27, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %29, i64 %34
  store i8 0, i8* %35, align 1
  call void @idn_free(i8* %20)
  br label %36

; <label>:36:                                     ; preds = %22, %19, %15
  %.01 = phi i8* [ %29, %22 ], [ null, %19 ], [ null, %15 ]
  %37 = getelementptr [28 x i8], [28 x i8]* @.str.1, i32 0, i32 0
  %38 = call i8* @gettext(i8* %37) #8
  %39 = icmp ne i8* %.01, null
  br i1 %39, label %42, label %40

; <label>:40:                                     ; preds = %36
  %41 = call i8* @escnonprint_uri(i8* %2)
  br label %42

; <label>:42:                                     ; preds = %36, %40
  %43 = phi i8* [ %41, %40 ], [ %.01, %36 ]
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %38, i8* %43, i8* %12, i32 %1)
  call void @free(i8* %.01) #8
  br label %58

; <label>:44:                                     ; preds = %11
  %45 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 2
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %44
  %49 = getelementptr [24 x i8], [24 x i8]* @.str.2, i32 0, i32 0
  %50 = call i8* @gettext(i8* %49) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %50, i8* %12, i32 %1)
  br label %58

; <label>:51:                                     ; preds = %44
  %52 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 10
  br i1 %54, label %55, label %58

; <label>:55:                                     ; preds = %51
  %56 = getelementptr [26 x i8], [26 x i8]* @.str.3, i32 0, i32 0
  %57 = call i8* @gettext(i8* %56) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %57, i8* %12, i32 %1)
  br label %58

; <label>:58:                                     ; preds = %42, %51, %55, %48, %3
  call void @sockaddr_set_data(%struct.sockaddr* %9, %struct.ip_address* %0, i32 %1)
  %59 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %9, i32 0, i32 0
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = call i32 @socket(i32 %61, i32 1, i32 0) #8
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %131, label %64

; <label>:64:                                     ; preds = %58
  %65 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 145
  %66 = load i8, i8* %65, align 1
  %67 = trunc i8 %66 to i1
  br i1 %67, label %68, label %84

; <label>:68:                                     ; preds = %64
  store i32 1, i32* %5, align 4
  %69 = bitcast i32* %5 to i8*
  %70 = call i32 @setsockopt(i32 %62, i32 41, i32 26, i8* %69, i32 4) #8
  %71 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %72 = load i8, i8* %71, align 1
  %73 = trunc i8 %72 to i1
  %74 = icmp slt i32 %70, 0
  %or.cond = and i1 %73, %74
  br i1 %or.cond, label %75, label %84

; <label>:75:                                     ; preds = %68
  %76 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %77 = load i8, i8* %76, align 1
  %78 = trunc i8 %77 to i1
  br i1 %78, label %79, label %84

; <label>:79:                                     ; preds = %75
  %80 = call i32* @__errno_location() #15
  %81 = load i32, i32* %80, align 4
  %82 = call i8* @strerror(i32 %81) #8
  %83 = getelementptr [31 x i8], [31 x i8]* @.str.4, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %83, i8* %82)
  br label %84

; <label>:84:                                     ; preds = %68, %79, %75, %64
  %85 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %86 = load i64, i64* %85, align 8
  %87 = icmp ne i64 %86, 0
  br i1 %87, label %88, label %100

; <label>:88:                                     ; preds = %84
  %89 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %90 = load i64, i64* %89, align 8
  %91 = icmp slt i64 %90, 8192
  br i1 %91, label %92, label %100

; <label>:92:                                     ; preds = %88
  %93 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %6, align 4
  %96 = load i32, i32* %6, align 4
  %97 = icmp slt i32 %96, 512
  %spec.store.select = select i1 %97, i32 512, i32 %95
  store i32 %spec.store.select, i32* %6, align 4
  %98 = bitcast i32* %6 to i8*
  %99 = call i32 @setsockopt(i32 %62, i32 1, i32 8, i8* %98, i32 4) #8
  br label %100

; <label>:100:                                    ; preds = %92, %88, %84
  %101 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 112
  %102 = load i8*, i8** %101, align 8
  %103 = icmp ne i8* %102, null
  br i1 %103, label %104, label %114

; <label>:104:                                    ; preds = %100
  %105 = bitcast %struct.sockaddr_storage* %7 to %struct.sockaddr*
  %106 = call zeroext i1 @resolve_bind_address(%struct.sockaddr* %105)
  br i1 %106, label %107, label %114

; <label>:107:                                    ; preds = %104
  %108 = bitcast %union.__CONST_SOCKADDR_ARG* %8 to %struct.sockaddr**
  store %struct.sockaddr* %105, %struct.sockaddr** %108, align 8
  %109 = call i32 @sockaddr_size(%struct.sockaddr* %105)
  %110 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %8, i32 0, i32 0
  %111 = load %struct.sockaddr*, %struct.sockaddr** %110, align 8
  %112 = call i32 @bind(i32 %62, %struct.sockaddr* %111, i32 %109) #8
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %131, label %114

; <label>:114:                                    ; preds = %104, %107, %100
  %115 = call i32 @sockaddr_size(%struct.sockaddr* %9)
  %116 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 84
  %117 = load double, double* %116, align 8
  %118 = call i32 @connect_with_timeout(i32 %62, %struct.sockaddr* %9, i32 %115, double %117)
  %119 = icmp slt i32 %118, 0
  br i1 %119, label %131, label %120

; <label>:120:                                    ; preds = %114
  %121 = icmp ne i8* %2, null
  br i1 %121, label %122, label %125

; <label>:122:                                    ; preds = %120
  %123 = getelementptr [12 x i8], [12 x i8]* @.str.5, i32 0, i32 0
  %124 = call i8* @gettext(i8* %123) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %124)
  br label %125

; <label>:125:                                    ; preds = %120, %122
  %126 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %127 = load i8, i8* %126, align 1
  %128 = trunc i8 %127 to i1
  br i1 %128, label %129, label %146

; <label>:129:                                    ; preds = %125
  %130 = getelementptr [20 x i8], [20 x i8]* @.str.6, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %130, i32 %62)
  br label %146

; <label>:131:                                    ; preds = %114, %107, %58
  %132 = call i32* @__errno_location() #15
  %133 = load i32, i32* %132, align 4
  %134 = icmp sge i32 %62, 0
  br i1 %134, label %135, label %136

; <label>:135:                                    ; preds = %131
  call void @fd_close(i32 %62)
  br label %136

; <label>:136:                                    ; preds = %135, %131
  %137 = icmp ne i8* %2, null
  br i1 %137, label %138, label %144

; <label>:138:                                    ; preds = %136
  %139 = getelementptr [13 x i8], [13 x i8]* @.str.7, i32 0, i32 0
  %140 = call i8* @gettext(i8* %139) #8
  %141 = call i32* @__errno_location() #15
  %142 = load i32, i32* %141, align 4
  %143 = call i8* @strerror(i32 %142) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %140, i8* %143)
  br label %144

; <label>:144:                                    ; preds = %138, %136
  %145 = call i32* @__errno_location() #15
  store i32 %133, i32* %145, align 4
  br label %146

; <label>:146:                                    ; preds = %129, %125, %144
  %.0 = phi i32 [ -1, %144 ], [ %62, %125 ], [ %62, %129 ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #1

; Function Attrs: nounwind
declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #2

declare dso_local void @idn_free(i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sockaddr_set_data(%struct.sockaddr*, %struct.ip_address*, i32) #0 {
  %4 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %33 [
    i32 2, label %6
    i32 10, label %18
  ]

; <label>:6:                                      ; preds = %3
  %7 = bitcast %struct.sockaddr* %0 to %struct.sockaddr_in*
  %8 = bitcast %struct.sockaddr_in* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 16, i1 false)
  %9 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i16 2, i16* %9, align 4
  %10 = trunc i32 %2 to i16
  %11 = call zeroext i16 @htons(i16 zeroext %10) #15
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %14 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %15 = bitcast %union.anon* %14 to %struct.in_addr*
  %16 = bitcast %struct.in_addr* %13 to i8*
  %17 = bitcast %struct.in_addr* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* align 4 %17, i64 4, i1 false), !track !99
  br label %34

; <label>:18:                                     ; preds = %3
  %19 = bitcast %struct.sockaddr* %0 to %struct.sockaddr_in6*
  %20 = bitcast %struct.sockaddr_in6* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 28, i1 false)
  %21 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %19, i32 0, i32 0
  store i16 10, i16* %21, align 4
  %22 = trunc i32 %2 to i16
  %23 = call zeroext i16 @htons(i16 zeroext %22) #15
  %24 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %19, i32 0, i32 1
  store i16 %23, i16* %24, align 2
  %25 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %19, i32 0, i32 3
  %26 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %27 = bitcast %union.anon* %26 to %struct.in6_addr*
  %28 = bitcast %struct.in6_addr* %25 to i8*
  %29 = bitcast %struct.in6_addr* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %29, i64 16, i1 false), !track !100
  %30 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %19, i32 0, i32 4
  store i32 %31, i32* %32, align 4
  br label %34

; <label>:33:                                     ; preds = %3
  call void @abort() #16
  unreachable

; <label>:34:                                     ; preds = %18, %6
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @socket(i32, i32, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) #2

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #4

; Function Attrs: nounwind
declare dso_local i8* @strerror(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @resolve_bind_address(%struct.sockaddr*) #0 {
  %2 = load i8, i8* @resolve_bind_address.called, align 1
  %3 = trunc i8 %2 to i1
  br i1 %3, label %4, label %11

; <label>:4:                                      ; preds = %1
  %5 = load i8, i8* @resolve_bind_address.should_bind, align 1
  %6 = trunc i8 %5 to i1
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  call void @sockaddr_set_data(%struct.sockaddr* %0, %struct.ip_address* @resolve_bind_address.ip, i32 0)
  br label %8

; <label>:8:                                      ; preds = %7, %4
  %9 = load i8, i8* @resolve_bind_address.should_bind, align 1
  %10 = trunc i8 %9 to i1
  br label %26

; <label>:11:                                     ; preds = %1
  store i8 1, i8* @resolve_bind_address.called, align 1
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 112
  %13 = load i8*, i8** %12, align 8
  %14 = call %struct.address_list* @lookup_host(i8* %13, i32 3)
  %15 = icmp ne %struct.address_list* %14, null
  br i1 %15, label %23, label %16

; <label>:16:                                     ; preds = %11
  %17 = getelementptr [56 x i8], [56 x i8]* @.str.13, i32 0, i32 0
  %18 = call i8* @gettext(i8* %17) #8
  %19 = load i8*, i8** @exec_name, align 8
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 112
  %21 = load i8*, i8** %20, align 8
  %22 = call i8* @quote(i8* %21)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %18, i8* %19, i8* %22)
  store i8 0, i8* @resolve_bind_address.should_bind, align 1
  br label %26

; <label>:23:                                     ; preds = %11
  %24 = call %struct.ip_address* @address_list_address_at(%struct.address_list* %14, i32 0)
  %25 = bitcast %struct.ip_address* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.ip_address* @resolve_bind_address.ip to i8*), i8* align 4 %25, i64 24, i1 false), !track !101
  call void @address_list_release(%struct.address_list* %14)
  call void @sockaddr_set_data(%struct.sockaddr* %0, %struct.ip_address* @resolve_bind_address.ip, i32 0)
  store i8 1, i8* @resolve_bind_address.should_bind, align 1
  br label %26

; <label>:26:                                     ; preds = %23, %16, %8
  %.0 = phi i1 [ %10, %8 ], [ true, %23 ], [ false, %16 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sockaddr_size(%struct.sockaddr*) #0 {
  %2 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i32 0, i32 0
  %3 = load i16, i16* %2, align 2
  %4 = zext i16 %3 to i32
  switch i32 %4, label %6 [
    i32 2, label %7
    i32 10, label %5
  ]

; <label>:5:                                      ; preds = %1
  br label %7

; <label>:6:                                      ; preds = %1
  call void @abort() #16
  unreachable

; <label>:7:                                      ; preds = %1, %5
  %.0 = phi i32 [ 28, %5 ], [ 16, %1 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @connect_with_timeout(i32, %struct.sockaddr*, i32, double) #0 {
  %5 = alloca %struct.cwt_context, align 8, !track !102
  %6 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %5, i32 0, i32 0
  store i32 %0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %5, i32 0, i32 1
  store %struct.sockaddr* %1, %struct.sockaddr** %7, align 8
  %8 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %5, i32 0, i32 2
  store i32 %2, i32* %8, align 8
  %9 = bitcast %struct.cwt_context* %5 to i8*
  %10 = call zeroext i1 @run_with_timeout(double %3, void (i8*)* @connect_with_timeout_callback, i8* %9)
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %4
  %12 = call i32* @__errno_location() #15
  store i32 110, i32* %12, align 4
  br label %26

; <label>:13:                                     ; preds = %4
  %14 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %5, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %23

; <label>:17:                                     ; preds = %13
  %18 = call i32* @__errno_location() #15
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 4
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %17
  %22 = call i32* @__errno_location() #15
  store i32 110, i32* %22, align 4
  br label %23

; <label>:23:                                     ; preds = %21, %17, %13
  %24 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %5, i32 0, i32 3
  %25 = load i32, i32* %24, align 4
  br label %26

; <label>:26:                                     ; preds = %23, %11
  %.0 = phi i32 [ -1, %11 ], [ %25, %23 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @fd_close(i32) #0 {
  %2 = icmp slt i32 %0, 0
  br i1 %2, label %38, label %3

; <label>:3:                                      ; preds = %1
  %4 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %5 = icmp ne %struct.hash_table* %4, null
  br i1 %5, label %6, label %12

; <label>:6:                                      ; preds = %3
  %7 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %8 = sext i32 %0 to i64
  %9 = inttoptr i64 %8 to i8*
  %10 = call i8* @hash_table_get(%struct.hash_table* %7, i8* %9)
  %11 = bitcast i8* %10 to %struct.transport_info*
  br label %12

; <label>:12:                                     ; preds = %6, %3
  %.0 = phi %struct.transport_info* [ %11, %6 ], [ null, %3 ]
  %13 = icmp ne %struct.transport_info* %.0, null
  br i1 %13, label %14, label %27

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.0, i32 0, i32 0
  %16 = load %struct.transport_implementation*, %struct.transport_implementation** %15, align 8
  %17 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %16, i32 0, i32 5
  %18 = load void (i32, i8*)*, void (i32, i8*)** %17, align 8
  %19 = icmp ne void (i32, i8*)* %18, null
  br i1 %19, label %20, label %27

; <label>:20:                                     ; preds = %14
  %21 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.0, i32 0, i32 0
  %22 = load %struct.transport_implementation*, %struct.transport_implementation** %21, align 8
  %23 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %22, i32 0, i32 5
  %24 = load void (i32, i8*)*, void (i32, i8*)** %23, align 8
  %25 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  call void %24(i32 %0, i8* %26)
  br label %28

; <label>:27:                                     ; preds = %14, %12
  call void @sock_close(i32 %0)
  br label %28

; <label>:28:                                     ; preds = %27, %20
  %29 = icmp ne %struct.transport_info* %.0, null
  br i1 %29, label %30, label %38

; <label>:30:                                     ; preds = %28
  %31 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %32 = sext i32 %0 to i64
  %33 = inttoptr i64 %32 to i8*
  %34 = call i32 @hash_table_remove(%struct.hash_table* %31, i8* %33)
  %35 = bitcast %struct.transport_info* %.0 to i8*
  call void @free(i8* %35) #8
  %36 = load i32, i32* @transport_map_modified_tick, align 4
  %37 = add i32 %36, 1
  store i32 %37, i32* @transport_map_modified_tick, align 4
  br label %38

; <label>:38:                                     ; preds = %1, %30, %28
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sock_close(i32) #0 {
  %2 = call i32 @close(i32 %0)
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %4 = load i8, i8* %3, align 1
  %5 = trunc i8 %4 to i1
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = getelementptr [14 x i8], [14 x i8]* @.str.14, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %7, i32 %0)
  br label %8

; <label>:8:                                      ; preds = %1, %6
  ret void
}

declare dso_local i32 @close(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @connect_with_timeout_callback(i8*) #0 {
  %2 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %3 = bitcast i8* %0 to %struct.cwt_context*
  %4 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.__CONST_SOCKADDR_ARG* %2 to %struct.sockaddr**
  %7 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %3, i32 0, i32 1
  %8 = load %struct.sockaddr*, %struct.sockaddr** %7, align 8
  store %struct.sockaddr* %8, %struct.sockaddr** %6, align 8
  %9 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %3, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %2, i32 0, i32 0
  %12 = load %struct.sockaddr*, %struct.sockaddr** %11, align 8
  %13 = call i32 @connect(i32 %5, %struct.sockaddr* %12, i32 %10)
  %14 = getelementptr inbounds %struct.cwt_context, %struct.cwt_context* %3, i32 0, i32 3
  store i32 %13, i32* %14, align 4
  ret void
}

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #6

; Function Attrs: nounwind readnone
declare dso_local zeroext i16 @htons(i16 zeroext) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @connect_to_host(i8*, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = call %struct.address_list* @lookup_host(i8* %0, i32 0)
  %6 = icmp ne %struct.address_list* %5, null
  br i1 %6, label %.lr.ph9.preheader, label %._crit_edge10

.lr.ph9.preheader:                                ; preds = %2
  br label %.lr.ph9

._crit_edge10.loopexit:                           ; preds = %23
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %._crit_edge10.loopexit, %2
  %7 = getelementptr [39 x i8], [39 x i8]* @.str.8, i32 0, i32 0
  %8 = call i8* @gettext(i8* %7) #8
  %9 = load i8*, i8** @exec_name, align 8
  %10 = call i8* @quote(i8* %0)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %8, i8* %9, i8* %10)
  br label %27

.lr.ph9:                                          ; preds = %.lr.ph9.preheader, %23
  %.016 = phi %struct.address_list* [ %24, %23 ], [ %5, %.lr.ph9.preheader ]
  call void @unroll_loop(i32 0)
  call void @address_list_get_bounds(%struct.address_list* %.016, i32* %3, i32* %4)
  %11 = load i32, i32* %3, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph9
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %18
  %.025 = phi i32 [ %19, %18 ], [ %11, %.lr.ph.preheader ]
  call void @unroll_loop(i32 1)
  %14 = call %struct.ip_address* @address_list_address_at(%struct.address_list* %.016, i32 %.025)
  %15 = call i32 @connect_to_ip(%struct.ip_address* %14, i32 %1, i8* %0)
  %16 = icmp sge i32 %15, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %.lr.ph
  %.01.lcssa4 = phi %struct.address_list* [ %.016, %.lr.ph ]
  %.lcssa = phi i32 [ %15, %.lr.ph ]
  call void @address_list_set_connected(%struct.address_list* %.01.lcssa4)
  call void @address_list_release(%struct.address_list* %.01.lcssa4)
  br label %27

; <label>:18:                                     ; preds = %.lr.ph
  call void @address_list_set_faulty(%struct.address_list* %.016, i32 %.025)
  %19 = add nsw i32 %.025, 1
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %18
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph9
  %.017 = phi %struct.address_list* [ %.016, %.lr.ph9 ], [ %.016, %._crit_edge.loopexit ]
  %22 = call zeroext i1 @address_list_connected_p(%struct.address_list* %.016)
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %._crit_edge
  call void @address_list_release(%struct.address_list* %.017)
  %24 = call %struct.address_list* @lookup_host(i8* %0, i32 4)
  %25 = icmp ne %struct.address_list* %24, null
  br i1 %25, label %.lr.ph9, label %._crit_edge10.loopexit

; <label>:26:                                     ; preds = %._crit_edge
  %.01.lcssa3 = phi %struct.address_list* [ %.017, %._crit_edge ]
  call void @address_list_release(%struct.address_list* %.01.lcssa3)
  br label %27

; <label>:27:                                     ; preds = %26, %17, %._crit_edge10
  %.0 = phi i32 [ %.lcssa, %17 ], [ -1, %26 ], [ -100, %._crit_edge10 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @bind_local(%struct.ip_address*, i32*) #0 {
  %3 = alloca %struct.sockaddr_storage, align 8, !track !103
  %4 = alloca i32, align 4
  %5 = alloca %union.__CONST_SOCKADDR_ARG, align 8, !track !104
  %6 = alloca i32, align 4, !track !105
  %7 = alloca %union.__CONST_SOCKADDR_ARG, align 8, !track !106
  %8 = bitcast %struct.sockaddr_storage* %3 to %struct.sockaddr*
  store i32 1, i32* %4, align 4
  %9 = bitcast i32* %4 to i8*
  %10 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = call i32 @socket(i32 %11, i32 1, i32 0) #8
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %54, label %14

; <label>:14:                                     ; preds = %2
  %15 = call i32 @setsockopt(i32 %12, i32 1, i32 2, i8* %9, i32 4) #8
  %16 = bitcast %struct.sockaddr_storage* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 128, i1 false)
  %17 = load i32, i32* %1, align 4
  call void @sockaddr_set_data(%struct.sockaddr* %8, %struct.ip_address* %0, i32 %17)
  %18 = bitcast %union.__CONST_SOCKADDR_ARG* %5 to %struct.sockaddr**
  store %struct.sockaddr* %8, %struct.sockaddr** %18, align 8
  %19 = call i32 @sockaddr_size(%struct.sockaddr* %8)
  %20 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %5, i32 0, i32 0
  %21 = load %struct.sockaddr*, %struct.sockaddr** %20, align 8
  %22 = call i32 @bind(i32 %12, %struct.sockaddr* %21, i32 %19) #8
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %14
  call void @fd_close(i32 %12)
  br label %54

; <label>:25:                                     ; preds = %14
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %27 = load i8, i8* %26, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %25
  %30 = getelementptr [27 x i8], [27 x i8]* @.str.9, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %30, i32 %12)
  br label %31

; <label>:31:                                     ; preds = %25, %29
  %32 = load i32, i32* %1, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %50

; <label>:34:                                     ; preds = %31
  %35 = call i32 @sockaddr_size(%struct.sockaddr* %8)
  store i32 %35, i32* %6, align 4
  %36 = bitcast %union.__CONST_SOCKADDR_ARG* %7 to %struct.sockaddr**
  store %struct.sockaddr* %8, %struct.sockaddr** %36, align 8
  %37 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %7, i32 0, i32 0
  %38 = load %struct.sockaddr*, %struct.sockaddr** %37, align 8
  %39 = call i32 @getsockname(i32 %12, %struct.sockaddr* %38, i32* %6) #8
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %42

; <label>:41:                                     ; preds = %34
  call void @fd_close(i32 %12)
  br label %54

; <label>:42:                                     ; preds = %34
  call void @sockaddr_get_data(%struct.sockaddr* %8, %struct.ip_address* null, i32* %1)
  %43 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %44 = load i8, i8* %43, align 1
  %45 = trunc i8 %44 to i1
  br i1 %45, label %46, label %50

; <label>:46:                                     ; preds = %42
  %47 = call i8* @print_address(%struct.ip_address* %0)
  %48 = load i32, i32* %1, align 4
  %49 = getelementptr [38 x i8], [38 x i8]* @.str.10, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %49, i8* %47, i32 %48)
  br label %50

; <label>:50:                                     ; preds = %46, %42, %31
  %51 = call i32 @listen(i32 %12, i32 1) #8
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %54

; <label>:53:                                     ; preds = %50
  call void @fd_close(i32 %12)
  br label %54

; <label>:54:                                     ; preds = %50, %2, %53, %41, %24
  %.0 = phi i32 [ -1, %24 ], [ -1, %41 ], [ -1, %53 ], [ -1, %2 ], [ %12, %50 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @getsockname(i32, %struct.sockaddr*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sockaddr_get_data(%struct.sockaddr*, %struct.ip_address*, i32*) #0 {
  %4 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i32 0, i32 0
  %5 = load i16, i16* %4, align 2
  %6 = zext i16 %5 to i32
  switch i32 %6, label %44 [
    i32 2, label %7
    i32 10, label %24
  ]

; <label>:7:                                      ; preds = %3
  %8 = bitcast %struct.sockaddr* %0 to %struct.sockaddr_in*
  %9 = icmp ne %struct.ip_address* %1, null
  br i1 %9, label %10, label %17

; <label>:10:                                     ; preds = %7
  %11 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  store i32 2, i32* %11, align 4
  %12 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %13 = bitcast %union.anon* %12 to %struct.in_addr*
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %15 = bitcast %struct.in_addr* %13 to i8*
  %16 = bitcast %struct.in_addr* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 %16, i64 4, i1 false), !track !107
  br label %17

; <label>:17:                                     ; preds = %10, %7
  %18 = icmp ne i32* %2, null
  br i1 %18, label %19, label %45

; <label>:19:                                     ; preds = %17
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %21 = load i16, i16* %20, align 2
  %22 = call zeroext i16 @ntohs(i16 zeroext %21) #15
  %23 = zext i16 %22 to i32
  store i32 %23, i32* %2, align 4
  br label %45

; <label>:24:                                     ; preds = %3
  %25 = bitcast %struct.sockaddr* %0 to %struct.sockaddr_in6*
  %26 = icmp ne %struct.ip_address* %1, null
  br i1 %26, label %27, label %37

; <label>:27:                                     ; preds = %24
  %28 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  store i32 10, i32* %28, align 4
  %29 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %30 = bitcast %union.anon* %29 to %struct.in6_addr*
  %31 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %25, i32 0, i32 3
  %32 = bitcast %struct.in6_addr* %30 to i8*
  %33 = bitcast %struct.in6_addr* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %33, i64 16, i1 false), !track !108
  %34 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %25, i32 0, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 2
  store i32 %35, i32* %36, align 4
  br label %37

; <label>:37:                                     ; preds = %27, %24
  %38 = icmp ne i32* %2, null
  br i1 %38, label %39, label %45

; <label>:39:                                     ; preds = %37
  %40 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %25, i32 0, i32 1
  %41 = load i16, i16* %40, align 2
  %42 = call zeroext i16 @ntohs(i16 zeroext %41) #15
  %43 = zext i16 %42 to i32
  store i32 %43, i32* %2, align 4
  br label %45

; <label>:44:                                     ; preds = %3
  call void @abort() #16
  unreachable

; <label>:45:                                     ; preds = %37, %39, %17, %19
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @listen(i32, i32) #2

; Function Attrs: nounwind readnone
declare dso_local zeroext i16 @ntohs(i16 zeroext) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @accept_connection(i32) #0 {
  %2 = alloca %struct.sockaddr_storage, align 8
  %3 = alloca i32, align 4
  %4 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %5 = bitcast %struct.sockaddr_storage* %2 to %struct.sockaddr*
  store i32 128, i32* %3, align 4
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 84
  %7 = load double, double* %6, align 8
  %8 = fcmp une double %7, 0.000000e+00
  br i1 %8, label %9, label %18

; <label>:9:                                      ; preds = %1
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 84
  %11 = load double, double* %10, align 8
  %12 = call i32 @select_fd(i32 %0, double %11, i32 1)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %9
  %15 = call i32* @__errno_location() #15
  store i32 110, i32* %15, align 4
  br label %16

; <label>:16:                                     ; preds = %14, %9
  %17 = icmp sle i32 %12, 0
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %16, %1
  %19 = bitcast %union.__CONST_SOCKADDR_ARG* %4 to %struct.sockaddr**
  store %struct.sockaddr* %5, %struct.sockaddr** %19, align 8
  %20 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %4, i32 0, i32 0
  %21 = load %struct.sockaddr*, %struct.sockaddr** %20, align 8
  %22 = call i32 @accept(i32 %0, %struct.sockaddr* %21, i32* %3)
  %23 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %24 = load i8, i8* %23, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %18
  %27 = getelementptr [31 x i8], [31 x i8]* @.str.11, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %27, i32 %22)
  br label %28

; <label>:28:                                     ; preds = %26, %18, %16
  %.0 = phi i32 [ -1, %16 ], [ %22, %18 ], [ %22, %26 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @select_fd(i32, double, i32) #0 {
  %4 = alloca %struct.fd_set, align 8
  %5 = alloca %struct.timeval, align 8
  %6 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i32 0, i32 0
  %7 = getelementptr inbounds [16 x i64], [16 x i64]* %6, i64 0, i64 0
  %8 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %7) #8, !srcloc !109
  %9 = extractvalue { i64, i64* } %8, 0
  %10 = extractvalue { i64, i64* } %8, 1
  %11 = trunc i64 %9 to i32
  %12 = ptrtoint i64* %10 to i64
  %13 = trunc i64 %12 to i32
  %14 = srem i32 %0, 64
  %15 = zext i32 %14 to i64
  %16 = shl i64 1, %15
  %17 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %4, i32 0, i32 0
  %18 = sdiv i32 %0, 64
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [16 x i64], [16 x i64]* %17, i64 0, i64 %19
  %21 = load i64, i64* %20, align 8
  %22 = or i64 %21, %16
  store i64 %22, i64* %20, align 8
  %23 = and i32 %2, 1
  %24 = icmp ne i32 %23, 0
  %.01 = select i1 %24, %struct.fd_set* %4, %struct.fd_set* null
  %25 = and i32 %2, 2
  %26 = icmp ne i32 %25, 0
  %spec.select = select i1 %26, %struct.fd_set* %4, %struct.fd_set* null
  %27 = fptosi double %1 to i64
  %28 = getelementptr inbounds %struct.timeval, %struct.timeval* %5, i32 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = fptosi double %1 to i64
  %30 = sitofp i64 %29 to double
  %31 = fsub double %1, %30
  %32 = fmul double 1.000000e+06, %31
  %33 = fptosi double %32 to i64
  %34 = getelementptr inbounds %struct.timeval, %struct.timeval* %5, i32 0, i32 1
  store i64 %33, i64* %34, align 8
  br label %35

; <label>:35:                                     ; preds = %39, %3
  %36 = add nsw i32 %0, 1
  %37 = call i32 @select(i32 %36, %struct.fd_set* %.01, %struct.fd_set* %spec.select, %struct.fd_set* null, %struct.timeval* %5)
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %39, label %.critedge

; <label>:39:                                     ; preds = %35
  %40 = call i32* @__errno_location() #15
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 4
  br i1 %42, label %35, label %.critedge

.critedge:                                        ; preds = %35, %39
  %.lcssa = phi i32 [ %37, %39 ], [ %37, %35 ]
  ret i32 %.lcssa
}

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #3

declare dso_local i32 @select(i32, %struct.fd_set*, %struct.fd_set*, %struct.fd_set*, %struct.timeval*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @socket_ip_address(i32, %struct.ip_address*, i32) #0 {
  %4 = alloca %struct.sockaddr_storage, align 8, !track !110
  %5 = alloca i32, align 4, !track !111
  %6 = alloca %union.__CONST_SOCKADDR_ARG, align 8, !track !112
  %7 = alloca %union.__CONST_SOCKADDR_ARG, align 8, !track !113
  %8 = bitcast %struct.sockaddr_storage* %4 to %struct.sockaddr*
  store i32 128, i32* %5, align 4
  %9 = bitcast %struct.sockaddr* %8 to i8*
  %10 = load i32, i32* %5, align 4
  %11 = zext i32 %10 to i64
  call void @llvm.memset.p0i8.i64(i8* align 2 %9, i8 0, i64 %11, i1 false)
  switch i32 %2, label %22 [
    i32 0, label %12
    i32 1, label %17
  ]

; <label>:12:                                     ; preds = %3
  %13 = bitcast %union.__CONST_SOCKADDR_ARG* %6 to %struct.sockaddr**
  store %struct.sockaddr* %8, %struct.sockaddr** %13, align 8
  %14 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %6, i32 0, i32 0
  %15 = load %struct.sockaddr*, %struct.sockaddr** %14, align 8
  %16 = call i32 @getsockname(i32 %0, %struct.sockaddr* %15, i32* %5) #8
  br label %23

; <label>:17:                                     ; preds = %3
  %18 = bitcast %union.__CONST_SOCKADDR_ARG* %7 to %struct.sockaddr**
  store %struct.sockaddr* %8, %struct.sockaddr** %18, align 8
  %19 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %7, i32 0, i32 0
  %20 = load %struct.sockaddr*, %struct.sockaddr** %19, align 8
  %21 = call i32 @getpeername(i32 %0, %struct.sockaddr* %20, i32* %5) #8
  br label %23

; <label>:22:                                     ; preds = %3
  call void @abort() #16
  unreachable

; <label>:23:                                     ; preds = %17, %12
  %.01 = phi i32 [ %16, %12 ], [ %21, %17 ]
  %24 = icmp slt i32 %.01, 0
  br i1 %24, label %64, label %25

; <label>:25:                                     ; preds = %23
  %26 = bitcast %struct.ip_address* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 24, i1 false)
  %27 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %8, i32 0, i32 0
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %8, i32 0, i32 0
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  switch i32 %33, label %63 [
    i32 10, label %34
    i32 2, label %50
  ]

; <label>:34:                                     ; preds = %25
  %35 = bitcast %struct.sockaddr_storage* %4 to %struct.sockaddr_in6*
  %36 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %37 = bitcast %union.anon* %36 to %struct.in6_addr*
  %38 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %35, i32 0, i32 3
  %39 = bitcast %struct.in6_addr* %37 to i8*
  %40 = bitcast %struct.in6_addr* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 16, i1 false), !track !114
  %41 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %35, i32 0, i32 4
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 2
  store i32 %42, i32* %43, align 4
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %45 = load i8, i8* %44, align 1
  %46 = trunc i8 %45 to i1
  br i1 %46, label %47, label %64

; <label>:47:                                     ; preds = %34
  %48 = call i8* @print_address(%struct.ip_address* %1)
  %49 = getelementptr [16 x i8], [16 x i8]* @.str.12, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %49, i8* %48)
  br label %64

; <label>:50:                                     ; preds = %25
  %51 = bitcast %struct.sockaddr_storage* %4 to %struct.sockaddr_in*
  %52 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %53 = bitcast %union.anon* %52 to %struct.in_addr*
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %51, i32 0, i32 2
  %55 = bitcast %struct.in_addr* %53 to i8*
  %56 = bitcast %struct.in_addr* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 4, i1 false), !track !115
  %57 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %58 = load i8, i8* %57, align 1
  %59 = trunc i8 %58 to i1
  br i1 %59, label %60, label %64

; <label>:60:                                     ; preds = %50
  %61 = call i8* @print_address(%struct.ip_address* %1)
  %62 = getelementptr [16 x i8], [16 x i8]* @.str.12, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %62, i8* %61)
  br label %64

; <label>:63:                                     ; preds = %25
  call void @abort() #16
  unreachable

; <label>:64:                                     ; preds = %60, %50, %47, %34, %23
  %.0 = phi i1 [ false, %23 ], [ true, %34 ], [ true, %47 ], [ true, %50 ], [ true, %60 ]
  ret i1 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @getpeername(i32, %struct.sockaddr*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @socket_family(i32, i32) #0 {
  %3 = alloca %struct.sockaddr_storage, align 8
  %4 = alloca i32, align 4
  %5 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %6 = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %7 = bitcast %struct.sockaddr_storage* %3 to %struct.sockaddr*
  store i32 128, i32* %4, align 4
  %8 = bitcast %struct.sockaddr* %7 to i8*
  %9 = load i32, i32* %4, align 4
  %10 = zext i32 %9 to i64
  call void @llvm.memset.p0i8.i64(i8* align 2 %8, i8 0, i64 %10, i1 false)
  switch i32 %1, label %21 [
    i32 0, label %11
    i32 1, label %16
  ]

; <label>:11:                                     ; preds = %2
  %12 = bitcast %union.__CONST_SOCKADDR_ARG* %5 to %struct.sockaddr**
  store %struct.sockaddr* %7, %struct.sockaddr** %12, align 8
  %13 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %5, i32 0, i32 0
  %14 = load %struct.sockaddr*, %struct.sockaddr** %13, align 8
  %15 = call i32 @getsockname(i32 %0, %struct.sockaddr* %14, i32* %4) #8
  br label %22

; <label>:16:                                     ; preds = %2
  %17 = bitcast %union.__CONST_SOCKADDR_ARG* %6 to %struct.sockaddr**
  store %struct.sockaddr* %7, %struct.sockaddr** %17, align 8
  %18 = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %6, i32 0, i32 0
  %19 = load %struct.sockaddr*, %struct.sockaddr** %18, align 8
  %20 = call i32 @getpeername(i32 %0, %struct.sockaddr* %19, i32* %4) #8
  br label %22

; <label>:21:                                     ; preds = %2
  call void @abort() #16
  unreachable

; <label>:22:                                     ; preds = %16, %11
  %.01 = phi i32 [ %15, %11 ], [ %20, %16 ]
  %23 = icmp slt i32 %.01, 0
  %24 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %7, i32 0, i32 0
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %.0 = select i1 %23, i32 -1, i32 %26
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @retryable_socket_connect_error(i32) #0 {
  switch i32 %0, label %2 [
    i32 97, label %8
    i32 96, label %8
    i32 94, label %8
    i32 93, label %8
    i32 92, label %8
    i32 22, label %8
  ]

; <label>:2:                                      ; preds = %1
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3
  %4 = load i8, i8* %3, align 4
  %5 = trunc i8 %4 to i1
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %2
  switch i32 %0, label %7 [
    i32 111, label %8
    i32 101, label %8
    i32 113, label %8
  ]

; <label>:7:                                      ; preds = %6, %2
  br label %8

; <label>:8:                                      ; preds = %6, %6, %6, %1, %1, %1, %1, %1, %1, %7
  %.0 = phi i1 [ true, %7 ], [ false, %1 ], [ false, %1 ], [ false, %1 ], [ false, %1 ], [ false, %1 ], [ false, %1 ], [ false, %6 ], [ false, %6 ], [ false, %6 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @test_socket_open(i32) #0 {
  %2 = alloca %struct.fd_set, align 8
  %3 = alloca %struct.timeval, align 8
  %4 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %2, i32 0, i32 0
  %5 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 0
  %6 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %5) #8, !srcloc !116
  %7 = extractvalue { i64, i64* } %6, 0
  %8 = extractvalue { i64, i64* } %6, 1
  %9 = trunc i64 %7 to i32
  %10 = ptrtoint i64* %8 to i64
  %11 = trunc i64 %10 to i32
  %12 = srem i32 %0, 64
  %13 = zext i32 %12 to i64
  %14 = shl i64 1, %13
  %15 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %2, i32 0, i32 0
  %16 = sdiv i32 %0, 64
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %17
  %19 = load i64, i64* %18, align 8
  %20 = or i64 %19, %14
  store i64 %20, i64* %18, align 8
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 0
  store i64 0, i64* %21, align 8
  %22 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 1
  store i64 1, i64* %22, align 8
  %23 = add nsw i32 %0, 1
  %24 = call i32 @select(i32 %23, %struct.fd_set* %2, %struct.fd_set* null, %struct.fd_set* null, %struct.timeval* %3)
  %25 = icmp ne i32 %24, 0
  %.0 = select i1 %25, i1 false, i1 true
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @fd_register_transport(i32, %struct.transport_implementation*, i8*) #0 {
  %4 = call noalias i8* @xmalloc(i64 16)
  %5 = bitcast i8* %4 to %struct.transport_info*
  %6 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %5, i32 0, i32 0
  store %struct.transport_implementation* %1, %struct.transport_implementation** %6, align 8
  %7 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %5, i32 0, i32 1
  store i8* %2, i8** %7, align 8
  %8 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %9 = icmp ne %struct.hash_table* %8, null
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %3
  %11 = call %struct.hash_table* @hash_table_new(i32 0, i64 (i8*)* null, i32 (i8*, i8*)* null)
  store %struct.hash_table* %11, %struct.hash_table** @transport_map, align 8
  br label %12

; <label>:12:                                     ; preds = %10, %3
  %13 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %14 = sext i32 %0 to i64
  %15 = inttoptr i64 %14 to i8*
  %16 = bitcast %struct.transport_info* %5 to i8*
  call void @hash_table_put(%struct.hash_table* %13, i8* %15, i8* %16)
  %17 = load i32, i32* @transport_map_modified_tick, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* @transport_map_modified_tick, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @fd_transport_context(i32) #7 {
  %2 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %3 = sext i32 %0 to i64
  %4 = inttoptr i64 %3 to i8*
  %5 = call i8* @hash_table_get(%struct.hash_table* %2, i8* %4)
  %6 = bitcast i8* %5 to %struct.transport_info*
  %7 = icmp ne %struct.transport_info* %6, null
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %6, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  br label %11

; <label>:11:                                     ; preds = %1, %8
  %12 = phi i8* [ %10, %8 ], [ null, %1 ]
  ret i8* %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fd_read(i32, i8*, i32, double) #0 {
  %5 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %6 = icmp ne %struct.hash_table* %5, null
  br i1 %6, label %7, label %23

; <label>:7:                                      ; preds = %4
  %8 = load i32, i32* @fd_read.last_fd, align 4
  %9 = icmp eq i32 %8, %0
  br i1 %9, label %10, label %16

; <label>:10:                                     ; preds = %7
  %11 = load i32, i32* @fd_read.last_tick, align 4
  %12 = load i32, i32* @transport_map_modified_tick, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %10
  %15 = load %struct.transport_info*, %struct.transport_info** @fd_read.last_info, align 8
  br label %23

; <label>:16:                                     ; preds = %10, %7
  %17 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %18 = sext i32 %0 to i64
  %19 = inttoptr i64 %18 to i8*
  %20 = call i8* @hash_table_get(%struct.hash_table* %17, i8* %19)
  %21 = bitcast i8* %20 to %struct.transport_info*
  store i32 %0, i32* @fd_read.last_fd, align 4
  store %struct.transport_info* %21, %struct.transport_info** @fd_read.last_info, align 8
  %22 = load i32, i32* @transport_map_modified_tick, align 4
  store i32 %22, i32* @fd_read.last_tick, align 4
  br label %23

; <label>:23:                                     ; preds = %4, %16, %14
  %.1 = phi %struct.transport_info* [ null, %4 ], [ %15, %14 ], [ %21, %16 ]
  %24 = call zeroext i1 @poll_internal(i32 %0, %struct.transport_info* %.1, i32 1, double %3)
  br i1 %24, label %25, label %43

; <label>:25:                                     ; preds = %23
  %26 = icmp ne %struct.transport_info* %.1, null
  br i1 %26, label %27, label %41

; <label>:27:                                     ; preds = %25
  %28 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 0
  %29 = load %struct.transport_implementation*, %struct.transport_implementation** %28, align 8
  %30 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %29, i32 0, i32 0
  %31 = load i32 (i32, i8*, i32, i8*)*, i32 (i32, i8*, i32, i8*)** %30, align 8
  %32 = icmp ne i32 (i32, i8*, i32, i8*)* %31, null
  br i1 %32, label %33, label %41

; <label>:33:                                     ; preds = %27
  %34 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 0
  %35 = load %struct.transport_implementation*, %struct.transport_implementation** %34, align 8
  %36 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %35, i32 0, i32 0
  %37 = load i32 (i32, i8*, i32, i8*)*, i32 (i32, i8*, i32, i8*)** %36, align 8
  %38 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 %37(i32 %0, i8* %1, i32 %2, i8* %39)
  br label %43

; <label>:41:                                     ; preds = %27, %25
  %42 = call i32 @sock_read(i32 %0, i8* %1, i32 %2)
  br label %43

; <label>:43:                                     ; preds = %23, %41, %33
  %.0 = phi i32 [ %40, %33 ], [ %42, %41 ], [ -1, %23 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @poll_internal(i32, %struct.transport_info*, i32, double) #0 {
  %5 = fcmp oeq double %3, -1.000000e+00
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %7 = load double, double* %6, align 8
  %.02 = select i1 %5, double %7, double %3
  %8 = fcmp une double %.02, 0.000000e+00
  br i1 %8, label %9, label %33

; <label>:9:                                      ; preds = %4
  %10 = icmp ne %struct.transport_info* %1, null
  br i1 %10, label %11, label %25

; <label>:11:                                     ; preds = %9
  %12 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %1, i32 0, i32 0
  %13 = load %struct.transport_implementation*, %struct.transport_implementation** %12, align 8
  %14 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %13, i32 0, i32 2
  %15 = load i32 (i32, double, i32, i8*)*, i32 (i32, double, i32, i8*)** %14, align 8
  %16 = icmp ne i32 (i32, double, i32, i8*)* %15, null
  br i1 %16, label %17, label %25

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %1, i32 0, i32 0
  %19 = load %struct.transport_implementation*, %struct.transport_implementation** %18, align 8
  %20 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %19, i32 0, i32 2
  %21 = load i32 (i32, double, i32, i8*)*, i32 (i32, double, i32, i8*)** %20, align 8
  %22 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %1, i32 0, i32 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 %21(i32 %0, double %.02, i32 %2, i8* %23)
  br label %27

; <label>:25:                                     ; preds = %11, %9
  %26 = call i32 @sock_poll(i32 %0, double %.02, i32 %2)
  br label %27

; <label>:27:                                     ; preds = %25, %17
  %.01 = phi i32 [ %24, %17 ], [ %26, %25 ]
  %28 = icmp eq i32 %.01, 0
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %27
  %30 = call i32* @__errno_location() #15
  store i32 110, i32* %30, align 4
  br label %31

; <label>:31:                                     ; preds = %29, %27
  %32 = icmp sle i32 %.01, 0
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %31, %4
  br label %34

; <label>:34:                                     ; preds = %31, %33
  %.0 = phi i1 [ true, %33 ], [ false, %31 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sock_read(i32, i8*, i32) #0 {
  br label %4

; <label>:4:                                      ; preds = %9, %3
  call void @unroll_loop(i32 4)
  %5 = sext i32 %2 to i64
  %6 = call i64 @read(i32 %0, i8* %1, i64 %5)
  %7 = trunc i64 %6 to i32
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %.critedge

; <label>:9:                                      ; preds = %4
  %10 = call i32* @__errno_location() #15
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 4
  br i1 %12, label %4, label %.critedge

.critedge:                                        ; preds = %4, %9
  %.lcssa = phi i32 [ %7, %9 ], [ %7, %4 ]
  ret i32 %.lcssa
}

declare dso_local i64 @read(i32, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @sock_poll(i32, double, i32) #0 {
  %4 = call i32 @select_fd(i32 %0, double %1, i32 %2)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fd_peek(i32, i8*, i32, double) #0 {
  %5 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %6 = icmp ne %struct.hash_table* %5, null
  br i1 %6, label %7, label %23

; <label>:7:                                      ; preds = %4
  %8 = load i32, i32* @fd_peek.last_fd, align 4
  %9 = icmp eq i32 %8, %0
  br i1 %9, label %10, label %16

; <label>:10:                                     ; preds = %7
  %11 = load i32, i32* @fd_peek.last_tick, align 4
  %12 = load i32, i32* @transport_map_modified_tick, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %10
  %15 = load %struct.transport_info*, %struct.transport_info** @fd_peek.last_info, align 8
  br label %23

; <label>:16:                                     ; preds = %10, %7
  %17 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %18 = sext i32 %0 to i64
  %19 = inttoptr i64 %18 to i8*
  %20 = call i8* @hash_table_get(%struct.hash_table* %17, i8* %19)
  %21 = bitcast i8* %20 to %struct.transport_info*
  store i32 %0, i32* @fd_peek.last_fd, align 4
  store %struct.transport_info* %21, %struct.transport_info** @fd_peek.last_info, align 8
  %22 = load i32, i32* @transport_map_modified_tick, align 4
  store i32 %22, i32* @fd_peek.last_tick, align 4
  br label %23

; <label>:23:                                     ; preds = %4, %16, %14
  %.1 = phi %struct.transport_info* [ null, %4 ], [ %15, %14 ], [ %21, %16 ]
  %24 = call zeroext i1 @poll_internal(i32 %0, %struct.transport_info* %.1, i32 1, double %3)
  br i1 %24, label %25, label %43

; <label>:25:                                     ; preds = %23
  %26 = icmp ne %struct.transport_info* %.1, null
  br i1 %26, label %27, label %41

; <label>:27:                                     ; preds = %25
  %28 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 0
  %29 = load %struct.transport_implementation*, %struct.transport_implementation** %28, align 8
  %30 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %29, i32 0, i32 3
  %31 = load i32 (i32, i8*, i32, i8*)*, i32 (i32, i8*, i32, i8*)** %30, align 8
  %32 = icmp ne i32 (i32, i8*, i32, i8*)* %31, null
  br i1 %32, label %33, label %41

; <label>:33:                                     ; preds = %27
  %34 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 0
  %35 = load %struct.transport_implementation*, %struct.transport_implementation** %34, align 8
  %36 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %35, i32 0, i32 3
  %37 = load i32 (i32, i8*, i32, i8*)*, i32 (i32, i8*, i32, i8*)** %36, align 8
  %38 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 %37(i32 %0, i8* %1, i32 %2, i8* %39)
  br label %43

; <label>:41:                                     ; preds = %27, %25
  %42 = call i32 @sock_peek(i32 %0, i8* %1, i32 %2)
  br label %43

; <label>:43:                                     ; preds = %23, %41, %33
  %.0 = phi i32 [ %40, %33 ], [ %42, %41 ], [ -1, %23 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sock_peek(i32, i8*, i32) #0 {
  br label %4

; <label>:4:                                      ; preds = %9, %3
  call void @unroll_loop(i32 5)
  %5 = sext i32 %2 to i64
  %6 = call i64 @recv(i32 %0, i8* %1, i64 %5, i32 2)
  %7 = trunc i64 %6 to i32
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %.critedge

; <label>:9:                                      ; preds = %4
  %10 = call i32* @__errno_location() #15
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 4
  br i1 %12, label %4, label %.critedge

.critedge:                                        ; preds = %4, %9
  %.lcssa = phi i32 [ %7, %9 ], [ %7, %4 ]
  ret i32 %.lcssa
}

declare dso_local i64 @recv(i32, i8*, i64, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fd_write(i32, i8*, i32, double) #0 {
  %5 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %6 = icmp ne %struct.hash_table* %5, null
  br i1 %6, label %7, label %23

; <label>:7:                                      ; preds = %4
  %8 = load i32, i32* @fd_write.last_fd, align 4
  %9 = icmp eq i32 %8, %0
  br i1 %9, label %10, label %16

; <label>:10:                                     ; preds = %7
  %11 = load i32, i32* @fd_write.last_tick, align 4
  %12 = load i32, i32* @transport_map_modified_tick, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %10
  %15 = load %struct.transport_info*, %struct.transport_info** @fd_write.last_info, align 8
  br label %23

; <label>:16:                                     ; preds = %10, %7
  %17 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %18 = sext i32 %0 to i64
  %19 = inttoptr i64 %18 to i8*
  %20 = call i8* @hash_table_get(%struct.hash_table* %17, i8* %19)
  %21 = bitcast i8* %20 to %struct.transport_info*
  store i32 %0, i32* @fd_write.last_fd, align 4
  store %struct.transport_info* %21, %struct.transport_info** @fd_write.last_info, align 8
  %22 = load i32, i32* @transport_map_modified_tick, align 4
  store i32 %22, i32* @fd_write.last_tick, align 4
  br label %23

; <label>:23:                                     ; preds = %4, %16, %14
  %.1 = phi %struct.transport_info* [ null, %4 ], [ %15, %14 ], [ %21, %16 ]
  %24 = icmp sgt i32 %2, 0
  br i1 %24, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %23
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %46
  %.028 = phi i8* [ %48, %46 ], [ %1, %.lr.ph.preheader ]
  %.036 = phi i32 [ %49, %46 ], [ %2, %.lr.ph.preheader ]
  call void @unroll_loop(i32 6)
  %25 = call zeroext i1 @poll_internal(i32 %0, %struct.transport_info* %.1, i32 2, double %3)
  br i1 %25, label %26, label %.loopexit.loopexit

; <label>:26:                                     ; preds = %.lr.ph
  %27 = icmp ne %struct.transport_info* %.1, null
  br i1 %27, label %28, label %42

; <label>:28:                                     ; preds = %26
  %29 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 0
  %30 = load %struct.transport_implementation*, %struct.transport_implementation** %29, align 8
  %31 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %30, i32 0, i32 1
  %32 = load i32 (i32, i8*, i32, i8*)*, i32 (i32, i8*, i32, i8*)** %31, align 8
  %33 = icmp ne i32 (i32, i8*, i32, i8*)* %32, null
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %28
  %35 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 0
  %36 = load %struct.transport_implementation*, %struct.transport_implementation** %35, align 8
  %37 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %36, i32 0, i32 1
  %38 = load i32 (i32, i8*, i32, i8*)*, i32 (i32, i8*, i32, i8*)** %37, align 8
  %39 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.1, i32 0, i32 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 %38(i32 %0, i8* %.028, i32 %.036, i8* %40)
  br label %44

; <label>:42:                                     ; preds = %28, %26
  %43 = call i32 @sock_write(i32 %0, i8* %.028, i32 %.036)
  br label %44

; <label>:44:                                     ; preds = %42, %34
  %.15 = phi i32 [ %41, %34 ], [ %43, %42 ]
  %45 = icmp sle i32 %.15, 0
  br i1 %45, label %.loopexit.loopexit, label %46

; <label>:46:                                     ; preds = %44
  %47 = sext i32 %.15 to i64
  %48 = getelementptr inbounds i8, i8* %.028, i64 %47
  %49 = sub nsw i32 %.036, %.15
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph, %46, %44
  %.0.ph = phi i32 [ %.15, %46 ], [ %.15, %44 ], [ -1, %.lr.ph ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %23
  %.0 = phi i32 [ 0, %23 ], [ %.0.ph, %.loopexit.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sock_write(i32, i8*, i32) #0 {
  br label %4

; <label>:4:                                      ; preds = %9, %3
  call void @unroll_loop(i32 7)
  %5 = sext i32 %2 to i64
  %6 = call i64 @write(i32 %0, i8* %1, i64 %5)
  %7 = trunc i64 %6 to i32
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %.critedge

; <label>:9:                                      ; preds = %4
  %10 = call i32* @__errno_location() #15
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 4
  br i1 %12, label %4, label %.critedge

.critedge:                                        ; preds = %4, %9
  %.lcssa = phi i32 [ %7, %9 ], [ %7, %4 ]
  ret i32 %.lcssa
}

declare dso_local i64 @write(i32, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @fd_errstr(i32) #7 {
  %2 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %4, label %10

; <label>:4:                                      ; preds = %1
  %5 = load %struct.hash_table*, %struct.hash_table** @transport_map, align 8
  %6 = sext i32 %0 to i64
  %7 = inttoptr i64 %6 to i8*
  %8 = call i8* @hash_table_get(%struct.hash_table* %5, i8* %7)
  %9 = bitcast i8* %8 to %struct.transport_info*
  br label %10

; <label>:10:                                     ; preds = %4, %1
  %.01 = phi %struct.transport_info* [ %9, %4 ], [ null, %1 ]
  %11 = icmp ne %struct.transport_info* %.01, null
  br i1 %11, label %12, label %27

; <label>:12:                                     ; preds = %10
  %13 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.01, i32 0, i32 0
  %14 = load %struct.transport_implementation*, %struct.transport_implementation** %13, align 8
  %15 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %14, i32 0, i32 4
  %16 = load i8* (i32, i8*)*, i8* (i32, i8*)** %15, align 8
  %17 = icmp ne i8* (i32, i8*)* %16, null
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %12
  %19 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.01, i32 0, i32 0
  %20 = load %struct.transport_implementation*, %struct.transport_implementation** %19, align 8
  %21 = getelementptr inbounds %struct.transport_implementation, %struct.transport_implementation* %20, i32 0, i32 4
  %22 = load i8* (i32, i8*)*, i8* (i32, i8*)** %21, align 8
  %23 = getelementptr inbounds %struct.transport_info, %struct.transport_info* %.01, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i8* %22(i32 %0, i8* %24)
  %26 = icmp ne i8* %25, null
  br i1 %26, label %31, label %27

; <label>:27:                                     ; preds = %18, %12, %10
  %28 = call i32* @__errno_location() #15
  %29 = load i32, i32* %28, align 4
  %30 = call i8* @strerror(i32 %29) #8, !track !117
  br label %31

; <label>:31:                                     ; preds = %18, %27
  %.0 = phi i8* [ %30, %27 ], [ %25, %18 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @convert_all_links() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call %struct.ptimer* @ptimer_new()
  %3 = load %struct.hash_table*, %struct.hash_table** @downloaded_html_set, align 8
  call void @convert_links_in_hashtable(%struct.hash_table* %3, i32 0, i32* %1)
  %4 = load %struct.hash_table*, %struct.hash_table** @downloaded_css_set, align 8
  call void @convert_links_in_hashtable(%struct.hash_table* %4, i32 1, i32* %1)
  %5 = call double @ptimer_measure(%struct.ptimer* %2)
  %6 = getelementptr [44 x i8], [44 x i8]* @.str.15, i32 0, i32 0
  %7 = call i8* @gettext(i8* %6) #8
  %8 = load i32, i32* %1, align 4
  %9 = call i8* @print_decimal(double %5)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %7, i32 %8, i8* %9)
  call void @ptimer_destroy(%struct.ptimer* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_links_in_hashtable(%struct.hash_table*, i32, i32*) #0 {
  %4 = icmp ne %struct.hash_table* %0, null
  br i1 %4, label %5, label %7

; <label>:5:                                      ; preds = %3
  %6 = call i32 @hash_table_count(%struct.hash_table* %0)
  br label %7

; <label>:7:                                      ; preds = %5, %3
  %.01 = phi i32 [ %6, %5 ], [ 0, %3 ]
  %8 = icmp eq i32 %.01, 0
  br i1 %8, label %.loopexit, label %9

; <label>:9:                                      ; preds = %7
  %10 = sext i32 %.01 to i64
  %11 = mul i64 %10, 8
  %12 = alloca i8, i64 %11, align 16, !track !118
  %13 = bitcast i8* %12 to i8**
  call void @string_set_to_array(%struct.hash_table* %0, i8** %13)
  %14 = icmp slt i32 0, %.01
  br i1 %14, label %.lr.ph8.preheader, label %.loopexit

.lr.ph8.preheader:                                ; preds = %9
  %15 = zext i32 %.01 to i64
  br label %.lr.ph8

.lr.ph8:                                          ; preds = %.lr.ph8.preheader, %104
  %indvars.iv = phi i64 [ %indvars.iv.next, %104 ], [ 0, %.lr.ph8.preheader ]
  call void @unroll_loop(i32 8)
  %16 = getelementptr inbounds i8*, i8** %13, i64 %indvars.iv
  %17 = load i8*, i8** %16, align 8
  %18 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %19 = call i8* @hash_table_get(%struct.hash_table* %18, i8* %17)
  %20 = icmp ne i8* %19, null
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %22 = load i8, i8* %21, align 1
  %23 = trunc i8 %22 to i1
  br i1 %20, label %27, label %24

; <label>:24:                                     ; preds = %.lr.ph8
  br i1 %23, label %25, label %104

; <label>:25:                                     ; preds = %24
  %26 = getelementptr [33 x i8], [33 x i8]* @.str.1.16, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %26, i8* %17)
  br label %104

; <label>:27:                                     ; preds = %.lr.ph8
  br i1 %23, label %28, label %30

; <label>:28:                                     ; preds = %27
  %29 = getelementptr [23 x i8], [23 x i8]* @.str.2.17, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %29, i8* %17, i8* %19)
  br label %30

; <label>:30:                                     ; preds = %27, %28
  %31 = icmp ne i32 %1, 0
  br i1 %31, label %32, label %34

; <label>:32:                                     ; preds = %30
  %33 = call %struct.urlpos* @get_urls_css_file(i8* %17, i8* %19)
  br label %36

; <label>:34:                                     ; preds = %30
  %35 = call %struct.urlpos* @get_urls_html(i8* %17, i8* %19, i8* null, %struct.iri* null)
  br label %36

; <label>:36:                                     ; preds = %34, %32
  %37 = phi %struct.urlpos* [ %33, %32 ], [ %35, %34 ]
  %38 = icmp ne %struct.urlpos* %37, null
  br i1 %38, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %36
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %98
  %.03 = phi %struct.urlpos* [ %100, %98 ], [ %37, %.lr.ph.preheader ]
  call void @unroll_loop(i32 9)
  %39 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 2
  %40 = load i16, i16* %39, align 8
  %41 = lshr i16 %40, 3
  %42 = and i16 %41, 1
  %43 = zext i16 %42 to i32
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %47

; <label>:45:                                     ; preds = %.lr.ph
  %46 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 4
  store i32 4, i32* %46, align 8
  br label %98

; <label>:47:                                     ; preds = %.lr.ph
  %48 = call %struct.iri* @iri_new()
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %50 = load i8*, i8** %49, align 8
  call void @set_uri_encoding(%struct.iri* %48, i8* %50, i1 zeroext true)
  %51 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 0
  %52 = load %struct.url*, %struct.url** %51, align 8
  %53 = getelementptr inbounds %struct.url, %struct.url* %52, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = call %struct.url* @url_parse(i8* %54, i32* null, %struct.iri* %48, i1 zeroext true)
  %56 = icmp ne %struct.url* %55, null
  br i1 %56, label %57, label %98

; <label>:57:                                     ; preds = %47
  %58 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %59 = getelementptr inbounds %struct.url, %struct.url* %55, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = call i8* @hash_table_get(%struct.hash_table* %58, i8* %60)
  %62 = icmp ne i8* %61, null
  br i1 %62, label %63, label %79

; <label>:63:                                     ; preds = %57
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 102
  %65 = load i8, i8* %64, align 1
  %66 = trunc i8 %65 to i1
  %67 = zext i1 %66 to i64
  %68 = select i1 %66, i32 2, i32 1
  %69 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 4
  store i32 %68, i32* %69, align 8
  %70 = call noalias i8* @xstrdup(i8* %61)
  %71 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 1
  store i8* %70, i8** %71, align 8
  %72 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %73 = load i8, i8* %72, align 1
  %74 = trunc i8 %73 to i1
  br i1 %74, label %75, label %97

; <label>:75:                                     ; preds = %63
  %76 = getelementptr inbounds %struct.url, %struct.url* %55, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr [33 x i8], [33 x i8]* @.str.3.18, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %78, i8* %77, i8* %61)
  br label %97

; <label>:79:                                     ; preds = %57
  %80 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 2
  %81 = load i16, i16* %80, align 8
  %82 = lshr i16 %81, 2
  %83 = and i16 %82, 1
  %84 = zext i16 %83 to i32
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %79
  %87 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 4
  store i32 3, i32* %87, align 8
  br label %88

; <label>:88:                                     ; preds = %86, %79
  %89 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.03, i32 0, i32 1
  store i8* null, i8** %89, align 8
  %90 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %91 = load i8, i8* %90, align 1
  %92 = trunc i8 %91 to i1
  br i1 %92, label %93, label %97

; <label>:93:                                     ; preds = %88
  %94 = getelementptr inbounds %struct.url, %struct.url* %55, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr [33 x i8], [33 x i8]* @.str.4.19, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %96, i8* %95)
  br label %97

; <label>:97:                                     ; preds = %93, %88, %75, %63
  call void @url_free(%struct.url* %55)
  call void @iri_free(%struct.iri* %48)
  br label %98

; <label>:98:                                     ; preds = %47, %97, %45
  %.04 = phi %struct.urlpos* [ %.03, %97 ], [ %.03, %45 ], [ %.03, %47 ]
  %99 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.04, i32 0, i32 7
  %100 = load %struct.urlpos*, %struct.urlpos** %99, align 8
  %101 = icmp ne %struct.urlpos* %100, null
  br i1 %101, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %98
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %36
  call void @convert_links(i8* %17, %struct.urlpos* %37)
  %102 = load i32, i32* %2, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %2, align 4
  call void @free_urlpos(%struct.urlpos* %37)
  br label %104

; <label>:104:                                    ; preds = %25, %24, %._crit_edge
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %15
  br i1 %exitcond1, label %.lr.ph8, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %104
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %9, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_links(i8*, %struct.urlpos*) #0 {
  %3 = getelementptr [27 x i8], [27 x i8]* @.str.5.20, i32 0, i32 0
  %4 = call i8* @gettext(i8* %3) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %4, i8* %0)
  %5 = icmp ne %struct.urlpos* %1, null
  br i1 %5, label %.lr.ph27.preheader, label %._crit_edge

.lr.ph27.preheader:                               ; preds = %2
  br label %.lr.ph27

.lr.ph27:                                         ; preds = %.lr.ph27.preheader, %.lr.ph27
  %.0826 = phi i32 [ %spec.select, %.lr.ph27 ], [ 0, %.lr.ph27.preheader ]
  %.01025 = phi %struct.urlpos* [ %11, %.lr.ph27 ], [ %1, %.lr.ph27.preheader ]
  call void @unroll_loop(i32 10)
  %6 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01025, i32 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 0
  %9 = add nsw i32 %.0826, 1
  %spec.select = select i1 %8, i32 %9, i32 %.0826
  %10 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01025, i32 0, i32 7
  %11 = load %struct.urlpos*, %struct.urlpos** %10, align 8
  %12 = icmp ne %struct.urlpos* %11, null
  br i1 %12, label %.lr.ph27, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph27
  %.08.lcssa.ph = phi i32 [ %spec.select, %.lr.ph27 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.08.lcssa = phi i32 [ 0, %2 ], [ %.08.lcssa.ph, %._crit_edge.loopexit ]
  %13 = icmp ne i32 %.08.lcssa, 0
  br i1 %13, label %17, label %14

; <label>:14:                                     ; preds = %._crit_edge
  %15 = getelementptr [16 x i8], [16 x i8]* @.str.6.21, i32 0, i32 0
  %16 = call i8* @gettext(i8* %15) #8, !track !119
  call void @logputs(i32 0, i8* %16)
  br label %272

; <label>:17:                                     ; preds = %._crit_edge
  %18 = call %struct.file_memory* @wget_read_file(i8* %0)
  %19 = icmp ne %struct.file_memory* %18, null
  br i1 %19, label %26, label %20

; <label>:20:                                     ; preds = %17
  %21 = getelementptr [32 x i8], [32 x i8]* @.str.7.22, i32 0, i32 0
  %22 = call i8* @gettext(i8* %21) #8
  %23 = call i32* @__errno_location() #15
  %24 = load i32, i32* %23, align 4
  %25 = call i8* @strerror(i32 %24) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %22, i8* %0, i8* %25)
  br label %272

; <label>:26:                                     ; preds = %17
  %27 = call i32 @downloaded_file(i32 3, i8* %0)
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 97
  %29 = load i8, i8* %28, align 2
  %30 = trunc i8 %29 to i1
  %31 = icmp ne i32 %27, 0
  %or.cond = and i1 %30, %31
  br i1 %or.cond, label %32, label %33

; <label>:32:                                     ; preds = %26
  call void @write_backup_file(i8* %0, i32 %27)
  br label %33

; <label>:33:                                     ; preds = %32, %26
  %34 = call i32 @unlink(i8* %0) #8
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %47

; <label>:36:                                     ; preds = %33
  %37 = call i32* @__errno_location() #15
  %38 = load i32, i32* %37, align 4
  %39 = icmp ne i32 %38, 2
  br i1 %39, label %40, label %47

; <label>:40:                                     ; preds = %36
  %41 = getelementptr [25 x i8], [25 x i8]* @.str.8.23, i32 0, i32 0
  %42 = call i8* @gettext(i8* %41) #8
  %43 = call i8* @quote(i8* %0)
  %44 = call i32* @__errno_location() #15
  %45 = load i32, i32* %44, align 4
  %46 = call i8* @strerror(i32 %45) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %42, i8* %43, i8* %46)
  call void @wget_read_file_free(%struct.file_memory* %18)
  br label %272

; <label>:47:                                     ; preds = %36, %33
  %48 = getelementptr [3 x i8], [3 x i8]* @.str.9.24, i32 0, i32 0
  %49 = call %struct._IO_FILE* @fopen(i8* %0, i8* %48), !track !120
  %50 = icmp ne %struct._IO_FILE* %49, null
  br i1 %50, label %57, label %51

; <label>:51:                                     ; preds = %47
  %52 = getelementptr [32 x i8], [32 x i8]* @.str.7.22, i32 0, i32 0
  %53 = call i8* @gettext(i8* %52) #8
  %54 = call i32* @__errno_location() #15
  %55 = load i32, i32* %54, align 4
  %56 = call i8* @strerror(i32 %55) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %53, i8* %0, i8* %56)
  call void @wget_read_file_free(%struct.file_memory* %18)
  br label %272

; <label>:57:                                     ; preds = %47
  %58 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %18, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = icmp ne %struct.urlpos* %1, null
  br i1 %60, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %57
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %247
  %.022 = phi i8* [ %.8, %247 ], [ %59, %.lr.ph.preheader ]
  %.0119 = phi %struct.urlpos* [ %249, %247 ], [ %1, %.lr.ph.preheader ]
  %.0218 = phi i32 [ %.24, %247 ], [ 0, %.lr.ph.preheader ]
  %.0517 = phi i32 [ %.27, %247 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 11)
  %61 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %18, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 5
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  %67 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 5
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %18, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = icmp sge i64 %69, %71
  br i1 %72, label %73, label %79

; <label>:73:                                     ; preds = %.lr.ph
  %.05.lcssa15 = phi i32 [ %.0517, %.lr.ph ]
  %.02.lcssa13 = phi i32 [ %.0218, %.lr.ph ]
  %.0.lcssa11 = phi i8* [ %.022, %.lr.ph ]
  %74 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %75 = load i8, i8* %74, align 1
  %76 = trunc i8 %75 to i1
  br i1 %76, label %77, label %.loopexit

; <label>:77:                                     ; preds = %73
  %78 = getelementptr [52 x i8], [52 x i8]* @.str.10.25, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %78)
  br label %.loopexit

; <label>:79:                                     ; preds = %.lr.ph
  %80 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 4
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %95

; <label>:83:                                     ; preds = %79
  %84 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %85 = load i8, i8* %84, align 1
  %86 = trunc i8 %85 to i1
  br i1 %86, label %87, label %247

; <label>:87:                                     ; preds = %83
  %88 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 0
  %89 = load %struct.url*, %struct.url** %88, align 8
  %90 = getelementptr inbounds %struct.url, %struct.url* %89, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 5
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr [29 x i8], [29 x i8]* @.str.11.26, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %94, i8* %91, i32 %93)
  br label %247

; <label>:95:                                     ; preds = %79
  %96 = ptrtoint i8* %66 to i64
  %97 = ptrtoint i8* %.022 to i64
  %98 = sub i64 %96, %97
  %99 = call i64 @fwrite(i8* %.022, i64 1, i64 %98, %struct._IO_FILE* %49)
  %100 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 4
  %101 = load i32, i32* %100, align 8
  switch i32 %101, label %247 [
    i32 1, label %102
    i32 2, label %152
    i32 3, label %200
    i32 4, label %241
    i32 0, label %246
  ]

; <label>:102:                                    ; preds = %95
  %103 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 1
  %104 = load i8*, i8** %103, align 8
  %105 = call i8* @construct_relative(i8* %0, i8* %104)
  %106 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %107 = load i16, i16* %106, align 8
  %108 = lshr i16 %107, 5
  %109 = and i16 %108, 1
  %110 = zext i16 %109 to i32
  %111 = icmp ne i32 %110, 0
  %112 = call i8* @local_quote_string(i8* %105, i1 zeroext %111)
  %113 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %114 = load i16, i16* %113, align 8
  %115 = lshr i16 %114, 5
  %116 = and i16 %115, 1
  %117 = zext i16 %116 to i32
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %123

; <label>:119:                                    ; preds = %102
  %120 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 6
  %121 = load i32, i32* %120, align 8
  %122 = call i8* @replace_plain(i8* %66, i32 %121, %struct._IO_FILE* %49, i8* %112)
  br label %138

; <label>:123:                                    ; preds = %102
  %124 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %125 = load i16, i16* %124, align 8
  %126 = lshr i16 %125, 8
  %127 = and i16 %126, 1
  %128 = zext i16 %127 to i32
  %129 = icmp ne i32 %128, 0
  %130 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 6
  %131 = load i32, i32* %130, align 8
  br i1 %129, label %134, label %132

; <label>:132:                                    ; preds = %123
  %133 = call i8* @replace_attr(i8* %66, i32 %131, %struct._IO_FILE* %49, i8* %112)
  br label %138

; <label>:134:                                    ; preds = %123
  %135 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 3
  %136 = load i32, i32* %135, align 4
  %137 = call i8* @replace_attr_refresh_hack(i8* %66, i32 %131, %struct._IO_FILE* %49, i8* %112, i32 %136)
  br label %138

; <label>:138:                                    ; preds = %119, %134, %132
  %.2 = phi i8* [ %122, %119 ], [ %137, %134 ], [ %133, %132 ]
  %139 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %140 = load i8, i8* %139, align 1
  %141 = trunc i8 %140 to i1
  br i1 %141, label %142, label %150

; <label>:142:                                    ; preds = %138
  %143 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 0
  %144 = load %struct.url*, %struct.url** %143, align 8
  %145 = getelementptr inbounds %struct.url, %struct.url* %144, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  %147 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 5
  %148 = load i32, i32* %147, align 4
  %149 = getelementptr [45 x i8], [45 x i8]* @.str.12.27, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %149, i8* %146, i8* %105, i32 %148, i8* %0)
  br label %150

; <label>:150:                                    ; preds = %142, %138
  call void @free(i8* %105) #8
  call void @free(i8* %112) #8
  %151 = add nsw i32 %.0517, 1
  br label %247

; <label>:152:                                    ; preds = %95
  %153 = call i8* @convert_basename(i8* %66, %struct.urlpos* %.0119)
  %154 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %155 = load i16, i16* %154, align 8
  %156 = lshr i16 %155, 5
  %157 = and i16 %156, 1
  %158 = zext i16 %157 to i32
  %159 = icmp ne i32 %158, 0
  %160 = call i8* @local_quote_string(i8* %153, i1 zeroext %159)
  %161 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %162 = load i16, i16* %161, align 8
  %163 = lshr i16 %162, 5
  %164 = and i16 %163, 1
  %165 = zext i16 %164 to i32
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %171

; <label>:167:                                    ; preds = %152
  %168 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 6
  %169 = load i32, i32* %168, align 8
  %170 = call i8* @replace_plain(i8* %66, i32 %169, %struct._IO_FILE* %49, i8* %160)
  br label %186

; <label>:171:                                    ; preds = %152
  %172 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %173 = load i16, i16* %172, align 8
  %174 = lshr i16 %173, 8
  %175 = and i16 %174, 1
  %176 = zext i16 %175 to i32
  %177 = icmp ne i32 %176, 0
  %178 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 6
  %179 = load i32, i32* %178, align 8
  br i1 %177, label %182, label %180

; <label>:180:                                    ; preds = %171
  %181 = call i8* @replace_attr(i8* %66, i32 %179, %struct._IO_FILE* %49, i8* %160)
  br label %186

; <label>:182:                                    ; preds = %171
  %183 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 3
  %184 = load i32, i32* %183, align 4
  %185 = call i8* @replace_attr_refresh_hack(i8* %66, i32 %179, %struct._IO_FILE* %49, i8* %160, i32 %184)
  br label %186

; <label>:186:                                    ; preds = %167, %182, %180
  %.4 = phi i8* [ %170, %167 ], [ %185, %182 ], [ %181, %180 ]
  %187 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %188 = load i8, i8* %187, align 1
  %189 = trunc i8 %188 to i1
  br i1 %189, label %190, label %198

; <label>:190:                                    ; preds = %186
  %191 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 0
  %192 = load %struct.url*, %struct.url** %191, align 8
  %193 = getelementptr inbounds %struct.url, %struct.url* %192, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 5
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr [58 x i8], [58 x i8]* @.str.13.28, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %197, i8* %194, i8* %153, i32 %196, i8* %0)
  br label %198

; <label>:198:                                    ; preds = %190, %186
  call void @free(i8* %153) #8
  call void @free(i8* %160) #8
  %199 = add nsw i32 %.0517, 1
  br label %247

; <label>:200:                                    ; preds = %95
  %201 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 0
  %202 = load %struct.url*, %struct.url** %201, align 8
  %203 = getelementptr inbounds %struct.url, %struct.url* %202, i32 0, i32 0
  %204 = load i8*, i8** %203, align 8
  %205 = call i8* @html_quote_string(i8* %204)
  %206 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %207 = load i16, i16* %206, align 8
  %208 = lshr i16 %207, 5
  %209 = and i16 %208, 1
  %210 = zext i16 %209 to i32
  %211 = icmp ne i32 %210, 0
  br i1 %211, label %212, label %216

; <label>:212:                                    ; preds = %200
  %213 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 6
  %214 = load i32, i32* %213, align 8
  %215 = call i8* @replace_plain(i8* %66, i32 %214, %struct._IO_FILE* %49, i8* %204)
  br label %231

; <label>:216:                                    ; preds = %200
  %217 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 2
  %218 = load i16, i16* %217, align 8
  %219 = lshr i16 %218, 8
  %220 = and i16 %219, 1
  %221 = zext i16 %220 to i32
  %222 = icmp ne i32 %221, 0
  %223 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 6
  %224 = load i32, i32* %223, align 8
  br i1 %222, label %227, label %225

; <label>:225:                                    ; preds = %216
  %226 = call i8* @replace_attr(i8* %66, i32 %224, %struct._IO_FILE* %49, i8* %205)
  br label %231

; <label>:227:                                    ; preds = %216
  %228 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 3
  %229 = load i32, i32* %228, align 4
  %230 = call i8* @replace_attr_refresh_hack(i8* %66, i32 %224, %struct._IO_FILE* %49, i8* %205, i32 %229)
  br label %231

; <label>:231:                                    ; preds = %212, %227, %225
  %.6 = phi i8* [ %215, %212 ], [ %230, %227 ], [ %226, %225 ]
  %232 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %233 = load i8, i8* %232, align 1
  %234 = trunc i8 %233 to i1
  br i1 %234, label %235, label %239

; <label>:235:                                    ; preds = %231
  %236 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 5
  %237 = load i32, i32* %236, align 4
  %238 = getelementptr [54 x i8], [54 x i8]* @.str.14.29, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %238, i8* %204, i32 %237, i8* %0)
  br label %239

; <label>:239:                                    ; preds = %235, %231
  call void @free(i8* %205) #8
  %240 = add nsw i32 %.0218, 1
  br label %247

; <label>:241:                                    ; preds = %95
  %242 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 6
  %243 = load i32, i32* %242, align 8
  %244 = getelementptr [1 x i8], [1 x i8]* @.str.15.30, i32 0, i32 0
  %245 = call i8* @replace_attr(i8* %66, i32 %243, %struct._IO_FILE* %49, i8* %244)
  br label %247

; <label>:246:                                    ; preds = %95
  call void @abort() #16
  unreachable

; <label>:247:                                    ; preds = %150, %198, %239, %241, %95, %87, %83
  %.27 = phi i32 [ %.0517, %83 ], [ %.0517, %87 ], [ %.0517, %95 ], [ %.0517, %241 ], [ %.0517, %239 ], [ %199, %198 ], [ %151, %150 ]
  %.24 = phi i32 [ %.0218, %83 ], [ %.0218, %87 ], [ %.0218, %95 ], [ %.0218, %241 ], [ %240, %239 ], [ %.0218, %198 ], [ %.0218, %150 ]
  %.8 = phi i8* [ %.022, %83 ], [ %.022, %87 ], [ %66, %95 ], [ %245, %241 ], [ %.6, %239 ], [ %.4, %198 ], [ %.2, %150 ]
  %248 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0119, i32 0, i32 7
  %249 = load %struct.urlpos*, %struct.urlpos** %248, align 8
  %250 = icmp ne %struct.urlpos* %249, null
  br i1 %250, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %247
  %.05.lcssa.ph = phi i32 [ %.27, %247 ]
  %.02.lcssa.ph = phi i32 [ %.24, %247 ]
  %.0.lcssa.ph = phi i8* [ %.8, %247 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %57, %77, %73
  %.05.lcssa = phi i32 [ %.05.lcssa15, %73 ], [ %.05.lcssa15, %77 ], [ 0, %57 ], [ %.05.lcssa.ph, %.loopexit.loopexit ]
  %.02.lcssa = phi i32 [ %.02.lcssa13, %73 ], [ %.02.lcssa13, %77 ], [ 0, %57 ], [ %.02.lcssa.ph, %.loopexit.loopexit ]
  %.0.lcssa = phi i8* [ %.0.lcssa11, %73 ], [ %.0.lcssa11, %77 ], [ %59, %57 ], [ %.0.lcssa.ph, %.loopexit.loopexit ]
  %251 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %18, i32 0, i32 0
  %252 = load i8*, i8** %251, align 8
  %253 = ptrtoint i8* %.0.lcssa to i64
  %254 = ptrtoint i8* %252 to i64
  %255 = sub i64 %253, %254
  %256 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %18, i32 0, i32 1
  %257 = load i64, i64* %256, align 8
  %258 = icmp slt i64 %255, %257
  br i1 %258, label %259, label %269

; <label>:259:                                    ; preds = %.loopexit
  %260 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %18, i32 0, i32 1
  %261 = load i64, i64* %260, align 8
  %262 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %18, i32 0, i32 0
  %263 = load i8*, i8** %262, align 8
  %264 = ptrtoint i8* %.0.lcssa to i64
  %265 = ptrtoint i8* %263 to i64
  %266 = sub i64 %264, %265
  %267 = sub nsw i64 %261, %266
  %268 = call i64 @fwrite(i8* %.0.lcssa, i64 1, i64 %267, %struct._IO_FILE* %49)
  br label %269

; <label>:269:                                    ; preds = %259, %.loopexit
  %270 = call i32 @fclose(%struct._IO_FILE* %49)
  call void @wget_read_file_free(%struct.file_memory* %18)
  %271 = getelementptr [7 x i8], [7 x i8]* @.str.16, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %271, i32 %.05.lcssa, i32 %.02.lcssa)
  br label %272

; <label>:272:                                    ; preds = %269, %51, %40, %20, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @downloaded_file(i32, i8*) #0 {
  %3 = icmp eq i32 %0, 3
  %4 = load %struct.hash_table*, %struct.hash_table** @downloaded_files_hash, align 8
  %5 = icmp ne %struct.hash_table* %4, null
  br i1 %3, label %6, label %14

; <label>:6:                                      ; preds = %2
  br i1 %5, label %7, label %29

; <label>:7:                                      ; preds = %6
  %8 = load %struct.hash_table*, %struct.hash_table** @downloaded_files_hash, align 8
  %9 = call i8* @hash_table_get(%struct.hash_table* %8, i8* %1)
  %10 = bitcast i8* %9 to i32*
  %11 = icmp ne i32* %10, null
  br i1 %11, label %12, label %29

; <label>:12:                                     ; preds = %7
  %13 = load i32, i32* %10, align 4
  br label %29

; <label>:14:                                     ; preds = %2
  br i1 %5, label %17, label %15

; <label>:15:                                     ; preds = %14
  %16 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %16, %struct.hash_table** @downloaded_files_hash, align 8
  br label %17

; <label>:17:                                     ; preds = %15, %14
  %18 = load %struct.hash_table*, %struct.hash_table** @downloaded_files_hash, align 8
  %19 = call i8* @hash_table_get(%struct.hash_table* %18, i8* %1)
  %20 = bitcast i8* %19 to i32*
  %21 = icmp ne i32* %20, null
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %17
  %23 = load i32, i32* %20, align 4
  br label %29

; <label>:24:                                     ; preds = %17
  %25 = call i32* @downloaded_mode_to_ptr(i32 %0)
  %26 = load %struct.hash_table*, %struct.hash_table** @downloaded_files_hash, align 8
  %27 = call noalias i8* @xstrdup(i8* %1)
  %28 = bitcast i32* %25 to i8*
  call void @hash_table_put(%struct.hash_table* %26, i8* %27, i8* %28)
  br label %29

; <label>:29:                                     ; preds = %7, %6, %24, %22, %12
  %.0 = phi i32 [ %13, %12 ], [ %23, %22 ], [ 0, %24 ], [ 0, %6 ], [ 0, %7 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_backup_file(i8*, i32) #0 {
  %3 = call i64 @strlen(i8* %0) #14
  %4 = icmp eq i32 %1, 2
  br i1 %4, label %5, label %13

; <label>:5:                                      ; preds = %2
  %6 = add i64 %3, 1
  %7 = alloca i8, i64 %6, align 16, !track !121
  %8 = call i8* @strcpy(i8* %7, i8* %0) #8, !track !122
  %9 = getelementptr inbounds i8, i8* %7, i64 %3
  %10 = getelementptr inbounds i8, i8* %9, i64 -4
  %11 = getelementptr [5 x i8], [5 x i8]* @.str.17, i32 0, i32 0
  %12 = call i8* @strcpy(i8* %10, i8* %11) #8, !track !123
  br label %20

; <label>:13:                                     ; preds = %2
  %14 = add i64 %3, 6
  %15 = alloca i8, i64 %14, align 16, !track !124
  %16 = call i8* @strcpy(i8* %15, i8* %0) #8, !track !125
  %17 = getelementptr inbounds i8, i8* %15, i64 %3
  %18 = getelementptr [6 x i8], [6 x i8]* @.str.18, i32 0, i32 0
  %19 = call i8* @strcpy(i8* %17, i8* %18) #8, !track !126
  br label %20

; <label>:20:                                     ; preds = %13, %5
  %.0 = phi i8* [ %7, %5 ], [ %15, %13 ]
  %21 = load %struct.hash_table*, %struct.hash_table** @converted_files, align 8
  %22 = icmp ne %struct.hash_table* %21, null
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %20
  %24 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %24, %struct.hash_table** @converted_files, align 8
  br label %25

; <label>:25:                                     ; preds = %23, %20
  %26 = load %struct.hash_table*, %struct.hash_table** @converted_files, align 8
  %27 = call i32 @string_set_contains(%struct.hash_table* %26, i8* %0)
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %40, label %29

; <label>:29:                                     ; preds = %25
  %30 = call i32 @rename(i8* %0, i8* %.0) #8
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %38

; <label>:32:                                     ; preds = %29
  %33 = getelementptr [29 x i8], [29 x i8]* @.str.19, i32 0, i32 0
  %34 = call i8* @gettext(i8* %33) #8
  %35 = call i32* @__errno_location() #15
  %36 = load i32, i32* %35, align 4
  %37 = call i8* @strerror(i32 %36) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %34, i8* %0, i8* %.0, i8* %37)
  br label %38

; <label>:38:                                     ; preds = %32, %29
  %39 = load %struct.hash_table*, %struct.hash_table** @converted_files, align 8
  call void @string_set_add(%struct.hash_table* %39, i8* %0)
  br label %40

; <label>:40:                                     ; preds = %38, %25
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @unlink(i8*) #2

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #3

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define internal i8* @construct_relative(i8*, i8*) #7 {
  call void @unroll_loop(i32 13)
  %3 = load i8, i8* %0, align 1
  %4 = sext i8 %3 to i32
  %5 = load i8, i8* %1, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %.lr.ph6, label %.critedge

.lr.ph6:                                          ; preds = %2
  br label %8

; <label>:8:                                      ; preds = %.lr.ph6, %12
  %.024 = phi i8* [ %0, %.lr.ph6 ], [ %21, %12 ]
  %.043 = phi i8* [ %1, %.lr.ph6 ], [ %22, %12 ]
  %.062 = phi i32 [ 0, %.lr.ph6 ], [ %.17, %12 ]
  %9 = load i8, i8* %.024, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %..critedge_crit_edge7

; <label>:12:                                     ; preds = %8
  %13 = load i8, i8* %.024, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %14, 47
  %16 = ptrtoint i8* %.024 to i64
  %17 = ptrtoint i8* %0 to i64
  %18 = sub i64 %16, %17
  %19 = add nsw i64 %18, 1
  %20 = trunc i64 %19 to i32
  %.17 = select i1 %15, i32 %20, i32 %.062
  %21 = getelementptr inbounds i8, i8* %.024, i32 1
  %22 = getelementptr inbounds i8, i8* %.043, i32 1
  call void @unroll_loop(i32 13)
  %23 = load i8, i8* %21, align 1
  %24 = sext i8 %23 to i32
  %25 = load i8, i8* %22, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %8, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %12
  %split = phi i32 [ %.17, %12 ]
  br label %.critedge

..critedge_crit_edge7:                            ; preds = %8
  %split8 = phi i32 [ %.062, %8 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge7, %..critedge_crit_edge, %2
  %.06.lcssa = phi i32 [ %split8, %..critedge_crit_edge7 ], [ %split, %..critedge_crit_edge ], [ 0, %2 ]
  %28 = sext i32 %.06.lcssa to i64
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = sext i32 %.06.lcssa to i64
  %31 = getelementptr inbounds i8, i8* %1, i64 %30
  %32 = load i8, i8* %29, align 1
  %33 = icmp ne i8 %32, 0
  br i1 %33, label %.lr.ph12.preheader, label %._crit_edge13

.lr.ph12.preheader:                               ; preds = %.critedge
  br label %.lr.ph12

.lr.ph12:                                         ; preds = %.lr.ph12.preheader, %.lr.ph12
  %.0110 = phi i32 [ %spec.select, %.lr.ph12 ], [ 0, %.lr.ph12.preheader ]
  %.139 = phi i8* [ %38, %.lr.ph12 ], [ %29, %.lr.ph12.preheader ]
  call void @unroll_loop(i32 14)
  %34 = load i8, i8* %.139, align 1
  %35 = sext i8 %34 to i32
  %36 = icmp eq i32 %35, 47
  %37 = add nsw i32 %.0110, 1
  %spec.select = select i1 %36, i32 %37, i32 %.0110
  %38 = getelementptr inbounds i8, i8* %.139, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp ne i8 %39, 0
  br i1 %40, label %.lr.ph12, label %._crit_edge13.loopexit

._crit_edge13.loopexit:                           ; preds = %.lr.ph12
  %.01.lcssa.ph = phi i32 [ %spec.select, %.lr.ph12 ]
  br label %._crit_edge13

._crit_edge13:                                    ; preds = %._crit_edge13.loopexit, %.critedge
  %.01.lcssa = phi i32 [ 0, %.critedge ], [ %.01.lcssa.ph, %._crit_edge13.loopexit ]
  %41 = icmp ne i32 %.01.lcssa, 0
  br i1 %41, label %58, label %42

; <label>:42:                                     ; preds = %._crit_edge13
  %43 = getelementptr [3 x i8], [3 x i8]* @.str.20, i32 0, i32 0
  %44 = call i8* @strpbrk(i8* %31, i8* %43) #14, !track !127
  %45 = icmp ne i8* %44, null
  br i1 %45, label %46, label %58

; <label>:46:                                     ; preds = %42
  %47 = load i8, i8* %44, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp eq i32 %48, 58
  br i1 %49, label %50, label %58

; <label>:50:                                     ; preds = %46
  %51 = call i64 @strlen(i8* %31) #14
  %52 = add i64 2, %51
  %53 = add i64 %52, 1
  %54 = call noalias i8* @xmalloc(i64 %53)
  %55 = getelementptr [3 x i8], [3 x i8]* @.str.21, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 2, i1 false), !track !128
  %56 = getelementptr inbounds i8, i8* %54, i64 2
  %57 = call i8* @strcpy(i8* %56, i8* %31) #8, !track !129
  br label %80

; <label>:58:                                     ; preds = %46, %42, %._crit_edge13
  %59 = mul nsw i32 3, %.01.lcssa
  %60 = sext i32 %59 to i64
  %61 = call i64 @strlen(i8* %31) #14
  %62 = add i64 %60, %61
  %63 = add i64 %62, 1
  %64 = call noalias i8* @xmalloc(i64 %63)
  %65 = icmp slt i32 0, %.01.lcssa
  br i1 %65, label %.lr.ph, label %75

.lr.ph:                                           ; preds = %58
  %66 = add i32 %.01.lcssa, -1
  %67 = zext i32 %.01.lcssa to i64
  br label %68

; <label>:68:                                     ; preds = %.lr.ph, %68
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %68 ]
  call void @unroll_loop(i32 15)
  %69 = mul nuw nsw i64 3, %indvars.iv
  %70 = getelementptr inbounds i8, i8* %64, i64 %69
  %71 = getelementptr [4 x i8], [4 x i8]* @.str.22, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 3, i1 false), !track !130
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %67
  br i1 %exitcond1, label %68, label %._crit_edge

._crit_edge:                                      ; preds = %68
  %72 = zext i32 %66 to i64
  %73 = add i64 %72, 1
  %74 = trunc i64 %73 to i32
  br label %75

; <label>:75:                                     ; preds = %._crit_edge, %58
  %.05.lcssa = phi i32 [ %74, %._crit_edge ], [ 0, %58 ]
  %76 = mul nsw i32 3, %.05.lcssa
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %64, i64 %77
  %79 = call i8* @strcpy(i8* %78, i8* %31) #8, !track !131
  br label %80

; <label>:80:                                     ; preds = %75, %50
  %.0 = phi i8* [ %64, %75 ], [ %54, %50 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @local_quote_string(i8*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr [5 x i8], [5 x i8]* @.str.23, i32 0, i32 0
  %5 = call i8* @strpbrk(i8* %0, i8* %4) #14, !track !132
  %6 = icmp ne i8* %5, null
  br i1 %6, label %13, label %7

; <label>:7:                                      ; preds = %2
  %8 = trunc i8 %3 to i1
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %7
  %10 = call noalias i8* @strdup(i8* %0) #8, !track !133
  br label %55

; <label>:11:                                     ; preds = %7
  %12 = call i8* @html_quote_string(i8* %0)
  br label %55

; <label>:13:                                     ; preds = %2
  %14 = call i64 @strlen(i8* %0) #14
  %15 = mul i64 3, %14
  %16 = add i64 %15, 1
  %17 = alloca i8, i64 %16, align 16, !track !134
  %18 = getelementptr inbounds i8, i8* %17, i64 0
  store i8 0, i8* %18, align 1
  %19 = load i8, i8* %0, align 1
  %20 = icmp ne i8 %19, 0
  br i1 %20, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %13
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %46
  %.014 = phi i8* [ %.1, %46 ], [ %17, %.lr.ph.preheader ]
  %.023 = phi i8* [ %47, %46 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 16)
  %21 = load i8, i8* %.023, align 1
  %22 = sext i8 %21 to i32
  switch i32 %22, label %43 [
    i32 37, label %23
    i32 35, label %27
    i32 59, label %31
    i32 63, label %35
  ]

; <label>:23:                                     ; preds = %.lr.ph
  %24 = getelementptr inbounds i8, i8* %.014, i32 1
  store i8 37, i8* %.014, align 1
  %25 = getelementptr inbounds i8, i8* %24, i32 1
  store i8 50, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %25, i32 1
  store i8 53, i8* %25, align 1
  br label %46

; <label>:27:                                     ; preds = %.lr.ph
  %28 = getelementptr inbounds i8, i8* %.014, i32 1
  store i8 37, i8* %.014, align 1
  %29 = getelementptr inbounds i8, i8* %28, i32 1
  store i8 50, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8 51, i8* %29, align 1
  br label %46

; <label>:31:                                     ; preds = %.lr.ph
  %32 = getelementptr inbounds i8, i8* %.014, i32 1
  store i8 37, i8* %.014, align 1
  %33 = getelementptr inbounds i8, i8* %32, i32 1
  store i8 51, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %33, i32 1
  store i8 66, i8* %33, align 1
  br label %46

; <label>:35:                                     ; preds = %.lr.ph
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 110
  %37 = load i8, i8* %36, align 1
  %38 = trunc i8 %37 to i1
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %35
  %40 = getelementptr inbounds i8, i8* %.014, i32 1
  store i8 37, i8* %.014, align 1
  %41 = getelementptr inbounds i8, i8* %40, i32 1
  store i8 51, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8 70, i8* %41, align 1
  br label %46

; <label>:43:                                     ; preds = %35, %.lr.ph
  %44 = load i8, i8* %.023, align 1
  %45 = getelementptr inbounds i8, i8* %.014, i32 1
  store i8 %44, i8* %.014, align 1
  br label %46

; <label>:46:                                     ; preds = %23, %27, %31, %39, %43
  %.1 = phi i8* [ %45, %43 ], [ %42, %39 ], [ %34, %31 ], [ %30, %27 ], [ %26, %23 ]
  %47 = getelementptr inbounds i8, i8* %.023, i32 1
  %48 = load i8, i8* %47, align 1
  %49 = icmp ne i8 %48, 0
  br i1 %49, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %46
  %.01.lcssa.ph = phi i8* [ %.1, %46 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %13
  %.01.lcssa = phi i8* [ %17, %13 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.01.lcssa, align 1
  %50 = trunc i8 %3 to i1
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %._crit_edge
  %52 = call noalias i8* @strdup(i8* %17) #8, !track !135
  br label %55

; <label>:53:                                     ; preds = %._crit_edge
  %54 = call i8* @html_quote_string(i8* %17)
  br label %55

; <label>:55:                                     ; preds = %51, %53, %9, %11
  %.0 = phi i8* [ %10, %9 ], [ %12, %11 ], [ %52, %51 ], [ %54, %53 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @replace_plain(i8*, i32, %struct._IO_FILE*, i8*) #0 {
  %5 = call i32 @fputs(i8* %3, %struct._IO_FILE* %2)
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  ret i8* %7
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @replace_attr(i8*, i32, %struct._IO_FILE*, i8*) #0 {
  %5 = alloca i8*, align 8, !track !136
  %6 = alloca i8*, align 8, !track !137
  %7 = load i8, i8* %0, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp eq i32 %8, 34
  br i1 %9, label %14, label %10

; <label>:10:                                     ; preds = %4
  %11 = load i8, i8* %0, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 39
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %10, %4
  %15 = load i8, i8* %0, align 1
  %16 = getelementptr inbounds i8, i8* %0, i32 1
  %17 = sub nsw i32 %1, 2
  br label %18

; <label>:18:                                     ; preds = %14, %10
  %.03 = phi i8 [ 1, %14 ], [ 0, %10 ]
  %.02 = phi i8 [ %15, %14 ], [ 34, %10 ]
  %.01 = phi i32 [ %17, %14 ], [ %1, %10 ]
  %.0 = phi i8* [ %16, %14 ], [ %0, %10 ]
  %19 = sext i8 %.02 to i32
  %20 = call i32 @_IO_putc(i32 %19, %struct._IO_FILE* %2)
  %21 = call i32 @fputs(i8* %3, %struct._IO_FILE* %2)
  %22 = call zeroext i1 @find_fragment(i8* %.0, i32 %.01, i8** %5, i8** %6)
  br i1 %22, label %23, label %31

; <label>:23:                                     ; preds = %18
  %24 = load i8*, i8** %5, align 8
  %25 = load i8*, i8** %6, align 8
  %26 = load i8*, i8** %5, align 8
  %27 = ptrtoint i8* %25 to i64
  %28 = ptrtoint i8* %26 to i64
  %29 = sub i64 %27, %28
  %30 = call i64 @fwrite(i8* %24, i64 1, i64 %29, %struct._IO_FILE* %2)
  br label %31

; <label>:31:                                     ; preds = %23, %18
  %32 = sext i32 %.01 to i64
  %33 = getelementptr inbounds i8, i8* %.0, i64 %32
  %34 = trunc i8 %.03 to i1
  %35 = getelementptr inbounds i8, i8* %33, i32 1
  %spec.select = select i1 %34, i8* %35, i8* %33
  %36 = sext i8 %.02 to i32
  %37 = call i32 @_IO_putc(i32 %36, %struct._IO_FILE* %2)
  ret i8* %spec.select
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @replace_attr_refresh_hack(i8*, i32, %struct._IO_FILE*, i8*, i32) #0 {
  %6 = sext i32 %4 to i64
  %7 = call i32 @numdigit(i64 %6)
  %8 = add nsw i32 %7, 6
  %9 = sext i32 %8 to i64
  %10 = call i64 @strlen(i8* %3) #14
  %11 = add i64 %9, %10
  %12 = add i64 %11, 1
  %13 = alloca i8, i64 %12, align 16, !track !138
  %14 = getelementptr [11 x i8], [11 x i8]* @.str.24, i32 0, i32 0
  %15 = call i32 (i8*, i8*, ...) @sprintf(i8* %13, i8* %14, i32 %4, i8* %3) #8
  %16 = call i8* @replace_attr(i8* %0, i32 %1, %struct._IO_FILE* %2, i8* %13)
  ret i8* %16
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @convert_basename(i8*, %struct.urlpos*) #7 {
  %3 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %1, i32 0, i32 6
  %4 = load i32, i32* %3, align 8
  %5 = load i8, i8* %0, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp eq i32 %6, 34
  br i1 %7, label %12, label %8

; <label>:8:                                      ; preds = %2
  %9 = load i8, i8* %0, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, 39
  br i1 %11, label %12, label %15

; <label>:12:                                     ; preds = %8, %2
  %13 = sub nsw i32 %4, 2
  %14 = getelementptr inbounds i8, i8* %0, i32 1
  br label %15

; <label>:15:                                     ; preds = %12, %8
  %.02 = phi i32 [ %13, %12 ], [ %4, %8 ]
  %.0 = phi i8* [ %14, %12 ], [ %0, %8 ]
  %16 = sext i32 %.02 to i64
  %17 = call i8* @xstrndup(i8* %.0, i64 %16)
  %18 = call i8* @strrchr(i8* %17, i32 47) #14
  %19 = icmp ne i8* %18, null
  %20 = getelementptr inbounds i8, i8* %18, i32 1
  %.03 = select i1 %19, i8* %20, i8* %17
  %21 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %1, i32 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = call i8* @strrchr(i8* %22, i32 47) #14, !track !139
  %24 = icmp ne i8* %23, null
  %25 = getelementptr inbounds i8, i8* %23, i32 1
  %.04 = select i1 %24, i8* %25, i8* %17
  %26 = call i32 @strcmp(i8* %.03, i8* %.04) #14
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %15
  %29 = call i8* @uri_merge(i8* %17, i8* %.04)
  call void @free(i8* %17) #8
  br label %30

; <label>:30:                                     ; preds = %15, %28
  %.01 = phi i8* [ %29, %28 ], [ %17, %15 ]
  ret i8* %.01
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @html_quote_string(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph11.preheader, label %._crit_edge12

.lr.ph11.preheader:                               ; preds = %1
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %30
  %.09 = phi i8* [ %31, %30 ], [ %0, %.lr.ph11.preheader ]
  %.018 = phi i32 [ %32, %30 ], [ 0, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 17)
  %4 = load i8, i8* %.09, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp eq i32 %5, 38
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %.lr.ph11
  %8 = add nsw i32 %.018, 4
  br label %30

; <label>:9:                                      ; preds = %.lr.ph11
  %10 = load i8, i8* %.09, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %11, 60
  br i1 %12, label %17, label %13

; <label>:13:                                     ; preds = %9
  %14 = load i8, i8* %.09, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp eq i32 %15, 62
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %13, %9
  %18 = add nsw i32 %.018, 3
  br label %30

; <label>:19:                                     ; preds = %13
  %20 = load i8, i8* %.09, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp eq i32 %21, 34
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %19
  %24 = add nsw i32 %.018, 5
  br label %30

; <label>:25:                                     ; preds = %19
  %26 = load i8, i8* %.09, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp eq i32 %27, 32
  %29 = add nsw i32 %.018, 4
  %spec.select = select i1 %28, i32 %29, i32 %.018
  br label %30

; <label>:30:                                     ; preds = %7, %23, %25, %17
  %.4 = phi i32 [ %8, %7 ], [ %18, %17 ], [ %24, %23 ], [ %spec.select, %25 ]
  %31 = getelementptr inbounds i8, i8* %.09, i32 1
  %32 = add nsw i32 %.4, 1
  %33 = load i8, i8* %31, align 1
  %34 = icmp ne i8 %33, 0
  br i1 %34, label %.lr.ph11, label %._crit_edge12.loopexit

._crit_edge12.loopexit:                           ; preds = %30
  %.01.lcssa.ph = phi i32 [ %32, %30 ]
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %1
  %.01.lcssa = phi i32 [ 0, %1 ], [ %.01.lcssa.ph, %._crit_edge12.loopexit ]
  %35 = add nsw i32 %.01.lcssa, 1
  %36 = sext i32 %35 to i64
  %37 = call noalias i8* @xmalloc(i64 %36)
  %38 = load i8, i8* %0, align 1
  %39 = icmp ne i8 %38, 0
  br i1 %39, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge12
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %75
  %.16 = phi i8* [ %76, %75 ], [ %0, %.lr.ph.preheader ]
  %.035 = phi i8* [ %.14, %75 ], [ %37, %.lr.ph.preheader ]
  call void @unroll_loop(i32 18)
  %40 = load i8, i8* %.16, align 1
  %41 = sext i8 %40 to i32
  switch i32 %41, label %72 [
    i32 38, label %42
    i32 60, label %48
    i32 62, label %48
    i32 34, label %59
    i32 32, label %66
  ]

; <label>:42:                                     ; preds = %.lr.ph
  %43 = getelementptr inbounds i8, i8* %.035, i32 1
  store i8 38, i8* %.035, align 1
  %44 = getelementptr inbounds i8, i8* %43, i32 1
  store i8 97, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %44, i32 1
  store i8 109, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %45, i32 1
  store i8 112, i8* %45, align 1
  %47 = getelementptr inbounds i8, i8* %46, i32 1
  store i8 59, i8* %46, align 1
  br label %75

; <label>:48:                                     ; preds = %.lr.ph, %.lr.ph
  %49 = getelementptr inbounds i8, i8* %.035, i32 1
  store i8 38, i8* %.035, align 1
  %50 = load i8, i8* %.16, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 60
  %53 = zext i1 %52 to i64
  %54 = select i1 %52, i32 108, i32 103
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds i8, i8* %49, i32 1
  store i8 %55, i8* %49, align 1
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8 116, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8 59, i8* %57, align 1
  br label %75

; <label>:59:                                     ; preds = %.lr.ph
  %60 = getelementptr inbounds i8, i8* %.035, i32 1
  store i8 38, i8* %.035, align 1
  %61 = getelementptr inbounds i8, i8* %60, i32 1
  store i8 113, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %61, i32 1
  store i8 117, i8* %61, align 1
  %63 = getelementptr inbounds i8, i8* %62, i32 1
  store i8 111, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  store i8 116, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %64, i32 1
  store i8 59, i8* %64, align 1
  br label %75

; <label>:66:                                     ; preds = %.lr.ph
  %67 = getelementptr inbounds i8, i8* %.035, i32 1
  store i8 38, i8* %.035, align 1
  %68 = getelementptr inbounds i8, i8* %67, i32 1
  store i8 35, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %68, i32 1
  store i8 51, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %69, i32 1
  store i8 50, i8* %69, align 1
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8 59, i8* %70, align 1
  br label %75

; <label>:72:                                     ; preds = %.lr.ph
  %73 = load i8, i8* %.16, align 1
  %74 = getelementptr inbounds i8, i8* %.035, i32 1
  store i8 %73, i8* %.035, align 1
  br label %75

; <label>:75:                                     ; preds = %42, %48, %59, %66, %72
  %.14 = phi i8* [ %74, %72 ], [ %71, %66 ], [ %65, %59 ], [ %58, %48 ], [ %47, %42 ]
  %76 = getelementptr inbounds i8, i8* %.16, i32 1
  %77 = load i8, i8* %76, align 1
  %78 = icmp ne i8 %77, 0
  br i1 %78, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %75
  %.03.lcssa.ph = phi i8* [ %.14, %75 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge12
  %.03.lcssa = phi i8* [ %37, %._crit_edge12 ], [ %.03.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.03.lcssa, align 1
  ret i8* %37
}

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #1

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @_IO_putc(i32, %struct._IO_FILE*) #3

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @find_fragment(i8*, i32, i8**, i8**) #0 {
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = icmp ult i8* %0, %6
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %14
  %.015 = phi i8* [ %15, %14 ], [ %0, %.lr.ph.preheader ]
  %.024 = phi i8 [ %.1, %14 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 19)
  %8 = load i8, i8* %.015, align 1
  %9 = sext i8 %8 to i32
  switch i32 %9, label %13 [
    i32 38, label %14
    i32 35, label %10
  ]

; <label>:10:                                     ; preds = %.lr.ph
  %11 = trunc i8 %.024 to i1
  br i1 %11, label %13, label %12

; <label>:12:                                     ; preds = %10
  %.01.lcssa3 = phi i8* [ %.015, %10 ]
  store i8* %.01.lcssa3, i8** %2, align 8
  store i8* %6, i8** %3, align 8
  br label %._crit_edge

; <label>:13:                                     ; preds = %10, %.lr.ph
  br label %14

; <label>:14:                                     ; preds = %13, %.lr.ph
  %.1 = phi i8 [ 0, %13 ], [ 1, %.lr.ph ]
  %15 = getelementptr inbounds i8, i8* %.015, i32 1
  %16 = icmp ult i8* %15, %6
  br i1 %16, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  %.0.ph = phi i1 [ false, %14 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4, %12
  %.0 = phi i1 [ true, %12 ], [ false, %4 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strpbrk(i8*, i8*) #1

; Function Attrs: nounwind
declare dso_local noalias i8* @strdup(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @rename(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32* @downloaded_mode_to_ptr(i32) #7 {
  switch i32 %0, label %5 [
    i32 0, label %6
    i32 1, label %2
    i32 2, label %3
    i32 3, label %4
  ]

; <label>:2:                                      ; preds = %1
  br label %6

; <label>:3:                                      ; preds = %1
  br label %6

; <label>:4:                                      ; preds = %1
  br label %6

; <label>:5:                                      ; preds = %1
  br label %6

; <label>:6:                                      ; preds = %1, %5, %4, %3, %2
  %.0 = phi i32* [ null, %5 ], [ @downloaded_mode_to_ptr.v4, %4 ], [ @downloaded_mode_to_ptr.v3, %3 ], [ @downloaded_mode_to_ptr.v2, %2 ], [ @downloaded_mode_to_ptr.v1, %1 ]
  ret i32* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @register_download(i8*, i8*) #0 {
  %3 = alloca i8*, align 8, !track !140
  %4 = alloca i8*, align 8, !track !141
  %5 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %6 = icmp ne %struct.hash_table* %5, null
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %2
  %8 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %8, %struct.hash_table** @dl_file_url_map, align 8
  br label %9

; <label>:9:                                      ; preds = %7, %2
  %10 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %11 = icmp ne %struct.hash_table* %10, null
  br i1 %11, label %14, label %12

; <label>:12:                                     ; preds = %9
  %13 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %13, %struct.hash_table** @dl_url_file_map, align 8
  br label %14

; <label>:14:                                     ; preds = %9, %12
  %15 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %16 = bitcast i8** %3 to i8*
  %17 = bitcast i8** %4 to i8*
  %18 = call i32 @hash_table_get_pair(%struct.hash_table* %15, i8* %1, i8* %16, i8* %17)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %36

; <label>:20:                                     ; preds = %14
  %21 = load i8*, i8** %4, align 8
  %22 = call i32 @strcmp(i8* %0, i8* %21) #14
  %23 = icmp eq i32 0, %22
  br i1 %23, label %55, label %24

; <label>:24:                                     ; preds = %20
  %25 = load i8*, i8** %4, align 8
  %26 = call zeroext i1 @match_except_index(i8* %0, i8* %25)
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %24
  %28 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %29 = call i32 @hash_table_contains(%struct.hash_table* %28, i8* %0)
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %40

; <label>:31:                                     ; preds = %27, %24
  %32 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %33 = call i32 @hash_table_remove(%struct.hash_table* %32, i8* %1)
  %34 = load i8*, i8** %3, align 8
  call void @free(i8* %34) #8
  store i8* null, i8** %3, align 8
  %35 = load i8*, i8** %4, align 8
  call void @free(i8* %35) #8
  store i8* null, i8** %4, align 8
  call void @dissociate_urls_from_file(i8* %1)
  br label %36

; <label>:36:                                     ; preds = %31, %14
  %37 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %38 = call noalias i8* @xstrdup(i8* %1)
  %39 = call noalias i8* @xstrdup(i8* %0)
  call void @hash_table_put(%struct.hash_table* %37, i8* %38, i8* %39)
  br label %40

; <label>:40:                                     ; preds = %27, %36
  %41 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %42 = bitcast i8** %4 to i8*
  %43 = bitcast i8** %3 to i8*
  %44 = call i32 @hash_table_get_pair(%struct.hash_table* %41, i8* %0, i8* %42, i8* %43)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %51

; <label>:46:                                     ; preds = %40
  %47 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %48 = call i32 @hash_table_remove(%struct.hash_table* %47, i8* %0)
  %49 = load i8*, i8** %4, align 8
  call void @free(i8* %49) #8
  store i8* null, i8** %4, align 8
  %50 = load i8*, i8** %3, align 8
  call void @free(i8* %50) #8
  store i8* null, i8** %3, align 8
  br label %51

; <label>:51:                                     ; preds = %46, %40
  %52 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %53 = call noalias i8* @xstrdup(i8* %0)
  %54 = call noalias i8* @xstrdup(i8* %1)
  call void @hash_table_put(%struct.hash_table* %52, i8* %53, i8* %54)
  br label %55

; <label>:55:                                     ; preds = %20, %51
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @match_except_index(i8*, i8*) #0 {
  call void @unroll_loop(i32 20)
  %3 = load i8, i8* %0, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %2
  br label %6

; <label>:6:                                      ; preds = %.lr.ph, %16
  %.014 = phi i8* [ %0, %.lr.ph ], [ %17, %16 ]
  %.023 = phi i8* [ %1, %.lr.ph ], [ %18, %16 ]
  %.032 = phi i32 [ 0, %.lr.ph ], [ %19, %16 ]
  %7 = load i8, i8* %.023, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %..critedge_crit_edge7

; <label>:10:                                     ; preds = %6
  %11 = load i8, i8* %.014, align 1
  %12 = sext i8 %11 to i32
  %13 = load i8, i8* %.023, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %12, %14
  br i1 %15, label %16, label %..critedge_crit_edge11

; <label>:16:                                     ; preds = %10
  %17 = getelementptr inbounds i8, i8* %.014, i32 1
  %18 = getelementptr inbounds i8, i8* %.023, i32 1
  %19 = add nuw nsw i32 %.032, 1
  call void @unroll_loop(i32 20)
  %20 = load i8, i8* %17, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %6, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %16
  %split = phi i32 [ %19, %16 ]
  %split5 = phi i8* [ %18, %16 ]
  %split6 = phi i8* [ %17, %16 ]
  br label %.critedge

..critedge_crit_edge7:                            ; preds = %6
  %split8 = phi i32 [ %.032, %6 ]
  %split9 = phi i8* [ %.023, %6 ]
  %split10 = phi i8* [ %.014, %6 ]
  br label %.critedge

..critedge_crit_edge11:                           ; preds = %10
  %split12 = phi i32 [ %.032, %10 ]
  %split13 = phi i8* [ %.023, %10 ]
  %split14 = phi i8* [ %.014, %10 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge11, %..critedge_crit_edge7, %..critedge_crit_edge, %2
  %.03.lcssa = phi i32 [ %split12, %..critedge_crit_edge11 ], [ %split8, %..critedge_crit_edge7 ], [ %split, %..critedge_crit_edge ], [ 0, %2 ]
  %.02.lcssa = phi i8* [ %split13, %..critedge_crit_edge11 ], [ %split9, %..critedge_crit_edge7 ], [ %split5, %..critedge_crit_edge ], [ %1, %2 ]
  %.01.lcssa = phi i8* [ %split14, %..critedge_crit_edge11 ], [ %split10, %..critedge_crit_edge7 ], [ %split6, %..critedge_crit_edge ], [ %0, %2 ]
  %23 = icmp eq i32 %.03.lcssa, 0
  br i1 %23, label %57, label %24

; <label>:24:                                     ; preds = %.critedge
  %25 = load i8, i8* %.01.lcssa, align 1
  %26 = icmp ne i8 %25, 0
  br i1 %26, label %30, label %27

; <label>:27:                                     ; preds = %24
  %28 = load i8, i8* %.02.lcssa, align 1
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %57

; <label>:30:                                     ; preds = %27, %24
  %31 = load i8, i8* %.01.lcssa, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %38

; <label>:34:                                     ; preds = %30
  %35 = load i8, i8* %.02.lcssa, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %57, label %38

; <label>:38:                                     ; preds = %34, %30
  %39 = load i8, i8* %.01.lcssa, align 1
  %40 = icmp ne i8 %39, 0
  %.01.lcssa..02.lcssa = select i1 %40, i8* %.01.lcssa, i8* %.02.lcssa
  %41 = load i8, i8* %.01.lcssa..02.lcssa, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp ne i32 %42, 47
  %44 = getelementptr inbounds i8, i8* %.01.lcssa..02.lcssa, i32 -1
  %.1 = select i1 %43, i8* %44, i8* %.01.lcssa..02.lcssa
  %45 = load i8, i8* %.1, align 1
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %46, 47
  br i1 %47, label %48, label %53

; <label>:48:                                     ; preds = %38
  %49 = getelementptr inbounds i8, i8* %.1, i64 1
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %57, label %53

; <label>:53:                                     ; preds = %48, %38
  %54 = getelementptr [12 x i8], [12 x i8]* @.str.25, i32 0, i32 0
  %55 = call i32 @strcmp(i8* %.1, i8* %54) #14
  %56 = icmp eq i32 0, %55
  br label %57

; <label>:57:                                     ; preds = %48, %34, %27, %.critedge, %53
  %.0 = phi i1 [ %56, %53 ], [ false, %.critedge ], [ true, %27 ], [ false, %34 ], [ true, %48 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @dissociate_urls_from_file(i8*) #0 {
  %2 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  call void @hash_table_for_each(%struct.hash_table* %2, i32 (i8*, i8*, i8*)* @dissociate_urls_from_file_mapper, i8* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dissociate_urls_from_file_mapper(i8*, i8*, i8*) #0 {
  %4 = call i32 @strcmp(i8* %1, i8* %2) #14
  %5 = icmp eq i32 0, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %3
  %7 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %8 = call i32 @hash_table_remove(%struct.hash_table* %7, i8* %0)
  call void @free(i8* %0) #8
  call void @free(i8* %1) #8
  br label %9

; <label>:9:                                      ; preds = %6, %3
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @register_redirection(i8*, i8*) #0 {
  %3 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %4 = icmp ne %struct.hash_table* %3, null
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %2
  %6 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %6, %struct.hash_table** @dl_file_url_map, align 8
  br label %7

; <label>:7:                                      ; preds = %5, %2
  %8 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %9 = icmp ne %struct.hash_table* %8, null
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %11, %struct.hash_table** @dl_url_file_map, align 8
  br label %12

; <label>:12:                                     ; preds = %7, %10
  %13 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %14 = call i8* @hash_table_get(%struct.hash_table* %13, i8* %1)
  %15 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %16 = call i32 @hash_table_contains(%struct.hash_table* %15, i8* %0)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %12
  %19 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %20 = call noalias i8* @xstrdup(i8* %0)
  %21 = call noalias i8* @xstrdup(i8* %14)
  call void @hash_table_put(%struct.hash_table* %19, i8* %20, i8* %21)
  br label %22

; <label>:22:                                     ; preds = %18, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @register_delete_file(i8*) #0 {
  %2 = alloca i8*, align 8, !track !142
  %3 = alloca i8*, align 8, !track !143
  %4 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %5 = icmp ne %struct.hash_table* %4, null
  br i1 %5, label %8, label %6

; <label>:6:                                      ; preds = %1
  %7 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %7, %struct.hash_table** @dl_file_url_map, align 8
  br label %8

; <label>:8:                                      ; preds = %6, %1
  %9 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %10 = icmp ne %struct.hash_table* %9, null
  br i1 %10, label %13, label %11

; <label>:11:                                     ; preds = %8
  %12 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %12, %struct.hash_table** @dl_url_file_map, align 8
  br label %13

; <label>:13:                                     ; preds = %8, %11
  %14 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %15 = bitcast i8** %3 to i8*
  %16 = bitcast i8** %2 to i8*
  %17 = call i32 @hash_table_get_pair(%struct.hash_table* %14, i8* %0, i8* %15, i8* %16)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %13
  %20 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %21 = call i32 @hash_table_remove(%struct.hash_table* %20, i8* %0)
  %22 = load i8*, i8** %3, align 8
  call void @free(i8* %22) #8
  store i8* null, i8** %3, align 8
  %23 = load i8*, i8** %2, align 8
  call void @free(i8* %23) #8
  store i8* null, i8** %2, align 8
  call void @dissociate_urls_from_file(i8* %0)
  br label %24

; <label>:24:                                     ; preds = %13, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @register_html(i8*) #0 {
  %2 = load %struct.hash_table*, %struct.hash_table** @downloaded_html_set, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %5, %struct.hash_table** @downloaded_html_set, align 8
  br label %6

; <label>:6:                                      ; preds = %4, %1
  %7 = load %struct.hash_table*, %struct.hash_table** @downloaded_html_set, align 8
  call void @string_set_add(%struct.hash_table* %7, i8* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @register_css(i8*) #0 {
  %2 = load %struct.hash_table*, %struct.hash_table** @downloaded_css_set, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %5, %struct.hash_table** @downloaded_css_set, align 8
  br label %6

; <label>:6:                                      ; preds = %4, %1
  %7 = load %struct.hash_table*, %struct.hash_table** @downloaded_css_set, align 8
  call void @string_set_add(%struct.hash_table* %7, i8* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @convert_cleanup() #0 {
  %1 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  %2 = icmp ne %struct.hash_table* %1, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %0
  %4 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  call void @free_keys_and_values(%struct.hash_table* %4)
  %5 = load %struct.hash_table*, %struct.hash_table** @dl_file_url_map, align 8
  call void @hash_table_destroy(%struct.hash_table* %5)
  store %struct.hash_table* null, %struct.hash_table** @dl_file_url_map, align 8
  br label %6

; <label>:6:                                      ; preds = %3, %0
  %7 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %8 = icmp ne %struct.hash_table* %7, null
  br i1 %8, label %9, label %12

; <label>:9:                                      ; preds = %6
  %10 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  call void @free_keys_and_values(%struct.hash_table* %10)
  %11 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  call void @hash_table_destroy(%struct.hash_table* %11)
  store %struct.hash_table* null, %struct.hash_table** @dl_url_file_map, align 8
  br label %12

; <label>:12:                                     ; preds = %9, %6
  %13 = load %struct.hash_table*, %struct.hash_table** @downloaded_html_set, align 8
  %14 = icmp ne %struct.hash_table* %13, null
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %12
  %16 = load %struct.hash_table*, %struct.hash_table** @downloaded_html_set, align 8
  call void @string_set_free(%struct.hash_table* %16)
  br label %17

; <label>:17:                                     ; preds = %15, %12
  call void @downloaded_files_free()
  %18 = load %struct.hash_table*, %struct.hash_table** @converted_files, align 8
  %19 = icmp ne %struct.hash_table* %18, null
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %17
  %21 = load %struct.hash_table*, %struct.hash_table** @converted_files, align 8
  call void @string_set_free(%struct.hash_table* %21)
  br label %22

; <label>:22:                                     ; preds = %20, %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @downloaded_files_free() #0 {
  %1 = alloca %struct.hash_table_iterator, align 8, !track !144
  %2 = load %struct.hash_table*, %struct.hash_table** @downloaded_files_hash, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %4, label %14

; <label>:4:                                      ; preds = %0
  %5 = load %struct.hash_table*, %struct.hash_table** @downloaded_files_hash, align 8
  call void @hash_table_iterate(%struct.hash_table* %5, %struct.hash_table_iterator* %1)
  %6 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 21)
  %8 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  call void @free(i8* %9) #8
  %10 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 0
  store i8* null, i8** %10, align 8
  %11 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %13 = load %struct.hash_table*, %struct.hash_table** @downloaded_files_hash, align 8
  call void @hash_table_destroy(%struct.hash_table* %13)
  store %struct.hash_table* null, %struct.hash_table** @downloaded_files_hash, align 8
  br label %14

; <label>:14:                                     ; preds = %._crit_edge, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cookie_jar* @cookie_jar_new() #7 {
  %1 = call noalias i8* @xmalloc(i64 16)
  %2 = bitcast i8* %1 to %struct.cookie_jar*
  %3 = call %struct.hash_table* @make_nocase_string_hash_table(i32 0)
  %4 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %2, i32 0, i32 0
  store %struct.hash_table* %3, %struct.hash_table** %4, align 8
  %5 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %2, i32 0, i32 1
  store i32 0, i32* %5, align 8
  ret %struct.cookie_jar* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cookie_handle_set_cookie(%struct.cookie_jar*, i8*, i32, i8*, i8*) #0 {
  %6 = call i64 @time(i64* null) #8
  store i64 %6, i64* @cookies_now, align 8
  %7 = call i64 @strlen(i8* %3) #14
  %8 = add i64 1, %7
  %9 = add i64 %8, 1
  %10 = alloca i8, i64 %9, align 16, !track !145
  store i8 47, i8* %10, align 1
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  %12 = call i8* @strcpy(i8* %11, i8* %3) #8, !track !146
  %13 = call %struct.cookie* @parse_set_cookie(i8* %4, i1 zeroext false)
  %magicptr = ptrtoint %struct.cookie* %13 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %81, label %14

; <label>:14:                                     ; preds = %5
  %15 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %27, label %18

; <label>:18:                                     ; preds = %14
  %19 = call noalias i8* @xstrdup(i8* %1)
  %20 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 0
  store i8* %19, i8** %20, align 8
  %21 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 3
  %22 = load i8, i8* %21, align 8
  %23 = and i8 %22, -5
  %24 = or i8 %23, 4
  store i8 %24, i8* %21, align 8
  switch i32 %2, label %25 [
    i32 80, label %44
    i32 443, label %44
  ]

; <label>:25:                                     ; preds = %18
  %26 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 1
  store i32 %2, i32* %26, align 8
  br label %44

; <label>:27:                                     ; preds = %14
  %28 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = call zeroext i1 @check_domain_match(i8* %29, i8* %1)
  br i1 %30, label %44, label %31

; <label>:31:                                     ; preds = %27
  %32 = getelementptr [50 x i8], [50 x i8]* @.str.31, i32 0, i32 0
  %33 = call i8* @gettext(i8* %32) #8
  %34 = call i8* @quotearg_style(i32 7, i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %33, i8* %34)
  %35 = getelementptr [4 x i8], [4 x i8]* @.str.1.32, i32 0, i32 0
  %36 = call i8* @gettext(i8* %35) #8
  %37 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i8* @quotearg_style(i32 7, i8* %38)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %36, i8* %39)
  %40 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 3
  %41 = load i8, i8* %40, align 8
  %42 = and i8 %41, -2
  %43 = or i8 %42, 1
  store i8 %43, i8* %40, align 8
  br label %44

; <label>:44:                                     ; preds = %27, %31, %25, %18, %18
  %45 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 2
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ne i8* %46, null
  br i1 %47, label %58, label %48

; <label>:48:                                     ; preds = %44
  %49 = call i8* @strrchr(i8* %10, i32 47) #14, !track !147
  %50 = icmp ne i8* %49, null
  br i1 %50, label %51, label %55

; <label>:51:                                     ; preds = %48
  %52 = getelementptr inbounds i8, i8* %49, i64 1
  %53 = call i8* @strdupdelim(i8* %10, i8* %52)
  %54 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 2
  store i8* %53, i8** %54, align 8
  br label %70

; <label>:55:                                     ; preds = %48
  %56 = call noalias i8* @xstrdup(i8* %10)
  %57 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 2
  store i8* %56, i8** %57, align 8
  br label %70

; <label>:58:                                     ; preds = %44
  %59 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 2
  %60 = load i8*, i8** %59, align 8
  %61 = call zeroext i1 @check_path_match(i8* %60, i8* %10)
  br i1 %61, label %70, label %62

; <label>:62:                                     ; preds = %58
  %63 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %64 = load i8, i8* %63, align 1
  %65 = trunc i8 %64 to i1
  br i1 %65, label %66, label %78

; <label>:66:                                     ; preds = %62
  %67 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 2
  %68 = load i8*, i8** %67, align 8
  %69 = getelementptr [34 x i8], [34 x i8]* @.str.2.33, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %69, i8* %68, i8* %10)
  br label %78

; <label>:70:                                     ; preds = %58, %51, %55
  %71 = getelementptr inbounds %struct.cookie, %struct.cookie* %13, i32 0, i32 3
  %72 = load i8, i8* %71, align 8
  %73 = and i8 %72, 1
  %74 = zext i8 %73 to i32
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %77

; <label>:76:                                     ; preds = %70
  call void @discard_matching_cookie(%struct.cookie_jar* %0, %struct.cookie* %13)
  br label %78

; <label>:77:                                     ; preds = %70
  call void @store_cookie(%struct.cookie_jar* %0, %struct.cookie* %13)
  br label %81

; <label>:78:                                     ; preds = %66, %62, %76
  %79 = icmp ne %struct.cookie* %13, null
  br i1 %79, label %80, label %81

; <label>:80:                                     ; preds = %78
  call void @delete_cookie(%struct.cookie* %13)
  br label %81

; <label>:81:                                     ; preds = %5, %77, %80, %78
  ret void
}

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.cookie* @parse_set_cookie(i8*, i1 zeroext) #7 {
  %3 = alloca i8*, align 8, !track !148
  %4 = alloca %struct.param_token, align 8, !track !149
  %5 = alloca %struct.param_token, align 8, !track !150
  %6 = alloca double, align 8, !track !151
  %7 = zext i1 %1 to i8
  store i8* %0, i8** %3, align 8
  %8 = call %struct.cookie* @cookie_new()
  %9 = call zeroext i1 @extract_param(i8** %3, %struct.param_token* %4, %struct.param_token* %5, i8 signext 59, i8* null)
  br i1 %9, label %10, label %272

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %272

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 -1
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp eq i32 %19, 34
  br i1 %20, label %21, label %25

; <label>:21:                                     ; preds = %14
  %22 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds i8, i8* %23, i32 -1
  store i8* %24, i8** %22, align 8
  br label %25

; <label>:25:                                     ; preds = %21, %14
  %26 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = icmp eq i32 %29, 34
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %25
  %32 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %34, i8** %32, align 8
  br label %35

; <label>:35:                                     ; preds = %31, %25
  %36 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i8* @strdupdelim(i8* %37, i8* %39)
  %41 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 5
  store i8* %40, i8** %41, align 8
  %42 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i8* @strdupdelim(i8* %43, i8* %45)
  %47 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 6
  store i8* %46, i8** %47, align 8
  %48 = call zeroext i1 @extract_param(i8** %3, %struct.param_token* %4, %struct.param_token* %5, i8 signext 59, i8* null)
  br i1 %48, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %35
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %267
  call void @unroll_loop(i32 22)
  %49 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = ptrtoint i8* %50 to i64
  %54 = ptrtoint i8* %52 to i64
  %55 = sub i64 %53, %54
  %56 = icmp eq i64 %55, 6
  br i1 %56, label %57, label %93

; <label>:57:                                     ; preds = %.lr.ph
  %58 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr [7 x i8], [7 x i8]* @.str.18.38, i32 0, i32 0
  %61 = call i32 @c_strncasecmp(i8* %59, i8* %60, i64 6) #14
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %93, label %63

; <label>:63:                                     ; preds = %57
  %64 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = icmp ne i8* %65, null
  br i1 %66, label %67, label %.loopexit

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %71 = load i8*, i8** %70, align 8
  %72 = icmp ne i8* %69, %71
  br i1 %72, label %73, label %.loopexit

; <label>:73:                                     ; preds = %67
  %74 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  call void @free(i8* %75) #8
  %76 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 0
  store i8* null, i8** %76, align 8
  %77 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = icmp eq i32 %80, 46
  br i1 %81, label %82, label %86

; <label>:82:                                     ; preds = %73
  %83 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %85, i8** %83, align 8
  br label %86

; <label>:86:                                     ; preds = %82, %73
  %87 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %90 = load i8*, i8** %89, align 8
  %91 = call i8* @strdupdelim(i8* %88, i8* %90)
  %92 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 0
  store i8* %91, i8** %92, align 8
  br label %267

; <label>:93:                                     ; preds = %57, %.lr.ph
  %94 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = ptrtoint i8* %95 to i64
  %99 = ptrtoint i8* %97 to i64
  %100 = sub i64 %98, %99
  %101 = icmp eq i64 %100, 4
  br i1 %101, label %102, label %128

; <label>:102:                                    ; preds = %93
  %103 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr [5 x i8], [5 x i8]* @.str.19.39, i32 0, i32 0
  %106 = call i32 @c_strncasecmp(i8* %104, i8* %105, i64 4) #14
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %128, label %108

; <label>:108:                                    ; preds = %102
  %109 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = icmp ne i8* %110, null
  br i1 %111, label %112, label %.loopexit

; <label>:112:                                    ; preds = %108
  %113 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %116 = load i8*, i8** %115, align 8
  %117 = icmp ne i8* %114, %116
  br i1 %117, label %118, label %.loopexit

; <label>:118:                                    ; preds = %112
  %119 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 2
  %120 = load i8*, i8** %119, align 8
  call void @free(i8* %120) #8
  %121 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 2
  store i8* null, i8** %121, align 8
  %122 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %125 = load i8*, i8** %124, align 8
  %126 = call i8* @strdupdelim(i8* %123, i8* %125)
  %127 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 2
  store i8* %126, i8** %127, align 8
  br label %267

; <label>:128:                                    ; preds = %102, %93
  %129 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %130 = load i8*, i8** %129, align 8
  %131 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = ptrtoint i8* %130 to i64
  %134 = ptrtoint i8* %132 to i64
  %135 = sub i64 %133, %134
  %136 = icmp eq i64 %135, 7
  br i1 %136, label %137, label %185

; <label>:137:                                    ; preds = %128
  %138 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr [8 x i8], [8 x i8]* @.str.20.40, i32 0, i32 0
  %141 = call i32 @c_strncasecmp(i8* %139, i8* %140, i64 7) #14
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %185, label %143

; <label>:143:                                    ; preds = %137
  %144 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %145 = load i8*, i8** %144, align 8
  %146 = icmp ne i8* %145, null
  br i1 %146, label %147, label %.loopexit

; <label>:147:                                    ; preds = %143
  %148 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %151 = load i8*, i8** %150, align 8
  %152 = icmp ne i8* %149, %151
  br i1 %152, label %153, label %.loopexit

; <label>:153:                                    ; preds = %147
  %154 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %157 = load i8*, i8** %156, align 8
  %158 = ptrtoint i8* %157 to i64
  %159 = ptrtoint i8* %155 to i64
  %160 = sub i64 %158, %159
  %161 = trunc i64 %160 to i32
  %162 = add nsw i32 %161, 1
  %163 = sext i32 %162 to i64
  %164 = alloca i8, i64 %163, align 16, !track !152
  %165 = sext i32 %161 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %155, i64 %165, i1 false), !track !153
  %166 = sext i32 %161 to i64
  %167 = getelementptr inbounds i8, i8* %164, i64 %166
  store i8 0, i8* %167, align 1
  %168 = call i64 @http_atotm(i8* %164)
  %169 = icmp ne i64 %168, -1
  br i1 %169, label %170, label %267

; <label>:170:                                    ; preds = %153
  %171 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 3
  %172 = load i8, i8* %171, align 8
  %173 = and i8 %172, -9
  %174 = or i8 %173, 8
  store i8 %174, i8* %171, align 8
  %175 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 4
  store i64 %168, i64* %175, align 8
  %176 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 4
  %177 = load i64, i64* %176, align 8
  %178 = load i64, i64* @cookies_now, align 8
  %179 = icmp slt i64 %177, %178
  br i1 %179, label %180, label %267

; <label>:180:                                    ; preds = %170
  %181 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 3
  %182 = load i8, i8* %181, align 8
  %183 = and i8 %182, -2
  %184 = or i8 %183, 1
  store i8 %184, i8* %181, align 8
  br label %267

; <label>:185:                                    ; preds = %137, %128
  %186 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %189 = load i8*, i8** %188, align 8
  %190 = ptrtoint i8* %187 to i64
  %191 = ptrtoint i8* %189 to i64
  %192 = sub i64 %190, %191
  %193 = icmp eq i64 %192, 7
  br i1 %193, label %194, label %247

; <label>:194:                                    ; preds = %185
  %195 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %196 = load i8*, i8** %195, align 8
  %197 = getelementptr [8 x i8], [8 x i8]* @.str.21.41, i32 0, i32 0
  %198 = call i32 @c_strncasecmp(i8* %196, i8* %197, i64 7) #14
  %199 = icmp ne i32 %198, 0
  br i1 %199, label %247, label %200

; <label>:200:                                    ; preds = %194
  store double -1.000000e+00, double* %6, align 8
  %201 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %202 = load i8*, i8** %201, align 8
  %203 = icmp ne i8* %202, null
  br i1 %203, label %204, label %.loopexit

; <label>:204:                                    ; preds = %200
  %205 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %206 = load i8*, i8** %205, align 8
  %207 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %208 = load i8*, i8** %207, align 8
  %209 = icmp ne i8* %206, %208
  br i1 %209, label %210, label %.loopexit

; <label>:210:                                    ; preds = %204
  %211 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %212 = load i8*, i8** %211, align 8
  %213 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %214 = load i8*, i8** %213, align 8
  %215 = ptrtoint i8* %214 to i64
  %216 = ptrtoint i8* %212 to i64
  %217 = sub i64 %215, %216
  %218 = trunc i64 %217 to i32
  %219 = add nsw i32 %218, 1
  %220 = sext i32 %219 to i64
  %221 = alloca i8, i64 %220, align 16, !track !154
  %222 = sext i32 %218 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %221, i8* align 1 %212, i64 %222, i1 false), !track !155
  %223 = sext i32 %218 to i64
  %224 = getelementptr inbounds i8, i8* %221, i64 %223
  store i8 0, i8* %224, align 1
  %225 = getelementptr [4 x i8], [4 x i8]* @.str.6.42, i32 0, i32 0
  %226 = call i32 (i8*, i8*, ...) @sscanf(i8* %221, i8* %225, double* %6) #8
  %227 = load double, double* %6, align 8
  %228 = fcmp oeq double %227, -1.000000e+00
  br i1 %228, label %.loopexit, label %229

; <label>:229:                                    ; preds = %210
  %230 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 3
  %231 = load i8, i8* %230, align 8
  %232 = and i8 %231, -9
  %233 = or i8 %232, 8
  store i8 %233, i8* %230, align 8
  %234 = load i64, i64* @cookies_now, align 8
  %235 = sitofp i64 %234 to double
  %236 = load double, double* %6, align 8
  %237 = fadd double %235, %236
  %238 = fptosi double %237 to i64
  %239 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 4
  store i64 %238, i64* %239, align 8
  %240 = load double, double* %6, align 8
  %241 = fcmp oeq double %240, 0.000000e+00
  br i1 %241, label %242, label %267

; <label>:242:                                    ; preds = %229
  %243 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 3
  %244 = load i8, i8* %243, align 8
  %245 = and i8 %244, -2
  %246 = or i8 %245, 1
  store i8 %246, i8* %243, align 8
  br label %267

; <label>:247:                                    ; preds = %194, %185
  %248 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %249 = load i8*, i8** %248, align 8
  %250 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %251 = load i8*, i8** %250, align 8
  %252 = ptrtoint i8* %249 to i64
  %253 = ptrtoint i8* %251 to i64
  %254 = sub i64 %252, %253
  %255 = icmp eq i64 %254, 6
  br i1 %255, label %256, label %267

; <label>:256:                                    ; preds = %247
  %257 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %258 = load i8*, i8** %257, align 8
  %259 = getelementptr [7 x i8], [7 x i8]* @.str.22.34, i32 0, i32 0
  %260 = call i32 @c_strncasecmp(i8* %258, i8* %259, i64 6) #14
  %261 = icmp ne i32 %260, 0
  br i1 %261, label %267, label %262

; <label>:262:                                    ; preds = %256
  %263 = getelementptr inbounds %struct.cookie, %struct.cookie* %8, i32 0, i32 3
  %264 = load i8, i8* %263, align 8
  %265 = and i8 %264, -3
  %266 = or i8 %265, 2
  store i8 %266, i8* %263, align 8
  br label %267

; <label>:267:                                    ; preds = %118, %242, %229, %262, %256, %247, %153, %180, %170, %86
  %268 = call zeroext i1 @extract_param(i8** %3, %struct.param_token* %4, %struct.param_token* %5, i8 signext 59, i8* null)
  br i1 %268, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %267
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %35
  %269 = load i8*, i8** %3, align 8
  %270 = load i8, i8* %269, align 1
  %271 = icmp ne i8 %270, 0
  br i1 %271, label %272, label %284

.loopexit:                                        ; preds = %67, %63, %112, %108, %147, %143, %204, %200, %210
  br label %272

; <label>:272:                                    ; preds = %.loopexit, %._crit_edge, %10, %2
  %273 = trunc i8 %7 to i1
  br i1 %273, label %283, label %274

; <label>:274:                                    ; preds = %272
  %275 = getelementptr [48 x i8], [48 x i8]* @.str.23.43, i32 0, i32 0
  %276 = call i8* @gettext(i8* %275) #8
  %277 = call i8* @quotearg_style(i32 7, i8* %0)
  %278 = load i8*, i8** %3, align 8
  %279 = ptrtoint i8* %278 to i64
  %280 = ptrtoint i8* %0 to i64
  %281 = sub i64 %279, %280
  %282 = trunc i64 %281 to i32
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %276, i8* %277, i32 %282)
  br label %283

; <label>:283:                                    ; preds = %274, %272
  call void @delete_cookie(%struct.cookie* %8)
  br label %284

; <label>:284:                                    ; preds = %._crit_edge, %283
  %.0 = phi %struct.cookie* [ null, %283 ], [ %8, %._crit_edge ]
  ret %struct.cookie* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @check_domain_match(i8*, i8*) #0 {
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %4 = load i8, i8* %3, align 1
  %5 = trunc i8 %4 to i1
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %2
  %7 = getelementptr [7 x i8], [7 x i8]* @.str.24.35, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %7)
  br label %8

; <label>:8:                                      ; preds = %2, %6
  %9 = call i32 @strcasecmp(i8* %0, i8* %1) #14
  %10 = icmp eq i32 0, %9
  br i1 %10, label %102, label %11

; <label>:11:                                     ; preds = %8
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %11
  %16 = getelementptr [3 x i8], [3 x i8]* @.str.25.36, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %16)
  br label %17

; <label>:17:                                     ; preds = %11, %15
  %18 = call zeroext i1 @match_tail(i8* %1, i8* %0, i1 zeroext true)
  br i1 %18, label %19, label %102

; <label>:19:                                     ; preds = %17
  %20 = load i8, i8* %0, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp eq i32 %21, 46
  %23 = getelementptr inbounds i8, i8* %0, i32 1
  %spec.select = select i1 %22, i8* %23, i8* %0
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %25 = load i8, i8* %24, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %19
  %28 = getelementptr [3 x i8], [3 x i8]* @.str.26, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %28)
  br label %29

; <label>:29:                                     ; preds = %19, %27
  br label %30

; <label>:30:                                     ; preds = %29, %43
  %.119 = phi i8* [ %spec.select, %29 ], [ %44, %43 ]
  %.0418 = phi i32 [ 1, %29 ], [ %.15, %43 ]
  %.0617 = phi i32 [ 0, %29 ], [ %.17, %43 ]
  %.0816 = phi i32 [ 0, %29 ], [ %.19, %43 ]
  %.01015 = phi i32 [ 0, %29 ], [ %.111, %43 ]
  call void @unroll_loop(i32 23)
  %31 = load i8, i8* %.119, align 1
  %32 = sext i8 %31 to i32
  switch i32 %32, label %41 [
    i32 0, label %43
    i32 46, label %33
  ]

; <label>:33:                                     ; preds = %30
  %34 = icmp eq i32 %.0617, 0
  br i1 %34, label %.loopexit5, label %35

; <label>:35:                                     ; preds = %33
  %36 = getelementptr inbounds i8, i8* %.119, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, 0
  %40 = add nsw i32 %.0418, 1
  %spec.select1 = select i1 %39, i32 1, i32 %.01015
  %spec.select2 = select i1 %39, i32 %.0816, i32 %.0617
  %spec.select3 = select i1 %39, i32 %.0617, i32 0
  %spec.select4 = select i1 %39, i32 %.0418, i32 %40
  br label %43

; <label>:41:                                     ; preds = %30
  %42 = add nsw i32 %.0617, 1
  br label %43

; <label>:43:                                     ; preds = %35, %41, %30
  %.111 = phi i32 [ %.01015, %41 ], [ 1, %30 ], [ %spec.select1, %35 ]
  %.19 = phi i32 [ %.0816, %41 ], [ %.0816, %30 ], [ %spec.select2, %35 ]
  %.17 = phi i32 [ %42, %41 ], [ %.0617, %30 ], [ %spec.select3, %35 ]
  %.15 = phi i32 [ %.0418, %41 ], [ %.0418, %30 ], [ %spec.select4, %35 ]
  %44 = getelementptr inbounds i8, i8* %.119, i32 1
  %45 = icmp ne i32 %.111, 0
  %46 = xor i1 %45, true
  br i1 %46, label %30, label %47

; <label>:47:                                     ; preds = %43
  %.08.lcssa = phi i32 [ %.19, %43 ]
  %.04.lcssa = phi i32 [ %.15, %43 ]
  %48 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %49 = load i8, i8* %48, align 1
  %50 = trunc i8 %49 to i1
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %47
  %52 = getelementptr [3 x i8], [3 x i8]* @.str.27, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %52)
  br label %53

; <label>:53:                                     ; preds = %47, %51
  %54 = icmp slt i32 %.04.lcssa, 2
  br i1 %54, label %102, label %55

; <label>:55:                                     ; preds = %53
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %57 = load i8, i8* %56, align 1
  %58 = trunc i8 %57 to i1
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %55
  %60 = getelementptr [3 x i8], [3 x i8]* @.str.28, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %60)
  br label %61

; <label>:61:                                     ; preds = %55, %59
  %62 = icmp eq i32 %.04.lcssa, 2
  br i1 %62, label %.preheader, label %72

.preheader:                                       ; preds = %61
  br label %63

; <label>:63:                                     ; preds = %.preheader, %67
  %.0214 = phi i64 [ %68, %67 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 24)
  %64 = getelementptr inbounds [7 x i8*], [7 x i8*]* @check_domain_match.known_toplevel_domains, i64 0, i64 %.0214
  %65 = load i8*, i8** %64, align 8
  %66 = call zeroext i1 @match_tail(i8* %0, i8* %65, i1 zeroext true)
  br i1 %66, label %.loopexit, label %67

; <label>:67:                                     ; preds = %63
  %68 = add nuw nsw i64 %.0214, 1
  %69 = icmp ult i64 %68, 7
  br i1 %69, label %63, label %.loopexit

.loopexit:                                        ; preds = %67, %63
  %.01 = phi i32 [ 1, %63 ], [ 0, %67 ]
  %70 = icmp eq i32 %.01, 0
  %71 = icmp sle i32 %.08.lcssa, 3
  %or.cond = and i1 %70, %71
  br i1 %or.cond, label %102, label %72

; <label>:72:                                     ; preds = %61, %.loopexit
  %73 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %74 = load i8, i8* %73, align 1
  %75 = trunc i8 %74 to i1
  br i1 %75, label %76, label %78

; <label>:76:                                     ; preds = %72
  %77 = getelementptr [3 x i8], [3 x i8]* @.str.36, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %77)
  br label %78

; <label>:78:                                     ; preds = %72, %76
  %79 = load i8, i8* %0, align 1
  %80 = sext i8 %79 to i32
  %81 = icmp ne i32 %80, 46
  br i1 %81, label %82, label %96

; <label>:82:                                     ; preds = %78
  %83 = call i64 @strlen(i8* %0) #14
  %84 = trunc i64 %83 to i32
  %85 = call i64 @strlen(i8* %1) #14
  %86 = trunc i64 %85 to i32
  %87 = icmp sgt i32 %86, %84
  br i1 %87, label %88, label %96

; <label>:88:                                     ; preds = %82
  %89 = sub nsw i32 %86, %84
  %90 = sub nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %1, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp ne i32 %94, 46
  br i1 %95, label %102, label %96

; <label>:96:                                     ; preds = %78, %88, %82
  %97 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %98 = load i8, i8* %97, align 1
  %99 = trunc i8 %98 to i1
  br i1 %99, label %100, label %102

; <label>:100:                                    ; preds = %96
  %101 = getelementptr [3 x i8], [3 x i8]* @.str.37, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %101)
  br label %102

.loopexit5:                                       ; preds = %33
  %.0.ph = phi i1 [ false, %33 ]
  br label %102

; <label>:102:                                    ; preds = %.loopexit5, %100, %96, %88, %.loopexit, %53, %17, %8
  %.0 = phi i1 [ true, %8 ], [ false, %17 ], [ false, %53 ], [ false, %.loopexit ], [ false, %88 ], [ true, %96 ], [ true, %100 ], [ %.0.ph, %.loopexit5 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @check_path_match(i8*, i8*) #0 {
  %3 = call i32 @path_matches(i8* %1, i8* %0)
  %4 = icmp ne i32 %3, 0
  ret i1 %4
}

; Function Attrs: noinline nounwind uwtable
define internal void @discard_matching_cookie(%struct.cookie_jar*, %struct.cookie*) #0 {
  %3 = alloca %struct.cookie*, align 8, !track !156
  %4 = alloca i8*, align 8, !track !157
  %5 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %6 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %7 = call i32 @hash_table_count(%struct.hash_table* %6)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %55

; <label>:9:                                      ; preds = %2
  %10 = call %struct.cookie* @find_matching_cookie(%struct.cookie_jar* %0, %struct.cookie* %1, %struct.cookie** %3)
  %11 = icmp ne %struct.cookie* %10, null
  br i1 %11, label %12, label %55

; <label>:12:                                     ; preds = %9
  %13 = load %struct.cookie*, %struct.cookie** %3, align 8
  %14 = icmp ne %struct.cookie* %13, null
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %12
  %16 = getelementptr inbounds %struct.cookie, %struct.cookie* %10, i32 0, i32 7
  %17 = load %struct.cookie*, %struct.cookie** %16, align 8
  %18 = load %struct.cookie*, %struct.cookie** %3, align 8
  %19 = getelementptr inbounds %struct.cookie, %struct.cookie* %18, i32 0, i32 7
  store %struct.cookie* %17, %struct.cookie** %19, align 8
  br label %49

; <label>:20:                                     ; preds = %12
  store i8* null, i8** %4, align 8
  %21 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %22 = load %struct.hash_table*, %struct.hash_table** %21, align 8
  %23 = getelementptr inbounds %struct.cookie, %struct.cookie* %10, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8** %4 to i8*
  %26 = call i32 @hash_table_get_pair(%struct.hash_table* %22, i8* %24, i8* %25, i8* null)
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %33

; <label>:28:                                     ; preds = %20
  %29 = getelementptr [29 x i8], [29 x i8]* @.str.38, i32 0, i32 0
  %30 = call i8* @gettext(i8* %29) #8
  %31 = getelementptr inbounds %struct.cookie, %struct.cookie* %10, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %30, i8* %32)
  br label %33

; <label>:33:                                     ; preds = %28, %20
  %34 = getelementptr inbounds %struct.cookie, %struct.cookie* %10, i32 0, i32 7
  %35 = load %struct.cookie*, %struct.cookie** %34, align 8
  %36 = icmp ne %struct.cookie* %35, null
  %37 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %38 = load %struct.hash_table*, %struct.hash_table** %37, align 8
  br i1 %36, label %44, label %39

; <label>:39:                                     ; preds = %33
  %40 = getelementptr inbounds %struct.cookie, %struct.cookie* %10, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @hash_table_remove(%struct.hash_table* %38, i8* %41)
  %43 = load i8*, i8** %4, align 8
  call void @free(i8* %43) #8
  store i8* null, i8** %4, align 8
  br label %49

; <label>:44:                                     ; preds = %33
  %45 = load i8*, i8** %4, align 8
  %46 = getelementptr inbounds %struct.cookie, %struct.cookie* %10, i32 0, i32 7
  %47 = load %struct.cookie*, %struct.cookie** %46, align 8
  %48 = bitcast %struct.cookie* %47 to i8*
  call void @hash_table_put(%struct.hash_table* %38, i8* %45, i8* %48)
  br label %49

; <label>:49:                                     ; preds = %39, %44, %15
  call void @delete_cookie(%struct.cookie* %10)
  %50 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %51 = load i8, i8* %50, align 1
  %52 = trunc i8 %51 to i1
  br i1 %52, label %53, label %55

; <label>:53:                                     ; preds = %49
  %54 = getelementptr [23 x i8], [23 x i8]* @.str.39, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %54)
  br label %55

; <label>:55:                                     ; preds = %53, %49, %2, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @store_cookie(%struct.cookie_jar*, %struct.cookie*) #0 {
  %3 = alloca %struct.cookie*, align 8, !track !158
  %4 = alloca i8*, align 8, !track !159
  %5 = alloca %struct.cookie*, align 8, !track !160
  %6 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %7 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %8 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast i8** %4 to i8*
  %11 = bitcast %struct.cookie** %3 to i8*
  %12 = call i32 @hash_table_get_pair(%struct.hash_table* %7, i8* %9, i8* %10, i8* %11)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %41

; <label>:14:                                     ; preds = %2
  %15 = call %struct.cookie* @find_matching_cookie(%struct.cookie_jar* %0, %struct.cookie* %1, %struct.cookie** %5)
  %16 = icmp ne %struct.cookie* %15, null
  br i1 %16, label %17, label %38

; <label>:17:                                     ; preds = %14
  %18 = load %struct.cookie*, %struct.cookie** %5, align 8
  %19 = icmp ne %struct.cookie* %18, null
  %20 = getelementptr inbounds %struct.cookie, %struct.cookie* %15, i32 0, i32 7
  %21 = load %struct.cookie*, %struct.cookie** %20, align 8
  br i1 %19, label %22, label %27

; <label>:22:                                     ; preds = %17
  %23 = load %struct.cookie*, %struct.cookie** %5, align 8
  %24 = getelementptr inbounds %struct.cookie, %struct.cookie* %23, i32 0, i32 7
  store %struct.cookie* %21, %struct.cookie** %24, align 8
  %25 = load %struct.cookie*, %struct.cookie** %3, align 8
  %26 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 7
  store %struct.cookie* %25, %struct.cookie** %26, align 8
  br label %29

; <label>:27:                                     ; preds = %17
  %28 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 7
  store %struct.cookie* %21, %struct.cookie** %28, align 8
  br label %29

; <label>:29:                                     ; preds = %27, %22
  call void @delete_cookie(%struct.cookie* %15)
  %30 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = add nsw i32 %31, -1
  store i32 %32, i32* %30, align 8
  %33 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %34 = load i8, i8* %33, align 1
  %35 = trunc i8 %34 to i1
  br i1 %35, label %36, label %46

; <label>:36:                                     ; preds = %29
  %37 = getelementptr [38 x i8], [38 x i8]* @.str.40, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %37)
  br label %46

; <label>:38:                                     ; preds = %14
  %39 = load %struct.cookie*, %struct.cookie** %3, align 8
  %40 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 7
  store %struct.cookie* %39, %struct.cookie** %40, align 8
  br label %46

; <label>:41:                                     ; preds = %2
  %42 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 7
  store %struct.cookie* null, %struct.cookie** %42, align 8
  %43 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = call noalias i8* @xstrdup(i8* %44)
  store i8* %45, i8** %4, align 8
  br label %46

; <label>:46:                                     ; preds = %38, %29, %36, %41
  %47 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %48 = load %struct.hash_table*, %struct.hash_table** %47, align 8
  %49 = load i8*, i8** %4, align 8
  %50 = bitcast %struct.cookie* %1 to i8*
  call void @hash_table_put(%struct.hash_table* %48, i8* %49, i8* %50)
  %51 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %51, align 8
  %54 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %55 = load i8, i8* %54, align 1
  %56 = trunc i8 %55 to i1
  br i1 %56, label %57, label %111

; <label>:57:                                     ; preds = %46
  %58 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 4
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %61 = load i8, i8* %60, align 1
  %62 = trunc i8 %61 to i1
  br i1 %62, label %63, label %111

; <label>:63:                                     ; preds = %57
  %64 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 1
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, -1
  %71 = zext i1 %70 to i64
  %72 = getelementptr [7 x i8], [7 x i8]* @.str.42, i32 0, i32 0
  %73 = getelementptr [1 x i8], [1 x i8]* @.str.43, i32 0, i32 0
  %74 = select i1 %70, i8* %72, i8* %73
  %75 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 2
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 3
  %78 = load i8, i8* %77, align 8
  %79 = lshr i8 %78, 3
  %80 = and i8 %79, 1
  %81 = zext i8 %80 to i32
  %82 = icmp ne i32 %81, 0
  %83 = zext i1 %82 to i64
  %84 = getelementptr [10 x i8], [10 x i8]* @.str.44, i32 0, i32 0
  %85 = getelementptr [8 x i8], [8 x i8]* @.str.45, i32 0, i32 0
  %86 = select i1 %82, i8* %84, i8* %85
  %87 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 3
  %88 = load i8, i8* %87, align 8
  %89 = lshr i8 %88, 1
  %90 = and i8 %89, 1
  %91 = zext i8 %90 to i32
  %92 = icmp ne i32 %91, 0
  %93 = zext i1 %92 to i64
  %94 = getelementptr [7 x i8], [7 x i8]* @.str.22.34, i32 0, i32 0
  %95 = getelementptr [9 x i8], [9 x i8]* @.str.46, i32 0, i32 0
  %96 = select i1 %92, i8* %94, i8* %95
  %97 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 4
  %98 = load i64, i64* %97, align 8
  %99 = icmp ne i64 %98, 0
  br i1 %99, label %100, label %102

; <label>:100:                                    ; preds = %63
  %101 = call i8* @datetime_str(i64 %59)
  br label %104

; <label>:102:                                    ; preds = %63
  %103 = getelementptr [5 x i8], [5 x i8]* @.str.47, i32 0, i32 0
  br label %104

; <label>:104:                                    ; preds = %102, %100
  %105 = phi i8* [ %101, %100 ], [ %103, %102 ]
  %106 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 5
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 6
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr [55 x i8], [55 x i8]* @.str.41, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %110, i8* %65, i32 %67, i8* %74, i8* %76, i8* %86, i8* %96, i8* %105, i8* %107, i8* %109)
  br label %111

; <label>:111:                                    ; preds = %104, %57, %46
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_cookie(%struct.cookie*) #0 {
  %2 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  call void @free(i8* %3) #8
  %4 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 0
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 2
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 5
  %9 = load i8*, i8** %8, align 8
  call void @free(i8* %9) #8
  %10 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 5
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 6
  %12 = load i8*, i8** %11, align 8
  call void @free(i8* %12) #8
  %13 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 6
  store i8* null, i8** %13, align 8
  %14 = bitcast %struct.cookie* %0 to i8*
  call void @free(i8* %14) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cookie* @find_matching_cookie(%struct.cookie_jar*, %struct.cookie*, %struct.cookie**) #7 {
  %4 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %5 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %6 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = call i8* @hash_table_get(%struct.hash_table* %5, i8* %7)
  %9 = bitcast i8* %8 to %struct.cookie*
  %10 = icmp ne %struct.cookie* %9, null
  br i1 %10, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %31
  %.016 = phi %struct.cookie* [ %.025, %31 ], [ null, %.lr.ph.preheader ]
  %.025 = phi %struct.cookie* [ %33, %31 ], [ %9, %.lr.ph.preheader ]
  call void @unroll_loop(i32 25)
  %11 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 2
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.cookie, %struct.cookie* %.025, i32 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = call i32 @strcmp(i8* %12, i8* %14) #14
  %16 = icmp eq i32 0, %15
  br i1 %16, label %17, label %31

; <label>:17:                                     ; preds = %.lr.ph
  %18 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 5
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.cookie, %struct.cookie* %.025, i32 0, i32 5
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @strcmp(i8* %19, i8* %21) #14
  %23 = icmp eq i32 0, %22
  br i1 %23, label %24, label %31

; <label>:24:                                     ; preds = %17
  %25 = getelementptr inbounds %struct.cookie, %struct.cookie* %1, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.cookie, %struct.cookie* %.025, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %26, %28
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %24
  %.02.lcssa4 = phi %struct.cookie* [ %.025, %24 ]
  %.01.lcssa3 = phi %struct.cookie* [ %.016, %24 ]
  store %struct.cookie* %.01.lcssa3, %struct.cookie** %2, align 8
  br label %35

; <label>:31:                                     ; preds = %.lr.ph, %17, %24
  %32 = getelementptr inbounds %struct.cookie, %struct.cookie* %.025, i32 0, i32 7
  %33 = load %struct.cookie*, %struct.cookie** %32, align 8
  %34 = icmp ne %struct.cookie* %33, null
  br i1 %34, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %31
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  store %struct.cookie* null, %struct.cookie** %2, align 8
  br label %35

; <label>:35:                                     ; preds = %._crit_edge, %30
  %.0 = phi %struct.cookie* [ %.02.lcssa4, %30 ], [ null, %._crit_edge ]
  ret %struct.cookie* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @path_matches(i8*, i8*) #0 {
  %3 = call i64 @strlen(i8* %1) #14
  %4 = trunc i64 %3 to i32
  %5 = sext i32 %4 to i64
  %6 = call i32 @strncmp(i8* %0, i8* %1, i64 %5) #14
  %7 = icmp ne i32 0, %6
  %8 = add nsw i32 %4, 1
  %.0 = select i1 %7, i32 0, i32 %8
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @strcasecmp(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.cookie* @cookie_new() #7 {
  %1 = call noalias i8* @xcalloc(i64 1, i64 64)
  %2 = bitcast i8* %1 to %struct.cookie*
  %3 = getelementptr inbounds %struct.cookie, %struct.cookie* %2, i32 0, i32 1
  store i32 -1, i32* %3, align 8
  ret %struct.cookie* %2
}

; Function Attrs: nounwind
declare dso_local i32 @sscanf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @cookie_header(%struct.cookie_jar*, i8*, i32, i8*, i1 zeroext) #7 {
  %6 = alloca i32, align 4
  %7 = zext i1 %4 to i8
  %8 = call i64 @strlen(i8* %3) #14
  %9 = add i64 1, %8
  %10 = add i64 %9, 1
  %11 = alloca i8, i64 %10, align 16, !track !161
  store i8 47, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  %13 = call i8* @strcpy(i8* %12, i8* %3) #8, !track !162
  %14 = call i32 @count_char(i8* %1, i8 signext 46)
  %15 = add nsw i32 1, %14
  %16 = sext i32 %15 to i64
  %17 = mul i64 %16, 8
  %18 = alloca i8, i64 %17, align 16, !track !163
  %19 = bitcast i8* %18 to %struct.cookie**
  %20 = call i32 @find_chains_of_host(%struct.cookie_jar* %0, i8* %1, %struct.cookie** %19)
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %135

; <label>:22:                                     ; preds = %5
  %23 = call i64 @time(i64* null) #8
  store i64 %23, i64* @cookies_now, align 8
  %24 = icmp slt i32 0, %20
  br i1 %24, label %.lr.ph49.preheader, label %._crit_edge50

.lr.ph49.preheader:                               ; preds = %22
  %25 = zext i32 %20 to i64
  br label %.lr.ph49

.lr.ph49:                                         ; preds = %.lr.ph49.preheader, %._crit_edge44
  %indvars.iv52 = phi i64 [ %indvars.iv.next53, %._crit_edge44 ], [ 0, %.lr.ph49.preheader ]
  %.0846 = phi i32 [ %.19.lcssa, %._crit_edge44 ], [ 0, %.lr.ph49.preheader ]
  call void @unroll_loop(i32 26)
  %26 = getelementptr inbounds %struct.cookie*, %struct.cookie** %19, i64 %indvars.iv52
  %27 = load %struct.cookie*, %struct.cookie** %26, align 8
  %28 = icmp ne %struct.cookie* %27, null
  br i1 %28, label %.lr.ph43.preheader, label %._crit_edge44

.lr.ph43.preheader:                               ; preds = %.lr.ph49
  br label %.lr.ph43

.lr.ph43:                                         ; preds = %.lr.ph43.preheader, %.lr.ph43
  %.1941 = phi i32 [ %spec.select, %.lr.ph43 ], [ %.0846, %.lr.ph43.preheader ]
  %.01140 = phi %struct.cookie* [ %33, %.lr.ph43 ], [ %27, %.lr.ph43.preheader ]
  call void @unroll_loop(i32 27)
  %29 = trunc i8 %7 to i1
  %30 = call zeroext i1 @cookie_matches_url(%struct.cookie* %.01140, i8* %1, i32 %2, i8* %11, i1 zeroext %29, i32* null)
  %31 = add nsw i32 %.1941, 1
  %spec.select = select i1 %30, i32 %31, i32 %.1941
  %32 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01140, i32 0, i32 7
  %33 = load %struct.cookie*, %struct.cookie** %32, align 8
  %34 = icmp ne %struct.cookie* %33, null
  br i1 %34, label %.lr.ph43, label %._crit_edge44.loopexit

._crit_edge44.loopexit:                           ; preds = %.lr.ph43
  %.19.lcssa.ph = phi i32 [ %spec.select, %.lr.ph43 ]
  br label %._crit_edge44

._crit_edge44:                                    ; preds = %._crit_edge44.loopexit, %.lr.ph49
  %.19.lcssa = phi i32 [ %.0846, %.lr.ph49 ], [ %.19.lcssa.ph, %._crit_edge44.loopexit ]
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond3 = icmp ne i64 %indvars.iv.next53, %25
  br i1 %exitcond3, label %.lr.ph49, label %._crit_edge50.loopexit

._crit_edge50.loopexit:                           ; preds = %._crit_edge44
  %.08.lcssa.ph = phi i32 [ %.19.lcssa, %._crit_edge44 ]
  br label %._crit_edge50

._crit_edge50:                                    ; preds = %._crit_edge50.loopexit, %22
  %.08.lcssa = phi i32 [ 0, %22 ], [ %.08.lcssa.ph, %._crit_edge50.loopexit ]
  %35 = icmp ne i32 %.08.lcssa, 0
  br i1 %35, label %36, label %135

; <label>:36:                                     ; preds = %._crit_edge50
  %37 = sext i32 %.08.lcssa to i64
  %38 = mul i64 %37, 16
  %39 = alloca i8, i64 %38, align 16, !track !164
  %40 = bitcast i8* %39 to %struct.weighed_cookie*
  %41 = icmp slt i32 0, %20
  br i1 %41, label %.lr.ph34.preheader, label %._crit_edge35

.lr.ph34.preheader:                               ; preds = %36
  %42 = zext i32 %20 to i64
  br label %.lr.ph34

.lr.ph34:                                         ; preds = %.lr.ph34.preheader, %._crit_edge29
  %indvars.iv36 = phi i64 [ %indvars.iv.next37, %._crit_edge29 ], [ 0, %.lr.ph34.preheader ]
  %.0332 = phi i32 [ %.14.lcssa, %._crit_edge29 ], [ 0, %.lr.ph34.preheader ]
  call void @unroll_loop(i32 28)
  %43 = getelementptr inbounds %struct.cookie*, %struct.cookie** %19, i64 %indvars.iv36
  %44 = load %struct.cookie*, %struct.cookie** %43, align 8
  %45 = icmp ne %struct.cookie* %44, null
  br i1 %45, label %.lr.ph28.preheader, label %._crit_edge29

.lr.ph28.preheader:                               ; preds = %.lr.ph34
  br label %.lr.ph28

.lr.ph28:                                         ; preds = %.lr.ph28.preheader, %64
  %.1426 = phi i32 [ %.2, %64 ], [ %.0332, %.lr.ph28.preheader ]
  %.11225 = phi %struct.cookie* [ %66, %64 ], [ %44, %.lr.ph28.preheader ]
  call void @unroll_loop(i32 29)
  %46 = trunc i8 %7 to i1
  %47 = call zeroext i1 @cookie_matches_url(%struct.cookie* %.11225, i8* %1, i32 %2, i8* %11, i1 zeroext %46, i32* %6)
  br i1 %47, label %48, label %64

; <label>:48:                                     ; preds = %.lr.ph28
  %49 = sext i32 %.1426 to i64
  %50 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %40, i64 %49
  %51 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %50, i32 0, i32 0
  store %struct.cookie* %.11225, %struct.cookie** %51, align 8
  %52 = getelementptr inbounds %struct.cookie, %struct.cookie* %.11225, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = call i64 @strlen(i8* %53) #14
  %55 = trunc i64 %54 to i32
  %56 = sext i32 %.1426 to i64
  %57 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %40, i64 %56
  %58 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %57, i32 0, i32 1
  store i32 %55, i32* %58, align 8
  %59 = load i32, i32* %6, align 4
  %60 = sext i32 %.1426 to i64
  %61 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %40, i64 %60
  %62 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %61, i32 0, i32 2
  store i32 %59, i32* %62, align 4
  %63 = add nsw i32 %.1426, 1
  br label %64

; <label>:64:                                     ; preds = %.lr.ph28, %48
  %.2 = phi i32 [ %63, %48 ], [ %.1426, %.lr.ph28 ]
  %65 = getelementptr inbounds %struct.cookie, %struct.cookie* %.11225, i32 0, i32 7
  %66 = load %struct.cookie*, %struct.cookie** %65, align 8
  %67 = icmp ne %struct.cookie* %66, null
  br i1 %67, label %.lr.ph28, label %._crit_edge29.loopexit

._crit_edge29.loopexit:                           ; preds = %64
  %.14.lcssa.ph = phi i32 [ %.2, %64 ]
  br label %._crit_edge29

._crit_edge29:                                    ; preds = %._crit_edge29.loopexit, %.lr.ph34
  %.14.lcssa = phi i32 [ %.0332, %.lr.ph34 ], [ %.14.lcssa.ph, %._crit_edge29.loopexit ]
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %exitcond2 = icmp ne i64 %indvars.iv.next37, %42
  br i1 %exitcond2, label %.lr.ph34, label %._crit_edge35.loopexit

._crit_edge35.loopexit:                           ; preds = %._crit_edge29
  br label %._crit_edge35

._crit_edge35:                                    ; preds = %._crit_edge35.loopexit, %36
  %68 = call i32 @eliminate_dups(%struct.weighed_cookie* %40, i32 %.08.lcssa)
  %69 = bitcast %struct.weighed_cookie* %40 to i8*
  %70 = sext i32 %68 to i64
  call void @qsort(i8* %69, i64 %70, i64 16, i32 (i8*, i8*)* @goodness_comparator)
  %71 = icmp slt i32 0, %68
  br i1 %71, label %.lr.ph18.preheader, label %._crit_edge19

.lr.ph18.preheader:                               ; preds = %._crit_edge35
  %72 = zext i32 %68 to i64
  br label %.lr.ph18

.lr.ph18:                                         ; preds = %.lr.ph18.preheader, %.lr.ph18
  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %.lr.ph18 ], [ 0, %.lr.ph18.preheader ]
  %.0216 = phi i32 [ %86, %.lr.ph18 ], [ 0, %.lr.ph18.preheader ]
  call void @unroll_loop(i32 30)
  %73 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %40, i64 %indvars.iv21
  %74 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %73, i32 0, i32 0
  %75 = load %struct.cookie*, %struct.cookie** %74, align 8
  %76 = getelementptr inbounds %struct.cookie, %struct.cookie* %75, i32 0, i32 5
  %77 = load i8*, i8** %76, align 8
  %78 = call i64 @strlen(i8* %77) #14
  %79 = add i64 %78, 1
  %80 = getelementptr inbounds %struct.cookie, %struct.cookie* %75, i32 0, i32 6
  %81 = load i8*, i8** %80, align 8
  %82 = call i64 @strlen(i8* %81) #14
  %83 = add i64 %79, %82
  %84 = sext i32 %.0216 to i64
  %85 = add i64 %84, %83
  %86 = trunc i64 %85 to i32
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond = icmp ne i64 %indvars.iv.next22, %72
  br i1 %exitcond, label %.lr.ph18, label %._crit_edge19.loopexit

._crit_edge19.loopexit:                           ; preds = %.lr.ph18
  %.02.lcssa.ph = phi i32 [ %86, %.lr.ph18 ]
  br label %._crit_edge19

._crit_edge19:                                    ; preds = %._crit_edge19.loopexit, %._crit_edge35
  %.02.lcssa = phi i32 [ 0, %._crit_edge35 ], [ %.02.lcssa.ph, %._crit_edge19.loopexit ]
  %87 = sub nsw i32 %68, 1
  %88 = mul nsw i32 %87, 2
  %89 = add nsw i32 %.02.lcssa, %88
  %90 = add nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = call noalias i8* @xmalloc(i64 %91)
  %93 = icmp slt i32 0, %68
  br i1 %93, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge19
  %94 = zext i32 %68 to i64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %131
  %indvars.iv = phi i64 [ %indvars.iv.next, %131 ], [ 0, %.lr.ph.preheader ]
  %.0114 = phi i32 [ %.1, %131 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 31)
  %95 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %40, i64 %indvars.iv
  %96 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %95, i32 0, i32 0
  %97 = load %struct.cookie*, %struct.cookie** %96, align 8
  %98 = getelementptr inbounds %struct.cookie, %struct.cookie* %97, i32 0, i32 5
  %99 = load i8*, i8** %98, align 8
  %100 = call i64 @strlen(i8* %99) #14
  %101 = trunc i64 %100 to i32
  %102 = getelementptr inbounds %struct.cookie, %struct.cookie* %97, i32 0, i32 6
  %103 = load i8*, i8** %102, align 8
  %104 = call i64 @strlen(i8* %103) #14
  %105 = trunc i64 %104 to i32
  %106 = sext i32 %.0114 to i64
  %107 = getelementptr inbounds i8, i8* %92, i64 %106
  %108 = getelementptr inbounds %struct.cookie, %struct.cookie* %97, i32 0, i32 5
  %109 = load i8*, i8** %108, align 8
  %110 = sext i32 %101 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %107, i8* align 1 %109, i64 %110, i1 false), !track !165
  %111 = add nsw i32 %.0114, %101
  %112 = add nsw i32 %111, 1
  %113 = sext i32 %111 to i64
  %114 = getelementptr inbounds i8, i8* %92, i64 %113
  store i8 61, i8* %114, align 1
  %115 = sext i32 %112 to i64
  %116 = getelementptr inbounds i8, i8* %92, i64 %115
  %117 = getelementptr inbounds %struct.cookie, %struct.cookie* %97, i32 0, i32 6
  %118 = load i8*, i8** %117, align 8
  %119 = sext i32 %105 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %118, i64 %119, i1 false), !track !166
  %120 = add nsw i32 %112, %105
  %121 = sub nsw i32 %68, 1
  %122 = sext i32 %121 to i64
  %123 = icmp slt i64 %indvars.iv, %122
  br i1 %123, label %124, label %131

; <label>:124:                                    ; preds = %.lr.ph
  %125 = add nsw i32 %120, 1
  %126 = sext i32 %120 to i64
  %127 = getelementptr inbounds i8, i8* %92, i64 %126
  store i8 59, i8* %127, align 1
  %128 = add nsw i32 %125, 1
  %129 = sext i32 %125 to i64
  %130 = getelementptr inbounds i8, i8* %92, i64 %129
  store i8 32, i8* %130, align 1
  br label %131

; <label>:131:                                    ; preds = %.lr.ph, %124
  %.1 = phi i32 [ %128, %124 ], [ %120, %.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %94
  br i1 %exitcond1, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %131
  %.01.lcssa.ph = phi i32 [ %.1, %131 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge19
  %.01.lcssa = phi i32 [ 0, %._crit_edge19 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %132 = add nsw i32 %.01.lcssa, 1
  %133 = sext i32 %.01.lcssa to i64
  %134 = getelementptr inbounds i8, i8* %92, i64 %133
  store i8 0, i8* %134, align 1
  br label %135

; <label>:135:                                    ; preds = %._crit_edge50, %5, %._crit_edge
  %.0 = phi i8* [ %92, %._crit_edge ], [ null, %5 ], [ null, %._crit_edge50 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @count_char(i8*, i8 signext) #0 {
  %3 = load i8, i8* %0, align 1
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.03 = phi i32 [ %spec.select, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %.012 = phi i8* [ %10, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 32)
  %5 = load i8, i8* %.012, align 1
  %6 = sext i8 %5 to i32
  %7 = sext i8 %1 to i32
  %8 = icmp eq i32 %6, %7
  %9 = add nsw i32 %.03, 1
  %spec.select = select i1 %8, i32 %9, i32 %.03
  %10 = getelementptr inbounds i8, i8* %.012, i32 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  br i1 %12, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i32 [ %spec.select, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.0.lcssa = phi i32 [ 0, %2 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  ret i32 %.0.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_chains_of_host(%struct.cookie_jar*, i8*, %struct.cookie**) #0 {
  %4 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %5 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %6 = call i32 @hash_table_count(%struct.hash_table* %5)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %29

; <label>:8:                                      ; preds = %3
  %9 = call zeroext i1 @numeric_address_p(i8* %1)
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %8
  %11 = call i32 @count_char(i8* %1, i8 signext 46)
  br label %12

; <label>:12:                                     ; preds = %8, %10
  %.03 = phi i32 [ %11, %10 ], [ 1, %8 ]
  br label %13

; <label>:13:                                     ; preds = %12, %26
  %.04 = phi i32 [ 0, %12 ], [ %.1, %26 ]
  %.02 = phi i8* [ %1, %12 ], [ %28, %26 ]
  %.01 = phi i32 [ 0, %12 ], [ %24, %26 ]
  call void @unroll_loop(i32 33)
  %14 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %15 = load %struct.hash_table*, %struct.hash_table** %14, align 8
  %16 = call i8* @hash_table_get(%struct.hash_table* %15, i8* %.02)
  %17 = bitcast i8* %16 to %struct.cookie*
  %18 = icmp ne %struct.cookie* %17, null
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %13
  %20 = add nsw i32 %.04, 1
  %21 = sext i32 %.04 to i64
  %22 = getelementptr inbounds %struct.cookie*, %struct.cookie** %2, i64 %21
  store %struct.cookie* %17, %struct.cookie** %22, align 8
  br label %23

; <label>:23:                                     ; preds = %19, %13
  %.1 = phi i32 [ %20, %19 ], [ %.04, %13 ]
  %24 = add nuw nsw i32 %.01, 1
  %25 = icmp sge i32 %24, %.03
  br i1 %25, label %.loopexit, label %26

; <label>:26:                                     ; preds = %23
  %27 = call i8* @strchr(i8* %.02, i32 46) #14
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  br label %13

.loopexit:                                        ; preds = %23
  %.0.ph = phi i32 [ %.1, %23 ]
  br label %29

; <label>:29:                                     ; preds = %.loopexit, %3
  %.0 = phi i32 [ 0, %3 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cookie_matches_url(%struct.cookie*, i8*, i32, i8*, i1 zeroext, i32*) #0 {
  %7 = zext i1 %4 to i8
  %8 = call zeroext i1 @cookie_expired_p(%struct.cookie* %0)
  br i1 %8, label %46, label %9

; <label>:9:                                      ; preds = %6
  %10 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 3
  %11 = load i8, i8* %10, align 8
  %12 = lshr i8 %11, 1
  %13 = and i8 %12, 1
  %14 = zext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %9
  %17 = trunc i8 %7 to i1
  br i1 %17, label %18, label %46

; <label>:18:                                     ; preds = %16, %9
  %19 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp ne i32 %20, -1
  br i1 %21, label %22, label %26

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp ne i32 %24, %2
  br i1 %25, label %46, label %26

; <label>:26:                                     ; preds = %22, %18
  %27 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 3
  %28 = load i8, i8* %27, align 8
  %29 = lshr i8 %28, 2
  %30 = and i8 %29, 1
  %31 = zext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %38

; <label>:33:                                     ; preds = %26
  %34 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @strcasecmp(i8* %1, i8* %35) #14
  %37 = icmp ne i32 0, %36
  br i1 %37, label %46, label %38

; <label>:38:                                     ; preds = %33, %26
  %39 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @path_matches(i8* %3, i8* %40)
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %46, label %43

; <label>:43:                                     ; preds = %38
  %44 = icmp ne i32* %5, null
  br i1 %44, label %45, label %46

; <label>:45:                                     ; preds = %43
  store i32 %41, i32* %5, align 4
  br label %46

; <label>:46:                                     ; preds = %43, %45, %38, %33, %22, %16, %6
  %.0 = phi i1 [ false, %6 ], [ false, %16 ], [ false, %22 ], [ false, %33 ], [ false, %38 ], [ true, %45 ], [ true, %43 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eliminate_dups(%struct.weighed_cookie*, i32) #0 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %0, i64 %3
  %5 = bitcast %struct.weighed_cookie* %0 to i8*
  %6 = sext i32 %1 to i64
  call void @qsort(i8* %5, i64 %6, i64 16, i32 (i8*, i8*)* @equality_comparator)
  %7 = icmp ult %struct.weighed_cookie* %0, %4
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %35
  %.03 = phi %struct.weighed_cookie* [ %.2, %35 ], [ %0, %.lr.ph.preheader ]
  %.012 = phi %struct.weighed_cookie* [ %36, %35 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 34)
  %8 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %4, i64 -1
  %9 = icmp ne %struct.weighed_cookie* %.012, %8
  br i1 %9, label %10, label %29

; <label>:10:                                     ; preds = %.lr.ph
  %11 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %.012, i32 0, i32 0
  %12 = load %struct.cookie*, %struct.cookie** %11, align 8
  %13 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %.012, i64 1
  %14 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %13, i32 0, i32 0
  %15 = load %struct.cookie*, %struct.cookie** %14, align 8
  %16 = getelementptr inbounds %struct.cookie, %struct.cookie* %12, i32 0, i32 5
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.cookie, %struct.cookie* %15, i32 0, i32 5
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @strcmp(i8* %17, i8* %19) #14
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %29, label %22

; <label>:22:                                     ; preds = %10
  %23 = getelementptr inbounds %struct.cookie, %struct.cookie* %12, i32 0, i32 6
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.cookie, %struct.cookie* %15, i32 0, i32 6
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @strcmp(i8* %24, i8* %26) #14
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %35

; <label>:29:                                     ; preds = %10, %22, %.lr.ph
  %30 = icmp ne %struct.weighed_cookie* %.012, %.03
  %31 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %.03, i32 1
  br i1 %30, label %32, label %35

; <label>:32:                                     ; preds = %29
  %33 = bitcast %struct.weighed_cookie* %.03 to i8*
  %34 = bitcast %struct.weighed_cookie* %.012 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 16, i1 false), !track !167
  br label %35

; <label>:35:                                     ; preds = %32, %29, %22
  %.2 = phi %struct.weighed_cookie* [ %.03, %22 ], [ %31, %29 ], [ %31, %32 ]
  %36 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %.012, i32 1
  %37 = icmp ult %struct.weighed_cookie* %36, %4
  br i1 %37, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %35
  %.0.lcssa.ph = phi %struct.weighed_cookie* [ %.2, %35 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.0.lcssa = phi %struct.weighed_cookie* [ %0, %2 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %38 = ptrtoint %struct.weighed_cookie* %.0.lcssa to i64
  %39 = ptrtoint %struct.weighed_cookie* %0 to i64
  %40 = sub i64 %38, %39
  %41 = sdiv exact i64 %40, 16
  %42 = trunc i64 %41 to i32
  ret i32 %42
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @goodness_comparator(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.weighed_cookie*
  %4 = bitcast i8* %1 to %struct.weighed_cookie*
  %5 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %4, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %3, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = sub nsw i32 %6, %8
  %10 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %4, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %3, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %11, %13
  %15 = icmp ne i32 %9, 0
  %. = select i1 %15, i32 %9, i32 %14
  ret i32 %.
}

declare dso_local void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @equality_comparator(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.weighed_cookie*
  %4 = bitcast i8* %1 to %struct.weighed_cookie*
  %5 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %3, i32 0, i32 0
  %6 = load %struct.cookie*, %struct.cookie** %5, align 8
  %7 = getelementptr inbounds %struct.cookie, %struct.cookie* %6, i32 0, i32 5
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %4, i32 0, i32 0
  %10 = load %struct.cookie*, %struct.cookie** %9, align 8
  %11 = getelementptr inbounds %struct.cookie, %struct.cookie* %10, i32 0, i32 5
  %12 = load i8*, i8** %11, align 8
  %13 = call i32 @strcmp(i8* %8, i8* %12) #14
  %14 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %3, i32 0, i32 0
  %15 = load %struct.cookie*, %struct.cookie** %14, align 8
  %16 = getelementptr inbounds %struct.cookie, %struct.cookie* %15, i32 0, i32 6
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.weighed_cookie, %struct.weighed_cookie* %4, i32 0, i32 0
  %19 = load %struct.cookie*, %struct.cookie** %18, align 8
  %20 = getelementptr inbounds %struct.cookie, %struct.cookie* %19, i32 0, i32 6
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @strcmp(i8* %17, i8* %21) #14
  %23 = icmp ne i32 %13, 0
  %. = select i1 %23, i32 %13, i32 %22
  ret i32 %.
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cookie_expired_p(%struct.cookie*) #0 {
  %2 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.cookie, %struct.cookie* %0, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* @cookies_now, align 8
  %9 = icmp slt i64 %7, %8
  br label %10

; <label>:10:                                     ; preds = %5, %1
  %11 = phi i1 [ false, %1 ], [ %9, %5 ]
  ret i1 %11
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @numeric_address_p(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = call zeroext i1 @c_isdigit(i32 %3)
  br i1 %4, label %5, label %68

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds i8, i8* %0, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = call zeroext i1 @c_isdigit(i32 %8)
  br i1 %9, label %.lr.ph15.preheader, label %._crit_edge16

.lr.ph15.preheader:                               ; preds = %5
  br label %.lr.ph15

.lr.ph15:                                         ; preds = %.lr.ph15.preheader, %.lr.ph15
  %.0113 = phi i8* [ %10, %.lr.ph15 ], [ %6, %.lr.ph15.preheader ]
  call void @unroll_loop(i32 35)
  %10 = getelementptr inbounds i8, i8* %.0113, i32 1
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = call zeroext i1 @c_isdigit(i32 %12)
  br i1 %13, label %.lr.ph15, label %._crit_edge16.loopexit

._crit_edge16.loopexit:                           ; preds = %.lr.ph15
  %.01.lcssa.ph = phi i8* [ %10, %.lr.ph15 ]
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %5
  %.01.lcssa = phi i8* [ %6, %5 ], [ %.01.lcssa.ph, %._crit_edge16.loopexit ]
  %14 = getelementptr inbounds i8, i8* %.01.lcssa, i32 1
  %15 = load i8, i8* %.01.lcssa, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp ne i32 %16, 46
  br i1 %17, label %68, label %18

; <label>:18:                                     ; preds = %._crit_edge16
  %19 = load i8, i8* %14, align 1
  %20 = sext i8 %19 to i32
  %21 = call zeroext i1 @c_isdigit(i32 %20)
  br i1 %21, label %22, label %68

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds i8, i8* %14, i32 1
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = call zeroext i1 @c_isdigit(i32 %25)
  br i1 %26, label %.lr.ph10.preheader, label %._crit_edge11

.lr.ph10.preheader:                               ; preds = %22
  br label %.lr.ph10

.lr.ph10:                                         ; preds = %.lr.ph10.preheader, %.lr.ph10
  %.18 = phi i8* [ %27, %.lr.ph10 ], [ %23, %.lr.ph10.preheader ]
  call void @unroll_loop(i32 36)
  %27 = getelementptr inbounds i8, i8* %.18, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = call zeroext i1 @c_isdigit(i32 %29)
  br i1 %30, label %.lr.ph10, label %._crit_edge11.loopexit

._crit_edge11.loopexit:                           ; preds = %.lr.ph10
  %.1.lcssa.ph = phi i8* [ %27, %.lr.ph10 ]
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %22
  %.1.lcssa = phi i8* [ %23, %22 ], [ %.1.lcssa.ph, %._crit_edge11.loopexit ]
  %31 = getelementptr inbounds i8, i8* %.1.lcssa, i32 1
  %32 = load i8, i8* %.1.lcssa, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp ne i32 %33, 46
  br i1 %34, label %68, label %35

; <label>:35:                                     ; preds = %._crit_edge11
  %36 = load i8, i8* %31, align 1
  %37 = sext i8 %36 to i32
  %38 = call zeroext i1 @c_isdigit(i32 %37)
  br i1 %38, label %39, label %68

; <label>:39:                                     ; preds = %35
  %40 = getelementptr inbounds i8, i8* %31, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = call zeroext i1 @c_isdigit(i32 %42)
  br i1 %43, label %.lr.ph5.preheader, label %._crit_edge6

.lr.ph5.preheader:                                ; preds = %39
  br label %.lr.ph5

.lr.ph5:                                          ; preds = %.lr.ph5.preheader, %.lr.ph5
  %.23 = phi i8* [ %44, %.lr.ph5 ], [ %40, %.lr.ph5.preheader ]
  call void @unroll_loop(i32 37)
  %44 = getelementptr inbounds i8, i8* %.23, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = call zeroext i1 @c_isdigit(i32 %46)
  br i1 %47, label %.lr.ph5, label %._crit_edge6.loopexit

._crit_edge6.loopexit:                            ; preds = %.lr.ph5
  %.2.lcssa.ph = phi i8* [ %44, %.lr.ph5 ]
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %._crit_edge6.loopexit, %39
  %.2.lcssa = phi i8* [ %40, %39 ], [ %.2.lcssa.ph, %._crit_edge6.loopexit ]
  %48 = getelementptr inbounds i8, i8* %.2.lcssa, i32 1
  %49 = load i8, i8* %.2.lcssa, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp ne i32 %50, 46
  br i1 %51, label %68, label %52

; <label>:52:                                     ; preds = %._crit_edge6
  %53 = load i8, i8* %48, align 1
  %54 = sext i8 %53 to i32
  %55 = call zeroext i1 @c_isdigit(i32 %54)
  br i1 %55, label %56, label %68

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds i8, i8* %48, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = call zeroext i1 @c_isdigit(i32 %59)
  br i1 %60, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %56
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.32 = phi i8* [ %61, %.lr.ph ], [ %57, %.lr.ph.preheader ]
  call void @unroll_loop(i32 38)
  %61 = getelementptr inbounds i8, i8* %.32, i32 1
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = call zeroext i1 @c_isdigit(i32 %63)
  br i1 %64, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.3.lcssa.ph = phi i8* [ %61, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %56
  %.3.lcssa = phi i8* [ %57, %56 ], [ %.3.lcssa.ph, %._crit_edge.loopexit ]
  %65 = load i8, i8* %.3.lcssa, align 1
  %66 = sext i8 %65 to i32
  %67 = icmp ne i32 %66, 0
  %. = select i1 %67, i1 false, i1 true
  br label %68

; <label>:68:                                     ; preds = %._crit_edge, %52, %._crit_edge6, %35, %._crit_edge11, %18, %._crit_edge16, %1
  %.0 = phi i1 [ false, %1 ], [ false, %._crit_edge16 ], [ false, %18 ], [ false, %._crit_edge11 ], [ false, %35 ], [ false, %._crit_edge6 ], [ false, %52 ], [ %., %._crit_edge ]
  ret i1 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @cookie_jar_load(%struct.cookie_jar*, i8*) #0 {
  %3 = alloca i8*, align 8, !track !168
  %4 = alloca i64, align 8, !track !169
  %5 = alloca double, align 8, !track !170
  %6 = alloca i8*, align 8, !track !171
  store i8* null, i8** %3, align 8
  store i64 0, i64* %4, align 8
  %7 = getelementptr [2 x i8], [2 x i8]* @.str.3.44, i32 0, i32 0
  %8 = call %struct._IO_FILE* @fopen(i8* %1, i8* %7), !track !172
  %9 = icmp ne %struct._IO_FILE* %8, null
  br i1 %9, label %17, label %10

; <label>:10:                                     ; preds = %2
  %11 = getelementptr [33 x i8], [33 x i8]* @.str.4.45, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8
  %13 = call i8* @quote(i8* %1)
  %14 = call i32* @__errno_location() #15
  %15 = load i32, i32* %14, align 4
  %16 = call i8* @strerror(i32 %15) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %12, i8* %13, i8* %16)
  br label %254

; <label>:17:                                     ; preds = %2
  %18 = call i64 @time(i64* null) #8
  store i64 %18, i64* @cookies_now, align 8
  %19 = call i64 @getline(i8** %3, i64* %4, %struct._IO_FILE* %8)
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %17
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  call void @unroll_loop(i32 39)
  %21 = load i8*, i8** %3, align 8
  store i8* null, i8** %6, align 8
  br label %22

; <label>:22:                                     ; preds = %30, %.lr.ph
  %.01 = phi i8* [ %21, %.lr.ph ], [ %32, %30 ]
  call void @unroll_loop(i32 40)
  %23 = load i8, i8* %.01, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %30

; <label>:26:                                     ; preds = %22
  %27 = load i8, i8* %.01, align 1
  %28 = sext i8 %27 to i32
  %29 = call zeroext i1 @c_isspace(i32 %28)
  br label %30

; <label>:30:                                     ; preds = %26, %22
  %31 = phi i1 [ false, %22 ], [ %29, %26 ]
  %32 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %31, label %22, label %33

; <label>:33:                                     ; preds = %30
  %.01.lcssa = phi i8* [ %.01, %30 ]
  %34 = load i8, i8* %.01.lcssa, align 1
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %36, label %.backedge

; <label>:36:                                     ; preds = %33
  %37 = load i8, i8* %.01.lcssa, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, 35
  br i1 %39, label %.backedge, label %.preheader

.preheader:                                       ; preds = %36
  br label %42

.backedge:                                        ; preds = %250, %56, %53, %74, %72, %92, %90, %110, %108, %128, %126, %146, %144, %33, %36, %251
  %40 = call i64 @getline(i8** %3, i64* %4, %struct._IO_FILE* %8)
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %.lr.ph, label %._crit_edge.loopexit

; <label>:42:                                     ; preds = %.preheader, %50
  %.12 = phi i8* [ %52, %50 ], [ %.01.lcssa, %.preheader ]
  call void @unroll_loop(i32 41)
  %43 = load i8, i8* %.12, align 1
  %44 = sext i8 %43 to i32
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %50

; <label>:46:                                     ; preds = %42
  %47 = load i8, i8* %.12, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp ne i32 %48, 9
  br label %50

; <label>:50:                                     ; preds = %46, %42
  %51 = phi i1 [ false, %42 ], [ %49, %46 ]
  %52 = getelementptr inbounds i8, i8* %.12, i32 1
  br i1 %51, label %42, label %53

; <label>:53:                                     ; preds = %50
  %.12.lcssa = phi i8* [ %.12, %50 ]
  store i8* %.12.lcssa, i8** %6, align 8
  %54 = load i8*, i8** %6, align 8
  %55 = icmp eq i8* %.01.lcssa, %54
  br i1 %55, label %.backedge, label %56

; <label>:56:                                     ; preds = %53
  %57 = load i8, i8* %.12.lcssa, align 1
  %58 = icmp ne i8 %57, 0
  br i1 %58, label %59, label %.backedge

; <label>:59:                                     ; preds = %56
  %60 = getelementptr inbounds i8, i8* %.12.lcssa, i32 1
  br label %61

; <label>:61:                                     ; preds = %69, %59
  %.2 = phi i8* [ %60, %59 ], [ %71, %69 ]
  call void @unroll_loop(i32 42)
  %62 = load i8, i8* %.2, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %69

; <label>:65:                                     ; preds = %61
  %66 = load i8, i8* %.2, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp ne i32 %67, 9
  br label %69

; <label>:69:                                     ; preds = %65, %61
  %70 = phi i1 [ false, %61 ], [ %68, %65 ]
  %71 = getelementptr inbounds i8, i8* %.2, i32 1
  br i1 %70, label %61, label %72

; <label>:72:                                     ; preds = %69
  %.2.lcssa = phi i8* [ %.2, %69 ]
  %73 = icmp eq i8* %60, %.2.lcssa
  br i1 %73, label %.backedge, label %74

; <label>:74:                                     ; preds = %72
  %75 = load i8, i8* %.2.lcssa, align 1
  %76 = icmp ne i8 %75, 0
  br i1 %76, label %77, label %.backedge

; <label>:77:                                     ; preds = %74
  %78 = getelementptr inbounds i8, i8* %.2.lcssa, i32 1
  br label %79

; <label>:79:                                     ; preds = %87, %77
  %.3 = phi i8* [ %78, %77 ], [ %89, %87 ]
  call void @unroll_loop(i32 43)
  %80 = load i8, i8* %.3, align 1
  %81 = sext i8 %80 to i32
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %87

; <label>:83:                                     ; preds = %79
  %84 = load i8, i8* %.3, align 1
  %85 = sext i8 %84 to i32
  %86 = icmp ne i32 %85, 9
  br label %87

; <label>:87:                                     ; preds = %83, %79
  %88 = phi i1 [ false, %79 ], [ %86, %83 ]
  %89 = getelementptr inbounds i8, i8* %.3, i32 1
  br i1 %88, label %79, label %90

; <label>:90:                                     ; preds = %87
  %.3.lcssa = phi i8* [ %.3, %87 ]
  %91 = icmp eq i8* %78, %.3.lcssa
  br i1 %91, label %.backedge, label %92

; <label>:92:                                     ; preds = %90
  %93 = load i8, i8* %.3.lcssa, align 1
  %94 = icmp ne i8 %93, 0
  br i1 %94, label %95, label %.backedge

; <label>:95:                                     ; preds = %92
  %96 = getelementptr inbounds i8, i8* %.3.lcssa, i32 1
  br label %97

; <label>:97:                                     ; preds = %105, %95
  %.4 = phi i8* [ %96, %95 ], [ %107, %105 ]
  call void @unroll_loop(i32 44)
  %98 = load i8, i8* %.4, align 1
  %99 = sext i8 %98 to i32
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %105

; <label>:101:                                    ; preds = %97
  %102 = load i8, i8* %.4, align 1
  %103 = sext i8 %102 to i32
  %104 = icmp ne i32 %103, 9
  br label %105

; <label>:105:                                    ; preds = %101, %97
  %106 = phi i1 [ false, %97 ], [ %104, %101 ]
  %107 = getelementptr inbounds i8, i8* %.4, i32 1
  br i1 %106, label %97, label %108

; <label>:108:                                    ; preds = %105
  %.4.lcssa = phi i8* [ %.4, %105 ]
  %109 = icmp eq i8* %96, %.4.lcssa
  br i1 %109, label %.backedge, label %110

; <label>:110:                                    ; preds = %108
  %111 = load i8, i8* %.4.lcssa, align 1
  %112 = icmp ne i8 %111, 0
  br i1 %112, label %113, label %.backedge

; <label>:113:                                    ; preds = %110
  %114 = getelementptr inbounds i8, i8* %.4.lcssa, i32 1
  br label %115

; <label>:115:                                    ; preds = %123, %113
  %.5 = phi i8* [ %114, %113 ], [ %125, %123 ]
  call void @unroll_loop(i32 45)
  %116 = load i8, i8* %.5, align 1
  %117 = sext i8 %116 to i32
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %123

; <label>:119:                                    ; preds = %115
  %120 = load i8, i8* %.5, align 1
  %121 = sext i8 %120 to i32
  %122 = icmp ne i32 %121, 9
  br label %123

; <label>:123:                                    ; preds = %119, %115
  %124 = phi i1 [ false, %115 ], [ %122, %119 ]
  %125 = getelementptr inbounds i8, i8* %.5, i32 1
  br i1 %124, label %115, label %126

; <label>:126:                                    ; preds = %123
  %.5.lcssa = phi i8* [ %.5, %123 ]
  %127 = icmp eq i8* %114, %.5.lcssa
  br i1 %127, label %.backedge, label %128

; <label>:128:                                    ; preds = %126
  %129 = load i8, i8* %.5.lcssa, align 1
  %130 = icmp ne i8 %129, 0
  br i1 %130, label %131, label %.backedge

; <label>:131:                                    ; preds = %128
  %132 = getelementptr inbounds i8, i8* %.5.lcssa, i32 1
  br label %133

; <label>:133:                                    ; preds = %141, %131
  %.6 = phi i8* [ %132, %131 ], [ %143, %141 ]
  call void @unroll_loop(i32 46)
  %134 = load i8, i8* %.6, align 1
  %135 = sext i8 %134 to i32
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %137, label %141

; <label>:137:                                    ; preds = %133
  %138 = load i8, i8* %.6, align 1
  %139 = sext i8 %138 to i32
  %140 = icmp ne i32 %139, 9
  br label %141

; <label>:141:                                    ; preds = %137, %133
  %142 = phi i1 [ false, %133 ], [ %140, %137 ]
  %143 = getelementptr inbounds i8, i8* %.6, i32 1
  br i1 %142, label %133, label %144

; <label>:144:                                    ; preds = %141
  %.6.lcssa = phi i8* [ %.6, %141 ]
  %145 = icmp eq i8* %132, %.6.lcssa
  br i1 %145, label %.backedge, label %146

; <label>:146:                                    ; preds = %144
  %147 = load i8, i8* %.6.lcssa, align 1
  %148 = icmp ne i8 %147, 0
  br i1 %148, label %149, label %.backedge

; <label>:149:                                    ; preds = %146
  %150 = getelementptr inbounds i8, i8* %.6.lcssa, i32 1
  %151 = call i64 @strlen(i8* %150) #14
  %152 = getelementptr inbounds i8, i8* %150, i64 %151
  %153 = icmp ugt i8* %152, %150
  br i1 %153, label %154, label %160

; <label>:154:                                    ; preds = %149
  %155 = getelementptr inbounds i8, i8* %152, i64 -1
  %156 = load i8, i8* %155, align 1
  %157 = sext i8 %156 to i32
  %158 = icmp eq i32 %157, 10
  %159 = getelementptr inbounds i8, i8* %152, i32 -1
  %spec.select = select i1 %158, i8* %159, i8* %152
  br label %160

; <label>:160:                                    ; preds = %154, %149
  %.0 = phi i8* [ %152, %149 ], [ %spec.select, %154 ]
  %161 = icmp ugt i8* %.0, %150
  br i1 %161, label %162, label %168

; <label>:162:                                    ; preds = %160
  %163 = getelementptr inbounds i8, i8* %.0, i64 -1
  %164 = load i8, i8* %163, align 1
  %165 = sext i8 %164 to i32
  %166 = icmp eq i32 %165, 13
  %167 = getelementptr inbounds i8, i8* %.0, i32 -1
  %spec.select1 = select i1 %166, i8* %167, i8* %.0
  br label %168

; <label>:168:                                    ; preds = %162, %160
  %.1 = phi i8* [ %.0, %160 ], [ %spec.select1, %162 ]
  %169 = call %struct.cookie* @cookie_new()
  %170 = call i8* @strdupdelim(i8* %132, i8* %.6.lcssa)
  %171 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 5
  store i8* %170, i8** %171, align 8
  %172 = call i8* @strdupdelim(i8* %150, i8* %.1)
  %173 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 6
  store i8* %172, i8** %173, align 8
  %174 = call i8* @strdupdelim(i8* %78, i8* %.3.lcssa)
  %175 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 2
  store i8* %174, i8** %175, align 8
  %176 = ptrtoint i8* %.4.lcssa to i64
  %177 = ptrtoint i8* %96 to i64
  %178 = sub i64 %176, %177
  %179 = icmp eq i64 %178, 4
  br i1 %179, label %180, label %185

; <label>:180:                                    ; preds = %168
  %181 = getelementptr [5 x i8], [5 x i8]* @.str.5.46, i32 0, i32 0
  %182 = call i32 @memcmp(i8* %96, i8* %181, i64 4) #14
  %183 = icmp ne i32 %182, 0
  %184 = xor i1 %183, true
  br label %185

; <label>:185:                                    ; preds = %180, %168
  %186 = phi i1 [ false, %168 ], [ %184, %180 ]
  %187 = zext i1 %186 to i32
  %188 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 3
  %189 = trunc i32 %187 to i8
  %190 = load i8, i8* %188, align 8
  %191 = and i8 %189, 1
  %192 = shl i8 %191, 1
  %193 = and i8 %190, -3
  %194 = or i8 %193, %192
  store i8 %194, i8* %188, align 8
  %195 = zext i8 %191 to i32
  %196 = ptrtoint i8* %.2.lcssa to i64
  %197 = ptrtoint i8* %60 to i64
  %198 = sub i64 %196, %197
  %199 = icmp eq i64 %198, 4
  br i1 %199, label %200, label %205

; <label>:200:                                    ; preds = %185
  %201 = getelementptr [5 x i8], [5 x i8]* @.str.5.46, i32 0, i32 0
  %202 = call i32 @memcmp(i8* %60, i8* %201, i64 4) #14
  %203 = icmp ne i32 %202, 0
  %204 = xor i1 %203, true
  br label %205

; <label>:205:                                    ; preds = %200, %185
  %206 = phi i1 [ false, %185 ], [ %204, %200 ]
  %207 = xor i1 %206, true
  %208 = zext i1 %207 to i32
  %209 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 3
  %210 = trunc i32 %208 to i8
  %211 = load i8, i8* %209, align 8
  %212 = and i8 %210, 1
  %213 = shl i8 %212, 2
  %214 = and i8 %211, -5
  %215 = or i8 %214, %213
  store i8 %215, i8* %209, align 8
  %216 = zext i8 %212 to i32
  %217 = load i8*, i8** %6, align 8
  %218 = call i32 @domain_port(i8* %.01.lcssa, i8* %217, i8** %6)
  %219 = icmp ne i32 %218, 0
  br i1 %219, label %220, label %222

; <label>:220:                                    ; preds = %205
  %221 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 1
  store i32 %218, i32* %221, align 8
  br label %222

; <label>:222:                                    ; preds = %220, %205
  %223 = load i8, i8* %.01.lcssa, align 1
  %224 = sext i8 %223 to i32
  %225 = icmp eq i32 %224, 46
  %226 = getelementptr inbounds i8, i8* %.01.lcssa, i32 1
  %spec.select2 = select i1 %225, i8* %226, i8* %.01.lcssa
  %227 = load i8*, i8** %6, align 8
  %228 = call i8* @strdupdelim(i8* %spec.select2, i8* %227)
  %229 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 0
  store i8* %228, i8** %229, align 8
  %230 = load i64, i64* @cookies_now, align 8
  %231 = sitofp i64 %230 to double
  %232 = fsub double %231, 1.000000e+00
  store double %232, double* %5, align 8
  store i8 0, i8* %.5.lcssa, align 1
  %233 = getelementptr [4 x i8], [4 x i8]* @.str.6.42, i32 0, i32 0
  %234 = call i32 (i8*, i8*, ...) @sscanf(i8* %114, i8* %233, double* %5) #8
  %235 = load double, double* %5, align 8
  %236 = fcmp oeq double %235, 0.000000e+00
  br i1 %236, label %250, label %237

; <label>:237:                                    ; preds = %222
  %238 = load double, double* %5, align 8
  %239 = load i64, i64* @cookies_now, align 8
  %240 = sitofp i64 %239 to double
  %241 = fcmp olt double %238, %240
  br i1 %241, label %251, label %242

; <label>:242:                                    ; preds = %237
  %243 = load double, double* %5, align 8
  %244 = fptosi double %243 to i64
  %245 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 4
  store i64 %244, i64* %245, align 8
  %246 = getelementptr inbounds %struct.cookie, %struct.cookie* %169, i32 0, i32 3
  %247 = load i8, i8* %246, align 8
  %248 = and i8 %247, -9
  %249 = or i8 %248, 8
  store i8 %249, i8* %246, align 8
  br label %250

; <label>:250:                                    ; preds = %222, %242
  call void @store_cookie(%struct.cookie_jar* %0, %struct.cookie* %169)
  br label %.backedge

; <label>:251:                                    ; preds = %237
  call void @delete_cookie(%struct.cookie* %169)
  br label %.backedge

._crit_edge.loopexit:                             ; preds = %.backedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %17
  %252 = load i8*, i8** %3, align 8
  call void @free(i8* %252) #8
  store i8* null, i8** %3, align 8
  %253 = call i32 @fclose(%struct._IO_FILE* %8)
  br label %254

; <label>:254:                                    ; preds = %._crit_edge, %10
  ret void
}

declare dso_local i64 @getline(i8**, i64*, %struct._IO_FILE*) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @domain_port(i8*, i8*, i8**) #0 {
  %4 = ptrtoint i8* %1 to i64
  %5 = ptrtoint i8* %0 to i64
  %6 = sub i64 %4, %5
  %7 = call i8* @memchr(i8* %0, i32 58, i64 %6) #14, !track !173
  %8 = icmp ne i8* %7, null
  br i1 %8, label %9, label %26

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds i8, i8* %7, i64 1
  call void @unroll_loop(i32 47)
  %11 = icmp ult i8* %10, %1
  br i1 %11, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %9
  br label %12

; <label>:12:                                     ; preds = %.lr.ph, %16
  %.012 = phi i8* [ %10, %.lr.ph ], [ %22, %16 ]
  %.021 = phi i32 [ 0, %.lr.ph ], [ %21, %16 ]
  %13 = load i8, i8* %.012, align 1
  %14 = sext i8 %13 to i32
  %15 = call zeroext i1 @c_isdigit(i32 %14)
  br i1 %15, label %16, label %..critedge_crit_edge4

; <label>:16:                                     ; preds = %12
  %17 = mul nsw i32 10, %.021
  %18 = load i8, i8* %.012, align 1
  %19 = sext i8 %18 to i32
  %20 = sub nsw i32 %19, 48
  %21 = add nsw i32 %17, %20
  %22 = getelementptr inbounds i8, i8* %.012, i32 1
  call void @unroll_loop(i32 47)
  %23 = icmp ult i8* %22, %1
  br i1 %23, label %12, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %16
  %split = phi i32 [ %21, %16 ]
  %split3 = phi i8* [ %22, %16 ]
  br label %.critedge

..critedge_crit_edge4:                            ; preds = %12
  %split5 = phi i32 [ %.021, %12 ]
  %split6 = phi i8* [ %.012, %12 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge4, %..critedge_crit_edge, %9
  %.02.lcssa = phi i32 [ %split5, %..critedge_crit_edge4 ], [ %split, %..critedge_crit_edge ], [ 0, %9 ]
  %.01.lcssa = phi i8* [ %split6, %..critedge_crit_edge4 ], [ %split3, %..critedge_crit_edge ], [ %10, %9 ]
  %24 = icmp ult i8* %.01.lcssa, %1
  br i1 %24, label %26, label %25

; <label>:25:                                     ; preds = %.critedge
  store i8* %7, i8** %2, align 8
  br label %26

; <label>:26:                                     ; preds = %.critedge, %3, %25
  %.0 = phi i32 [ %.02.lcssa, %25 ], [ 0, %3 ], [ 0, %.critedge ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i8* @memchr(i8*, i32, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @cookie_jar_save(%struct.cookie_jar*, i8*) #0 {
  %3 = alloca %struct.hash_table_iterator, align 8, !track !174
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %5 = load i8, i8* %4, align 1
  %6 = trunc i8 %5 to i1
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %2
  %8 = getelementptr [23 x i8], [23 x i8]* @.str.7.47, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %8, i8* %1)
  br label %9

; <label>:9:                                      ; preds = %2, %7
  %10 = call i64 @time(i64* null) #8
  store i64 %10, i64* @cookies_now, align 8
  %11 = getelementptr [2 x i8], [2 x i8]* @.str.8.48, i32 0, i32 0
  %12 = call %struct._IO_FILE* @fopen(i8* %1, i8* %11), !track !175
  %13 = icmp ne %struct._IO_FILE* %12, null
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %9
  %15 = getelementptr [33 x i8], [33 x i8]* @.str.4.45, i32 0, i32 0
  %16 = call i8* @gettext(i8* %15) #8
  %17 = call i8* @quote(i8* %1)
  %18 = call i32* @__errno_location() #15
  %19 = load i32, i32* %18, align 4
  %20 = call i8* @strerror(i32 %19) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %16, i8* %17, i8* %20)
  br label %136

; <label>:21:                                     ; preds = %9
  %22 = getelementptr [21 x i8], [21 x i8]* @.str.9.49, i32 0, i32 0
  %23 = call i32 @fputs(i8* %22, %struct._IO_FILE* %12)
  %24 = load i64, i64* @cookies_now, align 8
  %25 = call i8* @datetime_str(i64 %24)
  %26 = getelementptr [28 x i8], [28 x i8]* @.str.10.50, i32 0, i32 0
  %27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* %26, i8* %25)
  %28 = getelementptr [27 x i8], [27 x i8]* @.str.11.51, i32 0, i32 0
  %29 = call i32 @fputs(i8* %28, %struct._IO_FILE* %12)
  %30 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %31 = load %struct.hash_table*, %struct.hash_table** %30, align 8
  call void @hash_table_iterate(%struct.hash_table* %31, %struct.hash_table_iterator* %3)
  %32 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %3)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %.lr.ph4.preheader, label %._crit_edge5

.lr.ph4.preheader:                                ; preds = %21
  br label %.lr.ph4

.lr.ph4:                                          ; preds = %.lr.ph4.preheader, %._crit_edge
  call void @unroll_loop(i32 48)
  %34 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %3, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %3, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.cookie*
  %39 = icmp ne %struct.cookie* %38, null
  br i1 %39, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %105
  %.01 = phi %struct.cookie* [ %107, %105 ], [ %38, %.lr.ph.preheader ]
  call void @unroll_loop(i32 49)
  %40 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 3
  %41 = load i8, i8* %40, align 8
  %42 = lshr i8 %41, 3
  %43 = and i8 %42, 1
  %44 = zext i8 %43 to i32
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %50, label %46

; <label>:46:                                     ; preds = %.lr.ph
  %47 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 132
  %48 = load i8, i8* %47, align 8
  %49 = trunc i8 %48 to i1
  br i1 %49, label %50, label %105

; <label>:50:                                     ; preds = %46, %.lr.ph
  %51 = call zeroext i1 @cookie_expired_p(%struct.cookie* %.01)
  br i1 %51, label %105, label %52

; <label>:52:                                     ; preds = %50
  %53 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 3
  %54 = load i8, i8* %53, align 8
  %55 = lshr i8 %54, 2
  %56 = and i8 %55, 1
  %57 = zext i8 %56 to i32
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %61, label %59

; <label>:59:                                     ; preds = %52
  %60 = call i32 @fputc(i32 46, %struct._IO_FILE* %12)
  br label %61

; <label>:61:                                     ; preds = %59, %52
  %62 = call i32 @fputs(i8* %35, %struct._IO_FILE* %12)
  %63 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = icmp ne i32 %64, -1
  br i1 %65, label %66, label %71

; <label>:66:                                     ; preds = %61
  %67 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 1
  %68 = load i32, i32* %67, align 8
  %69 = getelementptr [4 x i8], [4 x i8]* @.str.12.52, i32 0, i32 0
  %70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* %69, i32 %68)
  br label %71

; <label>:71:                                     ; preds = %66, %61
  %72 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 3
  %73 = load i8, i8* %72, align 8
  %74 = lshr i8 %73, 2
  %75 = and i8 %74, 1
  %76 = zext i8 %75 to i32
  %77 = icmp ne i32 %76, 0
  %78 = zext i1 %77 to i64
  %79 = getelementptr [6 x i8], [6 x i8]* @.str.14.53, i32 0, i32 0
  %80 = getelementptr [5 x i8], [5 x i8]* @.str.5.46, i32 0, i32 0
  %81 = select i1 %77, i8* %79, i8* %80
  %82 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 2
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 3
  %85 = load i8, i8* %84, align 8
  %86 = lshr i8 %85, 1
  %87 = and i8 %86, 1
  %88 = zext i8 %87 to i32
  %89 = icmp ne i32 %88, 0
  %90 = zext i1 %89 to i64
  %91 = getelementptr [5 x i8], [5 x i8]* @.str.5.46, i32 0, i32 0
  %92 = getelementptr [6 x i8], [6 x i8]* @.str.14.53, i32 0, i32 0
  %93 = select i1 %89, i8* %91, i8* %92
  %94 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 4
  %95 = load i64, i64* %94, align 8
  %96 = sitofp i64 %95 to double
  %97 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 5
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 6
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr [22 x i8], [22 x i8]* @.str.13.54, i32 0, i32 0
  %102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* %101, i8* %81, i8* %83, i8* %93, double %96, i8* %98, i8* %100)
  %103 = call i32 @ferror(%struct._IO_FILE* %12) #8
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %._crit_edge5.loopexit, label %105

; <label>:105:                                    ; preds = %71, %50, %46
  %106 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 7
  %107 = load %struct.cookie*, %struct.cookie** %106, align 8
  %108 = icmp ne %struct.cookie* %107, null
  br i1 %108, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %105
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph4
  %109 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %3)
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %.lr.ph4, label %._crit_edge5.loopexit1

._crit_edge5.loopexit:                            ; preds = %71
  br label %._crit_edge5

._crit_edge5.loopexit1:                           ; preds = %._crit_edge
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %._crit_edge5.loopexit1, %._crit_edge5.loopexit, %21
  %111 = call i32 @ferror(%struct._IO_FILE* %12) #8
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %120

; <label>:113:                                    ; preds = %._crit_edge5
  %114 = getelementptr [25 x i8], [25 x i8]* @.str.15.55, i32 0, i32 0
  %115 = call i8* @gettext(i8* %114) #8
  %116 = call i8* @quote(i8* %1)
  %117 = call i32* @__errno_location() #15
  %118 = load i32, i32* %117, align 4
  %119 = call i8* @strerror(i32 %118) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %115, i8* %116, i8* %119)
  br label %120

; <label>:120:                                    ; preds = %113, %._crit_edge5
  %121 = call i32 @fclose(%struct._IO_FILE* %12)
  %122 = icmp slt i32 %121, 0
  br i1 %122, label %123, label %130

; <label>:123:                                    ; preds = %120
  %124 = getelementptr [22 x i8], [22 x i8]* @.str.16.56, i32 0, i32 0
  %125 = call i8* @gettext(i8* %124) #8
  %126 = call i8* @quote(i8* %1)
  %127 = call i32* @__errno_location() #15
  %128 = load i32, i32* %127, align 4
  %129 = call i8* @strerror(i32 %128) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %125, i8* %126, i8* %129)
  br label %130

; <label>:130:                                    ; preds = %120, %123
  %131 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %132 = load i8, i8* %131, align 1
  %133 = trunc i8 %132 to i1
  br i1 %133, label %134, label %136

; <label>:134:                                    ; preds = %130
  %135 = getelementptr [22 x i8], [22 x i8]* @.str.17.57, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %135)
  br label %136

; <label>:136:                                    ; preds = %130, %134, %14
  ret void
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @ferror(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cookie_jar_delete(%struct.cookie_jar*) #0 {
  %2 = alloca %struct.hash_table_iterator, align 8, !track !176
  %3 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %4 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  call void @hash_table_iterate(%struct.hash_table* %4, %struct.hash_table_iterator* %2)
  %5 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.lr.ph3.preheader, label %._crit_edge4

.lr.ph3.preheader:                                ; preds = %1
  br label %.lr.ph3

.lr.ph3:                                          ; preds = %.lr.ph3.preheader, %._crit_edge
  call void @unroll_loop(i32 50)
  %7 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.cookie*
  %10 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  call void @free(i8* %11) #8
  %12 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  store i8* null, i8** %12, align 8
  %13 = icmp ne %struct.cookie* %9, null
  br i1 %13, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi %struct.cookie* [ %15, %.lr.ph ], [ %9, %.lr.ph.preheader ]
  call void @unroll_loop(i32 51)
  %14 = getelementptr inbounds %struct.cookie, %struct.cookie* %.01, i32 0, i32 7
  %15 = load %struct.cookie*, %struct.cookie** %14, align 8
  call void @delete_cookie(%struct.cookie* %.01)
  %16 = icmp ne %struct.cookie* %15, null
  br i1 %16, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph3
  %17 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %.lr.ph3, label %._crit_edge4.loopexit

._crit_edge4.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %._crit_edge4.loopexit, %1
  %19 = getelementptr inbounds %struct.cookie_jar, %struct.cookie_jar* %0, i32 0, i32 0
  %20 = load %struct.hash_table*, %struct.hash_table** %19, align 8
  call void @hash_table_destroy(%struct.hash_table* %20)
  %21 = bitcast %struct.cookie_jar* %0 to i8*
  call void @free(i8* %21) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_loop(%struct.url*, i8**, i32*, %struct.url*, i1 zeroext, i1 zeroext) #0 {
  %7 = alloca %struct.ccon, align 8, !track !177
  %8 = alloca %struct.fileinfo*, align 8, !track !178
  %9 = alloca %struct.stat, align 8
  %10 = zext i1 %4 to i8
  %11 = zext i1 %5 to i8
  store i32 0, i32* %2, align 4
  %12 = bitcast %struct.ccon* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 56, i1 false)
  %13 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 2
  store i32 -1, i32* %13, align 8
  %14 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 0
  store i32 1, i32* %14, align 8
  %15 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 4
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 6
  store i8* null, i8** %16, align 8
  %17 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 8
  store %struct.url* %3, %struct.url** %17, align 8
  %18 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = load i8, i8* %19, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %82, label %22

; <label>:22:                                     ; preds = %6
  %23 = trunc i8 %10 to i1
  br i1 %23, label %82, label %24

; <label>:24:                                     ; preds = %22
  %25 = call i32 @ftp_get_listing(%struct.url* %0, %struct.ccon* %7, %struct.fileinfo** %8)
  %26 = icmp eq i32 %25, 25
  br i1 %26, label %27, label %114

; <label>:27:                                     ; preds = %24
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 104
  %29 = load i8, i8* %28, align 1
  %30 = trunc i8 %29 to i1
  br i1 %30, label %31, label %80

; <label>:31:                                     ; preds = %27
  %32 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %33 = load i8, i8* %32, align 8
  %34 = trunc i8 %33 to i1
  br i1 %34, label %80, label %35

; <label>:35:                                     ; preds = %31
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ne i8* %37, null
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %35
  %40 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %41 = load i8*, i8** %40, align 8
  %42 = call noalias i8* @xstrdup(i8* %41)
  br label %53

; <label>:43:                                     ; preds = %35
  %44 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 7
  %45 = load i8*, i8** %44, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %47, label %51

; <label>:47:                                     ; preds = %43
  %48 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 7
  %49 = load i8*, i8** %48, align 8
  %50 = call noalias i8* @xstrdup(i8* %49)
  br label %53

; <label>:51:                                     ; preds = %43
  %52 = call i8* @url_file_name(%struct.url* %0, i8* null)
  br label %53

; <label>:53:                                     ; preds = %47, %51, %39
  %54 = phi i8* [ %42, %39 ], [ %50, %47 ], [ %52, %51 ]
  %55 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %56 = call i32 @ftp_index(i8* %54, %struct.url* %0, %struct.fileinfo* %55)
  %57 = icmp eq i32 %56, 7
  br i1 %57, label %58, label %79

; <label>:58:                                     ; preds = %53
  %59 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %79

; <label>:62:                                     ; preds = %58
  %63 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %64 = load i8*, i8** %63, align 8
  %65 = icmp ne i8* %64, null
  br i1 %65, label %75, label %66

; <label>:66:                                     ; preds = %62
  %67 = call i32 @stat(i8* %54, %struct.stat* %9) #8
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 8
  %70 = load i64, i64* %69, align 8
  %.02 = select i1 %68, i64 %70, i64 -1
  %71 = getelementptr [35 x i8], [35 x i8]* @.str.58, i32 0, i32 0
  %72 = call i8* @gettext(i8* %71) #8
  %73 = call i8* @quote(i8* %54)
  %74 = call i8* @number_to_static_string(i64 %.02)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %72, i8* %73, i8* %74)
  br label %79

; <label>:75:                                     ; preds = %62
  %76 = getelementptr [30 x i8], [30 x i8]* @.str.1.59, i32 0, i32 0
  %77 = call i8* @gettext(i8* %76) #8
  %78 = call i8* @quote(i8* %54)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %77, i8* %78)
  br label %79

; <label>:79:                                     ; preds = %53, %58, %75, %66
  call void @free(i8* %54) #8
  br label %80

; <label>:80:                                     ; preds = %79, %31, %27
  %.03 = phi i32 [ %25, %31 ], [ %56, %79 ], [ %25, %27 ]
  %81 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  call void @freefileinfo(%struct.fileinfo* %81)
  br label %114

; <label>:82:                                     ; preds = %22, %6
  %83 = trunc i8 %11 to i1
  br i1 %83, label %84, label %95

; <label>:84:                                     ; preds = %82
  %85 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %86 = load i8*, i8** %85, align 8
  %87 = call i8* @strrchr(i8* %86, i32 47) #14, !track !179
  %88 = icmp ne i8* %87, null
  br i1 %88, label %92, label %89

; <label>:89:                                     ; preds = %84
  %90 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %91 = load i8*, i8** %90, align 8
  br label %92

; <label>:92:                                     ; preds = %89, %84
  %.0 = phi i8* [ %87, %84 ], [ %91, %89 ]
  %93 = call zeroext i1 @has_wildcards_p(i8* %.0)
  %94 = zext i1 %93 to i8
  br label %95

; <label>:95:                                     ; preds = %92, %82
  %.01 = phi i8 [ %94, %92 ], [ 0, %82 ]
  %96 = trunc i8 %.01 to i1
  br i1 %96, label %107, label %97

; <label>:97:                                     ; preds = %95
  %98 = trunc i8 %10 to i1
  br i1 %98, label %107, label %99

; <label>:99:                                     ; preds = %97
  %100 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %101 = load i8, i8* %100, align 4
  %102 = trunc i8 %101 to i1
  br i1 %102, label %107, label %103

; <label>:103:                                    ; preds = %99
  %104 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 143
  %105 = load i8, i8* %104, align 1
  %106 = trunc i8 %105 to i1
  br i1 %106, label %107, label %112

; <label>:107:                                    ; preds = %103, %99, %97, %95
  %108 = trunc i8 %.01 to i1
  %109 = zext i1 %108 to i64
  %110 = select i1 %108, i32 0, i32 2
  %111 = call i32 @ftp_retrieve_glob(%struct.url* %0, %struct.ccon* %7, i32 %110)
  br label %114

; <label>:112:                                    ; preds = %103
  %113 = call i32 @ftp_loop_internal(%struct.url* %0, %struct.fileinfo* null, %struct.ccon* %7, i8** %1, i1 zeroext false)
  br label %114

; <label>:114:                                    ; preds = %107, %112, %24, %80
  %.3 = phi i32 [ %.03, %80 ], [ %25, %24 ], [ %111, %107 ], [ %113, %112 ]
  %115 = icmp eq i32 %.3, 7
  %spec.select = select i1 %115, i32 25, i32 %.3
  %116 = icmp eq i32 %spec.select, 25
  br i1 %116, label %117, label %120

; <label>:117:                                    ; preds = %114
  %118 = load i32, i32* %2, align 4
  %119 = or i32 %118, 2
  store i32 %119, i32* %2, align 4
  br label %120

; <label>:120:                                    ; preds = %117, %114
  %121 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 2
  %122 = load i32, i32* %121, align 8
  %123 = icmp ne i32 %122, -1
  br i1 %123, label %124, label %127

; <label>:124:                                    ; preds = %120
  %125 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 2
  %126 = load i32, i32* %125, align 8
  call void @fd_close(i32 %126)
  br label %127

; <label>:127:                                    ; preds = %120, %124
  %128 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 6
  %129 = load i8*, i8** %128, align 8
  call void @free(i8* %129) #8
  %130 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 6
  store i8* null, i8** %130, align 8
  %131 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 7
  %132 = load i8*, i8** %131, align 8
  call void @free(i8* %132) #8
  %133 = getelementptr inbounds %struct.ccon, %struct.ccon* %7, i32 0, i32 7
  store i8* null, i8** %133, align 8
  ret i32 %spec.select
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ftp_get_listing(%struct.url*, %struct.ccon*, %struct.fileinfo**) #0 {
  %4 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 7
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, -2
  store i32 %8, i32* %6, align 8
  %9 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, 24
  store i32 %11, i32* %9, align 4
  %12 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, -5
  store i32 %14, i32* %12, align 4
  %15 = call i8* @url_file_name(%struct.url* %0, i8* null)
  %16 = getelementptr [9 x i8], [9 x i8]* @.str.2.104, i32 0, i32 0
  %17 = call i8* @file_merge(i8* %15, i8* %16)
  call void @free(i8* %15) #8
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %19 = load i8, i8* %18, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %21, label %25

; <label>:21:                                     ; preds = %3
  %22 = getelementptr [31 x i8], [31 x i8]* @.str.3.105, i32 0, i32 0
  %23 = call i8* @gettext(i8* %22) #8
  %24 = call i8* @quote(i8* %17)
  call void (i8*, ...) @debug_logprintf(i8* %23, i8* %24)
  br label %25

; <label>:25:                                     ; preds = %3, %21
  %26 = call noalias i8* @xstrdup(i8* %17)
  %27 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 7
  store i8* %26, i8** %27, align 8
  call void @free(i8* %17) #8
  %28 = call i32 @ftp_loop_internal(%struct.url* %0, %struct.fileinfo* null, %struct.ccon* %1, i8** null, i1 zeroext false)
  %29 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 7
  %30 = load i8*, i8** %29, align 8
  %31 = call noalias i8* @xstrdup(i8* %30)
  %32 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 7
  %33 = load i8*, i8** %32, align 8
  call void @free(i8* %33) #8
  %34 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 7
  store i8* null, i8** %34, align 8
  %35 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 7
  store i8* %5, i8** %35, align 8
  %36 = icmp eq i32 %28, 25
  br i1 %36, label %37, label %56

; <label>:37:                                     ; preds = %25
  %38 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 4
  %39 = load i32, i32* %38, align 8
  %40 = call %struct.fileinfo* @ftp_parse_ls(i8* %31, i32 %39)
  store %struct.fileinfo* %40, %struct.fileinfo** %2, align 8
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 103
  %42 = load i8, i8* %41, align 2
  %43 = trunc i8 %42 to i1
  br i1 %43, label %44, label %57

; <label>:44:                                     ; preds = %37
  %45 = call i32 @unlink(i8* %31) #8
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %52

; <label>:47:                                     ; preds = %44
  %48 = call i32* @__errno_location() #15
  %49 = load i32, i32* %48, align 4
  %50 = call i8* @strerror(i32 %49) #8
  %51 = getelementptr [12 x i8], [12 x i8]* @.str.4.72, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %51, i8* %50)
  br label %57

; <label>:52:                                     ; preds = %44
  %53 = getelementptr [13 x i8], [13 x i8]* @.str.5.106, i32 0, i32 0
  %54 = call i8* @gettext(i8* %53) #8
  %55 = call i8* @quote(i8* %31)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %54, i8* %55)
  br label %57

; <label>:56:                                     ; preds = %25
  store %struct.fileinfo* null, %struct.fileinfo** %2, align 8
  br label %57

; <label>:57:                                     ; preds = %56, %47, %52, %37
  call void @free(i8* %31) #8
  %58 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = and i32 %59, -9
  store i32 %60, i32* %58, align 4
  ret i32 %28
}

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @freefileinfo(%struct.fileinfo*) #0 {
  %2 = icmp ne %struct.fileinfo* %0, null
  br i1 %2, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %15
  %.01 = phi %struct.fileinfo* [ %4, %15 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 53)
  %3 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01, i32 0, i32 8
  %4 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01, i32 0, i32 1
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01, i32 0, i32 6
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %.lr.ph
  %12 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01, i32 0, i32 6
  %13 = load i8*, i8** %12, align 8
  call void @free(i8* %13) #8
  %14 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01, i32 0, i32 6
  store i8* null, i8** %14, align 8
  br label %15

; <label>:15:                                     ; preds = %.lr.ph, %11
  %16 = bitcast %struct.fileinfo* %.01 to i8*
  call void @free(i8* %16) #8
  %17 = icmp ne %struct.fileinfo* %4, null
  br i1 %17, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %15
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ftp_retrieve_glob(%struct.url*, %struct.ccon*, i32) #0 {
  %4 = alloca %struct.fileinfo*, align 8, !track !180
  %5 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 16
  store i32 %7, i32* %5, align 4
  %8 = call i32 @ftp_get_listing(%struct.url* %0, %struct.ccon* %1, %struct.fileinfo** %4)
  %9 = icmp ne i32 %8, 25
  br i1 %9, label %147, label %10

; <label>:10:                                     ; preds = %3
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %12 = load i8**, i8*** %11, align 8
  %13 = icmp ne i8** %12, null
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %10
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  %16 = load i8**, i8*** %15, align 8
  %17 = icmp ne i8** %16, null
  br i1 %17, label %18, label %._crit_edge16

; <label>:18:                                     ; preds = %14, %10
  %19 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %20 = icmp ne %struct.fileinfo* %19, null
  br i1 %20, label %.lr.ph15.preheader, label %._crit_edge16

.lr.ph15.preheader:                               ; preds = %18
  br label %.lr.ph15

.lr.ph15:                                         ; preds = %.lr.ph15.preheader, %38
  %.0313 = phi %struct.fileinfo* [ %.14, %38 ], [ %19, %.lr.ph15.preheader ]
  call void @unroll_loop(i32 54)
  %21 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0313, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp ne i32 %22, 1
  br i1 %23, label %24, label %35

; <label>:24:                                     ; preds = %.lr.ph15
  %25 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0313, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = call zeroext i1 @acceptable(i8* %26)
  br i1 %27, label %35, label %28

; <label>:28:                                     ; preds = %24
  %29 = getelementptr [15 x i8], [15 x i8]* @.str.6.82, i32 0, i32 0
  %30 = call i8* @gettext(i8* %29) #8
  %31 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0313, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = call i8* @quote(i8* %32)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %30, i8* %33)
  %34 = call %struct.fileinfo* @delelement(%struct.fileinfo* %.0313, %struct.fileinfo** %4)
  br label %38

; <label>:35:                                     ; preds = %24, %.lr.ph15
  %36 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0313, i32 0, i32 8
  %37 = load %struct.fileinfo*, %struct.fileinfo** %36, align 8
  br label %38

; <label>:38:                                     ; preds = %35, %28
  %.14 = phi %struct.fileinfo* [ %37, %35 ], [ %34, %28 ]
  %39 = icmp ne %struct.fileinfo* %.14, null
  br i1 %39, label %.lr.ph15, label %._crit_edge16.loopexit

._crit_edge16.loopexit:                           ; preds = %38
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %18, %14
  %40 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %41 = icmp ne %struct.fileinfo* %40, null
  br i1 %41, label %.lr.ph11.preheader, label %._crit_edge12

.lr.ph11.preheader:                               ; preds = %._crit_edge16
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %57
  %.29 = phi %struct.fileinfo* [ %.3, %57 ], [ %40, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 55)
  %42 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.29, i32 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = call zeroext i1 @has_insecure_name_p(i8* %43)
  br i1 %44, label %47, label %45

; <label>:45:                                     ; preds = %.lr.ph11
  %46 = call zeroext i1 @is_invalid_entry(%struct.fileinfo* %.29)
  br i1 %46, label %47, label %54

; <label>:47:                                     ; preds = %45, %.lr.ph11
  %48 = getelementptr [15 x i8], [15 x i8]* @.str.6.82, i32 0, i32 0
  %49 = call i8* @gettext(i8* %48) #8
  %50 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.29, i32 0, i32 1
  %51 = load i8*, i8** %50, align 8
  %52 = call i8* @quote(i8* %51)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %49, i8* %52)
  %53 = call %struct.fileinfo* @delelement(%struct.fileinfo* %.29, %struct.fileinfo** %4)
  br label %57

; <label>:54:                                     ; preds = %45
  %55 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.29, i32 0, i32 8
  %56 = load %struct.fileinfo*, %struct.fileinfo** %55, align 8
  br label %57

; <label>:57:                                     ; preds = %54, %47
  %.3 = phi %struct.fileinfo* [ %53, %47 ], [ %56, %54 ]
  %58 = icmp ne %struct.fileinfo* %.3, null
  br i1 %58, label %.lr.ph11, label %._crit_edge12.loopexit

._crit_edge12.loopexit:                           ; preds = %57
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %._crit_edge16
  %59 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %60 = load i8*, i8** %59, align 8
  %61 = load i8, i8* %60, align 1
  %62 = icmp ne i8 %61, 0
  br i1 %62, label %63, label %._crit_edge

; <label>:63:                                     ; preds = %._crit_edge12
  switch i32 %2, label %._crit_edge [
    i32 0, label %64
    i32 2, label %98
  ]

; <label>:64:                                     ; preds = %63
  %65 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %66 = load i8, i8* %65, align 8
  %67 = trunc i8 %66 to i1
  %68 = zext i1 %67 to i64
  %69 = select i1 %67, i32 (i8*, i8*, i32)* @fnmatch_nocase, i32 (i8*, i8*, i32)* @fnmatch
  %70 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %71 = icmp ne %struct.fileinfo* %70, null
  br i1 %71, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %93
  %.46 = phi %struct.fileinfo* [ %.5, %93 ], [ %70, %.lr.ph.preheader ]
  call void @unroll_loop(i32 56)
  %72 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.46, i32 0, i32 1
  %75 = load i8*, i8** %74, align 8
  %76 = call i32 %69(i8* %73, i8* %75, i32 0)
  switch i32 %76, label %90 [
    i32 -1, label %77
    i32 1, label %88
  ]

; <label>:77:                                     ; preds = %.lr.ph
  %.lcssa = phi i32 [ %76, %.lr.ph ]
  %.4.lcssa5 = phi %struct.fileinfo* [ %.46, %.lr.ph ]
  %78 = getelementptr [34 x i8], [34 x i8]* @.str.7.83, i32 0, i32 0
  %79 = call i8* @gettext(i8* %78) #8
  %80 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.4.lcssa5, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  %84 = call i8* @quotearg_style(i32 7, i8* %83)
  %85 = call i32* @__errno_location() #15
  %86 = load i32, i32* %85, align 4
  %87 = call i8* @strerror(i32 %86) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %79, i8* %81, i8* %84, i8* %87)
  br label %.loopexit

; <label>:88:                                     ; preds = %.lr.ph
  %89 = call %struct.fileinfo* @delelement(%struct.fileinfo* %.46, %struct.fileinfo** %4)
  br label %93

; <label>:90:                                     ; preds = %.lr.ph
  %91 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.46, i32 0, i32 8
  %92 = load %struct.fileinfo*, %struct.fileinfo** %91, align 8
  br label %93

; <label>:93:                                     ; preds = %90, %88
  %.5 = phi %struct.fileinfo* [ %89, %88 ], [ %92, %90 ]
  %94 = icmp ne %struct.fileinfo* %.5, null
  br i1 %94, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %93
  %.1.ph = phi i32 [ %76, %93 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %64, %77
  %.1 = phi i32 [ %.lcssa, %77 ], [ 0, %64 ], [ %.1.ph, %.loopexit.loopexit ]
  %95 = icmp eq i32 %.1, -1
  br i1 %95, label %96, label %._crit_edge

; <label>:96:                                     ; preds = %.loopexit
  %97 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  call void @freefileinfo(%struct.fileinfo* %97)
  br label %147

; <label>:98:                                     ; preds = %63
  %99 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %100 = load i8, i8* %99, align 8
  %101 = trunc i8 %100 to i1
  %102 = zext i1 %101 to i64
  %103 = select i1 %101, i32 (i8*, i8*)* @strcasecmp, i32 (i8*, i8*)* @strcmp
  %104 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %105 = icmp ne %struct.fileinfo* %104, null
  br i1 %105, label %.lr.ph8.preheader, label %._crit_edge

.lr.ph8.preheader:                                ; preds = %98
  br label %.lr.ph8

.lr.ph8:                                          ; preds = %.lr.ph8.preheader, %117
  %.67 = phi %struct.fileinfo* [ %.7, %117 ], [ %104, %.lr.ph8.preheader ]
  call void @unroll_loop(i32 57)
  %106 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.67, i32 0, i32 1
  %109 = load i8*, i8** %108, align 8
  %110 = call i32 %103(i8* %107, i8* %109)
  %111 = icmp ne i32 0, %110
  br i1 %111, label %112, label %114

; <label>:112:                                    ; preds = %.lr.ph8
  %113 = call %struct.fileinfo* @delelement(%struct.fileinfo* %.67, %struct.fileinfo** %4)
  br label %117

; <label>:114:                                    ; preds = %.lr.ph8
  %115 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.67, i32 0, i32 8
  %116 = load %struct.fileinfo*, %struct.fileinfo** %115, align 8
  br label %117

; <label>:117:                                    ; preds = %114, %112
  %.7 = phi %struct.fileinfo* [ %113, %112 ], [ %116, %114 ]
  %118 = icmp ne %struct.fileinfo* %.7, null
  br i1 %118, label %.lr.ph8, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %117
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.loopexit, %98, %63, %._crit_edge12
  %119 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %120 = icmp ne %struct.fileinfo* %119, null
  br i1 %120, label %121, label %124

; <label>:121:                                    ; preds = %._crit_edge
  %122 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %123 = call i32 @ftp_retrieve_list(%struct.url* %0, %struct.fileinfo* %122, %struct.ccon* %1)
  br label %136

; <label>:124:                                    ; preds = %._crit_edge
  switch i32 %2, label %136 [
    i32 0, label %125
    i32 2, label %131
  ]

; <label>:125:                                    ; preds = %124
  %126 = getelementptr [27 x i8], [27 x i8]* @.str.8.84, i32 0, i32 0
  %127 = call i8* @gettext(i8* %126) #8
  %128 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %129 = load i8*, i8** %128, align 8
  %130 = call i8* @quote(i8* %129)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %127, i8* %130)
  br label %136

; <label>:131:                                    ; preds = %124
  %132 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = or i32 %133, 1
  store i32 %134, i32* %132, align 8
  %135 = call i32 @ftp_loop_internal(%struct.url* %0, %struct.fileinfo* null, %struct.ccon* %1, i8** null, i1 zeroext false)
  br label %147

; <label>:136:                                    ; preds = %125, %124, %121
  %.02 = phi i32 [ %123, %121 ], [ %8, %124 ], [ %8, %125 ]
  %137 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  call void @freefileinfo(%struct.fileinfo* %137)
  %138 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %139 = load i64, i64* %138, align 8
  %140 = icmp ne i64 %139, 0
  br i1 %140, label %141, label %146

; <label>:141:                                    ; preds = %136
  %142 = load i64, i64* @total_downloaded_bytes, align 8
  %143 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %144 = load i64, i64* %143, align 8
  %145 = icmp sgt i64 %142, %144
  br i1 %145, label %147, label %146

; <label>:146:                                    ; preds = %141, %136
  br label %147

; <label>:147:                                    ; preds = %141, %3, %146, %131, %96
  %.0 = phi i32 [ 40, %96 ], [ %.02, %146 ], [ %135, %131 ], [ %8, %3 ], [ 43, %141 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ftp_loop_internal(%struct.url*, %struct.fileinfo*, %struct.ccon*, i8**, i1 zeroext) #0 {
  %6 = alloca i64, align 8
  %7 = alloca %struct.stat, align 8
  %8 = alloca i64, align 8
  %9 = alloca [256 x i8], align 16
  %10 = zext i1 %4 to i8
  store i64 0, i64* %6, align 8
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %12 = load i8*, i8** %11, align 8
  %13 = icmp ne i8* %12, null
  %14 = zext i1 %13 to i8
  store i64 0, i64* %8, align 8
  %15 = icmp eq %struct.fileinfo* %1, null
  br i1 %15, label %16, label %23

; <label>:16:                                     ; preds = %5
  %17 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %22 = load i8*, i8** %21, align 8
  br label %38

; <label>:23:                                     ; preds = %5, %16
  %24 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %25 = load i8*, i8** %24, align 8
  call void @free(i8* %25) #8
  %26 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  store i8* null, i8** %26, align 8
  %27 = call i8* @url_file_name(%struct.url* %0, i8* null)
  %28 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  store i8* %27, i8** %28, align 8
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %35, label %32

; <label>:32:                                     ; preds = %23
  %33 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %34 = load i8*, i8** %33, align 8
  br label %38

; <label>:35:                                     ; preds = %23
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %37 = load i8*, i8** %36, align 8
  br label %38

; <label>:38:                                     ; preds = %32, %35, %20
  %.18 = phi i8* [ %22, %20 ], [ %37, %35 ], [ %34, %32 ]
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %40 = load i8, i8* %39, align 2
  %41 = trunc i8 %40 to i1
  br i1 %41, label %42, label %66

; <label>:42:                                     ; preds = %38
  %43 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %44 = load i8*, i8** %43, align 8
  %45 = icmp ne i8* %44, null
  br i1 %45, label %66, label %46

; <label>:46:                                     ; preds = %42
  %47 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %48 = load i8*, i8** %47, align 8
  %49 = call zeroext i1 @file_exists_p(i8* %48)
  br i1 %49, label %50, label %66

; <label>:50:                                     ; preds = %46
  %51 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %52, 8
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %60

; <label>:55:                                     ; preds = %50
  %56 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = and i32 %57, 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %66

; <label>:60:                                     ; preds = %55, %50
  %61 = getelementptr [40 x i8], [40 x i8]* @.str.29.60, i32 0, i32 0
  %62 = call i8* @gettext(i8* %61) #8
  %63 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %64 = load i8*, i8** %63, align 8
  %65 = call i8* @quote(i8* %64)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %62, i8* %65)
  br label %440

; <label>:66:                                     ; preds = %55, %46, %42, %38
  %67 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @remove_link(i8* %68)
  %70 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = and i32 %71, 1
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %76

; <label>:74:                                     ; preds = %66
  %75 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  store i32 1, i32* %75, align 8
  br label %76

; <label>:76:                                     ; preds = %74, %66
  %77 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, 16
  %80 = icmp ne i32 %79, 0
  %81 = zext i1 %80 to i64
  %82 = select i1 %80, i32 1, i32 0
  br label %83

; <label>:83:                                     ; preds = %415, %76
  %.29 = phi i8* [ %.18, %76 ], [ %.4, %415 ]
  %.06 = phi i32 [ 0, %76 ], [ %84, %415 ]
  %.02 = phi %struct._IO_FILE* [ null, %76 ], [ %.13, %415 ]
  %.01 = phi %struct.ip_address* [ null, %76 ], [ %.2, %415 ]
  call void @unroll_loop(i32 58)
  %84 = add nuw nsw i32 %.06, 1
  call void @sleep_between_retrievals(i32 %84)
  %85 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = and i32 %86, 1
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %103

; <label>:89:                                     ; preds = %83
  %90 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  store i32 0, i32* %90, align 4
  %91 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = or i32 %92, 20
  store i32 %93, i32* %91, align 4
  %94 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %95 = load i32, i32* %94, align 8
  %96 = icmp ne i32 %95, -1
  %97 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  br i1 %96, label %99, label %101

; <label>:99:                                     ; preds = %89
  %100 = and i32 %98, -4
  store i32 %100, i32* %97, align 4
  br label %124

; <label>:101:                                    ; preds = %89
  %102 = or i32 %98, 3
  store i32 %102, i32* %97, align 4
  br label %124

; <label>:103:                                    ; preds = %83
  %104 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %105 = load i32, i32* %104, align 8
  %106 = icmp ne i32 %105, -1
  %107 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

; <label>:109:                                    ; preds = %103
  %110 = and i32 %108, -2
  store i32 %110, i32* %107, align 4
  br label %113

; <label>:111:                                    ; preds = %103
  %112 = or i32 %108, 1
  store i32 %112, i32* %107, align 4
  br label %113

; <label>:113:                                    ; preds = %111, %109
  %114 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = and i32 %115, 2
  %117 = icmp ne i32 %116, 0
  %118 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  br i1 %117, label %120, label %122

; <label>:120:                                    ; preds = %113
  %121 = and i32 %119, -3
  store i32 %121, i32* %118, align 4
  br label %124

; <label>:122:                                    ; preds = %113
  %123 = or i32 %119, 2
  store i32 %123, i32* %118, align 4
  br label %124

; <label>:124:                                    ; preds = %120, %122, %99, %101
  %125 = trunc i8 %14 to i1
  br i1 %125, label %126, label %149

; <label>:126:                                    ; preds = %124
  %127 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = and i32 %128, 4
  %130 = icmp ne i32 %129, 0
  %131 = icmp eq %struct._IO_FILE* %.02, null
  %or.cond = and i1 %130, %131
  br i1 %or.cond, label %132, label %149

; <label>:132:                                    ; preds = %126
  %133 = call %struct._IO_FILE* @warc_tempfile()
  %134 = icmp eq %struct._IO_FILE* %133, null
  br i1 %134, label %.loopexit, label %135

; <label>:135:                                    ; preds = %132
  %136 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 8
  %137 = load %struct.url*, %struct.url** %136, align 8
  %138 = icmp ne %struct.url* %137, null
  br i1 %138, label %149, label %139

; <label>:139:                                    ; preds = %135
  %140 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %141 = load i32, i32* %140, align 8
  %142 = icmp ne i32 %141, -1
  br i1 %142, label %143, label %149

; <label>:143:                                    ; preds = %139
  %144 = alloca i8, i64 24, align 16, !track !181
  %145 = bitcast i8* %144 to %struct.ip_address*
  %146 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %147 = load i32, i32* %146, align 8
  %148 = call zeroext i1 @socket_ip_address(i32 %147, %struct.ip_address* %145, i32 1)
  br label %149

; <label>:149:                                    ; preds = %135, %139, %143, %126, %124
  %.13 = phi %struct._IO_FILE* [ %.02, %126 ], [ %.02, %124 ], [ %133, %143 ], [ %133, %139 ], [ %133, %135 ]
  %.2 = phi %struct.ip_address* [ %.01, %126 ], [ %.01, %124 ], [ %.01, %135 ], [ %145, %143 ], [ %.01, %139 ]
  %150 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = and i32 %151, 8
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %181, label %154

; <label>:154:                                    ; preds = %149
  %155 = trunc i8 %10 to i1
  br i1 %155, label %181, label %156

; <label>:156:                                    ; preds = %154
  %157 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  %158 = load i64, i64* %157, align 8
  %159 = icmp sge i64 %158, 0
  br i1 %159, label %160, label %163

; <label>:160:                                    ; preds = %156
  %161 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  %162 = load i64, i64* %161, align 8
  br label %181

; <label>:163:                                    ; preds = %156
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %165 = load i8, i8* %164, align 1
  %166 = trunc i8 %165 to i1
  br i1 %166, label %167, label %178

; <label>:167:                                    ; preds = %163
  %168 = call i32 @stat(i8* %.29, %struct.stat* %7) #8
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %178

; <label>:170:                                    ; preds = %167
  %171 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 3
  %172 = load i32, i32* %171, align 8
  %173 = and i32 %172, 61440
  %174 = icmp eq i32 %173, 32768
  br i1 %174, label %175, label %178

; <label>:175:                                    ; preds = %170
  %176 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 8
  %177 = load i64, i64* %176, align 8
  br label %181

; <label>:178:                                    ; preds = %170, %167, %163
  %179 = icmp sgt i32 %84, 1
  %180 = load i64, i64* %6, align 8
  %.010 = select i1 %179, i64 %180, i64 0
  br label %181

; <label>:181:                                    ; preds = %154, %175, %178, %160, %149
  %.414 = phi i64 [ 0, %149 ], [ 0, %154 ], [ %162, %160 ], [ %177, %175 ], [ %.010, %178 ]
  %182 = call i64 @time(i64* null) #8
  %183 = call i8* @datetime_str(i64 %182)
  %184 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %185 = load i32, i32* %184, align 8
  %186 = icmp ne i32 %185, 0
  br i1 %186, label %187, label %202

; <label>:187:                                    ; preds = %181
  %188 = call i8* @url_string(%struct.url* %0, i32 1)
  %189 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i32 0, i32 0
  %190 = getelementptr [9 x i8], [9 x i8]* @.str.30.61, i32 0, i32 0
  %191 = call i8* @strcpy(i8* %189, i8* %190) #8
  %192 = icmp sgt i32 %84, 1
  br i1 %192, label %193, label %198

; <label>:193:                                    ; preds = %187
  %194 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i32 0, i32 0
  %195 = getelementptr [10 x i8], [10 x i8]* @.str.31.62, i32 0, i32 0
  %196 = call i8* @gettext(i8* %195) #8
  %197 = call i32 (i8*, i8*, ...) @sprintf(i8* %194, i8* %196, i32 %84) #8
  br label %198

; <label>:198:                                    ; preds = %193, %187
  %199 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i32 0, i32 0
  %200 = call i8* @quote(i8* %.29)
  %201 = getelementptr [23 x i8], [23 x i8]* @.str.32.63, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %201, i8* %183, i8* %188, i8* %199, i8* %200)
  call void @free(i8* %188) #8
  br label %202

; <label>:202:                                    ; preds = %198, %181
  %203 = icmp ne %struct.fileinfo* %1, null
  br i1 %203, label %204, label %211

; <label>:204:                                    ; preds = %202
  %205 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 0
  %206 = load i32, i32* %205, align 8
  %207 = icmp ne i32 %206, 2
  br i1 %207, label %208, label %211

; <label>:208:                                    ; preds = %204
  %209 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 2
  %210 = load i64, i64* %209, align 8
  br label %211

; <label>:211:                                    ; preds = %202, %204, %208
  %.015 = phi i64 [ %210, %208 ], [ 0, %204 ], [ 0, %202 ]
  %212 = call i32 @getftp(%struct.url* %0, i64 %.015, i64* %6, i64 %.414, %struct.ccon* %2, i32 %84, i64* %8, %struct._IO_FILE* %.13)
  %213 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %214 = load i32, i32* %213, align 8
  %215 = icmp eq i32 %214, -1
  %216 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %217 = load i32, i32* %216, align 8
  br i1 %215, label %218, label %220

; <label>:218:                                    ; preds = %211
  %219 = and i32 %217, -3
  store i32 %219, i32* %216, align 8
  br label %222

; <label>:220:                                    ; preds = %211
  %221 = or i32 %217, 2
  store i32 %221, i32* %216, align 8
  br label %222

; <label>:222:                                    ; preds = %220, %218
  switch i32 %212, label %259 [
    i32 1, label %223
    i32 5, label %223
    i32 21, label %223
    i32 19, label %223
    i32 12, label %223
    i32 8, label %223
    i32 29, label %223
    i32 32, label %223
    i32 30, label %223
    i32 31, label %223
    i32 47, label %223
    i32 54, label %223
    i32 4, label %223
    i32 33, label %223
    i32 2, label %237
    i32 3, label %237
    i32 15, label %237
    i32 14, label %237
    i32 44, label %237
    i32 13, label %237
    i32 11, label %237
    i32 10, label %237
    i32 9, label %237
    i32 28, label %237
    i32 20, label %237
    i32 16, label %249
    i32 35, label %260
  ]

; <label>:223:                                    ; preds = %222, %222, %222, %222, %222, %222, %222, %222, %222, %222, %222, %222, %222, %222
  %.lcssa47 = phi i32 [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ], [ %212, %222 ]
  %.13.lcssa36 = phi %struct._IO_FILE* [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ], [ %.13, %222 ]
  %224 = icmp eq i32 %.lcssa47, 32
  br i1 %224, label %225, label %227

; <label>:225:                                    ; preds = %223
  %226 = getelementptr [35 x i8], [35 x i8]* @.str.33.64, i32 0, i32 0
  call void @logputs(i32 1, i8* %226)
  br label %227

; <label>:227:                                    ; preds = %225, %223
  %228 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 127
  %229 = load i8, i8* %228, align 1
  %230 = trunc i8 %229 to i1
  br i1 %230, label %231, label %233

; <label>:231:                                    ; preds = %227
  %232 = getelementptr [49 x i8], [49 x i8]* @.str.34.65, i32 0, i32 0
  call void @logputs(i32 1, i8* %232)
  br label %233

; <label>:233:                                    ; preds = %231, %227
  %234 = icmp ne %struct._IO_FILE* %.13.lcssa36, null
  br i1 %234, label %235, label %440

; <label>:235:                                    ; preds = %233
  %236 = call i32 @fclose(%struct._IO_FILE* %.13.lcssa36)
  br label %440

; <label>:237:                                    ; preds = %222, %222, %222, %222, %222, %222, %222, %222, %222, %222, %222
  %238 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %239 = load i32, i32* %238, align 8
  call void @printwhat(i32 %84, i32 %239)
  %240 = icmp eq i32 %212, 20
  br i1 %240, label %241, label %415

; <label>:241:                                    ; preds = %237
  %242 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %243 = load i8*, i8** %242, align 8
  call void @free(i8* %243) #8
  %244 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  store i8* null, i8** %244, align 8
  %245 = call i8* @url_file_name(%struct.url* %0, i8* null)
  %246 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  store i8* %245, i8** %246, align 8
  %247 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %248 = load i8*, i8** %247, align 8
  br label %415

; <label>:249:                                    ; preds = %222
  %250 = icmp ne %struct.fileinfo* %1, null
  br i1 %250, label %251, label %256

; <label>:251:                                    ; preds = %249
  %252 = load i64, i64* %6, align 8
  %253 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 2
  %254 = load i64, i64* %253, align 8
  %255 = icmp ne i64 %252, %254
  br i1 %255, label %256, label %260

; <label>:256:                                    ; preds = %251, %249
  %257 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %258 = load i32, i32* %257, align 8
  call void @printwhat(i32 %84, i32 %258)
  br label %415

; <label>:259:                                    ; preds = %222
  call void @abort() #16
  unreachable

; <label>:260:                                    ; preds = %222, %251
  %.41445 = phi i64 [ %.414, %251 ], [ %.414, %222 ]
  %.1340 = phi %struct._IO_FILE* [ %.13, %251 ], [ %.13, %222 ]
  %.235 = phi %struct.ip_address* [ %.2, %251 ], [ %.2, %222 ]
  %.2926 = phi i8* [ %.29, %251 ], [ %.29, %222 ]
  %261 = phi i32 [ %84, %251 ], [ %84, %222 ]
  %262 = call i64 @time(i64* null) #8
  %263 = call i8* @datetime_str(i64 %262)
  %264 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %265 = load i8, i8* %264, align 8
  %266 = trunc i8 %265 to i1
  br i1 %266, label %273, label %267

; <label>:267:                                    ; preds = %260
  %268 = load i64, i64* %6, align 8
  %269 = sub nsw i64 %268, %.41445
  %270 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 3
  %271 = load double, double* %270, align 8
  %272 = call i8* @retr_rate(i64 %269, double %271)
  br label %273

; <label>:273:                                    ; preds = %267, %260
  %.05 = phi i8* [ null, %260 ], [ %272, %267 ]
  %274 = call i32 @downloaded_file(i32 1, i8* %.2926)
  %275 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %276 = load i32, i32* %275, align 8
  %277 = and i32 %276, 1
  %278 = icmp ne i32 %277, 0
  br i1 %278, label %279, label %283

; <label>:279:                                    ; preds = %273
  %280 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %281 = load i32, i32* %280, align 8
  call void @fd_close(i32 %281)
  %282 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  store i32 -1, i32* %282, align 8
  br label %283

; <label>:283:                                    ; preds = %279, %273
  %284 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %285 = load i8, i8* %284, align 8
  %286 = trunc i8 %285 to i1
  br i1 %286, label %325, label %287

; <label>:287:                                    ; preds = %283
  %288 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %289 = load i8*, i8** %288, align 8
  %290 = icmp ne i8* %289, null
  br i1 %290, label %291, label %304

; <label>:291:                                    ; preds = %287
  %292 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %293 = load i8*, i8** %292, align 8
  %294 = load i8, i8* %293, align 1
  %295 = sext i8 %294 to i32
  %296 = icmp eq i32 %295, 45
  br i1 %296, label %297, label %304

; <label>:297:                                    ; preds = %291
  %298 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %299 = load i8*, i8** %298, align 8
  %300 = getelementptr inbounds i8, i8* %299, i64 1
  %301 = load i8, i8* %300, align 1
  %302 = icmp ne i8 %301, 0
  %303 = xor i1 %302, true
  br label %304

; <label>:304:                                    ; preds = %291, %297, %287
  %305 = phi i1 [ false, %287 ], [ false, %291 ], [ %303, %297 ]
  %306 = zext i1 %305 to i8
  %307 = trunc i8 %306 to i1
  br i1 %307, label %308, label %311

; <label>:308:                                    ; preds = %304
  %309 = getelementptr [37 x i8], [37 x i8]* @.str.35.66, i32 0, i32 0
  %310 = call i8* @gettext(i8* %309) #8
  br label %314

; <label>:311:                                    ; preds = %304
  %312 = getelementptr [26 x i8], [26 x i8]* @.str.36.67, i32 0, i32 0
  %313 = call i8* @gettext(i8* %312) #8
  br label %314

; <label>:314:                                    ; preds = %311, %308
  %315 = phi i8* [ %310, %308 ], [ %313, %311 ]
  %316 = trunc i8 %306 to i1
  br i1 %316, label %317, label %319

; <label>:317:                                    ; preds = %314
  %318 = getelementptr [1 x i8], [1 x i8]* @.str.37.68, i32 0, i32 0
  br label %321

; <label>:319:                                    ; preds = %314
  %320 = call i8* @quote(i8* %.2926)
  br label %321

; <label>:321:                                    ; preds = %319, %317
  %322 = phi i8* [ %318, %317 ], [ %320, %319 ]
  %323 = load i64, i64* %6, align 8
  %324 = call i8* @number_to_static_string(i64 %323)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %315, i8* %263, i8* %.05, i8* %322, i8* %324)
  br label %325

; <label>:325:                                    ; preds = %321, %283
  %.2927 = phi i8* [ %.2926, %321 ], [ %.2926, %283 ]
  %326 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %327 = load i32, i32* %326, align 8
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %338, label %329

; <label>:329:                                    ; preds = %325
  %330 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %331 = load i8, i8* %330, align 4
  %332 = trunc i8 %331 to i1
  br i1 %332, label %338, label %333

; <label>:333:                                    ; preds = %329
  %334 = call i8* @url_string(%struct.url* %0, i32 1)
  %335 = load i64, i64* %6, align 8
  %336 = call i8* @number_to_static_string(i64 %335)
  %337 = getelementptr [30 x i8], [30 x i8]* @.str.38.69, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 2, i8* %337, i8* %263, i8* %334, i8* %336, i8* %.2927, i32 %261)
  call void @free(i8* %334) #8
  br label %338

; <label>:338:                                    ; preds = %333, %329, %325
  %339 = trunc i8 %14 to i1
  br i1 %339, label %340, label %351

; <label>:340:                                    ; preds = %338
  %341 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %342 = load i32, i32* %341, align 4
  %343 = and i32 %342, 4
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %351

; <label>:345:                                    ; preds = %340
  %346 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %347 = load i8*, i8** %346, align 8
  %348 = call zeroext i1 @warc_write_resource_record(i8* null, i8* %347, i8* null, i8* null, %struct.ip_address* %.235, i8* null, %struct._IO_FILE* %.1340, i64 -1)
  %349 = zext i1 %348 to i8
  %350 = trunc i8 %349 to i1
  br i1 %350, label %351, label %440

; <label>:351:                                    ; preds = %345, %340, %338
  %.24 = phi %struct._IO_FILE* [ %.1340, %340 ], [ %.1340, %338 ], [ null, %345 ]
  %352 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %353 = load i32, i32* %352, align 4
  %354 = and i32 %353, 8
  %355 = icmp ne i32 %354, 0
  br i1 %355, label %356, label %366

; <label>:356:                                    ; preds = %351
  %357 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 103
  %358 = load i8, i8* %357, align 2
  %359 = trunc i8 %358 to i1
  br i1 %359, label %399, label %360

; <label>:360:                                    ; preds = %356
  %361 = load i64, i64* %6, align 8
  %362 = load i64, i64* @total_downloaded_bytes, align 8
  %363 = add nsw i64 %362, %361
  store i64 %363, i64* @total_downloaded_bytes, align 8
  %364 = load i32, i32* @numurls, align 4
  %365 = add nsw i32 %364, 1
  store i32 %365, i32* @numurls, align 4
  br label %399

; <label>:366:                                    ; preds = %351
  %367 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %368 = load i8, i8* %367, align 8
  %369 = trunc i8 %368 to i1
  br i1 %369, label %399, label %370

; <label>:370:                                    ; preds = %366
  %371 = load i64, i64* %6, align 8
  %372 = load i64, i64* @total_downloaded_bytes, align 8
  %373 = add nsw i64 %372, %371
  store i64 %373, i64* @total_downloaded_bytes, align 8
  %374 = load i32, i32* @numurls, align 4
  %375 = add nsw i32 %374, 1
  store i32 %375, i32* @numurls, align 4
  %376 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %377 = load i8, i8* %376, align 8
  %378 = trunc i8 %377 to i1
  br i1 %378, label %379, label %399

; <label>:379:                                    ; preds = %370
  %380 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %381 = load i8*, i8** %380, align 8
  %382 = call zeroext i1 @input_file_url(i8* %381)
  br i1 %382, label %399, label %383

; <label>:383:                                    ; preds = %379
  %384 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %385 = load i8, i8* %384, align 1
  %386 = trunc i8 %385 to i1
  br i1 %386, label %387, label %389

; <label>:387:                                    ; preds = %383
  %388 = getelementptr [61 x i8], [61 x i8]* @.str.39.70, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %388)
  br label %389

; <label>:389:                                    ; preds = %383, %387
  %390 = getelementptr [14 x i8], [14 x i8]* @.str.40.71, i32 0, i32 0
  %391 = call i8* @gettext(i8* %390) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %391, i8* %.2927)
  %392 = call i32 @unlink(i8* %.2927) #8
  %393 = icmp ne i32 %392, 0
  br i1 %393, label %394, label %399

; <label>:394:                                    ; preds = %389
  %395 = call i32* @__errno_location() #15
  %396 = load i32, i32* %395, align 4
  %397 = call i8* @strerror(i32 %396) #8
  %398 = getelementptr [12 x i8], [12 x i8]* @.str.4.72, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %398, i8* %397)
  br label %399

; <label>:399:                                    ; preds = %366, %389, %394, %379, %370, %356, %360
  %.2929 = phi i8* [ %.2927, %360 ], [ %.2927, %356 ], [ %.2927, %366 ], [ %.2927, %379 ], [ %.2927, %370 ], [ %.2927, %394 ], [ %.2927, %389 ]
  %400 = icmp ne i32 %82, 0
  %401 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %402 = load i32, i32* %401, align 4
  br i1 %400, label %403, label %405

; <label>:403:                                    ; preds = %399
  %404 = or i32 %402, 16
  store i32 %404, i32* %401, align 4
  br label %407

; <label>:405:                                    ; preds = %399
  %406 = and i32 %402, -17
  store i32 %406, i32* %401, align 4
  br label %407

; <label>:407:                                    ; preds = %405, %403
  %408 = icmp ne i8** %3, null
  br i1 %408, label %409, label %411

; <label>:409:                                    ; preds = %407
  %410 = call noalias i8* @xstrdup(i8* %.2929)
  store i8* %410, i8** %3, align 8
  br label %411

; <label>:411:                                    ; preds = %409, %407
  %412 = icmp ne %struct._IO_FILE* %.24, null
  br i1 %412, label %413, label %440

; <label>:413:                                    ; preds = %411
  %414 = call i32 @fclose(%struct._IO_FILE* %.24)
  br label %440

; <label>:415:                                    ; preds = %237, %241, %256
  %.4 = phi i8* [ %.29, %256 ], [ %248, %241 ], [ %.29, %237 ]
  %416 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %417 = load i32, i32* %416, align 8
  %418 = icmp ne i32 %417, 0
  %419 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %420 = load i32, i32* %419, align 8
  %421 = icmp slt i32 %84, %420
  %422 = select i1 %418, i1 %421, i1 true
  br i1 %422, label %83, label %423

; <label>:423:                                    ; preds = %415
  %.13.lcssa39 = phi %struct._IO_FILE* [ %.13, %415 ]
  %424 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %425 = load i32, i32* %424, align 8
  %426 = icmp ne i32 %425, -1
  br i1 %426, label %427, label %436

; <label>:427:                                    ; preds = %423
  %428 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %429 = load i32, i32* %428, align 8
  %430 = and i32 %429, 1
  %431 = icmp ne i32 %430, 0
  br i1 %431, label %432, label %436

; <label>:432:                                    ; preds = %427
  %433 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %434 = load i32, i32* %433, align 8
  call void @fd_close(i32 %434)
  %435 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  store i32 -1, i32* %435, align 8
  br label %436

; <label>:436:                                    ; preds = %432, %427, %423
  %437 = icmp ne %struct._IO_FILE* %.13.lcssa39, null
  br i1 %437, label %438, label %440

; <label>:438:                                    ; preds = %436
  %439 = call i32 @fclose(%struct._IO_FILE* %.13.lcssa39)
  br label %440

.loopexit:                                        ; preds = %132
  %.0.ph = phi i32 [ 53, %132 ]
  br label %440

; <label>:440:                                    ; preds = %.loopexit, %436, %438, %411, %413, %345, %233, %235, %60
  %.0 = phi i32 [ 25, %60 ], [ %.lcssa47, %235 ], [ %.lcssa47, %233 ], [ 52, %345 ], [ 25, %413 ], [ 25, %411 ], [ 37, %438 ], [ 37, %436 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @getftp(%struct.url*, i64, i64*, i64, %struct.ccon*, i32, i64*, %struct._IO_FILE*) #0 {
  %9 = alloca i32, align 4, !track !182
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8, !track !183
  %12 = alloca i8*, align 8, !track !184
  %13 = alloca i8*, align 8, !track !185
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca %struct.ip_address, align 4, !track !186
  %19 = alloca i32, align 4
  %20 = alloca %struct.fileinfo*, align 8, !track !187
  %21 = alloca i8*, align 8, !track !188
  %22 = alloca i64, align 8, !track !189
  %23 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  store i64 0, i64* %14, align 8
  store i8 0, i8* %16, align 1
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 128
  %26 = load i8, i8* %25, align 4
  %27 = trunc i8 %26 to i1
  %28 = zext i1 %27 to i64
  %29 = select i1 %27, i32 67, i32 80
  store i8 0, i8* %17, align 1
  store i64 %3, i64* %2, align 8
  %30 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %12, align 8
  %32 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 11
  %33 = load i8*, i8** %32, align 8
  store i8* %33, i8** %13, align 8
  %34 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %35 = load i8*, i8** %34, align 8
  call void @search_netrc(i8* %35, i8** %12, i8** %13, i32 1)
  %36 = load i8*, i8** %12, align 8
  %37 = icmp ne i8* %36, null
  br i1 %37, label %38, label %40

; <label>:38:                                     ; preds = %8
  %39 = load i8*, i8** %12, align 8
  br label %49

; <label>:40:                                     ; preds = %8
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 61
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, null
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 61
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 56
  %47 = load i8*, i8** %46, align 8
  %48 = select i1 %43, i8* %45, i8* %47
  br label %49

; <label>:49:                                     ; preds = %40, %38
  %50 = phi i8* [ %39, %38 ], [ %48, %40 ]
  store i8* %50, i8** %12, align 8
  %51 = load i8*, i8** %12, align 8
  %52 = icmp ne i8* %51, null
  br i1 %52, label %55, label %53

; <label>:53:                                     ; preds = %49
  %54 = getelementptr [10 x i8], [10 x i8]* @.str.41.73, i32 0, i32 0
  store i8* %54, i8** %12, align 8
  br label %55

; <label>:55:                                     ; preds = %53, %49
  %56 = load i8*, i8** %13, align 8
  %57 = icmp ne i8* %56, null
  br i1 %57, label %58, label %60

; <label>:58:                                     ; preds = %55
  %59 = load i8*, i8** %13, align 8
  br label %69

; <label>:60:                                     ; preds = %55
  %61 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 62
  %62 = load i8*, i8** %61, align 8
  %63 = icmp ne i8* %62, null
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 62
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 57
  %67 = load i8*, i8** %66, align 8
  %68 = select i1 %63, i8* %65, i8* %67
  br label %69

; <label>:69:                                     ; preds = %60, %58
  %70 = phi i8* [ %59, %58 ], [ %68, %60 ]
  store i8* %70, i8** %13, align 8
  %71 = load i8*, i8** %13, align 8
  %72 = icmp ne i8* %71, null
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %69
  %74 = getelementptr [7 x i8], [7 x i8]* @.str.42.74, i32 0, i32 0
  store i8* %74, i8** %13, align 8
  br label %75

; <label>:75:                                     ; preds = %73, %69
  store i32 -1, i32* %10, align 4
  %76 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 3
  store double 0.000000e+00, double* %76, align 8
  %77 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, 3
  br i1 %79, label %80, label %101

; <label>:80:                                     ; preds = %75
  %81 = call zeroext i1 @ssl_init()
  br i1 %81, label %85, label %82

; <label>:82:                                     ; preds = %80
  call void @scheme_disable(i32 3)
  %83 = getelementptr [47 x i8], [47 x i8]* @.str.43.75, i32 0, i32 0
  %84 = call i8* @gettext(i8* %83) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %84)
  br label %1445

; <label>:85:                                     ; preds = %80
  %86 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 127
  %87 = load i8, i8* %86, align 1
  %88 = trunc i8 %87 to i1
  br i1 %88, label %89, label %101

; <label>:89:                                     ; preds = %85
  %90 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = icmp eq i32 %91, 21
  br i1 %92, label %93, label %101

; <label>:93:                                     ; preds = %89
  %94 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %95 = load i8, i8* %94, align 1
  %96 = trunc i8 %95 to i1
  br i1 %96, label %97, label %99

; <label>:97:                                     ; preds = %93
  %98 = getelementptr [60 x i8], [60 x i8]* @.str.44.76, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %98, i32 990)
  br label %99

; <label>:99:                                     ; preds = %93, %97
  %100 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  store i32 990, i32* %100, align 8
  br label %101

; <label>:101:                                    ; preds = %85, %89, %99, %75
  %102 = and i32 %24, 1
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %112, label %104

; <label>:104:                                    ; preds = %101
  %105 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  %106 = load i32, i32* %105, align 8
  store i32 %106, i32* %9, align 4
  %107 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = and i32 %108, 32
  %110 = icmp ne i32 %109, 0
  %111 = zext i1 %110 to i8
  br label %456

; <label>:112:                                    ; preds = %101
  %113 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 8
  %114 = load %struct.url*, %struct.url** %113, align 8
  %115 = icmp ne %struct.url* %114, null
  br i1 %115, label %116, label %121

; <label>:116:                                    ; preds = %112
  %117 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 8
  %118 = load %struct.url*, %struct.url** %117, align 8
  %119 = getelementptr inbounds %struct.url, %struct.url* %118, i32 0, i32 2
  %120 = load i8*, i8** %119, align 8
  br label %124

; <label>:121:                                    ; preds = %112
  %122 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %123 = load i8*, i8** %122, align 8
  br label %124

; <label>:124:                                    ; preds = %121, %116
  %125 = phi i8* [ %120, %116 ], [ %123, %121 ]
  %126 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 8
  %127 = load %struct.url*, %struct.url** %126, align 8
  %128 = icmp ne %struct.url* %127, null
  br i1 %128, label %129, label %134

; <label>:129:                                    ; preds = %124
  %130 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 8
  %131 = load %struct.url*, %struct.url** %130, align 8
  %132 = getelementptr inbounds %struct.url, %struct.url* %131, i32 0, i32 3
  %133 = load i32, i32* %132, align 8
  br label %137

; <label>:134:                                    ; preds = %124
  %135 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %136 = load i32, i32* %135, align 8
  br label %137

; <label>:137:                                    ; preds = %134, %129
  %138 = phi i32 [ %133, %129 ], [ %136, %134 ]
  %139 = call i32 @connect_to_host(i8* %125, i32 %138)
  store i32 %139, i32* %9, align 4
  %140 = load i32, i32* %9, align 4
  %141 = icmp eq i32 %140, -100
  br i1 %141, label %1445, label %142

; <label>:142:                                    ; preds = %137
  %143 = load i32, i32* %9, align 4
  %144 = icmp slt i32 %143, 0
  br i1 %144, label %145, label %151

; <label>:145:                                    ; preds = %142
  %146 = call i32* @__errno_location() #15
  %147 = load i32, i32* %146, align 4
  %148 = call zeroext i1 @retryable_socket_connect_error(i32 %147)
  %149 = zext i1 %148 to i64
  %150 = select i1 %148, i32 3, i32 5
  br label %1445

; <label>:151:                                    ; preds = %142
  %152 = and i32 %24, 16
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %154, label %157

; <label>:154:                                    ; preds = %151
  %155 = load i32, i32* %9, align 4
  %156 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 %155, i32* %156, align 8
  br label %159

; <label>:157:                                    ; preds = %151
  %158 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %158, align 8
  br label %159

; <label>:159:                                    ; preds = %157, %154
  %160 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %161 = load i32, i32* %160, align 8
  %162 = icmp eq i32 %161, 3
  br i1 %162, label %163, label %182

; <label>:163:                                    ; preds = %159
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 127
  %165 = load i8, i8* %164, align 1
  %166 = trunc i8 %165 to i1
  %167 = load i32, i32* %9, align 4
  br i1 %166, label %168, label %175

; <label>:168:                                    ; preds = %163
  %169 = call i32 @init_control_ssl_connection(i32 %167, %struct.url* %0, i8* %17)
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %1445, label %171

; <label>:171:                                    ; preds = %168
  %172 = load i32, i32* %9, align 4
  %173 = call i32 @get_ftp_greeting(i32 %172, %struct.ccon* %4)
  %174 = icmp ne i32 %173, 7
  br i1 %174, label %1445, label %186

; <label>:175:                                    ; preds = %163
  %176 = call i32 @get_ftp_greeting(i32 %167, %struct.ccon* %4)
  %177 = icmp ne i32 %176, 7
  br i1 %177, label %1445, label %178

; <label>:178:                                    ; preds = %175
  %179 = load i32, i32* %9, align 4
  %180 = call i32 @init_control_ssl_connection(i32 %179, %struct.url* %0, i8* %17)
  %181 = icmp ne i32 %180, 0
  br i1 %181, label %1445, label %186

; <label>:182:                                    ; preds = %159
  %183 = load i32, i32* %9, align 4
  %184 = call i32 @get_ftp_greeting(i32 %183, %struct.ccon* %4)
  %185 = icmp ne i32 %184, 7
  br i1 %185, label %1445, label %186

; <label>:186:                                    ; preds = %182, %171, %178
  %187 = getelementptr [22 x i8], [22 x i8]* @.str.45.77, i32 0, i32 0
  %188 = call i8* @gettext(i8* %187) #8
  %189 = load i8*, i8** %12, align 8
  %190 = call i8* @quotearg_style(i32 7, i8* %189)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %188, i8* %190)
  %191 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %192 = load i8, i8* %191, align 8
  %193 = trunc i8 %192 to i1
  br i1 %193, label %194, label %196

; <label>:194:                                    ; preds = %186
  %195 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 3, i8* %195)
  br label %196

; <label>:196:                                    ; preds = %194, %186
  %197 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 8
  %198 = load %struct.url*, %struct.url** %197, align 8
  %199 = icmp ne %struct.url* %198, null
  br i1 %199, label %200, label %209

; <label>:200:                                    ; preds = %196
  %201 = load i8*, i8** %12, align 8
  %202 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %203 = load i8*, i8** %202, align 8
  %204 = getelementptr [2 x i8], [2 x i8]* @.str.46.79, i32 0, i32 0
  %205 = call i8* (i8*, ...) @concat_strings(i8* %201, i8* %204, i8* %203, i8* null)
  %206 = load i32, i32* %9, align 4
  %207 = load i8*, i8** %13, align 8
  %208 = call i32 @ftp_login(i32 %206, i8* %205, i8* %207)
  call void @free(i8* %205) #8
  br label %214

; <label>:209:                                    ; preds = %196
  %210 = load i32, i32* %9, align 4
  %211 = load i8*, i8** %12, align 8
  %212 = load i8*, i8** %13, align 8
  %213 = call i32 @ftp_login(i32 %210, i8* %211, i8* %212)
  br label %214

; <label>:214:                                    ; preds = %209, %200
  %.010 = phi i32 [ %208, %200 ], [ %213, %209 ]
  switch i32 %.010, label %252 [
    i32 14, label %215
    i32 15, label %221
    i32 44, label %227
    i32 9, label %233
    i32 8, label %239
    i32 7, label %245
  ]

; <label>:215:                                    ; preds = %214
  %216 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %216)
  %217 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %218 = call i8* @gettext(i8* %217) #8, !track !190
  call void @logputs(i32 1, i8* %218)
  %219 = load i32, i32* %9, align 4
  call void @fd_close(i32 %219)
  %220 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %220, align 8
  br label %1445

; <label>:221:                                    ; preds = %214
  %222 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %222)
  %223 = getelementptr [27 x i8], [27 x i8]* @.str.48, i32 0, i32 0
  %224 = call i8* @gettext(i8* %223) #8, !track !191
  call void @logputs(i32 1, i8* %224)
  %225 = load i32, i32* %9, align 4
  call void @fd_close(i32 %225)
  %226 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %226, align 8
  br label %1445

; <label>:227:                                    ; preds = %214
  %228 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %228)
  %229 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %230 = call i8* @gettext(i8* %229) #8, !track !192
  call void @logputs(i32 1, i8* %230)
  %231 = load i32, i32* %9, align 4
  call void @fd_close(i32 %231)
  %232 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %232, align 8
  br label %1445

; <label>:233:                                    ; preds = %214
  %234 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %234)
  %235 = getelementptr [27 x i8], [27 x i8]* @.str.50, i32 0, i32 0
  %236 = call i8* @gettext(i8* %235) #8, !track !193
  call void @logputs(i32 1, i8* %236)
  %237 = load i32, i32* %9, align 4
  call void @fd_close(i32 %237)
  %238 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %238, align 8
  br label %1445

; <label>:239:                                    ; preds = %214
  %240 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %240)
  %241 = getelementptr [18 x i8], [18 x i8]* @.str.51, i32 0, i32 0
  %242 = call i8* @gettext(i8* %241) #8, !track !194
  call void @logputs(i32 1, i8* %242)
  %243 = load i32, i32* %9, align 4
  call void @fd_close(i32 %243)
  %244 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %244, align 8
  br label %1445

; <label>:245:                                    ; preds = %214
  %246 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %247 = load i8, i8* %246, align 8
  %248 = trunc i8 %247 to i1
  br i1 %248, label %253, label %249

; <label>:249:                                    ; preds = %245
  %250 = getelementptr [12 x i8], [12 x i8]* @.str.52, i32 0, i32 0
  %251 = call i8* @gettext(i8* %250) #8, !track !195
  call void @logputs(i32 0, i8* %251)
  br label %253

; <label>:252:                                    ; preds = %214
  call void @abort() #16
  unreachable

; <label>:253:                                    ; preds = %245, %249
  %254 = load i8, i8* %17, align 1
  %255 = trunc i8 %254 to i1
  br i1 %255, label %256, label %304

; <label>:256:                                    ; preds = %253
  %257 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %258 = load i32, i32* %257, align 8
  %259 = icmp eq i32 %258, 3
  br i1 %259, label %260, label %304

; <label>:260:                                    ; preds = %256
  %261 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %262 = load i8, i8* %261, align 8
  %263 = trunc i8 %262 to i1
  br i1 %263, label %266, label %264

; <label>:264:                                    ; preds = %260
  %265 = getelementptr [16 x i8], [16 x i8]* @.str.53, i32 0, i32 0
  call void @logputs(i32 0, i8* %265)
  br label %266

; <label>:266:                                    ; preds = %264, %260
  %267 = load i32, i32* %9, align 4
  %268 = call i32 @ftp_pbsz(i32 %267, i32 0)
  %269 = icmp eq i32 %268, 30
  br i1 %269, label %270, label %273

; <label>:270:                                    ; preds = %266
  %271 = getelementptr [45 x i8], [45 x i8]* @.str.54, i32 0, i32 0
  %272 = call i8* @gettext(i8* %271) #8, !track !196
  call void @logputs(i32 1, i8* %272)
  br label %1445

; <label>:273:                                    ; preds = %266
  %274 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %275 = load i8, i8* %274, align 8
  %276 = trunc i8 %275 to i1
  br i1 %276, label %279, label %277

; <label>:277:                                    ; preds = %273
  %278 = getelementptr [6 x i8], [6 x i8]* @.str.55, i32 0, i32 0
  call void @logputs(i32 0, i8* %278)
  br label %279

; <label>:279:                                    ; preds = %277, %273
  %280 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %281 = load i8, i8* %280, align 8
  %282 = trunc i8 %281 to i1
  br i1 %282, label %285, label %283

; <label>:283:                                    ; preds = %279
  %284 = getelementptr [19 x i8], [19 x i8]* @.str.56, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %284, i32 %29)
  br label %285

; <label>:285:                                    ; preds = %283, %279
  %286 = load i32, i32* %9, align 4
  %287 = call i32 @ftp_prot(i32 %286, i32 %29)
  %288 = icmp eq i32 %287, 31
  br i1 %288, label %289, label %292

; <label>:289:                                    ; preds = %285
  %290 = getelementptr [46 x i8], [46 x i8]* @.str.57, i32 0, i32 0
  %291 = call i8* @gettext(i8* %290) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %291, i32 %29)
  br label %1445

; <label>:292:                                    ; preds = %285
  %293 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %294 = load i8, i8* %293, align 8
  %295 = trunc i8 %294 to i1
  br i1 %295, label %298, label %296

; <label>:296:                                    ; preds = %292
  %297 = getelementptr [7 x i8], [7 x i8]* @.str.58.81, i32 0, i32 0
  call void @logputs(i32 0, i8* %297)
  br label %298

; <label>:298:                                    ; preds = %296, %292
  %299 = icmp ne i32 %29, 67
  br i1 %299, label %300, label %304

; <label>:300:                                    ; preds = %298
  %301 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %302 = load i32, i32* %301, align 8
  %303 = or i32 %302, 32
  store i32 %303, i32* %301, align 8
  br label %304

; <label>:304:                                    ; preds = %256, %300, %298, %253
  %.217 = phi i8 [ 0, %253 ], [ 0, %256 ], [ 1, %300 ], [ 0, %298 ]
  %305 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %306 = load i8, i8* %305, align 8
  %307 = trunc i8 %306 to i1
  br i1 %307, label %310, label %308

; <label>:308:                                    ; preds = %304
  %309 = getelementptr [14 x i8], [14 x i8]* @.str.59, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %309)
  br label %310

; <label>:310:                                    ; preds = %308, %304
  %311 = load i32, i32* %9, align 4
  %312 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 4
  %313 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 5
  %314 = call i32 @ftp_syst(i32 %311, i32* %312, i32* %313)
  switch i32 %314, label %325 [
    i32 14, label %315
    i32 15, label %321
    i32 7, label %326
  ]

; <label>:315:                                    ; preds = %310
  %316 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %316)
  %317 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %318 = call i8* @gettext(i8* %317) #8, !track !197
  call void @logputs(i32 1, i8* %318)
  %319 = load i32, i32* %9, align 4
  call void @fd_close(i32 %319)
  %320 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %320, align 8
  br label %1445

; <label>:321:                                    ; preds = %310
  %322 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %322)
  %323 = getelementptr [44 x i8], [44 x i8]* @.str.60, i32 0, i32 0
  %324 = call i8* @gettext(i8* %323) #8, !track !198
  call void @logputs(i32 1, i8* %324)
  br label %326

; <label>:325:                                    ; preds = %310
  call void @abort() #16
  unreachable

; <label>:326:                                    ; preds = %310, %321
  %327 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %328 = load i8, i8* %327, align 8
  %329 = trunc i8 %328 to i1
  %.not = xor i1 %329, true
  %330 = icmp ne i32 %314, 15
  %or.cond = and i1 %.not, %330
  br i1 %or.cond, label %331, label %334

; <label>:331:                                    ; preds = %326
  %332 = getelementptr [10 x i8], [10 x i8]* @.str.61, i32 0, i32 0
  %333 = call i8* @gettext(i8* %332) #8, !track !199
  call void @logputs(i32 0, i8* %333)
  br label %334

; <label>:334:                                    ; preds = %326, %331
  %335 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 4
  %336 = load i32, i32* %335, align 8
  switch i32 %336, label %384 [
    i32 1, label %337
    i32 0, label %350
  ]

; <label>:337:                                    ; preds = %334
  %338 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %339 = load i8, i8* %338, align 1
  %340 = trunc i8 %339 to i1
  br i1 %340, label %341, label %343

; <label>:341:                                    ; preds = %337
  %342 = getelementptr [64 x i8], [64 x i8]* @.str.62, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %342)
  br label %343

; <label>:343:                                    ; preds = %337, %341
  %344 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %345 = load i32, i32* %344, align 8
  %346 = or i32 %345, 16
  store i32 %346, i32* %344, align 8
  %347 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %348 = load i32, i32* %347, align 8
  %349 = or i32 %348, 4
  store i32 %349, i32* %347, align 8
  br label %384

; <label>:350:                                    ; preds = %334
  %351 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 5
  %352 = load i32, i32* %351, align 4
  %353 = icmp eq i32 %352, 1
  br i1 %353, label %354, label %367

; <label>:354:                                    ; preds = %350
  %355 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %356 = load i8, i8* %355, align 1
  %357 = trunc i8 %356 to i1
  br i1 %357, label %358, label %360

; <label>:358:                                    ; preds = %354
  %359 = getelementptr [74 x i8], [74 x i8]* @.str.63, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %359)
  br label %360

; <label>:360:                                    ; preds = %354, %358
  %361 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %362 = load i32, i32* %361, align 8
  %363 = or i32 %362, 16
  store i32 %363, i32* %361, align 8
  %364 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %365 = load i32, i32* %364, align 8
  %366 = or i32 %365, 4
  store i32 %366, i32* %364, align 8
  br label %384

; <label>:367:                                    ; preds = %350
  %368 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 5
  %369 = load i32, i32* %368, align 4
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %371, label %384

; <label>:371:                                    ; preds = %367
  %372 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %373 = load i8, i8* %372, align 1
  %374 = trunc i8 %373 to i1
  br i1 %374, label %375, label %377

; <label>:375:                                    ; preds = %371
  %376 = getelementptr [76 x i8], [76 x i8]* @.str.64, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %376)
  br label %377

; <label>:377:                                    ; preds = %371, %375
  %378 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %379 = load i32, i32* %378, align 8
  %380 = or i32 %379, 16
  store i32 %380, i32* %378, align 8
  %381 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %382 = load i32, i32* %381, align 8
  %383 = or i32 %382, 8
  store i32 %383, i32* %381, align 8
  br label %384

; <label>:384:                                    ; preds = %334, %360, %377, %367, %343
  %385 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %386 = load i8, i8* %385, align 8
  %387 = trunc i8 %386 to i1
  br i1 %387, label %390, label %388

; <label>:388:                                    ; preds = %384
  %389 = getelementptr [13 x i8], [13 x i8]* @.str.65, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %389)
  br label %390

; <label>:390:                                    ; preds = %388, %384
  %391 = load i32, i32* %9, align 4
  %392 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  %393 = call i32 @ftp_pwd(i32 %391, i8** %392)
  switch i32 %393, label %407 [
    i32 14, label %394
    i32 15, label %400
    i32 7, label %408
  ]

; <label>:394:                                    ; preds = %390
  %395 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %395)
  %396 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %397 = call i8* @gettext(i8* %396) #8, !track !200
  call void @logputs(i32 1, i8* %397)
  %398 = load i32, i32* %9, align 4
  call void @fd_close(i32 %398)
  %399 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %399, align 8
  br label %1445

; <label>:400:                                    ; preds = %390
  %401 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  %402 = load i8*, i8** %401, align 8
  call void @free(i8* %402) #8
  %403 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  store i8* null, i8** %403, align 8
  %404 = getelementptr [2 x i8], [2 x i8]* @.str.66, i32 0, i32 0
  %405 = call noalias i8* @xstrdup(i8* %404)
  %406 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  store i8* %405, i8** %406, align 8
  br label %408

; <label>:407:                                    ; preds = %390
  call void @abort() #16
  unreachable

; <label>:408:                                    ; preds = %390, %400
  %409 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %410 = load i8, i8* %409, align 8
  %411 = trunc i8 %410 to i1
  br i1 %411, label %415, label %412

; <label>:412:                                    ; preds = %408
  %413 = getelementptr [7 x i8], [7 x i8]* @.str.58.81, i32 0, i32 0
  %414 = call i8* @gettext(i8* %413) #8, !track !201
  call void @logputs(i32 0, i8* %414)
  br label %415

; <label>:415:                                    ; preds = %412, %408
  %416 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 5
  %417 = load i8*, i8** %416, align 8
  %418 = call signext i8 @ftp_process_type(i8* %417)
  %419 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %420 = load i8, i8* %419, align 8
  %421 = trunc i8 %420 to i1
  br i1 %421, label %425, label %422

; <label>:422:                                    ; preds = %415
  %423 = sext i8 %418 to i32
  %424 = getelementptr [17 x i8], [17 x i8]* @.str.67, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %424, i32 %423)
  br label %425

; <label>:425:                                    ; preds = %422, %415
  %426 = load i32, i32* %9, align 4
  %427 = sext i8 %418 to i32
  %428 = call i32 @ftp_type(i32 %426, i32 %427)
  switch i32 %428, label %448 [
    i32 14, label %429
    i32 44, label %435
    i32 13, label %441
    i32 7, label %449
  ]

; <label>:429:                                    ; preds = %425
  %430 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %430)
  %431 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %432 = call i8* @gettext(i8* %431) #8, !track !202
  call void @logputs(i32 1, i8* %432)
  %433 = load i32, i32* %9, align 4
  call void @fd_close(i32 %433)
  %434 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %434, align 8
  br label %1445

; <label>:435:                                    ; preds = %425
  %436 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %436)
  %437 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %438 = call i8* @gettext(i8* %437) #8, !track !203
  call void @logputs(i32 1, i8* %438)
  %439 = load i32, i32* %9, align 4
  call void @fd_close(i32 %439)
  %440 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %440, align 8
  br label %1445

; <label>:441:                                    ; preds = %425
  %442 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %442)
  %443 = getelementptr [48 x i8], [48 x i8]* @.str.68, i32 0, i32 0
  %444 = call i8* @gettext(i8* %443) #8
  %445 = sext i8 %418 to i32
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %444, i32 %445)
  %446 = load i32, i32* %9, align 4
  call void @fd_close(i32 %446)
  %447 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %447, align 8
  br label %1445

; <label>:448:                                    ; preds = %425
  call void @abort() #16
  unreachable

; <label>:449:                                    ; preds = %425
  %450 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %451 = load i8, i8* %450, align 8
  %452 = trunc i8 %451 to i1
  br i1 %452, label %456, label %453

; <label>:453:                                    ; preds = %449
  %454 = getelementptr [8 x i8], [8 x i8]* @.str.69, i32 0, i32 0
  %455 = call i8* @gettext(i8* %454) #8, !track !204
  call void @logputs(i32 0, i8* %455)
  br label %456

; <label>:456:                                    ; preds = %449, %453, %104
  %.318 = phi i8 [ %111, %104 ], [ %.217, %453 ], [ %.217, %449 ]
  %457 = and i32 %24, 2
  %458 = icmp ne i32 %457, 0
  br i1 %458, label %459, label %632

; <label>:459:                                    ; preds = %456
  %460 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %461 = load i8*, i8** %460, align 8
  %462 = load i8, i8* %461, align 1
  %463 = icmp ne i8 %462, 0
  br i1 %463, label %467, label %464

; <label>:464:                                    ; preds = %459
  %465 = getelementptr [21 x i8], [21 x i8]* @.str.70, i32 0, i32 0
  %466 = call i8* @gettext(i8* %465) #8, !track !205
  call void @logputs(i32 0, i8* %466)
  br label %._crit_edge161

; <label>:467:                                    ; preds = %459
  %468 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %469 = load i8*, i8** %468, align 8
  %470 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %471 = load i8, i8* %470, align 1
  %472 = trunc i8 %471 to i1
  br i1 %472, label %473, label %475

; <label>:473:                                    ; preds = %467
  %474 = getelementptr [28 x i8], [28 x i8]* @.str.71, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %474)
  br label %475

; <label>:475:                                    ; preds = %467, %473
  %476 = getelementptr inbounds i8, i8* %469, i64 0
  %477 = load i8, i8* %476, align 1
  %478 = sext i8 %477 to i32
  %479 = icmp ne i32 %478, 47
  br i1 %479, label %480, label %550

; <label>:480:                                    ; preds = %475
  %481 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 4
  %482 = load i32, i32* %481, align 8
  %483 = icmp ne i32 %482, 0
  br i1 %483, label %484, label %494

; <label>:484:                                    ; preds = %480
  %485 = getelementptr inbounds i8, i8* %469, i64 0
  %486 = load i8, i8* %485, align 1
  %487 = sext i8 %486 to i32
  %488 = call zeroext i1 @c_isalpha(i32 %487)
  br i1 %488, label %489, label %494

; <label>:489:                                    ; preds = %484
  %490 = getelementptr inbounds i8, i8* %469, i64 1
  %491 = load i8, i8* %490, align 1
  %492 = sext i8 %491 to i32
  %493 = icmp eq i32 %492, 58
  br i1 %493, label %550, label %494

; <label>:494:                                    ; preds = %489, %484, %480
  %495 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 4
  %496 = load i32, i32* %495, align 8
  %497 = icmp ne i32 %496, 4
  br i1 %497, label %498, label %550

; <label>:498:                                    ; preds = %494
  %499 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 4
  %500 = load i32, i32* %499, align 8
  %501 = icmp ne i32 %500, 1
  br i1 %501, label %502, label %550

; <label>:502:                                    ; preds = %498
  %503 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  %504 = load i8*, i8** %503, align 8
  %505 = call i64 @strlen(i8* %504) #14
  %506 = trunc i64 %505 to i32
  %507 = sext i32 %506 to i64
  br label %508

; <label>:508:                                    ; preds = %518, %502
  %indvars.iv = phi i64 [ %indvars.iv.next, %518 ], [ %507, %502 ]
  call void @unroll_loop(i32 59)
  %509 = icmp sgt i64 %indvars.iv, 0
  br i1 %509, label %510, label %518

; <label>:510:                                    ; preds = %508
  %511 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  %512 = load i8*, i8** %511, align 8
  %513 = sub nsw i64 %indvars.iv, 1
  %514 = getelementptr inbounds i8, i8* %512, i64 %513
  %515 = load i8, i8* %514, align 1
  %516 = sext i8 %515 to i32
  %517 = icmp eq i32 %516, 47
  br label %518

; <label>:518:                                    ; preds = %510, %508
  %519 = phi i1 [ false, %508 ], [ %517, %510 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  br i1 %519, label %508, label %520

; <label>:520:                                    ; preds = %518
  %.03.lcssa.wide = phi i64 [ %indvars.iv, %518 ]
  %521 = trunc i64 %.03.lcssa.wide to i32
  %522 = add nsw i32 %521, 1
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %525 = load i8*, i8** %524, align 8
  %526 = call i64 @strlen(i8* %525) #14
  %527 = add i64 %523, %526
  %528 = add i64 %527, 1
  %529 = alloca i8, i64 %528, align 16, !track !206
  %530 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  %531 = load i8*, i8** %530, align 8
  %532 = sext i32 %521 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %529, i8* align 1 %531, i64 %532, i1 false), !track !207
  %533 = sext i32 %521 to i64
  %534 = getelementptr inbounds i8, i8* %529, i64 %533
  %535 = getelementptr inbounds i8, i8* %534, i32 1
  store i8 47, i8* %534, align 1
  %536 = call i8* @strcpy(i8* %535, i8* %469) #8, !track !208
  %537 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %538 = load i8, i8* %537, align 1
  %539 = trunc i8 %538 to i1
  br i1 %539, label %540, label %542

; <label>:540:                                    ; preds = %520
  %541 = getelementptr [41 x i8], [41 x i8]* @.str.72, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %541)
  br label %542

; <label>:542:                                    ; preds = %540, %520
  %543 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %544 = load i8, i8* %543, align 1
  %545 = trunc i8 %544 to i1
  br i1 %545, label %546, label %550

; <label>:546:                                    ; preds = %542
  %547 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  %548 = load i8*, i8** %547, align 8
  %549 = getelementptr [39 x i8], [39 x i8]* @.str.73, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %549, i8* %548, i8* %469, i8* %529)
  br label %550

; <label>:550:                                    ; preds = %546, %542, %498, %494, %489, %475
  %.04 = phi i8* [ %469, %489 ], [ %469, %498 ], [ %469, %494 ], [ %469, %475 ], [ %529, %542 ], [ %529, %546 ]
  %551 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 4
  %552 = load i32, i32* %551, align 8
  %553 = icmp eq i32 %552, 1
  br i1 %553, label %554, label %565

; <label>:554:                                    ; preds = %550
  %555 = getelementptr inbounds i8, i8* %.04, i64 0
  %556 = load i8, i8* %555, align 1
  %557 = sext i8 %556 to i32
  %558 = icmp ne i32 %557, 47
  br i1 %558, label %559, label %565

; <label>:559:                                    ; preds = %554
  %560 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %561 = load i8, i8* %560, align 1
  %562 = trunc i8 %561 to i1
  br i1 %562, label %563, label %565

; <label>:563:                                    ; preds = %559
  %564 = getelementptr [39 x i8], [39 x i8]* @.str.74, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %564)
  br label %565

; <label>:565:                                    ; preds = %550, %554, %563, %559
  %.05 = phi i32 [ 0, %559 ], [ 0, %563 ], [ 1, %554 ], [ 1, %550 ]
  %566 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 4
  %567 = load i32, i32* %566, align 8
  %568 = icmp eq i32 %567, 1
  br i1 %568, label %569, label %578

; <label>:569:                                    ; preds = %565
  %570 = call i8* @strchr(i8* %.04, i32 47) #14
  %571 = icmp ne i8* %570, null
  br i1 %571, label %572, label %578

; <label>:572:                                    ; preds = %569
  %573 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %574 = load i8, i8* %573, align 1
  %575 = trunc i8 %574 to i1
  br i1 %575, label %576, label %578

; <label>:576:                                    ; preds = %572
  %577 = getelementptr [43 x i8], [43 x i8]* @.str.75, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %577)
  br label %578

; <label>:578:                                    ; preds = %565, %569, %576, %572
  %.06 = phi i32 [ 3, %572 ], [ 3, %576 ], [ 2, %569 ], [ 2, %565 ]
  %579 = icmp slt i32 %.05, %.06
  br i1 %579, label %.lr.ph160.preheader, label %._crit_edge161

.lr.ph160.preheader:                              ; preds = %578
  br label %.lr.ph160

.lr.ph160:                                        ; preds = %.lr.ph160.preheader, %629
  %.07158 = phi i32 [ %630, %629 ], [ %.05, %.lr.ph160.preheader ]
  call void @unroll_loop(i32 60)
  switch i32 %.07158, label %585 [
    i32 0, label %580
    i32 1, label %590
    i32 2, label %583
  ]

; <label>:580:                                    ; preds = %.lr.ph160
  %581 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 6
  %582 = load i8*, i8** %581, align 8
  br label %590

; <label>:583:                                    ; preds = %.lr.ph160
  %584 = getelementptr [3 x i8], [3 x i8]* @.str.76, i32 0, i32 0
  br label %590

; <label>:585:                                    ; preds = %.lr.ph160
  %.07.lcssa149 = phi i32 [ %.07158, %.lr.ph160 ]
  %586 = getelementptr [49 x i8], [49 x i8]* @.str.77, i32 0, i32 0
  %587 = call i8* @gettext(i8* %586) #8
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %587)
  %588 = getelementptr [41 x i8], [41 x i8]* @.str.78, i32 0, i32 0
  %589 = call i8* @gettext(i8* %588) #8
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %589, i32 %.07.lcssa149, i32 %.05, i32 %.06)
  call void @abort() #16
  unreachable

; <label>:590:                                    ; preds = %.lr.ph160, %583, %580
  %.08 = phi i8* [ %584, %583 ], [ %582, %580 ], [ %.04, %.lr.ph160 ]
  %591 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %592 = load i8, i8* %591, align 8
  %593 = trunc i8 %592 to i1
  br i1 %593, label %597, label %594

; <label>:594:                                    ; preds = %590
  %595 = call i8* @quotearg_style(i32 7, i8* %.04)
  %596 = getelementptr [21 x i8], [21 x i8]* @.str.79, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %596, i32 %.07158, i8* %595)
  br label %597

; <label>:597:                                    ; preds = %594, %590
  %598 = load i32, i32* %9, align 4
  %599 = call i32 @ftp_cwd(i32 %598, i8* %.08)
  switch i32 %599, label %621 [
    i32 14, label %600
    i32 44, label %606
    i32 12, label %612
    i32 7, label %622
  ]

; <label>:600:                                    ; preds = %597
  %.lcssa154 = phi i32 [ %599, %597 ]
  %601 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %601)
  %602 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %603 = call i8* @gettext(i8* %602) #8, !track !209
  call void @logputs(i32 1, i8* %603)
  %604 = load i32, i32* %9, align 4
  call void @fd_close(i32 %604)
  %605 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %605, align 8
  br label %1445

; <label>:606:                                    ; preds = %597
  %.lcssa155 = phi i32 [ %599, %597 ]
  %607 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %607)
  %608 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %609 = call i8* @gettext(i8* %608) #8, !track !210
  call void @logputs(i32 1, i8* %609)
  %610 = load i32, i32* %9, align 4
  call void @fd_close(i32 %610)
  %611 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %611, align 8
  br label %1445

; <label>:612:                                    ; preds = %597
  %.lcssa156 = phi i32 [ %599, %597 ]
  %613 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %613)
  %614 = getelementptr [24 x i8], [24 x i8]* @.str.80, i32 0, i32 0
  %615 = call i8* @gettext(i8* %614) #8
  %616 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %617 = load i8*, i8** %616, align 8
  %618 = call i8* @quote(i8* %617)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %615, i8* %618)
  %619 = load i32, i32* %9, align 4
  call void @fd_close(i32 %619)
  %620 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %620, align 8
  br label %1445

; <label>:621:                                    ; preds = %597
  call void @abort() #16
  unreachable

; <label>:622:                                    ; preds = %597
  %623 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %624 = load i8, i8* %623, align 8
  %625 = trunc i8 %624 to i1
  br i1 %625, label %629, label %626

; <label>:626:                                    ; preds = %622
  %627 = getelementptr [7 x i8], [7 x i8]* @.str.58.81, i32 0, i32 0
  %628 = call i8* @gettext(i8* %627) #8, !track !211
  call void @logputs(i32 0, i8* %628)
  br label %629

; <label>:629:                                    ; preds = %622, %626
  %630 = add nuw nsw i32 %.07158, 1
  %631 = icmp ult i32 %630, %.06
  br i1 %631, label %.lr.ph160, label %._crit_edge161.loopexit

; <label>:632:                                    ; preds = %456
  %633 = getelementptr [23 x i8], [23 x i8]* @.str.81, i32 0, i32 0
  %634 = call i8* @gettext(i8* %633) #8, !track !212
  call void @logputs(i32 0, i8* %634)
  br label %._crit_edge161

._crit_edge161.loopexit:                          ; preds = %629
  br label %._crit_edge161

._crit_edge161:                                   ; preds = %._crit_edge161.loopexit, %464, %578, %632
  %635 = and i32 %24, 4
  %636 = icmp ne i32 %635, 0
  %637 = icmp eq i64 %1, 0
  %or.cond1 = and i1 %636, %637
  br i1 %or.cond1, label %638, label %679

; <label>:638:                                    ; preds = %._crit_edge161
  %639 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %640 = load i32, i32* %639, align 8
  %641 = icmp ne i32 %640, 0
  br i1 %641, label %642, label %651

; <label>:642:                                    ; preds = %638
  %643 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %644 = load i8, i8* %643, align 8
  %645 = trunc i8 %644 to i1
  br i1 %645, label %651, label %646

; <label>:646:                                    ; preds = %642
  %647 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %648 = load i8*, i8** %647, align 8
  %649 = call i8* @quotearg_style(i32 7, i8* %648)
  %650 = getelementptr [17 x i8], [17 x i8]* @.str.82, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %650, i8* %649)
  br label %651

; <label>:651:                                    ; preds = %642, %646, %638
  %652 = load i32, i32* %9, align 4
  %653 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %654 = load i8*, i8** %653, align 8
  %655 = call i32 @ftp_size(i32 %652, i8* %654, i64* %14)
  switch i32 %655, label %662 [
    i32 14, label %656
    i32 15, label %656
    i32 7, label %663
  ]

; <label>:656:                                    ; preds = %651, %651
  %657 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %657)
  %658 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %659 = call i8* @gettext(i8* %658) #8, !track !213
  call void @logputs(i32 1, i8* %659)
  %660 = load i32, i32* %9, align 4
  call void @fd_close(i32 %660)
  %661 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %661, align 8
  br label %1445

; <label>:662:                                    ; preds = %651
  call void @abort() #16
  unreachable

; <label>:663:                                    ; preds = %651
  %664 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %665 = load i8, i8* %664, align 8
  %666 = trunc i8 %665 to i1
  br i1 %666, label %679, label %667

; <label>:667:                                    ; preds = %663
  %668 = load i64, i64* %14, align 8
  %669 = icmp ne i64 %668, 0
  br i1 %669, label %670, label %673

; <label>:670:                                    ; preds = %667
  %671 = load i64, i64* %14, align 8
  %672 = call i8* @number_to_static_string(i64 %671)
  br label %676

; <label>:673:                                    ; preds = %667
  %674 = getelementptr [7 x i8], [7 x i8]* @.str.58.81, i32 0, i32 0
  %675 = call i8* @gettext(i8* %674) #8, !track !214
  br label %676

; <label>:676:                                    ; preds = %673, %670
  %677 = phi i8* [ %672, %670 ], [ %675, %673 ]
  %678 = getelementptr [4 x i8], [4 x i8]* @.str.83, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %678, i8* %677)
  br label %679

; <label>:679:                                    ; preds = %663, %676, %._crit_edge161
  %.029 = phi i8 [ 0, %._crit_edge161 ], [ 1, %676 ], [ 1, %663 ]
  %680 = and i32 %24, 4
  %681 = icmp ne i32 %680, 0
  %682 = icmp sgt i64 %3, 0
  %or.cond2 = and i1 %681, %682
  %683 = load i64, i64* %14, align 8
  %684 = icmp eq i64 %3, %683
  %or.cond4 = and i1 %or.cond2, %684
  br i1 %or.cond4, label %685, label %.preheader

.preheader:                                       ; preds = %679
  br label %690

; <label>:685:                                    ; preds = %679
  %686 = getelementptr [34 x i8], [34 x i8]* @.str.84, i32 0, i32 0
  %687 = call i8* @gettext(i8* %686) #8, !track !215
  call void @logputs(i32 0, i8* %687)
  %688 = load i32, i32* %9, align 4
  call void @fd_close(i32 %688)
  %689 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %689, align 8
  br label %1445

; <label>:690:                                    ; preds = %.preheader, %1437
  %.030 = phi i8 [ %.232, %1437 ], [ 0, %.preheader ]
  %.023 = phi i64 [ %.427, %1437 ], [ 0, %.preheader ]
  %.09 = phi i32 [ %.3, %1437 ], [ -1, %.preheader ]
  call void @unroll_loop(i32 61)
  %691 = and i32 %24, 12
  %692 = icmp ne i32 %691, 0
  br i1 %692, label %693, label %802

; <label>:693:                                    ; preds = %690
  %694 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 65
  %695 = load i8, i8* %694, align 2
  %696 = trunc i8 %695 to i1
  %697 = load i32, i32* %9, align 4
  br i1 %696, label %698, label %755

; <label>:698:                                    ; preds = %693
  %699 = call i32 @ftp_do_pasv(i32 %697, %struct.ip_address* %18, i32* %19)
  switch i32 %699, label %720 [
    i32 14, label %700
    i32 44, label %706
    i32 29, label %712
    i32 28, label %716
    i32 7, label %723
  ]

; <label>:700:                                    ; preds = %698
  %.lcssa39 = phi i32 [ %699, %698 ]
  %701 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %701)
  %702 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %703 = call i8* @gettext(i8* %702) #8, !track !216
  call void @logputs(i32 1, i8* %703)
  %704 = load i32, i32* %9, align 4
  call void @fd_close(i32 %704)
  %705 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %705, align 8
  br label %1445

; <label>:706:                                    ; preds = %698
  %.lcssa40 = phi i32 [ %699, %698 ]
  %707 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %707)
  %708 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %709 = call i8* @gettext(i8* %708) #8, !track !217
  call void @logputs(i32 1, i8* %709)
  %710 = load i32, i32* %9, align 4
  call void @fd_close(i32 %710)
  %711 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %711, align 8
  br label %1445

; <label>:712:                                    ; preds = %698
  %713 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %713)
  %714 = getelementptr [32 x i8], [32 x i8]* @.str.85, i32 0, i32 0
  %715 = call i8* @gettext(i8* %714) #8, !track !218
  call void @logputs(i32 1, i8* %715)
  br label %721

; <label>:716:                                    ; preds = %698
  %717 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %717)
  %718 = getelementptr [29 x i8], [29 x i8]* @.str.86, i32 0, i32 0
  %719 = call i8* @gettext(i8* %718) #8, !track !219
  call void @logputs(i32 1, i8* %719)
  br label %721

; <label>:720:                                    ; preds = %698
  call void @abort() #16
  unreachable

; <label>:721:                                    ; preds = %716, %712
  %722 = icmp eq i32 %699, 7
  br i1 %722, label %723, label %.loopexit17

; <label>:723:                                    ; preds = %721, %698
  %724 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %725 = load i8, i8* %724, align 1
  %726 = trunc i8 %725 to i1
  br i1 %726, label %727, label %731

; <label>:727:                                    ; preds = %723
  %728 = call i8* @print_address(%struct.ip_address* %18)
  %729 = load i32, i32* %19, align 4
  %730 = getelementptr [33 x i8], [33 x i8]* @.str.87, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %730, i8* %728, i32 %729)
  br label %731

; <label>:731:                                    ; preds = %723, %727
  %732 = load i32, i32* %19, align 4
  %733 = call i32 @connect_to_ip(%struct.ip_address* %18, i32 %732, i8* null)
  %734 = icmp slt i32 %733, 0
  br i1 %734, label %735, label %748

; <label>:735:                                    ; preds = %731
  %736 = call i32* @__errno_location() #15
  %737 = load i32, i32* %736, align 4
  %738 = load i32, i32* %9, align 4
  call void @fd_close(i32 %738)
  %739 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %739, align 8
  %740 = getelementptr [36 x i8], [36 x i8]* @.str.88, i32 0, i32 0
  %741 = call i8* @gettext(i8* %740) #8
  %742 = call i8* @print_address(%struct.ip_address* %18)
  %743 = load i32, i32* %19, align 4
  %744 = call i8* @strerror(i32 %737) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %741, i8* %742, i32 %743, i8* %744)
  %745 = call zeroext i1 @retryable_socket_connect_error(i32 %737)
  %746 = zext i1 %745 to i64
  %747 = select i1 %745, i32 3, i32 5
  br label %1445

; <label>:748:                                    ; preds = %731
  %749 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %750 = load i8, i8* %749, align 8
  %751 = trunc i8 %750 to i1
  br i1 %751, label %802, label %752

; <label>:752:                                    ; preds = %748
  %753 = getelementptr [10 x i8], [10 x i8]* @.str.61, i32 0, i32 0
  %754 = call i8* @gettext(i8* %753) #8, !track !220
  call void @logputs(i32 0, i8* %754)
  br label %802

; <label>:755:                                    ; preds = %693
  %756 = call i32 @ftp_do_port(i32 %697, i32* %10)
  switch i32 %756, label %794 [
    i32 14, label %757
    i32 44, label %764
    i32 2, label %771
    i32 11, label %780
    i32 10, label %787
    i32 7, label %795
  ]

; <label>:757:                                    ; preds = %755
  %.09.lcssa54 = phi i32 [ %.09, %755 ]
  %.lcssa33 = phi i32 [ %756, %755 ]
  %758 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %758)
  %759 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %760 = call i8* @gettext(i8* %759) #8, !track !221
  call void @logputs(i32 1, i8* %760)
  %761 = load i32, i32* %9, align 4
  call void @fd_close(i32 %761)
  %762 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %762, align 8
  call void @fd_close(i32 %.09.lcssa54)
  %763 = load i32, i32* %10, align 4
  call void @fd_close(i32 %763)
  br label %1445

; <label>:764:                                    ; preds = %755
  %.09.lcssa55 = phi i32 [ %.09, %755 ]
  %.lcssa34 = phi i32 [ %756, %755 ]
  %765 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %765)
  %766 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %767 = call i8* @gettext(i8* %766) #8, !track !222
  call void @logputs(i32 1, i8* %767)
  %768 = load i32, i32* %9, align 4
  call void @fd_close(i32 %768)
  %769 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %769, align 8
  call void @fd_close(i32 %.09.lcssa55)
  %770 = load i32, i32* %10, align 4
  call void @fd_close(i32 %770)
  br label %1445

; <label>:771:                                    ; preds = %755
  %.09.lcssa56 = phi i32 [ %.09, %755 ]
  %.lcssa35 = phi i32 [ %756, %755 ]
  %772 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %772)
  %773 = call i32* @__errno_location() #15
  %774 = load i32, i32* %773, align 4
  %775 = call i8* @strerror(i32 %774) #8
  %776 = getelementptr [12 x i8], [12 x i8]* @.str.89, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %776, i8* %775)
  %777 = load i32, i32* %9, align 4
  call void @fd_close(i32 %777)
  %778 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %778, align 8
  call void @fd_close(i32 %.09.lcssa56)
  %779 = load i32, i32* %10, align 4
  call void @fd_close(i32 %779)
  br label %1445

; <label>:780:                                    ; preds = %755
  %.09.lcssa57 = phi i32 [ %.09, %755 ]
  %.lcssa36 = phi i32 [ %756, %755 ]
  %781 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %781)
  %782 = getelementptr [18 x i8], [18 x i8]* @.str.90, i32 0, i32 0
  %783 = call i8* @gettext(i8* %782) #8
  %784 = call i32* @__errno_location() #15
  %785 = load i32, i32* %784, align 4
  %786 = call i8* @strerror(i32 %785) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %783, i8* %786)
  call void @fd_close(i32 %.09.lcssa57)
  br label %1445

; <label>:787:                                    ; preds = %755
  %.09.lcssa58 = phi i32 [ %.09, %755 ]
  %.lcssa37 = phi i32 [ %756, %755 ]
  %788 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %788)
  %789 = getelementptr [15 x i8], [15 x i8]* @.str.91, i32 0, i32 0
  %790 = call i8* @gettext(i8* %789) #8, !track !223
  call void @logputs(i32 1, i8* %790)
  %791 = load i32, i32* %9, align 4
  call void @fd_close(i32 %791)
  %792 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %792, align 8
  call void @fd_close(i32 %.09.lcssa58)
  %793 = load i32, i32* %10, align 4
  call void @fd_close(i32 %793)
  br label %1445

; <label>:794:                                    ; preds = %755
  call void @abort() #16
  unreachable

; <label>:795:                                    ; preds = %755
  %796 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %797 = load i8, i8* %796, align 8
  %798 = trunc i8 %797 to i1
  br i1 %798, label %802, label %799

; <label>:799:                                    ; preds = %795
  %800 = getelementptr [10 x i8], [10 x i8]* @.str.61, i32 0, i32 0
  %801 = call i8* @gettext(i8* %800) #8, !track !224
  call void @logputs(i32 0, i8* %801)
  br label %802

; <label>:802:                                    ; preds = %748, %752, %799, %795, %690
  %.2 = phi i32 [ %.09, %690 ], [ %733, %748 ], [ %733, %752 ], [ %.09, %799 ], [ %.09, %795 ]
  %803 = icmp ne i64 %3, 0
  %804 = and i32 %24, 4
  %805 = icmp ne i32 %804, 0
  %or.cond6 = and i1 %803, %805
  br i1 %or.cond6, label %806, label %843

; <label>:806:                                    ; preds = %802
  %807 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %808 = load i8, i8* %807, align 8
  %809 = trunc i8 %808 to i1
  br i1 %809, label %813, label %810

; <label>:810:                                    ; preds = %806
  %811 = call i8* @number_to_static_string(i64 %3)
  %812 = getelementptr [17 x i8], [17 x i8]* @.str.92, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %812, i8* %811)
  br label %813

; <label>:813:                                    ; preds = %810, %806
  %814 = load i32, i32* %9, align 4
  %815 = call i32 @ftp_rest(i32 %814, i64 %3)
  switch i32 %815, label %833 [
    i32 14, label %816
    i32 44, label %823
    i32 17, label %830
    i32 7, label %834
  ]

; <label>:816:                                    ; preds = %813
  %.2.lcssa89 = phi i32 [ %.2, %813 ]
  %.lcssa44 = phi i32 [ %815, %813 ]
  %817 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %817)
  %818 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %819 = call i8* @gettext(i8* %818) #8, !track !225
  call void @logputs(i32 1, i8* %819)
  %820 = load i32, i32* %9, align 4
  call void @fd_close(i32 %820)
  %821 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %821, align 8
  call void @fd_close(i32 %.2.lcssa89)
  %822 = load i32, i32* %10, align 4
  call void @fd_close(i32 %822)
  br label %1445

; <label>:823:                                    ; preds = %813
  %.2.lcssa90 = phi i32 [ %.2, %813 ]
  %.lcssa45 = phi i32 [ %815, %813 ]
  %824 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %824)
  %825 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %826 = call i8* @gettext(i8* %825) #8, !track !226
  call void @logputs(i32 1, i8* %826)
  %827 = load i32, i32* %9, align 4
  call void @fd_close(i32 %827)
  %828 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %828, align 8
  call void @fd_close(i32 %.2.lcssa90)
  %829 = load i32, i32* %10, align 4
  call void @fd_close(i32 %829)
  br label %1445

; <label>:830:                                    ; preds = %813
  %831 = getelementptr [38 x i8], [38 x i8]* @.str.93, i32 0, i32 0
  %832 = call i8* @gettext(i8* %831) #8, !track !227
  call void @logputs(i32 0, i8* %832)
  br label %834

; <label>:833:                                    ; preds = %813
  call void @abort() #16
  unreachable

; <label>:834:                                    ; preds = %813, %830
  %.131 = phi i8 [ 1, %830 ], [ %.030, %813 ]
  %835 = icmp ne i32 %815, 17
  br i1 %835, label %836, label %843

; <label>:836:                                    ; preds = %834
  %837 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %838 = load i8, i8* %837, align 8
  %839 = trunc i8 %838 to i1
  br i1 %839, label %843, label %840

; <label>:840:                                    ; preds = %836
  %841 = getelementptr [10 x i8], [10 x i8]* @.str.61, i32 0, i32 0
  %842 = call i8* @gettext(i8* %841) #8, !track !228
  call void @logputs(i32 0, i8* %842)
  br label %843

; <label>:843:                                    ; preds = %834, %836, %840, %802
  %.232 = phi i8 [ %.030, %802 ], [ %.131, %840 ], [ %.131, %836 ], [ %.131, %834 ]
  %844 = and i32 %24, 4
  %845 = icmp ne i32 %844, 0
  br i1 %845, label %846, label %946

; <label>:846:                                    ; preds = %843
  %847 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %848 = load i8, i8* %847, align 8
  %849 = trunc i8 %848 to i1
  br i1 %849, label %850, label %890

; <label>:850:                                    ; preds = %846
  %.2.lcssa91 = phi i32 [ %.2, %846 ]
  %851 = call i32 @ftp_get_listing(%struct.url* %0, %struct.ccon* %4, %struct.fileinfo** %20)
  %852 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 1
  %853 = load i32, i32* %852, align 4
  %854 = or i32 %853, 4
  store i32 %854, i32* %852, align 4
  %855 = icmp eq i32 %851, 25
  br i1 %855, label %856, label %886

; <label>:856:                                    ; preds = %850
  %857 = load %struct.fileinfo*, %struct.fileinfo** %20, align 8
  %858 = icmp ne %struct.fileinfo* %857, null
  br i1 %858, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %856
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %866
  call void @unroll_loop(i32 62)
  %859 = load %struct.fileinfo*, %struct.fileinfo** %20, align 8
  %860 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %859, i32 0, i32 1
  %861 = load i8*, i8** %860, align 8
  %862 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %863 = load i8*, i8** %862, align 8
  %864 = call i32 @strcmp(i8* %861, i8* %863) #14
  %865 = icmp ne i32 %864, 0
  br i1 %865, label %866, label %.loopexit.loopexit

; <label>:866:                                    ; preds = %.lr.ph
  %867 = load %struct.fileinfo*, %struct.fileinfo** %20, align 8
  %868 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %867, i32 0, i32 8
  %869 = load %struct.fileinfo*, %struct.fileinfo** %868, align 8
  store %struct.fileinfo* %869, %struct.fileinfo** %20, align 8
  %870 = load %struct.fileinfo*, %struct.fileinfo** %20, align 8
  %871 = icmp ne %struct.fileinfo* %870, null
  br i1 %871, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph, %866
  %.02.ph = phi i8 [ 0, %866 ], [ 1, %.lr.ph ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %856
  %.02 = phi i8 [ 0, %856 ], [ %.02.ph, %.loopexit.loopexit ]
  %872 = trunc i8 %.02 to i1
  %873 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %873)
  br i1 %872, label %874, label %880

; <label>:874:                                    ; preds = %.loopexit
  %875 = getelementptr [17 x i8], [17 x i8]* @.str.94, i32 0, i32 0
  %876 = call i8* @gettext(i8* %875) #8
  %877 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %878 = load i8*, i8** %877, align 8
  %879 = call i8* @quote(i8* %878)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %876, i8* %879)
  br label %886

; <label>:880:                                    ; preds = %.loopexit
  %881 = getelementptr [18 x i8], [18 x i8]* @.str.95, i32 0, i32 0
  %882 = call i8* @gettext(i8* %881) #8
  %883 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %884 = load i8*, i8** %883, align 8
  %885 = call i8* @quote(i8* %884)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %882, i8* %885)
  br label %886

; <label>:886:                                    ; preds = %874, %880, %850
  %887 = load i32, i32* %9, align 4
  call void @fd_close(i32 %887)
  %888 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %888, align 8
  call void @fd_close(i32 %.2.lcssa91)
  %889 = load i32, i32* %10, align 4
  call void @fd_close(i32 %889)
  br label %1445

; <label>:890:                                    ; preds = %846
  %891 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %892 = load i32, i32* %891, align 8
  %893 = icmp ne i32 %892, 0
  br i1 %893, label %894, label %907

; <label>:894:                                    ; preds = %890
  %895 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %896 = load i8, i8* %895, align 8
  %897 = trunc i8 %896 to i1
  br i1 %897, label %907, label %898

; <label>:898:                                    ; preds = %894
  %899 = icmp ne i64 %3, 0
  br i1 %899, label %900, label %902

; <label>:900:                                    ; preds = %898
  %901 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %901)
  br label %902

; <label>:902:                                    ; preds = %900, %898
  %903 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %904 = load i8*, i8** %903, align 8
  %905 = call i8* @quotearg_style(i32 7, i8* %904)
  %906 = getelementptr [17 x i8], [17 x i8]* @.str.96, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %906, i8* %905)
  br label %907

; <label>:907:                                    ; preds = %894, %902, %890
  %908 = load i32, i32* %9, align 4
  %909 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %910 = load i8*, i8** %909, align 8
  %911 = call i32 @ftp_retr(i32 %908, i8* %910)
  switch i32 %911, label %934 [
    i32 14, label %912
    i32 44, label %919
    i32 12, label %926
    i32 7, label %935
  ]

; <label>:912:                                    ; preds = %907
  %.2.lcssa93 = phi i32 [ %.2, %907 ]
  %.lcssa47 = phi i32 [ %911, %907 ]
  %913 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %913)
  %914 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %915 = call i8* @gettext(i8* %914) #8, !track !229
  call void @logputs(i32 1, i8* %915)
  %916 = load i32, i32* %9, align 4
  call void @fd_close(i32 %916)
  %917 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %917, align 8
  call void @fd_close(i32 %.2.lcssa93)
  %918 = load i32, i32* %10, align 4
  call void @fd_close(i32 %918)
  br label %1445

; <label>:919:                                    ; preds = %907
  %.2.lcssa94 = phi i32 [ %.2, %907 ]
  %.lcssa48 = phi i32 [ %911, %907 ]
  %920 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %920)
  %921 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %922 = call i8* @gettext(i8* %921) #8, !track !230
  call void @logputs(i32 1, i8* %922)
  %923 = load i32, i32* %9, align 4
  call void @fd_close(i32 %923)
  %924 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %924, align 8
  call void @fd_close(i32 %.2.lcssa94)
  %925 = load i32, i32* %10, align 4
  call void @fd_close(i32 %925)
  br label %1445

; <label>:926:                                    ; preds = %907
  %.2.lcssa95 = phi i32 [ %.2, %907 ]
  %.lcssa49 = phi i32 [ %911, %907 ]
  %927 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %927)
  %928 = getelementptr [19 x i8], [19 x i8]* @.str.97, i32 0, i32 0
  %929 = call i8* @gettext(i8* %928) #8
  %930 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %931 = load i8*, i8** %930, align 8
  %932 = call i8* @quote(i8* %931)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %929, i8* %932)
  call void @fd_close(i32 %.2.lcssa95)
  %933 = load i32, i32* %10, align 4
  call void @fd_close(i32 %933)
  br label %1445

; <label>:934:                                    ; preds = %907
  call void @abort() #16
  unreachable

; <label>:935:                                    ; preds = %907
  %936 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %937 = load i8, i8* %936, align 8
  %938 = trunc i8 %937 to i1
  br i1 %938, label %942, label %939

; <label>:939:                                    ; preds = %935
  %940 = getelementptr [7 x i8], [7 x i8]* @.str.58.81, i32 0, i32 0
  %941 = call i8* @gettext(i8* %940) #8, !track !231
  call void @logputs(i32 0, i8* %941)
  br label %942

; <label>:942:                                    ; preds = %939, %935
  %943 = trunc i8 %.029 to i1
  br i1 %943, label %946, label %944

; <label>:944:                                    ; preds = %942
  %945 = load i64, i64* %6, align 8
  store i64 %945, i64* %14, align 8
  br label %946

; <label>:946:                                    ; preds = %942, %944, %843
  %947 = and i32 %24, 8
  %948 = icmp ne i32 %947, 0
  br i1 %948, label %949, label %999

; <label>:949:                                    ; preds = %946
  %950 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %951 = load i8, i8* %950, align 8
  %952 = trunc i8 %951 to i1
  br i1 %952, label %955, label %953

; <label>:953:                                    ; preds = %949
  %954 = getelementptr [14 x i8], [14 x i8]* @.str.98, i32 0, i32 0
  call void @logputs(i32 0, i8* %954)
  br label %955

; <label>:955:                                    ; preds = %953, %949
  %956 = load i32, i32* %9, align 4
  %957 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %958 = load i32, i32* %957, align 8
  %959 = and i32 %958, 4
  %960 = icmp ne i32 %959, 0
  %961 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %962 = load i32, i32* %961, align 8
  %963 = and i32 %962, 8
  %964 = icmp ne i32 %963, 0
  %965 = call i32 @ftp_list(i32 %956, i8* null, i1 zeroext %960, i1 zeroext %964, i8* %16)
  switch i32 %965, label %987 [
    i32 14, label %966
    i32 44, label %973
    i32 12, label %980
    i32 7, label %988
  ]

; <label>:966:                                    ; preds = %955
  %.2.lcssa97 = phi i32 [ %.2, %955 ]
  %.lcssa51 = phi i32 [ %965, %955 ]
  %967 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %967)
  %968 = getelementptr [55 x i8], [55 x i8]* @.str.47.80, i32 0, i32 0
  %969 = call i8* @gettext(i8* %968) #8, !track !232
  call void @logputs(i32 1, i8* %969)
  %970 = load i32, i32* %9, align 4
  call void @fd_close(i32 %970)
  %971 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %971, align 8
  call void @fd_close(i32 %.2.lcssa97)
  %972 = load i32, i32* %10, align 4
  call void @fd_close(i32 %972)
  br label %1445

; <label>:973:                                    ; preds = %955
  %.2.lcssa98 = phi i32 [ %.2, %955 ]
  %.lcssa52 = phi i32 [ %965, %955 ]
  %974 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %974)
  %975 = getelementptr [43 x i8], [43 x i8]* @.str.49, i32 0, i32 0
  %976 = call i8* @gettext(i8* %975) #8, !track !233
  call void @logputs(i32 1, i8* %976)
  %977 = load i32, i32* %9, align 4
  call void @fd_close(i32 %977)
  %978 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %978, align 8
  call void @fd_close(i32 %.2.lcssa98)
  %979 = load i32, i32* %10, align 4
  call void @fd_close(i32 %979)
  br label %1445

; <label>:980:                                    ; preds = %955
  %.2.lcssa99 = phi i32 [ %.2, %955 ]
  %.lcssa53 = phi i32 [ %965, %955 ]
  %981 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %981)
  %982 = getelementptr [32 x i8], [32 x i8]* @.str.99, i32 0, i32 0
  %983 = call i8* @gettext(i8* %982) #8
  %984 = getelementptr [2 x i8], [2 x i8]* @.str.100, i32 0, i32 0
  %985 = call i8* @quote(i8* %984)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %983, i8* %985)
  call void @fd_close(i32 %.2.lcssa99)
  %986 = load i32, i32* %10, align 4
  call void @fd_close(i32 %986)
  br label %1445

; <label>:987:                                    ; preds = %955
  call void @abort() #16
  unreachable

; <label>:988:                                    ; preds = %955
  %989 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %990 = load i8, i8* %989, align 8
  %991 = trunc i8 %990 to i1
  br i1 %991, label %995, label %992

; <label>:992:                                    ; preds = %988
  %993 = getelementptr [7 x i8], [7 x i8]* @.str.58.81, i32 0, i32 0
  %994 = call i8* @gettext(i8* %993) #8, !track !234
  call void @logputs(i32 0, i8* %994)
  br label %995

; <label>:995:                                    ; preds = %992, %988
  %996 = trunc i8 %.029 to i1
  br i1 %996, label %999, label %997

; <label>:997:                                    ; preds = %995
  %998 = load i64, i64* %6, align 8
  store i64 %998, i64* %14, align 8
  br label %999

; <label>:999:                                    ; preds = %995, %997, %946
  %1000 = and i32 %24, 12
  %1001 = icmp ne i32 %1000, 0
  br i1 %1001, label %1002, label %.loopexit17

; <label>:1002:                                   ; preds = %999
  %1003 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %1004 = load i8, i8* %1003, align 8
  %1005 = trunc i8 %1004 to i1
  %.not7 = xor i1 %1005, true
  %1006 = and i32 %24, 8
  %1007 = icmp ne i32 %1006, 0
  %or.cond9 = or i1 %.not7, %1007
  br i1 %or.cond9, label %1008, label %.loopexit17

; <label>:1008:                                   ; preds = %1002
  %1009 = icmp ne i64 %1, 0
  %1010 = icmp ne i64 %3, 0
  %or.cond10 = and i1 %1009, %1010
  %1011 = load i64, i64* %14, align 8
  %1012 = icmp ne i64 %1011, 0
  %or.cond12 = and i1 %or.cond10, %1012
  br i1 %or.cond12, label %1013, label %1024

; <label>:1013:                                   ; preds = %1008
  %1014 = load i64, i64* %14, align 8
  %1015 = sub nsw i64 %1, %3
  %1016 = icmp eq i64 %1014, %1015
  br i1 %1016, label %1017, label %1024

; <label>:1017:                                   ; preds = %1013
  %1018 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %1019 = load i8, i8* %1018, align 1
  %1020 = trunc i8 %1019 to i1
  br i1 %1020, label %1021, label %1023

; <label>:1021:                                   ; preds = %1017
  %1022 = getelementptr [36 x i8], [36 x i8]* @.str.101, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %1022)
  br label %1023

; <label>:1023:                                   ; preds = %1017, %1021
  store i64 %1, i64* %14, align 8
  br label %1024

; <label>:1024:                                   ; preds = %1023, %1013, %1008
  %1025 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 65
  %1026 = load i8, i8* %1025, align 2
  %1027 = trunc i8 %1026 to i1
  br i1 %1027, label %1037, label %1028

; <label>:1028:                                   ; preds = %1024
  %1029 = load i32, i32* %10, align 4
  %1030 = call i32 @accept_connection(i32 %1029)
  %1031 = icmp slt i32 %1030, 0
  br i1 %1031, label %1032, label %1037

; <label>:1032:                                   ; preds = %1028
  %1033 = call i32* @__errno_location() #15
  %1034 = load i32, i32* %1033, align 4
  %1035 = call i8* @strerror(i32 %1034) #8
  %1036 = getelementptr [12 x i8], [12 x i8]* @.str.102, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1036, i8* %1035)
  br label %1445

; <label>:1037:                                   ; preds = %1028, %1024
  %.3 = phi i32 [ %.2, %1024 ], [ %1030, %1028 ]
  %1038 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %1039 = icmp ne %struct._IO_FILE* %1038, null
  br i1 %1039, label %1040, label %1045

; <label>:1040:                                   ; preds = %1037
  %1041 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 1
  %1042 = load i32, i32* %1041, align 4
  %1043 = and i32 %1042, 8
  %1044 = icmp ne i32 %1043, 0
  br i1 %1044, label %1045, label %1145

; <label>:1045:                                   ; preds = %1040, %1037
  %1046 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1047 = load i8*, i8** %1046, align 8
  %1048 = call i32 @mkalldirs(i8* %1047)
  %1049 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %1050 = load i32, i32* %1049, align 8
  %1051 = icmp ne i32 %1050, 0
  br i1 %1051, label %1052, label %1055

; <label>:1052:                                   ; preds = %1045
  %1053 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1054 = load i8*, i8** %1053, align 8
  call void @rotate_backups(i8* %1054)
  br label %1055

; <label>:1055:                                   ; preds = %1052, %1045
  %1056 = icmp ne i64 %3, 0
  br i1 %1056, label %1057, label %1067

; <label>:1057:                                   ; preds = %1055
  %1058 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 1
  %1059 = load i32, i32* %1058, align 4
  %1060 = and i32 %1059, 8
  %1061 = icmp ne i32 %1060, 0
  br i1 %1061, label %1067, label %1062

; <label>:1062:                                   ; preds = %1057
  %1063 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1064 = load i8*, i8** %1063, align 8
  %1065 = getelementptr [3 x i8], [3 x i8]* @.str.103, i32 0, i32 0
  %1066 = call %struct._IO_FILE* @fopen(i8* %1064, i8* %1065), !track !235
  br label %1133

; <label>:1067:                                   ; preds = %1057, %1055
  %1068 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %1069 = load i8, i8* %1068, align 2
  %1070 = trunc i8 %1069 to i1
  br i1 %1070, label %1088, label %1071

; <label>:1071:                                   ; preds = %1067
  %1072 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %1073 = load i8, i8* %1072, align 1
  %1074 = trunc i8 %1073 to i1
  br i1 %1074, label %1088, label %1075

; <label>:1075:                                   ; preds = %1071
  %1076 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %1077 = load i8, i8* %1076, align 4
  %1078 = trunc i8 %1077 to i1
  br i1 %1078, label %1088, label %1079

; <label>:1079:                                   ; preds = %1075
  %1080 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %1081 = load i8, i8* %1080, align 8
  %1082 = trunc i8 %1081 to i1
  br i1 %1082, label %1088, label %1083

; <label>:1083:                                   ; preds = %1079
  %1084 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %1085 = load i8*, i8** %1084, align 8
  %1086 = icmp ne i8* %1085, null
  %1087 = icmp sgt i32 %5, 0
  %or.cond13 = or i1 %1086, %1087
  br i1 %or.cond13, label %1088, label %1116

; <label>:1088:                                   ; preds = %1083, %1079, %1075, %1071, %1067
  %1089 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 18
  %1090 = load i8, i8* %1089, align 1
  %1091 = trunc i8 %1090 to i1
  br i1 %1091, label %1092, label %1111

; <label>:1092:                                   ; preds = %1088
  %1093 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1094 = load i8*, i8** %1093, align 8
  %1095 = call zeroext i1 @file_exists_p(i8* %1094)
  br i1 %1095, label %1096, label %1111

; <label>:1096:                                   ; preds = %1092
  %1097 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1098 = load i8*, i8** %1097, align 8
  %1099 = call i32 @unlink(i8* %1098) #8
  %1100 = icmp slt i32 %1099, 0
  br i1 %1100, label %1101, label %1111

; <label>:1101:                                   ; preds = %1096
  %.3.lcssa113 = phi i32 [ %.3, %1096 ]
  %1102 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1103 = load i8*, i8** %1102, align 8
  %1104 = call i32* @__errno_location() #15
  %1105 = load i32, i32* %1104, align 4
  %1106 = call i8* @strerror(i32 %1105) #8
  %1107 = getelementptr [8 x i8], [8 x i8]* @.str.104, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1107, i8* %1103, i8* %1106)
  %1108 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1108)
  %1109 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %1109, align 8
  call void @fd_close(i32 %.3.lcssa113)
  %1110 = load i32, i32* %10, align 4
  call void @fd_close(i32 %1110)
  br label %1445

; <label>:1111:                                   ; preds = %1096, %1092, %1088
  %1112 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1113 = load i8*, i8** %1112, align 8
  %1114 = getelementptr [3 x i8], [3 x i8]* @.str.105, i32 0, i32 0
  %1115 = call %struct._IO_FILE* @fopen(i8* %1113, i8* %1114), !track !236
  br label %1133

; <label>:1116:                                   ; preds = %1083
  %1117 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1118 = load i8*, i8** %1117, align 8
  %1119 = call %struct._IO_FILE* @fopen_excl(i8* %1118, i32 1)
  %1120 = icmp ne %struct._IO_FILE* %1119, null
  br i1 %1120, label %1133, label %1121

; <label>:1121:                                   ; preds = %1116
  %1122 = call i32* @__errno_location() #15
  %1123 = load i32, i32* %1122, align 4
  %1124 = icmp eq i32 %1123, 17
  br i1 %1124, label %1125, label %1133

; <label>:1125:                                   ; preds = %1121
  %.3.lcssa = phi i32 [ %.3, %1121 ]
  %1126 = getelementptr [31 x i8], [31 x i8]* @.str.106, i32 0, i32 0
  %1127 = call i8* @gettext(i8* %1126) #8
  %1128 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1129 = load i8*, i8** %1128, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1127, i8* %1129)
  %1130 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1130)
  %1131 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %1131, align 8
  call void @fd_close(i32 %.3.lcssa)
  %1132 = load i32, i32* %10, align 4
  call void @fd_close(i32 %1132)
  br label %1445

; <label>:1133:                                   ; preds = %1111, %1121, %1116, %1062
  %.113 = phi %struct._IO_FILE* [ %1066, %1062 ], [ %1115, %1111 ], [ %1119, %1121 ], [ %1119, %1116 ]
  %1134 = icmp ne %struct._IO_FILE* %.113, null
  br i1 %1134, label %1147, label %1135

; <label>:1135:                                   ; preds = %1133
  %.3.lcssa114 = phi i32 [ %.3, %1133 ]
  %1136 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1137 = load i8*, i8** %1136, align 8
  %1138 = call i32* @__errno_location() #15
  %1139 = load i32, i32* %1138, align 4
  %1140 = call i8* @strerror(i32 %1139) #8
  %1141 = getelementptr [8 x i8], [8 x i8]* @.str.104, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1141, i8* %1137, i8* %1140)
  %1142 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1142)
  %1143 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %1143, align 8
  call void @fd_close(i32 %.3.lcssa114)
  %1144 = load i32, i32* %10, align 4
  call void @fd_close(i32 %1144)
  br label %1445

; <label>:1145:                                   ; preds = %1040
  %1146 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  br label %1147

; <label>:1147:                                   ; preds = %1133, %1145
  %.214 = phi %struct._IO_FILE* [ %1146, %1145 ], [ %.113, %1133 ]
  %1148 = icmp ne i64 %1, 0
  br i1 %1148, label %1149, label %1150

; <label>:1149:                                   ; preds = %1147
  call void @print_length(i64 %1, i64 %3, i1 zeroext true)
  store i64 %1, i64* %14, align 8
  br label %1155

; <label>:1150:                                   ; preds = %1147
  %1151 = load i64, i64* %14, align 8
  %1152 = icmp ne i64 %1151, 0
  br i1 %1152, label %1153, label %1155

; <label>:1153:                                   ; preds = %1150
  %1154 = load i64, i64* %14, align 8
  call void @print_length(i64 %1154, i64 %3, i1 zeroext false)
  br label %1155

; <label>:1155:                                   ; preds = %1150, %1153, %1149
  %1156 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %1157 = load i32, i32* %1156, align 8
  %1158 = icmp eq i32 %1157, 3
  br i1 %1158, label %1159, label %1190

; <label>:1159:                                   ; preds = %1155
  %1160 = trunc i8 %.318 to i1
  br i1 %1160, label %1161, label %1190

; <label>:1161:                                   ; preds = %1159
  %1162 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 125
  %1163 = load i8, i8* %1162, align 1
  %1164 = trunc i8 %1163 to i1
  br i1 %1164, label %1165, label %1169

; <label>:1165:                                   ; preds = %1161
  %1166 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %1167 = load i8*, i8** %1166, align 8
  %1168 = call zeroext i1 @ssl_connect_wget(i32 %.3, i8* %1167, i32* %9)
  br i1 %1168, label %1182, label %1169

; <label>:1169:                                   ; preds = %1165, %1161
  %1170 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 125
  %1171 = load i8, i8* %1170, align 1
  %1172 = trunc i8 %1171 to i1
  br i1 %1172, label %1173, label %1175

; <label>:1173:                                   ; preds = %1169
  %1174 = getelementptr [72 x i8], [72 x i8]* @.str.107, i32 0, i32 0
  call void @logputs(i32 1, i8* %1174)
  br label %1175

; <label>:1175:                                   ; preds = %1173, %1169
  %1176 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %1177 = load i8*, i8** %1176, align 8
  %1178 = call zeroext i1 @ssl_connect_wget(i32 %.3, i8* %1177, i32* null)
  br i1 %1178, label %1184, label %1179

; <label>:1179:                                   ; preds = %1175
  %.214.lcssa = phi %struct._IO_FILE* [ %.214, %1175 ]
  %.3.lcssa115 = phi i32 [ %.3, %1175 ]
  %1180 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1180)
  call void @fd_close(i32 %.3.lcssa115)
  %1181 = getelementptr [34 x i8], [34 x i8]* @.str.108, i32 0, i32 0
  call void @logputs(i32 1, i8* %1181)
  br label %1439

; <label>:1182:                                   ; preds = %1165
  %1183 = getelementptr [42 x i8], [42 x i8]* @.str.109, i32 0, i32 0
  call void @logputs(i32 1, i8* %1183)
  br label %1184

; <label>:1184:                                   ; preds = %1175, %1182
  %1185 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %1186 = load i8*, i8** %1185, align 8
  %1187 = call zeroext i1 @ssl_check_certificate(i32 %.3, i8* %1186)
  br i1 %1187, label %1190, label %1188

; <label>:1188:                                   ; preds = %1184
  %.214.lcssa123 = phi %struct._IO_FILE* [ %.214, %1184 ]
  %.3.lcssa116 = phi i32 [ %.3, %1184 ]
  %1189 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1189)
  call void @fd_close(i32 %.3.lcssa116)
  br label %1439

; <label>:1190:                                   ; preds = %1184, %1159, %1155
  %1191 = icmp ne i64 %3, 0
  %1192 = trunc i8 %.232 to i1
  %1193 = or i32 0, 2
  %spec.select = select i1 %1192, i32 %1193, i32 0
  %.028 = select i1 %1191, i32 %spec.select, i32 0
  store i64 0, i64* %15, align 8
  %1194 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1195 = load i8*, i8** %1194, align 8
  %1196 = load i64, i64* %14, align 8
  %1197 = icmp ne i64 %1196, 0
  %1198 = load i64, i64* %14, align 8
  %1199 = sub nsw i64 %1198, %3
  %1200 = select i1 %1197, i64 %1199, i64 0
  %1201 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 3
  %1202 = call i32 @fd_read_body(i8* %1195, i32 %.3, %struct._IO_FILE* %.214, i64 %1200, i64 %3, i64* %15, i64* %2, double* %1201, i32 %.028, %struct._IO_FILE* %7)
  %1203 = call i64 @time(i64* null) #8
  %1204 = call i8* @datetime_str(i64 %1203)
  %1205 = load i64, i64* %15, align 8
  %1206 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 3
  %1207 = load double, double* %1206, align 8
  %1208 = call i8* @retr_rate(i64 %1205, double %1207)
  %1209 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 3
  %1210 = load double, double* %1209, align 8
  %1211 = load double, double* @total_download_time, align 8
  %1212 = fadd double %1211, %1210
  store double %1212, double* @total_download_time, align 8
  %1213 = load i32, i32* %10, align 4
  call void @fd_close(i32 %1213)
  %1214 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %1215 = icmp ne %struct._IO_FILE* %1214, null
  br i1 %1215, label %1216, label %1221

; <label>:1216:                                   ; preds = %1190
  %1217 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 1
  %1218 = load i32, i32* %1217, align 4
  %1219 = and i32 %1218, 8
  %1220 = icmp ne i32 %1219, 0
  br i1 %1220, label %1221, label %1223

; <label>:1221:                                   ; preds = %1216, %1190
  %1222 = call i32 @fclose(%struct._IO_FILE* %.214)
  br label %1223

; <label>:1223:                                   ; preds = %1221, %1216
  %1224 = icmp eq i32 %1202, -2
  br i1 %1224, label %1228, label %1225

; <label>:1225:                                   ; preds = %1223
  %1226 = icmp ne %struct._IO_FILE* %7, null
  %1227 = icmp eq i32 %1202, -3
  %or.cond14 = and i1 %1226, %1227
  br i1 %or.cond14, label %1228, label %1239

; <label>:1228:                                   ; preds = %1225, %1223
  %1229 = getelementptr [37 x i8], [37 x i8]* @.str.110, i32 0, i32 0
  %1230 = call i8* @gettext(i8* %1229) #8
  %1231 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1232 = load i8*, i8** %1231, align 8
  %1233 = call i32* @__errno_location() #15
  %1234 = load i32, i32* %1233, align 4
  %1235 = call i8* @strerror(i32 %1234) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1230, i8* %1232, i8* %1235)
  %1236 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1236)
  %1237 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %1237, align 8
  call void @fd_close(i32 %.3)
  switch i32 %1202, label %1250 [
    i32 -2, label %.loopexit17
    i32 -3, label %1238
  ]

; <label>:1238:                                   ; preds = %1228
  br label %1445

; <label>:1239:                                   ; preds = %1225
  %1240 = icmp eq i32 %1202, -1
  br i1 %1240, label %1241, label %1250

; <label>:1241:                                   ; preds = %1239
  %1242 = getelementptr [32 x i8], [32 x i8]* @.str.111, i32 0, i32 0
  %1243 = call i8* @gettext(i8* %1242) #8
  %1244 = call i8* @fd_errstr(i32 %.3)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1243, i8* %1204, i8* %1208, i8* %1244)
  %1245 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %1246 = load i8, i8* %1245, align 8
  %1247 = trunc i8 %1246 to i1
  br i1 %1247, label %1248, label %1250

; <label>:1248:                                   ; preds = %1241
  %1249 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 3, i8* %1249)
  br label %1250

; <label>:1250:                                   ; preds = %1239, %1248, %1241, %1228
  call void @fd_close(i32 %.3)
  %1251 = load i32, i32* %9, align 4
  %1252 = call i32 @ftp_response(i32 %1251, i8** %11)
  %1253 = icmp ne i32 %1252, 7
  br i1 %1253, label %1254, label %1263

; <label>:1254:                                   ; preds = %1250
  %.lcssa145 = phi i32 [ %1202, %1250 ]
  %.lcssa139 = phi i8* [ %1204, %1250 ]
  %.lcssa133 = phi i8* [ %1208, %1250 ]
  %1255 = icmp ne i32 %.lcssa145, -1
  br i1 %1255, label %1256, label %1258

; <label>:1256:                                   ; preds = %1254
  %1257 = getelementptr [11 x i8], [11 x i8]* @.str.112, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1257, i8* %.lcssa139, i8* %.lcssa133)
  br label %1258

; <label>:1258:                                   ; preds = %1256, %1254
  %1259 = getelementptr [28 x i8], [28 x i8]* @.str.113, i32 0, i32 0
  %1260 = call i8* @gettext(i8* %1259) #8, !track !237
  call void @logputs(i32 1, i8* %1260)
  %1261 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1261)
  %1262 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %1262, align 8
  br label %1445

; <label>:1263:                                   ; preds = %1250
  %1264 = load i8*, i8** %11, align 8
  %1265 = call i64 @ftp_expected_bytes(i8* %1264)
  store i64 %1265, i64* %6, align 8
  %1266 = load i8*, i8** %11, align 8
  %1267 = load i8, i8* %1266, align 1
  %1268 = sext i8 %1267 to i32
  %1269 = icmp ne i32 %1268, 50
  br i1 %1269, label %1270, label %1290

; <label>:1270:                                   ; preds = %1263
  %.lcssa146 = phi i32 [ %1202, %1263 ]
  %.lcssa140 = phi i8* [ %1204, %1263 ]
  %.lcssa134 = phi i8* [ %1208, %1263 ]
  %1271 = icmp ne i32 %.lcssa146, -1
  br i1 %1271, label %1272, label %1274

; <label>:1272:                                   ; preds = %1270
  %1273 = getelementptr [11 x i8], [11 x i8]* @.str.112, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1273, i8* %.lcssa140, i8* %.lcssa134)
  br label %1274

; <label>:1274:                                   ; preds = %1272, %1270
  %1275 = getelementptr [24 x i8], [24 x i8]* @.str.114, i32 0, i32 0
  %1276 = call i8* @gettext(i8* %1275) #8, !track !238
  call void @logputs(i32 1, i8* %1276)
  %1277 = load i8*, i8** %11, align 8
  %1278 = getelementptr [4 x i8], [4 x i8]* @.str.115, i32 0, i32 0
  %1279 = call i32 @c_strncasecmp(i8* %1277, i8* %1278, i64 3) #14
  %1280 = icmp ne i32 %1279, 0
  br i1 %1280, label %1288, label %1281

; <label>:1281:                                   ; preds = %1274
  %1282 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %1283 = load i32, i32* %1282, align 8
  %1284 = icmp eq i32 %1283, 3
  br i1 %1284, label %1285, label %1288

; <label>:1285:                                   ; preds = %1281
  %1286 = getelementptr [62 x i8], [62 x i8]* @.str.116, i32 0, i32 0
  call void @logputs(i32 1, i8* %1286)
  %1287 = load i8*, i8** %11, align 8
  call void @free(i8* %1287) #8
  store i8* null, i8** %11, align 8
  br label %1445

; <label>:1288:                                   ; preds = %1274, %1281
  %1289 = load i8*, i8** %11, align 8
  call void @free(i8* %1289) #8
  store i8* null, i8** %11, align 8
  br label %1445

; <label>:1290:                                   ; preds = %1263
  %1291 = load i8*, i8** %11, align 8
  call void @free(i8* %1291) #8
  store i8* null, i8** %11, align 8
  %1292 = icmp eq i32 %1202, -1
  br i1 %1292, label %.loopexit17, label %1293

; <label>:1293:                                   ; preds = %1290
  %1294 = and i32 %24, 16
  %1295 = icmp ne i32 %1294, 0
  br i1 %1295, label %1299, label %1296

; <label>:1296:                                   ; preds = %1293
  %1297 = load i32, i32* %9, align 4
  call void @fd_close(i32 %1297)
  %1298 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 2
  store i32 -1, i32* %1298, align 8
  br label %1299

; <label>:1299:                                   ; preds = %1296, %1293
  %1300 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 1
  %1301 = load i32, i32* %1300, align 4
  %1302 = and i32 %1301, 8
  %1303 = icmp ne i32 %1302, 0
  br i1 %1303, label %1304, label %1437

; <label>:1304:                                   ; preds = %1299
  %1305 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %1306 = load i8, i8* %1305, align 8
  %1307 = trunc i8 %1306 to i1
  br i1 %1307, label %1308, label %1357

; <label>:1308:                                   ; preds = %1304
  %1309 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1310 = load i8*, i8** %1309, align 8
  %1311 = call i32 @mkalldirs(i8* %1310)
  %1312 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1313 = load i8*, i8** %1312, align 8
  %1314 = getelementptr [2 x i8], [2 x i8]* @.str.117, i32 0, i32 0
  %1315 = call %struct._IO_FILE* @fopen(i8* %1313, i8* %1314), !track !239
  %1316 = icmp ne %struct._IO_FILE* %1315, null
  br i1 %1316, label %1324, label %1317

; <label>:1317:                                   ; preds = %1308
  %1318 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 7
  %1319 = load i8*, i8** %1318, align 8
  %1320 = call i32* @__errno_location() #15
  %1321 = load i32, i32* %1320, align 4
  %1322 = call i8* @strerror(i32 %1321) #8
  %1323 = getelementptr [8 x i8], [8 x i8]* @.str.104, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %1323, i8* %1319, i8* %1322)
  br label %1357

; <label>:1324:                                   ; preds = %1308
  store i8* null, i8** %21, align 8
  store i64 0, i64* %22, align 8
  %1325 = call i64 @getline(i8** %21, i64* %22, %struct._IO_FILE* %1315)
  %1326 = icmp sgt i64 %1325, 0
  br i1 %1326, label %.lr.ph157.preheader, label %._crit_edge

.lr.ph157.preheader:                              ; preds = %1324
  br label %.lr.ph157

.lr.ph157:                                        ; preds = %.lr.ph157.preheader, %1350
  %1327 = phi i64 [ %1353, %1350 ], [ %1325, %.lr.ph157.preheader ]
  call void @unroll_loop(i32 63)
  br label %1328

; <label>:1328:                                   ; preds = %1347, %.lr.ph157
  %.01 = phi i64 [ %1327, %.lr.ph157 ], [ %1348, %1347 ]
  call void @unroll_loop(i32 64)
  %1329 = icmp sgt i64 %.01, 0
  br i1 %1329, label %1330, label %1344

; <label>:1330:                                   ; preds = %1328
  %1331 = load i8*, i8** %21, align 8
  %1332 = sub nsw i64 %.01, 1
  %1333 = getelementptr inbounds i8, i8* %1331, i64 %1332
  %1334 = load i8, i8* %1333, align 1
  %1335 = sext i8 %1334 to i32
  %1336 = icmp eq i32 %1335, 10
  br i1 %1336, label %1344, label %1337

; <label>:1337:                                   ; preds = %1330
  %1338 = load i8*, i8** %21, align 8
  %1339 = sub nsw i64 %.01, 1
  %1340 = getelementptr inbounds i8, i8* %1338, i64 %1339
  %1341 = load i8, i8* %1340, align 1
  %1342 = sext i8 %1341 to i32
  %1343 = icmp eq i32 %1342, 13
  br label %1344

; <label>:1344:                                   ; preds = %1330, %1337, %1328
  %1345 = phi i1 [ false, %1328 ], [ true, %1330 ], [ %1343, %1337 ]
  %1346 = load i8*, i8** %21, align 8
  br i1 %1345, label %1347, label %1350

; <label>:1347:                                   ; preds = %1344
  %1348 = add nsw i64 %.01, -1
  %1349 = getelementptr inbounds i8, i8* %1346, i64 %1348
  store i8 0, i8* %1349, align 1
  br label %1328

; <label>:1350:                                   ; preds = %1344
  %.lcssa = phi i8* [ %1346, %1344 ]
  %1351 = call i8* @quotearg_style(i32 7, i8* %.lcssa)
  %1352 = getelementptr [4 x i8], [4 x i8]* @.str.83, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %1352, i8* %1351)
  %1353 = call i64 @getline(i8** %21, i64* %22, %struct._IO_FILE* %1315)
  %1354 = icmp sgt i64 %1353, 0
  br i1 %1354, label %.lr.ph157, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %1350
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1324
  %1355 = load i8*, i8** %21, align 8
  call void @free(i8* %1355) #8
  store i8* null, i8** %21, align 8
  %1356 = call i32 @fclose(%struct._IO_FILE* %1315)
  br label %1357

; <label>:1357:                                   ; preds = %1317, %._crit_edge, %1304
  %1358 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1359 = load i32, i32* %1358, align 8
  %1360 = and i32 %1359, 16
  %1361 = icmp ne i32 %1360, 0
  br i1 %1361, label %1437, label %1362

; <label>:1362:                                   ; preds = %1357
  %1363 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1364 = load i32, i32* %1363, align 8
  %1365 = and i32 %1364, 4
  %1366 = icmp ne i32 %1365, 0
  br i1 %1366, label %1367, label %1417

; <label>:1367:                                   ; preds = %1362
  %1368 = load i64, i64* %15, align 8
  %1369 = icmp sgt i64 %1368, %.023
  br i1 %1369, label %1370, label %1379

; <label>:1370:                                   ; preds = %1367
  %1371 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1372 = load i32, i32* %1371, align 8
  %1373 = or i32 %1372, 16
  store i32 %1373, i32* %1371, align 8
  %1374 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %1375 = load i8, i8* %1374, align 1
  %1376 = trunc i8 %1375 to i1
  br i1 %1376, label %1377, label %1437

; <label>:1377:                                   ; preds = %1370
  %1378 = getelementptr [84 x i8], [84 x i8]* @.str.118, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %1378)
  br label %1437

; <label>:1379:                                   ; preds = %1367
  %1380 = load i64, i64* %15, align 8
  %1381 = icmp sgt i64 %.023, %1380
  br i1 %1381, label %1382, label %1397

; <label>:1382:                                   ; preds = %1379
  %1383 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1384 = load i32, i32* %1383, align 8
  %1385 = or i32 %1384, 16
  store i32 %1385, i32* %1383, align 8
  %1386 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1387 = load i32, i32* %1386, align 8
  %1388 = or i32 %1387, 8
  store i32 %1388, i32* %1386, align 8
  %1389 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1390 = load i32, i32* %1389, align 8
  %1391 = and i32 %1390, -5
  store i32 %1391, i32* %1389, align 8
  %1392 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %1393 = load i8, i8* %1392, align 1
  %1394 = trunc i8 %1393 to i1
  br i1 %1394, label %1395, label %1437

; <label>:1395:                                   ; preds = %1382
  %1396 = getelementptr [87 x i8], [87 x i8]* @.str.119, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %1396)
  br label %1437

; <label>:1397:                                   ; preds = %1379
  %1398 = load i64, i64* %15, align 8
  %1399 = icmp eq i64 %1398, 0
  %1400 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1401 = load i32, i32* %1400, align 8
  br i1 %1399, label %1402, label %1404

; <label>:1402:                                   ; preds = %1397
  %1403 = and i32 %1401, -5
  store i32 %1403, i32* %1400, align 8
  br label %1437

; <label>:1404:                                   ; preds = %1397
  %1405 = or i32 %1401, 16
  store i32 %1405, i32* %1400, align 8
  %1406 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1407 = load i32, i32* %1406, align 8
  %1408 = or i32 %1407, 8
  store i32 %1408, i32* %1406, align 8
  %1409 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1410 = load i32, i32* %1409, align 8
  %1411 = and i32 %1410, -5
  store i32 %1411, i32* %1409, align 8
  %1412 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %1413 = load i8, i8* %1412, align 1
  %1414 = trunc i8 %1413 to i1
  br i1 %1414, label %1415, label %1437

; <label>:1415:                                   ; preds = %1404
  %1416 = getelementptr [99 x i8], [99 x i8]* @.str.120, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %1416)
  br label %1437

; <label>:1417:                                   ; preds = %1362
  %1418 = load i8, i8* %16, align 1
  %1419 = trunc i8 %1418 to i1
  br i1 %1419, label %1420, label %1425

; <label>:1420:                                   ; preds = %1417
  %1421 = load i64, i64* %15, align 8
  %1422 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1423 = load i32, i32* %1422, align 8
  %1424 = or i32 %1423, 4
  store i32 %1424, i32* %1422, align 8
  br label %1437

; <label>:1425:                                   ; preds = %1417
  %1426 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1427 = load i32, i32* %1426, align 8
  %1428 = or i32 %1427, 16
  store i32 %1428, i32* %1426, align 8
  %1429 = getelementptr inbounds %struct.ccon, %struct.ccon* %4, i32 0, i32 0
  %1430 = load i32, i32* %1429, align 8
  %1431 = or i32 %1430, 4
  store i32 %1431, i32* %1429, align 8
  %1432 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %1433 = load i8, i8* %1432, align 1
  %1434 = trunc i8 %1433 to i1
  br i1 %1434, label %1435, label %1437

; <label>:1435:                                   ; preds = %1425
  %1436 = getelementptr [62 x i8], [62 x i8]* @.str.121, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %1436)
  br label %1437

; <label>:1437:                                   ; preds = %1299, %1382, %1395, %1415, %1404, %1402, %1377, %1370, %1435, %1425, %1420, %1357
  %.427 = phi i64 [ %.023, %1299 ], [ %.023, %1357 ], [ %.023, %1382 ], [ %.023, %1395 ], [ %.023, %1415 ], [ %.023, %1404 ], [ %.023, %1402 ], [ %.023, %1377 ], [ %.023, %1370 ], [ %1421, %1420 ], [ %.023, %1425 ], [ %.023, %1435 ]
  %.5 = phi i8 [ 0, %1299 ], [ 0, %1357 ], [ 0, %1370 ], [ 0, %1377 ], [ 1, %1382 ], [ 1, %1395 ], [ 0, %1415 ], [ 0, %1404 ], [ 0, %1402 ], [ 1, %1420 ], [ 0, %1425 ], [ 0, %1435 ]
  %1438 = trunc i8 %.5 to i1
  br i1 %1438, label %690, label %.loopexit17

; <label>:1439:                                   ; preds = %1188, %1179
  %.214130 = phi %struct._IO_FILE* [ %.214.lcssa123, %1188 ], [ %.214.lcssa, %1179 ]
  %1440 = icmp eq %struct._IO_FILE* %.214130, null
  %1441 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %1442 = icmp ne %struct._IO_FILE* %1441, null
  %or.cond16 = or i1 %1440, %1442
  br i1 %or.cond16, label %1445, label %1443

; <label>:1443:                                   ; preds = %1439
  %1444 = call i32 @fclose(%struct._IO_FILE* %.214130)
  br label %1445

.loopexit17:                                      ; preds = %721, %1002, %999, %1228, %1290, %1437
  %.0.ph = phi i32 [ 35, %1437 ], [ 16, %1290 ], [ 21, %1228 ], [ 35, %999 ], [ 35, %1002 ], [ %699, %721 ]
  br label %1445

; <label>:1445:                                   ; preds = %.loopexit17, %1443, %1439, %182, %178, %175, %171, %168, %137, %1288, %1285, %1258, %1238, %1135, %1125, %1101, %1032, %980, %973, %966, %926, %919, %912, %886, %823, %816, %787, %780, %771, %764, %757, %735, %706, %700, %685, %656, %612, %606, %600, %441, %435, %429, %394, %315, %289, %270, %239, %233, %227, %221, %215, %145, %82
  %.0 = phi i32 [ %150, %145 ], [ %268, %270 ], [ %287, %289 ], [ %.lcssa156, %612 ], [ %.lcssa155, %606 ], [ %.lcssa154, %600 ], [ 35, %685 ], [ %747, %735 ], [ 35, %886 ], [ 47, %1101 ], [ 54, %1238 ], [ 16, %1258 ], [ 16, %1288 ], [ 17, %1285 ], [ 19, %1135 ], [ 20, %1125 ], [ 3, %1032 ], [ %.lcssa53, %980 ], [ %.lcssa52, %973 ], [ %.lcssa51, %966 ], [ %.lcssa49, %926 ], [ %.lcssa48, %919 ], [ %.lcssa47, %912 ], [ %.lcssa45, %823 ], [ %.lcssa44, %816 ], [ %.lcssa40, %706 ], [ %.lcssa39, %700 ], [ %.lcssa37, %787 ], [ %.lcssa36, %780 ], [ %.lcssa35, %771 ], [ %.lcssa34, %764 ], [ %.lcssa33, %757 ], [ %655, %656 ], [ %428, %441 ], [ %428, %435 ], [ %428, %429 ], [ %393, %394 ], [ %314, %315 ], [ 8, %239 ], [ 9, %233 ], [ %.010, %227 ], [ %.010, %221 ], [ %.010, %215 ], [ 45, %82 ], [ 1, %137 ], [ %169, %168 ], [ %173, %171 ], [ %176, %175 ], [ %180, %178 ], [ %184, %182 ], [ 3, %1439 ], [ 3, %1443 ], [ %.0.ph, %.loopexit17 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @init_control_ssl_connection(i32, %struct.url*, i8*) #0 {
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 127
  %5 = load i8, i8* %4, align 1
  %6 = trunc i8 %5 to i1
  br i1 %6, label %13, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %9 = load i8, i8* %8, align 8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %13, label %11

; <label>:11:                                     ; preds = %7
  %12 = getelementptr [18 x i8], [18 x i8]* @.str.122, i32 0, i32 0
  call void @logputs(i32 0, i8* %12)
  br label %13

; <label>:13:                                     ; preds = %11, %7, %3
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 127
  %15 = load i8, i8* %14, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %13
  %18 = call i32 @ftp_auth(i32 %0, i32 3)
  %19 = icmp eq i32 %18, 7
  br i1 %19, label %20, label %40

; <label>:20:                                     ; preds = %17, %13
  %21 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = call zeroext i1 @ssl_connect_wget(i32 %0, i8* %22, i32* null)
  br i1 %23, label %25, label %24

; <label>:24:                                     ; preds = %20
  call void @fd_close(i32 %0)
  br label %50

; <label>:25:                                     ; preds = %20
  %26 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = call zeroext i1 @ssl_check_certificate(i32 %0, i8* %27)
  br i1 %28, label %30, label %29

; <label>:29:                                     ; preds = %25
  call void @fd_close(i32 %0)
  br label %50

; <label>:30:                                     ; preds = %25
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 127
  %32 = load i8, i8* %31, align 1
  %33 = trunc i8 %32 to i1
  br i1 %33, label %47, label %34

; <label>:34:                                     ; preds = %30
  %35 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %36 = load i8, i8* %35, align 8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %47, label %38

; <label>:38:                                     ; preds = %34
  %39 = getelementptr [8 x i8], [8 x i8]* @.str.123, i32 0, i32 0
  call void @logputs(i32 0, i8* %39)
  br label %47

; <label>:40:                                     ; preds = %17
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 126
  %42 = load i8, i8* %41, align 2
  %43 = trunc i8 %42 to i1
  br i1 %43, label %44, label %46

; <label>:44:                                     ; preds = %40
  %45 = getelementptr [56 x i8], [56 x i8]* @.str.124, i32 0, i32 0
  call void @logputs(i32 1, i8* %45)
  br label %47

; <label>:46:                                     ; preds = %40
  call void @fd_close(i32 %0)
  br label %50

; <label>:47:                                     ; preds = %30, %34, %38, %44
  %.01 = phi i8 [ 0, %44 ], [ 1, %38 ], [ 1, %34 ], [ 1, %30 ]
  %48 = trunc i8 %.01 to i1
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %2, align 1
  br label %50

; <label>:50:                                     ; preds = %47, %46, %29, %24
  %.0 = phi i32 [ 0, %47 ], [ 46, %29 ], [ 4, %24 ], [ 32, %46 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_ftp_greeting(i32, %struct.ccon*) #0 {
  %3 = call i32 @ftp_greeting(i32 %0)
  %4 = icmp ne i32 %3, 7
  br i1 %4, label %5, label %8

; <label>:5:                                      ; preds = %2
  %6 = getelementptr [36 x i8], [36 x i8]* @.str.125, i32 0, i32 0
  call void @logputs(i32 1, i8* %6)
  call void @fd_close(i32 %0)
  %7 = getelementptr inbounds %struct.ccon, %struct.ccon* %1, i32 0, i32 2
  store i32 -1, i32* %7, align 8
  br label %8

; <label>:8:                                      ; preds = %5, %2
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ftp_do_pasv(i32, %struct.ip_address*, i32*) #0 {
  %4 = call zeroext i1 @socket_ip_address(i32 %0, %struct.ip_address* %1, i32 1)
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %3
  call void @abort() #16
  unreachable

; <label>:6:                                      ; preds = %3
  %7 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %34 [
    i32 2, label %9
    i32 10, label %17
  ]

; <label>:9:                                      ; preds = %6
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %11 = load i8, i8* %10, align 8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr [14 x i8], [14 x i8]* @.str.126, i32 0, i32 0
  call void @logputs(i32 0, i8* %14)
  br label %15

; <label>:15:                                     ; preds = %13, %9
  %16 = call i32 @ftp_pasv(i32 %0, %struct.ip_address* %1, i32* %2)
  br label %35

; <label>:17:                                     ; preds = %6
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %19 = load i8, i8* %18, align 8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %17
  %22 = getelementptr [14 x i8], [14 x i8]* @.str.127, i32 0, i32 0
  call void @logputs(i32 0, i8* %22)
  br label %23

; <label>:23:                                     ; preds = %21, %17
  %24 = call i32 @ftp_epsv(i32 %0, %struct.ip_address* %1, i32* %2)
  %25 = icmp eq i32 %24, 29
  br i1 %25, label %26, label %35

; <label>:26:                                     ; preds = %23
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %28 = load i8, i8* %27, align 8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %32, label %30

; <label>:30:                                     ; preds = %26
  %31 = getelementptr [14 x i8], [14 x i8]* @.str.128, i32 0, i32 0
  call void @logputs(i32 0, i8* %31)
  br label %32

; <label>:32:                                     ; preds = %30, %26
  %33 = call i32 @ftp_lpsv(i32 %0, %struct.ip_address* %1, i32* %2)
  br label %35

; <label>:34:                                     ; preds = %6
  call void @abort() #16
  unreachable

; <label>:35:                                     ; preds = %23, %32, %15
  %.1 = phi i32 [ %16, %15 ], [ %33, %32 ], [ %24, %23 ]
  ret i32 %.1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ftp_do_port(i32, i32*) #0 {
  %3 = alloca %struct.ip_address, align 4, !track !240
  %4 = call zeroext i1 @socket_ip_address(i32 %0, %struct.ip_address* %3, i32 1)
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %2
  call void @abort() #16
  unreachable

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %3, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %34 [
    i32 2, label %9
    i32 10, label %17
  ]

; <label>:9:                                      ; preds = %6
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %11 = load i8, i8* %10, align 8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr [14 x i8], [14 x i8]* @.str.129, i32 0, i32 0
  call void @logputs(i32 0, i8* %14)
  br label %15

; <label>:15:                                     ; preds = %13, %9
  %16 = call i32 @ftp_port(i32 %0, i32* %1)
  br label %35

; <label>:17:                                     ; preds = %6
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %19 = load i8, i8* %18, align 8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %17
  %22 = getelementptr [14 x i8], [14 x i8]* @.str.130, i32 0, i32 0
  call void @logputs(i32 0, i8* %22)
  br label %23

; <label>:23:                                     ; preds = %21, %17
  %24 = call i32 @ftp_eprt(i32 %0, i32* %1)
  %25 = icmp eq i32 %24, 10
  br i1 %25, label %26, label %35

; <label>:26:                                     ; preds = %23
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %28 = load i8, i8* %27, align 8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %32, label %30

; <label>:30:                                     ; preds = %26
  %31 = getelementptr [14 x i8], [14 x i8]* @.str.131, i32 0, i32 0
  call void @logputs(i32 0, i8* %31)
  br label %32

; <label>:32:                                     ; preds = %30, %26
  %33 = call i32 @ftp_lprt(i32 %0, i32* %1)
  br label %35

; <label>:34:                                     ; preds = %6
  call void @abort() #16
  unreachable

; <label>:35:                                     ; preds = %23, %32, %15
  %.1 = phi i32 [ %16, %15 ], [ %33, %32 ], [ %24, %23 ]
  ret i32 %.1
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_length(i64, i64, i1 zeroext) #0 {
  %4 = zext i1 %2 to i8
  %5 = getelementptr [11 x i8], [11 x i8]* @.str.132, i32 0, i32 0
  %6 = call i8* @gettext(i8* %5) #8
  %7 = call i8* @number_to_static_string(i64 %0)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %6, i8* %7)
  %8 = icmp sge i64 %0, 1024
  br i1 %8, label %9, label %12

; <label>:9:                                      ; preds = %3
  %10 = call i8* @human_readable(i64 %0, i32 10, i32 1)
  %11 = getelementptr [6 x i8], [6 x i8]* @.str.133, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %11, i8* %10)
  br label %12

; <label>:12:                                     ; preds = %9, %3
  %13 = icmp sgt i64 %1, 0
  br i1 %13, label %14, label %29

; <label>:14:                                     ; preds = %12
  %15 = sub nsw i64 %0, %1
  %16 = icmp sge i64 %15, 1024
  br i1 %16, label %17, label %24

; <label>:17:                                     ; preds = %14
  %18 = getelementptr [20 x i8], [20 x i8]* @.str.134, i32 0, i32 0
  %19 = call i8* @gettext(i8* %18) #8
  %20 = sub nsw i64 %0, %1
  %21 = call i8* @number_to_static_string(i64 %20)
  %22 = sub nsw i64 %0, %1
  %23 = call i8* @human_readable(i64 %22, i32 10, i32 1)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %19, i8* %21, i8* %23)
  br label %29

; <label>:24:                                     ; preds = %14
  %25 = getelementptr [15 x i8], [15 x i8]* @.str.135, i32 0, i32 0
  %26 = call i8* @gettext(i8* %25) #8
  %27 = sub nsw i64 %0, %1
  %28 = call i8* @number_to_static_string(i64 %27)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %26, i8* %28)
  br label %29

; <label>:29:                                     ; preds = %17, %24, %12
  %30 = trunc i8 %4 to i1
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %29
  %32 = getelementptr [20 x i8], [20 x i8]* @.str.136, i32 0, i32 0
  %33 = call i8* @gettext(i8* %32) #8, !track !241
  br label %36

; <label>:34:                                     ; preds = %29
  %35 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = phi i8* [ %33, %31 ], [ %35, %34 ]
  call void @logputs(i32 0, i8* %37)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @ftp_expected_bytes(i8*) #0 {
  %2 = alloca i8*, align 8, !track !242
  store i8* %0, i8** %2, align 8
  br label %3

; <label>:3:                                      ; preds = %.backedge, %1
  call void @unroll_loop(i32 65)
  br label %4

; <label>:4:                                      ; preds = %17, %3
  call void @unroll_loop(i32 66)
  %5 = load i8*, i8** %2, align 8
  %6 = load i8, i8* %5, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %4
  %10 = load i8*, i8** %2, align 8
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp ne i32 %12, 40
  br label %14

; <label>:14:                                     ; preds = %9, %4
  %15 = phi i1 [ false, %4 ], [ %13, %9 ]
  %16 = load i8*, i8** %2, align 8
  br i1 %15, label %17, label %19

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %18, i8** %2, align 8
  br label %4

; <label>:19:                                     ; preds = %14
  %.lcssa = phi i8* [ %16, %14 ]
  %20 = load i8, i8* %.lcssa, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %22, label %59

; <label>:22:                                     ; preds = %19
  %23 = load i8*, i8** %2, align 8
  %24 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %24, i8** %2, align 8
  %25 = load i8*, i8** %2, align 8
  %26 = call i64 @strtol(i8* %25, i8** %2, i32 10) #8, !track !243
  %27 = load i8*, i8** %2, align 8
  %28 = load i8, i8* %27, align 1
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %.preheader, label %59

.preheader:                                       ; preds = %22
  br label %30

; <label>:30:                                     ; preds = %.preheader, %43
  call void @unroll_loop(i32 67)
  %31 = load i8*, i8** %2, align 8
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %40

; <label>:35:                                     ; preds = %30
  %36 = load i8*, i8** %2, align 8
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = call zeroext i1 @c_isspace(i32 %38)
  br label %40

; <label>:40:                                     ; preds = %35, %30
  %41 = phi i1 [ false, %30 ], [ %39, %35 ]
  %42 = load i8*, i8** %2, align 8
  br i1 %41, label %43, label %45

; <label>:43:                                     ; preds = %40
  %44 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %44, i8** %2, align 8
  br label %30

; <label>:45:                                     ; preds = %40
  %.lcssa1 = phi i8* [ %42, %40 ]
  %46 = load i8, i8* %.lcssa1, align 1
  %47 = icmp ne i8 %46, 0
  br i1 %47, label %48, label %59

; <label>:48:                                     ; preds = %45
  %49 = load i8*, i8** %2, align 8
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = call i32 @c_tolower(i32 %51)
  %53 = icmp ne i32 %52, 98
  br i1 %53, label %.backedge, label %54

; <label>:54:                                     ; preds = %48
  %55 = load i8*, i8** %2, align 8
  %56 = getelementptr [5 x i8], [5 x i8]* @.str.137, i32 0, i32 0
  %57 = call i32 @c_strncasecmp(i8* %55, i8* %56, i64 4) #14
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %.backedge, label %59

.backedge:                                        ; preds = %54, %48
  br label %3

; <label>:59:                                     ; preds = %54, %45, %22, %19
  %.0 = phi i64 [ 0, %19 ], [ 0, %22 ], [ 0, %45 ], [ %26, %54 ]
  ret i64 %.0
}

; Function Attrs: nounwind
declare dso_local i64 @strtol(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.fileinfo* @delelement(%struct.fileinfo*, %struct.fileinfo**) #7 {
  %3 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 7
  %4 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 8
  %6 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %7 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  call void @free(i8* %8) #8
  %9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 1
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 6
  %11 = load i8*, i8** %10, align 8
  call void @free(i8* %11) #8
  %12 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 6
  store i8* null, i8** %12, align 8
  %13 = bitcast %struct.fileinfo* %0 to i8*
  call void @free(i8* %13) #8
  %14 = icmp ne %struct.fileinfo* %6, null
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %2
  %16 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 7
  store %struct.fileinfo* %4, %struct.fileinfo** %16, align 8
  br label %17

; <label>:17:                                     ; preds = %15, %2
  %18 = icmp ne %struct.fileinfo* %4, null
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %17
  %20 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %4, i32 0, i32 8
  store %struct.fileinfo* %6, %struct.fileinfo** %20, align 8
  br label %22

; <label>:21:                                     ; preds = %17
  store %struct.fileinfo* %6, %struct.fileinfo** %1, align 8
  br label %22

; <label>:22:                                     ; preds = %21, %19
  ret %struct.fileinfo* %6
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @has_insecure_name_p(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = icmp eq i32 %3, 47
  br i1 %4, label %9, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr [4 x i8], [4 x i8]* @.str.9.103, i32 0, i32 0
  %7 = call i8* @strstr(i8* %0, i8* %6) #14, !track !244
  %8 = icmp ne i8* %7, null
  %. = select i1 %8, i1 true, i1 false
  br label %9

; <label>:9:                                      ; preds = %5, %1
  %.0 = phi i1 [ true, %1 ], [ %., %5 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @is_invalid_entry(%struct.fileinfo*) #0 {
  %2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 8
  %5 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %6 = icmp ne %struct.fileinfo* %5, null
  br i1 %6, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

; <label>:7:                                      ; preds = %.lr.ph
  %.01 = phi %struct.fileinfo* [ %12, %.lr.ph ]
  %8 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01, i32 0, i32 8
  %9 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %10 = icmp ne %struct.fileinfo* %9, null
  br i1 %10, label %.lr.ph, label %._crit_edge.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %7
  %.012 = phi %struct.fileinfo* [ %.01, %7 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 68)
  %11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.012, i32 0, i32 8
  %12 = load %struct.fileinfo*, %struct.fileinfo** %11, align 8
  %13 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = call i32 @strcmp(i8* %3, i8* %14) #14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %._crit_edge.loopexit, label %7

._crit_edge.loopexit:                             ; preds = %.lr.ph, %7
  %.0.ph = phi i1 [ false, %7 ], [ true, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.0 = phi i1 [ false, %1 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

declare dso_local i32 @fnmatch(i8*, i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @ftp_retrieve_list(%struct.url*, %struct.fileinfo*, %struct.ccon*) #0 {
  %4 = alloca i8*, align 8, !track !245
  %5 = alloca %struct.stat, align 8, !track !246
  %6 = alloca %struct.stat, align 8, !track !247
  store i8* null, i8** %4, align 8
  %7 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* @ftp_retrieve_list.depth, align 4
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, -1
  br i1 %11, label %12, label %30

; <label>:12:                                     ; preds = %3
  %13 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %13, %15
  br i1 %16, label %17, label %30

; <label>:17:                                     ; preds = %12
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %19 = load i8, i8* %18, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %17
  %22 = getelementptr [44 x i8], [44 x i8]* @.str.10.85, i32 0, i32 0
  %23 = call i8* @gettext(i8* %22) #8
  %24 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %26 = load i32, i32* %25, align 4
  call void (i8*, ...) @debug_logprintf(i8* %23, i32 %24, i32 %26)
  br label %27

; <label>:27:                                     ; preds = %17, %21
  %28 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %29 = add nsw i32 %28, -1
  store i32 %29, i32* @ftp_retrieve_list.depth, align 4
  br label %353

; <label>:30:                                     ; preds = %12, %3
  %31 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, -2
  store i32 %33, i32* %31, align 8
  %34 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 2
  %37 = icmp ne i32 %36, 0
  %38 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %42, label %40

; <label>:40:                                     ; preds = %30
  %41 = or i32 %39, 2
  store i32 %41, i32* %38, align 4
  br label %44

; <label>:42:                                     ; preds = %30
  %43 = and i32 %39, -3
  store i32 %43, i32* %38, align 4
  br label %44

; <label>:44:                                     ; preds = %42, %40
  %45 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = or i32 %46, 20
  store i32 %47, i32* %45, align 4
  %48 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = icmp slt i32 %49, 0
  %51 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %55

; <label>:53:                                     ; preds = %44
  %54 = or i32 %52, 1
  store i32 %54, i32* %51, align 4
  br label %57

; <label>:55:                                     ; preds = %44
  %56 = and i32 %52, -2
  store i32 %56, i32* %51, align 4
  br label %57

; <label>:57:                                     ; preds = %55, %53
  %58 = icmp ne %struct.fileinfo* %1, null
  br i1 %58, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %57
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %315
  %.0113 = phi %struct.fileinfo* [ %320, %315 ], [ %1, %.lr.ph.preheader ]
  %.0212 = phi i8 [ %.4, %315 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 69)
  %59 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %60 = load i64, i64* %59, align 8
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %70

; <label>:62:                                     ; preds = %.lr.ph
  %63 = load i64, i64* @total_downloaded_bytes, align 8
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %65 = load i64, i64* %64, align 8
  %66 = icmp sgt i64 %63, %65
  br i1 %66, label %67, label %70

; <label>:67:                                     ; preds = %62
  %68 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %69 = add nsw i32 %68, -1
  store i32 %69, i32* @ftp_retrieve_list.depth, align 4
  br label %353

; <label>:70:                                     ; preds = %62, %.lr.ph
  %71 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %74 = load i8*, i8** %73, align 8
  %75 = call noalias i8* @xstrdup(i8* %74)
  %76 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 1
  %77 = load i8*, i8** %76, align 8
  call void @url_set_file(%struct.url* %0, i8* %77)
  %78 = call i8* @url_file_name(%struct.url* %0, i8* null)
  %79 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  store i8* %78, i8** %79, align 8
  %80 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %81 = load i8, i8* %80, align 4
  %82 = trunc i8 %81 to i1
  br i1 %82, label %83, label %143

; <label>:83:                                     ; preds = %70
  %84 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %143

; <label>:87:                                     ; preds = %83
  %88 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %89 = load i8*, i8** %88, align 8
  %90 = call i32 @stat(i8* %89, %struct.stat* %5) #8
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %143, label %92

; <label>:92:                                     ; preds = %87
  %93 = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 8
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 12
  %96 = getelementptr inbounds %struct.timeval, %struct.timeval* %95, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 4
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %105, label %101

; <label>:101:                                    ; preds = %92
  %102 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 4
  %103 = load i32, i32* %102, align 8
  %104 = icmp eq i32 %103, 2
  br label %105

; <label>:105:                                    ; preds = %101, %92
  %106 = phi i1 [ true, %92 ], [ %104, %101 ]
  %107 = zext i1 %106 to i8
  %108 = trunc i8 %107 to i1
  br i1 %108, label %109, label %114

; <label>:109:                                    ; preds = %105
  %110 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 2
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %94, %111
  %113 = zext i1 %112 to i32
  br label %114

; <label>:114:                                    ; preds = %105, %109
  %115 = phi i32 [ %113, %109 ], [ 1, %105 ]
  %116 = icmp ne i32 %115, 0
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 3
  %119 = load i64, i64* %118, align 8
  %120 = icmp sle i64 %119, %97
  br i1 %120, label %121, label %129

; <label>:121:                                    ; preds = %114
  %122 = trunc i8 %117 to i1
  br i1 %122, label %123, label %129

; <label>:123:                                    ; preds = %121
  %124 = getelementptr [60 x i8], [60 x i8]* @.str.11.86, i32 0, i32 0
  %125 = call i8* @gettext(i8* %124) #8
  %126 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %127 = load i8*, i8** %126, align 8
  %128 = call i8* @quote(i8* %127)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %125, i8* %128)
  br label %143

; <label>:129:                                    ; preds = %121, %114
  %130 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 3
  %131 = load i64, i64* %130, align 8
  %132 = icmp sgt i64 %131, %97
  br i1 %132, label %133, label %139

; <label>:133:                                    ; preds = %129
  %134 = getelementptr [57 x i8], [57 x i8]* @.str.12.87, i32 0, i32 0
  %135 = call i8* @gettext(i8* %134) #8
  %136 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %137 = load i8*, i8** %136, align 8
  %138 = call i8* @quote(i8* %137)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %135, i8* %138)
  br label %143

; <label>:139:                                    ; preds = %129
  %140 = getelementptr [51 x i8], [51 x i8]* @.str.13.88, i32 0, i32 0
  %141 = call i8* @gettext(i8* %140) #8
  %142 = call i8* @number_to_static_string(i64 %94)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %141, i8* %142)
  br label %143

; <label>:143:                                    ; preds = %87, %133, %139, %123, %83, %70
  %.210 = phi i8 [ 1, %83 ], [ 1, %70 ], [ 1, %87 ], [ 0, %123 ], [ 1, %139 ], [ 1, %133 ]
  %.4 = phi i8 [ %.0212, %83 ], [ %.0212, %70 ], [ %.0212, %87 ], [ %.0212, %123 ], [ 1, %133 ], [ %.0212, %139 ]
  %144 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 0
  %145 = load i32, i32* %144, align 8
  switch i32 %145, label %243 [
    i32 2, label %146
    i32 1, label %222
    i32 0, label %232
    i32 3, label %237
  ]

; <label>:146:                                    ; preds = %143
  %147 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 45
  %148 = load i8, i8* %147, align 1
  %149 = trunc i8 %148 to i1
  br i1 %149, label %217, label %150

; <label>:150:                                    ; preds = %146
  %151 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 6
  %152 = load i8*, i8** %151, align 8
  %153 = icmp ne i8* %152, null
  br i1 %153, label %157, label %154

; <label>:154:                                    ; preds = %150
  %155 = getelementptr [40 x i8], [40 x i8]* @.str.14.89, i32 0, i32 0
  %156 = call i8* @gettext(i8* %155) #8, !track !248
  call void @logputs(i32 1, i8* %156)
  br label %243

; <label>:157:                                    ; preds = %150
  %158 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %159 = load i8*, i8** %158, align 8
  %160 = call i32 @lstat(i8* %159, %struct.stat* %6) #8
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %192

; <label>:162:                                    ; preds = %157
  %163 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 6
  %164 = load i8*, i8** %163, align 8
  %165 = call i64 @strlen(i8* %164) #14
  %166 = add i64 %165, 1
  %167 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 3
  %168 = load i32, i32* %167, align 8
  %169 = and i32 %168, 61440
  %170 = icmp eq i32 %169, 40960
  br i1 %170, label %171, label %192

; <label>:171:                                    ; preds = %162
  %172 = alloca i8, i64 %166, align 16, !track !249
  %173 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %174 = load i8*, i8** %173, align 8
  %175 = call i64 @readlink(i8* %174, i8* %172, i64 %166) #8
  %176 = sub i64 %166, 1
  %177 = icmp eq i64 %175, %176
  br i1 %177, label %178, label %192

; <label>:178:                                    ; preds = %171
  %179 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 6
  %180 = load i8*, i8** %179, align 8
  %181 = call i32 @memcmp(i8* %172, i8* %180, i64 %175) #14
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %192

; <label>:183:                                    ; preds = %178
  %184 = getelementptr [40 x i8], [40 x i8]* @.str.15.90, i32 0, i32 0
  %185 = call i8* @gettext(i8* %184) #8
  %186 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %187 = load i8*, i8** %186, align 8
  %188 = call i8* @quote(i8* %187)
  %189 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 6
  %190 = load i8*, i8** %189, align 8
  %191 = call i8* @quote(i8* %190)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %185, i8* %188, i8* %191)
  br label %243

; <label>:192:                                    ; preds = %162, %178, %171, %157
  %193 = getelementptr [27 x i8], [27 x i8]* @.str.16.91, i32 0, i32 0
  %194 = call i8* @gettext(i8* %193) #8
  %195 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %196 = load i8*, i8** %195, align 8
  %197 = call i8* @quote(i8* %196)
  %198 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 6
  %199 = load i8*, i8** %198, align 8
  %200 = call i8* @quote(i8* %199)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %194, i8* %197, i8* %200)
  %201 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %202 = load i8*, i8** %201, align 8
  %203 = call i32 @unlink(i8* %202) #8
  %204 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 6
  %205 = load i8*, i8** %204, align 8
  %206 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %207 = load i8*, i8** %206, align 8
  %208 = call i32 @symlink(i8* %205, i8* %207) #8
  %209 = icmp eq i32 %208, -1
  br i1 %209, label %210, label %215

; <label>:210:                                    ; preds = %192
  %211 = call i32* @__errno_location() #15
  %212 = load i32, i32* %211, align 4
  %213 = call i8* @strerror(i32 %212) #8
  %214 = getelementptr [13 x i8], [13 x i8]* @.str.17.92, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %214, i8* %213)
  br label %215

; <label>:215:                                    ; preds = %210, %192
  %216 = getelementptr [2 x i8], [2 x i8]* @.str.18.78, i32 0, i32 0
  call void @logputs(i32 0, i8* %216)
  br label %243

; <label>:217:                                    ; preds = %146
  %218 = trunc i8 %.210 to i1
  br i1 %218, label %219, label %243

; <label>:219:                                    ; preds = %217
  %220 = trunc i8 %.4 to i1
  %221 = call i32 @ftp_loop_internal(%struct.url* %0, %struct.fileinfo* %.0113, %struct.ccon* %2, i8** null, i1 zeroext %220)
  br label %243

; <label>:222:                                    ; preds = %143
  %223 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %224 = load i8, i8* %223, align 1
  %225 = trunc i8 %224 to i1
  br i1 %225, label %243, label %226

; <label>:226:                                    ; preds = %222
  %227 = getelementptr [24 x i8], [24 x i8]* @.str.19.93, i32 0, i32 0
  %228 = call i8* @gettext(i8* %227) #8
  %229 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 1
  %230 = load i8*, i8** %229, align 8
  %231 = call i8* @quote(i8* %230)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %228, i8* %231)
  br label %243

; <label>:232:                                    ; preds = %143
  %233 = trunc i8 %.210 to i1
  br i1 %233, label %234, label %243

; <label>:234:                                    ; preds = %232
  %235 = trunc i8 %.4 to i1
  %236 = call i32 @ftp_loop_internal(%struct.url* %0, %struct.fileinfo* %.0113, %struct.ccon* %2, i8** null, i1 zeroext %235)
  br label %243

; <label>:237:                                    ; preds = %143
  %238 = getelementptr [36 x i8], [36 x i8]* @.str.20.94, i32 0, i32 0
  %239 = call i8* @gettext(i8* %238) #8
  %240 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 1
  %241 = load i8*, i8** %240, align 8
  %242 = call i8* @quote(i8* %241)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %239, i8* %242)
  br label %243

; <label>:243:                                    ; preds = %232, %234, %222, %226, %215, %154, %219, %217, %143, %237, %183
  %.311 = phi i8 [ %.210, %143 ], [ %.210, %237 ], [ 0, %183 ], [ %.210, %217 ], [ %.210, %219 ], [ %.210, %154 ], [ %.210, %215 ], [ %.210, %226 ], [ %.210, %222 ], [ %.210, %234 ], [ %.210, %232 ]
  %.47 = phi i32 [ 25, %143 ], [ 25, %237 ], [ 25, %183 ], [ 25, %215 ], [ 25, %154 ], [ %221, %219 ], [ 25, %217 ], [ 25, %226 ], [ 25, %222 ], [ %236, %234 ], [ 25, %232 ]
  %244 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %245 = load i8*, i8** %244, align 8
  call void @set_local_file(i8** %4, i8* %245)
  %246 = trunc i8 %.311 to i1
  %247 = load i8*, i8** %4, align 8
  %248 = icmp ne i8* %247, null
  %or.cond = and i1 %246, %248
  br i1 %or.cond, label %249, label %273

; <label>:249:                                    ; preds = %243
  %250 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 0
  %251 = load i32, i32* %250, align 8
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %253, label %273

; <label>:253:                                    ; preds = %249
  %254 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 143
  %255 = load i8, i8* %254, align 1
  %256 = trunc i8 %255 to i1
  br i1 %256, label %257, label %273

; <label>:257:                                    ; preds = %253
  %258 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 5
  %259 = load i32, i32* %258, align 4
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %261, label %266

; <label>:261:                                    ; preds = %257
  %262 = load i8*, i8** %4, align 8
  %263 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 5
  %264 = load i32, i32* %263, align 4
  %265 = call i32 @chmod(i8* %262, i32 %264) #8
  br label %273

; <label>:266:                                    ; preds = %257
  %267 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %268 = load i8, i8* %267, align 1
  %269 = trunc i8 %268 to i1
  br i1 %269, label %270, label %273

; <label>:270:                                    ; preds = %266
  %271 = load i8*, i8** %4, align 8
  %272 = getelementptr [34 x i8], [34 x i8]* @.str.21.95, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %272, i8* %271)
  br label %273

; <label>:273:                                    ; preds = %261, %266, %270, %253, %249, %243
  %274 = load i8*, i8** %4, align 8
  %275 = icmp ne i8* %274, null
  br i1 %275, label %276, label %310

; <label>:276:                                    ; preds = %273
  %277 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 153
  %278 = load i8, i8* %277, align 1
  %279 = trunc i8 %278 to i1
  br i1 %279, label %280, label %302

; <label>:280:                                    ; preds = %276
  %281 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 0
  %282 = load i32, i32* %281, align 8
  %283 = icmp eq i32 %282, 2
  br i1 %283, label %284, label %288

; <label>:284:                                    ; preds = %280
  %285 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 45
  %286 = load i8, i8* %285, align 1
  %287 = trunc i8 %286 to i1
  br i1 %287, label %288, label %302

; <label>:288:                                    ; preds = %284, %280
  %289 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 3
  %290 = load i64, i64* %289, align 8
  %291 = icmp ne i64 %290, -1
  br i1 %291, label %292, label %302

; <label>:292:                                    ; preds = %288
  %293 = trunc i8 %.311 to i1
  br i1 %293, label %294, label %302

; <label>:294:                                    ; preds = %292
  %295 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %296 = load i8*, i8** %295, align 8
  %297 = call zeroext i1 @file_exists_p(i8* %296)
  br i1 %297, label %298, label %302

; <label>:298:                                    ; preds = %294
  %299 = load i8*, i8** %4, align 8
  %300 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 3
  %301 = load i64, i64* %300, align 8
  call void @touch(i8* %299, i64 %301)
  br label %310

; <label>:302:                                    ; preds = %294, %292, %288, %284, %276
  %303 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 3
  %304 = load i64, i64* %303, align 8
  %305 = icmp eq i64 %304, -1
  br i1 %305, label %306, label %310

; <label>:306:                                    ; preds = %302
  %307 = getelementptr [25 x i8], [25 x i8]* @.str.22.96, i32 0, i32 0
  %308 = call i8* @gettext(i8* %307) #8
  %309 = load i8*, i8** %4, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %308, i8* %309)
  br label %310

; <label>:310:                                    ; preds = %273, %302, %306, %298
  %311 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  %312 = load i8*, i8** %311, align 8
  call void @free(i8* %312) #8
  %313 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  store i8* null, i8** %313, align 8
  %314 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 7
  store i8* %72, i8** %314, align 8
  call void @url_set_file(%struct.url* %0, i8* %75)
  call void @free(i8* %75) #8
  switch i32 %.47, label %315 [
    i32 43, label %.loopexit.loopexit
    i32 1, label %.loopexit.loopexit
    i32 21, label %.loopexit.loopexit
    i32 52, label %.loopexit.loopexit
    i32 53, label %.loopexit.loopexit
    i32 54, label %.loopexit.loopexit
  ]

; <label>:315:                                    ; preds = %310
  %316 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 1
  %317 = load i32, i32* %316, align 4
  %318 = and i32 %317, -4
  store i32 %318, i32* %316, align 4
  %319 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 8
  %320 = load %struct.fileinfo*, %struct.fileinfo** %319, align 8
  %321 = icmp ne %struct.fileinfo* %320, null
  br i1 %321, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %310, %310, %310, %310, %310, %310, %315
  %.5.ph = phi i32 [ %.47, %315 ], [ %.47, %310 ], [ %.47, %310 ], [ %.47, %310 ], [ %.47, %310 ], [ %.47, %310 ], [ %.47, %310 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %57
  %.5 = phi i32 [ 25, %57 ], [ %.5.ph, %.loopexit.loopexit ]
  %322 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %323 = load i8, i8* %322, align 1
  %324 = trunc i8 %323 to i1
  br i1 %324, label %325, label %336

; <label>:325:                                    ; preds = %.loopexit
  %326 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %327 = load i32, i32* %326, align 4
  %328 = icmp ne i32 %327, -1
  br i1 %328, label %329, label %334

; <label>:329:                                    ; preds = %325
  %330 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %331 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %332 = load i32, i32* %331, align 4
  %333 = icmp sge i32 %330, %332
  br i1 %333, label %336, label %334

; <label>:334:                                    ; preds = %329, %325
  %335 = call i32 @ftp_retrieve_dirs(%struct.url* %0, %struct.fileinfo* %1, %struct.ccon* %2)
  br label %350

; <label>:336:                                    ; preds = %329, %.loopexit
  %337 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %338 = load i8, i8* %337, align 1
  %339 = trunc i8 %338 to i1
  br i1 %339, label %340, label %350

; <label>:340:                                    ; preds = %336
  %341 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %342 = load i8, i8* %341, align 1
  %343 = trunc i8 %342 to i1
  br i1 %343, label %344, label %350

; <label>:344:                                    ; preds = %340
  %345 = getelementptr [52 x i8], [52 x i8]* @.str.23.97, i32 0, i32 0
  %346 = call i8* @gettext(i8* %345) #8
  %347 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %348 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %349 = load i32, i32* %348, align 4
  call void (i8*, ...) @debug_logprintf(i8* %346, i32 %347, i32 %349)
  br label %350

; <label>:350:                                    ; preds = %336, %340, %344, %334
  %.6 = phi i32 [ %335, %334 ], [ %.5, %344 ], [ %.5, %340 ], [ %.5, %336 ]
  %351 = load i32, i32* @ftp_retrieve_list.depth, align 4
  %352 = add nsw i32 %351, -1
  store i32 %352, i32* @ftp_retrieve_list.depth, align 4
  br label %353

; <label>:353:                                    ; preds = %350, %67, %27
  %.0 = phi i32 [ 26, %27 ], [ 43, %67 ], [ %.6, %350 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #2

; Function Attrs: nounwind
declare dso_local i64 @readlink(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i32 @symlink(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @chmod(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @ftp_retrieve_dirs(%struct.url*, %struct.fileinfo*, %struct.ccon*) #0 {
  %4 = icmp ne %struct.fileinfo* %1, null
  br i1 %4, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %85
  %.014 = phi %struct.fileinfo* [ %87, %85 ], [ %1, %.lr.ph.preheader ]
  %.023 = phi i8* [ %.2, %85 ], [ null, %.lr.ph.preheader ]
  call void @unroll_loop(i32 70)
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %6 = load i64, i64* %5, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %.lr.ph
  %9 = load i64, i64* @total_downloaded_bytes, align 8
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %11 = load i64, i64* %10, align 8
  %12 = icmp sgt i64 %9, %11
  br i1 %12, label %.loopexit.loopexit, label %13

; <label>:13:                                     ; preds = %8, %.lr.ph
  %14 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = icmp ne i32 %15, 1
  br i1 %16, label %85, label %17

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %19 = load i8*, i8** %18, align 8
  %20 = call i64 @strlen(i8* %19) #14
  %21 = add i64 %20, 1
  %22 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @strlen(i8* %23) #14
  %25 = add i64 %21, %24
  %26 = add i64 %25, 1
  %27 = trunc i64 %26 to i32
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %32

; <label>:29:                                     ; preds = %17
  %30 = sext i32 %27 to i64
  %31 = alloca i8, i64 %30, align 16, !track !250
  br label %32

; <label>:32:                                     ; preds = %29, %17
  %.1 = phi i8* [ %31, %29 ], [ %.023, %17 ]
  %33 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %34 = load i8*, i8** %33, align 8
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %47, label %38

; <label>:38:                                     ; preds = %32
  %39 = load i8, i8* %34, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 47
  br i1 %41, label %42, label %52

; <label>:42:                                     ; preds = %38
  %43 = getelementptr inbounds i8, i8* %34, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %52

; <label>:47:                                     ; preds = %42, %32
  %48 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 1
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr [5 x i8], [5 x i8]* @.str.24.98, i32 0, i32 0
  %51 = call i32 (i8*, i8*, ...) @sprintf(i8* %.1, i8* %50, i8* %34, i8* %49) #8
  br label %57

; <label>:52:                                     ; preds = %42, %38
  %53 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr [6 x i8], [6 x i8]* @.str.25.99, i32 0, i32 0
  %56 = call i32 (i8*, i8*, ...) @sprintf(i8* %.1, i8* %55, i8* %34, i8* %54) #8
  br label %57

; <label>:57:                                     ; preds = %47, %52
  %58 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %59 = load i8, i8* %58, align 1
  %60 = trunc i8 %59 to i1
  br i1 %60, label %61, label %63

; <label>:61:                                     ; preds = %57
  %62 = getelementptr [54 x i8], [54 x i8]* @.str.26.100, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %62)
  br label %63

; <label>:63:                                     ; preds = %61, %57
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %65 = load i8, i8* %64, align 1
  %66 = trunc i8 %65 to i1
  br i1 %66, label %67, label %71

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 1
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr [49 x i8], [49 x i8]* @.str.27.101, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %70, i8* %34, i8* %69, i8* %.1)
  br label %71

; <label>:71:                                     ; preds = %63, %67
  %72 = call zeroext i1 @accdir(i8* %.1)
  br i1 %72, label %77, label %73

; <label>:73:                                     ; preds = %71
  %74 = getelementptr [54 x i8], [54 x i8]* @.str.28.102, i32 0, i32 0
  %75 = call i8* @gettext(i8* %74) #8
  %76 = call i8* @quote(i8* %.1)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %75, i8* %76)
  br label %85

; <label>:77:                                     ; preds = %71
  %78 = getelementptr inbounds %struct.ccon, %struct.ccon* %2, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = and i32 %79, -3
  store i32 %80, i32* %78, align 8
  %81 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %82 = load i8*, i8** %81, align 8
  %83 = call noalias i8* @xstrdup(i8* %82)
  call void @url_set_dir(%struct.url* %0, i8* %.1)
  %84 = call i32 @ftp_retrieve_glob(%struct.url* %0, %struct.ccon* %2, i32 1)
  call void @url_set_dir(%struct.url* %0, i8* %83)
  call void @free(i8* %83) #8
  br label %85

; <label>:85:                                     ; preds = %13, %77, %73
  %.2 = phi i8* [ %.1, %77 ], [ %.1, %73 ], [ %.023, %13 ]
  %86 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 8
  %87 = load %struct.fileinfo*, %struct.fileinfo** %86, align 8
  %88 = icmp ne %struct.fileinfo* %87, null
  br i1 %88, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %8, %85
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %3
  %89 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %90 = load i64, i64* %89, align 8
  %91 = icmp ne i64 %90, 0
  br i1 %91, label %92, label %97

; <label>:92:                                     ; preds = %.loopexit
  %93 = load i64, i64* @total_downloaded_bytes, align 8
  %94 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %95 = load i64, i64* %94, align 8
  %96 = icmp sgt i64 %93, %95
  br i1 %96, label %98, label %97

; <label>:97:                                     ; preds = %92, %.loopexit
  br label %98

; <label>:98:                                     ; preds = %92, %97
  %.0 = phi i32 [ 25, %97 ], [ 43, %92 ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @yylex() #0 {
  %1 = load i32, i32* @yy_init, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %33, label %3

; <label>:3:                                      ; preds = %0
  store i32 1, i32* @yy_init, align 4
  %4 = load i32, i32* @yy_start, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %3
  store i32 1, i32* @yy_start, align 4
  br label %7

; <label>:7:                                      ; preds = %6, %3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %9 = icmp ne %struct._IO_FILE* %8, null
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %7
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  store %struct._IO_FILE* %11, %struct._IO_FILE** @yyin, align 8
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @yyout, align 8
  %14 = icmp ne %struct._IO_FILE* %13, null
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %12
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %16, %struct._IO_FILE** @yyout, align 8
  br label %17

; <label>:17:                                     ; preds = %15, %12
  %18 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %19 = icmp ne %struct.yy_buffer_state** %18, null
  br i1 %19, label %20, label %26

; <label>:20:                                     ; preds = %17
  %21 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %22 = load i64, i64* @yy_buffer_stack_top, align 8
  %23 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %21, i64 %22
  %24 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %23, align 8
  %25 = icmp ne %struct.yy_buffer_state* %24, null
  br i1 %25, label %32, label %26

; <label>:26:                                     ; preds = %17, %20
  call void @yyensure_buffer_stack()
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %28 = call %struct.yy_buffer_state* @yy_create_buffer(%struct._IO_FILE* %27, i32 16384)
  %29 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %30 = load i64, i64* @yy_buffer_stack_top, align 8
  %31 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %29, i64 %30
  store %struct.yy_buffer_state* %28, %struct.yy_buffer_state** %31, align 8
  br label %32

; <label>:32:                                     ; preds = %26, %20
  call void @yy_load_buffer_state()
  br label %33

; <label>:33:                                     ; preds = %32, %0
  br label %34

; <label>:34:                                     ; preds = %33, %256
  call void @unroll_loop(i32 71)
  %35 = load i8*, i8** @yy_c_buf_p, align 8
  %36 = load i8, i8* @yy_hold_char, align 1
  store i8 %36, i8* %35, align 1
  %37 = load i32, i32* @yy_start, align 4
  br label %38

; <label>:38:                                     ; preds = %.backedge, %34
  %.05 = phi i8* [ %35, %34 ], [ %.05.be, %.backedge ]
  %.02 = phi i8* [ %35, %34 ], [ %.02.be, %.backedge ]
  %.01 = phi i32 [ %37, %34 ], [ %.01.be, %.backedge ]
  call void @unroll_loop(i32 72)
  br label %39

; <label>:39:                                     ; preds = %._crit_edge, %38
  %.13 = phi i8* [ %.02, %38 ], [ %96, %._crit_edge ]
  %.1 = phi i32 [ %.01, %38 ], [ %95, %._crit_edge ]
  call void @unroll_loop(i32 73)
  %40 = load i8, i8* %.13, align 1
  %41 = zext i8 %40 to i32
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [256 x i32], [256 x i32]* @yy_ec, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = trunc i32 %44 to i8
  %46 = sext i32 %.1 to i64
  %47 = getelementptr inbounds [1153 x i16], [1153 x i16]* bitcast (<{ [1132 x i16], [21 x i16] }>* @yy_accept to [1153 x i16]*), i64 0, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = icmp ne i16 %48, 0
  br i1 %49, label %50, label %51

; <label>:50:                                     ; preds = %39
  store i32 %.1, i32* @yy_last_accepting_state, align 4
  store i8* %.13, i8** @yy_last_accepting_cpos, align 8
  br label %51

; <label>:51:                                     ; preds = %50, %39
  %52 = sext i32 %.1 to i64
  %53 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %52
  %54 = load i16, i16* %53, align 2
  %55 = sext i16 %54 to i32
  %56 = zext i8 %45 to i32
  %57 = add nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_chk, i64 0, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = icmp ne i32 %61, %.1
  br i1 %62, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %51
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %74
  %.216 = phi i32 [ %66, %74 ], [ %.1, %.lr.ph.preheader ]
  %.0815 = phi i8 [ %.19, %74 ], [ %45, %.lr.ph.preheader ]
  call void @unroll_loop(i32 74)
  %63 = sext i32 %.216 to i64
  %64 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_def, i64 0, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = icmp sge i32 %66, 1153
  br i1 %67, label %68, label %74

; <label>:68:                                     ; preds = %.lr.ph
  %69 = zext i8 %.0815 to i32
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [82 x i32], [82 x i32]* @yy_meta, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = trunc i32 %72 to i8
  br label %74

; <label>:74:                                     ; preds = %68, %.lr.ph
  %.19 = phi i8 [ %73, %68 ], [ %.0815, %.lr.ph ]
  %75 = sext i32 %66 to i64
  %76 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = zext i8 %.19 to i32
  %80 = add nsw i32 %78, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_chk, i64 0, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = sext i16 %83 to i32
  %85 = icmp ne i32 %84, %66
  br i1 %85, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %74
  %.08.lcssa.ph = phi i8 [ %.19, %74 ]
  %.2.lcssa.ph = phi i32 [ %66, %74 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %51
  %.08.lcssa = phi i8 [ %45, %51 ], [ %.08.lcssa.ph, %._crit_edge.loopexit ]
  %.2.lcssa = phi i32 [ %.1, %51 ], [ %.2.lcssa.ph, %._crit_edge.loopexit ]
  %86 = sext i32 %.2.lcssa to i64
  %87 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = zext i8 %.08.lcssa to i32
  %91 = add i32 %89, %90
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_nxt, i64 0, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = sext i16 %94 to i32
  %96 = getelementptr inbounds i8, i8* %.13, i32 1
  %97 = icmp ne i32 %95, 1152
  br i1 %97, label %39, label %98

; <label>:98:                                     ; preds = %._crit_edge
  %99 = load i8*, i8** @yy_last_accepting_cpos, align 8
  %100 = load i32, i32* @yy_last_accepting_state, align 4
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %98
  %.16.ph = phi i8* [ %.05, %98 ], [ %.16.ph.be, %.outer.backedge ]
  %.24.ph = phi i8* [ %99, %98 ], [ %.24.ph.be, %.outer.backedge ]
  %.3.ph = phi i32 [ %100, %98 ], [ %.3.ph.be, %.outer.backedge ]
  call void @unroll_loop(i32 52)
  br label %101

; <label>:101:                                    ; preds = %.outer, %111
  %.24 = phi i8* [ %113, %111 ], [ %.24.ph, %.outer ]
  %.3 = phi i32 [ %114, %111 ], [ %.3.ph, %.outer ]
  call void @unroll_loop(i32 75)
  %102 = sext i32 %.3 to i64
  %103 = getelementptr inbounds [1153 x i16], [1153 x i16]* bitcast (<{ [1132 x i16], [21 x i16] }>* @yy_accept to [1153 x i16]*), i64 0, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = sext i16 %104 to i32
  store i8* %.16.ph, i8** @yytext, align 8
  %106 = ptrtoint i8* %.24 to i64
  %107 = ptrtoint i8* %.16.ph to i64
  %108 = sub i64 %106, %107
  store i64 %108, i64* @yyleng, align 8
  %109 = load i8, i8* %.24, align 1
  store i8 %109, i8* @yy_hold_char, align 1
  store i8 0, i8* %.24, align 1
  store i8* %.24, i8** @yy_c_buf_p, align 8
  br label %110

; <label>:110:                                    ; preds = %225, %101
  %.07 = phi i32 [ %105, %101 ], [ %232, %225 ]
  call void @unroll_loop(i32 76)
  switch i32 %.07, label %254 [
    i32 0, label %111
    i32 1, label %.loopexit
    i32 2, label %.loopexit
    i32 3, label %115
    i32 4, label %116
    i32 5, label %117
    i32 6, label %118
    i32 7, label %119
    i32 8, label %120
    i32 9, label %121
    i32 10, label %122
    i32 11, label %123
    i32 12, label %124
    i32 13, label %125
    i32 14, label %126
    i32 15, label %127
    i32 16, label %128
    i32 17, label %129
    i32 18, label %130
    i32 19, label %131
    i32 20, label %132
    i32 21, label %133
    i32 22, label %134
    i32 23, label %135
    i32 24, label %136
    i32 25, label %137
    i32 26, label %138
    i32 27, label %139
    i32 28, label %140
    i32 29, label %141
    i32 30, label %142
    i32 31, label %143
    i32 32, label %144
    i32 33, label %145
    i32 34, label %146
    i32 35, label %147
    i32 36, label %148
    i32 37, label %149
    i32 38, label %150
    i32 39, label %151
    i32 40, label %152
    i32 41, label %153
    i32 42, label %157
    i32 44, label %163
    i32 43, label %164
  ]

; <label>:111:                                    ; preds = %110
  %112 = load i8, i8* @yy_hold_char, align 1
  store i8 %112, i8* %.24, align 1
  %113 = load i8*, i8** @yy_last_accepting_cpos, align 8
  %114 = load i32, i32* @yy_last_accepting_state, align 4
  br label %101

; <label>:115:                                    ; preds = %110
  br label %257

; <label>:116:                                    ; preds = %110
  br label %257

; <label>:117:                                    ; preds = %110
  br label %257

; <label>:118:                                    ; preds = %110
  br label %257

; <label>:119:                                    ; preds = %110
  br label %257

; <label>:120:                                    ; preds = %110
  br label %257

; <label>:121:                                    ; preds = %110
  br label %257

; <label>:122:                                    ; preds = %110
  br label %257

; <label>:123:                                    ; preds = %110
  br label %257

; <label>:124:                                    ; preds = %110
  br label %257

; <label>:125:                                    ; preds = %110
  br label %257

; <label>:126:                                    ; preds = %110
  br label %257

; <label>:127:                                    ; preds = %110
  br label %257

; <label>:128:                                    ; preds = %110
  br label %257

; <label>:129:                                    ; preds = %110
  br label %257

; <label>:130:                                    ; preds = %110
  br label %257

; <label>:131:                                    ; preds = %110
  br label %257

; <label>:132:                                    ; preds = %110
  br label %257

; <label>:133:                                    ; preds = %110
  br label %257

; <label>:134:                                    ; preds = %110
  br label %257

; <label>:135:                                    ; preds = %110
  br label %257

; <label>:136:                                    ; preds = %110
  br label %257

; <label>:137:                                    ; preds = %110
  br label %257

; <label>:138:                                    ; preds = %110
  br label %257

; <label>:139:                                    ; preds = %110
  br label %257

; <label>:140:                                    ; preds = %110
  br label %257

; <label>:141:                                    ; preds = %110
  br label %257

; <label>:142:                                    ; preds = %110
  br label %257

; <label>:143:                                    ; preds = %110
  br label %257

; <label>:144:                                    ; preds = %110
  br label %257

; <label>:145:                                    ; preds = %110
  br label %257

; <label>:146:                                    ; preds = %110
  br label %257

; <label>:147:                                    ; preds = %110
  br label %257

; <label>:148:                                    ; preds = %110
  br label %257

; <label>:149:                                    ; preds = %110
  br label %257

; <label>:150:                                    ; preds = %110
  br label %257

; <label>:151:                                    ; preds = %110
  br label %257

; <label>:152:                                    ; preds = %110
  br label %257

; <label>:153:                                    ; preds = %110
  %154 = load i8*, i8** @yytext, align 8
  %155 = load i8, i8* %154, align 1
  %156 = sext i8 %155 to i32
  br label %257

; <label>:157:                                    ; preds = %110
  %158 = load i8*, i8** @yytext, align 8
  %159 = load i64, i64* @yyleng, align 8
  %160 = load %struct._IO_FILE*, %struct._IO_FILE** @yyout, align 8
  %161 = call i64 @fwrite(i8* %158, i64 %159, i64 1, %struct._IO_FILE* %160)
  %162 = icmp ne i64 %161, 0
  br label %256

; <label>:163:                                    ; preds = %110
  br label %257

; <label>:164:                                    ; preds = %110
  %165 = load i8*, i8** @yytext, align 8
  %166 = ptrtoint i8* %.24 to i64
  %167 = ptrtoint i8* %165 to i64
  %168 = sub i64 %166, %167
  %169 = trunc i64 %168 to i32
  %170 = sub nsw i32 %169, 1
  %171 = load i8, i8* @yy_hold_char, align 1
  store i8 %171, i8* %.24, align 1
  %172 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %173 = load i64, i64* @yy_buffer_stack_top, align 8
  %174 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %172, i64 %173
  %175 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %174, align 8
  %176 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %175, i32 0, i32 11
  %177 = load i32, i32* %176, align 8
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %197

; <label>:179:                                    ; preds = %164
  %180 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %181 = load i64, i64* @yy_buffer_stack_top, align 8
  %182 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %180, i64 %181
  %183 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %182, align 8
  %184 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %183, i32 0, i32 4
  %185 = load i64, i64* %184, align 8
  store i64 %185, i64* @yy_n_chars, align 8
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %187 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %188 = load i64, i64* @yy_buffer_stack_top, align 8
  %189 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %187, i64 %188
  %190 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %189, align 8
  %191 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %190, i32 0, i32 0
  store %struct._IO_FILE* %186, %struct._IO_FILE** %191, align 8
  %192 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %193 = load i64, i64* @yy_buffer_stack_top, align 8
  %194 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %192, i64 %193
  %195 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %194, align 8
  %196 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %195, i32 0, i32 11
  store i32 1, i32* %196, align 8
  br label %197

; <label>:197:                                    ; preds = %179, %164
  %198 = load i8*, i8** @yy_c_buf_p, align 8
  %199 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %200 = load i64, i64* @yy_buffer_stack_top, align 8
  %201 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %199, i64 %200
  %202 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %201, align 8
  %203 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %202, i32 0, i32 1
  %204 = load i8*, i8** %203, align 8
  %205 = load i64, i64* @yy_n_chars, align 8
  %206 = getelementptr inbounds i8, i8* %204, i64 %205
  %207 = icmp ule i8* %198, %206
  br i1 %207, label %208, label %223

; <label>:208:                                    ; preds = %197
  %.lcssa = phi i32 [ %170, %197 ]
  %209 = load i8*, i8** @yytext, align 8
  %210 = sext i32 %.lcssa to i64
  %211 = getelementptr inbounds i8, i8* %209, i64 %210
  store i8* %211, i8** @yy_c_buf_p, align 8
  %212 = call i32 @yy_get_previous_state()
  %213 = call i32 @yy_try_NUL_trans(i32 %212)
  %214 = load i8*, i8** @yytext, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 0
  %216 = icmp ne i32 %213, 0
  br i1 %216, label %217, label %220

; <label>:217:                                    ; preds = %208
  %.lcssa14 = phi i32 [ %213, %208 ]
  %.lcssa13 = phi i8* [ %215, %208 ]
  %218 = load i8*, i8** @yy_c_buf_p, align 8
  %219 = getelementptr inbounds i8, i8* %218, i32 1
  store i8* %219, i8** @yy_c_buf_p, align 8
  br label %.backedge

.backedge:                                        ; preds = %217, %233
  %.05.be = phi i8* [ %.lcssa13, %217 ], [ %240, %233 ]
  %.02.be = phi i8* [ %219, %217 ], [ %238, %233 ]
  %.01.be = phi i32 [ %.lcssa14, %217 ], [ %237, %233 ]
  br label %38

; <label>:220:                                    ; preds = %208
  %221 = load i8*, i8** @yy_last_accepting_cpos, align 8
  %222 = load i32, i32* @yy_last_accepting_state, align 4
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %220, %241
  %.16.ph.be = phi i8* [ %253, %241 ], [ %215, %220 ]
  %.24.ph.be = phi i8* [ %251, %241 ], [ %221, %220 ]
  %.3.ph.be = phi i32 [ %250, %241 ], [ %222, %220 ]
  br label %.outer

; <label>:223:                                    ; preds = %197
  %224 = call i32 @yy_get_next_buffer()
  switch i32 %224, label %.loopexit1 [
    i32 1, label %225
    i32 0, label %233
    i32 2, label %241
  ]

; <label>:225:                                    ; preds = %223
  store i32 0, i32* @yy_did_buffer_switch_on_eof, align 4
  %226 = load i8*, i8** @yytext, align 8
  %227 = getelementptr inbounds i8, i8* %226, i64 0
  store i8* %227, i8** @yy_c_buf_p, align 8
  %228 = load i32, i32* @yy_start, align 4
  %229 = sub nsw i32 %228, 1
  %230 = sdiv i32 %229, 2
  %231 = add nsw i32 43, %230
  %232 = add nsw i32 %231, 1
  br label %110

; <label>:233:                                    ; preds = %223
  %.lcssa11 = phi i32 [ %170, %223 ]
  %234 = load i8*, i8** @yytext, align 8
  %235 = sext i32 %.lcssa11 to i64
  %236 = getelementptr inbounds i8, i8* %234, i64 %235
  store i8* %236, i8** @yy_c_buf_p, align 8
  %237 = call i32 @yy_get_previous_state()
  %238 = load i8*, i8** @yy_c_buf_p, align 8
  %239 = load i8*, i8** @yytext, align 8
  %240 = getelementptr inbounds i8, i8* %239, i64 0
  br label %.backedge

; <label>:241:                                    ; preds = %223
  %242 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %243 = load i64, i64* @yy_buffer_stack_top, align 8
  %244 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %242, i64 %243
  %245 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %244, align 8
  %246 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %245, i32 0, i32 1
  %247 = load i8*, i8** %246, align 8
  %248 = load i64, i64* @yy_n_chars, align 8
  %249 = getelementptr inbounds i8, i8* %247, i64 %248
  store i8* %249, i8** @yy_c_buf_p, align 8
  %250 = call i32 @yy_get_previous_state()
  %251 = load i8*, i8** @yy_c_buf_p, align 8
  %252 = load i8*, i8** @yytext, align 8
  %253 = getelementptr inbounds i8, i8* %252, i64 0
  br label %.outer.backedge

; <label>:254:                                    ; preds = %110
  %255 = getelementptr [51 x i8], [51 x i8]* @.str.138, i32 0, i32 0
  call void @yy_fatal_error(i8* %255)
  br label %256

.loopexit1:                                       ; preds = %223
  br label %256

; <label>:256:                                    ; preds = %.loopexit1, %254, %157
  br label %34

.loopexit:                                        ; preds = %110, %110
  %.0.ph = phi i32 [ 1, %110 ], [ 1, %110 ]
  br label %257

; <label>:257:                                    ; preds = %.loopexit, %163, %153, %152, %151, %150, %149, %148, %147, %146, %145, %144, %143, %142, %141, %140, %139, %138, %137, %136, %135, %134, %133, %132, %131, %130, %129, %128, %127, %126, %125, %124, %123, %122, %121, %120, %119, %118, %117, %116, %115
  %.0 = phi i32 [ 0, %163 ], [ %156, %153 ], [ 29, %152 ], [ 28, %151 ], [ 28, %150 ], [ 27, %149 ], [ 26, %148 ], [ 25, %147 ], [ 24, %146 ], [ 24, %145 ], [ 23, %144 ], [ 23, %143 ], [ 22, %142 ], [ 22, %141 ], [ 22, %140 ], [ 21, %139 ], [ 21, %138 ], [ 21, %137 ], [ 21, %136 ], [ 21, %135 ], [ 21, %134 ], [ 20, %133 ], [ 19, %132 ], [ 18, %131 ], [ 17, %130 ], [ 16, %129 ], [ 15, %128 ], [ 14, %127 ], [ 13, %126 ], [ 12, %125 ], [ 11, %124 ], [ 10, %123 ], [ 9, %122 ], [ 8, %121 ], [ 7, %120 ], [ 6, %119 ], [ 5, %118 ], [ 4, %117 ], [ 3, %116 ], [ 2, %115 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @yyensure_buffer_stack() #0 {
  %1 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %2 = icmp ne %struct.yy_buffer_state** %1, null
  br i1 %2, label %15, label %3

; <label>:3:                                      ; preds = %0
  %4 = mul i64 1, 8
  %5 = call i8* @yyalloc(i64 %4)
  %6 = bitcast i8* %5 to %struct.yy_buffer_state**
  store %struct.yy_buffer_state** %6, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %8 = icmp ne %struct.yy_buffer_state** %7, null
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = getelementptr [49 x i8], [49 x i8]* @.str.10.145, i32 0, i32 0
  call void @yy_fatal_error(i8* %10)
  br label %11

; <label>:11:                                     ; preds = %9, %3
  %12 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %13 = bitcast %struct.yy_buffer_state** %12 to i8*
  %14 = mul i64 1, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 %14, i1 false)
  store i64 1, i64* @yy_buffer_stack_max, align 8
  store i64 0, i64* @yy_buffer_stack_top, align 8
  br label %40

; <label>:15:                                     ; preds = %0
  %16 = load i64, i64* @yy_buffer_stack_top, align 8
  %17 = load i64, i64* @yy_buffer_stack_max, align 8
  %18 = sub i64 %17, 1
  %19 = icmp uge i64 %16, %18
  br i1 %19, label %20, label %40

; <label>:20:                                     ; preds = %15
  %21 = load i64, i64* @yy_buffer_stack_max, align 8
  %22 = sext i32 8 to i64
  %23 = add i64 %21, %22
  %24 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %25 = bitcast %struct.yy_buffer_state** %24 to i8*
  %26 = mul i64 %23, 8
  %27 = call i8* @yyrealloc(i8* %25, i64 %26)
  %28 = bitcast i8* %27 to %struct.yy_buffer_state**
  store %struct.yy_buffer_state** %28, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %29 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %30 = icmp ne %struct.yy_buffer_state** %29, null
  br i1 %30, label %33, label %31

; <label>:31:                                     ; preds = %20
  %32 = getelementptr [49 x i8], [49 x i8]* @.str.10.145, i32 0, i32 0
  call void @yy_fatal_error(i8* %32)
  br label %33

; <label>:33:                                     ; preds = %31, %20
  %34 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %35 = load i64, i64* @yy_buffer_stack_max, align 8
  %36 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %34, i64 %35
  %37 = bitcast %struct.yy_buffer_state** %36 to i8*
  %38 = sext i32 8 to i64
  %39 = mul i64 %38, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 %39, i1 false)
  store i64 %23, i64* @yy_buffer_stack_max, align 8
  br label %40

; <label>:40:                                     ; preds = %11, %33, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.yy_buffer_state* @yy_create_buffer(%struct._IO_FILE*, i32) #7 {
  %3 = call i8* @yyalloc(i64 72)
  %4 = bitcast i8* %3 to %struct.yy_buffer_state*
  %5 = icmp ne %struct.yy_buffer_state* %4, null
  br i1 %5, label %8, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr [44 x i8], [44 x i8]* @.str.1.144, i32 0, i32 0
  call void @yy_fatal_error(i8* %7)
  br label %8

; <label>:8:                                      ; preds = %6, %2
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 3
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, 2
  %14 = call i8* @yyalloc(i64 %13)
  %15 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 1
  store i8* %14, i8** %15, align 8
  %16 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ne i8* %17, null
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %8
  %20 = getelementptr [44 x i8], [44 x i8]* @.str.1.144, i32 0, i32 0
  call void @yy_fatal_error(i8* %20)
  br label %21

; <label>:21:                                     ; preds = %19, %8
  %22 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 5
  store i32 1, i32* %22, align 8
  call void @yy_init_buffer(%struct.yy_buffer_state* %4, %struct._IO_FILE* %0)
  ret %struct.yy_buffer_state* %4
}

; Function Attrs: noinline nounwind uwtable
define internal void @yy_load_buffer_state() #0 {
  %1 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %2 = load i64, i64* @yy_buffer_stack_top, align 8
  %3 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %1, i64 %2
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %3, align 8
  %5 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* @yy_n_chars, align 8
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, i64 %8
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, align 8
  %11 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 2
  %12 = load i8*, i8** %11, align 8
  store i8* %12, i8** @yy_c_buf_p, align 8
  store i8* %12, i8** @yytext, align 8
  %13 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %14 = load i64, i64* @yy_buffer_stack_top, align 8
  %15 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %13, i64 %14
  %16 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %15, align 8
  %17 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %16, i32 0, i32 0
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %17, align 8
  store %struct._IO_FILE* %18, %struct._IO_FILE** @yyin, align 8
  %19 = load i8*, i8** @yy_c_buf_p, align 8
  %20 = load i8, i8* %19, align 1
  store i8 %20, i8* @yy_hold_char, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @yy_get_previous_state() #0 {
  %1 = load i32, i32* @yy_start, align 4
  %2 = load i8*, i8** @yytext, align 8
  %3 = getelementptr inbounds i8, i8* %2, i64 0
  %4 = load i8*, i8** @yy_c_buf_p, align 8
  %5 = icmp ult i8* %3, %4
  br i1 %5, label %.lr.ph10.preheader, label %._crit_edge11

.lr.ph10.preheader:                               ; preds = %0
  br label %.lr.ph10

.lr.ph10:                                         ; preds = %.lr.ph10.preheader, %._crit_edge
  %.08 = phi i32 [ %67, %._crit_edge ], [ %1, %.lr.ph10.preheader ]
  %.017 = phi i8* [ %68, %._crit_edge ], [ %3, %.lr.ph10.preheader ]
  call void @unroll_loop(i32 77)
  %6 = load i8, i8* %.017, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %15

; <label>:9:                                      ; preds = %.lr.ph10
  %10 = load i8, i8* %.017, align 1
  %11 = zext i8 %10 to i32
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [256 x i32], [256 x i32]* @yy_ec, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4
  br label %15

; <label>:15:                                     ; preds = %.lr.ph10, %9
  %16 = phi i32 [ %14, %9 ], [ 1, %.lr.ph10 ]
  %17 = trunc i32 %16 to i8
  %18 = sext i32 %.08 to i64
  %19 = getelementptr inbounds [1153 x i16], [1153 x i16]* bitcast (<{ [1132 x i16], [21 x i16] }>* @yy_accept to [1153 x i16]*), i64 0, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = icmp ne i16 %20, 0
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %15
  store i32 %.08, i32* @yy_last_accepting_state, align 4
  store i8* %.017, i8** @yy_last_accepting_cpos, align 8
  br label %23

; <label>:23:                                     ; preds = %22, %15
  %24 = sext i32 %.08 to i64
  %25 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = zext i8 %17 to i32
  %29 = add nsw i32 %27, %28
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_chk, i64 0, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = sext i16 %32 to i32
  %34 = icmp ne i32 %33, %.08
  br i1 %34, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %23
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %46
  %.15 = phi i32 [ %38, %46 ], [ %.08, %.lr.ph.preheader ]
  %.024 = phi i8 [ %.13, %46 ], [ %17, %.lr.ph.preheader ]
  call void @unroll_loop(i32 78)
  %35 = sext i32 %.15 to i64
  %36 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_def, i64 0, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = icmp sge i32 %38, 1153
  br i1 %39, label %40, label %46

; <label>:40:                                     ; preds = %.lr.ph
  %41 = zext i8 %.024 to i32
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [82 x i32], [82 x i32]* @yy_meta, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = trunc i32 %44 to i8
  br label %46

; <label>:46:                                     ; preds = %40, %.lr.ph
  %.13 = phi i8 [ %45, %40 ], [ %.024, %.lr.ph ]
  %47 = sext i32 %38 to i64
  %48 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = sext i16 %49 to i32
  %51 = zext i8 %.13 to i32
  %52 = add nsw i32 %50, %51
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_chk, i64 0, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = icmp ne i32 %56, %38
  br i1 %57, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %46
  %.02.lcssa.ph = phi i8 [ %.13, %46 ]
  %.1.lcssa.ph = phi i32 [ %38, %46 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %23
  %.02.lcssa = phi i8 [ %17, %23 ], [ %.02.lcssa.ph, %._crit_edge.loopexit ]
  %.1.lcssa = phi i32 [ %.08, %23 ], [ %.1.lcssa.ph, %._crit_edge.loopexit ]
  %58 = sext i32 %.1.lcssa to i64
  %59 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = zext i8 %.02.lcssa to i32
  %63 = add i32 %61, %62
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_nxt, i64 0, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = sext i16 %66 to i32
  %68 = getelementptr inbounds i8, i8* %.017, i32 1
  %69 = load i8*, i8** @yy_c_buf_p, align 8
  %70 = icmp ult i8* %68, %69
  br i1 %70, label %.lr.ph10, label %._crit_edge11.loopexit

._crit_edge11.loopexit:                           ; preds = %._crit_edge
  %.0.lcssa.ph = phi i32 [ %67, %._crit_edge ]
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %0
  %.0.lcssa = phi i32 [ %1, %0 ], [ %.0.lcssa.ph, %._crit_edge11.loopexit ]
  ret i32 %.0.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @yy_try_NUL_trans(i32) #0 {
  %2 = load i8*, i8** @yy_c_buf_p, align 8
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [1153 x i16], [1153 x i16]* bitcast (<{ [1132 x i16], [21 x i16] }>* @yy_accept to [1153 x i16]*), i64 0, i64 %3
  %5 = load i16, i16* %4, align 2
  %6 = icmp ne i16 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i32 %0, i32* @yy_last_accepting_state, align 4
  store i8* %2, i8** @yy_last_accepting_cpos, align 8
  br label %8

; <label>:8:                                      ; preds = %7, %1
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = sext i16 %11 to i32
  %13 = add nsw i32 %12, 1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_chk, i64 0, i64 %14
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = icmp ne i32 %17, %0
  br i1 %18, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %8
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %30
  %.03 = phi i32 [ %22, %30 ], [ %0, %.lr.ph.preheader ]
  %.012 = phi i8 [ %.1, %30 ], [ 1, %.lr.ph.preheader ]
  %19 = sext i32 %.03 to i64
  %20 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_def, i64 0, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = icmp sge i32 %22, 1153
  br i1 %23, label %24, label %30

; <label>:24:                                     ; preds = %.lr.ph
  %25 = zext i8 %.012 to i32
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [82 x i32], [82 x i32]* @yy_meta, i64 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = trunc i32 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %24, %.lr.ph
  %.1 = phi i8 [ %29, %24 ], [ %.012, %.lr.ph ]
  %31 = sext i32 %22 to i64
  %32 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = zext i8 %.1 to i32
  %36 = add nsw i32 %34, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_chk, i64 0, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = icmp ne i32 %40, %22
  br i1 %41, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %30
  %.01.lcssa.ph = phi i8 [ %.1, %30 ]
  %.0.lcssa.ph = phi i32 [ %22, %30 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %8
  %.01.lcssa = phi i8 [ 1, %8 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %.0.lcssa = phi i32 [ %0, %8 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %42 = sext i32 %.0.lcssa to i64
  %43 = getelementptr inbounds [1307 x i16], [1307 x i16]* @yy_base, i64 0, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = zext i8 %.01.lcssa to i32
  %47 = add i32 %45, %46
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [17346 x i16], [17346 x i16]* @yy_nxt, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = sext i16 %50 to i32
  %52 = icmp eq i32 %51, 1152
  %53 = zext i1 %52 to i32
  %54 = icmp ne i32 %53, 0
  %. = select i1 %54, i32 0, i32 %51
  ret i32 %.
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @yy_get_next_buffer() #0 {
  %1 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %2 = load i64, i64* @yy_buffer_stack_top, align 8
  %3 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %1, i64 %2
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %3, align 8
  %5 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = load i8*, i8** @yytext, align 8
  %8 = load i8*, i8** @yy_c_buf_p, align 8
  %9 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %10 = load i64, i64* @yy_buffer_stack_top, align 8
  %11 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, i64 %10
  %12 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %11, align 8
  %13 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %12, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = load i64, i64* @yy_n_chars, align 8
  %16 = add i64 %15, 1
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  %18 = icmp ugt i8* %8, %17
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %0
  %20 = getelementptr [56 x i8], [56 x i8]* @.str.6.140, i32 0, i32 0
  call void @yy_fatal_error(i8* %20)
  br label %21

; <label>:21:                                     ; preds = %19, %0
  %22 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %23 = load i64, i64* @yy_buffer_stack_top, align 8
  %24 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %22, i64 %23
  %25 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %24, align 8
  %26 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %25, i32 0, i32 10
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  %29 = load i8*, i8** @yy_c_buf_p, align 8
  %30 = load i8*, i8** @yytext, align 8
  %31 = ptrtoint i8* %29 to i64
  %32 = ptrtoint i8* %30 to i64
  %33 = sub i64 %31, %32
  br i1 %28, label %34, label %37

; <label>:34:                                     ; preds = %21
  %35 = sub nsw i64 %33, 0
  %36 = icmp eq i64 %35, 1
  %. = select i1 %36, i32 1, i32 2
  br label %307

; <label>:37:                                     ; preds = %21
  %38 = trunc i64 %33 to i32
  %39 = sub nsw i32 %38, 1
  %40 = icmp slt i32 0, %39
  br i1 %40, label %.lr.ph15, label %._crit_edge16

.lr.ph15:                                         ; preds = %37
  %41 = trunc i64 %31 to i32
  %42 = add i32 %41, -1
  %43 = trunc i64 %32 to i32
  %44 = sub i32 %42, %43
  br label %45

; <label>:45:                                     ; preds = %.lr.ph15, %45
  %.0113 = phi i8* [ %6, %.lr.ph15 ], [ %48, %45 ]
  %.0212 = phi i8* [ %7, %.lr.ph15 ], [ %46, %45 ]
  %.0411 = phi i32 [ 0, %.lr.ph15 ], [ %49, %45 ]
  call void @unroll_loop(i32 80)
  %46 = getelementptr inbounds i8, i8* %.0212, i32 1
  %47 = load i8, i8* %.0212, align 1
  %48 = getelementptr inbounds i8, i8* %.0113, i32 1
  store i8 %47, i8* %.0113, align 1
  %49 = add nuw nsw i32 %.0411, 1
  %exitcond = icmp ne i32 %49, %44
  br i1 %exitcond, label %45, label %._crit_edge16.loopexit

._crit_edge16.loopexit:                           ; preds = %45
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %37
  %50 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %51 = load i64, i64* @yy_buffer_stack_top, align 8
  %52 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %50, i64 %51
  %53 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %52, align 8
  %54 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %53, i32 0, i32 11
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 2
  br i1 %56, label %57, label %63

; <label>:57:                                     ; preds = %._crit_edge16
  store i64 0, i64* @yy_n_chars, align 8
  %58 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %59 = load i64, i64* @yy_buffer_stack_top, align 8
  %60 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %58, i64 %59
  %61 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %60, align 8
  %62 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %61, i32 0, i32 4
  store i64 0, i64* %62, align 8
  br label %227

; <label>:63:                                     ; preds = %._crit_edge16
  %64 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %65 = load i64, i64* @yy_buffer_stack_top, align 8
  %66 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %64, i64 %65
  %67 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %66, align 8
  %68 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %67, i32 0, i32 3
  %69 = load i64, i64* %68, align 8
  %70 = sext i32 %39 to i64
  %71 = sub i64 %69, %70
  %72 = sub i64 %71, 1
  %73 = icmp ule i64 %72, 0
  br i1 %73, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %63
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %118
  call void @unroll_loop(i32 81)
  %74 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %75 = load i64, i64* @yy_buffer_stack_top, align 8
  %76 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %74, i64 %75
  %77 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %76, align 8
  %78 = load i8*, i8** @yy_c_buf_p, align 8
  %79 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 1
  %80 = load i8*, i8** %79, align 8
  %81 = ptrtoint i8* %78 to i64
  %82 = ptrtoint i8* %80 to i64
  %83 = sub i64 %81, %82
  %84 = trunc i64 %83 to i32
  %85 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 5
  %86 = load i32, i32* %85, align 8
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %110

; <label>:88:                                     ; preds = %.lr.ph
  %89 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 3
  %90 = load i64, i64* %89, align 8
  %91 = mul i64 %90, 2
  %92 = icmp ule i64 %91, 0
  %93 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 3
  %94 = load i64, i64* %93, align 8
  br i1 %92, label %95, label %100

; <label>:95:                                     ; preds = %88
  %96 = udiv i64 %94, 8
  %97 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 3
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, %96
  store i64 %99, i64* %97, align 8
  br label %102

; <label>:100:                                    ; preds = %88
  %101 = mul i64 %94, 2
  store i64 %101, i64* %93, align 8
  br label %102

; <label>:102:                                    ; preds = %100, %95
  %103 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 1
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 3
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, 2
  %108 = call i8* @yyrealloc(i8* %104, i64 %107)
  %109 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 1
  store i8* %108, i8** %109, align 8
  br label %112

; <label>:110:                                    ; preds = %.lr.ph
  %111 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 1
  store i8* null, i8** %111, align 8
  br label %112

; <label>:112:                                    ; preds = %110, %102
  %113 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 1
  %114 = load i8*, i8** %113, align 8
  %115 = icmp ne i8* %114, null
  br i1 %115, label %118, label %116

; <label>:116:                                    ; preds = %112
  %117 = getelementptr [44 x i8], [44 x i8]* @.str.7.141, i32 0, i32 0
  call void @yy_fatal_error(i8* %117)
  br label %118

; <label>:118:                                    ; preds = %116, %112
  %119 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %77, i32 0, i32 1
  %120 = load i8*, i8** %119, align 8
  %121 = sext i32 %84 to i64
  %122 = getelementptr inbounds i8, i8* %120, i64 %121
  store i8* %122, i8** @yy_c_buf_p, align 8
  %123 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %124 = load i64, i64* @yy_buffer_stack_top, align 8
  %125 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %123, i64 %124
  %126 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %125, align 8
  %127 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %126, i32 0, i32 3
  %128 = load i64, i64* %127, align 8
  %129 = sext i32 %39 to i64
  %130 = sub i64 %128, %129
  %131 = sub i64 %130, 1
  %132 = icmp ule i64 %131, 0
  br i1 %132, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %118
  %.07.lcssa.ph = phi i64 [ %131, %118 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %63
  %.07.lcssa = phi i64 [ %72, %63 ], [ %.07.lcssa.ph, %._crit_edge.loopexit ]
  %133 = icmp ugt i64 %.07.lcssa, 8192
  %spec.select = select i1 %133, i64 8192, i64 %.07.lcssa
  %134 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %135 = load i64, i64* @yy_buffer_stack_top, align 8
  %136 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %134, i64 %135
  %137 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %136, align 8
  %138 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %137, i32 0, i32 6
  %139 = load i32, i32* %138, align 4
  %140 = icmp ne i32 %139, 0
  br i1 %140, label %.preheader, label %185

.preheader:                                       ; preds = %._crit_edge
  br label %141

; <label>:141:                                    ; preds = %.preheader, %150
  %.09 = phi i32 [ %.110, %150 ], [ 42, %.preheader ]
  %.03 = phi i64 [ %161, %150 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 82)
  %142 = icmp ult i64 %.03, %spec.select
  br i1 %142, label %143, label %148

; <label>:143:                                    ; preds = %141
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %145 = call i32 @_IO_getc(%struct._IO_FILE* %144)
  %146 = icmp ne i32 %145, -1
  %147 = icmp ne i32 %145, 10
  %spec.select1 = select i1 %146, i1 %147, i1 false
  br label %148

; <label>:148:                                    ; preds = %143, %141
  %.110 = phi i32 [ %.09, %141 ], [ %145, %143 ]
  %149 = phi i1 [ false, %141 ], [ %spec.select1, %143 ]
  br i1 %149, label %150, label %162

; <label>:150:                                    ; preds = %148
  %151 = trunc i32 %.110 to i8
  %152 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %153 = load i64, i64* @yy_buffer_stack_top, align 8
  %154 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %152, i64 %153
  %155 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %154, align 8
  %156 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %155, i32 0, i32 1
  %157 = load i8*, i8** %156, align 8
  %158 = sext i32 %39 to i64
  %159 = getelementptr inbounds i8, i8* %157, i64 %158
  %160 = getelementptr inbounds i8, i8* %159, i64 %.03
  store i8 %151, i8* %160, align 1
  %161 = add i64 %.03, 1
  br label %141

; <label>:162:                                    ; preds = %148
  %.110.lcssa = phi i32 [ %.110, %148 ]
  %.03.lcssa = phi i64 [ %.03, %148 ]
  %163 = icmp eq i32 %.110.lcssa, 10
  br i1 %163, label %164, label %176

; <label>:164:                                    ; preds = %162
  %165 = trunc i32 %.110.lcssa to i8
  %166 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %167 = load i64, i64* @yy_buffer_stack_top, align 8
  %168 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %166, i64 %167
  %169 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %168, align 8
  %170 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %169, i32 0, i32 1
  %171 = load i8*, i8** %170, align 8
  %172 = sext i32 %39 to i64
  %173 = getelementptr inbounds i8, i8* %171, i64 %172
  %174 = add i64 %.03.lcssa, 1
  %175 = getelementptr inbounds i8, i8* %173, i64 %.03.lcssa
  store i8 %165, i8* %175, align 1
  br label %176

; <label>:176:                                    ; preds = %164, %162
  %.1 = phi i64 [ %174, %164 ], [ %.03.lcssa, %162 ]
  %177 = icmp eq i32 %.110.lcssa, -1
  br i1 %177, label %178, label %184

; <label>:178:                                    ; preds = %176
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %180 = call i32 @ferror(%struct._IO_FILE* %179) #8
  %181 = icmp ne i32 %180, 0
  br i1 %181, label %182, label %184

; <label>:182:                                    ; preds = %178
  %183 = getelementptr [29 x i8], [29 x i8]* @.str.8.142, i32 0, i32 0
  call void @yy_fatal_error(i8* %183)
  br label %184

; <label>:184:                                    ; preds = %182, %178, %176
  store i64 %.1, i64* @yy_n_chars, align 8
  br label %.loopexit

; <label>:185:                                    ; preds = %._crit_edge
  %186 = call i32* @__errno_location() #15
  store i32 0, i32* %186, align 4
  call void @unroll_loop(i32 83)
  %187 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %188 = load i64, i64* @yy_buffer_stack_top, align 8
  %189 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %187, i64 %188
  %190 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %189, align 8
  %191 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %190, i32 0, i32 1
  %192 = load i8*, i8** %191, align 8
  %193 = sext i32 %39 to i64
  %194 = getelementptr inbounds i8, i8* %192, i64 %193
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %196 = call i64 @fread(i8* %194, i64 1, i64 %spec.select, %struct._IO_FILE* %195)
  store i64 %196, i64* @yy_n_chars, align 8
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %.lr.ph3, label %.loopexit.loopexit

.lr.ph3:                                          ; preds = %185
  br label %198

; <label>:198:                                    ; preds = %.lr.ph3, %208
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %200 = call i32 @ferror(%struct._IO_FILE* %199) #8
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %..loopexit.loopexit_crit_edge

; <label>:202:                                    ; preds = %198
  %203 = call i32* @__errno_location() #15
  %204 = load i32, i32* %203, align 4
  %205 = icmp ne i32 %204, 4
  br i1 %205, label %206, label %208

; <label>:206:                                    ; preds = %202
  %207 = getelementptr [29 x i8], [29 x i8]* @.str.8.142, i32 0, i32 0
  call void @yy_fatal_error(i8* %207)
  br label %.loopexit

; <label>:208:                                    ; preds = %202
  %209 = call i32* @__errno_location() #15
  store i32 0, i32* %209, align 4
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  call void @clearerr(%struct._IO_FILE* %210) #8
  call void @unroll_loop(i32 83)
  %211 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %212 = load i64, i64* @yy_buffer_stack_top, align 8
  %213 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %211, i64 %212
  %214 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %213, align 8
  %215 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %214, i32 0, i32 1
  %216 = load i8*, i8** %215, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 %193
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %219 = call i64 @fread(i8* %217, i64 1, i64 %spec.select, %struct._IO_FILE* %218)
  store i64 %219, i64* @yy_n_chars, align 8
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %198, label %..loopexit.loopexit_crit_edge4

..loopexit.loopexit_crit_edge:                    ; preds = %198
  br label %.loopexit.loopexit

..loopexit.loopexit_crit_edge4:                   ; preds = %208
  br label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %..loopexit.loopexit_crit_edge4, %..loopexit.loopexit_crit_edge, %185
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %206, %184
  %221 = load i64, i64* @yy_n_chars, align 8
  %222 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %223 = load i64, i64* @yy_buffer_stack_top, align 8
  %224 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %222, i64 %223
  %225 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %224, align 8
  %226 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %225, i32 0, i32 4
  store i64 %221, i64* %226, align 8
  br label %227

; <label>:227:                                    ; preds = %.loopexit, %57
  %228 = load i64, i64* @yy_n_chars, align 8
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %240

; <label>:230:                                    ; preds = %227
  %231 = icmp eq i32 %39, 0
  br i1 %231, label %232, label %234

; <label>:232:                                    ; preds = %230
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  call void @yyrestart(%struct._IO_FILE* %233)
  br label %240

; <label>:234:                                    ; preds = %230
  %235 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %236 = load i64, i64* @yy_buffer_stack_top, align 8
  %237 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %235, i64 %236
  %238 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %237, align 8
  %239 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %238, i32 0, i32 11
  store i32 2, i32* %239, align 8
  br label %240

; <label>:240:                                    ; preds = %227, %232, %234
  %.16 = phi i32 [ 1, %232 ], [ 2, %234 ], [ 0, %227 ]
  %241 = load i64, i64* @yy_n_chars, align 8
  %242 = sext i32 %39 to i64
  %243 = add i64 %241, %242
  %244 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %245 = load i64, i64* @yy_buffer_stack_top, align 8
  %246 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %244, i64 %245
  %247 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %246, align 8
  %248 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %247, i32 0, i32 3
  %249 = load i64, i64* %248, align 8
  %250 = icmp ugt i64 %243, %249
  br i1 %250, label %251, label %279

; <label>:251:                                    ; preds = %240
  %252 = load i64, i64* @yy_n_chars, align 8
  %253 = sext i32 %39 to i64
  %254 = add i64 %252, %253
  %255 = load i64, i64* @yy_n_chars, align 8
  %256 = lshr i64 %255, 1
  %257 = add i64 %254, %256
  %258 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %259 = load i64, i64* @yy_buffer_stack_top, align 8
  %260 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %258, i64 %259
  %261 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %260, align 8
  %262 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %261, i32 0, i32 1
  %263 = load i8*, i8** %262, align 8
  %264 = call i8* @yyrealloc(i8* %263, i64 %257)
  %265 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %266 = load i64, i64* @yy_buffer_stack_top, align 8
  %267 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %265, i64 %266
  %268 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %267, align 8
  %269 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %268, i32 0, i32 1
  store i8* %264, i8** %269, align 8
  %270 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %271 = load i64, i64* @yy_buffer_stack_top, align 8
  %272 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %270, i64 %271
  %273 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %272, align 8
  %274 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %273, i32 0, i32 1
  %275 = load i8*, i8** %274, align 8
  %276 = icmp ne i8* %275, null
  br i1 %276, label %279, label %277

; <label>:277:                                    ; preds = %251
  %278 = getelementptr [46 x i8], [46 x i8]* @.str.9.143, i32 0, i32 0
  call void @yy_fatal_error(i8* %278)
  br label %279

; <label>:279:                                    ; preds = %251, %277, %240
  %280 = sext i32 %39 to i64
  %281 = load i64, i64* @yy_n_chars, align 8
  %282 = add i64 %281, %280
  store i64 %282, i64* @yy_n_chars, align 8
  %283 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %284 = load i64, i64* @yy_buffer_stack_top, align 8
  %285 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %283, i64 %284
  %286 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %285, align 8
  %287 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %286, i32 0, i32 1
  %288 = load i8*, i8** %287, align 8
  %289 = load i64, i64* @yy_n_chars, align 8
  %290 = getelementptr inbounds i8, i8* %288, i64 %289
  store i8 0, i8* %290, align 1
  %291 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %292 = load i64, i64* @yy_buffer_stack_top, align 8
  %293 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %291, i64 %292
  %294 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %293, align 8
  %295 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %294, i32 0, i32 1
  %296 = load i8*, i8** %295, align 8
  %297 = load i64, i64* @yy_n_chars, align 8
  %298 = add i64 %297, 1
  %299 = getelementptr inbounds i8, i8* %296, i64 %298
  store i8 0, i8* %299, align 1
  %300 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %301 = load i64, i64* @yy_buffer_stack_top, align 8
  %302 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %300, i64 %301
  %303 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %302, align 8
  %304 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %303, i32 0, i32 1
  %305 = load i8*, i8** %304, align 8
  %306 = getelementptr inbounds i8, i8* %305, i64 0
  store i8* %306, i8** @yytext, align 8
  br label %307

; <label>:307:                                    ; preds = %34, %279
  %.0 = phi i32 [ %.16, %279 ], [ %., %34 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @yy_fatal_error(i8*) #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3 = getelementptr [4 x i8], [4 x i8]* @.str.11.139, i32 0, i32 0
  %4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* %3, i8* %0)
  call void @exit(i32 2) #16
  unreachable
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @yyrealloc(i8*, i64) #7 {
  %3 = call i8* @realloc(i8* %0, i64 %1) #8, !track !251
  ret i8* %3
}

declare dso_local i32 @_IO_getc(%struct._IO_FILE*) #3

declare dso_local i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local void @clearerr(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @yyrestart(%struct._IO_FILE*) #0 {
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %3 = icmp ne %struct.yy_buffer_state** %2, null
  br i1 %3, label %4, label %10

; <label>:4:                                      ; preds = %1
  %5 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %6 = load i64, i64* @yy_buffer_stack_top, align 8
  %7 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %5, i64 %6
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, align 8
  %9 = icmp ne %struct.yy_buffer_state* %8, null
  br i1 %9, label %16, label %10

; <label>:10:                                     ; preds = %1, %4
  call void @yyensure_buffer_stack()
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  %12 = call %struct.yy_buffer_state* @yy_create_buffer(%struct._IO_FILE* %11, i32 16384)
  %13 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %14 = load i64, i64* @yy_buffer_stack_top, align 8
  %15 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %13, i64 %14
  store %struct.yy_buffer_state* %12, %struct.yy_buffer_state** %15, align 8
  br label %16

; <label>:16:                                     ; preds = %10, %4
  %17 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %18 = icmp ne %struct.yy_buffer_state** %17, null
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %16
  %20 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %21 = load i64, i64* @yy_buffer_stack_top, align 8
  %22 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %20, i64 %21
  %23 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %22, align 8
  br label %24

; <label>:24:                                     ; preds = %16, %19
  %25 = phi %struct.yy_buffer_state* [ %23, %19 ], [ null, %16 ]
  call void @yy_init_buffer(%struct.yy_buffer_state* %25, %struct._IO_FILE* %0)
  call void @yy_load_buffer_state()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @yy_init_buffer(%struct.yy_buffer_state*, %struct._IO_FILE*) #0 {
  %3 = call i32* @__errno_location() #15
  %4 = load i32, i32* %3, align 4
  call void @yy_flush_buffer(%struct.yy_buffer_state* %0)
  %5 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 0
  store %struct._IO_FILE* %1, %struct._IO_FILE** %5, align 8
  %6 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 10
  store i32 1, i32* %6, align 4
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %8 = icmp ne %struct.yy_buffer_state** %7, null
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %2
  %10 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %11 = load i64, i64* @yy_buffer_stack_top, align 8
  %12 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %10, i64 %11
  %13 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %12, align 8
  br label %14

; <label>:14:                                     ; preds = %2, %9
  %15 = phi %struct.yy_buffer_state* [ %13, %9 ], [ null, %2 ]
  %16 = icmp ne %struct.yy_buffer_state* %0, %15
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 8
  store i32 1, i32* %18, align 4
  %19 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 9
  store i32 0, i32* %19, align 8
  br label %20

; <label>:20:                                     ; preds = %17, %14
  %21 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 6
  store i32 0, i32* %21, align 4
  %22 = call i32* @__errno_location() #15
  store i32 %4, i32* %22, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yy_flush_buffer(%struct.yy_buffer_state*) #0 {
  %2 = icmp ne %struct.yy_buffer_state* %0, null
  br i1 %2, label %3, label %28

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 4
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 0
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 0
  %14 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 2
  store i8* %13, i8** %14, align 8
  %15 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 7
  store i32 1, i32* %15, align 8
  %16 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 11
  store i32 0, i32* %16, align 8
  %17 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %18 = icmp ne %struct.yy_buffer_state** %17, null
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %3
  %20 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %21 = load i64, i64* @yy_buffer_stack_top, align 8
  %22 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %20, i64 %21
  %23 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %22, align 8
  br label %24

; <label>:24:                                     ; preds = %3, %19
  %25 = phi %struct.yy_buffer_state* [ %23, %19 ], [ null, %3 ]
  %26 = icmp eq %struct.yy_buffer_state* %0, %25
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %24
  call void @yy_load_buffer_state()
  br label %28

; <label>:28:                                     ; preds = %1, %27, %24
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @yyalloc(i64) #7 {
  %2 = call noalias i8* @malloc(i64 %0) #8, !track !252
  ret i8* %2
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @yy_switch_to_buffer(%struct.yy_buffer_state*) #0 {
  call void @yyensure_buffer_stack()
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %3 = icmp ne %struct.yy_buffer_state** %2, null
  br i1 %3, label %4, label %9

; <label>:4:                                      ; preds = %1
  %5 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %6 = load i64, i64* @yy_buffer_stack_top, align 8
  %7 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %5, i64 %6
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, align 8
  br label %9

; <label>:9:                                      ; preds = %1, %4
  %10 = phi %struct.yy_buffer_state* [ %8, %4 ], [ null, %1 ]
  %11 = icmp eq %struct.yy_buffer_state* %10, %0
  br i1 %11, label %40, label %12

; <label>:12:                                     ; preds = %9
  %13 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %14 = icmp ne %struct.yy_buffer_state** %13, null
  br i1 %14, label %15, label %36

; <label>:15:                                     ; preds = %12
  %16 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %17 = load i64, i64* @yy_buffer_stack_top, align 8
  %18 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %16, i64 %17
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %18, align 8
  %20 = icmp ne %struct.yy_buffer_state* %19, null
  br i1 %20, label %21, label %36

; <label>:21:                                     ; preds = %15
  %22 = load i8, i8* @yy_hold_char, align 1
  %23 = load i8*, i8** @yy_c_buf_p, align 8
  store i8 %22, i8* %23, align 1
  %24 = load i8*, i8** @yy_c_buf_p, align 8
  %25 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %26 = load i64, i64* @yy_buffer_stack_top, align 8
  %27 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %25, i64 %26
  %28 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %27, align 8
  %29 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %28, i32 0, i32 2
  store i8* %24, i8** %29, align 8
  %30 = load i64, i64* @yy_n_chars, align 8
  %31 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %32 = load i64, i64* @yy_buffer_stack_top, align 8
  %33 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %31, i64 %32
  %34 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %33, align 8
  %35 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %34, i32 0, i32 4
  store i64 %30, i64* %35, align 8
  br label %36

; <label>:36:                                     ; preds = %12, %21, %15
  %37 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %38 = load i64, i64* @yy_buffer_stack_top, align 8
  %39 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %37, i64 %38
  store %struct.yy_buffer_state* %0, %struct.yy_buffer_state** %39, align 8
  call void @yy_load_buffer_state()
  store i32 1, i32* @yy_did_buffer_switch_on_eof, align 4
  br label %40

; <label>:40:                                     ; preds = %9, %36
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yy_delete_buffer(%struct.yy_buffer_state*) #0 {
  %2 = icmp ne %struct.yy_buffer_state* %0, null
  br i1 %2, label %3, label %27

; <label>:3:                                      ; preds = %1
  %4 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %5 = icmp ne %struct.yy_buffer_state** %4, null
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %3
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, i64 %8
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, align 8
  br label %11

; <label>:11:                                     ; preds = %3, %6
  %12 = phi %struct.yy_buffer_state* [ %10, %6 ], [ null, %3 ]
  %13 = icmp eq %struct.yy_buffer_state* %0, %12
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %11
  %15 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %16 = load i64, i64* @yy_buffer_stack_top, align 8
  %17 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %15, i64 %16
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %17, align 8
  br label %18

; <label>:18:                                     ; preds = %14, %11
  %19 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %25

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  call void @yyfree(i8* %24)
  br label %25

; <label>:25:                                     ; preds = %22, %18
  %26 = bitcast %struct.yy_buffer_state* %0 to i8*
  call void @yyfree(i8* %26)
  br label %27

; <label>:27:                                     ; preds = %1, %25
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yyfree(i8*) #0 {
  call void @free(i8* %0) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yypush_buffer_state(%struct.yy_buffer_state*) #0 {
  %2 = icmp eq %struct.yy_buffer_state* %0, null
  br i1 %2, label %43, label %3

; <label>:3:                                      ; preds = %1
  call void @yyensure_buffer_stack()
  %4 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %5 = icmp ne %struct.yy_buffer_state** %4, null
  br i1 %5, label %6, label %27

; <label>:6:                                      ; preds = %3
  %7 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %8 = load i64, i64* @yy_buffer_stack_top, align 8
  %9 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, i64 %8
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %9, align 8
  %11 = icmp ne %struct.yy_buffer_state* %10, null
  br i1 %11, label %12, label %27

; <label>:12:                                     ; preds = %6
  %13 = load i8, i8* @yy_hold_char, align 1
  %14 = load i8*, i8** @yy_c_buf_p, align 8
  store i8 %13, i8* %14, align 1
  %15 = load i8*, i8** @yy_c_buf_p, align 8
  %16 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %17 = load i64, i64* @yy_buffer_stack_top, align 8
  %18 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %16, i64 %17
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %18, align 8
  %20 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %19, i32 0, i32 2
  store i8* %15, i8** %20, align 8
  %21 = load i64, i64* @yy_n_chars, align 8
  %22 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %23 = load i64, i64* @yy_buffer_stack_top, align 8
  %24 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %22, i64 %23
  %25 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %24, align 8
  %26 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %25, i32 0, i32 4
  store i64 %21, i64* %26, align 8
  br label %27

; <label>:27:                                     ; preds = %3, %12, %6
  %28 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %29 = icmp ne %struct.yy_buffer_state** %28, null
  br i1 %29, label %30, label %39

; <label>:30:                                     ; preds = %27
  %31 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %32 = load i64, i64* @yy_buffer_stack_top, align 8
  %33 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %31, i64 %32
  %34 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %33, align 8
  %35 = icmp ne %struct.yy_buffer_state* %34, null
  br i1 %35, label %36, label %39

; <label>:36:                                     ; preds = %30
  %37 = load i64, i64* @yy_buffer_stack_top, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* @yy_buffer_stack_top, align 8
  br label %39

; <label>:39:                                     ; preds = %27, %36, %30
  %40 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %41 = load i64, i64* @yy_buffer_stack_top, align 8
  %42 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %40, i64 %41
  store %struct.yy_buffer_state* %0, %struct.yy_buffer_state** %42, align 8
  call void @yy_load_buffer_state()
  store i32 1, i32* @yy_did_buffer_switch_on_eof, align 4
  br label %43

; <label>:43:                                     ; preds = %1, %39
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yypop_buffer_state() #0 {
  %1 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %2 = icmp ne %struct.yy_buffer_state** %1, null
  br i1 %2, label %3, label %37

; <label>:3:                                      ; preds = %0
  %4 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %5 = load i64, i64* @yy_buffer_stack_top, align 8
  %6 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %4, i64 %5
  %7 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %6, align 8
  %8 = icmp ne %struct.yy_buffer_state* %7, null
  br i1 %8, label %9, label %37

; <label>:9:                                      ; preds = %3
  %10 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %11 = icmp ne %struct.yy_buffer_state** %10, null
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %9
  %13 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %14 = load i64, i64* @yy_buffer_stack_top, align 8
  %15 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %13, i64 %14
  %16 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %15, align 8
  br label %17

; <label>:17:                                     ; preds = %9, %12
  %18 = phi %struct.yy_buffer_state* [ %16, %12 ], [ null, %9 ]
  call void @yy_delete_buffer(%struct.yy_buffer_state* %18)
  %19 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %20 = load i64, i64* @yy_buffer_stack_top, align 8
  %21 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %19, i64 %20
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %21, align 8
  %22 = load i64, i64* @yy_buffer_stack_top, align 8
  %23 = icmp ugt i64 %22, 0
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %17
  %25 = load i64, i64* @yy_buffer_stack_top, align 8
  %26 = add i64 %25, -1
  store i64 %26, i64* @yy_buffer_stack_top, align 8
  br label %27

; <label>:27:                                     ; preds = %24, %17
  %28 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %29 = icmp ne %struct.yy_buffer_state** %28, null
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %27
  %31 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %32 = load i64, i64* @yy_buffer_stack_top, align 8
  %33 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %31, i64 %32
  %34 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %33, align 8
  %35 = icmp ne %struct.yy_buffer_state* %34, null
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %30
  call void @yy_load_buffer_state()
  store i32 1, i32* @yy_did_buffer_switch_on_eof, align 4
  br label %37

; <label>:37:                                     ; preds = %27, %3, %0, %36, %30
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.yy_buffer_state* @yy_scan_buffer(i8*, i64) #0 {
  %3 = icmp ult i64 %1, 2
  br i1 %3, label %36, label %4

; <label>:4:                                      ; preds = %2
  %5 = sub i64 %1, 2
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %36, label %10

; <label>:10:                                     ; preds = %4
  %11 = sub i64 %1, 1
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %36, label %16

; <label>:16:                                     ; preds = %10
  %17 = call i8* @yyalloc(i64 72)
  %18 = bitcast i8* %17 to %struct.yy_buffer_state*
  %19 = icmp ne %struct.yy_buffer_state* %18, null
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %16
  %21 = getelementptr [42 x i8], [42 x i8]* @.str.2.146, i32 0, i32 0
  call void @yy_fatal_error(i8* %21)
  br label %22

; <label>:22:                                     ; preds = %20, %16
  %23 = sub i64 %1, 2
  %24 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 3
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 1
  store i8* %0, i8** %25, align 8
  %26 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 2
  store i8* %0, i8** %26, align 8
  %27 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 5
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 0
  store %struct._IO_FILE* null, %struct._IO_FILE** %28, align 8
  %29 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 4
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 6
  store i32 0, i32* %32, align 4
  %33 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 7
  store i32 1, i32* %33, align 8
  %34 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 10
  store i32 0, i32* %34, align 4
  %35 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 11
  store i32 0, i32* %35, align 8
  call void @yy_switch_to_buffer(%struct.yy_buffer_state* %18)
  br label %36

; <label>:36:                                     ; preds = %2, %4, %10, %22
  %.0 = phi %struct.yy_buffer_state* [ %18, %22 ], [ null, %10 ], [ null, %4 ], [ null, %2 ]
  ret %struct.yy_buffer_state* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.yy_buffer_state* @yy_scan_string(i8*) #0 {
  %2 = call i64 @strlen(i8* %0) #14
  %3 = call %struct.yy_buffer_state* @yy_scan_bytes(i8* %0, i64 %2)
  ret %struct.yy_buffer_state* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.yy_buffer_state* @yy_scan_bytes(i8*, i64) #0 {
  %3 = add i64 %1, 2
  %4 = call i8* @yyalloc(i64 %3)
  %5 = icmp ne i8* %4, null
  br i1 %5, label %8, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr [41 x i8], [41 x i8]* @.str.3.147, i32 0, i32 0
  call void @yy_fatal_error(i8* %7)
  br label %8

; <label>:8:                                      ; preds = %6, %2
  %9 = icmp ult i64 0, %1
  br i1 %9, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %8
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i64 [ %13, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 84)
  %10 = getelementptr inbounds i8, i8* %0, i64 %.01
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 %.01
  store i8 %11, i8* %12, align 1
  %13 = add nuw i64 %.01, 1
  %exitcond = icmp ne i64 %13, %1
  br i1 %exitcond, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %8
  %14 = add i64 %1, 1
  %15 = getelementptr inbounds i8, i8* %4, i64 %14
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 %1
  store i8 0, i8* %16, align 1
  %17 = call %struct.yy_buffer_state* @yy_scan_buffer(i8* %4, i64 %3)
  %18 = icmp ne %struct.yy_buffer_state* %17, null
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %._crit_edge
  %20 = getelementptr [30 x i8], [30 x i8]* @.str.4.148, i32 0, i32 0
  call void @yy_fatal_error(i8* %20)
  br label %21

; <label>:21:                                     ; preds = %19, %._crit_edge
  %22 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %17, i32 0, i32 5
  store i32 1, i32* %22, align 8
  ret %struct.yy_buffer_state* %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @yyget_lineno() #0 {
  %1 = load i32, i32* @yylineno, align 4
  ret i32 %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._IO_FILE* @yyget_in() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @yyin, align 8
  ret %struct._IO_FILE* %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._IO_FILE* @yyget_out() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @yyout, align 8
  ret %struct._IO_FILE* %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @yyget_leng() #0 {
  %1 = load i64, i64* @yyleng, align 8
  ret i64 %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @yyget_text() #0 {
  %1 = load i8*, i8** @yytext, align 8
  ret i8* %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yyset_lineno(i32) #0 {
  store i32 %0, i32* @yylineno, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yyset_in(%struct._IO_FILE*) #0 {
  store %struct._IO_FILE* %0, %struct._IO_FILE** @yyin, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yyset_out(%struct._IO_FILE*) #0 {
  store %struct._IO_FILE* %0, %struct._IO_FILE** @yyout, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @yyget_debug() #0 {
  %1 = load i32, i32* @yy_flex_debug, align 4
  ret i32 %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @yyset_debug(i32) #0 {
  store i32 %0, i32* @yy_flex_debug, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @yylex_destroy() #0 {
  br label %1

; <label>:1:                                      ; preds = %20, %0
  call void @unroll_loop(i32 85)
  %2 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %3 = icmp ne %struct.yy_buffer_state** %2, null
  br i1 %3, label %4, label %9

; <label>:4:                                      ; preds = %1
  %5 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %6 = load i64, i64* @yy_buffer_stack_top, align 8
  %7 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %5, i64 %6
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %7, align 8
  br label %9

; <label>:9:                                      ; preds = %1, %4
  %10 = phi %struct.yy_buffer_state* [ %8, %4 ], [ null, %1 ]
  %11 = icmp ne %struct.yy_buffer_state* %10, null
  %12 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  br i1 %11, label %13, label %25

; <label>:13:                                     ; preds = %9
  %14 = icmp ne %struct.yy_buffer_state** %12, null
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %13
  %16 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %17 = load i64, i64* @yy_buffer_stack_top, align 8
  %18 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %16, i64 %17
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %18, align 8
  br label %20

; <label>:20:                                     ; preds = %13, %15
  %21 = phi %struct.yy_buffer_state* [ %19, %15 ], [ null, %13 ]
  call void @yy_delete_buffer(%struct.yy_buffer_state* %21)
  %22 = load %struct.yy_buffer_state**, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %23 = load i64, i64* @yy_buffer_stack_top, align 8
  %24 = getelementptr inbounds %struct.yy_buffer_state*, %struct.yy_buffer_state** %22, i64 %23
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %24, align 8
  call void @yypop_buffer_state()
  br label %1

; <label>:25:                                     ; preds = %9
  %.lcssa = phi %struct.yy_buffer_state** [ %12, %9 ]
  %26 = bitcast %struct.yy_buffer_state** %.lcssa to i8*
  call void @yyfree(i8* %26)
  store %struct.yy_buffer_state** null, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  %27 = call i32 @yy_init_globals()
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @yy_init_globals() #0 {
  store %struct.yy_buffer_state** null, %struct.yy_buffer_state*** @yy_buffer_stack, align 8
  store i64 0, i64* @yy_buffer_stack_top, align 8
  store i64 0, i64* @yy_buffer_stack_max, align 8
  store i8* null, i8** @yy_c_buf_p, align 8
  store i32 0, i32* @yy_init, align 4
  store i32 0, i32* @yy_start, align 4
  store %struct._IO_FILE* null, %struct._IO_FILE** @yyin, align 8
  store %struct._IO_FILE* null, %struct._IO_FILE** @yyout, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @get_urls_css(%struct.map_context*, i32, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.map_context, %struct.map_context* %0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds i8, i8* %7, i64 %8
  %10 = call %struct.yy_buffer_state* bitcast (%struct.yy_buffer_state* (i8*, i64)* @yy_scan_bytes to %struct.yy_buffer_state* (i8*, i32)*)(i8* %9, i32 %2)
  %11 = call i32 @yylex()
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %101
  %13 = phi i32 [ %104, %101 ], [ %11, %.lr.ph.preheader ]
  %.013 = phi i32 [ %103, %101 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 86)
  switch i32 %13, label %101 [
    i32 14, label %.preheader
    i32 28, label %72
  ]

.preheader:                                       ; preds = %.lr.ph
  br label %14

; <label>:14:                                     ; preds = %.preheader, %14
  %.1 = phi i32 [ %16, %14 ], [ %.013, %.preheader ]
  %15 = load i32, i32* bitcast (i64* @yyleng to i32*), align 4
  %16 = add nsw i32 %.1, %15
  %17 = call i32 @yylex()
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %14, label %19

; <label>:19:                                     ; preds = %14
  %.lcssa2 = phi i32 [ %17, %14 ]
  %.lcssa = phi i32 [ %16, %14 ]
  switch i32 %.lcssa2, label %101 [
    i32 10, label %20
    i32 28, label %20
  ]

; <label>:20:                                     ; preds = %19, %19
  %21 = add nsw i32 %.lcssa, %1
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* bitcast (i64* @yyleng to i32*), align 4
  store i32 %22, i32* %5, align 4
  %23 = icmp eq i32 %.lcssa2, 28
  br i1 %23, label %24, label %28

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.map_context, %struct.map_context* %0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i8* @get_uri_string(i8* %26, i32* %4, i32* %5)
  br label %44

; <label>:28:                                     ; preds = %20
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  %31 = load i32, i32* %5, align 4
  %32 = sub nsw i32 %31, 2
  store i32 %32, i32* %5, align 4
  %33 = load i32, i32* %5, align 4
  %34 = add nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = call noalias i8* @xmalloc(i64 %35)
  %37 = load i8*, i8** @yytext, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  %39 = load i32, i32* %5, align 4
  %40 = sext i32 %39 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %38, i64 %40, i1 false), !track !253
  %41 = load i32, i32* %5, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %36, i64 %42
  store i8 0, i8* %43, align 1
  br label %44

; <label>:44:                                     ; preds = %28, %24
  %.0 = phi i8* [ %27, %24 ], [ %36, %28 ]
  %45 = icmp ne i8* %.0, null
  br i1 %45, label %46, label %101

; <label>:46:                                     ; preds = %44
  %47 = load i32, i32* %4, align 4
  %48 = load i32, i32* %5, align 4
  %49 = call %struct.urlpos* @append_url(i8* %.0, i32 %47, i32 %48, %struct.map_context* %0)
  %50 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %51 = load i8, i8* %50, align 1
  %52 = trunc i8 %51 to i1
  br i1 %52, label %53, label %56

; <label>:53:                                     ; preds = %46
  %54 = load i8*, i8** @yytext, align 8
  %55 = getelementptr [32 x i8], [32 x i8]* @.str.149, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %55, i8* %54, i32 %.lcssa, i8* %.0)
  br label %56

; <label>:56:                                     ; preds = %46, %53
  %57 = icmp ne %struct.urlpos* %49, null
  br i1 %57, label %58, label %71

; <label>:58:                                     ; preds = %56
  %59 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %49, i32 0, i32 2
  %60 = load i16, i16* %59, align 8
  %61 = and i16 %60, -17
  %62 = or i16 %61, 16
  store i16 %62, i16* %59, align 8
  %63 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %49, i32 0, i32 2
  %64 = load i16, i16* %63, align 8
  %65 = and i16 %64, -33
  %66 = or i16 %65, 32
  store i16 %66, i16* %63, align 8
  %67 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %49, i32 0, i32 2
  %68 = load i16, i16* %67, align 8
  %69 = and i16 %68, -129
  %70 = or i16 %69, 128
  store i16 %70, i16* %67, align 8
  br label %71

; <label>:71:                                     ; preds = %56, %58
  call void @free(i8* %.0) #8
  br label %101

; <label>:72:                                     ; preds = %.lr.ph
  %73 = add nsw i32 %.013, %1
  store i32 %73, i32* %4, align 4
  %74 = load i32, i32* bitcast (i64* @yyleng to i32*), align 4
  store i32 %74, i32* %5, align 4
  %75 = getelementptr inbounds %struct.map_context, %struct.map_context* %0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = call i8* @get_uri_string(i8* %76, i32* %4, i32* %5)
  %78 = icmp ne i8* %77, null
  br i1 %78, label %79, label %101

; <label>:79:                                     ; preds = %72
  %80 = load i32, i32* %4, align 4
  %81 = load i32, i32* %5, align 4
  %82 = call %struct.urlpos* @append_url(i8* %77, i32 %80, i32 %81, %struct.map_context* %0)
  %83 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %84 = load i8, i8* %83, align 1
  %85 = trunc i8 %84 to i1
  br i1 %85, label %86, label %89

; <label>:86:                                     ; preds = %79
  %87 = load i8*, i8** @yytext, align 8
  %88 = getelementptr [28 x i8], [28 x i8]* @.str.1.150, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %88, i8* %87, i32 %.013, i8* %77)
  br label %89

; <label>:89:                                     ; preds = %79, %86
  %90 = icmp ne %struct.urlpos* %82, null
  br i1 %90, label %91, label %100

; <label>:91:                                     ; preds = %89
  %92 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %82, i32 0, i32 2
  %93 = load i16, i16* %92, align 8
  %94 = and i16 %93, -17
  %95 = or i16 %94, 16
  store i16 %95, i16* %92, align 8
  %96 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %82, i32 0, i32 2
  %97 = load i16, i16* %96, align 8
  %98 = and i16 %97, -33
  %99 = or i16 %98, 32
  store i16 %99, i16* %96, align 8
  br label %100

; <label>:100:                                    ; preds = %89, %91
  call void @free(i8* %77) #8
  br label %101

; <label>:101:                                    ; preds = %.lr.ph, %100, %72, %19, %71, %44
  %.2 = phi i32 [ %.lcssa, %44 ], [ %.lcssa, %71 ], [ %.lcssa, %19 ], [ %.013, %72 ], [ %.013, %100 ], [ %.013, %.lr.ph ]
  %102 = load i32, i32* bitcast (i64* @yyleng to i32*), align 4
  %103 = add nsw i32 %.2, %102
  %104 = call i32 @yylex()
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %101
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %106 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %107 = load i8, i8* %106, align 1
  %108 = trunc i8 %107 to i1
  br i1 %108, label %109, label %111

; <label>:109:                                    ; preds = %._crit_edge
  %110 = getelementptr [2 x i8], [2 x i8]* @.str.2.151, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %110)
  br label %111

; <label>:111:                                    ; preds = %._crit_edge, %109
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_uri_string(i8*, i32*, i32*) #7 {
  %4 = load i32, i32* %1, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = getelementptr [5 x i8], [5 x i8]* @.str.5.152, i32 0, i32 0
  %8 = call i32 @strncasecmp(i8* %6, i8* %7, i64 4) #14
  %9 = icmp ne i32 0, %8
  br i1 %9, label %104, label %10

; <label>:10:                                     ; preds = %3
  %11 = load i32, i32* %1, align 4
  %12 = add nsw i32 %11, 4
  store i32 %12, i32* %1, align 4
  %13 = load i32, i32* %2, align 4
  %14 = sub nsw i32 %13, 5
  store i32 %14, i32* %2, align 4
  %15 = call i16** @__ctype_b_loc() #15
  %16 = load i16*, i16** %15, align 8
  %17 = load i32, i32* %1, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %16, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 8192
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %.lr.ph2.preheader, label %._crit_edge3

.lr.ph2.preheader:                                ; preds = %10
  br label %.lr.ph2

; <label>:28:                                     ; preds = %.lr.ph2
  %29 = load i16*, i16** %15, align 8
  %30 = load i32, i32* %1, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %29, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, 8192
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %.lr.ph2, label %._crit_edge3.loopexit

.lr.ph2:                                          ; preds = %.lr.ph2.preheader, %28
  call void @unroll_loop(i32 87)
  %41 = load i32, i32* %1, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %1, align 4
  %43 = load i32, i32* %2, align 4
  %44 = add nsw i32 %43, -1
  store i32 %44, i32* %2, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %.loopexit, label %28

._crit_edge3.loopexit:                            ; preds = %28
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %._crit_edge3.loopexit, %10
  %46 = call i16** @__ctype_b_loc() #15
  %47 = load i16*, i16** %46, align 8
  %48 = load i32, i32* %1, align 4
  %49 = load i32, i32* %2, align 4
  %50 = add nsw i32 %48, %49
  %51 = sub nsw i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i16, i16* %47, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = and i32 %59, 8192
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 88)
  %62 = load i32, i32* %2, align 4
  %63 = add nsw i32 %62, -1
  store i32 %63, i32* %2, align 4
  %64 = load i16*, i16** %46, align 8
  %65 = load i32, i32* %1, align 4
  %66 = load i32, i32* %2, align 4
  %67 = add nsw i32 %65, %66
  %68 = sub nsw i32 %67, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %64, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = and i32 %76, 8192
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge3
  %79 = load i32, i32* %1, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %0, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = icmp eq i32 %83, 39
  br i1 %84, label %92, label %85

; <label>:85:                                     ; preds = %._crit_edge
  %86 = load i32, i32* %1, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = icmp eq i32 %90, 34
  br i1 %91, label %92, label %97

; <label>:92:                                     ; preds = %85, %._crit_edge
  %93 = load i32, i32* %1, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %1, align 4
  %95 = load i32, i32* %2, align 4
  %96 = sub nsw i32 %95, 2
  store i32 %96, i32* %2, align 4
  br label %97

; <label>:97:                                     ; preds = %92, %85
  %98 = load i32, i32* %1, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %0, i64 %99
  %101 = load i32, i32* %2, align 4
  %102 = sext i32 %101 to i64
  %103 = call i8* @xstrndup(i8* %100, i64 %102)
  br label %104

.loopexit:                                        ; preds = %.lr.ph2
  %.0.ph = phi i8* [ null, %.lr.ph2 ]
  br label %104

; <label>:104:                                    ; preds = %.loopexit, %3, %97
  %.0 = phi i8* [ %103, %97 ], [ null, %3 ], [ %.0.ph, %.loopexit ]
  ret i8* %.0
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncasecmp(i8*, i8*, i64) #1

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.urlpos* @get_urls_css_file(i8*, i8*) #7 {
  %3 = alloca %struct.map_context, align 8, !track !254
  %4 = call %struct.file_memory* @wget_read_file(i8* %0)
  %5 = icmp ne %struct.file_memory* %4, null
  br i1 %5, label %11, label %6

; <label>:6:                                      ; preds = %2
  %7 = call i32* @__errno_location() #15
  %8 = load i32, i32* %7, align 4
  %9 = call i8* @strerror(i32 %8) #8
  %10 = getelementptr [8 x i8], [8 x i8]* @.str.3.155, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %10, i8* %0, i8* %9)
  br label %38

; <label>:11:                                     ; preds = %2
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %11
  %16 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %4, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = call i8* @number_to_static_string(i64 %17)
  %19 = getelementptr [22 x i8], [22 x i8]* @.str.4.156, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %19, i8* %0, i8* %18)
  br label %20

; <label>:20:                                     ; preds = %11, %15
  %21 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %4, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 0
  store i8* %22, i8** %23, align 8
  %24 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 5
  store %struct.urlpos* null, %struct.urlpos** %24, align 8
  %25 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 1
  store i8* null, i8** %25, align 8
  %26 = icmp ne i8* %1, null
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 76
  %28 = load i8*, i8** %27, align 8
  %29 = select i1 %26, i8* %1, i8* %28
  %30 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 2
  store i8* %29, i8** %30, align 8
  %31 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 3
  store i8* %0, i8** %31, align 8
  %32 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 4
  store i8 0, i8* %32, align 8
  %33 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %4, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = trunc i64 %34 to i32
  call void @get_urls_css(%struct.map_context* %3, i32 0, i32 %35)
  call void @wget_read_file_free(%struct.file_memory* %4)
  %36 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 5
  %37 = load %struct.urlpos*, %struct.urlpos** %36, align 8
  br label %38

; <label>:38:                                     ; preds = %20, %6
  %.0 = phi %struct.urlpos* [ %37, %20 ], [ null, %6 ]
  ret %struct.urlpos* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_response(i32, i8**) #0 {
  %3 = call i8* @fd_read_line(i32 %0)
  %4 = icmp ne i8* %3, null
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %58
  %5 = phi i8* [ %59, %58 ], [ %3, %.lr.ph.preheader ]
  call void @unroll_loop(i32 89)
  %6 = call i8* @strchr(i8* %5, i32 0) #14
  %7 = icmp ugt i8* %6, %5
  br i1 %7, label %8, label %15

; <label>:8:                                      ; preds = %.lr.ph
  %9 = getelementptr inbounds i8, i8* %6, i64 -1
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %11, 10
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds i8, i8* %6, i32 -1
  store i8 0, i8* %14, align 1
  br label %15

; <label>:15:                                     ; preds = %13, %8, %.lr.ph
  %.01 = phi i8* [ %14, %13 ], [ %6, %8 ], [ %6, %.lr.ph ]
  %16 = icmp ugt i8* %.01, %5
  br i1 %16, label %17, label %24

; <label>:17:                                     ; preds = %15
  %18 = getelementptr inbounds i8, i8* %.01, i64 -1
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 13
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %17
  %23 = getelementptr inbounds i8, i8* %.01, i32 -1
  store i8 0, i8* %23, align 1
  br label %24

; <label>:24:                                     ; preds = %22, %17, %15
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %26 = load i8, i8* %25, align 8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %28, label %31

; <label>:28:                                     ; preds = %24
  %29 = call i8* @quotearg_style(i32 7, i8* %5)
  %30 = getelementptr [4 x i8], [4 x i8]* @.str.159, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %30, i8* %29)
  br label %38

; <label>:31:                                     ; preds = %24
  %32 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %33 = load i8, i8* %32, align 1
  %34 = trunc i8 %33 to i1
  br i1 %34, label %35, label %38

; <label>:35:                                     ; preds = %31
  %36 = call i8* @quotearg_style(i32 7, i8* %5)
  %37 = getelementptr [4 x i8], [4 x i8]* @.str.159, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %37, i8* %36)
  br label %38

; <label>:38:                                     ; preds = %35, %31, %28
  %39 = load i8, i8* %5, align 1
  %40 = sext i8 %39 to i32
  %41 = call zeroext i1 @c_isdigit(i32 %40)
  br i1 %41, label %42, label %58

; <label>:42:                                     ; preds = %38
  %43 = getelementptr inbounds i8, i8* %5, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = call zeroext i1 @c_isdigit(i32 %45)
  br i1 %46, label %47, label %58

; <label>:47:                                     ; preds = %42
  %48 = getelementptr inbounds i8, i8* %5, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = call zeroext i1 @c_isdigit(i32 %50)
  br i1 %51, label %52, label %58

; <label>:52:                                     ; preds = %47
  %53 = getelementptr inbounds i8, i8* %5, i64 3
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = icmp eq i32 %55, 32
  br i1 %56, label %57, label %58

; <label>:57:                                     ; preds = %52
  %.lcssa2 = phi i8* [ %5, %52 ]
  store i8* %.lcssa2, i8** %1, align 8
  br label %._crit_edge

; <label>:58:                                     ; preds = %38, %42, %47, %52
  call void @free(i8* %5) #8
  %59 = call i8* @fd_read_line(i32 %0)
  %60 = icmp ne i8* %59, null
  br i1 %60, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %58
  %.0.ph = phi i32 [ 14, %58 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2, %57
  %.0 = phi i32 [ 7, %57 ], [ 14, %2 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_greeting(i32) #0 {
  %2 = alloca i8*, align 8, !track !255
  store i8* null, i8** %2, align 8
  %3 = call i32 @ftp_response(i32 %0, i8** %2)
  %4 = icmp ne i32 %3, 7
  br i1 %4, label %10, label %5

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 50
  %spec.select = select i1 %9, i32 15, i32 %3
  br label %10

; <label>:10:                                     ; preds = %1, %5
  %.1 = phi i32 [ %spec.select, %5 ], [ %3, %1 ]
  %11 = load i8*, i8** %2, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %10
  %14 = load i8*, i8** %2, align 8
  call void @free(i8* %14) #8
  store i8* null, i8** %2, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %10
  ret i32 %.1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_login(i32, i8*, i8*) #0 {
  %4 = alloca i8*, align 8, !track !256
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.1.164, i32 0, i32 0
  %6 = call i8* @ftp_request(i8* %5, i8* %1)
  %7 = call i64 @strlen(i8* %6) #14
  %8 = trunc i64 %7 to i32
  %9 = call i32 @fd_write(i32 %0, i8* %6, i32 %8, double -1.000000e+00)
  %10 = icmp slt i32 %9, 0
  call void @free(i8* %6) #8
  br i1 %10, label %84, label %11

; <label>:11:                                     ; preds = %3
  %12 = call i32 @ftp_response(i32 %0, i8** %4)
  %13 = icmp ne i32 %12, 7
  br i1 %13, label %84, label %14

; <label>:14:                                     ; preds = %11
  %15 = load i8*, i8** %4, align 8
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 50
  %19 = load i8*, i8** %4, align 8
  br i1 %18, label %20, label %21

; <label>:20:                                     ; preds = %14
  call void @free(i8* %19) #8
  store i8* null, i8** %4, align 8
  br label %84

; <label>:21:                                     ; preds = %14
  %22 = load i8, i8* %19, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp ne i32 %23, 51
  br i1 %24, label %25, label %.preheader

.preheader:                                       ; preds = %21
  br label %27

; <label>:25:                                     ; preds = %21
  %26 = load i8*, i8** %4, align 8
  call void @free(i8* %26) #8
  store i8* null, i8** %4, align 8
  br label %84

; <label>:27:                                     ; preds = %.preheader, %42
  %.048 = phi i64 [ %43, %42 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 91)
  %28 = getelementptr inbounds [2 x i8*], [2 x i8*]* @ftp_login.skey_head, i64 0, i64 %.048
  %29 = load i8*, i8** %28, align 8
  %30 = call i64 @strlen(i8* %29) #14
  %31 = trunc i64 %30 to i32
  %32 = getelementptr inbounds [2 x i8*], [2 x i8*]* @ftp_login.skey_head, i64 0, i64 %.048
  %33 = load i8*, i8** %32, align 8
  %34 = load i8*, i8** %4, align 8
  %35 = sext i32 %31 to i64
  %36 = call i32 @c_strncasecmp(i8* %33, i8* %34, i64 %35) #14
  %37 = icmp eq i32 0, %36
  br i1 %37, label %38, label %42

; <label>:38:                                     ; preds = %27
  %.lcssa = phi i32 [ %31, %27 ]
  %39 = load i8*, i8** %4, align 8
  %40 = sext i32 %.lcssa to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  br label %.loopexit

; <label>:42:                                     ; preds = %27
  %43 = add nuw nsw i64 %.048, 1
  %44 = icmp ult i64 %43, 2
  br i1 %44, label %27, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %42
  %.02.ph = phi i8* [ null, %42 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %38
  %.02 = phi i8* [ %41, %38 ], [ %.02.ph, %.loopexit.loopexit ]
  %45 = icmp ne i8* %.02, null
  br i1 %45, label %46, label %67

; <label>:46:                                     ; preds = %.loopexit
  %47 = load i8, i8* %.02, align 1
  %48 = sext i8 %47 to i32
  %49 = call zeroext i1 @c_isdigit(i32 %48)
  br i1 %49, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %46
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.016 = phi i32 [ %54, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %.15 = phi i8* [ %55, %.lr.ph ], [ %.02, %.lr.ph.preheader ]
  call void @unroll_loop(i32 92)
  %50 = mul nsw i32 10, %.016
  %51 = load i8, i8* %.15, align 1
  %52 = sext i8 %51 to i32
  %53 = add nsw i32 %50, %52
  %54 = sub nsw i32 %53, 48
  %55 = getelementptr inbounds i8, i8* %.15, i32 1
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = call zeroext i1 @c_isdigit(i32 %57)
  br i1 %58, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.1.lcssa.ph = phi i8* [ %55, %.lr.ph ]
  %.01.lcssa.ph = phi i32 [ %54, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %46
  %.1.lcssa = phi i8* [ %.02, %46 ], [ %.1.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i32 [ 0, %46 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %59 = load i8, i8* %.1.lcssa, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp eq i32 %60, 32
  br i1 %61, label %62, label %65

; <label>:62:                                     ; preds = %._crit_edge
  %63 = getelementptr inbounds i8, i8* %.1.lcssa, i32 1
  %64 = call i8* @skey_response(i32 %.01.lcssa, i8* %63, i8* %2)
  br label %67

; <label>:65:                                     ; preds = %._crit_edge
  %66 = load i8*, i8** %4, align 8
  call void @free(i8* %66) #8
  store i8* null, i8** %4, align 8
  br label %84

; <label>:67:                                     ; preds = %.loopexit, %62
  %.03 = phi i8* [ %64, %62 ], [ %2, %.loopexit ]
  %68 = load i8*, i8** %4, align 8
  call void @free(i8* %68) #8
  store i8* null, i8** %4, align 8
  %69 = getelementptr [5 x i8], [5 x i8]* @.str.4.165, i32 0, i32 0
  %70 = call i8* @ftp_request(i8* %69, i8* %.03)
  %71 = call i64 @strlen(i8* %70) #14
  %72 = trunc i64 %71 to i32
  %73 = call i32 @fd_write(i32 %0, i8* %70, i32 %72, double -1.000000e+00)
  %74 = icmp slt i32 %73, 0
  call void @free(i8* %70) #8
  br i1 %74, label %84, label %75

; <label>:75:                                     ; preds = %67
  %76 = call i32 @ftp_response(i32 %0, i8** %4)
  %77 = icmp ne i32 %76, 7
  br i1 %77, label %84, label %78

; <label>:78:                                     ; preds = %75
  %79 = load i8*, i8** %4, align 8
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  %82 = icmp ne i32 %81, 50
  %83 = load i8*, i8** %4, align 8
  call void @free(i8* %83) #8
  store i8* null, i8** %4, align 8
  %. = select i1 %82, i32 8, i32 7
  br label %84

; <label>:84:                                     ; preds = %78, %67, %3, %75, %11, %65, %25, %20
  %.0 = phi i32 [ 7, %20 ], [ 9, %25 ], [ 9, %65 ], [ %12, %11 ], [ %76, %75 ], [ 44, %3 ], [ 44, %67 ], [ %., %78 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @ftp_request(i8*, i8*) #0 {
  %3 = icmp ne i8* %1, null
  %4 = getelementptr [3 x i8], [3 x i8]* @.str.45.168, i32 0, i32 0
  br i1 %3, label %5, label %38

; <label>:5:                                      ; preds = %2
  %6 = call i8* @strpbrk(i8* %1, i8* %4) #14, !track !257
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %34

; <label>:8:                                      ; preds = %5
  %9 = call i64 @strlen(i8* %1) #14
  %10 = add i64 %9, 1
  %11 = alloca i8, i64 %10, align 16, !track !258
  %12 = call i8* @strcpy(i8* %11, i8* %1) #8, !track !259
  %13 = load i8, i8* %11, align 1
  %14 = icmp ne i8 %13, 0
  br i1 %14, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %8
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %23
  %.03 = phi i8* [ %24, %23 ], [ %11, %.lr.ph.preheader ]
  call void @unroll_loop(i32 94)
  %15 = load i8, i8* %.03, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 13
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %.lr.ph
  %19 = load i8, i8* %.03, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 10
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %18, %.lr.ph
  store i8 32, i8* %.03, align 1
  br label %23

; <label>:23:                                     ; preds = %18, %22
  %24 = getelementptr inbounds i8, i8* %.03, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = icmp ne i8 %25, 0
  br i1 %26, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %23
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %8
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %28 = load i8, i8* %27, align 1
  %29 = trunc i8 %28 to i1
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %._crit_edge
  %31 = call i8* @quotearg_style(i32 7, i8* %1)
  %32 = call i8* @quotearg_style(i32 7, i8* %11)
  %33 = getelementptr [52 x i8], [52 x i8]* @.str.46.169, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %33, i8* %0, i8* %31, i8* %0, i8* %32)
  br label %34

; <label>:34:                                     ; preds = %30, %._crit_edge, %5
  %.01 = phi i8* [ %1, %5 ], [ %11, %._crit_edge ], [ %11, %30 ]
  %35 = getelementptr [2 x i8], [2 x i8]* @.str.32.170, i32 0, i32 0
  %36 = getelementptr [3 x i8], [3 x i8]* @.str.45.168, i32 0, i32 0
  %37 = call i8* (i8*, ...) @concat_strings(i8* %0, i8* %35, i8* %.01, i8* %36, i8* null)
  br label %40

; <label>:38:                                     ; preds = %2
  %39 = call i8* (i8*, ...) @concat_strings(i8* %0, i8* %4, i8* null)
  br label %40

; <label>:40:                                     ; preds = %38, %34
  %.02 = phi i8* [ %37, %34 ], [ %39, %38 ]
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %42 = load i8, i8* %41, align 8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %44, label %52

; <label>:44:                                     ; preds = %40
  %45 = getelementptr [5 x i8], [5 x i8]* @.str.4.165, i32 0, i32 0
  %46 = call i32 @strncmp(i8* %.02, i8* %45, i64 4) #14
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %50

; <label>:48:                                     ; preds = %44
  %49 = getelementptr [8 x i8], [8 x i8]* @.str.47.171, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %49, i8* %.02)
  br label %58

; <label>:50:                                     ; preds = %44
  %51 = getelementptr [25 x i8], [25 x i8]* @.str.48.172, i32 0, i32 0
  call void @logputs(i32 3, i8* %51)
  br label %58

; <label>:52:                                     ; preds = %40
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %54 = load i8, i8* %53, align 1
  %55 = trunc i8 %54 to i1
  br i1 %55, label %56, label %58

; <label>:56:                                     ; preds = %52
  %57 = getelementptr [9 x i8], [9 x i8]* @.str.49.173, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %57, i8* %.02)
  br label %58

; <label>:58:                                     ; preds = %56, %52, %48, %50
  ret i8* %.02
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_port(i32, i32*) #0 {
  %3 = alloca i8*, align 8, !track !260
  %4 = alloca %struct.ip_address, align 4, !track !261
  %5 = alloca i32, align 4
  %6 = alloca [25 x i8], align 16, !track !262
  %7 = call zeroext i1 @socket_ip_address(i32 %0, %struct.ip_address* %4, i32 0)
  br i1 %7, label %8, label %37

; <label>:8:                                      ; preds = %2
  store i32 0, i32* %5, align 4
  %9 = call i32 @bind_local(%struct.ip_address* %4, i32* %5)
  store i32 %9, i32* %1, align 4
  %10 = load i32, i32* %1, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %37, label %12

; <label>:12:                                     ; preds = %8
  %13 = load i32, i32* %5, align 4
  %14 = getelementptr inbounds [25 x i8], [25 x i8]* %6, i32 0, i32 0
  call void @ip_address_to_port_repr(%struct.ip_address* %4, i32 %13, i8* %14, i64 25)
  %15 = getelementptr inbounds [25 x i8], [25 x i8]* %6, i32 0, i32 0
  %16 = getelementptr [5 x i8], [5 x i8]* @.str.5.176, i32 0, i32 0
  %17 = call i8* @ftp_request(i8* %16, i8* %15)
  %18 = call i64 @strlen(i8* %17) #14
  %19 = trunc i64 %18 to i32
  %20 = call i32 @fd_write(i32 %0, i8* %17, i32 %19, double -1.000000e+00)
  %21 = icmp slt i32 %20, 0
  call void @free(i8* %17) #8
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %12
  %23 = load i32, i32* %1, align 4
  call void @fd_close(i32 %23)
  br label %37

; <label>:24:                                     ; preds = %12
  %25 = call i32 @ftp_response(i32 %0, i8** %3)
  %26 = icmp ne i32 %25, 7
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %24
  %28 = load i32, i32* %1, align 4
  call void @fd_close(i32 %28)
  br label %37

; <label>:29:                                     ; preds = %24
  %30 = load i8*, i8** %3, align 8
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp ne i32 %32, 50
  %34 = load i8*, i8** %3, align 8
  call void @free(i8* %34) #8
  store i8* null, i8** %3, align 8
  br i1 %33, label %35, label %37

; <label>:35:                                     ; preds = %29
  %36 = load i32, i32* %1, align 4
  call void @fd_close(i32 %36)
  br label %37

; <label>:37:                                     ; preds = %29, %8, %2, %35, %27, %22
  %.0 = phi i32 [ 44, %22 ], [ %25, %27 ], [ 10, %35 ], [ 11, %2 ], [ 11, %8 ], [ 7, %29 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @ip_address_to_port_repr(%struct.ip_address*, i32, i8*, i64) #0 {
  %5 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 1
  %6 = bitcast %union.anon* %5 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i64 0
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds i8, i8* %6, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %6, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %6, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 %1, 65280
  %20 = ashr i32 %19, 8
  %21 = and i32 %1, 255
  %22 = getelementptr [18 x i8], [18 x i8]* @.str.50.177, i32 0, i32 0
  %23 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %2, i64 %3, i8* %22, i32 %9, i32 %12, i32 %15, i32 %18, i32 %20, i32 %21) #8
  %24 = sub i64 %3, 1
  %25 = getelementptr inbounds i8, i8* %2, i64 %24
  store i8 0, i8* %25, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_lprt(i32, i32*) #0 {
  %3 = alloca i8*, align 8, !track !263
  %4 = alloca %struct.ip_address, align 4, !track !264
  %5 = alloca i32, align 4
  %6 = alloca [85 x i8], align 16, !track !265
  %7 = call zeroext i1 @socket_ip_address(i32 %0, %struct.ip_address* %4, i32 0)
  br i1 %7, label %8, label %37

; <label>:8:                                      ; preds = %2
  store i32 0, i32* %5, align 4
  %9 = call i32 @bind_local(%struct.ip_address* %4, i32* %5)
  store i32 %9, i32* %1, align 4
  %10 = load i32, i32* %1, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %37, label %12

; <label>:12:                                     ; preds = %8
  %13 = load i32, i32* %5, align 4
  %14 = getelementptr inbounds [85 x i8], [85 x i8]* %6, i32 0, i32 0
  call void @ip_address_to_lprt_repr(%struct.ip_address* %4, i32 %13, i8* %14, i64 85)
  %15 = getelementptr inbounds [85 x i8], [85 x i8]* %6, i32 0, i32 0
  %16 = getelementptr [5 x i8], [5 x i8]* @.str.6.180, i32 0, i32 0
  %17 = call i8* @ftp_request(i8* %16, i8* %15)
  %18 = call i64 @strlen(i8* %17) #14
  %19 = trunc i64 %18 to i32
  %20 = call i32 @fd_write(i32 %0, i8* %17, i32 %19, double -1.000000e+00)
  %21 = icmp slt i32 %20, 0
  call void @free(i8* %17) #8
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %12
  %23 = load i32, i32* %1, align 4
  call void @fd_close(i32 %23)
  br label %37

; <label>:24:                                     ; preds = %12
  %25 = call i32 @ftp_response(i32 %0, i8** %3)
  %26 = icmp ne i32 %25, 7
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %24
  %28 = load i32, i32* %1, align 4
  call void @fd_close(i32 %28)
  br label %37

; <label>:29:                                     ; preds = %24
  %30 = load i8*, i8** %3, align 8
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp ne i32 %32, 50
  %34 = load i8*, i8** %3, align 8
  call void @free(i8* %34) #8
  store i8* null, i8** %3, align 8
  br i1 %33, label %35, label %37

; <label>:35:                                     ; preds = %29
  %36 = load i32, i32* %1, align 4
  call void @fd_close(i32 %36)
  br label %37

; <label>:37:                                     ; preds = %29, %8, %2, %35, %27, %22
  %.0 = phi i32 [ 44, %22 ], [ %25, %27 ], [ 10, %35 ], [ 11, %2 ], [ 11, %8 ], [ 7, %29 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @ip_address_to_lprt_repr(%struct.ip_address*, i32, i8*, i64) #0 {
  %5 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 1
  %6 = bitcast %union.anon* %5 to i8*
  %7 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %81 [
    i32 2, label %9
    i32 10, label %27
  ]

; <label>:9:                                      ; preds = %4
  %10 = getelementptr inbounds i8, i8* %6, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %6, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %6, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %6, i64 3
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = and i32 %1, 65280
  %23 = ashr i32 %22, 8
  %24 = and i32 %1, 255
  %25 = getelementptr [27 x i8], [27 x i8]* @.str.51.181, i32 0, i32 0
  %26 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %2, i64 %3, i8* %25, i32 4, i32 4, i32 %12, i32 %15, i32 %18, i32 %21, i32 2, i32 %23, i32 %24) #8
  br label %82

; <label>:27:                                     ; preds = %4
  %28 = getelementptr inbounds i8, i8* %6, i64 0
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds i8, i8* %6, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds i8, i8* %6, i64 2
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds i8, i8* %6, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %6, i64 4
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds i8, i8* %6, i64 5
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds i8, i8* %6, i64 6
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = getelementptr inbounds i8, i8* %6, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds i8, i8* %6, i64 8
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %6, i64 9
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds i8, i8* %6, i64 10
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds i8, i8* %6, i64 11
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = getelementptr inbounds i8, i8* %6, i64 12
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds i8, i8* %6, i64 13
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = getelementptr inbounds i8, i8* %6, i64 14
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = getelementptr inbounds i8, i8* %6, i64 15
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = and i32 %1, 65280
  %77 = ashr i32 %76, 8
  %78 = and i32 %1, 255
  %79 = getelementptr [63 x i8], [63 x i8]* @.str.52.182, i32 0, i32 0
  %80 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %2, i64 %3, i8* %79, i32 6, i32 16, i32 %30, i32 %33, i32 %36, i32 %39, i32 %42, i32 %45, i32 %48, i32 %51, i32 %54, i32 %57, i32 %60, i32 %63, i32 %66, i32 %69, i32 %72, i32 %75, i32 2, i32 %77, i32 %78) #8
  br label %82

; <label>:81:                                     ; preds = %4
  call void @abort() #16
  unreachable

; <label>:82:                                     ; preds = %27, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_eprt(i32, i32*) #0 {
  %3 = alloca i8*, align 8, !track !266
  %4 = alloca %struct.ip_address, align 4, !track !267
  %5 = alloca i32, align 4
  %6 = alloca [57 x i8], align 16, !track !268
  %7 = call zeroext i1 @socket_ip_address(i32 %0, %struct.ip_address* %4, i32 0)
  br i1 %7, label %8, label %37

; <label>:8:                                      ; preds = %2
  store i32 0, i32* %5, align 4
  %9 = call i32 @bind_local(%struct.ip_address* %4, i32* %5)
  store i32 %9, i32* %1, align 4
  %10 = load i32, i32* %1, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %37, label %12

; <label>:12:                                     ; preds = %8
  %13 = load i32, i32* %5, align 4
  %14 = getelementptr inbounds [57 x i8], [57 x i8]* %6, i32 0, i32 0
  call void @ip_address_to_eprt_repr(%struct.ip_address* %4, i32 %13, i8* %14, i64 57)
  %15 = getelementptr inbounds [57 x i8], [57 x i8]* %6, i32 0, i32 0
  %16 = getelementptr [5 x i8], [5 x i8]* @.str.7.185, i32 0, i32 0
  %17 = call i8* @ftp_request(i8* %16, i8* %15)
  %18 = call i64 @strlen(i8* %17) #14
  %19 = trunc i64 %18 to i32
  %20 = call i32 @fd_write(i32 %0, i8* %17, i32 %19, double -1.000000e+00)
  %21 = icmp slt i32 %20, 0
  call void @free(i8* %17) #8
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %12
  %23 = load i32, i32* %1, align 4
  call void @fd_close(i32 %23)
  br label %37

; <label>:24:                                     ; preds = %12
  %25 = call i32 @ftp_response(i32 %0, i8** %3)
  %26 = icmp ne i32 %25, 7
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %24
  %28 = load i32, i32* %1, align 4
  call void @fd_close(i32 %28)
  br label %37

; <label>:29:                                     ; preds = %24
  %30 = load i8*, i8** %3, align 8
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp ne i32 %32, 50
  %34 = load i8*, i8** %3, align 8
  call void @free(i8* %34) #8
  store i8* null, i8** %3, align 8
  br i1 %33, label %35, label %37

; <label>:35:                                     ; preds = %29
  %36 = load i32, i32* %1, align 4
  call void @fd_close(i32 %36)
  br label %37

; <label>:37:                                     ; preds = %29, %8, %2, %35, %27, %22
  %.0 = phi i32 [ 44, %22 ], [ %25, %27 ], [ 10, %35 ], [ 11, %2 ], [ 11, %8 ], [ 7, %29 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @ip_address_to_eprt_repr(%struct.ip_address*, i32, i8*, i64) #0 {
  %5 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 2
  %8 = zext i1 %7 to i64
  %9 = select i1 %7, i32 1, i32 2
  %10 = call i8* @print_address(%struct.ip_address* %0)
  %11 = getelementptr [11 x i8], [11 x i8]* @.str.53.186, i32 0, i32 0
  %12 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %2, i64 %3, i8* %11, i32 %9, i8* %10, i32 %1) #8
  %13 = sub i64 %3, 1
  %14 = getelementptr inbounds i8, i8* %2, i64 %13
  store i8 0, i8* %14, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_auth(i32, i32) #0 {
  %3 = alloca i8*, align 8, !track !269
  store i8* null, i8** %3, align 8
  %4 = icmp eq i32 %1, 3
  br i1 %4, label %5, label %21

; <label>:5:                                      ; preds = %2
  %6 = getelementptr [5 x i8], [5 x i8]* @.str.8.189, i32 0, i32 0
  %7 = getelementptr [4 x i8], [4 x i8]* @.str.9.190, i32 0, i32 0
  %8 = call i8* @ftp_request(i8* %6, i8* %7)
  %9 = call i64 @strlen(i8* %8) #14
  %10 = trunc i64 %9 to i32
  %11 = call i32 @fd_write(i32 %0, i8* %8, i32 %10, double -1.000000e+00)
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %21, label %13

; <label>:13:                                     ; preds = %5
  %14 = call i32 @ftp_response(i32 %0, i8** %3)
  %15 = icmp ne i32 %14, 7
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %13
  %17 = load i8*, i8** %3, align 8
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %19, 50
  %spec.select = select i1 %20, i32 32, i32 %14
  br label %21

; <label>:21:                                     ; preds = %5, %13, %2, %16
  %.2 = phi i32 [ 44, %5 ], [ %14, %13 ], [ %spec.select, %16 ], [ 32, %2 ]
  %.1 = phi i8* [ %8, %5 ], [ %8, %13 ], [ %8, %16 ], [ null, %2 ]
  call void @free(i8* %.1) #8
  %22 = load i8*, i8** %3, align 8
  call void @free(i8* %22) #8
  store i8* null, i8** %3, align 8
  ret i32 %.2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_pbsz(i32, i32) #0 {
  %3 = alloca [5 x i8], align 1, !track !270
  %4 = alloca i8*, align 8, !track !271
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %6 = getelementptr [3 x i8], [3 x i8]* @.str.10.193, i32 0, i32 0
  %7 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %5, i64 5, i8* %6, i32 %1) #8
  %8 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %9 = getelementptr [5 x i8], [5 x i8]* @.str.11.194, i32 0, i32 0
  %10 = call i8* @ftp_request(i8* %9, i8* %8)
  %11 = call i64 @strlen(i8* %10) #14
  %12 = trunc i64 %11 to i32
  %13 = call i32 @fd_write(i32 %0, i8* %10, i32 %12, double -1.000000e+00)
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %23, label %15

; <label>:15:                                     ; preds = %2
  %16 = call i32 @ftp_response(i32 %0, i8** %4)
  %17 = icmp ne i32 %16, 7
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %15
  %19 = load i8*, i8** %4, align 8
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 50
  %spec.select = select i1 %22, i32 30, i32 %16
  br label %23

; <label>:23:                                     ; preds = %18, %2, %15
  %.1 = phi i32 [ %spec.select, %18 ], [ 44, %2 ], [ %16, %15 ]
  call void @free(i8* %10) #8
  %24 = load i8*, i8** %4, align 8
  call void @free(i8* %24) #8
  store i8* null, i8** %4, align 8
  ret i32 %.1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_prot(i32, i32) #0 {
  %3 = alloca i8*, align 8, !track !272
  %4 = alloca [2 x i8], align 1, !track !273
  store i8* null, i8** %3, align 8
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  store i8 %5, i8* %6, align 1
  %7 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i32 0, i32 0
  %9 = getelementptr [5 x i8], [5 x i8]* @.str.12.197, i32 0, i32 0
  %10 = call i8* @ftp_request(i8* %9, i8* %8)
  %11 = call i64 @strlen(i8* %10) #14
  %12 = trunc i64 %11 to i32
  %13 = call i32 @fd_write(i32 %0, i8* %10, i32 %12, double -1.000000e+00)
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %23, label %15

; <label>:15:                                     ; preds = %2
  %16 = call i32 @ftp_response(i32 %0, i8** %3)
  %17 = icmp ne i32 %16, 7
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %15
  %19 = load i8*, i8** %3, align 8
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 50
  %spec.select = select i1 %22, i32 31, i32 %16
  br label %23

; <label>:23:                                     ; preds = %18, %2, %15
  %.1 = phi i32 [ %spec.select, %18 ], [ 44, %2 ], [ %16, %15 ]
  call void @free(i8* %10) #8
  %24 = load i8*, i8** %3, align 8
  call void @free(i8* %24) #8
  store i8* null, i8** %3, align 8
  ret i32 %.1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_pasv(i32, %struct.ip_address*, i32*) #0 {
  %4 = alloca i8*, align 8, !track !274
  %5 = alloca [6 x i8], align 1, !track !275
  %6 = bitcast %struct.ip_address* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 24, i1 false)
  %7 = getelementptr [5 x i8], [5 x i8]* @.str.13.200, i32 0, i32 0
  %8 = call i8* @ftp_request(i8* %7, i8* null)
  %9 = call i64 @strlen(i8* %8) #14
  %10 = trunc i64 %9 to i32
  %11 = call i32 @fd_write(i32 %0, i8* %8, i32 %10, double -1.000000e+00)
  %12 = icmp slt i32 %11, 0
  call void @free(i8* %8) #8
  br i1 %12, label %87, label %13

; <label>:13:                                     ; preds = %3
  %14 = call i32 @ftp_response(i32 %0, i8** %4)
  %15 = icmp ne i32 %14, 7
  br i1 %15, label %87, label %16

; <label>:16:                                     ; preds = %13
  %17 = load i8*, i8** %4, align 8
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %19, 50
  %21 = load i8*, i8** %4, align 8
  br i1 %20, label %22, label %23

; <label>:22:                                     ; preds = %16
  call void @free(i8* %21) #8
  store i8* null, i8** %4, align 8
  br label %87

; <label>:23:                                     ; preds = %16
  %24 = getelementptr inbounds i8, i8* %21, i64 4
  call void @unroll_loop(i32 95)
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %.lr.ph3, label %.critedge

.lr.ph3:                                          ; preds = %23
  br label %28

; <label>:28:                                     ; preds = %.lr.ph3, %33
  %.021 = phi i8* [ %24, %.lr.ph3 ], [ %34, %33 ]
  %29 = load i8, i8* %.021, align 1
  %30 = sext i8 %29 to i32
  %31 = call zeroext i1 @c_isdigit(i32 %30)
  %32 = xor i1 %31, true
  br i1 %32, label %33, label %..critedge_crit_edge4

; <label>:33:                                     ; preds = %28
  %34 = getelementptr inbounds i8, i8* %.021, i32 1
  call void @unroll_loop(i32 95)
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %28, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %33
  %split = phi i8* [ %34, %33 ]
  br label %.critedge

..critedge_crit_edge4:                            ; preds = %28
  %split5 = phi i8* [ %.021, %28 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge4, %..critedge_crit_edge, %23
  %.02.lcssa = phi i8* [ %split5, %..critedge_crit_edge4 ], [ %split, %..critedge_crit_edge ], [ %24, %23 ]
  %38 = load i8, i8* %.02.lcssa, align 1
  %39 = icmp ne i8 %38, 0
  br i1 %39, label %.preheader, label %40

.preheader:                                       ; preds = %.critedge
  br label %42

; <label>:40:                                     ; preds = %.critedge
  %41 = load i8*, i8** %4, align 8
  call void @free(i8* %41) #8
  store i8* null, i8** %4, align 8
  br label %87

; <label>:42:                                     ; preds = %.preheader, %70
  %indvars.iv = phi i64 [ %indvars.iv.next, %70 ], [ 0, %.preheader ]
  %.14 = phi i8* [ %.3, %70 ], [ %.02.lcssa, %.preheader ]
  call void @unroll_loop(i32 96)
  %43 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 %indvars.iv
  store i8 0, i8* %43, align 1
  %44 = load i8, i8* %.14, align 1
  %45 = sext i8 %44 to i32
  %46 = call zeroext i1 @c_isdigit(i32 %45)
  br i1 %46, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %42
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.23 = phi i8* [ %57, %.lr.ph ], [ %.14, %.lr.ph.preheader ]
  call void @unroll_loop(i32 97)
  %47 = load i8, i8* %.23, align 1
  %48 = sext i8 %47 to i32
  %49 = sub nsw i32 %48, 48
  %50 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 %indvars.iv
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = mul nsw i32 10, %52
  %54 = add nsw i32 %49, %53
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 %indvars.iv
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds i8, i8* %.23, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = call zeroext i1 @c_isdigit(i32 %59)
  br i1 %60, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.2.lcssa.ph = phi i8* [ %57, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %42
  %.2.lcssa = phi i8* [ %.14, %42 ], [ %.2.lcssa.ph, %._crit_edge.loopexit ]
  %61 = load i8, i8* %.2.lcssa, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp eq i32 %62, 44
  br i1 %63, label %64, label %66

; <label>:64:                                     ; preds = %._crit_edge
  %65 = getelementptr inbounds i8, i8* %.2.lcssa, i32 1
  br label %70

; <label>:66:                                     ; preds = %._crit_edge
  %67 = icmp ult i64 %indvars.iv, 5
  br i1 %67, label %68, label %70

; <label>:68:                                     ; preds = %66
  %69 = load i8*, i8** %4, align 8
  call void @free(i8* %69) #8
  store i8* null, i8** %4, align 8
  br label %87

; <label>:70:                                     ; preds = %64, %66
  %.3 = phi i8* [ %65, %64 ], [ %.2.lcssa, %66 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %71 = icmp ult i64 %indvars.iv.next, 6
  br i1 %71, label %42, label %72

; <label>:72:                                     ; preds = %70
  %73 = load i8*, i8** %4, align 8
  call void @free(i8* %73) #8
  store i8* null, i8** %4, align 8
  %74 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  store i32 2, i32* %74, align 4
  %75 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %76 = bitcast %union.anon* %75 to i8*
  %77 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 1 %77, i64 4, i1 false), !track !276
  %78 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 4
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = shl i32 %80, 8
  %82 = and i32 %81, 65280
  %83 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 5
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = add nsw i32 %82, %85
  store i32 %86, i32* %2, align 4
  br label %87

; <label>:87:                                     ; preds = %3, %13, %72, %68, %40, %22
  %.0 = phi i32 [ 29, %22 ], [ 28, %68 ], [ 7, %72 ], [ 28, %40 ], [ %14, %13 ], [ 44, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_lpsv(i32, %struct.ip_address*, i32*) #0 {
  %4 = alloca i8*, align 8, !track !277
  %5 = alloca [16 x i8], align 16, !track !278
  %6 = alloca [2 x i8], align 1, !track !279
  %7 = bitcast %struct.ip_address* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 24, i1 false)
  %8 = getelementptr [5 x i8], [5 x i8]* @.str.14.203, i32 0, i32 0
  %9 = call i8* @ftp_request(i8* %8, i8* null)
  %10 = call i64 @strlen(i8* %9) #14
  %11 = trunc i64 %10 to i32
  %12 = call i32 @fd_write(i32 %0, i8* %9, i32 %11, double -1.000000e+00)
  %13 = icmp slt i32 %12, 0
  call void @free(i8* %9) #8
  br i1 %13, label %296, label %14

; <label>:14:                                     ; preds = %3
  %15 = call i32 @ftp_response(i32 %0, i8** %4)
  %16 = icmp ne i32 %15, 7
  br i1 %16, label %296, label %17

; <label>:17:                                     ; preds = %14
  %18 = load i8*, i8** %4, align 8
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp ne i32 %20, 50
  %22 = load i8*, i8** %4, align 8
  br i1 %21, label %23, label %24

; <label>:23:                                     ; preds = %17
  call void @free(i8* %22) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:24:                                     ; preds = %17
  %25 = getelementptr inbounds i8, i8* %22, i64 4
  call void @unroll_loop(i32 98)
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %.lr.ph4, label %.critedge

.lr.ph4:                                          ; preds = %24
  br label %29

; <label>:29:                                     ; preds = %.lr.ph4, %34
  %.042 = phi i8* [ %25, %.lr.ph4 ], [ %35, %34 ]
  %30 = load i8, i8* %.042, align 1
  %31 = sext i8 %30 to i32
  %32 = call zeroext i1 @c_isdigit(i32 %31)
  %33 = xor i1 %32, true
  br i1 %33, label %34, label %..critedge_crit_edge5

; <label>:34:                                     ; preds = %29
  %35 = getelementptr inbounds i8, i8* %.042, i32 1
  call void @unroll_loop(i32 98)
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %29, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %34
  %split = phi i8* [ %35, %34 ]
  br label %.critedge

..critedge_crit_edge5:                            ; preds = %29
  %split6 = phi i8* [ %.042, %29 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge5, %..critedge_crit_edge, %24
  %.04.lcssa = phi i8* [ %split6, %..critedge_crit_edge5 ], [ %split, %..critedge_crit_edge ], [ %25, %24 ]
  %39 = load i8, i8* %.04.lcssa, align 1
  %40 = icmp ne i8 %39, 0
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %.critedge
  %42 = load i8*, i8** %4, align 8
  call void @free(i8* %42) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:43:                                     ; preds = %.critedge
  %44 = load i8, i8* %.04.lcssa, align 1
  %45 = sext i8 %44 to i32
  %46 = call zeroext i1 @c_isdigit(i32 %45)
  br i1 %46, label %.lr.ph40.preheader, label %._crit_edge41

.lr.ph40.preheader:                               ; preds = %43
  br label %.lr.ph40

.lr.ph40:                                         ; preds = %.lr.ph40.preheader, %.lr.ph40
  %.0338 = phi i32 [ %51, %.lr.ph40 ], [ 0, %.lr.ph40.preheader ]
  %.137 = phi i8* [ %52, %.lr.ph40 ], [ %.04.lcssa, %.lr.ph40.preheader ]
  call void @unroll_loop(i32 99)
  %47 = load i8, i8* %.137, align 1
  %48 = sext i8 %47 to i32
  %49 = sub nsw i32 %48, 48
  %50 = mul nsw i32 10, %.0338
  %51 = add nsw i32 %49, %50
  %52 = getelementptr inbounds i8, i8* %.137, i32 1
  %53 = load i8, i8* %52, align 1
  %54 = sext i8 %53 to i32
  %55 = call zeroext i1 @c_isdigit(i32 %54)
  br i1 %55, label %.lr.ph40, label %._crit_edge41.loopexit

._crit_edge41.loopexit:                           ; preds = %.lr.ph40
  %.1.lcssa.ph = phi i8* [ %52, %.lr.ph40 ]
  %.03.lcssa.ph = phi i32 [ %51, %.lr.ph40 ]
  br label %._crit_edge41

._crit_edge41:                                    ; preds = %._crit_edge41.loopexit, %43
  %.1.lcssa = phi i8* [ %.04.lcssa, %43 ], [ %.1.lcssa.ph, %._crit_edge41.loopexit ]
  %.03.lcssa = phi i32 [ 0, %43 ], [ %.03.lcssa.ph, %._crit_edge41.loopexit ]
  switch i32 %.03.lcssa, label %56 [
    i32 4, label %58
    i32 6, label %58
  ]

; <label>:56:                                     ; preds = %._crit_edge41
  %57 = load i8*, i8** %4, align 8
  call void @free(i8* %57) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:58:                                     ; preds = %._crit_edge41, %._crit_edge41
  %59 = load i8, i8* %.1.lcssa, align 1
  %60 = icmp ne i8 %59, 0
  br i1 %60, label %61, label %66

; <label>:61:                                     ; preds = %58
  %62 = getelementptr inbounds i8, i8* %.1.lcssa, i32 1
  %63 = load i8, i8* %.1.lcssa, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp ne i32 %64, 44
  br i1 %65, label %66, label %68

; <label>:66:                                     ; preds = %58, %61
  %67 = load i8*, i8** %4, align 8
  call void @free(i8* %67) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:68:                                     ; preds = %61
  %69 = load i8, i8* %62, align 1
  %70 = sext i8 %69 to i32
  %71 = call zeroext i1 @c_isdigit(i32 %70)
  br i1 %71, label %.lr.ph33.preheader, label %._crit_edge34

.lr.ph33.preheader:                               ; preds = %68
  br label %.lr.ph33

.lr.ph33:                                         ; preds = %.lr.ph33.preheader, %.lr.ph33
  %.0231 = phi i32 [ %76, %.lr.ph33 ], [ 0, %.lr.ph33.preheader ]
  %.230 = phi i8* [ %77, %.lr.ph33 ], [ %62, %.lr.ph33.preheader ]
  call void @unroll_loop(i32 100)
  %72 = load i8, i8* %.230, align 1
  %73 = sext i8 %72 to i32
  %74 = sub nsw i32 %73, 48
  %75 = mul nsw i32 10, %.0231
  %76 = add nsw i32 %74, %75
  %77 = getelementptr inbounds i8, i8* %.230, i32 1
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = call zeroext i1 @c_isdigit(i32 %79)
  br i1 %80, label %.lr.ph33, label %._crit_edge34.loopexit

._crit_edge34.loopexit:                           ; preds = %.lr.ph33
  %.2.lcssa.ph = phi i8* [ %77, %.lr.ph33 ]
  %.02.lcssa.ph = phi i32 [ %76, %.lr.ph33 ]
  br label %._crit_edge34

._crit_edge34:                                    ; preds = %._crit_edge34.loopexit, %68
  %.2.lcssa = phi i8* [ %62, %68 ], [ %.2.lcssa.ph, %._crit_edge34.loopexit ]
  %.02.lcssa = phi i32 [ 0, %68 ], [ %.02.lcssa.ph, %._crit_edge34.loopexit ]
  %81 = load i8, i8* %.2.lcssa, align 1
  %82 = icmp ne i8 %81, 0
  br i1 %82, label %83, label %88

; <label>:83:                                     ; preds = %._crit_edge34
  %84 = getelementptr inbounds i8, i8* %.2.lcssa, i32 1
  %85 = load i8, i8* %.2.lcssa, align 1
  %86 = sext i8 %85 to i32
  %87 = icmp ne i32 %86, 44
  br i1 %87, label %88, label %90

; <label>:88:                                     ; preds = %._crit_edge34, %83
  %89 = load i8*, i8** %4, align 8
  call void @free(i8* %89) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:90:                                     ; preds = %83
  %91 = icmp sgt i32 %.02.lcssa, 16
  br i1 %91, label %92, label %94

; <label>:92:                                     ; preds = %90
  %93 = load i8*, i8** %4, align 8
  call void @free(i8* %93) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:94:                                     ; preds = %90
  %95 = icmp eq i32 %.03.lcssa, 4
  %96 = icmp ne i32 %.02.lcssa, 4
  %or.cond = and i1 %95, %96
  br i1 %or.cond, label %100, label %97

; <label>:97:                                     ; preds = %94
  %98 = icmp eq i32 %.03.lcssa, 6
  %99 = icmp ne i32 %.02.lcssa, 16
  %or.cond1 = and i1 %98, %99
  br i1 %or.cond1, label %100, label %102

; <label>:100:                                    ; preds = %94, %97
  %101 = load i8*, i8** %4, align 8
  call void @free(i8* %101) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:102:                                    ; preds = %97
  %103 = icmp slt i32 0, %.02.lcssa
  br i1 %103, label %.lr.ph27, label %._crit_edge28

.lr.ph27:                                         ; preds = %102
  %104 = sext i32 %.02.lcssa to i64
  br label %105

; <label>:105:                                    ; preds = %.lr.ph27, %127
  %indvars.iv = phi i64 [ 0, %.lr.ph27 ], [ %indvars.iv.next, %127 ]
  %.325 = phi i8* [ %84, %.lr.ph27 ], [ %128, %127 ]
  call void @unroll_loop(i32 101)
  %106 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %indvars.iv
  store i8 0, i8* %106, align 1
  %107 = load i8, i8* %.325, align 1
  %108 = sext i8 %107 to i32
  %109 = call zeroext i1 @c_isdigit(i32 %108)
  br i1 %109, label %.lr.ph21.preheader, label %._crit_edge22

.lr.ph21.preheader:                               ; preds = %105
  br label %.lr.ph21

.lr.ph21:                                         ; preds = %.lr.ph21.preheader, %.lr.ph21
  %.419 = phi i8* [ %120, %.lr.ph21 ], [ %.325, %.lr.ph21.preheader ]
  call void @unroll_loop(i32 102)
  %110 = load i8, i8* %.419, align 1
  %111 = sext i8 %110 to i32
  %112 = sub nsw i32 %111, 48
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %indvars.iv
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul nsw i32 10, %115
  %117 = add nsw i32 %112, %116
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %indvars.iv
  store i8 %118, i8* %119, align 1
  %120 = getelementptr inbounds i8, i8* %.419, i32 1
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = call zeroext i1 @c_isdigit(i32 %122)
  br i1 %123, label %.lr.ph21, label %._crit_edge22.loopexit

._crit_edge22.loopexit:                           ; preds = %.lr.ph21
  %.4.lcssa.ph = phi i8* [ %120, %.lr.ph21 ]
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %._crit_edge22.loopexit, %105
  %.4.lcssa = phi i8* [ %.325, %105 ], [ %.4.lcssa.ph, %._crit_edge22.loopexit ]
  %124 = load i8, i8* %.4.lcssa, align 1
  %125 = sext i8 %124 to i32
  %126 = icmp eq i32 %125, 44
  br i1 %126, label %127, label %130

; <label>:127:                                    ; preds = %._crit_edge22
  %128 = getelementptr inbounds i8, i8* %.4.lcssa, i32 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %129 = icmp slt i64 %indvars.iv.next, %104
  br i1 %129, label %105, label %._crit_edge28.loopexit

; <label>:130:                                    ; preds = %._crit_edge22
  %131 = load i8*, i8** %4, align 8
  call void @free(i8* %131) #8
  store i8* null, i8** %4, align 8
  br label %296

._crit_edge28.loopexit:                           ; preds = %127
  %.3.lcssa.ph = phi i8* [ %128, %127 ]
  br label %._crit_edge28

._crit_edge28:                                    ; preds = %._crit_edge28.loopexit, %102
  %.3.lcssa = phi i8* [ %84, %102 ], [ %.3.lcssa.ph, %._crit_edge28.loopexit ]
  %132 = load i8, i8* %.3.lcssa, align 1
  %133 = sext i8 %132 to i32
  %134 = call zeroext i1 @c_isdigit(i32 %133)
  br i1 %134, label %.lr.ph15.preheader, label %._crit_edge16

.lr.ph15.preheader:                               ; preds = %._crit_edge28
  br label %.lr.ph15

.lr.ph15:                                         ; preds = %.lr.ph15.preheader, %.lr.ph15
  %.0113 = phi i32 [ %139, %.lr.ph15 ], [ 0, %.lr.ph15.preheader ]
  %.512 = phi i8* [ %140, %.lr.ph15 ], [ %.3.lcssa, %.lr.ph15.preheader ]
  call void @unroll_loop(i32 103)
  %135 = load i8, i8* %.512, align 1
  %136 = sext i8 %135 to i32
  %137 = sub nsw i32 %136, 48
  %138 = mul nsw i32 10, %.0113
  %139 = add nsw i32 %137, %138
  %140 = getelementptr inbounds i8, i8* %.512, i32 1
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = call zeroext i1 @c_isdigit(i32 %142)
  br i1 %143, label %.lr.ph15, label %._crit_edge16.loopexit

._crit_edge16.loopexit:                           ; preds = %.lr.ph15
  %.5.lcssa.ph = phi i8* [ %140, %.lr.ph15 ]
  %.01.lcssa.ph = phi i32 [ %139, %.lr.ph15 ]
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %._crit_edge28
  %.5.lcssa = phi i8* [ %.3.lcssa, %._crit_edge28 ], [ %.5.lcssa.ph, %._crit_edge16.loopexit ]
  %.01.lcssa = phi i32 [ 0, %._crit_edge28 ], [ %.01.lcssa.ph, %._crit_edge16.loopexit ]
  %144 = load i8, i8* %.5.lcssa, align 1
  %145 = icmp ne i8 %144, 0
  br i1 %145, label %146, label %151

; <label>:146:                                    ; preds = %._crit_edge16
  %147 = getelementptr inbounds i8, i8* %.5.lcssa, i32 1
  %148 = load i8, i8* %.5.lcssa, align 1
  %149 = sext i8 %148 to i32
  %150 = icmp ne i32 %149, 44
  br i1 %150, label %151, label %153

; <label>:151:                                    ; preds = %._crit_edge16, %146
  %152 = load i8*, i8** %4, align 8
  call void @free(i8* %152) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:153:                                    ; preds = %146
  %154 = icmp sgt i32 %.01.lcssa, 2
  br i1 %154, label %155, label %157

; <label>:155:                                    ; preds = %153
  %156 = load i8*, i8** %4, align 8
  call void @free(i8* %156) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:157:                                    ; preds = %153
  %158 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  store i8 0, i8* %158, align 1
  %159 = load i8, i8* %147, align 1
  %160 = sext i8 %159 to i32
  %161 = call zeroext i1 @c_isdigit(i32 %160)
  br i1 %161, label %.lr.ph10.preheader, label %._crit_edge11

.lr.ph10.preheader:                               ; preds = %157
  br label %.lr.ph10

.lr.ph10:                                         ; preds = %.lr.ph10.preheader, %.lr.ph10
  %.68 = phi i8* [ %172, %.lr.ph10 ], [ %147, %.lr.ph10.preheader ]
  call void @unroll_loop(i32 104)
  %162 = load i8, i8* %.68, align 1
  %163 = sext i8 %162 to i32
  %164 = sub nsw i32 %163, 48
  %165 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nsw i32 10, %167
  %169 = add nsw i32 %164, %168
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  store i8 %170, i8* %171, align 1
  %172 = getelementptr inbounds i8, i8* %.68, i32 1
  %173 = load i8, i8* %172, align 1
  %174 = sext i8 %173 to i32
  %175 = call zeroext i1 @c_isdigit(i32 %174)
  br i1 %175, label %.lr.ph10, label %._crit_edge11.loopexit

._crit_edge11.loopexit:                           ; preds = %.lr.ph10
  %.6.lcssa.ph = phi i8* [ %172, %.lr.ph10 ]
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %157
  %.6.lcssa = phi i8* [ %147, %157 ], [ %.6.lcssa.ph, %._crit_edge11.loopexit ]
  %176 = load i8, i8* %.6.lcssa, align 1
  %177 = icmp ne i8 %176, 0
  br i1 %177, label %178, label %183

; <label>:178:                                    ; preds = %._crit_edge11
  %179 = getelementptr inbounds i8, i8* %.6.lcssa, i32 1
  %180 = load i8, i8* %.6.lcssa, align 1
  %181 = sext i8 %180 to i32
  %182 = icmp ne i32 %181, 44
  br i1 %182, label %183, label %185

; <label>:183:                                    ; preds = %._crit_edge11, %178
  %184 = load i8*, i8** %4, align 8
  call void @free(i8* %184) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:185:                                    ; preds = %178
  %186 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  store i8 0, i8* %186, align 1
  %187 = load i8, i8* %179, align 1
  %188 = sext i8 %187 to i32
  %189 = call zeroext i1 @c_isdigit(i32 %188)
  br i1 %189, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %185
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.77 = phi i8* [ %200, %.lr.ph ], [ %179, %.lr.ph.preheader ]
  call void @unroll_loop(i32 105)
  %190 = load i8, i8* %.77, align 1
  %191 = sext i8 %190 to i32
  %192 = sub nsw i32 %191, 48
  %193 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = mul nsw i32 10, %195
  %197 = add nsw i32 %192, %196
  %198 = trunc i32 %197 to i8
  %199 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  store i8 %198, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %.77, i32 1
  %201 = load i8, i8* %200, align 1
  %202 = sext i8 %201 to i32
  %203 = call zeroext i1 @c_isdigit(i32 %202)
  br i1 %203, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %185
  %204 = icmp eq i32 %.03.lcssa, 4
  %205 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  br i1 %204, label %206, label %250

; <label>:206:                                    ; preds = %._crit_edge
  store i32 2, i32* %205, align 4
  %207 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %208 = bitcast %union.anon* %207 to i8*
  %209 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %208, i8* align 16 %209, i64 4, i1 false), !track !280
  %210 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = shl i32 %212, 8
  %214 = and i32 %213, 65280
  %215 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = add nsw i32 %214, %217
  store i32 %218, i32* %2, align 4
  %219 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %220 = load i8, i8* %219, align 1
  %221 = trunc i8 %220 to i1
  br i1 %221, label %222, label %225

; <label>:222:                                    ; preds = %206
  %223 = call i8* @print_address(%struct.ip_address* %1)
  %224 = getelementptr [18 x i8], [18 x i8]* @.str.15.204, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %224, i8* %223)
  br label %225

; <label>:225:                                    ; preds = %222, %206
  %226 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %227 = load i8, i8* %226, align 1
  %228 = trunc i8 %227 to i1
  br i1 %228, label %229, label %234

; <label>:229:                                    ; preds = %225
  %230 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = getelementptr [18 x i8], [18 x i8]* @.str.16.205, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %233, i32 %232)
  br label %234

; <label>:234:                                    ; preds = %229, %225
  %235 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %236 = load i8, i8* %235, align 1
  %237 = trunc i8 %236 to i1
  br i1 %237, label %238, label %243

; <label>:238:                                    ; preds = %234
  %239 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = getelementptr [18 x i8], [18 x i8]* @.str.17.206, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %242, i32 %241)
  br label %243

; <label>:243:                                    ; preds = %238, %234
  %244 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %245 = load i8, i8* %244, align 1
  %246 = trunc i8 %245 to i1
  br i1 %246, label %247, label %294

; <label>:247:                                    ; preds = %243
  %248 = load i32, i32* %2, align 4
  %249 = getelementptr [14 x i8], [14 x i8]* @.str.18.207, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %249, i32 %248)
  br label %294

; <label>:250:                                    ; preds = %._crit_edge
  store i32 10, i32* %205, align 4
  %251 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %252 = bitcast %union.anon* %251 to i8*
  %253 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %252, i8* align 16 %253, i64 16, i1 false), !track !281
  %254 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = shl i32 %256, 8
  %258 = and i32 %257, 65280
  %259 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i32
  %262 = add nsw i32 %258, %261
  store i32 %262, i32* %2, align 4
  %263 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %264 = load i8, i8* %263, align 1
  %265 = trunc i8 %264 to i1
  br i1 %265, label %266, label %269

; <label>:266:                                    ; preds = %250
  %267 = call i8* @print_address(%struct.ip_address* %1)
  %268 = getelementptr [18 x i8], [18 x i8]* @.str.15.204, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %268, i8* %267)
  br label %269

; <label>:269:                                    ; preds = %266, %250
  %270 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %271 = load i8, i8* %270, align 1
  %272 = trunc i8 %271 to i1
  br i1 %272, label %273, label %278

; <label>:273:                                    ; preds = %269
  %274 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 0
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = getelementptr [18 x i8], [18 x i8]* @.str.16.205, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %277, i32 %276)
  br label %278

; <label>:278:                                    ; preds = %273, %269
  %279 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %280 = load i8, i8* %279, align 1
  %281 = trunc i8 %280 to i1
  br i1 %281, label %282, label %287

; <label>:282:                                    ; preds = %278
  %283 = getelementptr inbounds [2 x i8], [2 x i8]* %6, i64 0, i64 1
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = getelementptr [18 x i8], [18 x i8]* @.str.17.206, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %286, i32 %285)
  br label %287

; <label>:287:                                    ; preds = %282, %278
  %288 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %289 = load i8, i8* %288, align 1
  %290 = trunc i8 %289 to i1
  br i1 %290, label %291, label %294

; <label>:291:                                    ; preds = %287
  %292 = load i32, i32* %2, align 4
  %293 = getelementptr [14 x i8], [14 x i8]* @.str.18.207, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %293, i32 %292)
  br label %294

; <label>:294:                                    ; preds = %243, %247, %287, %291
  %295 = load i8*, i8** %4, align 8
  call void @free(i8* %295) #8
  store i8* null, i8** %4, align 8
  br label %296

; <label>:296:                                    ; preds = %3, %14, %294, %183, %155, %151, %130, %100, %92, %88, %66, %56, %41, %23
  %.0 = phi i32 [ 29, %23 ], [ 28, %56 ], [ 28, %66 ], [ 28, %88 ], [ 28, %92 ], [ 28, %100 ], [ 28, %130 ], [ 28, %151 ], [ 28, %155 ], [ 28, %183 ], [ 7, %294 ], [ 28, %41 ], [ %15, %14 ], [ 44, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_epsv(i32, %struct.ip_address*, i32*) #0 {
  %4 = alloca i8*, align 8, !track !282
  %5 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 2
  %8 = zext i1 %7 to i64
  %9 = getelementptr [2 x i8], [2 x i8]* @.str.20.210, i32 0, i32 0
  %10 = getelementptr [2 x i8], [2 x i8]* @.str.21.211, i32 0, i32 0
  %11 = select i1 %7, i8* %9, i8* %10
  %12 = getelementptr [5 x i8], [5 x i8]* @.str.19.212, i32 0, i32 0
  %13 = call i8* @ftp_request(i8* %12, i8* %11)
  %14 = call i64 @strlen(i8* %13) #14
  %15 = trunc i64 %14 to i32
  %16 = call i32 @fd_write(i32 %0, i8* %13, i32 %15, double -1.000000e+00)
  %17 = icmp slt i32 %16, 0
  call void @free(i8* %13) #8
  br i1 %17, label %90, label %18

; <label>:18:                                     ; preds = %3
  %19 = call i32 @ftp_response(i32 %0, i8** %4)
  %20 = icmp ne i32 %19, 7
  br i1 %20, label %90, label %21

; <label>:21:                                     ; preds = %18
  %22 = load i8*, i8** %4, align 8
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp ne i32 %24, 50
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %21
  %27 = load i8*, i8** %4, align 8
  call void @free(i8* %27) #8
  store i8* null, i8** %4, align 8
  br label %90

; <label>:28:                                     ; preds = %21
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %30 = load i8, i8* %29, align 1
  %31 = trunc i8 %30 to i1
  br i1 %31, label %32, label %35

; <label>:32:                                     ; preds = %28
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr [16 x i8], [16 x i8]* @.str.22.213, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %34, i8* %33)
  br label %35

; <label>:35:                                     ; preds = %28, %32
  %36 = load i8*, i8** %4, align 8
  %37 = call i8* @strchr(i8* %36, i32 40) #14, !track !283
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %41

; <label>:39:                                     ; preds = %35
  %40 = load i8*, i8** %4, align 8
  call void @free(i8* %40) #8
  store i8* null, i8** %4, align 8
  br label %90

; <label>:41:                                     ; preds = %35
  %42 = getelementptr inbounds i8, i8* %37, i64 1
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  %44 = load i8, i8* %42, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp slt i32 %45, 33
  %47 = sext i8 %44 to i32
  %48 = icmp sgt i32 %47, 126
  %or.cond = or i1 %46, %48
  br i1 %or.cond, label %49, label %.preheader2

.preheader2:                                      ; preds = %41
  br label %51

; <label>:49:                                     ; preds = %41
  %50 = load i8*, i8** %4, align 8
  call void @free(i8* %50) #8
  store i8* null, i8** %4, align 8
  br label %90

; <label>:51:                                     ; preds = %.preheader2, %59
  %.027 = phi i32 [ %60, %59 ], [ 0, %.preheader2 ]
  %.036 = phi i8* [ %52, %59 ], [ %43, %.preheader2 ]
  call void @unroll_loop(i32 107)
  %52 = getelementptr inbounds i8, i8* %.036, i32 1
  %53 = load i8, i8* %.036, align 1
  %54 = sext i8 %53 to i32
  %55 = sext i8 %44 to i32
  %56 = icmp ne i32 %54, %55
  br i1 %56, label %57, label %59

; <label>:57:                                     ; preds = %51
  %58 = load i8*, i8** %4, align 8
  call void @free(i8* %58) #8
  store i8* null, i8** %4, align 8
  br label %90

; <label>:59:                                     ; preds = %51
  %60 = add nuw nsw i32 %.027, 1
  %61 = icmp ult i32 %60, 2
  br i1 %61, label %51, label %.preheader

.preheader:                                       ; preds = %59
  %.14.ph = phi i8* [ %52, %59 ]
  %.1.ph = phi i32 [ 0, %59 ]
  %.01.ph = phi i32 [ 0, %59 ]
  call void @unroll_loop(i32 108)
  br label %62

; <label>:62:                                     ; preds = %.preheader, %66
  %.016 = phi i32 [ %.01.ph, %.preheader ], [ %71, %66 ]
  %.15 = phi i32 [ %.1.ph, %.preheader ], [ %72, %66 ]
  %.143 = phi i8* [ %.14.ph, %.preheader ], [ %73, %66 ]
  %63 = load i8, i8* %.143, align 1
  %64 = sext i8 %63 to i32
  %65 = call zeroext i1 @c_isdigit(i32 %64)
  br i1 %65, label %66, label %.critedge

; <label>:66:                                     ; preds = %62
  %67 = load i8, i8* %.143, align 1
  %68 = sext i8 %67 to i32
  %69 = sub nsw i32 %68, 48
  %70 = mul nsw i32 10, %.016
  %71 = add nsw i32 %69, %70
  %72 = add nuw nsw i32 %.15, 1
  %73 = getelementptr inbounds i8, i8* %.143, i32 1
  call void @unroll_loop(i32 108)
  %74 = icmp ult i32 %72, 5
  br i1 %74, label %62, label %.critedge

.critedge:                                        ; preds = %66, %62
  %.14.lcssa = phi i8* [ %.143, %62 ], [ %73, %66 ]
  %.01.lcssa = phi i32 [ %.016, %62 ], [ %71, %66 ]
  %75 = getelementptr inbounds i8, i8* %.14.lcssa, i32 1
  %76 = load i8, i8* %.14.lcssa, align 1
  %77 = sext i8 %76 to i32
  %78 = sext i8 %44 to i32
  %79 = icmp ne i32 %77, %78
  br i1 %79, label %80, label %82

; <label>:80:                                     ; preds = %.critedge
  %81 = load i8*, i8** %4, align 8
  call void @free(i8* %81) #8
  store i8* null, i8** %4, align 8
  br label %90

; <label>:82:                                     ; preds = %.critedge
  %83 = load i8, i8* %75, align 1
  %84 = sext i8 %83 to i32
  %85 = icmp ne i32 %84, 41
  br i1 %85, label %86, label %88

; <label>:86:                                     ; preds = %82
  %87 = load i8*, i8** %4, align 8
  call void @free(i8* %87) #8
  store i8* null, i8** %4, align 8
  br label %90

; <label>:88:                                     ; preds = %82
  store i32 %.01.lcssa, i32* %2, align 4
  %89 = load i8*, i8** %4, align 8
  call void @free(i8* %89) #8
  store i8* null, i8** %4, align 8
  br label %90

; <label>:90:                                     ; preds = %3, %18, %88, %86, %80, %57, %49, %39, %26
  %.0 = phi i32 [ 29, %26 ], [ 28, %39 ], [ 28, %49 ], [ 28, %57 ], [ 28, %80 ], [ 28, %86 ], [ 7, %88 ], [ %19, %18 ], [ 44, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_type(i32, i32) #0 {
  %3 = alloca i8*, align 8, !track !284
  %4 = alloca [2 x i8], align 1, !track !285
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  store i8 %5, i8* %6, align 1
  %7 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i32 0, i32 0
  %9 = getelementptr [5 x i8], [5 x i8]* @.str.23.216, i32 0, i32 0
  %10 = call i8* @ftp_request(i8* %9, i8* %8)
  %11 = call i64 @strlen(i8* %10) #14
  %12 = trunc i64 %11 to i32
  %13 = call i32 @fd_write(i32 %0, i8* %10, i32 %12, double -1.000000e+00)
  %14 = icmp slt i32 %13, 0
  call void @free(i8* %10) #8
  br i1 %14, label %24, label %15

; <label>:15:                                     ; preds = %2
  %16 = call i32 @ftp_response(i32 %0, i8** %3)
  %17 = icmp ne i32 %16, 7
  br i1 %17, label %24, label %18

; <label>:18:                                     ; preds = %15
  %19 = load i8*, i8** %3, align 8
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 50
  %23 = load i8*, i8** %3, align 8
  call void @free(i8* %23) #8
  store i8* null, i8** %3, align 8
  %. = select i1 %22, i32 13, i32 7
  br label %24

; <label>:24:                                     ; preds = %18, %2, %15
  %.0 = phi i32 [ %16, %15 ], [ 44, %2 ], [ %., %18 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_cwd(i32, i8*) #0 {
  %3 = alloca i8*, align 8, !track !286
  %4 = getelementptr [4 x i8], [4 x i8]* @.str.24.219, i32 0, i32 0
  %5 = call i8* @ftp_request(i8* %4, i8* %1)
  %6 = call i64 @strlen(i8* %5) #14
  %7 = trunc i64 %6 to i32
  %8 = call i32 @fd_write(i32 %0, i8* %5, i32 %7, double -1.000000e+00)
  %9 = icmp slt i32 %8, 0
  call void @free(i8* %5) #8
  br i1 %9, label %25, label %10

; <label>:10:                                     ; preds = %2
  %11 = call i32 @ftp_response(i32 %0, i8** %3)
  %12 = icmp ne i32 %11, 7
  br i1 %12, label %25, label %13

; <label>:13:                                     ; preds = %10
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 53
  %18 = load i8*, i8** %3, align 8
  br i1 %17, label %19, label %20

; <label>:19:                                     ; preds = %13
  call void @free(i8* %18) #8
  store i8* null, i8** %3, align 8
  br label %25

; <label>:20:                                     ; preds = %13
  %21 = load i8, i8* %18, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp ne i32 %22, 50
  %24 = load i8*, i8** %3, align 8
  call void @free(i8* %24) #8
  store i8* null, i8** %3, align 8
  %. = select i1 %23, i32 14, i32 7
  br label %25

; <label>:25:                                     ; preds = %20, %2, %10, %19
  %.0 = phi i32 [ 12, %19 ], [ %11, %10 ], [ 44, %2 ], [ %., %20 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_rest(i32, i64) #0 {
  %3 = alloca i8*, align 8, !track !287
  %4 = call i8* @number_to_static_string(i64 %1)
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.25.222, i32 0, i32 0
  %6 = call i8* @ftp_request(i8* %5, i8* %4)
  %7 = call i64 @strlen(i8* %6) #14
  %8 = trunc i64 %7 to i32
  %9 = call i32 @fd_write(i32 %0, i8* %6, i32 %8, double -1.000000e+00)
  %10 = icmp slt i32 %9, 0
  call void @free(i8* %6) #8
  br i1 %10, label %20, label %11

; <label>:11:                                     ; preds = %2
  %12 = call i32 @ftp_response(i32 %0, i8** %3)
  %13 = icmp ne i32 %12, 7
  br i1 %13, label %20, label %14

; <label>:14:                                     ; preds = %11
  %15 = load i8*, i8** %3, align 8
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp ne i32 %17, 51
  %19 = load i8*, i8** %3, align 8
  call void @free(i8* %19) #8
  store i8* null, i8** %3, align 8
  %. = select i1 %18, i32 17, i32 7
  br label %20

; <label>:20:                                     ; preds = %14, %2, %11
  %.0 = phi i32 [ %12, %11 ], [ 44, %2 ], [ %., %14 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_retr(i32, i8*) #0 {
  %3 = alloca i8*, align 8, !track !288
  %4 = getelementptr [5 x i8], [5 x i8]* @.str.26.225, i32 0, i32 0
  %5 = call i8* @ftp_request(i8* %4, i8* %1)
  %6 = call i64 @strlen(i8* %5) #14
  %7 = trunc i64 %6 to i32
  %8 = call i32 @fd_write(i32 %0, i8* %5, i32 %7, double -1.000000e+00)
  %9 = icmp slt i32 %8, 0
  call void @free(i8* %5) #8
  br i1 %9, label %25, label %10

; <label>:10:                                     ; preds = %2
  %11 = call i32 @ftp_response(i32 %0, i8** %3)
  %12 = icmp ne i32 %11, 7
  br i1 %12, label %25, label %13

; <label>:13:                                     ; preds = %10
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 53
  %18 = load i8*, i8** %3, align 8
  br i1 %17, label %19, label %20

; <label>:19:                                     ; preds = %13
  call void @free(i8* %18) #8
  store i8* null, i8** %3, align 8
  br label %25

; <label>:20:                                     ; preds = %13
  %21 = load i8, i8* %18, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp ne i32 %22, 49
  %24 = load i8*, i8** %3, align 8
  call void @free(i8* %24) #8
  store i8* null, i8** %3, align 8
  %. = select i1 %23, i32 14, i32 7
  br label %25

; <label>:25:                                     ; preds = %20, %2, %10, %19
  %.0 = phi i32 [ 12, %19 ], [ %11, %10 ], [ 44, %2 ], [ %., %20 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_list(i32, i8*, i1 zeroext, i1 zeroext, i8*) #0 {
  %6 = alloca i8*, align 8, !track !289
  %7 = zext i1 %2 to i8
  %8 = zext i1 %3 to i8
  store i8 0, i8* %4, align 1
  %9 = trunc i8 %7 to i1
  br i1 %9, label %10, label %16

; <label>:10:                                     ; preds = %5
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %12 = load i8, i8* %11, align 1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %10
  %15 = getelementptr [21 x i8], [21 x i8]* @.str.29.228, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %15)
  br label %16

; <label>:16:                                     ; preds = %14, %10, %5
  %.01 = phi i64 [ 0, %5 ], [ 1, %10 ], [ 1, %14 ]
  br label %17

; <label>:17:                                     ; preds = %55, %16
  %.02 = phi i8 [ 0, %16 ], [ %.3, %55 ]
  %.1 = phi i64 [ %.01, %16 ], [ %.2, %55 ]
  call void @unroll_loop(i32 109)
  %18 = getelementptr inbounds [2 x i8*], [2 x i8*]* @ftp_list.list_commands, i64 0, i64 %.1
  %19 = load i8*, i8** %18, align 8
  %20 = call i8* @ftp_request(i8* %19, i8* %1)
  %21 = call i64 @strlen(i8* %20) #14
  %22 = trunc i64 %21 to i32
  %23 = call i32 @fd_write(i32 %0, i8* %20, i32 %22, double -1.000000e+00)
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %17
  %.lcssa = phi i8* [ %20, %17 ]
  call void @free(i8* %.lcssa) #8
  br label %.critedge

; <label>:26:                                     ; preds = %17
  call void @free(i8* %20) #8
  %27 = call i32 @ftp_response(i32 %0, i8** %6)
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %44

; <label>:29:                                     ; preds = %26
  %30 = load i8*, i8** %6, align 8
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 53
  br i1 %33, label %42, label %34

; <label>:34:                                     ; preds = %29
  %35 = load i8*, i8** %6, align 8
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 49
  br i1 %38, label %39, label %42

; <label>:39:                                     ; preds = %34
  %40 = icmp eq i64 %.1, 0
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %4, align 1
  br label %42

; <label>:42:                                     ; preds = %29, %34, %39
  %.16 = phi i32 [ 12, %29 ], [ 7, %39 ], [ 14, %34 ]
  %.24 = phi i8 [ %.02, %29 ], [ 1, %39 ], [ %.02, %34 ]
  %43 = load i8*, i8** %6, align 8
  call void @free(i8* %43) #8
  store i8* null, i8** %6, align 8
  br label %44

; <label>:44:                                     ; preds = %42, %26
  %.27 = phi i32 [ %.16, %42 ], [ %27, %26 ]
  %.3 = phi i8 [ %.24, %42 ], [ %.02, %26 ]
  %45 = add i64 %.1, 1
  %46 = trunc i8 %8 to i1
  %47 = icmp eq i64 %45, 1
  %or.cond = and i1 %46, %47
  br i1 %or.cond, label %48, label %55

; <label>:48:                                     ; preds = %44
  %49 = add i64 %45, 1
  %50 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %51 = load i8, i8* %50, align 1
  %52 = trunc i8 %51 to i1
  br i1 %52, label %53, label %55

; <label>:53:                                     ; preds = %48
  %54 = getelementptr [18 x i8], [18 x i8]* @.str.30.229, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %54)
  br label %55

; <label>:55:                                     ; preds = %44, %48, %53
  %.2 = phi i64 [ %45, %44 ], [ %49, %48 ], [ %49, %53 ]
  %56 = icmp ult i64 %.2, 2
  %57 = trunc i8 %.3 to i1
  %58 = xor i1 %57, true
  %or.cond2 = and i1 %56, %58
  br i1 %or.cond2, label %17, label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %55
  %.0.ph = phi i32 [ %.27, %55 ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %25
  %.0 = phi i32 [ 44, %25 ], [ %.0.ph, %.critedge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_syst(i32, i32*, i32*) #0 {
  %4 = alloca i8*, align 8, !track !290
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.31.234, i32 0, i32 0
  %6 = call i8* @ftp_request(i8* %5, i8* null)
  %7 = call i64 @strlen(i8* %6) #14
  %8 = trunc i64 %7 to i32
  %9 = call i32 @fd_write(i32 %0, i8* %6, i32 %8, double -1.000000e+00)
  %10 = icmp slt i32 %9, 0
  call void @free(i8* %6) #8
  br i1 %10, label %71, label %11

; <label>:11:                                     ; preds = %3
  %12 = call i32 @ftp_response(i32 %0, i8** %4)
  %13 = icmp ne i32 %12, 7
  br i1 %13, label %71, label %14

; <label>:14:                                     ; preds = %11
  %15 = load i8*, i8** %4, align 8
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 53
  %19 = load i8*, i8** %4, align 8
  br i1 %18, label %20, label %21

; <label>:20:                                     ; preds = %14
  call void @free(i8* %19) #8
  store i8* null, i8** %4, align 8
  br label %71

; <label>:21:                                     ; preds = %14
  %22 = call noalias i8* @strdup(i8* %19) #8, !track !291
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr [2 x i8], [2 x i8]* @.str.32.170, i32 0, i32 0
  %25 = call i8* @strtok(i8* %23, i8* %24) #8, !track !292
  %26 = getelementptr [2 x i8], [2 x i8]* @.str.32.170, i32 0, i32 0
  %27 = call i8* @strtok(i8* null, i8* %26) #8, !track !293
  store i32 2, i32* %2, align 4
  %28 = icmp eq i8* %27, null
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %21
  store i32 5, i32* %1, align 4
  br label %69

; <label>:30:                                     ; preds = %21
  %31 = getelementptr [4 x i8], [4 x i8]* @.str.33.235, i32 0, i32 0
  %32 = call i32 @c_strcasecmp(i8* %27, i8* %31) #14
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %35, label %34

; <label>:34:                                     ; preds = %30
  store i32 1, i32* %1, align 4
  br label %69

; <label>:35:                                     ; preds = %30
  %36 = getelementptr [5 x i8], [5 x i8]* @.str.34.236, i32 0, i32 0
  %37 = call i32 @c_strcasecmp(i8* %27, i8* %36) #14
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %49, label %39

; <label>:39:                                     ; preds = %35
  store i32 0, i32* %1, align 4
  %40 = getelementptr [18 x i8], [18 x i8]* @.str.35.237, i32 0, i32 0
  %41 = call i32 @c_strncasecmp(i8* %22, i8* %40, i64 17) #14
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %44, label %43

; <label>:43:                                     ; preds = %39
  store i32 0, i32* %2, align 4
  br label %69

; <label>:44:                                     ; preds = %39
  %45 = getelementptr [42 x i8], [42 x i8]* @.str.36.238, i32 0, i32 0
  %46 = call i32 @c_strncasecmp(i8* %22, i8* %45, i64 41) #14
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %69, label %48

; <label>:48:                                     ; preds = %44
  store i32 1, i32* %2, align 4
  br label %69

; <label>:49:                                     ; preds = %35
  %50 = getelementptr [11 x i8], [11 x i8]* @.str.37.239, i32 0, i32 0
  %51 = call i32 @c_strcasecmp(i8* %27, i8* %50) #14
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %57

; <label>:53:                                     ; preds = %49
  %54 = getelementptr [12 x i8], [12 x i8]* @.str.38.240, i32 0, i32 0
  %55 = call i32 @c_strcasecmp(i8* %27, i8* %54) #14
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %58, label %57

; <label>:57:                                     ; preds = %53, %49
  store i32 2, i32* %1, align 4
  br label %69

; <label>:58:                                     ; preds = %53
  %59 = getelementptr [6 x i8], [6 x i8]* @.str.39.241, i32 0, i32 0
  %60 = call i32 @c_strcasecmp(i8* %27, i8* %59) #14
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %63, label %62

; <label>:62:                                     ; preds = %58
  store i32 3, i32* %1, align 4
  br label %69

; <label>:63:                                     ; preds = %58
  %64 = getelementptr [7 x i8], [7 x i8]* @.str.40.242, i32 0, i32 0
  %65 = call i32 @c_strcasecmp(i8* %27, i8* %64) #14
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %68, label %67

; <label>:67:                                     ; preds = %63
  store i32 4, i32* %1, align 4
  br label %69

; <label>:68:                                     ; preds = %63
  store i32 5, i32* %1, align 4
  br label %69

; <label>:69:                                     ; preds = %29, %44, %48, %43, %62, %68, %67, %57, %34
  call void @free(i8* %22) #8
  %70 = load i8*, i8** %4, align 8
  call void @free(i8* %70) #8
  store i8* null, i8** %4, align 8
  br label %71

; <label>:71:                                     ; preds = %3, %11, %69, %20
  %.0 = phi i32 [ 15, %20 ], [ 7, %69 ], [ %12, %11 ], [ 44, %3 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i8* @strtok(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_pwd(i32, i8**) #0 {
  %3 = alloca i8*, align 8, !track !294
  %4 = getelementptr [4 x i8], [4 x i8]* @.str.41.245, i32 0, i32 0
  %5 = call i8* @ftp_request(i8* %4, i8* null)
  %6 = call i64 @strlen(i8* %5) #14
  %7 = trunc i64 %6 to i32
  %8 = call i32 @fd_write(i32 %0, i8* %5, i32 %7, double -1.000000e+00)
  %9 = icmp slt i32 %8, 0
  call void @free(i8* %5) #8
  br i1 %9, label %31, label %10

; <label>:10:                                     ; preds = %2
  %11 = call i32 @ftp_response(i32 %0, i8** %3)
  %12 = icmp ne i32 %11, 7
  br i1 %12, label %31, label %13

; <label>:13:                                     ; preds = %10
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 53
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %20, %13
  %19 = load i8*, i8** %3, align 8
  call void @free(i8* %19) #8
  store i8* null, i8** %3, align 8
  br label %31

; <label>:20:                                     ; preds = %13
  %21 = load i8*, i8** %3, align 8
  %22 = getelementptr [2 x i8], [2 x i8]* @.str.42.246, i32 0, i32 0
  %23 = call i8* @strtok(i8* %21, i8* %22) #8, !track !295
  %24 = getelementptr [2 x i8], [2 x i8]* @.str.42.246, i32 0, i32 0
  %25 = call i8* @strtok(i8* null, i8* %24) #8, !track !296
  %26 = icmp ne i8* %25, null
  br i1 %26, label %27, label %18

; <label>:27:                                     ; preds = %20
  %28 = load i8*, i8** %1, align 8
  call void @free(i8* %28) #8
  store i8* null, i8** %1, align 8
  %29 = call noalias i8* @xstrdup(i8* %25)
  store i8* %29, i8** %1, align 8
  %30 = load i8*, i8** %3, align 8
  call void @free(i8* %30) #8
  store i8* null, i8** %3, align 8
  br label %31

; <label>:31:                                     ; preds = %2, %10, %27, %18
  %.0 = phi i32 [ 15, %18 ], [ 7, %27 ], [ %11, %10 ], [ 44, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_size(i32, i8*, i64*) #0 {
  %4 = alloca i8*, align 8, !track !297
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.43.249, i32 0, i32 0
  %6 = call i8* @ftp_request(i8* %5, i8* %1)
  %7 = call i64 @strlen(i8* %6) #14
  %8 = trunc i64 %7 to i32
  %9 = call i32 @fd_write(i32 %0, i8* %6, i32 %8, double -1.000000e+00)
  %10 = icmp slt i32 %9, 0
  call void @free(i8* %6) #8
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %3
  store i64 0, i64* %2, align 8
  br label %33

; <label>:12:                                     ; preds = %3
  %13 = call i32 @ftp_response(i32 %0, i8** %4)
  %14 = icmp ne i32 %13, 7
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %12
  store i64 0, i64* %2, align 8
  br label %33

; <label>:16:                                     ; preds = %12
  %17 = load i8*, i8** %4, align 8
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp eq i32 %19, 53
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %16
  %22 = load i8*, i8** %4, align 8
  call void @free(i8* %22) #8
  store i8* null, i8** %4, align 8
  store i64 0, i64* %2, align 8
  br label %33

; <label>:23:                                     ; preds = %16
  %24 = call i32* @__errno_location() #15
  store i32 0, i32* %24, align 4
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 4
  %27 = call i64 @strtol(i8* %26, i8** null, i32 10) #8, !track !298
  store i64 %27, i64* %2, align 8
  %28 = call i32* @__errno_location() #15
  %29 = load i32, i32* %28, align 4
  %30 = icmp ne i32 %29, 0
  %31 = load i8*, i8** %4, align 8
  call void @free(i8* %31) #8
  store i8* null, i8** %4, align 8
  br i1 %30, label %32, label %33

; <label>:32:                                     ; preds = %23
  store i64 0, i64* %2, align 8
  br label %33

; <label>:33:                                     ; preds = %23, %32, %21, %15, %11
  %.0 = phi i32 [ 44, %11 ], [ %13, %15 ], [ 7, %21 ], [ 7, %32 ], [ 7, %23 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local signext i8 @ftp_process_type(i8*) #0 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %18

; <label>:3:                                      ; preds = %1
  %4 = getelementptr [6 x i8], [6 x i8]* @.str.44.252, i32 0, i32 0
  %5 = call i32 @strncasecmp(i8* %0, i8* %4, i64 5) #14
  %6 = icmp eq i32 0, %5
  br i1 %6, label %7, label %18

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds i8, i8* %0, i64 5
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %18

; <label>:12:                                     ; preds = %7
  %13 = getelementptr inbounds i8, i8* %0, i64 5
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = call i32 @c_toupper(i32 %15)
  %17 = trunc i32 %16 to i8
  br label %18

; <label>:18:                                     ; preds = %1, %3, %7, %12
  %.0 = phi i8 [ %17, %12 ], [ 73, %7 ], [ 73, %3 ], [ 73, %1 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.fileinfo* @ftp_parse_ls(i8*, i32) #7 {
  switch i32 %1, label %27 [
    i32 0, label %3
    i32 2, label %5
    i32 1, label %23
    i32 3, label %25
  ]

; <label>:3:                                      ; preds = %2
  %4 = call %struct.fileinfo* @ftp_parse_unix_ls(i8* %0, i32 0)
  br label %31

; <label>:5:                                      ; preds = %2
  %6 = getelementptr [3 x i8], [3 x i8]* @.str.255, i32 0, i32 0
  %7 = call %struct._IO_FILE* @fopen(i8* %0, i8* %6), !track !299
  %8 = icmp ne %struct._IO_FILE* %7, null
  br i1 %8, label %14, label %9

; <label>:9:                                      ; preds = %5
  %10 = call i32* @__errno_location() #15
  %11 = load i32, i32* %10, align 4
  %12 = call i8* @strerror(i32 %11) #8
  %13 = getelementptr [8 x i8], [8 x i8]* @.str.1.256, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %13, i8* %0, i8* %12)
  br label %31

; <label>:14:                                     ; preds = %5
  %15 = call i32 @fgetc(%struct._IO_FILE* %7)
  %16 = call i32 @fclose(%struct._IO_FILE* %7)
  %17 = icmp sge i32 %15, 48
  %18 = icmp sle i32 %15, 57
  %or.cond = and i1 %17, %18
  br i1 %or.cond, label %19, label %21

; <label>:19:                                     ; preds = %14
  %20 = call %struct.fileinfo* @ftp_parse_winnt_ls(i8* %0)
  br label %31

; <label>:21:                                     ; preds = %14
  %22 = call %struct.fileinfo* @ftp_parse_unix_ls(i8* %0, i32 1)
  br label %31

; <label>:23:                                     ; preds = %2
  %24 = call %struct.fileinfo* @ftp_parse_vms_ls(i8* %0)
  br label %31

; <label>:25:                                     ; preds = %2
  %26 = call %struct.fileinfo* @ftp_parse_unix_ls(i8* %0, i32 1)
  br label %31

; <label>:27:                                     ; preds = %2
  %28 = getelementptr [55 x i8], [55 x i8]* @.str.2.257, i32 0, i32 0
  %29 = call i8* @gettext(i8* %28) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %29)
  %30 = call %struct.fileinfo* @ftp_parse_unix_ls(i8* %0, i32 0)
  br label %31

; <label>:31:                                     ; preds = %27, %25, %23, %21, %19, %9, %3
  %.0 = phi %struct.fileinfo* [ %30, %27 ], [ %26, %25 ], [ %24, %23 ], [ %20, %19 ], [ %22, %21 ], [ null, %9 ], [ %4, %3 ]
  ret %struct.fileinfo* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.fileinfo* @ftp_parse_unix_ls(i8*, i32) #7 {
  %3 = alloca %struct.tm, align 8, !track !300
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8, !track !301
  %6 = alloca i8*, align 8, !track !302
  %7 = alloca %struct.fileinfo, align 8, !track !303
  store i64 0, i64* %5, align 8
  store i8* null, i8** %6, align 8
  %8 = getelementptr [3 x i8], [3 x i8]* @.str.255, i32 0, i32 0
  %9 = call %struct._IO_FILE* @fopen(i8* %0, i8* %8), !track !304
  %10 = icmp ne %struct._IO_FILE* %9, null
  br i1 %10, label %16, label %11

; <label>:11:                                     ; preds = %2
  %12 = call i32* @__errno_location() #15
  %13 = load i32, i32* %12, align 4
  %14 = call i8* @strerror(i32 %13) #8
  %15 = getelementptr [8 x i8], [8 x i8]* @.str.1.256, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %15, i8* %0, i8* %14)
  br label %477

; <label>:16:                                     ; preds = %2
  %17 = call i64 @getline(i8** %6, i64* %5, %struct._IO_FILE* %9)
  %18 = trunc i64 %17 to i32
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %.lr.ph114.preheader, label %.outer._crit_edge

.lr.ph114.preheader:                              ; preds = %16
  br label %.lr.ph114

.lr.ph114:                                        ; preds = %.lr.ph114.preheader, %.outer
  %20 = phi i32 [ %473, %.outer ], [ %18, %.lr.ph114.preheader ]
  %.01.ph119 = phi %struct.fileinfo* [ %.1, %.outer ], [ null, %.lr.ph114.preheader ]
  %.02.ph118 = phi %struct.fileinfo* [ %.13, %.outer ], [ null, %.lr.ph114.preheader ]
  call void @unroll_loop(i32 90)
  br label %21

; <label>:21:                                     ; preds = %.lr.ph114, %.backedge
  %22 = phi i32 [ %20, %.lr.ph114 ], [ %30, %.backedge ]
  call void @unroll_loop(i32 111)
  %23 = load i8*, i8** %6, align 8
  %24 = call i32 @clean_line(i8* %23, i32 %22)
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr [6 x i8], [6 x i8]* @.str.41.291, i32 0, i32 0
  %27 = call i32 @c_strncasecmp(i8* %25, i8* %26, i64 5) #14
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %32, label %.backedge

.backedge:                                        ; preds = %32, %21, %410
  %29 = call i64 @getline(i8** %6, i64* %5, %struct._IO_FILE* %9)
  %30 = trunc i64 %29 to i32
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %21, label %.outer._crit_edge.loopexit

; <label>:32:                                     ; preds = %21
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %35 = call i8* @strtok(i8* %33, i8* %34) #8, !track !305
  %36 = icmp ne i8* %35, null
  br i1 %36, label %37, label %.backedge

; <label>:37:                                     ; preds = %32
  %38 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  store i8* null, i8** %38, align 8
  %39 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 6
  store i8* null, i8** %39, align 8
  %40 = load i8, i8* %35, align 1
  %41 = sext i8 %40 to i32
  switch i32 %41, label %63 [
    i32 45, label %42
    i32 100, label %49
    i32 108, label %56
  ]

; <label>:42:                                     ; preds = %37
  %43 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  store i32 0, i32* %43, align 8
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %45 = load i8, i8* %44, align 1
  %46 = trunc i8 %45 to i1
  br i1 %46, label %47, label %70

; <label>:47:                                     ; preds = %42
  %48 = getelementptr [12 x i8], [12 x i8]* @.str.43.292, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %48)
  br label %70

; <label>:49:                                     ; preds = %37
  %50 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  store i32 1, i32* %50, align 8
  %51 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %52 = load i8, i8* %51, align 1
  %53 = trunc i8 %52 to i1
  br i1 %53, label %54, label %70

; <label>:54:                                     ; preds = %49
  %55 = getelementptr [12 x i8], [12 x i8]* @.str.44.293, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %55)
  br label %70

; <label>:56:                                     ; preds = %37
  %57 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  store i32 2, i32* %57, align 8
  %58 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %59 = load i8, i8* %58, align 1
  %60 = trunc i8 %59 to i1
  br i1 %60, label %61, label %70

; <label>:61:                                     ; preds = %56
  %62 = getelementptr [10 x i8], [10 x i8]* @.str.45.294, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %62)
  br label %70

; <label>:63:                                     ; preds = %37
  %64 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  store i32 3, i32* %64, align 8
  %65 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %66 = load i8, i8* %65, align 1
  %67 = trunc i8 %66 to i1
  br i1 %67, label %68, label %70

; <label>:68:                                     ; preds = %63
  %69 = getelementptr [10 x i8], [10 x i8]* @.str.46.295, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %69)
  br label %70

; <label>:70:                                     ; preds = %68, %63, %61, %56, %54, %49, %47, %42
  %71 = icmp ne i32 %1, 0
  br i1 %71, label %72, label %89

; <label>:72:                                     ; preds = %70
  %73 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  %74 = load i32, i32* %73, align 8
  switch i32 %74, label %79 [
    i32 0, label %75
    i32 1, label %77
  ]

; <label>:75:                                     ; preds = %72
  %76 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 5
  store i32 420, i32* %76, align 4
  br label %81

; <label>:77:                                     ; preds = %72
  %78 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 5
  store i32 493, i32* %78, align 4
  br label %81

; <label>:79:                                     ; preds = %72
  %80 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 5
  store i32 420, i32* %80, align 4
  br label %81

; <label>:81:                                     ; preds = %75, %77, %79
  %82 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %83 = load i8, i8* %82, align 1
  %84 = trunc i8 %83 to i1
  br i1 %84, label %85, label %100

; <label>:85:                                     ; preds = %81
  %86 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 5
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr [21 x i8], [21 x i8]* @.str.47.296, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %88, i32 %87)
  br label %100

; <label>:89:                                     ; preds = %70
  %90 = getelementptr inbounds i8, i8* %35, i64 1
  %91 = call i32 @symperms(i8* %90)
  %92 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 5
  store i32 %91, i32* %92, align 4
  %93 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %94 = load i8, i8* %93, align 1
  %95 = trunc i8 %94 to i1
  br i1 %95, label %96, label %100

; <label>:96:                                     ; preds = %89
  %97 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 5
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr [12 x i8], [12 x i8]* @.str.48.297, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %99, i32 %98)
  br label %100

; <label>:100:                                    ; preds = %96, %89, %85, %81
  %101 = load i8*, i8** %6, align 8
  %102 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %103 = call i8* @strtok(i8* null, i8* %102) #8, !track !306
  %104 = icmp ne i8* %103, null
  br i1 %104, label %.lr.ph104.preheader, label %.loopexit70

.lr.ph104.preheader:                              ; preds = %100
  br label %.lr.ph104

.lr.ph104:                                        ; preds = %.lr.ph104.preheader, %372
  %105 = phi i8* [ %374, %372 ], [ %103, %.lr.ph104.preheader ]
  %.04102 = phi i32 [ %.2, %372 ], [ -1, %.lr.ph104.preheader ]
  %.011101 = phi i32 [ %.5, %372 ], [ 0, %.lr.ph104.preheader ]
  %.014100 = phi i32 [ %.216, %372 ], [ 0, %.lr.ph104.preheader ]
  %.01799 = phi i32 [ %.320, %372 ], [ 0, %.lr.ph104.preheader ]
  %.02198 = phi i32 [ %.425, %372 ], [ 0, %.lr.ph104.preheader ]
  %.02697 = phi i32 [ %.531, %372 ], [ 0, %.lr.ph104.preheader ]
  %.03296 = phi i32 [ %.6, %372 ], [ 0, %.lr.ph104.preheader ]
  %.03895 = phi i32 [ %.442, %372 ], [ 1, %.lr.ph104.preheader ]
  %.04394 = phi i8* [ %.8, %372 ], [ %101, %.lr.ph104.preheader ]
  call void @unroll_loop(i32 112)
  %106 = add nsw i32 %.04102, -1
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %.preheader, label %153

.preheader:                                       ; preds = %.lr.ph104
  br label %108

; <label>:108:                                    ; preds = %.preheader, %115
  %indvars.iv = phi i64 [ %indvars.iv.next, %115 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 113)
  %109 = getelementptr inbounds [12 x i8*], [12 x i8*]* @ftp_parse_unix_ls.months, i64 0, i64 %indvars.iv
  %110 = load i8*, i8** %109, align 8
  %111 = call i32 @c_strcasecmp(i8* %105, i8* %110) #14
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %115, label %113

; <label>:113:                                    ; preds = %108
  %.06.lcssa50.wide = phi i64 [ %indvars.iv, %108 ]
  %114 = trunc i64 %.06.lcssa50.wide to i32
  br label %118

; <label>:115:                                    ; preds = %108
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %116 = icmp ult i64 %indvars.iv.next, 12
  br i1 %116, label %108, label %.loopexit

.loopexit:                                        ; preds = %115
  %.06.lcssa.ph.wide = phi i64 [ %indvars.iv.next, %115 ]
  %117 = trunc i64 %.06.lcssa.ph.wide to i32
  br label %118

; <label>:118:                                    ; preds = %.loopexit, %113
  %.06.lcssa = phi i32 [ %114, %113 ], [ %117, %.loopexit ]
  %119 = icmp ne i32 %.06.lcssa, 12
  br i1 %119, label %120, label %372

; <label>:120:                                    ; preds = %118
  %121 = load i8*, i8** %6, align 8
  %122 = icmp eq i8* %.04394, %121
  br i1 %122, label %.loopexit70.loopexit, label %123

; <label>:123:                                    ; preds = %120
  %124 = call i32* @__errno_location() #15
  store i32 0, i32* %124, align 4
  %125 = call i64 @strtol(i8* %.04394, i8** null, i32 10) #8, !track !307
  %126 = icmp eq i64 %125, 9223372036854775807
  br i1 %126, label %127, label %133

; <label>:127:                                    ; preds = %123
  %128 = call i32* @__errno_location() #15
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 34
  br i1 %130, label %131, label %133

; <label>:131:                                    ; preds = %127
  %132 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 2
  store i64 0, i64* %132, align 8
  br label %135

; <label>:133:                                    ; preds = %127, %123
  %134 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 2
  store i64 %125, i64* %134, align 8
  br label %135

; <label>:135:                                    ; preds = %131, %133
  %136 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %137 = load i8, i8* %136, align 1
  %138 = trunc i8 %137 to i1
  br i1 %138, label %139, label %144

; <label>:139:                                    ; preds = %135
  %140 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 2
  %141 = load i64, i64* %140, align 8
  %142 = call i8* @number_to_static_string(i64 %141)
  %143 = getelementptr [11 x i8], [11 x i8]* @.str.49.298, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %143, i8* %142)
  br label %144

; <label>:144:                                    ; preds = %139, %135
  %145 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %146 = load i8, i8* %145, align 1
  %147 = trunc i8 %146 to i1
  br i1 %147, label %148, label %372

; <label>:148:                                    ; preds = %144
  %149 = sext i32 %.06.lcssa to i64
  %150 = getelementptr inbounds [12 x i8*], [12 x i8*]* @ftp_parse_unix_ls.months, i64 0, i64 %149
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr [12 x i8], [12 x i8]* @.str.50.299, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %152, i8* %151)
  br label %372

; <label>:153:                                    ; preds = %.lr.ph104
  switch i32 %106, label %371 [
    i32 4, label %154
    i32 3, label %174
    i32 2, label %235
  ]

; <label>:154:                                    ; preds = %153
  %155 = getelementptr inbounds i8, i8* %105, i64 1
  %156 = load i8, i8* %155, align 1
  %157 = icmp ne i8 %156, 0
  %158 = load i8, i8* %105, align 1
  %159 = sext i8 %158 to i32
  %160 = sub nsw i32 %159, 48
  br i1 %157, label %161, label %168

; <label>:161:                                    ; preds = %154
  %162 = mul nsw i32 10, %160
  %163 = getelementptr inbounds i8, i8* %105, i64 1
  %164 = load i8, i8* %163, align 1
  %165 = sext i8 %164 to i32
  %166 = add nsw i32 %162, %165
  %167 = sub nsw i32 %166, 48
  br label %168

; <label>:168:                                    ; preds = %161, %154
  %.118 = phi i32 [ %167, %161 ], [ %160, %154 ]
  %169 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %170 = load i8, i8* %169, align 1
  %171 = trunc i8 %170 to i1
  br i1 %171, label %172, label %372

; <label>:172:                                    ; preds = %168
  %173 = getelementptr [10 x i8], [10 x i8]* @.str.51.300, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %173, i32 %.118)
  br label %372

; <label>:174:                                    ; preds = %153
  %175 = load i8, i8* %105, align 1
  %176 = sext i8 %175 to i32
  %177 = call zeroext i1 @c_isdigit(i32 %176)
  br i1 %177, label %178, label %._crit_edge90

; <label>:178:                                    ; preds = %174
  %179 = load i8, i8* %105, align 1
  %180 = sext i8 %179 to i32
  %181 = call zeroext i1 @c_isdigit(i32 %180)
  br i1 %181, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %178
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.11277 = phi i32 [ %186, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %.14476 = phi i8* [ %187, %.lr.ph ], [ %105, %.lr.ph.preheader ]
  call void @unroll_loop(i32 114)
  %182 = load i8, i8* %.14476, align 1
  %183 = sext i8 %182 to i32
  %184 = sub nsw i32 %183, 48
  %185 = mul nsw i32 10, %.11277
  %186 = add nsw i32 %184, %185
  %187 = getelementptr inbounds i8, i8* %.14476, i32 1
  %188 = load i8, i8* %187, align 1
  %189 = sext i8 %188 to i32
  %190 = call zeroext i1 @c_isdigit(i32 %189)
  br i1 %190, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.144.lcssa.ph = phi i8* [ %187, %.lr.ph ]
  %.112.lcssa.ph = phi i32 [ %186, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %178
  %.144.lcssa = phi i8* [ %105, %178 ], [ %.144.lcssa.ph, %._crit_edge.loopexit ]
  %.112.lcssa = phi i32 [ 0, %178 ], [ %.112.lcssa.ph, %._crit_edge.loopexit ]
  %191 = load i8, i8* %.144.lcssa, align 1
  %192 = sext i8 %191 to i32
  %193 = icmp eq i32 %192, 58
  br i1 %193, label %194, label %._crit_edge90

; <label>:194:                                    ; preds = %._crit_edge
  %195 = getelementptr inbounds i8, i8* %.144.lcssa, i32 1
  %196 = load i8, i8* %195, align 1
  %197 = sext i8 %196 to i32
  %198 = call zeroext i1 @c_isdigit(i32 %197)
  br i1 %198, label %.lr.ph82.preheader, label %._crit_edge83

.lr.ph82.preheader:                               ; preds = %194
  br label %.lr.ph82

.lr.ph82:                                         ; preds = %.lr.ph82.preheader, %.lr.ph82
  %.12780 = phi i32 [ %203, %.lr.ph82 ], [ 0, %.lr.ph82.preheader ]
  %.24579 = phi i8* [ %204, %.lr.ph82 ], [ %195, %.lr.ph82.preheader ]
  call void @unroll_loop(i32 115)
  %199 = load i8, i8* %.24579, align 1
  %200 = sext i8 %199 to i32
  %201 = sub nsw i32 %200, 48
  %202 = mul nsw i32 10, %.12780
  %203 = add nsw i32 %201, %202
  %204 = getelementptr inbounds i8, i8* %.24579, i32 1
  %205 = load i8, i8* %204, align 1
  %206 = sext i8 %205 to i32
  %207 = call zeroext i1 @c_isdigit(i32 %206)
  br i1 %207, label %.lr.ph82, label %._crit_edge83.loopexit

._crit_edge83.loopexit:                           ; preds = %.lr.ph82
  %.245.lcssa.ph = phi i8* [ %204, %.lr.ph82 ]
  %.127.lcssa.ph = phi i32 [ %203, %.lr.ph82 ]
  br label %._crit_edge83

._crit_edge83:                                    ; preds = %._crit_edge83.loopexit, %194
  %.245.lcssa = phi i8* [ %195, %194 ], [ %.245.lcssa.ph, %._crit_edge83.loopexit ]
  %.127.lcssa = phi i32 [ 0, %194 ], [ %.127.lcssa.ph, %._crit_edge83.loopexit ]
  %208 = load i8, i8* %.245.lcssa, align 1
  %209 = sext i8 %208 to i32
  %210 = icmp eq i32 %209, 58
  br i1 %210, label %211, label %._crit_edge90

; <label>:211:                                    ; preds = %._crit_edge83
  %212 = getelementptr inbounds i8, i8* %.245.lcssa, i32 1
  %213 = load i8, i8* %212, align 1
  %214 = sext i8 %213 to i32
  %215 = call zeroext i1 @c_isdigit(i32 %214)
  br i1 %215, label %.lr.ph89.preheader, label %._crit_edge90

.lr.ph89.preheader:                               ; preds = %211
  br label %.lr.ph89

.lr.ph89:                                         ; preds = %.lr.ph89.preheader, %.lr.ph89
  %.13387 = phi i32 [ %220, %.lr.ph89 ], [ 0, %.lr.ph89.preheader ]
  %.34686 = phi i8* [ %221, %.lr.ph89 ], [ %212, %.lr.ph89.preheader ]
  call void @unroll_loop(i32 116)
  %216 = load i8, i8* %.34686, align 1
  %217 = sext i8 %216 to i32
  %218 = sub nsw i32 %217, 48
  %219 = mul nsw i32 10, %.13387
  %220 = add nsw i32 %218, %219
  %221 = getelementptr inbounds i8, i8* %.34686, i32 1
  %222 = load i8, i8* %221, align 1
  %223 = sext i8 %222 to i32
  %224 = call zeroext i1 @c_isdigit(i32 %223)
  br i1 %224, label %.lr.ph89, label %._crit_edge90.loopexit

._crit_edge90.loopexit:                           ; preds = %.lr.ph89
  %.649.ph = phi i8* [ %221, %.lr.ph89 ]
  %.240.ph = phi i32 [ 0, %.lr.ph89 ]
  %.436.ph = phi i32 [ %220, %.lr.ph89 ]
  %.329.ph = phi i32 [ %.127.lcssa, %.lr.ph89 ]
  %.223.ph = phi i32 [ %.112.lcssa, %.lr.ph89 ]
  %.3.ph = phi i32 [ 0, %.lr.ph89 ]
  br label %._crit_edge90

._crit_edge90:                                    ; preds = %._crit_edge90.loopexit, %._crit_edge, %211, %._crit_edge83, %174
  %.649 = phi i8* [ %105, %174 ], [ %.144.lcssa, %._crit_edge ], [ %.245.lcssa, %._crit_edge83 ], [ %212, %211 ], [ %.649.ph, %._crit_edge90.loopexit ]
  %.240 = phi i32 [ %.03895, %174 ], [ %.03895, %._crit_edge ], [ 0, %211 ], [ 0, %._crit_edge83 ], [ %.240.ph, %._crit_edge90.loopexit ]
  %.436 = phi i32 [ 0, %174 ], [ 0, %._crit_edge ], [ 0, %._crit_edge83 ], [ 0, %211 ], [ %.436.ph, %._crit_edge90.loopexit ]
  %.329 = phi i32 [ 0, %174 ], [ 0, %._crit_edge ], [ %.127.lcssa, %211 ], [ %.127.lcssa, %._crit_edge83 ], [ %.329.ph, %._crit_edge90.loopexit ]
  %.223 = phi i32 [ 0, %174 ], [ 0, %._crit_edge ], [ %.112.lcssa, %211 ], [ %.112.lcssa, %._crit_edge83 ], [ %.223.ph, %._crit_edge90.loopexit ]
  %.3 = phi i32 [ 0, %174 ], [ %.112.lcssa, %._crit_edge ], [ 0, %211 ], [ 0, %._crit_edge83 ], [ %.3.ph, %._crit_edge90.loopexit ]
  %225 = icmp ne i32 %.3, 0
  %226 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %227 = load i8, i8* %226, align 1
  %228 = trunc i8 %227 to i1
  br i1 %225, label %229, label %232

; <label>:229:                                    ; preds = %._crit_edge90
  br i1 %228, label %230, label %372

; <label>:230:                                    ; preds = %229
  %231 = getelementptr [19 x i8], [19 x i8]* @.str.52.301, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %231, i32 %.3)
  br label %372

; <label>:232:                                    ; preds = %._crit_edge90
  br i1 %228, label %233, label %372

; <label>:233:                                    ; preds = %232
  %234 = getelementptr [31 x i8], [31 x i8]* @.str.53.302, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %234, i32 %.223, i32 %.329, i32 %.436)
  br label %372

; <label>:235:                                    ; preds = %153
  %.lcssa8 = phi i8* [ %105, %153 ]
  %.011101.lcssa7 = phi i32 [ %.011101, %153 ]
  %.014100.lcssa6 = phi i32 [ %.014100, %153 ]
  %.01799.lcssa5 = phi i32 [ %.01799, %153 ]
  %.02198.lcssa4 = phi i32 [ %.02198, %153 ]
  %.02697.lcssa3 = phi i32 [ %.02697, %153 ]
  %.03296.lcssa2 = phi i32 [ %.03296, %153 ]
  %.03895.lcssa1 = phi i32 [ %.03895, %153 ]
  %236 = call i64 @strlen(i8* %.lcssa8) #14
  %237 = trunc i64 %236 to i32
  %238 = sext i32 %237 to i64
  %239 = sext i32 %24 to i64
  %240 = load i8*, i8** %6, align 8
  %241 = ptrtoint i8* %.lcssa8 to i64
  %242 = ptrtoint i8* %240 to i64
  %243 = sub i64 %241, %242
  %244 = sub nsw i64 %239, %243
  %245 = icmp slt i64 %238, %244
  br i1 %245, label %246, label %268

; <label>:246:                                    ; preds = %235
  %247 = sext i32 %237 to i64
  %248 = getelementptr inbounds i8, i8* %.lcssa8, i64 %247
  store i8 32, i8* %248, align 1
  %249 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  %250 = load i32, i32* %249, align 8
  %251 = icmp eq i32 %250, 2
  br i1 %251, label %252, label %268

; <label>:252:                                    ; preds = %246
  %253 = getelementptr [5 x i8], [5 x i8]* @.str.54.303, i32 0, i32 0
  %254 = call i8* @strstr(i8* %.lcssa8, i8* %253) #14, !track !308
  %255 = icmp ne i8* %254, null
  br i1 %255, label %256, label %.loopexit70

; <label>:256:                                    ; preds = %252
  %257 = getelementptr inbounds i8, i8* %254, i64 4
  %258 = call noalias i8* @xstrdup(i8* %257)
  %259 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 6
  store i8* %258, i8** %259, align 8
  %260 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %261 = load i8, i8* %260, align 1
  %262 = trunc i8 %261 to i1
  br i1 %262, label %263, label %267

; <label>:263:                                    ; preds = %256
  %264 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 6
  %265 = load i8*, i8** %264, align 8
  %266 = getelementptr [13 x i8], [13 x i8]* @.str.55.304, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %266, i8* %265)
  br label %267

; <label>:267:                                    ; preds = %256, %263
  store i8 0, i8* %254, align 1
  br label %268

; <label>:268:                                    ; preds = %246, %267, %235
  %269 = getelementptr [2 x i8], [2 x i8]* @.str.56.305, i32 0, i32 0
  %270 = call i32 @strcmp(i8* %.lcssa8, i8* %269) #14
  %271 = icmp ne i32 %270, 0
  br i1 %271, label %272, label %276

; <label>:272:                                    ; preds = %268
  %273 = getelementptr [3 x i8], [3 x i8]* @.str.57.306, i32 0, i32 0
  %274 = call i32 @strcmp(i8* %.lcssa8, i8* %273) #14
  %275 = icmp ne i32 %274, 0
  br i1 %275, label %282, label %276

; <label>:276:                                    ; preds = %268, %272
  %277 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %278 = load i8, i8* %277, align 1
  %279 = trunc i8 %278 to i1
  br i1 %279, label %280, label %.loopexit70

; <label>:280:                                    ; preds = %276
  %281 = getelementptr [25 x i8], [25 x i8]* @.str.58.307, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %281)
  br label %.loopexit70

; <label>:282:                                    ; preds = %272
  %283 = call i64 @strlen(i8* %.lcssa8) #14
  %284 = trunc i64 %283 to i32
  %285 = add nsw i32 %284, 1
  %286 = sext i32 %285 to i64
  %287 = call noalias i8* @xmalloc(i64 %286)
  %288 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  store i8* %287, i8** %288, align 8
  %289 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %290 = load i8*, i8** %289, align 8
  %291 = add nsw i32 %284, 1
  %292 = sext i32 %291 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %290, i8* align 1 %.lcssa8, i64 %292, i1 false), !track !309
  %293 = icmp ne i32 %284, 0
  br i1 %293, label %294, label %.loopexit70

; <label>:294:                                    ; preds = %282
  %295 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  %296 = load i32, i32* %295, align 8
  %297 = icmp eq i32 %296, 1
  br i1 %297, label %298, label %318

; <label>:298:                                    ; preds = %294
  %299 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %300 = load i8*, i8** %299, align 8
  %301 = sub nsw i32 %284, 1
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds i8, i8* %300, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = sext i8 %304 to i32
  %306 = icmp eq i32 %305, 47
  br i1 %306, label %307, label %318

; <label>:307:                                    ; preds = %298
  %308 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %309 = load i8*, i8** %308, align 8
  %310 = sub nsw i32 %284, 1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %309, i64 %311
  store i8 0, i8* %312, align 1
  %313 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %314 = load i8, i8* %313, align 1
  %315 = trunc i8 %314 to i1
  br i1 %315, label %316, label %.loopexit70

; <label>:316:                                    ; preds = %307
  %317 = getelementptr [22 x i8], [22 x i8]* @.str.59.308, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %317)
  br label %.loopexit70

; <label>:318:                                    ; preds = %298, %294
  %319 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  %320 = load i32, i32* %319, align 8
  %321 = icmp eq i32 %320, 2
  br i1 %321, label %322, label %342

; <label>:322:                                    ; preds = %318
  %323 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %324 = load i8*, i8** %323, align 8
  %325 = sub nsw i32 %284, 1
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %324, i64 %326
  %328 = load i8, i8* %327, align 1
  %329 = sext i8 %328 to i32
  %330 = icmp eq i32 %329, 64
  br i1 %330, label %331, label %342

; <label>:331:                                    ; preds = %322
  %332 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %333 = load i8*, i8** %332, align 8
  %334 = sub nsw i32 %284, 1
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds i8, i8* %333, i64 %335
  store i8 0, i8* %336, align 1
  %337 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %338 = load i8, i8* %337, align 1
  %339 = trunc i8 %338 to i1
  br i1 %339, label %340, label %.loopexit70

; <label>:340:                                    ; preds = %331
  %341 = getelementptr [23 x i8], [23 x i8]* @.str.60.309, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %341)
  br label %.loopexit70

; <label>:342:                                    ; preds = %322, %318
  %343 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  %344 = load i32, i32* %343, align 8
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %.loopexit70

; <label>:346:                                    ; preds = %342
  %347 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 5
  %348 = load i32, i32* %347, align 4
  %349 = and i32 %348, 73
  %350 = icmp ne i32 %349, 0
  br i1 %350, label %351, label %.loopexit70

; <label>:351:                                    ; preds = %346
  %352 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %353 = load i8*, i8** %352, align 8
  %354 = sub nsw i32 %284, 1
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds i8, i8* %353, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = sext i8 %357 to i32
  %359 = icmp eq i32 %358, 42
  br i1 %359, label %360, label %.loopexit70

; <label>:360:                                    ; preds = %351
  %361 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %362 = load i8*, i8** %361, align 8
  %363 = sub nsw i32 %284, 1
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds i8, i8* %362, i64 %364
  store i8 0, i8* %365, align 1
  %366 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %367 = load i8, i8* %366, align 1
  %368 = trunc i8 %367 to i1
  br i1 %368, label %369, label %.loopexit70

; <label>:369:                                    ; preds = %360
  %370 = getelementptr [23 x i8], [23 x i8]* @.str.61.310, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %370)
  br label %.loopexit70

; <label>:371:                                    ; preds = %153
  call void @abort() #16
  unreachable

; <label>:372:                                    ; preds = %168, %172, %229, %230, %232, %233, %118, %144, %148
  %.8 = phi i8* [ %105, %148 ], [ %105, %144 ], [ %105, %118 ], [ %105, %168 ], [ %105, %172 ], [ %.649, %229 ], [ %.649, %230 ], [ %.649, %232 ], [ %.649, %233 ]
  %.442 = phi i32 [ %.03895, %148 ], [ %.03895, %144 ], [ %.03895, %118 ], [ %.03895, %168 ], [ %.03895, %172 ], [ %.240, %229 ], [ %.240, %230 ], [ %.240, %232 ], [ %.240, %233 ]
  %.6 = phi i32 [ %.03296, %148 ], [ %.03296, %144 ], [ %.03296, %118 ], [ %.03296, %168 ], [ %.03296, %172 ], [ %.436, %229 ], [ %.436, %230 ], [ %.436, %232 ], [ %.436, %233 ]
  %.531 = phi i32 [ %.02697, %148 ], [ %.02697, %144 ], [ %.02697, %118 ], [ %.02697, %168 ], [ %.02697, %172 ], [ %.329, %229 ], [ %.329, %230 ], [ %.329, %232 ], [ %.329, %233 ]
  %.425 = phi i32 [ %.02198, %148 ], [ %.02198, %144 ], [ %.02198, %118 ], [ %.02198, %168 ], [ %.02198, %172 ], [ %.223, %229 ], [ %.223, %230 ], [ %.223, %232 ], [ %.223, %233 ]
  %.320 = phi i32 [ %.01799, %148 ], [ %.01799, %144 ], [ %.01799, %118 ], [ %.118, %168 ], [ %.118, %172 ], [ %.01799, %229 ], [ %.01799, %230 ], [ %.01799, %232 ], [ %.01799, %233 ]
  %.216 = phi i32 [ %.014100, %118 ], [ %.06.lcssa, %144 ], [ %.06.lcssa, %148 ], [ %.014100, %233 ], [ %.014100, %232 ], [ %.014100, %230 ], [ %.014100, %229 ], [ %.014100, %172 ], [ %.014100, %168 ]
  %.5 = phi i32 [ %.011101, %148 ], [ %.011101, %144 ], [ %.011101, %118 ], [ %.011101, %168 ], [ %.011101, %172 ], [ %.3, %229 ], [ %.3, %230 ], [ %.3, %232 ], [ %.3, %233 ]
  %.2 = phi i32 [ %106, %118 ], [ 5, %144 ], [ 5, %148 ], [ %106, %233 ], [ %106, %232 ], [ %106, %230 ], [ %106, %229 ], [ %106, %172 ], [ %106, %168 ]
  %373 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %374 = call i8* @strtok(i8* null, i8* %373) #8, !track !310
  %375 = icmp ne i8* %374, null
  br i1 %375, label %.lr.ph104, label %.loopexit70.loopexit

.loopexit70.loopexit:                             ; preds = %120, %372
  %.038.lcssa.ph = phi i32 [ %.442, %372 ], [ %.03895, %120 ]
  %.032.lcssa.ph = phi i32 [ %.6, %372 ], [ %.03296, %120 ]
  %.026.lcssa.ph = phi i32 [ %.531, %372 ], [ %.02697, %120 ]
  %.021.lcssa.ph = phi i32 [ %.425, %372 ], [ %.02198, %120 ]
  %.017.lcssa.ph = phi i32 [ %.320, %372 ], [ %.01799, %120 ]
  %.014.lcssa.ph = phi i32 [ %.216, %372 ], [ %.014100, %120 ]
  %.011.lcssa.ph = phi i32 [ %.5, %372 ], [ %.011101, %120 ]
  %.010.ph = phi i32 [ 0, %372 ], [ 0, %120 ]
  %.18.ph = phi i32 [ 0, %372 ], [ 1, %120 ]
  br label %.loopexit70

.loopexit70:                                      ; preds = %.loopexit70.loopexit, %100, %331, %340, %369, %360, %351, %346, %342, %316, %307, %282, %280, %276, %252
  %.038.lcssa = phi i32 [ %.03895.lcssa1, %252 ], [ %.03895.lcssa1, %276 ], [ %.03895.lcssa1, %280 ], [ %.03895.lcssa1, %282 ], [ %.03895.lcssa1, %307 ], [ %.03895.lcssa1, %316 ], [ %.03895.lcssa1, %342 ], [ %.03895.lcssa1, %346 ], [ %.03895.lcssa1, %351 ], [ %.03895.lcssa1, %360 ], [ %.03895.lcssa1, %369 ], [ %.03895.lcssa1, %340 ], [ %.03895.lcssa1, %331 ], [ 1, %100 ], [ %.038.lcssa.ph, %.loopexit70.loopexit ]
  %.032.lcssa = phi i32 [ %.03296.lcssa2, %252 ], [ %.03296.lcssa2, %276 ], [ %.03296.lcssa2, %280 ], [ %.03296.lcssa2, %282 ], [ %.03296.lcssa2, %307 ], [ %.03296.lcssa2, %316 ], [ %.03296.lcssa2, %342 ], [ %.03296.lcssa2, %346 ], [ %.03296.lcssa2, %351 ], [ %.03296.lcssa2, %360 ], [ %.03296.lcssa2, %369 ], [ %.03296.lcssa2, %340 ], [ %.03296.lcssa2, %331 ], [ 0, %100 ], [ %.032.lcssa.ph, %.loopexit70.loopexit ]
  %.026.lcssa = phi i32 [ %.02697.lcssa3, %252 ], [ %.02697.lcssa3, %276 ], [ %.02697.lcssa3, %280 ], [ %.02697.lcssa3, %282 ], [ %.02697.lcssa3, %307 ], [ %.02697.lcssa3, %316 ], [ %.02697.lcssa3, %342 ], [ %.02697.lcssa3, %346 ], [ %.02697.lcssa3, %351 ], [ %.02697.lcssa3, %360 ], [ %.02697.lcssa3, %369 ], [ %.02697.lcssa3, %340 ], [ %.02697.lcssa3, %331 ], [ 0, %100 ], [ %.026.lcssa.ph, %.loopexit70.loopexit ]
  %.021.lcssa = phi i32 [ %.02198.lcssa4, %252 ], [ %.02198.lcssa4, %276 ], [ %.02198.lcssa4, %280 ], [ %.02198.lcssa4, %282 ], [ %.02198.lcssa4, %307 ], [ %.02198.lcssa4, %316 ], [ %.02198.lcssa4, %342 ], [ %.02198.lcssa4, %346 ], [ %.02198.lcssa4, %351 ], [ %.02198.lcssa4, %360 ], [ %.02198.lcssa4, %369 ], [ %.02198.lcssa4, %340 ], [ %.02198.lcssa4, %331 ], [ 0, %100 ], [ %.021.lcssa.ph, %.loopexit70.loopexit ]
  %.017.lcssa = phi i32 [ %.01799.lcssa5, %252 ], [ %.01799.lcssa5, %276 ], [ %.01799.lcssa5, %280 ], [ %.01799.lcssa5, %282 ], [ %.01799.lcssa5, %307 ], [ %.01799.lcssa5, %316 ], [ %.01799.lcssa5, %342 ], [ %.01799.lcssa5, %346 ], [ %.01799.lcssa5, %351 ], [ %.01799.lcssa5, %360 ], [ %.01799.lcssa5, %369 ], [ %.01799.lcssa5, %340 ], [ %.01799.lcssa5, %331 ], [ 0, %100 ], [ %.017.lcssa.ph, %.loopexit70.loopexit ]
  %.014.lcssa = phi i32 [ %.014100.lcssa6, %252 ], [ %.014100.lcssa6, %276 ], [ %.014100.lcssa6, %280 ], [ %.014100.lcssa6, %282 ], [ %.014100.lcssa6, %307 ], [ %.014100.lcssa6, %316 ], [ %.014100.lcssa6, %342 ], [ %.014100.lcssa6, %346 ], [ %.014100.lcssa6, %351 ], [ %.014100.lcssa6, %360 ], [ %.014100.lcssa6, %369 ], [ %.014100.lcssa6, %340 ], [ %.014100.lcssa6, %331 ], [ 0, %100 ], [ %.014.lcssa.ph, %.loopexit70.loopexit ]
  %.011.lcssa = phi i32 [ %.011101.lcssa7, %252 ], [ %.011101.lcssa7, %276 ], [ %.011101.lcssa7, %280 ], [ %.011101.lcssa7, %282 ], [ %.011101.lcssa7, %307 ], [ %.011101.lcssa7, %316 ], [ %.011101.lcssa7, %342 ], [ %.011101.lcssa7, %346 ], [ %.011101.lcssa7, %351 ], [ %.011101.lcssa7, %360 ], [ %.011101.lcssa7, %369 ], [ %.011101.lcssa7, %340 ], [ %.011101.lcssa7, %331 ], [ 0, %100 ], [ %.011.lcssa.ph, %.loopexit70.loopexit ]
  %.010 = phi i32 [ 0, %252 ], [ 1, %276 ], [ 1, %280 ], [ 0, %282 ], [ 0, %307 ], [ 0, %316 ], [ 0, %342 ], [ 0, %346 ], [ 0, %351 ], [ 0, %360 ], [ 0, %369 ], [ 0, %340 ], [ 0, %331 ], [ 0, %100 ], [ %.010.ph, %.loopexit70.loopexit ]
  %.18 = phi i32 [ 1, %252 ], [ 0, %276 ], [ 0, %280 ], [ 0, %331 ], [ 0, %340 ], [ 0, %369 ], [ 0, %360 ], [ 0, %351 ], [ 0, %346 ], [ 0, %342 ], [ 0, %316 ], [ 0, %307 ], [ 1, %282 ], [ 0, %100 ], [ %.18.ph, %.loopexit70.loopexit ]
  %376 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %377 = load i8*, i8** %376, align 8
  %378 = icmp ne i8* %377, null
  br i1 %378, label %379, label %387

; <label>:379:                                    ; preds = %.loopexit70
  %380 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 0
  %381 = load i32, i32* %380, align 8
  %382 = icmp eq i32 %381, 2
  br i1 %382, label %383, label %388

; <label>:383:                                    ; preds = %379
  %384 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 6
  %385 = load i8*, i8** %384, align 8
  %386 = icmp ne i8* %385, null
  br i1 %386, label %388, label %387

; <label>:387:                                    ; preds = %383, %.loopexit70
  br label %388

; <label>:388:                                    ; preds = %379, %383, %387
  %.29 = phi i32 [ %.18, %383 ], [ 1, %387 ], [ %.18, %379 ]
  %389 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %390 = load i8, i8* %389, align 1
  %391 = trunc i8 %390 to i1
  br i1 %391, label %392, label %401

; <label>:392:                                    ; preds = %388
  %393 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %394 = load i8*, i8** %393, align 8
  %395 = icmp ne i8* %394, null
  %396 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %397 = load i8*, i8** %396, align 8
  %398 = getelementptr [1 x i8], [1 x i8]* @.str.6.311, i32 0, i32 0
  %399 = select i1 %395, i8* %397, i8* %398
  %400 = getelementptr [4 x i8], [4 x i8]* @.str.62.312, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %400, i8* %399)
  br label %401

; <label>:401:                                    ; preds = %388, %392
  %402 = icmp ne i32 %.29, 0
  %403 = icmp ne i32 %.010, 0
  %or.cond = or i1 %402, %403
  br i1 %or.cond, label %404, label %417

; <label>:404:                                    ; preds = %401
  %405 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %406 = load i8, i8* %405, align 1
  %407 = trunc i8 %406 to i1
  br i1 %407, label %408, label %410

; <label>:408:                                    ; preds = %404
  %409 = getelementptr [11 x i8], [11 x i8]* @.str.63.313, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %409)
  br label %410

; <label>:410:                                    ; preds = %408, %404
  %411 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  %412 = load i8*, i8** %411, align 8
  call void @free(i8* %412) #8
  %413 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 1
  store i8* null, i8** %413, align 8
  %414 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 6
  %415 = load i8*, i8** %414, align 8
  call void @free(i8* %415) #8
  %416 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 6
  store i8* null, i8** %416, align 8
  br label %.backedge

; <label>:417:                                    ; preds = %401
  %.038.lcssa.lcssa = phi i32 [ %.038.lcssa, %401 ]
  %.032.lcssa.lcssa = phi i32 [ %.032.lcssa, %401 ]
  %.026.lcssa.lcssa = phi i32 [ %.026.lcssa, %401 ]
  %.021.lcssa.lcssa = phi i32 [ %.021.lcssa, %401 ]
  %.017.lcssa.lcssa = phi i32 [ %.017.lcssa, %401 ]
  %.014.lcssa.lcssa = phi i32 [ %.014.lcssa, %401 ]
  %.011.lcssa.lcssa = phi i32 [ %.011.lcssa, %401 ]
  %418 = icmp ne %struct.fileinfo* %.02.ph118, null
  br i1 %418, label %426, label %419

; <label>:419:                                    ; preds = %417
  %420 = call noalias i8* @xmalloc(i64 64)
  %421 = bitcast i8* %420 to %struct.fileinfo*
  %422 = bitcast %struct.fileinfo* %421 to i8*
  %423 = bitcast %struct.fileinfo* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %422, i8* align 8 %423, i64 64, i1 false), !track !311
  %424 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %421, i32 0, i32 8
  store %struct.fileinfo* null, %struct.fileinfo** %424, align 8
  %425 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %421, i32 0, i32 7
  store %struct.fileinfo* null, %struct.fileinfo** %425, align 8
  br label %436

; <label>:426:                                    ; preds = %417
  %427 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 7
  store %struct.fileinfo* %.01.ph119, %struct.fileinfo** %427, align 8
  %428 = call noalias i8* @xmalloc(i64 64)
  %429 = bitcast i8* %428 to %struct.fileinfo*
  %430 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01.ph119, i32 0, i32 8
  store %struct.fileinfo* %429, %struct.fileinfo** %430, align 8
  %431 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.01.ph119, i32 0, i32 8
  %432 = load %struct.fileinfo*, %struct.fileinfo** %431, align 8
  %433 = bitcast %struct.fileinfo* %432 to i8*
  %434 = bitcast %struct.fileinfo* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %433, i8* align 8 %434, i64 64, i1 false), !track !312
  %435 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %432, i32 0, i32 8
  store %struct.fileinfo* null, %struct.fileinfo** %435, align 8
  br label %436

; <label>:436:                                    ; preds = %426, %419
  %.13 = phi %struct.fileinfo* [ %.02.ph118, %426 ], [ %421, %419 ]
  %.1 = phi %struct.fileinfo* [ %432, %426 ], [ %421, %419 ]
  %437 = call i64 @time(i64* null) #8
  store i64 %437, i64* %4, align 8
  %438 = call %struct.tm* @localtime(i64* %4) #8
  %439 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 0
  store i32 %.032.lcssa.lcssa, i32* %439, align 8
  %440 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 1
  store i32 %.026.lcssa.lcssa, i32* %440, align 4
  %441 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 2
  store i32 %.021.lcssa.lcssa, i32* %441, align 8
  %442 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 3
  store i32 %.017.lcssa.lcssa, i32* %442, align 4
  %443 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 4
  store i32 %.014.lcssa.lcssa, i32* %443, align 8
  %444 = icmp eq i32 %.011.lcssa.lcssa, 0
  br i1 %444, label %445, label %456

; <label>:445:                                    ; preds = %436
  %446 = getelementptr inbounds %struct.tm, %struct.tm* %438, i32 0, i32 4
  %447 = load i32, i32* %446, align 8
  %448 = icmp sgt i32 %.014.lcssa.lcssa, %447
  %449 = getelementptr inbounds %struct.tm, %struct.tm* %438, i32 0, i32 5
  %450 = load i32, i32* %449, align 4
  br i1 %448, label %451, label %454

; <label>:451:                                    ; preds = %445
  %452 = sub nsw i32 %450, 1
  %453 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 5
  store i32 %452, i32* %453, align 4
  br label %458

; <label>:454:                                    ; preds = %445
  %455 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 5
  store i32 %450, i32* %455, align 4
  br label %458

; <label>:456:                                    ; preds = %436
  %457 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 5
  store i32 %.011.lcssa.lcssa, i32* %457, align 4
  br label %458

; <label>:458:                                    ; preds = %451, %454, %456
  %459 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 5
  %460 = load i32, i32* %459, align 4
  %461 = icmp sge i32 %460, 1900
  br i1 %461, label %462, label %.outer

; <label>:462:                                    ; preds = %458
  %463 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 5
  %464 = load i32, i32* %463, align 4
  %465 = sub nsw i32 %464, 1900
  store i32 %465, i32* %463, align 4
  br label %.outer

.outer:                                           ; preds = %462, %458
  %466 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 6
  store i32 0, i32* %466, align 8
  %467 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 7
  store i32 0, i32* %467, align 4
  %468 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 8
  store i32 -1, i32* %468, align 8
  %469 = call i64 @rpl_mktime(%struct.tm* %3)
  %470 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.1, i32 0, i32 3
  store i64 %469, i64* %470, align 8
  %471 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.1, i32 0, i32 4
  store i32 %.038.lcssa.lcssa, i32* %471, align 8
  %472 = call i64 @getline(i8** %6, i64* %5, %struct._IO_FILE* %9)
  %473 = trunc i64 %472 to i32
  %474 = icmp sgt i32 %473, 0
  br i1 %474, label %.lr.ph114, label %.outer._crit_edge.loopexit9

.outer._crit_edge.loopexit:                       ; preds = %.backedge
  %.02.lcssa.ph = phi %struct.fileinfo* [ %.02.ph118, %.backedge ]
  br label %.outer._crit_edge

.outer._crit_edge.loopexit9:                      ; preds = %.outer
  %.02.lcssa.ph10 = phi %struct.fileinfo* [ %.13, %.outer ]
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer._crit_edge.loopexit9, %.outer._crit_edge.loopexit, %16
  %.02.lcssa = phi %struct.fileinfo* [ null, %16 ], [ %.02.lcssa.ph, %.outer._crit_edge.loopexit ], [ %.02.lcssa.ph10, %.outer._crit_edge.loopexit9 ]
  %475 = load i8*, i8** %6, align 8
  call void @free(i8* %475) #8
  store i8* null, i8** %6, align 8
  %476 = call i32 @fclose(%struct._IO_FILE* %9)
  br label %477

; <label>:477:                                    ; preds = %.outer._crit_edge, %11
  %.0 = phi %struct.fileinfo* [ %.02.lcssa, %.outer._crit_edge ], [ null, %11 ]
  ret %struct.fileinfo* %.0
}

declare dso_local i32 @fgetc(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.fileinfo* @ftp_parse_winnt_ls(i8*) #7 {
  %2 = alloca i64, align 8, !track !313
  %3 = alloca %struct.tm, align 8, !track !314
  %4 = alloca i8*, align 8, !track !315
  %5 = alloca %struct.fileinfo, align 8, !track !316
  store i64 0, i64* %2, align 8
  store i8* null, i8** %4, align 8
  %6 = getelementptr [3 x i8], [3 x i8]* @.str.255, i32 0, i32 0
  %7 = call %struct._IO_FILE* @fopen(i8* %0, i8* %6), !track !317
  %8 = icmp ne %struct._IO_FILE* %7, null
  br i1 %8, label %14, label %9

; <label>:9:                                      ; preds = %1
  %10 = call i32* @__errno_location() #15
  %11 = load i32, i32* %10, align 4
  %12 = call i8* @strerror(i32 %11) #8
  %13 = getelementptr [8 x i8], [8 x i8]* @.str.1.256, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %13, i8* %0, i8* %12)
  br label %177

; <label>:14:                                     ; preds = %1
  %15 = call i64 @getline(i8** %4, i64* %2, %struct._IO_FILE* %7)
  %16 = trunc i64 %15 to i32
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %14
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  %18 = phi i32 [ %23, %.backedge ], [ %16, %.lr.ph.preheader ]
  %.0113 = phi %struct.fileinfo* [ %.01.be, %.backedge ], [ null, %.lr.ph.preheader ]
  %.0212 = phi %struct.fileinfo* [ %.02.be, %.backedge ], [ null, %.lr.ph.preheader ]
  call void @unroll_loop(i32 110)
  %19 = load i8*, i8** %4, align 8
  %20 = call i32 @clean_line(i8* %19, i32 %18)
  %21 = icmp slt i32 %20, 40
  br i1 %21, label %.backedge, label %25

.backedge:                                        ; preds = %158, %165, %.critedge, %106, %67, %63, %39, %32, %25, %.lr.ph
  %.02.be = phi %struct.fileinfo* [ %.0212, %.lr.ph ], [ %.0212, %25 ], [ %.0212, %32 ], [ %.0212, %39 ], [ %.0212, %63 ], [ %.0212, %67 ], [ %.0212, %106 ], [ %.0212, %.critedge ], [ %.0212, %165 ], [ %160, %158 ]
  %.01.be = phi %struct.fileinfo* [ %.0113, %.lr.ph ], [ %.0113, %25 ], [ %.0113, %32 ], [ %.0113, %39 ], [ %.0113, %63 ], [ %.0113, %67 ], [ %.0113, %106 ], [ %.0113, %.critedge ], [ %171, %165 ], [ %160, %158 ]
  %22 = call i64 @getline(i8** %4, i64* %2, %struct._IO_FILE* %7)
  %23 = trunc i64 %22 to i32
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %.lr.ph, label %._crit_edge.loopexit

; <label>:25:                                     ; preds = %.lr.ph
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 39
  %28 = load i8*, i8** %4, align 8
  %29 = getelementptr [2 x i8], [2 x i8]* @.str.64.285, i32 0, i32 0
  %30 = call i8* @strtok(i8* %28, i8* %29) #8, !track !318
  %31 = icmp eq i8* %30, null
  br i1 %31, label %.backedge, label %32

; <label>:32:                                     ; preds = %25
  %33 = call i32 @atoi(i8* %30) #14
  %34 = sub nsw i32 %33, 1
  %35 = icmp slt i32 %34, 0
  %spec.select = select i1 %35, i32 0, i32 %34
  %36 = getelementptr [2 x i8], [2 x i8]* @.str.64.285, i32 0, i32 0
  %37 = call i8* @strtok(i8* null, i8* %36) #8, !track !319
  %38 = icmp eq i8* %37, null
  br i1 %38, label %.backedge, label %39

; <label>:39:                                     ; preds = %32
  %40 = call i32 @atoi(i8* %37) #14
  %41 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %42 = call i8* @strtok(i8* null, i8* %41) #8, !track !320
  %43 = icmp eq i8* %42, null
  br i1 %43, label %.backedge, label %44

; <label>:44:                                     ; preds = %39
  %45 = call i32 @atoi(i8* %42) #14
  %46 = icmp sle i32 %45, 70
  br i1 %46, label %47, label %49

; <label>:47:                                     ; preds = %44
  %48 = add nsw i32 %45, 100
  br label %53

; <label>:49:                                     ; preds = %44
  %50 = icmp sge i32 %45, 1900
  %51 = sub nsw i32 %45, 1900
  %52 = getelementptr inbounds i8, i8* %27, i64 2
  %.07 = select i1 %50, i8* %52, i8* %27
  %.04 = select i1 %50, i32 %51, i32 %45
  br label %53

; <label>:53:                                     ; preds = %49, %47
  %.18 = phi i8* [ %27, %47 ], [ %.07, %49 ]
  %.15 = phi i32 [ %48, %47 ], [ %.04, %49 ]
  %54 = call noalias i8* @xstrdup(i8* %.18)
  %55 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 1
  store i8* %54, i8** %55, align 8
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %57 = load i8, i8* %56, align 1
  %58 = trunc i8 %57 to i1
  br i1 %58, label %59, label %63

; <label>:59:                                     ; preds = %53
  %60 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr [12 x i8], [12 x i8]* @.str.65.268, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %62, i8* %61)
  br label %63

; <label>:63:                                     ; preds = %53, %59
  %64 = getelementptr [2 x i8], [2 x i8]* @.str.4.286, i32 0, i32 0
  %65 = call i8* @strtok(i8* null, i8* %64) #8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %.backedge, label %67

; <label>:67:                                     ; preds = %63
  %68 = call i32 @atoi(i8* %65) #14
  %69 = getelementptr [2 x i8], [2 x i8]* @.str.66.287, i32 0, i32 0
  %70 = call i8* @strtok(i8* null, i8* %69) #8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %.backedge, label %72

; <label>:72:                                     ; preds = %67
  %73 = call i32 @atoi(i8* %70) #14
  %74 = getelementptr inbounds i8, i8* %70, i64 2
  %75 = icmp eq i32 %68, 12
  %spec.select1 = select i1 %75, i32 0, i32 %68
  %76 = load i8, i8* %74, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %77, 80
  %79 = add nsw i32 %spec.select1, 12
  %.110 = select i1 %78, i32 %79, i32 %spec.select1
  %80 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %81 = load i8, i8* %80, align 1
  %82 = trunc i8 %81 to i1
  br i1 %82, label %83, label %86

; <label>:83:                                     ; preds = %72
  %84 = add nsw i32 %.15, 1900
  %85 = getelementptr [43 x i8], [43 x i8]* @.str.67.288, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %85, i32 %84, i32 %spec.select, i32 %40, i32 %.110, i32 %73)
  br label %86

; <label>:86:                                     ; preds = %72, %83
  %87 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 0
  store i32 0, i32* %87, align 8
  %88 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 1
  store i32 %73, i32* %88, align 4
  %89 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 2
  store i32 %.110, i32* %89, align 8
  %90 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 3
  store i32 %40, i32* %90, align 4
  %91 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 4
  store i32 %spec.select, i32* %91, align 8
  %92 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 5
  store i32 %.15, i32* %92, align 4
  %93 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 6
  store i32 0, i32* %93, align 8
  %94 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 7
  store i32 0, i32* %94, align 4
  %95 = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 8
  store i32 -1, i32* %95, align 8
  %96 = call i64 @rpl_mktime(%struct.tm* %3)
  %97 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 3
  store i64 %96, i64* %97, align 8
  %98 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 4
  store i32 0, i32* %98, align 8
  %99 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %100 = load i8, i8* %99, align 1
  %101 = trunc i8 %100 to i1
  br i1 %101, label %102, label %106

; <label>:102:                                    ; preds = %86
  %103 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 3
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr [16 x i8], [16 x i8]* @.str.68.284, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %105, i64 %104)
  br label %106

; <label>:106:                                    ; preds = %86, %102
  %107 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %108 = call i8* @strtok(i8* null, i8* %107) #8, !track !321
  %109 = icmp eq i8* %108, null
  br i1 %109, label %.backedge, label %.preheader

.preheader:                                       ; preds = %106
  call void @unroll_loop(i32 117)
  %110 = icmp ne i8* %108, null
  br i1 %110, label %.lr.ph3, label %.critedge

.lr.ph3:                                          ; preds = %.preheader
  br label %111

; <label>:111:                                    ; preds = %.lr.ph3, %115
  %.0112 = phi i8* [ %108, %.lr.ph3 ], [ %117, %115 ]
  %112 = load i8, i8* %.0112, align 1
  %113 = sext i8 %112 to i32
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %..critedge_crit_edge4

; <label>:115:                                    ; preds = %111
  %116 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %117 = call i8* @strtok(i8* null, i8* %116) #8, !track !322
  call void @unroll_loop(i32 117)
  %118 = icmp ne i8* %117, null
  br i1 %118, label %111, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %115
  %split = phi i8* [ %117, %115 ]
  br label %.critedge

..critedge_crit_edge4:                            ; preds = %111
  %split5 = phi i8* [ %.0112, %111 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge4, %..critedge_crit_edge, %.preheader
  %.011.lcssa = phi i8* [ %split5, %..critedge_crit_edge4 ], [ %split, %..critedge_crit_edge ], [ %108, %.preheader ]
  %119 = icmp eq i8* %.011.lcssa, null
  br i1 %119, label %.backedge, label %120

; <label>:120:                                    ; preds = %.critedge
  %121 = load i8, i8* %.011.lcssa, align 1
  %122 = sext i8 %121 to i32
  %123 = icmp eq i32 %122, 60
  %124 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 0
  br i1 %123, label %125, label %133

; <label>:125:                                    ; preds = %120
  store i32 1, i32* %124, align 8
  %126 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 2
  store i64 0, i64* %126, align 8
  %127 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 5
  store i32 493, i32* %127, align 4
  %128 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %129 = load i8, i8* %128, align 1
  %130 = trunc i8 %129 to i1
  br i1 %130, label %131, label %155

; <label>:131:                                    ; preds = %125
  %132 = getelementptr [11 x i8], [11 x i8]* @.str.69.289, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %132)
  br label %155

; <label>:133:                                    ; preds = %120
  store i32 0, i32* %124, align 8
  %134 = call i32* @__errno_location() #15
  store i32 0, i32* %134, align 4
  %135 = call i64 @strtol(i8* %.011.lcssa, i8** null, i32 10) #8, !track !323
  %136 = icmp eq i64 %135, 9223372036854775807
  br i1 %136, label %137, label %143

; <label>:137:                                    ; preds = %133
  %138 = call i32* @__errno_location() #15
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 34
  br i1 %140, label %141, label %143

; <label>:141:                                    ; preds = %137
  %142 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 2
  store i64 0, i64* %142, align 8
  br label %145

; <label>:143:                                    ; preds = %137, %133
  %144 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 2
  store i64 %135, i64* %144, align 8
  br label %145

; <label>:145:                                    ; preds = %143, %141
  %146 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 5
  store i32 420, i32* %146, align 4
  %147 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %148 = load i8, i8* %147, align 1
  %149 = trunc i8 %148 to i1
  br i1 %149, label %150, label %155

; <label>:150:                                    ; preds = %145
  %151 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 2
  %152 = load i64, i64* %151, align 8
  %153 = call i8* @number_to_static_string(i64 %152)
  %154 = getelementptr [21 x i8], [21 x i8]* @.str.70.290, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %154, i8* %153)
  br label %155

; <label>:155:                                    ; preds = %150, %145, %131, %125
  %156 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 6
  store i8* null, i8** %156, align 8
  %157 = icmp ne %struct.fileinfo* %.0212, null
  br i1 %157, label %165, label %158

; <label>:158:                                    ; preds = %155
  %159 = call noalias i8* @xmalloc(i64 64)
  %160 = bitcast i8* %159 to %struct.fileinfo*
  %161 = bitcast %struct.fileinfo* %160 to i8*
  %162 = bitcast %struct.fileinfo* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %161, i8* align 8 %162, i64 64, i1 false), !track !324
  %163 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %160, i32 0, i32 8
  store %struct.fileinfo* null, %struct.fileinfo** %163, align 8
  %164 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %160, i32 0, i32 7
  store %struct.fileinfo* null, %struct.fileinfo** %164, align 8
  br label %.backedge

; <label>:165:                                    ; preds = %155
  %166 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 7
  store %struct.fileinfo* %.0113, %struct.fileinfo** %166, align 8
  %167 = call noalias i8* @xmalloc(i64 64)
  %168 = bitcast i8* %167 to %struct.fileinfo*
  %169 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 8
  store %struct.fileinfo* %168, %struct.fileinfo** %169, align 8
  %170 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0113, i32 0, i32 8
  %171 = load %struct.fileinfo*, %struct.fileinfo** %170, align 8
  %172 = bitcast %struct.fileinfo* %171 to i8*
  %173 = bitcast %struct.fileinfo* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 64, i1 false), !track !325
  %174 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %171, i32 0, i32 8
  store %struct.fileinfo* null, %struct.fileinfo** %174, align 8
  br label %.backedge

._crit_edge.loopexit:                             ; preds = %.backedge
  %.02.lcssa.ph = phi %struct.fileinfo* [ %.02.be, %.backedge ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %14
  %.02.lcssa = phi %struct.fileinfo* [ null, %14 ], [ %.02.lcssa.ph, %._crit_edge.loopexit ]
  %175 = load i8*, i8** %4, align 8
  call void @free(i8* %175) #8
  store i8* null, i8** %4, align 8
  %176 = call i32 @fclose(%struct._IO_FILE* %7)
  br label %177

; <label>:177:                                    ; preds = %._crit_edge, %9
  %.0 = phi %struct.fileinfo* [ %.02.lcssa, %._crit_edge ], [ null, %9 ]
  ret %struct.fileinfo* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.fileinfo* @ftp_parse_vms_ls(i8*) #7 {
  %2 = alloca i64, align 8, !track !326
  %3 = alloca i64, align 8, !track !327
  %4 = alloca [32 x i8], align 16, !track !328
  %5 = alloca i8*, align 8, !track !329
  %6 = alloca %struct.fileinfo, align 8, !track !330
  store i64 0, i64* %2, align 8
  store i8* null, i8** %5, align 8
  %7 = getelementptr [2 x i8], [2 x i8]* @.str.71.258, i32 0, i32 0
  %8 = call %struct._IO_FILE* @fopen(i8* %0, i8* %7), !track !331
  %9 = icmp ne %struct._IO_FILE* %8, null
  br i1 %9, label %15, label %10

; <label>:10:                                     ; preds = %1
  %11 = call i32* @__errno_location() #15
  %12 = load i32, i32* %11, align 4
  %13 = call i8* @strerror(i32 %12) #8
  %14 = getelementptr [8 x i8], [8 x i8]* @.str.1.256, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %14, i8* %0, i8* %13)
  br label %368

; <label>:15:                                     ; preds = %1
  %16 = call i64 @getline(i8** %5, i64* %2, %struct._IO_FILE* %8)
  %17 = trunc i64 %16 to i32
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %.lr.ph52.preheader, label %.loopexit35

.lr.ph52.preheader:                               ; preds = %15
  br label %.lr.ph52

.lr.ph52:                                         ; preds = %.lr.ph52.preheader, %.outer36
  %19 = phi i32 [ %45, %.outer36 ], [ %17, %.lr.ph52.preheader ]
  %.06.ph55 = phi i32 [ 1, %.outer36 ], [ 0, %.lr.ph52.preheader ]
  call void @unroll_loop(i32 93)
  br label %24

; <label>:20:                                     ; preds = %24
  %21 = call i64 @getline(i8** %5, i64* %2, %struct._IO_FILE* %8)
  %22 = trunc i64 %21 to i32
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %.loopexit35.loopexit

; <label>:24:                                     ; preds = %.lr.ph52, %20
  %25 = phi i32 [ %19, %.lr.ph52 ], [ %22, %20 ]
  call void @unroll_loop(i32 132)
  %26 = load i8*, i8** %5, align 8
  %27 = call i32 @clean_line(i8* %26, i32 %25)
  %28 = icmp sle i32 %27, 0
  br i1 %28, label %20, label %29

; <label>:29:                                     ; preds = %24
  %.lcssa38 = phi i32 [ %27, %24 ]
  %30 = icmp eq i32 %.06.ph55, 0
  br i1 %30, label %31, label %39

; <label>:31:                                     ; preds = %29
  %32 = load i8*, i8** %5, align 8
  %33 = sub nsw i32 %.lcssa38, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 93
  br i1 %38, label %.outer36, label %39

; <label>:39:                                     ; preds = %31, %29
  %.lcssa23 = phi i32 [ %.lcssa38, %31 ], [ %.lcssa38, %29 ]
  %40 = load i8*, i8** %5, align 8
  %41 = getelementptr [10 x i8], [10 x i8]* @.str.72.259, i32 0, i32 0
  %42 = call i32 @strncmp(i8* %40, i8* %41, i64 9) #14
  %43 = icmp ne i32 %42, 0
  %.lcssa23. = select i1 %43, i32 %.lcssa23, i32 0
  br label %.loopexit35

.outer36:                                         ; preds = %31
  %44 = call i64 @getline(i8** %5, i64* %2, %struct._IO_FILE* %8)
  %45 = trunc i64 %44 to i32
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %.lr.ph52, label %.loopexit35.loopexit3

.loopexit35.loopexit:                             ; preds = %20
  %.04.ph = phi i32 [ %22, %20 ]
  br label %.loopexit35

.loopexit35.loopexit3:                            ; preds = %.outer36
  %.04.ph4 = phi i32 [ %45, %.outer36 ]
  br label %.loopexit35

.loopexit35:                                      ; preds = %.loopexit35.loopexit3, %.loopexit35.loopexit, %15, %39
  %.04 = phi i32 [ %.lcssa23., %39 ], [ %17, %15 ], [ %.04.ph, %.loopexit35.loopexit ], [ %.04.ph4, %.loopexit35.loopexit3 ]
  %47 = icmp sgt i32 %.04, 0
  br i1 %47, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %.loopexit35
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.outer
  %.02.ph50 = phi %struct.fileinfo* [ %.1, %.outer ], [ null, %.lr.ph.preheader ]
  %.010.ph49 = phi %struct.fileinfo* [ %.111, %.outer ], [ null, %.lr.ph.preheader ]
  call void @unroll_loop(i32 79)
  br label %48

; <label>:48:                                     ; preds = %.lr.ph, %185
  call void @unroll_loop(i32 133)
  %49 = load i8*, i8** %5, align 8
  %50 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %51 = call i8* @strtok(i8* %49, i8* %50) #8, !track !332
  %52 = icmp eq i8* %51, null
  %53 = load i8*, i8** %5, align 8
  %spec.select = select i1 %52, i8* %53, i8* %51
  %54 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %55 = load i8, i8* %54, align 1
  %56 = trunc i8 %55 to i1
  br i1 %56, label %57, label %59

; <label>:57:                                     ; preds = %48
  %58 = getelementptr [19 x i8], [19 x i8]* @.str.73.261, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %58, i8* %spec.select)
  br label %59

; <label>:59:                                     ; preds = %48, %57
  %60 = call i64 @strlen(i8* %spec.select) #14
  %61 = getelementptr inbounds i8, i8* %spec.select, i64 %60
  br label %62

; <label>:62:                                     ; preds = %65, %59
  %.01 = phi i8* [ %61, %59 ], [ %63, %65 ]
  call void @unroll_loop(i32 134)
  %63 = getelementptr inbounds i8, i8* %.01, i32 -1
  %64 = icmp ugt i8* %63, %spec.select
  br i1 %64, label %65, label %.critedge

; <label>:65:                                     ; preds = %62
  %66 = load i8, i8* %63, align 1
  %67 = sext i8 %66 to i32
  %68 = call zeroext i1 @c_isdigit(i32 %67)
  br i1 %68, label %62, label %.critedge

.critedge:                                        ; preds = %62, %65
  %.lcssa = phi i8* [ %63, %65 ], [ %63, %62 ]
  %69 = load i8, i8* %.lcssa, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp eq i32 %70, 59
  br i1 %71, label %72, label %78

; <label>:72:                                     ; preds = %.critedge
  %73 = getelementptr inbounds i8, i8* %.lcssa, i64 -1
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp ne i32 %75, 94
  br i1 %76, label %77, label %78

; <label>:77:                                     ; preds = %72
  store i8 0, i8* %.lcssa, align 1
  br label %78

; <label>:78:                                     ; preds = %77, %72, %.critedge
  call void @eat_carets(i8* %spec.select)
  %79 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %80 = load i8, i8* %79, align 1
  %81 = trunc i8 %80 to i1
  br i1 %81, label %82, label %84

; <label>:82:                                     ; preds = %78
  %83 = getelementptr [19 x i8], [19 x i8]* @.str.74.262, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %83, i8* %spec.select)
  br label %84

; <label>:84:                                     ; preds = %78, %82
  %85 = call i64 @strlen(i8* %spec.select) #14
  %86 = trunc i64 %85 to i32
  %87 = sub nsw i32 %86, 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %spec.select, i64 %88
  %90 = getelementptr [5 x i8], [5 x i8]* @.str.75.263, i32 0, i32 0
  %91 = call i32 @c_strncasecmp(i8* %89, i8* %90, i64 4) #14
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %104, label %93

; <label>:93:                                     ; preds = %84
  %94 = sub nsw i32 %86, 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %spec.select, i64 %95
  store i8 0, i8* %96, align 1
  %97 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 0
  store i32 1, i32* %97, align 8
  %98 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 5
  store i32 493, i32* %98, align 4
  %99 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %100 = load i8, i8* %99, align 1
  %101 = trunc i8 %100 to i1
  br i1 %101, label %102, label %130

; <label>:102:                                    ; preds = %93
  %103 = getelementptr [16 x i8], [16 x i8]* @.str.76.264, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %103)
  br label %130

; <label>:104:                                    ; preds = %84
  %105 = sub nsw i32 %86, 6
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %spec.select, i64 %106
  %108 = getelementptr [7 x i8], [7 x i8]* @.str.77.265, i32 0, i32 0
  %109 = call i32 @c_strncasecmp(i8* %107, i8* %108, i64 6) #14
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %122, label %111

; <label>:111:                                    ; preds = %104
  %112 = sub nsw i32 %86, 6
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %spec.select, i64 %113
  store i8 0, i8* %114, align 1
  %115 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 0
  store i32 1, i32* %115, align 8
  %116 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 5
  store i32 493, i32* %116, align 4
  %117 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %118 = load i8, i8* %117, align 1
  %119 = trunc i8 %118 to i1
  br i1 %119, label %120, label %130

; <label>:120:                                    ; preds = %111
  %121 = getelementptr [15 x i8], [15 x i8]* @.str.78.266, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %121)
  br label %130

; <label>:122:                                    ; preds = %104
  %123 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 0
  store i32 0, i32* %123, align 8
  %124 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 5
  store i32 420, i32* %124, align 4
  %125 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %126 = load i8, i8* %125, align 1
  %127 = trunc i8 %126 to i1
  br i1 %127, label %128, label %130

; <label>:128:                                    ; preds = %122
  %129 = getelementptr [6 x i8], [6 x i8]* @.str.79.267, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %129)
  br label %130

; <label>:130:                                    ; preds = %111, %120, %122, %128, %102, %93
  %131 = call noalias i8* @xstrdup(i8* %spec.select)
  %132 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 1
  store i8* %131, i8** %132, align 8
  %133 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %134 = load i8, i8* %133, align 1
  %135 = trunc i8 %134 to i1
  br i1 %135, label %136, label %140

; <label>:136:                                    ; preds = %130
  %137 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 1
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr [12 x i8], [12 x i8]* @.str.65.268, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %139, i8* %138)
  br label %140

; <label>:140:                                    ; preds = %130, %136
  %141 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  store i8 0, i8* %141, align 16
  %142 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 6
  store i8* null, i8** %142, align 8
  %143 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 2
  store i64 0, i64* %143, align 8
  %144 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %145 = call i8* @strtok(i8* null, i8* %144) #8, !track !333
  %146 = icmp eq i8* %145, null
  br i1 %146, label %147, label %.loopexit24.loopexit

; <label>:147:                                    ; preds = %140
  %148 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %149 = load i8, i8* %148, align 1
  %150 = trunc i8 %149 to i1
  br i1 %150, label %151, label %153

; <label>:151:                                    ; preds = %147
  %152 = getelementptr [26 x i8], [26 x i8]* @.str.80.269, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %152)
  br label %153

; <label>:153:                                    ; preds = %147, %151
  %154 = call i64 @getline(i8** %5, i64* %2, %struct._IO_FILE* %8)
  %155 = trunc i64 %154 to i32
  %156 = icmp sle i32 %155, 0
  br i1 %156, label %157, label %163

; <label>:157:                                    ; preds = %153
  %.010.lcssa19 = phi %struct.fileinfo* [ %.010.ph49, %153 ]
  %158 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %159 = load i8, i8* %158, align 1
  %160 = trunc i8 %159 to i1
  br i1 %160, label %161, label %.loopexit

; <label>:161:                                    ; preds = %157
  %162 = getelementptr [31 x i8], [31 x i8]* @.str.81.270, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %162)
  br label %.loopexit

; <label>:163:                                    ; preds = %153
  %164 = load i8*, i8** %5, align 8
  %165 = call i32 @clean_line(i8* %164, i32 %155)
  %166 = icmp sle i32 %165, 0
  br i1 %166, label %167, label %173

; <label>:167:                                    ; preds = %163
  %.010.lcssa20 = phi %struct.fileinfo* [ %.010.ph49, %163 ]
  %168 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %169 = load i8, i8* %168, align 1
  %170 = trunc i8 %169 to i1
  br i1 %170, label %171, label %.loopexit

; <label>:171:                                    ; preds = %167
  %172 = getelementptr [38 x i8], [38 x i8]* @.str.82.271, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %172)
  br label %.loopexit

; <label>:173:                                    ; preds = %163
  %174 = load i8*, i8** %5, align 8
  %175 = getelementptr inbounds i8, i8* %174, i64 0
  %176 = load i8, i8* %175, align 1
  %177 = sext i8 %176 to i32
  %178 = icmp ne i32 %177, 32
  br i1 %178, label %179, label %187

; <label>:179:                                    ; preds = %173
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %181 = load i8, i8* %180, align 1
  %182 = trunc i8 %181 to i1
  br i1 %182, label %183, label %185

; <label>:183:                                    ; preds = %179
  %184 = getelementptr [50 x i8], [50 x i8]* @.str.83.272, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %184)
  br label %185

; <label>:185:                                    ; preds = %179, %183
  %186 = icmp sgt i32 %165, 0
  br i1 %186, label %48, label %.loopexit.loopexit

; <label>:187:                                    ; preds = %173
  %188 = load i8*, i8** %5, align 8
  %189 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %190 = call i8* @strtok(i8* %188, i8* %189) #8, !track !334
  %191 = icmp eq i8* %190, null
  br i1 %191, label %192, label %.loopexit24

; <label>:192:                                    ; preds = %187
  %.010.lcssa21 = phi %struct.fileinfo* [ %.010.ph49, %187 ]
  %193 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %194 = load i8, i8* %193, align 1
  %195 = trunc i8 %194 to i1
  br i1 %195, label %196, label %.loopexit

; <label>:196:                                    ; preds = %192
  %197 = getelementptr [38 x i8], [38 x i8]* @.str.84.273, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %197)
  br label %.loopexit

.loopexit24.loopexit:                             ; preds = %140
  %.117.ph = phi i8* [ %145, %140 ]
  br label %.loopexit24

.loopexit24:                                      ; preds = %.loopexit24.loopexit, %187
  %.01034 = phi %struct.fileinfo* [ %.010.ph49, %187 ], [ %.010.ph49, %.loopexit24.loopexit ]
  %.0229 = phi %struct.fileinfo* [ %.02.ph50, %187 ], [ %.02.ph50, %.loopexit24.loopexit ]
  %.117 = phi i8* [ %190, %187 ], [ %.117.ph, %.loopexit24.loopexit ]
  %198 = icmp ne i8* %.117, null
  br i1 %198, label %.lr.ph47.preheader, label %._crit_edge48

.lr.ph47.preheader:                               ; preds = %.loopexit24
  br label %.lr.ph47

.lr.ph47:                                         ; preds = %.lr.ph47.preheader, %296
  %.21845 = phi i8* [ %298, %296 ], [ %.117, %.lr.ph47.preheader ]
  call void @unroll_loop(i32 135)
  %199 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %200 = load i8, i8* %199, align 1
  %201 = trunc i8 %200 to i1
  br i1 %201, label %202, label %204

; <label>:202:                                    ; preds = %.lr.ph47
  %203 = getelementptr [14 x i8], [14 x i8]* @.str.85.274, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %203, i8* %.21845)
  br label %204

; <label>:204:                                    ; preds = %.lr.ph47, %202
  %205 = call i64 @strlen(i8* %.21845) #14
  %206 = icmp ult i64 %205, 12
  br i1 %206, label %207, label %222

; <label>:207:                                    ; preds = %204
  %208 = call i8* @strchr(i8* %.21845, i32 45) #14
  %209 = icmp ne i8* %208, null
  br i1 %209, label %210, label %222

; <label>:210:                                    ; preds = %207
  %211 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %212 = load i8, i8* %211, align 1
  %213 = trunc i8 %212 to i1
  br i1 %213, label %214, label %216

; <label>:214:                                    ; preds = %210
  %215 = getelementptr [7 x i8], [7 x i8]* @.str.86.275, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %215)
  br label %216

; <label>:216:                                    ; preds = %210, %214
  %217 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %218 = call i8* @strcpy(i8* %217, i8* %.21845) #8, !track !335
  %219 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %220 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %221 = call i8* @strcat(i8* %219, i8* %220) #8, !track !336
  br label %296

; <label>:222:                                    ; preds = %207, %204
  %223 = call i64 @strlen(i8* %.21845) #14
  %224 = icmp ult i64 %223, 12
  br i1 %224, label %225, label %247

; <label>:225:                                    ; preds = %222
  %226 = call i8* @strchr(i8* %.21845, i32 58) #14
  %227 = icmp ne i8* %226, null
  br i1 %227, label %228, label %247

; <label>:228:                                    ; preds = %225
  %229 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %230 = load i8, i8* %229, align 1
  %231 = trunc i8 %230 to i1
  br i1 %231, label %232, label %234

; <label>:232:                                    ; preds = %228
  %233 = getelementptr [7 x i8], [7 x i8]* @.str.87.276, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %233)
  br label %234

; <label>:234:                                    ; preds = %228, %232
  %235 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %236 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %237 = call i64 @strlen(i8* %236) #14
  %238 = sub i64 32, %237
  %239 = sub i64 %238, 1
  %240 = call i8* @strncat(i8* %235, i8* %.21845, i64 %239) #8, !track !337
  %241 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %242 = load i8, i8* %241, align 1
  %243 = trunc i8 %242 to i1
  br i1 %243, label %244, label %296

; <label>:244:                                    ; preds = %234
  %245 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %246 = getelementptr [17 x i8], [17 x i8]* @.str.88.277, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %246, i8* %245)
  br label %296

; <label>:247:                                    ; preds = %225, %222
  %248 = call i8* @strchr(i8* %.21845, i32 91) #14
  %249 = icmp ne i8* %248, null
  br i1 %249, label %250, label %256

; <label>:250:                                    ; preds = %247
  %251 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %252 = load i8, i8* %251, align 1
  %253 = trunc i8 %252 to i1
  br i1 %253, label %254, label %296

; <label>:254:                                    ; preds = %250
  %255 = getelementptr [8 x i8], [8 x i8]* @.str.89.278, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %255)
  br label %296

; <label>:256:                                    ; preds = %247
  %257 = call i8* @strchr(i8* %.21845, i32 40) #14
  %258 = icmp ne i8* %257, null
  br i1 %258, label %259, label %290

; <label>:259:                                    ; preds = %256
  %260 = call i64 @strlen(i8* %.21845) #14
  %261 = trunc i64 %260 to i32
  %262 = icmp slt i32 0, %261
  br i1 %262, label %.lr.ph43.preheader, label %._crit_edge

.lr.ph43.preheader:                               ; preds = %259
  br label %.lr.ph43

.lr.ph43:                                         ; preds = %.lr.ph43.preheader, %277
  %indvars.iv = phi i64 [ %indvars.iv.next, %277 ], [ 0, %.lr.ph43.preheader ]
  %.1741 = phi i32 [ %.39, %277 ], [ 0, %.lr.ph43.preheader ]
  %.01340 = phi i32 [ %.215, %277 ], [ 0, %.lr.ph43.preheader ]
  call void @unroll_loop(i32 136)
  %263 = getelementptr inbounds i8, i8* %.21845, i64 %indvars.iv
  %264 = load i8, i8* %263, align 1
  %265 = sext i8 %264 to i32
  switch i32 %265, label %277 [
    i32 68, label %275
    i32 69, label %273
    i32 44, label %266
    i32 82, label %269
    i32 87, label %271
  ]

; <label>:266:                                    ; preds = %.lr.ph43
  %267 = icmp eq i32 %.1741, 0
  %268 = shl i32 %.01340, 3
  %.114 = select i1 %267, i32 0, i32 %268
  %.28 = select i1 %267, i32 1, i32 %.1741
  br label %277

; <label>:269:                                    ; preds = %.lr.ph43
  %270 = or i32 %.01340, 4
  br label %277

; <label>:271:                                    ; preds = %.lr.ph43
  %272 = or i32 %.01340, 2
  br label %277

; <label>:273:                                    ; preds = %.lr.ph43
  %274 = or i32 %.01340, 1
  br label %277

; <label>:275:                                    ; preds = %.lr.ph43
  %276 = or i32 %.01340, 2
  br label %277

; <label>:277:                                    ; preds = %269, %271, %273, %275, %.lr.ph43, %266
  %.215 = phi i32 [ %276, %275 ], [ %274, %273 ], [ %272, %271 ], [ %270, %269 ], [ %.01340, %.lr.ph43 ], [ %.114, %266 ]
  %.39 = phi i32 [ %.1741, %275 ], [ %.1741, %273 ], [ %.1741, %271 ], [ %.1741, %269 ], [ %.1741, %.lr.ph43 ], [ %.28, %266 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %278 = call i64 @strlen(i8* %.21845) #14
  %279 = trunc i64 %278 to i32
  %280 = sext i32 %279 to i64
  %281 = icmp slt i64 %indvars.iv.next, %280
  br i1 %281, label %.lr.ph43, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %277
  %.013.lcssa.ph = phi i32 [ %.215, %277 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %259
  %.013.lcssa = phi i32 [ 0, %259 ], [ %.013.lcssa.ph, %._crit_edge.loopexit ]
  %282 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 5
  store i32 %.013.lcssa, i32* %282, align 4
  %283 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %284 = load i8, i8* %283, align 1
  %285 = trunc i8 %284 to i1
  br i1 %285, label %286, label %296

; <label>:286:                                    ; preds = %._crit_edge
  %287 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 5
  %288 = load i32, i32* %287, align 4
  %289 = getelementptr [21 x i8], [21 x i8]* @.str.90.279, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %289, i32 %288)
  br label %296

; <label>:290:                                    ; preds = %256
  %291 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %292 = load i8, i8* %291, align 1
  %293 = trunc i8 %292 to i1
  br i1 %293, label %294, label %296

; <label>:294:                                    ; preds = %290
  %295 = getelementptr [18 x i8], [18 x i8]* @.str.91.280, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %295)
  br label %296

; <label>:296:                                    ; preds = %234, %244, %._crit_edge, %286, %290, %294, %254, %250, %216
  %297 = getelementptr [2 x i8], [2 x i8]* @.str.42.260, i32 0, i32 0
  %298 = call i8* @strtok(i8* null, i8* %297) #8, !track !338
  %299 = icmp ne i8* %298, null
  br i1 %299, label %.lr.ph47, label %._crit_edge48.loopexit

._crit_edge48.loopexit:                           ; preds = %296
  br label %._crit_edge48

._crit_edge48:                                    ; preds = %._crit_edge48.loopexit, %.loopexit24
  %300 = call i64 @time(i64* null) #8
  store i64 %300, i64* %3, align 8
  %301 = call %struct.tm* @localtime(i64* %3) #8, !track !339
  %302 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %303 = getelementptr [18 x i8], [18 x i8]* @.str.92.281, i32 0, i32 0
  %304 = call i8* @strptime(i8* %302, i8* %303, %struct.tm* %301) #8, !track !340
  %305 = call i64 @rpl_mktime(%struct.tm* %301)
  store i64 %305, i64* %3, align 8
  %306 = getelementptr [27 x i8], [27 x i8]* @.str.93.282, i32 0, i32 0
  %307 = call i8* @getenv(i8* %306) #8
  %308 = icmp ne i8* %307, null
  br i1 %308, label %309, label %316

; <label>:309:                                    ; preds = %._crit_edge48
  %310 = call i32 @atoi(i8* %307) #14
  %311 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %312 = load i8, i8* %311, align 1
  %313 = trunc i8 %312 to i1
  br i1 %313, label %314, label %316

; <label>:314:                                    ; preds = %309
  %315 = getelementptr [25 x i8], [25 x i8]* @.str.94.283, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %315, i32 %310)
  br label %316

; <label>:316:                                    ; preds = %._crit_edge48, %314, %309
  %.03 = phi i32 [ %310, %309 ], [ %310, %314 ], [ 0, %._crit_edge48 ]
  %317 = icmp sge i32 %.03, 0
  br i1 %317, label %318, label %322

; <label>:318:                                    ; preds = %316
  %319 = sext i32 %.03 to i64
  %320 = load i64, i64* %3, align 8
  %321 = add nsw i64 %320, %319
  store i64 %321, i64* %3, align 8
  br label %327

; <label>:322:                                    ; preds = %316
  %323 = sub nsw i32 0, %.03
  %324 = sext i32 %323 to i64
  %325 = load i64, i64* %3, align 8
  %326 = sub nsw i64 %325, %324
  store i64 %326, i64* %3, align 8
  br label %327

; <label>:327:                                    ; preds = %322, %318
  %328 = load i64, i64* %3, align 8
  %329 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 3
  store i64 %328, i64* %329, align 8
  %330 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %331 = load i8, i8* %330, align 1
  %332 = trunc i8 %331 to i1
  br i1 %332, label %333, label %337

; <label>:333:                                    ; preds = %327
  %334 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 3
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr [16 x i8], [16 x i8]* @.str.68.284, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %336, i64 %335)
  br label %337

; <label>:337:                                    ; preds = %327, %333
  %338 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 4
  store i32 0, i32* %338, align 8
  %339 = icmp ne %struct.fileinfo* %.01034, null
  br i1 %339, label %347, label %340

; <label>:340:                                    ; preds = %337
  %341 = call noalias i8* @xmalloc(i64 64)
  %342 = bitcast i8* %341 to %struct.fileinfo*
  %343 = bitcast %struct.fileinfo* %342 to i8*
  %344 = bitcast %struct.fileinfo* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %343, i8* align 8 %344, i64 64, i1 false), !track !341
  %345 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %342, i32 0, i32 8
  store %struct.fileinfo* null, %struct.fileinfo** %345, align 8
  %346 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %342, i32 0, i32 7
  store %struct.fileinfo* null, %struct.fileinfo** %346, align 8
  br label %357

; <label>:347:                                    ; preds = %337
  %348 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 7
  store %struct.fileinfo* %.0229, %struct.fileinfo** %348, align 8
  %349 = call noalias i8* @xmalloc(i64 64)
  %350 = bitcast i8* %349 to %struct.fileinfo*
  %351 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0229, i32 0, i32 8
  store %struct.fileinfo* %350, %struct.fileinfo** %351, align 8
  %352 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.0229, i32 0, i32 8
  %353 = load %struct.fileinfo*, %struct.fileinfo** %352, align 8
  %354 = bitcast %struct.fileinfo* %353 to i8*
  %355 = bitcast %struct.fileinfo* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %354, i8* align 8 %355, i64 64, i1 false), !track !342
  %356 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %353, i32 0, i32 8
  store %struct.fileinfo* null, %struct.fileinfo** %356, align 8
  br label %357

; <label>:357:                                    ; preds = %347, %340
  %.111 = phi %struct.fileinfo* [ %.01034, %347 ], [ %342, %340 ]
  %.1 = phi %struct.fileinfo* [ %353, %347 ], [ %342, %340 ]
  %358 = call i64 @getline(i8** %5, i64* %2, %struct._IO_FILE* %8)
  %359 = trunc i64 %358 to i32
  %360 = icmp sgt i32 %359, 0
  br i1 %360, label %361, label %.outer

; <label>:361:                                    ; preds = %357
  %362 = load i8*, i8** %5, align 8
  %363 = call i32 @clean_line(i8* %362, i32 %359)
  %364 = icmp sle i32 %363, 0
  br i1 %364, label %.loopexit.loopexit1, label %.outer

.outer:                                           ; preds = %361, %357
  %.3 = phi i32 [ %359, %357 ], [ %363, %361 ]
  %365 = icmp sgt i32 %.3, 0
  br i1 %365, label %.lr.ph, label %.loopexit.loopexit1

.loopexit.loopexit:                               ; preds = %185
  %.212.ph = phi %struct.fileinfo* [ %.010.ph49, %185 ]
  br label %.loopexit

.loopexit.loopexit1:                              ; preds = %.outer, %361
  %.212.ph2 = phi %struct.fileinfo* [ %.111, %.outer ], [ %.111, %361 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit1, %.loopexit.loopexit, %157, %161, %167, %171, %192, %196, %.loopexit35
  %.212 = phi %struct.fileinfo* [ %.010.lcssa19, %157 ], [ %.010.lcssa19, %161 ], [ %.010.lcssa20, %167 ], [ %.010.lcssa20, %171 ], [ %.010.lcssa21, %192 ], [ %.010.lcssa21, %196 ], [ null, %.loopexit35 ], [ %.212.ph, %.loopexit.loopexit ], [ %.212.ph2, %.loopexit.loopexit1 ]
  %366 = load i8*, i8** %5, align 8
  call void @free(i8* %366) #8
  store i8* null, i8** %5, align 8
  %367 = call i32 @fclose(%struct._IO_FILE* %8)
  br label %368

; <label>:368:                                    ; preds = %.loopexit, %10
  %.0 = phi %struct.fileinfo* [ %.212, %.loopexit ], [ null, %10 ]
  ret %struct.fileinfo* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @clean_line(i8*, i32) #0 {
  %3 = icmp sle i32 %1, 0
  br i1 %3, label %._crit_edge, label %4

; <label>:4:                                      ; preds = %2
  %5 = sext i32 %1 to i64
  call void @unroll_loop(i32 130)
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %.lr.ph4, label %.critedge

.lr.ph4:                                          ; preds = %4
  br label %7

; <label>:7:                                      ; preds = %.lr.ph4, %.critedge1
  %indvars.iv2 = phi i64 [ %5, %.lr.ph4 ], [ %indvars.iv.next, %.critedge1 ]
  %8 = sub nsw i64 %indvars.iv2, 1
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %11, 10
  br i1 %12, label %.critedge1, label %13

; <label>:13:                                     ; preds = %7
  %14 = getelementptr inbounds i8, i8* %0, i64 %8
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 13
  br i1 %17, label %.critedge1, label %..critedge_crit_edge5

.critedge1:                                       ; preds = %7, %13
  %indvars.iv.next = add nsw i64 %indvars.iv2, -1
  %18 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv.next
  store i8 0, i8* %18, align 1
  call void @unroll_loop(i32 130)
  %19 = icmp sgt i64 %indvars.iv.next, 0
  br i1 %19, label %7, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %.critedge1
  %split = phi i64 [ %indvars.iv.next, %.critedge1 ]
  br label %.critedge

..critedge_crit_edge5:                            ; preds = %13
  %split6 = phi i64 [ %indvars.iv2, %13 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge5, %..critedge_crit_edge, %4
  %.02.lcssa.wide = phi i64 [ %split6, %..critedge_crit_edge5 ], [ %split, %..critedge_crit_edge ], [ %5, %4 ]
  %20 = trunc i64 %.02.lcssa.wide to i32
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %._crit_edge

; <label>:22:                                     ; preds = %.critedge
  %23 = load i8, i8* %0, align 1
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %22
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %29
  %.013 = phi i8* [ %30, %29 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 131)
  %25 = load i8, i8* %.013, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 9
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %.lr.ph
  store i8 32, i8* %.013, align 1
  br label %29

; <label>:29:                                     ; preds = %.lr.ph, %28
  %30 = getelementptr inbounds i8, i8* %.013, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = icmp ne i8 %31, 0
  br i1 %32, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %29
  %.0.ph = phi i32 [ %20, %29 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %22, %.critedge, %2
  %.0 = phi i32 [ 0, %2 ], [ 0, %.critedge ], [ %20, %22 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @eat_carets(i8*) #0 {
  br label %2

; <label>:2:                                      ; preds = %10, %1
  %.0 = phi i8* [ %0, %1 ], [ %12, %10 ]
  call void @unroll_loop(i32 137)
  %3 = load i8, i8* %.0, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %2
  %7 = load i8, i8* %.0, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 94
  br label %10

; <label>:10:                                     ; preds = %6, %2
  %11 = phi i1 [ false, %2 ], [ %9, %6 ]
  %12 = getelementptr inbounds i8, i8* %.0, i32 1
  br i1 %11, label %2, label %13

; <label>:13:                                     ; preds = %10
  %.0.lcssa = phi i8* [ %.0, %10 ]
  %14 = load i8, i8* %.0.lcssa, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %75

; <label>:17:                                     ; preds = %13
  %18 = load i8, i8* %.0.lcssa, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %17
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %69
  %.18 = phi i8* [ %71, %69 ], [ %.0.lcssa, %.lr.ph.preheader ]
  %.017 = phi i8* [ %70, %69 ], [ %.0.lcssa, %.lr.ph.preheader ]
  call void @unroll_loop(i32 138)
  %21 = load i8, i8* %.18, align 1
  %22 = zext i8 %21 to i32
  %23 = icmp eq i32 %22, 94
  br i1 %23, label %24, label %69

; <label>:24:                                     ; preds = %.lr.ph
  %25 = getelementptr inbounds i8, i8* %.18, i32 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([256 x i8]* @char_prop to [0 x i8]*), i64 0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = and i32 %30, 64
  %32 = icmp ne i32 %31, 0
  %33 = zext i8 %26 to i32
  br i1 %32, label %34, label %65

; <label>:34:                                     ; preds = %24
  %35 = icmp sle i32 %33, 57
  %36 = zext i8 %26 to i32
  br i1 %35, label %37, label %40

; <label>:37:                                     ; preds = %34
  %38 = sub nsw i32 %36, 48
  %39 = trunc i32 %38 to i8
  br label %45

; <label>:40:                                     ; preds = %34
  %41 = sub nsw i32 %36, 65
  %42 = and i32 %41, 7
  %43 = add nsw i32 %42, 10
  %44 = trunc i32 %43 to i8
  br label %45

; <label>:45:                                     ; preds = %40, %37
  %.02 = phi i8 [ %39, %37 ], [ %44, %40 ]
  %46 = sext i8 %.02 to i32
  %47 = shl i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %25, i32 1
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = icmp sle i32 %51, 57
  %53 = sext i8 %48 to i32
  %54 = zext i8 %50 to i32
  br i1 %52, label %55, label %59

; <label>:55:                                     ; preds = %45
  %56 = add nsw i32 %53, %54
  %57 = sub nsw i32 %56, 48
  %58 = trunc i32 %57 to i8
  br label %69

; <label>:59:                                     ; preds = %45
  %60 = sub nsw i32 %54, 65
  %61 = and i32 %60, 15
  %62 = add nsw i32 %53, %61
  %63 = add nsw i32 %62, 10
  %64 = trunc i32 %63 to i8
  br label %69

; <label>:65:                                     ; preds = %24
  %66 = icmp eq i32 %33, 95
  %67 = zext i8 %26 to i32
  %68 = icmp eq i32 %67, 47
  %spec.select = select i1 %68, i8 63, i8 %26
  %.25 = select i1 %66, i8 32, i8 %spec.select
  br label %69

; <label>:69:                                     ; preds = %59, %55, %65, %.lr.ph
  %.4 = phi i8 [ %21, %.lr.ph ], [ %58, %55 ], [ %64, %59 ], [ %.25, %65 ]
  %.3 = phi i8* [ %.18, %.lr.ph ], [ %49, %59 ], [ %49, %55 ], [ %25, %65 ]
  store i8 %.4, i8* %.017, align 1
  %70 = getelementptr inbounds i8, i8* %.017, i32 1
  %71 = getelementptr inbounds i8, i8* %.3, i32 1
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %69
  %.01.lcssa.ph = phi i8* [ %70, %69 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %17
  %.01.lcssa = phi i8* [ %.0.lcssa, %17 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.01.lcssa, align 1
  br label %75

; <label>:75:                                     ; preds = %._crit_edge, %13
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @strcat(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strncat(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime(i64*) #2

; Function Attrs: nounwind
declare dso_local i8* @strptime(i8*, i8*, %struct.tm*) #2

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @symperms(i8*) #0 {
  %2 = call i64 @strlen(i8* %0) #14
  %3 = icmp ult i64 %2, 9
  br i1 %3, label %34, label %.preheader

.preheader:                                       ; preds = %1
  br label %4

; <label>:4:                                      ; preds = %.preheader, %27
  %.016 = phi i8* [ %33, %27 ], [ %0, %.preheader ]
  %.025 = phi i32 [ %31, %27 ], [ 0, %.preheader ]
  %.034 = phi i32 [ %32, %27 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 139)
  %5 = shl i32 %.025, 3
  %6 = load i8, i8* %.016, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp eq i32 %7, 114
  %9 = zext i1 %8 to i32
  %10 = shl i32 %9, 2
  %11 = getelementptr inbounds i8, i8* %.016, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp eq i32 %13, 119
  %15 = zext i1 %14 to i32
  %16 = shl i32 %15, 1
  %17 = add nsw i32 %10, %16
  %18 = getelementptr inbounds i8, i8* %.016, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 120
  br i1 %21, label %27, label %22

; <label>:22:                                     ; preds = %4
  %23 = getelementptr inbounds i8, i8* %.016, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 115
  br label %27

; <label>:27:                                     ; preds = %22, %4
  %28 = phi i1 [ true, %4 ], [ %26, %22 ]
  %29 = zext i1 %28 to i32
  %30 = add nsw i32 %17, %29
  %31 = add nsw i32 %5, %30
  %32 = add nuw nsw i32 %.034, 1
  %33 = getelementptr inbounds i8, i8* %.016, i64 3
  %exitcond = icmp ne i32 %32, 3
  br i1 %exitcond, label %4, label %.loopexit

.loopexit:                                        ; preds = %27
  %.0.ph = phi i32 [ %31, %27 ]
  br label %34

; <label>:34:                                     ; preds = %.loopexit, %1
  %.0 = phi i32 [ 0, %1 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ftp_index(i8*, %struct.url*, %struct.fileinfo*) #0 {
  %4 = alloca i64, align 8, !track !343
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %6 = icmp ne %struct._IO_FILE* %5, null
  br i1 %6, label %16, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr [3 x i8], [3 x i8]* @.str.3.328, i32 0, i32 0
  %9 = call %struct._IO_FILE* @fopen(i8* %0, i8* %8), !track !344
  %10 = icmp ne %struct._IO_FILE* %9, null
  br i1 %10, label %18, label %11

; <label>:11:                                     ; preds = %7
  %12 = call i32* @__errno_location() #15
  %13 = load i32, i32* %12, align 4
  %14 = call i8* @strerror(i32 %13) #8
  %15 = getelementptr [8 x i8], [8 x i8]* @.str.1.256, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %15, i8* %0, i8* %14)
  br label %219

; <label>:16:                                     ; preds = %3
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  br label %18

; <label>:18:                                     ; preds = %7, %16
  %.02 = phi %struct._IO_FILE* [ %17, %16 ], [ %9, %7 ]
  %19 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 10
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %44

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 10
  %24 = load i8*, i8** %23, align 8
  %25 = call i8* @url_escape(i8* %24)
  %26 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 11
  %27 = load i8*, i8** %26, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %22
  %30 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 11
  %31 = load i8*, i8** %30, align 8
  %32 = call i8* @url_escape(i8* %31)
  br label %33

; <label>:33:                                     ; preds = %22, %29
  %34 = phi i8* [ %32, %29 ], [ null, %22 ]
  %35 = icmp ne i8* %34, null
  br i1 %35, label %36, label %40

; <label>:36:                                     ; preds = %33
  %37 = getelementptr [2 x i8], [2 x i8]* @.str.4.286, i32 0, i32 0
  %38 = getelementptr [2 x i8], [2 x i8]* @.str.5.329, i32 0, i32 0
  %39 = call i8* (i8*, ...) @concat_strings(i8* %25, i8* %37, i8* %34, i8* %38, i8* null)
  br label %43

; <label>:40:                                     ; preds = %33
  %41 = getelementptr [2 x i8], [2 x i8]* @.str.5.329, i32 0, i32 0
  %42 = call i8* (i8*, ...) @concat_strings(i8* %25, i8* %41, i8* null)
  br label %43

; <label>:43:                                     ; preds = %36, %40
  %.03 = phi i8* [ %39, %36 ], [ %42, %40 ]
  call void @free(i8* %25) #8
  call void @free(i8* %34) #8
  br label %47

; <label>:44:                                     ; preds = %18
  %45 = getelementptr [1 x i8], [1 x i8]* @.str.6.311, i32 0, i32 0
  %46 = call noalias i8* @xstrdup(i8* %45)
  br label %47

; <label>:47:                                     ; preds = %44, %43
  %.1 = phi i8* [ %.03, %43 ], [ %46, %44 ]
  %48 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 8
  %49 = load i8*, i8** %48, align 8
  %50 = call i8* @html_quote_string(i8* %49)
  %51 = getelementptr [52 x i8], [52 x i8]* @.str.7.330, i32 0, i32 0
  %52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %51)
  %53 = getelementptr [22 x i8], [22 x i8]* @.str.8.331, i32 0, i32 0
  %54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %53)
  %55 = getelementptr [22 x i8], [22 x i8]* @.str.9.332, i32 0, i32 0
  %56 = call i8* @gettext(i8* %55) #8, !track !345
  %57 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %56, i8* %50, i8* %58, i32 %60)
  %62 = getelementptr [29 x i8], [29 x i8]* @.str.10.333, i32 0, i32 0
  %63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %62)
  %64 = getelementptr [22 x i8], [22 x i8]* @.str.9.332, i32 0, i32 0
  %65 = call i8* @gettext(i8* %64) #8, !track !346
  %66 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %65, i8* %50, i8* %67, i32 %69)
  %71 = getelementptr [18 x i8], [18 x i8]* @.str.11.334, i32 0, i32 0
  %72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %71)
  %73 = icmp ne %struct.fileinfo* %2, null
  br i1 %73, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %47
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %206
  %.014 = phi %struct.fileinfo* [ %209, %206 ], [ %2, %.lr.ph.preheader ]
  call void @unroll_loop(i32 140)
  %74 = getelementptr [3 x i8], [3 x i8]* @.str.12.335, i32 0, i32 0
  %75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %74)
  %76 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 3
  %77 = load i64, i64* %76, align 8
  %78 = icmp ne i64 %77, -1
  br i1 %78, label %79, label %108

; <label>:79:                                     ; preds = %.lr.ph
  %80 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 3
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %4, align 8
  %82 = call %struct.tm* @localtime(i64* %4) #8, !track !347
  %83 = getelementptr inbounds %struct.tm, %struct.tm* %82, i32 0, i32 5
  %84 = load i32, i32* %83, align 4
  %85 = add nsw i32 %84, 1900
  %86 = getelementptr inbounds %struct.tm, %struct.tm* %82, i32 0, i32 4
  %87 = load i32, i32* %86, align 8
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [12 x i8*], [12 x i8*]* @ftp_index.months, i64 0, i64 %88
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %struct.tm, %struct.tm* %82, i32 0, i32 3
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr [12 x i8], [12 x i8]* @.str.25.336, i32 0, i32 0
  %94 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %93, i32 %85, i8* %90, i32 %92)
  %95 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 4
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %105

; <label>:98:                                     ; preds = %79
  %99 = getelementptr inbounds %struct.tm, %struct.tm* %82, i32 0, i32 2
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %struct.tm, %struct.tm* %82, i32 0, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr [12 x i8], [12 x i8]* @.str.26.337, i32 0, i32 0
  %104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %103, i32 %100, i32 %102)
  br label %112

; <label>:105:                                    ; preds = %79
  %106 = getelementptr [8 x i8], [8 x i8]* @.str.27.338, i32 0, i32 0
  %107 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %106)
  br label %112

; <label>:108:                                    ; preds = %.lr.ph
  %109 = getelementptr [20 x i8], [20 x i8]* @.str.28.339, i32 0, i32 0
  %110 = call i8* @gettext(i8* %109) #8
  %111 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %110)
  br label %112

; <label>:112:                                    ; preds = %98, %105, %108
  %113 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 0
  %114 = load i32, i32* %113, align 8
  switch i32 %114, label %127 [
    i32 0, label %115
    i32 1, label %119
    i32 2, label %123
  ]

; <label>:115:                                    ; preds = %112
  %116 = getelementptr [13 x i8], [13 x i8]* @.str.29.340, i32 0, i32 0
  %117 = call i8* @gettext(i8* %116) #8
  %118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %117)
  br label %131

; <label>:119:                                    ; preds = %112
  %120 = getelementptr [13 x i8], [13 x i8]* @.str.30.341, i32 0, i32 0
  %121 = call i8* @gettext(i8* %120) #8
  %122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %121)
  br label %131

; <label>:123:                                    ; preds = %112
  %124 = getelementptr [13 x i8], [13 x i8]* @.str.31.342, i32 0, i32 0
  %125 = call i8* @gettext(i8* %124) #8
  %126 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %125)
  br label %131

; <label>:127:                                    ; preds = %112
  %128 = getelementptr [13 x i8], [13 x i8]* @.str.32.343, i32 0, i32 0
  %129 = call i8* @gettext(i8* %128) #8
  %130 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %129)
  br label %131

; <label>:131:                                    ; preds = %127, %123, %119, %115
  %132 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 1
  %133 = load i8*, i8** %132, align 8
  %134 = call i8* @html_quote_string(i8* %133)
  %135 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 1
  %136 = load i8*, i8** %135, align 8
  %137 = call i8* @url_escape_unsafe_and_reserved(i8* %136)
  %138 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %141 = load i32, i32* %140, align 8
  %142 = getelementptr [23 x i8], [23 x i8]* @.str.33.344, i32 0, i32 0
  %143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %142, i8* %.1, i8* %139, i32 %141)
  %144 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 8
  %145 = load i8*, i8** %144, align 8
  %146 = load i8, i8* %145, align 1
  %147 = sext i8 %146 to i32
  %148 = icmp ne i32 %147, 47
  br i1 %148, label %149, label %151

; <label>:149:                                    ; preds = %131
  %150 = call i32 @_IO_putc(i32 47, %struct._IO_FILE* %.02)
  br label %151

; <label>:151:                                    ; preds = %149, %131
  %152 = getelementptr [3 x i8], [3 x i8]* @.str.34.345, i32 0, i32 0
  %153 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %152, i8* %50)
  %154 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 8
  %155 = load i8*, i8** %154, align 8
  %156 = load i8, i8* %155, align 1
  %157 = icmp ne i8 %156, 0
  br i1 %157, label %158, label %160

; <label>:158:                                    ; preds = %151
  %159 = call i32 @_IO_putc(i32 47, %struct._IO_FILE* %.02)
  br label %160

; <label>:160:                                    ; preds = %158, %151
  %161 = getelementptr [3 x i8], [3 x i8]* @.str.34.345, i32 0, i32 0
  %162 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %161, i8* %137)
  %163 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %168

; <label>:166:                                    ; preds = %160
  %167 = call i32 @_IO_putc(i32 47, %struct._IO_FILE* %.02)
  br label %168

; <label>:168:                                    ; preds = %166, %160
  %169 = getelementptr [5 x i8], [5 x i8]* @.str.35.346, i32 0, i32 0
  %170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %169, i8* %134)
  %171 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 0
  %172 = load i32, i32* %171, align 8
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %174, label %176

; <label>:174:                                    ; preds = %168
  %175 = call i32 @_IO_putc(i32 47, %struct._IO_FILE* %.02)
  br label %176

; <label>:176:                                    ; preds = %174, %168
  %177 = getelementptr [6 x i8], [6 x i8]* @.str.36.347, i32 0, i32 0
  %178 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %177)
  %179 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 0
  %180 = load i32, i32* %179, align 8
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %189

; <label>:182:                                    ; preds = %176
  %183 = getelementptr [12 x i8], [12 x i8]* @.str.37.348, i32 0, i32 0
  %184 = call i8* @gettext(i8* %183) #8, !track !348
  %185 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 2
  %186 = load i64, i64* %185, align 8
  %187 = call i8* @number_to_static_string(i64 %186)
  %188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %184, i8* %187)
  br label %206

; <label>:189:                                    ; preds = %176
  %190 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 0
  %191 = load i32, i32* %190, align 8
  %192 = icmp eq i32 %191, 2
  br i1 %192, label %193, label %206

; <label>:193:                                    ; preds = %189
  %194 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 6
  %195 = load i8*, i8** %194, align 8
  %196 = icmp ne i8* %195, null
  br i1 %196, label %197, label %200

; <label>:197:                                    ; preds = %193
  %198 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 6
  %199 = load i8*, i8** %198, align 8
  br label %202

; <label>:200:                                    ; preds = %193
  %201 = getelementptr [6 x i8], [6 x i8]* @.str.39.349, i32 0, i32 0
  br label %202

; <label>:202:                                    ; preds = %200, %197
  %203 = phi i8* [ %199, %197 ], [ %201, %200 ]
  %204 = getelementptr [6 x i8], [6 x i8]* @.str.38.350, i32 0, i32 0
  %205 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %204, i8* %203)
  br label %206

; <label>:206:                                    ; preds = %189, %202, %182
  %207 = call i32 @_IO_putc(i32 10, %struct._IO_FILE* %.02)
  call void @free(i8* %134) #8
  call void @free(i8* %137) #8
  %208 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %.014, i32 0, i32 8
  %209 = load %struct.fileinfo*, %struct.fileinfo** %208, align 8
  %210 = icmp ne %struct.fileinfo* %209, null
  br i1 %210, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %206
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %47
  %211 = getelementptr [24 x i8], [24 x i8]* @.str.40.351, i32 0, i32 0
  %212 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.02, i8* %211)
  call void @free(i8* %50) #8
  call void @free(i8* %.1) #8
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %214 = icmp ne %struct._IO_FILE* %213, null
  br i1 %214, label %217, label %215

; <label>:215:                                    ; preds = %._crit_edge
  %216 = call i32 @fclose(%struct._IO_FILE* %.02)
  br label %219

; <label>:217:                                    ; preds = %._crit_edge
  %218 = call i32 @fflush(%struct._IO_FILE* %.02)
  br label %219

; <label>:219:                                    ; preds = %215, %217, %11
  %.0 = phi i32 [ 19, %11 ], [ 7, %217 ], [ 7, %215 ]
  ret i32 %.0
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.hash_table* @hash_table_new(i32, i64 (i8*)*, i32 (i8*, i8*)*) #7 {
  %4 = call noalias i8* @xmalloc(i64 40)
  %5 = bitcast i8* %4 to %struct.hash_table*
  %6 = icmp ne i64 (i8*)* %1, null
  %.hash_pointer = select i1 %6, i64 (i8*)* %1, i64 (i8*)* @hash_pointer
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 0
  store i64 (i8*)* %.hash_pointer, i64 (i8*)** %7, align 8
  %8 = icmp ne i32 (i8*, i8*)* %2, null
  %9 = select i1 %8, i32 (i8*, i8*)* %2, i32 (i8*, i8*)* @cmp_pointer
  %10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 1
  store i32 (i8*, i8*)* %9, i32 (i8*, i8*)** %10, align 8
  %11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 6
  store i32 0, i32* %11, align 4
  %12 = sitofp i32 %0 to double
  %13 = fdiv double %12, 7.500000e-01
  %14 = fadd double 1.000000e+00, %13
  %15 = fptosi double %14 to i32
  %16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 6
  %17 = call i32 @prime_size(i32 %15, i32* %16)
  %18 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 3
  store i32 %17, i32* %18, align 8
  %19 = sitofp i32 %17 to double
  %20 = fmul double %19, 7.500000e-01
  %21 = fptosi double %20 to i32
  %22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 5
  store i32 %21, i32* %22, align 8
  %23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = sext i32 %24 to i64
  %26 = mul i64 %25, 16
  %27 = call noalias i8* @xmalloc(i64 %26)
  %28 = bitcast i8* %27 to %struct.param_token*
  %29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 2
  store %struct.param_token* %28, %struct.param_token** %29, align 8
  %30 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 2
  %31 = load %struct.param_token*, %struct.param_token** %30, align 8
  %32 = bitcast %struct.param_token* %31 to i8*
  %33 = sext i32 %17 to i64
  %34 = mul i64 %33, 16
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 -1, i64 %34, i1 false)
  %35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 4
  store i32 0, i32* %35, align 4
  ret %struct.hash_table* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @hash_pointer(i8*) #0 {
  %2 = ptrtoint i8* %0 to i64
  %3 = shl i64 %2, 12
  %4 = add i64 %2, %3
  %5 = lshr i64 %4, 22
  %6 = xor i64 %4, %5
  %7 = shl i64 %6, 4
  %8 = add i64 %6, %7
  %9 = lshr i64 %8, 9
  %10 = xor i64 %8, %9
  %11 = shl i64 %10, 10
  %12 = add i64 %10, %11
  %13 = lshr i64 %12, 2
  %14 = xor i64 %12, %13
  %15 = shl i64 %14, 7
  %16 = add i64 %14, %15
  %17 = lshr i64 %16, 12
  %18 = xor i64 %16, %17
  %19 = shl i64 %18, 44
  %20 = add i64 %18, %19
  %21 = lshr i64 %20, 54
  %22 = xor i64 %20, %21
  %23 = shl i64 %22, 36
  %24 = add i64 %22, %23
  %25 = lshr i64 %24, 41
  %26 = xor i64 %24, %25
  %27 = shl i64 %26, 42
  %28 = add i64 %26, %27
  %29 = lshr i64 %28, 34
  %30 = xor i64 %28, %29
  %31 = shl i64 %30, 39
  %32 = add i64 %30, %31
  %33 = lshr i64 %32, 44
  %34 = xor i64 %32, %33
  ret i64 %34
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmp_pointer(i8*, i8*) #0 {
  %3 = icmp eq i8* %0, %1
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @prime_size(i32, i32*) #0 {
  %3 = load i32, i32* %1, align 4
  %4 = sext i32 %3 to i64
  %5 = icmp ult i64 %4, 71
  br i1 %5, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %14
  %.02 = phi i64 [ %15, %14 ], [ %4, %.lr.ph.preheader ]
  call void @unroll_loop(i32 141)
  %6 = getelementptr inbounds [71 x i32], [71 x i32]* @prime_size.primes, i64 0, i64 %.02
  %7 = load i32, i32* %6, align 4
  %8 = icmp sge i32 %7, %0
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %.lr.ph
  %.0.lcssa1 = phi i64 [ %.02, %.lr.ph ]
  %10 = add i64 %.0.lcssa1, 1
  %11 = trunc i64 %10 to i32
  store i32 %11, i32* %1, align 4
  %12 = getelementptr inbounds [71 x i32], [71 x i32]* @prime_size.primes, i64 0, i64 %.0.lcssa1
  %13 = load i32, i32* %12, align 4
  ret i32 %13

; <label>:14:                                     ; preds = %.lr.ph
  %15 = add nuw nsw i64 %.02, 1
  %16 = icmp ult i64 %15, 71
  br i1 %16, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  call void @abort() #16
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @hash_table_destroy(%struct.hash_table*) #0 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %3 = load %struct.param_token*, %struct.param_token** %2, align 8
  %4 = bitcast %struct.param_token* %3 to i8*
  call void @free(i8* %4) #8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  store %struct.param_token* null, %struct.param_token** %5, align 8
  %6 = bitcast %struct.hash_table* %0 to i8*
  call void @free(i8* %6) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @hash_table_get(%struct.hash_table*, i8*) #7 {
  %3 = call %struct.param_token* @find_cell(%struct.hash_table* %0, i8* %1)
  %4 = getelementptr inbounds %struct.param_token, %struct.param_token* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, inttoptr (i64 -1 to i8*)
  br i1 %6, label %7, label %10

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.param_token, %struct.param_token* %3, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  br label %10

; <label>:10:                                     ; preds = %2, %7
  %.0 = phi i8* [ %9, %7 ], [ null, %2 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.param_token* @find_cell(%struct.hash_table*, i8*) #7 {
  %3 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %4 = load %struct.param_token*, %struct.param_token** %3, align 8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0
  %8 = load i64 (i8*)*, i64 (i8*)** %7, align 8
  %9 = call i64 %8(i8* %1)
  %10 = sext i32 %6 to i64
  %11 = urem i64 %9, %10
  %12 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i64 %11
  %13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 1
  %14 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %13, align 8
  %15 = getelementptr inbounds %struct.param_token, %struct.param_token* %12, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, inttoptr (i64 -1 to i8*)
  br i1 %17, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %2
  %18 = sub nsw i32 %6, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i64 %19
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %25
  %.02 = phi %struct.param_token* [ %28, %25 ], [ %12, %.lr.ph.preheader ]
  call void @unroll_loop(i32 2)
  %21 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 %14(i8* %1, i8* %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %.loopexit.loopexit, label %25

; <label>:25:                                     ; preds = %.lr.ph
  %26 = icmp ne %struct.param_token* %.02, %20
  %27 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i64 1
  %28 = select i1 %26, %struct.param_token* %27, %struct.param_token* %4
  %29 = getelementptr inbounds %struct.param_token, %struct.param_token* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, inttoptr (i64 -1 to i8*)
  br i1 %31, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph, %25
  %.0.lcssa.ph = phi %struct.param_token* [ %28, %25 ], [ %.02, %.lr.ph ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %2
  %.0.lcssa = phi %struct.param_token* [ %12, %2 ], [ %.0.lcssa.ph, %.loopexit.loopexit ]
  ret %struct.param_token* %.0.lcssa
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hash_table_get_pair(%struct.hash_table*, i8*, i8*, i8*) #0 {
  %5 = call %struct.param_token* @find_cell(%struct.hash_table* %0, i8* %1)
  %6 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, inttoptr (i64 -1 to i8*)
  br i1 %8, label %9, label %21

; <label>:9:                                      ; preds = %4
  %10 = icmp ne i8* %2, null
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %9
  %12 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = bitcast i8* %2 to i8**
  store i8* %13, i8** %14, align 8
  br label %15

; <label>:15:                                     ; preds = %11, %9
  %16 = icmp ne i8* %3, null
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %15
  %18 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i8* %3 to i8**
  store i8* %19, i8** %20, align 8
  br label %21

; <label>:21:                                     ; preds = %4, %15, %17
  %.0 = phi i32 [ 1, %17 ], [ 1, %15 ], [ 0, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hash_table_contains(%struct.hash_table*, i8*) #0 {
  %3 = call %struct.param_token* @find_cell(%struct.hash_table* %0, i8* %1)
  %4 = getelementptr inbounds %struct.param_token, %struct.param_token* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, inttoptr (i64 -1 to i8*)
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @hash_table_put(%struct.hash_table*, i8*, i8*) #0 {
  %4 = call %struct.param_token* @find_cell(%struct.hash_table* %0, i8* %1)
  %5 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ne i8* %6, inttoptr (i64 -1 to i8*)
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  store i8* %2, i8** %10, align 8
  br label %25

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 5
  %15 = load i32, i32* %14, align 8
  %16 = icmp sge i32 %13, %15
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %11
  call void @grow_hash_table(%struct.hash_table* %0)
  %18 = call %struct.param_token* @find_cell(%struct.hash_table* %0, i8* %1)
  br label %19

; <label>:19:                                     ; preds = %17, %11
  %.0 = phi %struct.param_token* [ %18, %17 ], [ %4, %11 ]
  %20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %20, align 4
  %23 = getelementptr inbounds %struct.param_token, %struct.param_token* %.0, i32 0, i32 0
  store i8* %1, i8** %23, align 8
  %24 = getelementptr inbounds %struct.param_token, %struct.param_token* %.0, i32 0, i32 1
  store i8* %2, i8** %24, align 8
  br label %25

; <label>:25:                                     ; preds = %19, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @grow_hash_table(%struct.hash_table*) #0 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0
  %3 = load i64 (i8*)*, i64 (i8*)** %2, align 8
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %5 = load %struct.param_token*, %struct.param_token** %4, align 8
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %7 = load %struct.param_token*, %struct.param_token** %6, align 8
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.param_token, %struct.param_token* %7, i64 %10
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = mul nsw i32 %13, 2
  %15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 6
  %16 = call i32 @prime_size(i32 %14, i32* %15)
  %17 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  store i32 %16, i32* %17, align 8
  %18 = sitofp i32 %16 to double
  %19 = fmul double %18, 7.500000e-01
  %20 = fptosi double %19 to i32
  %21 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 5
  store i32 %20, i32* %21, align 8
  %22 = sext i32 %16 to i64
  %23 = mul i64 %22, 16
  %24 = call noalias i8* @xmalloc(i64 %23)
  %25 = bitcast i8* %24 to %struct.param_token*
  %26 = bitcast %struct.param_token* %25 to i8*
  %27 = sext i32 %16 to i64
  %28 = mul i64 %27, 16
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 -1, i64 %28, i1 false)
  %29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  store %struct.param_token* %25, %struct.param_token** %29, align 8
  %30 = icmp ult %struct.param_token* %5, %11
  br i1 %30, label %.lr.ph5.preheader, label %._crit_edge6

.lr.ph5.preheader:                                ; preds = %1
  br label %.lr.ph5

.lr.ph5:                                          ; preds = %.lr.ph5.preheader, %55
  %.013 = phi %struct.param_token* [ %56, %55 ], [ %5, %.lr.ph5.preheader ]
  call void @unroll_loop(i32 142)
  %31 = getelementptr inbounds %struct.param_token, %struct.param_token* %.013, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %32, inttoptr (i64 -1 to i8*)
  br i1 %33, label %34, label %55

; <label>:34:                                     ; preds = %.lr.ph5
  %35 = getelementptr inbounds %struct.param_token, %struct.param_token* %.013, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = call i64 %3(i8* %36)
  %38 = sext i32 %16 to i64
  %39 = urem i64 %37, %38
  %40 = getelementptr inbounds %struct.param_token, %struct.param_token* %25, i64 %39
  %41 = getelementptr inbounds %struct.param_token, %struct.param_token* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, inttoptr (i64 -1 to i8*)
  br i1 %43, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %34
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.02 = phi %struct.param_token* [ %49, %.lr.ph ], [ %40, %.lr.ph.preheader ]
  call void @unroll_loop(i32 143)
  %44 = sub nsw i32 %16, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.param_token, %struct.param_token* %25, i64 %45
  %47 = icmp ne %struct.param_token* %.02, %46
  %48 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i64 1
  %49 = select i1 %47, %struct.param_token* %48, %struct.param_token* %25
  %50 = getelementptr inbounds %struct.param_token, %struct.param_token* %49, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp ne i8* %51, inttoptr (i64 -1 to i8*)
  br i1 %52, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi %struct.param_token* [ %49, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %34
  %.0.lcssa = phi %struct.param_token* [ %40, %34 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %53 = bitcast %struct.param_token* %.0.lcssa to i8*
  %54 = bitcast %struct.param_token* %.013 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 16, i1 false), !track !349
  br label %55

; <label>:55:                                     ; preds = %.lr.ph5, %._crit_edge
  %56 = getelementptr inbounds %struct.param_token, %struct.param_token* %.013, i32 1
  %57 = icmp ult %struct.param_token* %56, %11
  br i1 %57, label %.lr.ph5, label %._crit_edge6.loopexit

._crit_edge6.loopexit:                            ; preds = %55
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %._crit_edge6.loopexit, %1
  %58 = bitcast %struct.param_token* %5 to i8*
  call void @free(i8* %58) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hash_table_remove(%struct.hash_table*, i8*) #0 {
  %3 = call %struct.param_token* @find_cell(%struct.hash_table* %0, i8* %1)
  %4 = getelementptr inbounds %struct.param_token, %struct.param_token* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, inttoptr (i64 -1 to i8*)
  br i1 %6, label %7, label %._crit_edge9

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %11 = load %struct.param_token*, %struct.param_token** %10, align 8
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0
  %13 = load i64 (i8*)*, i64 (i8*)** %12, align 8
  %14 = getelementptr inbounds %struct.param_token, %struct.param_token* %3, i32 0, i32 0
  store i8* inttoptr (i64 -1 to i8*), i8** %14, align 8
  %15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %15, align 4
  %18 = sub nsw i32 %9, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.param_token, %struct.param_token* %11, i64 %19
  %21 = icmp ne %struct.param_token* %3, %20
  %22 = getelementptr inbounds %struct.param_token, %struct.param_token* %3, i64 1
  %23 = select i1 %21, %struct.param_token* %22, %struct.param_token* %11
  %24 = getelementptr inbounds %struct.param_token, %struct.param_token* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, inttoptr (i64 -1 to i8*)
  br i1 %26, label %.lr.ph8.preheader, label %._crit_edge9

.lr.ph8.preheader:                                ; preds = %7
  br label %.lr.ph8

.lr.ph8:                                          ; preds = %.lr.ph8.preheader, %52
  %.025 = phi %struct.param_token* [ %58, %52 ], [ %23, %.lr.ph8.preheader ]
  call void @unroll_loop(i32 144)
  %27 = getelementptr inbounds %struct.param_token, %struct.param_token* %.025, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i64 %13(i8* %28)
  %30 = sext i32 %9 to i64
  %31 = urem i64 %29, %30
  %32 = getelementptr inbounds %struct.param_token, %struct.param_token* %11, i64 %31
  %33 = getelementptr inbounds %struct.param_token, %struct.param_token* %32, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = icmp ne i8* %34, inttoptr (i64 -1 to i8*)
  br i1 %35, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph8
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %39
  %.014 = phi %struct.param_token* [ %45, %39 ], [ %32, %.lr.ph.preheader ]
  call void @unroll_loop(i32 145)
  %36 = getelementptr inbounds %struct.param_token, %struct.param_token* %.014, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %28, %37
  br i1 %38, label %.loopexit, label %39

; <label>:39:                                     ; preds = %.lr.ph
  %40 = sub nsw i32 %9, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.param_token, %struct.param_token* %11, i64 %41
  %43 = icmp ne %struct.param_token* %.014, %42
  %44 = getelementptr inbounds %struct.param_token, %struct.param_token* %.014, i64 1
  %45 = select i1 %43, %struct.param_token* %44, %struct.param_token* %11
  %46 = getelementptr inbounds %struct.param_token, %struct.param_token* %45, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = icmp ne i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %39
  %.01.lcssa.ph = phi %struct.param_token* [ %45, %39 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph8
  %.01.lcssa = phi %struct.param_token* [ %32, %.lr.ph8 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %49 = bitcast %struct.param_token* %.01.lcssa to i8*
  %50 = bitcast %struct.param_token* %.025 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 16, i1 false), !track !350
  %51 = getelementptr inbounds %struct.param_token, %struct.param_token* %.025, i32 0, i32 0
  store i8* inttoptr (i64 -1 to i8*), i8** %51, align 8
  br label %52

.loopexit:                                        ; preds = %.lr.ph
  br label %52

; <label>:52:                                     ; preds = %.loopexit, %._crit_edge
  %53 = sub nsw i32 %9, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.param_token, %struct.param_token* %11, i64 %54
  %56 = icmp ne %struct.param_token* %.025, %55
  %57 = getelementptr inbounds %struct.param_token, %struct.param_token* %.025, i64 1
  %58 = select i1 %56, %struct.param_token* %57, %struct.param_token* %11
  %59 = getelementptr inbounds %struct.param_token, %struct.param_token* %58, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = icmp ne i8* %60, inttoptr (i64 -1 to i8*)
  br i1 %61, label %.lr.ph8, label %._crit_edge9.loopexit

._crit_edge9.loopexit:                            ; preds = %52
  %.0.ph = phi i32 [ 1, %52 ]
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge9.loopexit, %7, %2
  %.0 = phi i32 [ 0, %2 ], [ 1, %7 ], [ %.0.ph, %._crit_edge9.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @hash_table_clear(%struct.hash_table*) #0 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %3 = load %struct.param_token*, %struct.param_token** %2, align 8
  %4 = bitcast %struct.param_token* %3 to i8*
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = mul i64 %7, 16
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -1, i64 %8, i1 false)
  %9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4
  store i32 0, i32* %9, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @hash_table_for_each(%struct.hash_table*, i32 (i8*, i8*, i8*)*, i8*) #0 {
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %5 = load %struct.param_token*, %struct.param_token** %4, align 8
  %6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %7 = load %struct.param_token*, %struct.param_token** %6, align 8
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.param_token, %struct.param_token* %7, i64 %10
  %12 = icmp ult %struct.param_token* %5, %11
  br i1 %12, label %.lr.ph4.preheader, label %._crit_edge

.lr.ph4.preheader:                                ; preds = %3
  br label %.lr.ph4

.lr.ph4:                                          ; preds = %.lr.ph4.preheader, %36
  %.02 = phi %struct.param_token* [ %37, %36 ], [ %5, %.lr.ph4.preheader ]
  call void @unroll_loop(i32 146)
  %13 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, inttoptr (i64 -1 to i8*)
  br i1 %15, label %16, label %36

; <label>:16:                                     ; preds = %.lr.ph4
  %17 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 %1(i8* %18, i8* %20, i8* %2)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %._crit_edge.loopexit1, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %16
  br label %.lr.ph

; <label>:23:                                     ; preds = %32
  %24 = load i8*, i8** %17, align 8
  %25 = load i8*, i8** %19, align 8
  %26 = call i32 %1(i8* %24, i8* %25, i8* %2)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %._crit_edge.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %23
  %28 = phi i8* [ %24, %23 ], [ %18, %.lr.ph.preheader ]
  call void @unroll_loop(i32 147)
  %29 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, %28
  br i1 %31, label %32, label %.loopexit

; <label>:32:                                     ; preds = %.lr.ph
  %33 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = icmp ne i8* %34, inttoptr (i64 -1 to i8*)
  br i1 %35, label %23, label %.loopexit

.loopexit:                                        ; preds = %.lr.ph, %32
  br label %36

; <label>:36:                                     ; preds = %.loopexit, %.lr.ph4
  %37 = getelementptr inbounds %struct.param_token, %struct.param_token* %.02, i32 1
  %38 = icmp ult %struct.param_token* %37, %11
  br i1 %38, label %.lr.ph4, label %._crit_edge.loopexit1

._crit_edge.loopexit:                             ; preds = %23
  br label %._crit_edge

._crit_edge.loopexit1:                            ; preds = %16, %36
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit1, %._crit_edge.loopexit, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @hash_table_iterate(%struct.hash_table*, %struct.hash_table_iterator*) #0 {
  %3 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %4 = load %struct.param_token*, %struct.param_token** %3, align 8
  %5 = bitcast %struct.param_token* %4 to i8*
  %6 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 2
  store i8* %5, i8** %6, align 8
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %8 = load %struct.param_token*, %struct.param_token** %7, align 8
  %9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.param_token, %struct.param_token* %8, i64 %11
  %13 = bitcast %struct.param_token* %12 to i8*
  %14 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 3
  store i8* %13, i8** %14, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hash_table_iter_next(%struct.hash_table_iterator*) #0 {
  %2 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %0, i32 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.param_token*
  %5 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %0, i32 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8* %6 to %struct.param_token*
  %8 = icmp ult %struct.param_token* %4, %7
  br i1 %8, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %22
  %.013 = phi %struct.param_token* [ %23, %22 ], [ %4, %.lr.ph.preheader ]
  call void @unroll_loop(i32 148)
  %9 = getelementptr inbounds %struct.param_token, %struct.param_token* %.013, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ne i8* %10, inttoptr (i64 -1 to i8*)
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %.lr.ph
  %.01.lcssa2 = phi %struct.param_token* [ %.013, %.lr.ph ]
  %13 = getelementptr inbounds %struct.param_token, %struct.param_token* %.01.lcssa2, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = getelementptr inbounds %struct.param_token, %struct.param_token* %.01.lcssa2, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %0, i32 0, i32 1
  store i8* %17, i8** %18, align 8
  %19 = getelementptr inbounds %struct.param_token, %struct.param_token* %.01.lcssa2, i64 1
  %20 = bitcast %struct.param_token* %19 to i8*
  %21 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %0, i32 0, i32 2
  store i8* %20, i8** %21, align 8
  br label %._crit_edge

; <label>:22:                                     ; preds = %.lr.ph
  %23 = getelementptr inbounds %struct.param_token, %struct.param_token* %.013, i32 1
  %24 = icmp ult %struct.param_token* %23, %7
  br i1 %24, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %22
  %.0.ph = phi i32 [ 0, %22 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1, %12
  %.0 = phi i32 [ 1, %12 ], [ 0, %1 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hash_table_count(%struct.hash_table*) #0 {
  %2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.hash_table* @make_string_hash_table(i32) #7 {
  %2 = call %struct.hash_table* @hash_table_new(i32 %0, i64 (i8*)* @hash_string, i32 (i8*, i8*)* @cmp_string)
  ret %struct.hash_table* %2
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @hash_string(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %._crit_edge

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %5
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.03 = phi i32 [ %14, %.lr.ph ], [ %3, %.lr.ph.preheader ]
  %.012 = phi i8* [ %15, %.lr.ph ], [ %6, %.lr.ph.preheader ]
  %10 = shl i32 %.03, 5
  %11 = sub i32 %10, %.03
  %12 = load i8, i8* %.012, align 1
  %13 = sext i8 %12 to i32
  %14 = add i32 %11, %13
  %15 = getelementptr inbounds i8, i8* %.012, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.1.ph = phi i32 [ %14, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %5, %1
  %.1 = phi i32 [ %3, %1 ], [ %3, %5 ], [ %.1.ph, %._crit_edge.loopexit ]
  %19 = zext i32 %.1 to i64
  ret i64 %19
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmp_string(i8*, i8*) #0 {
  %3 = call i32 @strcmp(i8* %0, i8* %1) #14
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.hash_table* @make_nocase_string_hash_table(i32) #7 {
  %2 = call %struct.hash_table* @hash_table_new(i32 %0, i64 (i8*)* @hash_string_nocase, i32 (i8*, i8*)* @string_cmp_nocase)
  ret %struct.hash_table* %2
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @hash_string_nocase(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = call i32 @c_tolower(i32 %3)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %._crit_edge

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.03 = phi i32 [ %16, %.lr.ph ], [ %4, %.lr.ph.preheader ]
  %.012 = phi i8* [ %17, %.lr.ph ], [ %7, %.lr.ph.preheader ]
  %11 = shl i32 %.03, 5
  %12 = sub i32 %11, %.03
  %13 = load i8, i8* %.012, align 1
  %14 = sext i8 %13 to i32
  %15 = call i32 @c_tolower(i32 %14)
  %16 = add i32 %12, %15
  %17 = getelementptr inbounds i8, i8* %.012, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.1.ph = phi i32 [ %16, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %6, %1
  %.1 = phi i32 [ %4, %1 ], [ %4, %6 ], [ %.1.ph, %._crit_edge.loopexit ]
  %21 = zext i32 %.1 to i64
  ret i64 %21
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @string_cmp_nocase(i8*, i8*) #0 {
  %3 = call i32 @strcasecmp(i8* %0, i8* %1) #14
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @address_list_get_bounds(%struct.address_list*, i32*, i32*) #0 {
  %4 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 2
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %1, align 4
  %6 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  store i32 %7, i32* %2, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ip_address* @address_list_address_at(%struct.address_list*, i32) #7 {
  %3 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 1
  %4 = load %struct.ip_address*, %struct.ip_address** %3, align 8
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %4, i64 %5
  ret %struct.ip_address* %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @address_list_contains(%struct.address_list*, %struct.ip_address*) #0 {
  %3 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %97 [
    i32 2, label %5
    i32 10, label %29
  ]

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 0, %7
  br i1 %8, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %5
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %25
  %indvars.iv = phi i64 [ %indvars.iv.next, %25 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 150)
  %9 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 1
  %10 = load %struct.ip_address*, %struct.ip_address** %9, align 8
  %11 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %10, i64 %indvars.iv
  %12 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %25

; <label>:15:                                     ; preds = %.lr.ph
  %16 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %11, i32 0, i32 1
  %17 = bitcast %union.anon* %16 to %struct.in_addr*
  %18 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %17, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %21 = bitcast %union.anon* %20 to %struct.in_addr*
  %22 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %19, %23
  br i1 %24, label %._crit_edge.loopexit, label %25

; <label>:25:                                     ; preds = %.lr.ph, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %26 = load i32, i32* %6, align 8
  %27 = sext i32 %26 to i64
  %28 = icmp slt i64 %indvars.iv.next, %27
  br i1 %28, label %.lr.ph, label %._crit_edge.loopexit

; <label>:29:                                     ; preds = %2
  %30 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp slt i32 0, %31
  br i1 %32, label %.lr.ph5.preheader, label %._crit_edge

.lr.ph5.preheader:                                ; preds = %29
  br label %.lr.ph5

.lr.ph5:                                          ; preds = %.lr.ph5.preheader, %93
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %93 ], [ 0, %.lr.ph5.preheader ]
  call void @unroll_loop(i32 151)
  %33 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 1
  %34 = load %struct.ip_address*, %struct.ip_address** %33, align 8
  %35 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %34, i64 %indvars.iv7
  %36 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %35, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 10
  br i1 %38, label %39, label %93

; <label>:39:                                     ; preds = %.lr.ph5
  %40 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %35, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %41, %43
  br i1 %44, label %45, label %93

; <label>:45:                                     ; preds = %39
  %46 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %35, i32 0, i32 1
  %47 = bitcast %union.anon* %46 to %struct.in6_addr*
  %48 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %1, i32 0, i32 1
  %49 = bitcast %union.anon* %48 to %struct.in6_addr*
  %50 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %47, i32 0, i32 0
  %51 = bitcast %union.anon.0* %50 to [4 x i32]*
  %52 = getelementptr inbounds [4 x i32], [4 x i32]* %51, i64 0, i64 0
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %49, i32 0, i32 0
  %55 = bitcast %union.anon.0* %54 to [4 x i32]*
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i64 0, i64 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %53, %57
  br i1 %58, label %59, label %89

; <label>:59:                                     ; preds = %45
  %60 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %47, i32 0, i32 0
  %61 = bitcast %union.anon.0* %60 to [4 x i32]*
  %62 = getelementptr inbounds [4 x i32], [4 x i32]* %61, i64 0, i64 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %49, i32 0, i32 0
  %65 = bitcast %union.anon.0* %64 to [4 x i32]*
  %66 = getelementptr inbounds [4 x i32], [4 x i32]* %65, i64 0, i64 1
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %63, %67
  br i1 %68, label %69, label %89

; <label>:69:                                     ; preds = %59
  %70 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %47, i32 0, i32 0
  %71 = bitcast %union.anon.0* %70 to [4 x i32]*
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %71, i64 0, i64 2
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %49, i32 0, i32 0
  %75 = bitcast %union.anon.0* %74 to [4 x i32]*
  %76 = getelementptr inbounds [4 x i32], [4 x i32]* %75, i64 0, i64 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %73, %77
  br i1 %78, label %79, label %89

; <label>:79:                                     ; preds = %69
  %80 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %47, i32 0, i32 0
  %81 = bitcast %union.anon.0* %80 to [4 x i32]*
  %82 = getelementptr inbounds [4 x i32], [4 x i32]* %81, i64 0, i64 3
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.in6_addr, %struct.in6_addr* %49, i32 0, i32 0
  %85 = bitcast %union.anon.0* %84 to [4 x i32]*
  %86 = getelementptr inbounds [4 x i32], [4 x i32]* %85, i64 0, i64 3
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %83, %87
  br label %89

; <label>:89:                                     ; preds = %79, %69, %59, %45
  %90 = phi i1 [ false, %69 ], [ false, %59 ], [ false, %45 ], [ %88, %79 ]
  %91 = zext i1 %90 to i32
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %._crit_edge.loopexit1, label %93

; <label>:93:                                     ; preds = %.lr.ph5, %39, %89
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %94 = load i32, i32* %30, align 8
  %95 = sext i32 %94 to i64
  %96 = icmp slt i64 %indvars.iv.next8, %95
  br i1 %96, label %.lr.ph5, label %._crit_edge.loopexit1

; <label>:97:                                     ; preds = %2
  call void @abort() #16
  unreachable

._crit_edge.loopexit:                             ; preds = %15, %25
  %.0.ph = phi i1 [ false, %25 ], [ true, %15 ]
  br label %._crit_edge

._crit_edge.loopexit1:                            ; preds = %89, %93
  %.0.ph2 = phi i1 [ false, %93 ], [ true, %89 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit1, %._crit_edge.loopexit, %29, %5
  %.0 = phi i1 [ false, %5 ], [ false, %29 ], [ %.0.ph, %._crit_edge.loopexit ], [ %.0.ph2, %._crit_edge.loopexit1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @address_list_set_faulty(%struct.address_list*, i32) #0 {
  %3 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp ne i32 %1, %4
  %6 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %8, label %14

; <label>:8:                                      ; preds = %2
  %9 = getelementptr [26 x i8], [26 x i8]* @.str.384, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %9, i32 %1, i32 %7)
  %10 = getelementptr [37 x i8], [37 x i8]* @.str.1.385, i32 0, i32 0
  %11 = call i8* @gettext(i8* %10) #8
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %11)
  %12 = getelementptr [46 x i8], [46 x i8]* @.str.2.386, i32 0, i32 0
  %13 = call i8* @gettext(i8* %12) #8
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %13)
  call void @abort() #16
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = add nsw i32 %7, 1
  store i32 %15, i32* %6, align 8
  %16 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp sge i32 %17, %19
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %14
  %22 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 2
  store i32 0, i32* %22, align 8
  br label %23

; <label>:23:                                     ; preds = %21, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @address_list_set_connected(%struct.address_list*) #0 {
  %2 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 3
  store i8 1, i8* %2, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @address_list_connected_p(%struct.address_list*) #0 {
  %2 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 3
  %3 = load i8, i8* %2, align 4
  %4 = trunc i8 %3 to i1
  ret i1 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @address_list_release(%struct.address_list*) #0 {
  %2 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  store i32 %4, i32* %2, align 8
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %6 = load i8, i8* %5, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %1
  %9 = ptrtoint %struct.address_list* %0 to i64
  %10 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr [38 x i8], [38 x i8]* @.str.3.393, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %12, i32 16, i64 %9, i32 %11)
  br label %13

; <label>:13:                                     ; preds = %1, %8
  %14 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = icmp sle i32 %15, 0
  br i1 %16, label %17, label %25

; <label>:17:                                     ; preds = %13
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %19 = load i8, i8* %18, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %21, label %24

; <label>:21:                                     ; preds = %17
  %22 = ptrtoint %struct.address_list* %0 to i64
  %23 = getelementptr [26 x i8], [26 x i8]* @.str.4.394, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %23, i32 16, i64 %22)
  br label %24

; <label>:24:                                     ; preds = %17, %21
  call void @address_list_delete(%struct.address_list* %0)
  br label %25

; <label>:25:                                     ; preds = %24, %13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @address_list_delete(%struct.address_list*) #0 {
  %2 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 1
  %3 = load %struct.ip_address*, %struct.ip_address** %2, align 8
  %4 = bitcast %struct.ip_address* %3 to i8*
  call void @free(i8* %4) #8
  %5 = getelementptr inbounds %struct.address_list, %struct.address_list* %0, i32 0, i32 1
  store %struct.ip_address* null, %struct.ip_address** %5, align 8
  %6 = bitcast %struct.address_list* %0 to i8*
  call void @free(i8* %6) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @print_address(%struct.ip_address*) #7 {
  %2 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %0, i32 0, i32 1
  %5 = bitcast %union.anon* %4 to i8*
  %6 = getelementptr [64 x i8], [64 x i8]* @print_address.buf, i32 0, i32 0
  %7 = call i8* @inet_ntop(i32 %3, i8* %5, i8* %6, i32 64) #8, !track !351
  %8 = icmp ne i8* %7, null
  br i1 %8, label %16, label %9

; <label>:9:                                      ; preds = %1
  %10 = call i32* @__errno_location() #15
  %11 = load i32, i32* %10, align 4
  %12 = call i8* @strerror(i32 %11) #8, !track !352
  %13 = getelementptr [64 x i8], [64 x i8]* @print_address.buf, i32 0, i32 0
  %14 = getelementptr [12 x i8], [12 x i8]* @.str.5.397, i32 0, i32 0
  %15 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %13, i64 64, i8* %14, i8* %12) #8
  br label %16

; <label>:16:                                     ; preds = %9, %1
  %17 = getelementptr [64 x i8], [64 x i8]* @print_address.buf, i32 0, i32 0
  ret i8* %17
}

; Function Attrs: nounwind
declare dso_local i8* @inet_ntop(i32, i8*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @is_valid_ipv6_address(i8*, i8*) #0 {
  %3 = icmp eq i8* %0, %1
  br i1 %3, label %71, label %4

; <label>:4:                                      ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp eq i32 %6, 58
  br i1 %7, label %8, label %15

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds i8, i8* %0, i32 1
  %10 = icmp eq i8* %9, %1
  br i1 %10, label %71, label %11

; <label>:11:                                     ; preds = %8
  %12 = load i8, i8* %9, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp ne i32 %13, 58
  br i1 %14, label %71, label %15

; <label>:15:                                     ; preds = %11, %4
  %.01 = phi i8* [ %0, %4 ], [ %9, %11 ]
  %16 = icmp ult i8* %.01, %1
  br i1 %16, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %15
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.outer.backedge
  %.1.ph66 = phi i8* [ %.1.ph.be, %.outer.backedge ], [ %.01, %.lr.ph.preheader ]
  %.02.ph65 = phi i32 [ %.02.ph.be, %.outer.backedge ], [ 0, %.lr.ph.preheader ]
  %.03.ph64 = phi i8* [ %.03.ph.be, %.outer.backedge ], [ %.01, %.lr.ph.preheader ]
  %.04.ph63 = phi i32 [ %.04.ph.be, %.outer.backedge ], [ 0, %.lr.ph.preheader ]
  %.06.ph62 = phi i8* [ %.06.ph.be, %.outer.backedge ], [ null, %.lr.ph.preheader ]
  %.07.ph61 = phi i8 [ %.07.ph.be, %.outer.backedge ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 149)
  br label %17

; <label>:17:                                     ; preds = %.lr.ph, %42
  %.155 = phi i8* [ %.1.ph66, %.lr.ph ], [ %18, %42 ]
  %.0354 = phi i8* [ %.03.ph64, %.lr.ph ], [ %18, %42 ]
  %.0653 = phi i8* [ %.06.ph62, %.lr.ph ], [ %44, %42 ]
  call void @unroll_loop(i32 152)
  %18 = getelementptr inbounds i8, i8* %.155, i32 1
  %19 = load i8, i8* %.155, align 1
  %20 = sext i8 %19 to i32
  %21 = call zeroext i1 @c_isxdigit(i32 %20)
  br i1 %21, label %22, label %36

; <label>:22:                                     ; preds = %17
  %.lcssa49 = phi i8* [ %18, %17 ]
  %.lcssa45 = phi i32 [ %20, %17 ]
  %.06.lcssa41 = phi i8* [ %.0653, %17 ]
  %.03.lcssa32 = phi i8* [ %.0354, %17 ]
  %23 = shl i32 %.02.ph65, 4
  %24 = icmp slt i32 %.lcssa45, 65
  br i1 %24, label %25, label %27

; <label>:25:                                     ; preds = %22
  %26 = sub nsw i32 %.lcssa45, 48
  br label %31

; <label>:27:                                     ; preds = %22
  %28 = call i32 @c_toupper(i32 %.lcssa45)
  %29 = sub nsw i32 %28, 65
  %30 = add nsw i32 %29, 10
  br label %31

; <label>:31:                                     ; preds = %27, %25
  %32 = phi i32 [ %26, %25 ], [ %30, %27 ]
  %33 = or i32 %23, %32
  %34 = icmp ugt i32 %33, 65535
  br i1 %34, label %.loopexit3, label %.outer.backedge

.outer.backedge:                                  ; preds = %31, %49
  %.07.ph.be = phi i8 [ 0, %49 ], [ 1, %31 ]
  %.06.ph.be = phi i8* [ %.06.lcssa43, %49 ], [ %.06.lcssa41, %31 ]
  %.04.ph.be = phi i32 [ %50, %49 ], [ %.04.ph63, %31 ]
  %.03.ph.be = phi i8* [ %.lcssa51, %49 ], [ %.03.lcssa32, %31 ]
  %.02.ph.be = phi i32 [ 0, %49 ], [ %33, %31 ]
  %.1.ph.be = phi i8* [ %.lcssa51, %49 ], [ %.lcssa49, %31 ]
  %35 = icmp ult i8* %.1.ph.be, %1
  br i1 %35, label %.lr.ph, label %.loopexit.loopexit5

; <label>:36:                                     ; preds = %17
  %37 = icmp eq i32 %20, 58
  br i1 %37, label %38, label %51

; <label>:38:                                     ; preds = %36
  %39 = trunc i8 %.07.ph61 to i1
  br i1 %39, label %46, label %40

; <label>:40:                                     ; preds = %38
  %41 = icmp ne i8* %.0653, null
  br i1 %41, label %.loopexit2, label %42

; <label>:42:                                     ; preds = %40
  %43 = sext i32 %.04.ph63 to i64
  %44 = getelementptr inbounds i8, i8* %18, i64 %43
  %45 = icmp ult i8* %18, %1
  br i1 %45, label %17, label %.loopexit.loopexit

; <label>:46:                                     ; preds = %38
  %.lcssa51 = phi i8* [ %18, %38 ]
  %.06.lcssa43 = phi i8* [ %.0653, %38 ]
  %47 = icmp eq i8* %.lcssa51, %1
  %48 = icmp sgt i32 %.04.ph63, 14
  %or.cond1 = or i1 %47, %48
  br i1 %or.cond1, label %.loopexit3, label %49

; <label>:49:                                     ; preds = %46
  %50 = add nsw i32 %.04.ph63, 2
  br label %.outer.backedge

; <label>:51:                                     ; preds = %36
  %.lcssa = phi i32 [ %20, %36 ]
  %.06.lcssa19 = phi i8* [ %.0653, %36 ]
  %.04.lcssa14 = phi i32 [ %.04.ph63, %36 ]
  %.03.lcssa9 = phi i8* [ %.0354, %36 ]
  %52 = icmp eq i32 %.lcssa, 46
  %53 = icmp sle i32 %.04.lcssa14, 12
  %or.cond = and i1 %52, %53
  br i1 %or.cond, label %54, label %71

; <label>:54:                                     ; preds = %51
  %55 = call zeroext i1 @is_valid_ipv4_address(i8* %.03.lcssa9, i8* %1)
  %56 = zext i1 %55 to i32
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %71

; <label>:58:                                     ; preds = %54
  %59 = add nsw i32 %.04.lcssa14, 4
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %42
  %.06.lcssa.ph = phi i8* [ %44, %42 ]
  %.18.ph = phi i8 [ %.07.ph61, %42 ]
  %.15.ph = phi i32 [ %.04.ph63, %42 ]
  br label %.loopexit

.loopexit.loopexit5:                              ; preds = %.outer.backedge
  %.06.lcssa.ph6 = phi i8* [ %.06.ph.be, %.outer.backedge ]
  %.18.ph7 = phi i8 [ %.07.ph.be, %.outer.backedge ]
  %.15.ph8 = phi i32 [ %.04.ph.be, %.outer.backedge ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit5, %.loopexit.loopexit, %15, %58
  %.06.lcssa = phi i8* [ %.06.lcssa19, %58 ], [ null, %15 ], [ %.06.lcssa.ph, %.loopexit.loopexit ], [ %.06.lcssa.ph6, %.loopexit.loopexit5 ]
  %.18 = phi i8 [ 0, %58 ], [ 0, %15 ], [ %.18.ph, %.loopexit.loopexit ], [ %.18.ph7, %.loopexit.loopexit5 ]
  %.15 = phi i32 [ %59, %58 ], [ 0, %15 ], [ %.15.ph, %.loopexit.loopexit ], [ %.15.ph8, %.loopexit.loopexit5 ]
  %60 = trunc i8 %.18 to i1
  br i1 %60, label %61, label %65

; <label>:61:                                     ; preds = %.loopexit
  %62 = icmp sgt i32 %.15, 14
  br i1 %62, label %71, label %63

; <label>:63:                                     ; preds = %61
  %64 = add nsw i32 %.15, 2
  br label %65

; <label>:65:                                     ; preds = %63, %.loopexit
  %.2 = phi i32 [ %64, %63 ], [ %.15, %.loopexit ]
  %66 = icmp ne i8* %.06.lcssa, null
  br i1 %66, label %67, label %69

; <label>:67:                                     ; preds = %65
  %68 = icmp eq i32 %.2, 16
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %67, %65
  %.3 = phi i32 [ %.2, %65 ], [ 16, %67 ]
  %70 = icmp ne i32 %.3, 16
  %. = select i1 %70, i1 false, i1 true
  br label %71

.loopexit2:                                       ; preds = %40
  %.0.ph = phi i1 [ false, %40 ]
  br label %71

.loopexit3:                                       ; preds = %31, %46
  %.0.ph4 = phi i1 [ false, %46 ], [ false, %31 ]
  br label %71

; <label>:71:                                     ; preds = %.loopexit3, %.loopexit2, %69, %67, %61, %51, %54, %8, %11, %2
  %.0 = phi i1 [ false, %2 ], [ false, %11 ], [ false, %8 ], [ false, %54 ], [ false, %51 ], [ false, %61 ], [ false, %67 ], [ %., %69 ], [ %.0.ph, %.loopexit2 ], [ %.0.ph4, %.loopexit3 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @is_valid_ipv4_address(i8*, i8*) #0 {
  %3 = icmp ult i8* %0, %1
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %24
  %.0115 = phi i8* [ %4, %24 ], [ %0, %.lr.ph.preheader ]
  %.0214 = phi i32 [ %.1, %24 ], [ 0, %.lr.ph.preheader ]
  %.0313 = phi i8 [ %.2, %24 ], [ 0, %.lr.ph.preheader ]
  %.0512 = phi i32 [ %.27, %24 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 154)
  %4 = getelementptr inbounds i8, i8* %.0115, i32 1
  %5 = load i8, i8* %.0115, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp sge i32 %6, 48
  %8 = icmp sle i32 %6, 57
  %or.cond = and i1 %7, %8
  br i1 %or.cond, label %9, label %19

; <label>:9:                                      ; preds = %.lr.ph
  %10 = mul nsw i32 %.0214, 10
  %11 = sub nsw i32 %6, 48
  %12 = add nsw i32 %10, %11
  %13 = icmp sgt i32 %12, 255
  br i1 %13, label %.loopexit, label %14

; <label>:14:                                     ; preds = %9
  %15 = trunc i8 %.0313 to i1
  br i1 %15, label %24, label %16

; <label>:16:                                     ; preds = %14
  %17 = add nsw i32 %.0512, 1
  %18 = icmp sgt i32 %17, 4
  br i1 %18, label %.loopexit, label %24

; <label>:19:                                     ; preds = %.lr.ph
  %20 = icmp eq i32 %6, 46
  br i1 %20, label %21, label %.loopexit

; <label>:21:                                     ; preds = %19
  %22 = trunc i8 %.0313 to i1
  %.not = xor i1 %22, true
  %23 = icmp eq i32 %.0512, 4
  %or.cond1 = or i1 %.not, %23
  br i1 %or.cond1, label %.loopexit, label %24

; <label>:24:                                     ; preds = %21, %14, %16
  %.27 = phi i32 [ %.0512, %14 ], [ %17, %16 ], [ %.0512, %21 ]
  %.2 = phi i8 [ %.0313, %14 ], [ 1, %16 ], [ 0, %21 ]
  %.1 = phi i32 [ %12, %16 ], [ %12, %14 ], [ 0, %21 ]
  %25 = icmp ult i8* %4, %1
  br i1 %25, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %24
  %.05.lcssa.ph = phi i32 [ %.27, %24 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.05.lcssa = phi i32 [ 0, %2 ], [ %.05.lcssa.ph, %._crit_edge.loopexit ]
  %26 = icmp slt i32 %.05.lcssa, 4
  %. = select i1 %26, i1 false, i1 true
  br label %27

.loopexit:                                        ; preds = %9, %16, %19, %21
  %.0.ph = phi i1 [ false, %19 ], [ false, %21 ], [ false, %16 ], [ false, %9 ]
  br label %27

; <label>:27:                                     ; preds = %.loopexit, %._crit_edge
  %.0 = phi i1 [ %., %._crit_edge ], [ %.0.ph, %.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.address_list* @lookup_host(i8*, i32) #7 {
  %3 = alloca %struct.addrinfo, align 8, !track !353
  %4 = alloca %struct.addrinfo*, align 8, !track !354
  %5 = and i32 %1, 1
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = xor i1 %7, true
  %9 = zext i1 %8 to i8
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 83
  %11 = load double, double* %10, align 8
  %12 = call i64 @strlen(i8* %0) #14
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = call zeroext i1 @is_valid_ipv4_address(i8* %0, i8* %13)
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %2
  %16 = call zeroext i1 @is_valid_ipv6_address(i8* %0, i8* %13)
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %15, %2
  br label %18

; <label>:18:                                     ; preds = %17, %15
  %.05 = phi i8 [ 1, %17 ], [ 0, %15 ]
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 41
  %20 = load i8, i8* %19, align 8
  %21 = trunc i8 %20 to i1
  %22 = zext i1 %21 to i8
  %23 = and i32 %1, 2
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %18
  %26 = trunc i8 %.05 to i1
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %25, %18
  br label %28

; <label>:28:                                     ; preds = %27, %25
  %.04 = phi i8 [ 0, %27 ], [ %22, %25 ]
  %29 = trunc i8 %.04 to i1
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %28
  %31 = and i32 %1, 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %36, label %33

; <label>:33:                                     ; preds = %30
  %34 = call %struct.address_list* @cache_query(i8* %0)
  %35 = icmp ne %struct.address_list* %34, null
  br i1 %35, label %175, label %37

; <label>:36:                                     ; preds = %30
  call void @cache_remove(i8* %0)
  br label %37

; <label>:37:                                     ; preds = %36, %33, %28
  %38 = trunc i8 %9 to i1
  br i1 %38, label %67, label %39

; <label>:39:                                     ; preds = %37
  %40 = trunc i8 %.05 to i1
  br i1 %40, label %67, label %41

; <label>:41:                                     ; preds = %39
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %43 = load i8, i8* %42, align 2
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %62

; <label>:45:                                     ; preds = %41
  %46 = call i8* @idn_decode(i8* %0)
  %47 = icmp ne i8* %46, null
  br i1 %47, label %48, label %62

; <label>:48:                                     ; preds = %45
  %49 = call i64 @strlen(i8* %0) #14
  %50 = call i64 @strlen(i8* %46) #14
  %51 = add i64 %49, %50
  %52 = add i64 %51, 4
  %53 = trunc i64 %52 to i32
  %54 = sext i32 %53 to i64
  %55 = call noalias i8* @xmalloc(i64 %54)
  %56 = sext i32 %53 to i64
  %57 = getelementptr [8 x i8], [8 x i8]* @.str.6.400, i32 0, i32 0
  %58 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %55, i64 %56, i8* %57, i8* %46, i8* %0) #8
  %59 = sub nsw i32 %53, 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  store i8 0, i8* %61, align 1
  call void @idn_free(i8* %46)
  br label %62

; <label>:62:                                     ; preds = %48, %45, %41
  %.03 = phi i8* [ %55, %48 ], [ null, %45 ], [ null, %41 ]
  %63 = getelementptr [17 x i8], [17 x i8]* @.str.7.401, i32 0, i32 0
  %64 = call i8* @gettext(i8* %63) #8
  %65 = icmp ne i8* %.03, null
  %.03. = select i1 %65, i8* %.03, i8* %0
  %66 = call i8* @quotearg_style(i32 7, i8* %.03.)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %64, i8* %66)
  call void @free(i8* %.03) #8
  br label %67

; <label>:67:                                     ; preds = %62, %39, %37
  %68 = bitcast %struct.addrinfo* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 48, i1 false)
  %69 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %3, i32 0, i32 2
  store i32 1, i32* %69, align 8
  %70 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 144
  %71 = load i8, i8* %70, align 2
  %72 = trunc i8 %71 to i1
  br i1 %72, label %73, label %75

; <label>:73:                                     ; preds = %67
  %74 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %3, i32 0, i32 1
  store i32 2, i32* %74, align 4
  br label %82

; <label>:75:                                     ; preds = %67
  %76 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 145
  %77 = load i8, i8* %76, align 1
  %78 = trunc i8 %77 to i1
  %79 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %3, i32 0, i32 1
  br i1 %78, label %80, label %81

; <label>:80:                                     ; preds = %75
  store i32 10, i32* %79, align 4
  br label %82

; <label>:81:                                     ; preds = %75
  store i32 0, i32* %79, align 4
  br label %82

; <label>:82:                                     ; preds = %80, %81, %73
  %83 = and i32 %1, 2
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %89

; <label>:85:                                     ; preds = %82
  %86 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %3, i32 0, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = or i32 %87, 1
  store i32 %88, i32* %86, align 8
  br label %89

; <label>:89:                                     ; preds = %85, %82
  %90 = trunc i8 %.05 to i1
  br i1 %90, label %91, label %95

; <label>:91:                                     ; preds = %89
  %92 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %3, i32 0, i32 0
  %93 = load i32, i32* %92, align 8
  %94 = or i32 %93, 4
  store i32 %94, i32* %92, align 8
  br label %95

; <label>:95:                                     ; preds = %91, %89
  %.06 = phi double [ 0.000000e+00, %91 ], [ %11, %89 ]
  %96 = call i32 @getaddrinfo_with_timeout(i8* %0, i8* null, %struct.addrinfo* %3, %struct.addrinfo** %4, double %.06)
  %97 = icmp ne i32 %96, 0
  %98 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  %99 = icmp eq %struct.addrinfo* %98, null
  %or.cond = or i1 %97, %99
  br i1 %or.cond, label %100, label %114

; <label>:100:                                    ; preds = %95
  %101 = trunc i8 %9 to i1
  br i1 %101, label %175, label %102

; <label>:102:                                    ; preds = %100
  %103 = getelementptr [13 x i8], [13 x i8]* @.str.8.402, i32 0, i32 0
  %104 = call i8* @gettext(i8* %103) #8
  %105 = icmp ne i32 %96, -11
  br i1 %105, label %106, label %108

; <label>:106:                                    ; preds = %102
  %107 = call i8* @gai_strerror(i32 %96) #8
  br label %112

; <label>:108:                                    ; preds = %102
  %109 = call i32* @__errno_location() #15
  %110 = load i32, i32* %109, align 4
  %111 = call i8* @strerror(i32 %110) #8
  br label %112

; <label>:112:                                    ; preds = %108, %106
  %113 = phi i8* [ %107, %106 ], [ %111, %108 ]
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %104, i8* %113)
  br label %175

; <label>:114:                                    ; preds = %95
  %115 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  %116 = call %struct.address_list* @address_list_from_addrinfo(%struct.addrinfo* %115)
  %117 = load %struct.addrinfo*, %struct.addrinfo** %4, align 8
  call void @freeaddrinfo(%struct.addrinfo* %117) #8
  %118 = icmp ne %struct.address_list* %116, null
  br i1 %118, label %122, label %119

; <label>:119:                                    ; preds = %114
  %120 = getelementptr [42 x i8], [42 x i8]* @.str.9.403, i32 0, i32 0
  %121 = call i8* @gettext(i8* %120) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %121)
  br label %175

; <label>:122:                                    ; preds = %114
  %123 = getelementptr inbounds %struct.address_list, %struct.address_list* %116, i32 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = icmp sgt i32 %124, 1
  br i1 %125, label %126, label %142

; <label>:126:                                    ; preds = %122
  %127 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 146
  %128 = load i32, i32* %127, align 8
  %129 = icmp ne i32 %128, 2
  br i1 %129, label %130, label %142

; <label>:130:                                    ; preds = %126
  %131 = getelementptr inbounds %struct.address_list, %struct.address_list* %116, i32 0, i32 1
  %132 = load %struct.ip_address*, %struct.ip_address** %131, align 8
  %133 = bitcast %struct.ip_address* %132 to i8*
  %134 = getelementptr inbounds %struct.address_list, %struct.address_list* %116, i32 0, i32 0
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 146
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 0
  %140 = zext i1 %139 to i64
  %141 = select i1 %139, i32 (i8*, i8*)* @cmp_prefer_ipv4, i32 (i8*, i8*)* @cmp_prefer_ipv6
  call void @stable_sort(i8* %133, i64 %136, i64 24, i32 (i8*, i8*)* %141)
  br label %142

; <label>:142:                                    ; preds = %130, %126, %122
  %143 = trunc i8 %9 to i1
  br i1 %143, label %172, label %144

; <label>:144:                                    ; preds = %142
  %145 = trunc i8 %.05 to i1
  br i1 %145, label %172, label %146

; <label>:146:                                    ; preds = %144
  %147 = getelementptr inbounds %struct.address_list, %struct.address_list* %116, i32 0, i32 0
  %148 = load i32, i32* %147, align 8
  %149 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 154
  %150 = load i8, i8* %149, align 2
  %151 = trunc i8 %150 to i1
  %.not = xor i1 %151, true
  %152 = icmp sgt i32 %148, 3
  %or.cond2 = and i1 %.not, %152
  %.01 = select i1 %or.cond2, i32 3, i32 %148
  %153 = icmp slt i32 0, %.01
  br i1 %153, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %146
  %154 = zext i32 %.01 to i64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %164
  %indvars.iv = phi i64 [ %indvars.iv.next, %164 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 155)
  %155 = getelementptr inbounds %struct.address_list, %struct.address_list* %116, i32 0, i32 1
  %156 = load %struct.ip_address*, %struct.ip_address** %155, align 8
  %157 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %156, i64 %indvars.iv
  %158 = call i8* @print_address(%struct.ip_address* %157)
  call void @logputs(i32 0, i8* %158)
  %159 = sub nsw i32 %.01, 1
  %160 = sext i32 %159 to i64
  %161 = icmp slt i64 %indvars.iv, %160
  br i1 %161, label %162, label %164

; <label>:162:                                    ; preds = %.lr.ph
  %163 = getelementptr [3 x i8], [3 x i8]* @.str.10.404, i32 0, i32 0
  call void @logputs(i32 0, i8* %163)
  br label %164

; <label>:164:                                    ; preds = %.lr.ph, %162
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond3 = icmp ne i64 %indvars.iv.next, %154
  br i1 %exitcond3, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %164
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %146
  %165 = getelementptr inbounds %struct.address_list, %struct.address_list* %116, i32 0, i32 0
  %166 = load i32, i32* %165, align 8
  %167 = icmp ne i32 %.01, %166
  br i1 %167, label %168, label %170

; <label>:168:                                    ; preds = %._crit_edge
  %169 = getelementptr [6 x i8], [6 x i8]* @.str.11.405, i32 0, i32 0
  call void @logputs(i32 0, i8* %169)
  br label %170

; <label>:170:                                    ; preds = %168, %._crit_edge
  %171 = getelementptr [2 x i8], [2 x i8]* @.str.12.406, i32 0, i32 0
  call void @logputs(i32 0, i8* %171)
  br label %172

; <label>:172:                                    ; preds = %170, %144, %142
  %173 = trunc i8 %.04 to i1
  br i1 %173, label %174, label %175

; <label>:174:                                    ; preds = %172
  call void @cache_store(i8* %0, %struct.address_list* %116)
  br label %175

; <label>:175:                                    ; preds = %172, %174, %100, %112, %33, %119
  %.0 = phi %struct.address_list* [ null, %119 ], [ %34, %33 ], [ null, %112 ], [ null, %100 ], [ %116, %174 ], [ %116, %172 ]
  ret %struct.address_list* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.address_list* @cache_query(i8*) #7 {
  %2 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %4, label %20

; <label>:4:                                      ; preds = %1
  %5 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %6 = call i8* @hash_table_get(%struct.hash_table* %5, i8* %0)
  %7 = bitcast i8* %6 to %struct.address_list*
  %8 = icmp ne %struct.address_list* %7, null
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %4
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %11 = load i8, i8* %10, align 1
  %12 = trunc i8 %11 to i1
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %9
  %14 = bitcast %struct.address_list* %7 to i8*
  %15 = getelementptr [42 x i8], [42 x i8]* @.str.13.409, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %15, i8* %0, i8* %14)
  br label %16

; <label>:16:                                     ; preds = %9, %13
  %17 = getelementptr inbounds %struct.address_list, %struct.address_list* %7, i32 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %17, align 8
  br label %20

; <label>:20:                                     ; preds = %4, %1, %16
  %.0 = phi %struct.address_list* [ %7, %16 ], [ null, %1 ], [ null, %4 ]
  ret %struct.address_list* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @cache_remove(i8*) #0 {
  %2 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %4, label %12

; <label>:4:                                      ; preds = %1
  %5 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %6 = call i8* @hash_table_get(%struct.hash_table* %5, i8* %0)
  %7 = bitcast i8* %6 to %struct.address_list*
  %8 = icmp ne %struct.address_list* %7, null
  br i1 %8, label %9, label %12

; <label>:9:                                      ; preds = %4
  call void @address_list_release(%struct.address_list* %7)
  %10 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %11 = call i32 @hash_table_remove(%struct.hash_table* %10, i8* %0)
  br label %12

; <label>:12:                                     ; preds = %1, %9, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @getaddrinfo_with_timeout(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**, double) #0 {
  %6 = alloca %struct.gaiwt_context, align 8, !track !355
  %7 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %6, i32 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %6, i32 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %6, i32 0, i32 2
  store %struct.addrinfo* %2, %struct.addrinfo** %9, align 8
  %10 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %6, i32 0, i32 3
  store %struct.addrinfo** %3, %struct.addrinfo*** %10, align 8
  %11 = bitcast %struct.gaiwt_context* %6 to i8*
  %12 = call zeroext i1 @run_with_timeout(double %4, void (i8*)* @getaddrinfo_with_timeout_callback, i8* %11)
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %5
  %14 = call i32* @__errno_location() #15
  store i32 110, i32* %14, align 4
  br label %18

; <label>:15:                                     ; preds = %5
  %16 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %6, i32 0, i32 4
  %17 = load i32, i32* %16, align 8
  br label %18

; <label>:18:                                     ; preds = %15, %13
  %.0 = phi i32 [ -11, %13 ], [ %17, %15 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i8* @gai_strerror(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.address_list* @address_list_from_addrinfo(%struct.addrinfo*) #7 {
  %2 = icmp ne %struct.addrinfo* %0, null
  br i1 %2, label %.lr.ph11.preheader, label %._crit_edge12

.lr.ph11.preheader:                               ; preds = %1
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %12
  %.029 = phi i32 [ %.13, %12 ], [ 0, %.lr.ph11.preheader ]
  %.048 = phi %struct.addrinfo* [ %14, %12 ], [ %0, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 156)
  %3 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.048, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %10, label %6

; <label>:6:                                      ; preds = %.lr.ph11
  %7 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.048, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 10
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %6, %.lr.ph11
  %11 = add nsw i32 %.029, 1
  br label %12

; <label>:12:                                     ; preds = %6, %10
  %.13 = phi i32 [ %11, %10 ], [ %.029, %6 ]
  %13 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.048, i32 0, i32 7
  %14 = load %struct.addrinfo*, %struct.addrinfo** %13, align 8
  %15 = icmp ne %struct.addrinfo* %14, null
  br i1 %15, label %.lr.ph11, label %._crit_edge12.loopexit

._crit_edge12.loopexit:                           ; preds = %12
  %.02.lcssa.ph = phi i32 [ %.13, %12 ]
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %1
  %.02.lcssa = phi i32 [ 0, %1 ], [ %.02.lcssa.ph, %._crit_edge12.loopexit ]
  %16 = icmp eq i32 %.02.lcssa, 0
  br i1 %16, label %._crit_edge, label %17

; <label>:17:                                     ; preds = %._crit_edge12
  %18 = call noalias i8* @xcalloc(i64 1, i64 32)
  %19 = bitcast i8* %18 to %struct.address_list*
  %20 = sext i32 %.02.lcssa to i64
  %21 = mul i64 %20, 24
  %22 = call noalias i8* @xmalloc(i64 %21)
  %23 = bitcast i8* %22 to %struct.ip_address*
  %24 = getelementptr inbounds %struct.address_list, %struct.address_list* %19, i32 0, i32 1
  store %struct.ip_address* %23, %struct.ip_address** %24, align 8
  %25 = getelementptr inbounds %struct.address_list, %struct.address_list* %19, i32 0, i32 0
  store i32 %.02.lcssa, i32* %25, align 8
  %26 = getelementptr inbounds %struct.address_list, %struct.address_list* %19, i32 0, i32 4
  store i32 1, i32* %26, align 8
  %27 = getelementptr inbounds %struct.address_list, %struct.address_list* %19, i32 0, i32 1
  %28 = load %struct.ip_address*, %struct.ip_address** %27, align 8
  %29 = icmp ne %struct.addrinfo* %0, null
  br i1 %29, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %17
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %62
  %.017 = phi %struct.ip_address* [ %.2, %62 ], [ %28, %.lr.ph.preheader ]
  %.156 = phi %struct.addrinfo* [ %64, %62 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 157)
  %30 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.156, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 10
  br i1 %32, label %33, label %47

; <label>:33:                                     ; preds = %.lr.ph
  %34 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.156, i32 0, i32 5
  %35 = load %struct.sockaddr*, %struct.sockaddr** %34, align 8
  %36 = bitcast %struct.sockaddr* %35 to %struct.sockaddr_in6*
  %37 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %.017, i32 0, i32 0
  store i32 10, i32* %37, align 4
  %38 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %.017, i32 0, i32 1
  %39 = bitcast %union.anon* %38 to %struct.in6_addr*
  %40 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %36, i32 0, i32 3
  %41 = bitcast %struct.in6_addr* %39 to i8*
  %42 = bitcast %struct.in6_addr* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 16, i1 false), !track !356
  %43 = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %36, i32 0, i32 4
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %.017, i32 0, i32 2
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %.017, i32 1
  br label %62

; <label>:47:                                     ; preds = %.lr.ph
  %48 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.156, i32 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 2
  br i1 %50, label %51, label %62

; <label>:51:                                     ; preds = %47
  %52 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.156, i32 0, i32 5
  %53 = load %struct.sockaddr*, %struct.sockaddr** %52, align 8
  %54 = bitcast %struct.sockaddr* %53 to %struct.sockaddr_in*
  %55 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %.017, i32 0, i32 0
  store i32 2, i32* %55, align 4
  %56 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %.017, i32 0, i32 1
  %57 = bitcast %union.anon* %56 to %struct.in_addr*
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %54, i32 0, i32 2
  %59 = bitcast %struct.in_addr* %57 to i8*
  %60 = bitcast %struct.in_addr* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 4, i1 false), !track !357
  %61 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %.017, i32 1
  br label %62

; <label>:62:                                     ; preds = %33, %51, %47
  %.2 = phi %struct.ip_address* [ %46, %33 ], [ %61, %51 ], [ %.017, %47 ]
  %63 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %.156, i32 0, i32 7
  %64 = load %struct.addrinfo*, %struct.addrinfo** %63, align 8
  %65 = icmp ne %struct.addrinfo* %64, null
  br i1 %65, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %62
  %.0.ph = phi %struct.address_list* [ %19, %62 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %17, %._crit_edge12
  %.0 = phi %struct.address_list* [ null, %._crit_edge12 ], [ %19, %17 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret %struct.address_list* %.0
}

; Function Attrs: nounwind
declare dso_local void @freeaddrinfo(%struct.addrinfo*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmp_prefer_ipv4(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.ip_address*
  %4 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 2
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = bitcast i8* %1 to %struct.ip_address*
  %10 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 2
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  %15 = sub nsw i32 %8, %14
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmp_prefer_ipv6(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.ip_address*
  %4 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 10
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = bitcast i8* %1 to %struct.ip_address*
  %10 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 10
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  %15 = sub nsw i32 %8, %14
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define internal void @cache_store(i8*, %struct.address_list*) #0 {
  %3 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %4 = icmp ne %struct.hash_table* %3, null
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %2
  %6 = call %struct.hash_table* @make_nocase_string_hash_table(i32 0)
  store %struct.hash_table* %6, %struct.hash_table** @host_name_addresses_map, align 8
  br label %7

; <label>:7:                                      ; preds = %5, %2
  %8 = getelementptr inbounds %struct.address_list, %struct.address_list* %1, i32 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %8, align 8
  %11 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %12 = call i8* @xstrdup_lower(i8* %0)
  %13 = bitcast %struct.address_list* %1 to i8*
  call void @hash_table_put(%struct.hash_table* %11, i8* %12, i8* %13)
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %15 = load i8, i8* %14, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %17, label %31

; <label>:17:                                     ; preds = %7
  %18 = getelementptr [14 x i8], [14 x i8]* @.str.14.407, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %18, i8* %0)
  %19 = getelementptr inbounds %struct.address_list, %struct.address_list* %1, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 0, %20
  br i1 %21, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %17
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 158)
  %22 = getelementptr inbounds %struct.address_list, %struct.address_list* %1, i32 0, i32 1
  %23 = load %struct.ip_address*, %struct.ip_address** %22, align 8
  %24 = getelementptr inbounds %struct.ip_address, %struct.ip_address* %23, i64 %indvars.iv
  %25 = call i8* @print_address(%struct.ip_address* %24)
  %26 = getelementptr [4 x i8], [4 x i8]* @.str.15.408, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %26, i8* %25)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %27 = load i32, i32* %19, align 8
  %28 = sext i32 %27 to i64
  %29 = icmp slt i64 %indvars.iv.next, %28
  br i1 %29, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %17
  %30 = getelementptr [2 x i8], [2 x i8]* @.str.12.406, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %30)
  br label %31

; <label>:31:                                     ; preds = %._crit_edge, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @getaddrinfo_with_timeout_callback(i8*) #0 {
  %2 = bitcast i8* %0 to %struct.gaiwt_context*
  %3 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %2, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %2, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %2, i32 0, i32 2
  %8 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %9 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %2, i32 0, i32 3
  %10 = load %struct.addrinfo**, %struct.addrinfo*** %9, align 8
  %11 = call i32 @getaddrinfo(i8* %4, i8* %6, %struct.addrinfo* %8, %struct.addrinfo** %10)
  %12 = getelementptr inbounds %struct.gaiwt_context, %struct.gaiwt_context* %2, i32 0, i32 4
  store i32 %11, i32* %12, align 8
  ret void
}

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @accept_domain(%struct.url*) #0 {
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %3 = load i8**, i8*** %2, align 8
  %4 = icmp ne i8** %3, null
  br i1 %4, label %5, label %11

; <label>:5:                                      ; preds = %1
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %7 = load i8**, i8*** %6, align 8
  %8 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %9 = load i8*, i8** %8, align 8
  %10 = call zeroext i1 @sufmatch(i8** %7, i8* %9)
  br i1 %10, label %11, label %22

; <label>:11:                                     ; preds = %5, %1
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 40
  %13 = load i8**, i8*** %12, align 8
  %14 = icmp ne i8** %13, null
  br i1 %14, label %15, label %21

; <label>:15:                                     ; preds = %11
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 40
  %17 = load i8**, i8*** %16, align 8
  %18 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = call zeroext i1 @sufmatch(i8** %17, i8* %19)
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %15, %11
  br label %22

; <label>:22:                                     ; preds = %15, %5, %21
  %.0 = phi i1 [ true, %21 ], [ false, %5 ], [ false, %15 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @sufmatch(i8**, i8*) #0 {
  %3 = call i64 @strlen(i8* %1) #14
  %4 = trunc i64 %3 to i32
  %5 = sext i32 %4 to i64
  %6 = load i8*, i8** %0, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %45
  %.037 = phi i32 [ %46, %45 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 159)
  %8 = sext i32 %.037 to i64
  %9 = getelementptr inbounds i8*, i8** %0, i64 %8
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 0
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %45, label %15

; <label>:15:                                     ; preds = %.lr.ph
  %16 = sext i32 %.037 to i64
  %17 = getelementptr inbounds i8*, i8** %0, i64 %16
  %18 = load i8*, i8** %17, align 8
  %19 = call i64 @strlen(i8* %18) #14
  %20 = trunc i64 %19 to i32
  %21 = sext i32 %20 to i64
  call void @unroll_loop(i32 160)
  %22 = icmp sge i64 %21, 0
  %23 = icmp sge i64 %5, 0
  %spec.select1 = select i1 %22, i1 %23, i1 false
  br i1 %spec.select1, label %.lr.ph5, label %.loopexit

.lr.ph5:                                          ; preds = %15
  br label %24

; <label>:24:                                     ; preds = %.lr.ph5, %39
  %indvars.iv3 = phi i64 [ %21, %.lr.ph5 ], [ %indvars.iv.next, %39 ]
  %indvars.iv52 = phi i64 [ %5, %.lr.ph5 ], [ %indvars.iv.next6, %39 ]
  %25 = sext i32 %.037 to i64
  %26 = getelementptr inbounds i8*, i8** %0, i64 %25
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 %indvars.iv3
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = call i32 @c_tolower(i32 %30)
  %32 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv52
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = call i32 @c_tolower(i32 %34)
  %36 = icmp ne i32 %31, %35
  br i1 %36, label %37, label %39

; <label>:37:                                     ; preds = %24
  %.02.lcssa4.wide = phi i64 [ %indvars.iv3, %24 ]
  %38 = trunc i64 %.02.lcssa4.wide to i32
  br label %43

; <label>:39:                                     ; preds = %24
  %indvars.iv.next = add i64 %indvars.iv3, -1
  %indvars.iv.next6 = add i64 %indvars.iv52, -1
  call void @unroll_loop(i32 160)
  %40 = icmp sge i64 %indvars.iv.next, 0
  %41 = icmp sge i64 %indvars.iv.next6, 0
  %spec.select = select i1 %40, i1 %41, i1 false
  br i1 %spec.select, label %24, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %39
  %split = phi i64 [ %indvars.iv.next, %39 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %15
  %.02.lcssa.ph.wide = phi i64 [ %split, %..loopexit_crit_edge ], [ %21, %15 ]
  %42 = trunc i64 %.02.lcssa.ph.wide to i32
  br label %43

; <label>:43:                                     ; preds = %.loopexit, %37
  %.02.lcssa = phi i32 [ %38, %37 ], [ %42, %.loopexit ]
  %44 = icmp eq i32 %.02.lcssa, -1
  br i1 %44, label %._crit_edge.loopexit, label %45

; <label>:45:                                     ; preds = %43, %.lr.ph
  %.038 = phi i32 [ %.037, %.lr.ph ], [ %.037, %43 ]
  %46 = add nsw i32 %.038, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8*, i8** %0, i64 %47
  %49 = load i8*, i8** %48, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %43, %45
  %.0.ph = phi i1 [ false, %45 ], [ true, %43 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.0 = phi i1 [ false, %2 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @host_cleanup() #0 {
  %1 = alloca %struct.hash_table_iterator, align 8, !track !358
  %2 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %4, label %16

; <label>:4:                                      ; preds = %0
  %5 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  call void @hash_table_iterate(%struct.hash_table* %5, %struct.hash_table_iterator* %1)
  %6 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 161)
  %8 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.address_list*
  call void @free(i8* %9) #8
  call void @address_list_delete(%struct.address_list* %12)
  %13 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %15 = load %struct.hash_table*, %struct.hash_table** @host_name_addresses_map, align 8
  call void @hash_table_destroy(%struct.hash_table* %15)
  store %struct.hash_table* null, %struct.hash_table** @host_name_addresses_map, align 8
  br label %16

; <label>:16:                                     ; preds = %._crit_edge, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @is_valid_ip_address(i8*) #0 {
  %2 = call i64 @strlen(i8* %0) #14
  %3 = getelementptr inbounds i8, i8* %0, i64 %2
  %4 = call zeroext i1 @is_valid_ipv4_address(i8* %0, i8* %3)
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %1
  %6 = call zeroext i1 @is_valid_ipv6_address(i8* %0, i8* %3)
  %. = select i1 %6, i1 true, i1 false
  br label %7

; <label>:7:                                      ; preds = %5, %1
  %.0 = phi i1 [ true, %1 ], [ %., %5 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @hsts_match(%struct.hsts_store*, %struct.url*) #0 {
  %3 = alloca i32, align 4
  %4 = call noalias i8* @xmalloc(i64 16)
  %5 = bitcast i8* %4 to %struct.hsts_kh*
  store i32 0, i32* %3, align 4
  %6 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  %9 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %10 = load i32, i32* %9, align 8
  br i1 %8, label %11, label %16

; <label>:11:                                     ; preds = %2
  %12 = icmp eq i32 %10, 443
  br i1 %12, label %21, label %13

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %15 = load i32, i32* %14, align 8
  br label %21

; <label>:16:                                     ; preds = %2
  %17 = icmp eq i32 %10, 80
  br i1 %17, label %21, label %18

; <label>:18:                                     ; preds = %16
  %19 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %20 = load i32, i32* %19, align 8
  br label %21

; <label>:21:                                     ; preds = %18, %16, %13, %11
  %22 = phi i32 [ %15, %13 ], [ 0, %11 ], [ %20, %18 ], [ 0, %16 ]
  %23 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %61, label %26

; <label>:26:                                     ; preds = %21
  %27 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %28 = load i8*, i8** %27, align 8
  %29 = call %struct.hsts_kh_info* @hsts_find_entry(%struct.hsts_store* %0, i8* %28, i32 %22, i32* %3, %struct.hsts_kh* %5)
  %30 = icmp ne %struct.hsts_kh_info* %29, null
  br i1 %30, label %31, label %57

; <label>:31:                                     ; preds = %26
  %32 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %29, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %29, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = add nsw i64 %33, %35
  %37 = call i64 @time(i64* null) #8
  %38 = icmp sge i64 %36, %37
  br i1 %38, label %39, label %56

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* %3, align 4
  %41 = icmp eq i32 %40, 2
  br i1 %41, label %49, label %42

; <label>:42:                                     ; preds = %39
  %43 = load i32, i32* %3, align 4
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %57

; <label>:45:                                     ; preds = %42
  %46 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %29, i32 0, i32 2
  %47 = load i8, i8* %46, align 8
  %48 = trunc i8 %47 to i1
  br i1 %48, label %49, label %57

; <label>:49:                                     ; preds = %45, %39
  %50 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 1
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, 80
  br i1 %53, label %54, label %57

; <label>:54:                                     ; preds = %49
  %55 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  store i32 443, i32* %55, align 8
  br label %57

; <label>:56:                                     ; preds = %31
  call void @hsts_remove_entry(%struct.hsts_store* %0, %struct.hsts_kh* %5)
  br label %57

; <label>:57:                                     ; preds = %26, %42, %45, %54, %49, %56
  %.2 = phi i8 [ 0, %26 ], [ 0, %56 ], [ 0, %45 ], [ 0, %42 ], [ 1, %54 ], [ 1, %49 ]
  %58 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %5, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @free(i8* %59) #8
  %60 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %5, i32 0, i32 0
  store i8* null, i8** %60, align 8
  br label %61

; <label>:61:                                     ; preds = %21, %57
  %.3 = phi i8 [ 0, %21 ], [ %.2, %57 ]
  %62 = bitcast %struct.hsts_kh* %5 to i8*
  call void @free(i8* %62) #8
  %63 = trunc i8 %.3 to i1
  ret i1 %63
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.hsts_kh_info* @hsts_find_entry(%struct.hsts_store*, i8*, i32, i32*, %struct.hsts_kh*) #0 {
  %6 = call noalias i8* @xmalloc(i64 16)
  %7 = bitcast i8* %6 to %struct.hsts_kh*
  %8 = call i8* @xstrdup_lower(i8* %1)
  %9 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  store i8* %8, i8** %9, align 8
  %10 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 1
  store i32 %2, i32* %10, align 8
  %11 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %14 = load %struct.hash_table*, %struct.hash_table** %13, align 8
  %15 = bitcast %struct.hsts_kh* %7 to i8*
  %16 = call i8* @hash_table_get(%struct.hash_table* %14, i8* %15)
  %17 = bitcast i8* %16 to %struct.hsts_kh_info*
  %18 = icmp ne %struct.hsts_kh_info* %17, null
  br i1 %18, label %55, label %.preheader

.preheader:                                       ; preds = %5
  br label %19

; <label>:19:                                     ; preds = %.preheader, %39
  %.03 = phi %struct.hsts_kh_info* [ %53, %39 ], [ %17, %.preheader ]
  %.01 = phi i32 [ %spec.select, %39 ], [ 0, %.preheader ]
  %.0 = phi i8* [ %.1, %39 ], [ null, %.preheader ]
  call void @unroll_loop(i32 162)
  %20 = icmp eq i32 %.01, 0
  br i1 %20, label %21, label %37

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i8* @strchr(i8* %23, i32 46) #14, !track !359
  %25 = icmp ne i8* %24, null
  br i1 %25, label %26, label %37

; <label>:26:                                     ; preds = %21
  %27 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = ptrtoint i8* %24 to i64
  %30 = ptrtoint i8* %28 to i64
  %31 = sub i64 %29, %30
  %32 = icmp sgt i64 %31, 0
  br i1 %32, label %33, label %37

; <label>:33:                                     ; preds = %26
  %34 = getelementptr inbounds i8, i8* %24, i64 1
  %35 = call i8* @strchr(i8* %34, i32 46) #14, !track !360
  %36 = icmp ne i8* %35, null
  br label %37

; <label>:37:                                     ; preds = %33, %26, %21, %19
  %.1 = phi i8* [ %24, %33 ], [ %24, %26 ], [ %24, %21 ], [ %.0, %19 ]
  %38 = phi i1 [ false, %26 ], [ false, %21 ], [ false, %19 ], [ %36, %33 ]
  br i1 %38, label %39, label %.loopexit

; <label>:39:                                     ; preds = %37
  %40 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = ptrtoint i8* %.1 to i64
  %43 = ptrtoint i8* %41 to i64
  %44 = sub i64 %42, %43
  %45 = add nsw i64 %44, 1
  %46 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 %45
  store i8* %48, i8** %46, align 8
  %49 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %50 = load %struct.hash_table*, %struct.hash_table** %49, align 8
  %51 = bitcast %struct.hsts_kh* %7 to i8*
  %52 = call i8* @hash_table_get(%struct.hash_table* %50, i8* %51)
  %53 = bitcast i8* %52 to %struct.hsts_kh_info*
  %54 = icmp ne %struct.hsts_kh_info* %53, null
  %spec.select = select i1 %54, i32 1, i32 %.01
  br label %19

.loopexit:                                        ; preds = %37
  %.14.ph = phi %struct.hsts_kh_info* [ %.03, %37 ]
  %.2.ph = phi i32 [ %.01, %37 ]
  br label %55

; <label>:55:                                     ; preds = %.loopexit, %5
  %.14 = phi %struct.hsts_kh_info* [ %17, %5 ], [ %.14.ph, %.loopexit ]
  %.2 = phi i32 [ 2, %5 ], [ %.2.ph, %.loopexit ]
  %56 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  store i8* %12, i8** %56, align 8
  %57 = icmp ne i32* %3, null
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %55
  store i32 %.2, i32* %3, align 4
  br label %59

; <label>:59:                                     ; preds = %58, %55
  %60 = icmp ne %struct.hsts_kh* %4, null
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %59
  %62 = bitcast %struct.hsts_kh* %4 to i8*
  %63 = bitcast %struct.hsts_kh* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 16, i1 false), !track !361
  br label %68

; <label>:64:                                     ; preds = %59
  %65 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  call void @free(i8* %66) #8
  %67 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %7, i32 0, i32 0
  store i8* null, i8** %67, align 8
  br label %68

; <label>:68:                                     ; preds = %61, %64
  %69 = bitcast %struct.hsts_kh* %7 to i8*
  call void @free(i8* %69) #8
  ret %struct.hsts_kh_info* %.14
}

; Function Attrs: noinline nounwind uwtable
define internal void @hsts_remove_entry(%struct.hsts_store*, %struct.hsts_kh*) #0 {
  %3 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %4 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %5 = bitcast %struct.hsts_kh* %1 to i8*
  %6 = call i32 @hash_table_remove(%struct.hash_table* %4, i8* %5)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @hsts_store_entry(%struct.hsts_store*, i32, i8*, i32, i64, i1 zeroext) #0 {
  %7 = alloca i32, align 4
  %8 = zext i1 %5 to i8
  store i32 0, i32* %7, align 4
  %9 = call noalias i8* @xmalloc(i64 16)
  %10 = bitcast i8* %9 to %struct.hsts_kh*
  %11 = icmp eq i32 %1, 1
  br i1 %11, label %12, label %54

; <label>:12:                                     ; preds = %6
  %13 = call zeroext i1 @is_valid_ip_address(i8* %2)
  br i1 %13, label %54, label %14

; <label>:14:                                     ; preds = %12
  %15 = icmp eq i32 %1, 1
  %16 = icmp eq i32 %3, 443
  %. = select i1 %16, i32 0, i32 %3
  %17 = icmp eq i32 %3, 80
  %.3 = select i1 %17, i32 0, i32 %3
  %18 = select i1 %15, i32 %., i32 %.3
  %19 = call %struct.hsts_kh_info* @hsts_find_entry(%struct.hsts_store* %0, i8* %2, i32 %18, i32* %7, %struct.hsts_kh* %10)
  %20 = icmp ne %struct.hsts_kh_info* %19, null
  %21 = load i32, i32* %7, align 4
  %22 = icmp eq i32 %21, 2
  %or.cond = and i1 %20, %22
  br i1 %or.cond, label %23, label %42

; <label>:23:                                     ; preds = %14
  %24 = icmp eq i64 %4, 0
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %23
  call void @hsts_remove_entry(%struct.hsts_store* %0, %struct.hsts_kh* %10)
  br label %50

; <label>:26:                                     ; preds = %23
  %27 = icmp sgt i64 %4, 0
  br i1 %27, label %28, label %50

; <label>:28:                                     ; preds = %26
  %29 = trunc i8 %8 to i1
  %30 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %19, i32 0, i32 2
  %31 = zext i1 %29 to i8
  store i8 %31, i8* %30, align 8
  %32 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %19, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp ne i64 %33, %4
  br i1 %34, label %35, label %50

; <label>:35:                                     ; preds = %28
  %36 = call i64 @time(i64* null) #8
  %37 = icmp ne i64 %36, -1
  br i1 %37, label %38, label %40

; <label>:38:                                     ; preds = %35
  %39 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %19, i32 0, i32 0
  store i64 %36, i64* %39, align 8
  br label %40

; <label>:40:                                     ; preds = %38, %35
  %41 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %19, i32 0, i32 1
  store i64 %4, i64* %41, align 8
  br label %50

; <label>:42:                                     ; preds = %14
  %43 = icmp eq %struct.hsts_kh_info* %19, null
  %44 = load i32, i32* %7, align 4
  %45 = icmp eq i32 %44, 1
  %or.cond6 = or i1 %43, %45
  br i1 %or.cond6, label %46, label %50

; <label>:46:                                     ; preds = %42
  %47 = trunc i8 %8 to i1
  %48 = call zeroext i1 @hsts_add_entry(%struct.hsts_store* %0, i8* %2, i32 %18, i64 %4, i1 zeroext %47)
  %49 = zext i1 %48 to i8
  br label %50

; <label>:50:                                     ; preds = %26, %40, %28, %25, %42, %46
  %.1 = phi i8 [ 0, %26 ], [ 0, %40 ], [ 0, %28 ], [ 0, %25 ], [ %49, %46 ], [ 0, %42 ]
  %51 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @free(i8* %52) #8
  %53 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  store i8* null, i8** %53, align 8
  br label %54

; <label>:54:                                     ; preds = %6, %12, %50
  %.2 = phi i8 [ 0, %12 ], [ %.1, %50 ], [ 0, %6 ]
  %55 = bitcast %struct.hsts_kh* %10 to i8*
  call void @free(i8* %55) #8
  %56 = trunc i8 %.2 to i1
  ret i1 %56
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @hsts_add_entry(%struct.hsts_store*, i8*, i32, i64, i1 zeroext) #0 {
  %6 = zext i1 %4 to i8
  %7 = call i64 @time(i64* null) #8
  %8 = icmp slt i64 %7, 0
  br i1 %8, label %13, label %9

; <label>:9:                                      ; preds = %5
  %10 = trunc i8 %6 to i1
  %11 = call zeroext i1 @hsts_new_entry_internal(%struct.hsts_store* %0, i8* %1, i32 %2, i64 %7, i64 %3, i1 zeroext %10, i1 zeroext false, i1 zeroext true, i1 zeroext false)
  %12 = zext i1 %11 to i32
  br label %13

; <label>:13:                                     ; preds = %5, %9
  %14 = phi i32 [ %12, %9 ], [ 0, %5 ]
  %15 = icmp ne i32 %14, 0
  ret i1 %15
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @hsts_new_entry_internal(%struct.hsts_store*, i8*, i32, i64, i64, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext) #0 {
  %10 = zext i1 %5 to i8
  %11 = zext i1 %6 to i8
  %12 = zext i1 %7 to i8
  %13 = zext i1 %8 to i8
  %14 = call noalias i8* @xmalloc(i64 16)
  %15 = bitcast i8* %14 to %struct.hsts_kh*
  %16 = call noalias i8* @xcalloc(i64 1, i64 24)
  %17 = bitcast i8* %16 to %struct.hsts_kh_info*
  %18 = call i8* @xstrdup_lower(i8* %1)
  %19 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %15, i32 0, i32 0
  store i8* %18, i8** %19, align 8
  %20 = icmp eq i32 %2, 443
  %. = select i1 %20, i32 0, i32 %2
  %21 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %15, i32 0, i32 1
  store i32 %., i32* %21, align 8
  %22 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %17, i32 0, i32 0
  store i64 %3, i64* %22, align 8
  %23 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %17, i32 0, i32 1
  store i64 %4, i64* %23, align 8
  %24 = trunc i8 %10 to i1
  %25 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %17, i32 0, i32 2
  %26 = zext i1 %24 to i8
  store i8 %26, i8* %25, align 8
  %27 = trunc i8 %11 to i1
  br i1 %27, label %28, label %30

; <label>:28:                                     ; preds = %9
  %29 = call zeroext i1 @is_valid_ip_address(i8* %1)
  br i1 %29, label %54, label %30

; <label>:30:                                     ; preds = %28, %9
  %31 = trunc i8 %12 to i1
  br i1 %31, label %32, label %41

; <label>:32:                                     ; preds = %30
  %33 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %17, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %17, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = add nsw i64 %34, %36
  %38 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %17, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp slt i64 %37, %39
  br i1 %40, label %54, label %41

; <label>:41:                                     ; preds = %32, %30
  %42 = trunc i8 %13 to i1
  br i1 %42, label %43, label %49

; <label>:43:                                     ; preds = %41
  %44 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %45 = load %struct.hash_table*, %struct.hash_table** %44, align 8
  %46 = bitcast %struct.hsts_kh* %15 to i8*
  %47 = call i32 @hash_table_contains(%struct.hash_table* %45, i8* %46)
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %54, label %49

; <label>:49:                                     ; preds = %43, %41
  %50 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %51 = load %struct.hash_table*, %struct.hash_table** %50, align 8
  %52 = bitcast %struct.hsts_kh* %15 to i8*
  %53 = bitcast %struct.hsts_kh_info* %17 to i8*
  call void @hash_table_put(%struct.hash_table* %51, i8* %52, i8* %53)
  br label %54

; <label>:54:                                     ; preds = %43, %32, %28, %49
  %.0 = phi i8 [ 1, %49 ], [ 0, %28 ], [ 0, %32 ], [ 0, %43 ]
  %55 = trunc i8 %.0 to i1
  br i1 %55, label %62, label %56

; <label>:56:                                     ; preds = %54
  %57 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %15, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  call void @free(i8* %58) #8
  %59 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %15, i32 0, i32 0
  store i8* null, i8** %59, align 8
  %60 = bitcast %struct.hsts_kh* %15 to i8*
  call void @free(i8* %60) #8
  %61 = bitcast %struct.hsts_kh_info* %17 to i8*
  call void @free(i8* %61) #8
  br label %62

; <label>:62:                                     ; preds = %56, %54
  %63 = trunc i8 %.0 to i1
  ret i1 %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.hsts_store* @hsts_store_open(i8*) #7 {
  %2 = alloca %struct.stat, align 8
  %3 = call noalias i8* @xcalloc(i64 1, i64 16)
  %4 = bitcast i8* %3 to %struct.hsts_store*
  %5 = call %struct.hash_table* @hash_table_new(i32 0, i64 (i8*)* @hsts_hash_func, i32 (i8*, i8*)* @hsts_cmp_func)
  %6 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %4, i32 0, i32 0
  store %struct.hash_table* %5, %struct.hash_table** %6, align 8
  %7 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %4, i32 0, i32 1
  store i64 0, i64* %7, align 8
  %8 = call zeroext i1 @file_exists_p(i8* %0)
  br i1 %8, label %9, label %28

; <label>:9:                                      ; preds = %1
  %10 = getelementptr [2 x i8], [2 x i8]* @.str.410, i32 0, i32 0
  %11 = call %struct._IO_FILE* @fopen(i8* %0, i8* %10), !track !362
  %12 = icmp ne %struct._IO_FILE* %11, null
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %9
  %14 = call zeroext i1 @hsts_read_database(%struct.hsts_store* %4, %struct._IO_FILE* %11, i1 zeroext false)
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %13, %9
  call void @hsts_store_close(%struct.hsts_store* %4)
  %16 = bitcast %struct.hsts_store* %4 to i8*
  call void @free(i8* %16) #8
  br label %28

; <label>:17:                                     ; preds = %13
  %18 = call i32 @fileno(%struct._IO_FILE* %11) #8
  %19 = call i32 @fstat(i32 %18, %struct.stat* %2) #8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %17
  %22 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 12
  %23 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %4, i32 0, i32 1
  store i64 %24, i64* %25, align 8
  br label %26

; <label>:26:                                     ; preds = %21, %17
  %27 = call i32 @fclose(%struct._IO_FILE* %11)
  br label %28

; <label>:28:                                     ; preds = %1, %26, %15
  %.0 = phi %struct.hsts_store* [ null, %15 ], [ %4, %26 ], [ %4, %1 ]
  ret %struct.hsts_store* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @hsts_hash_func(i8*) #0 {
  %2 = bitcast i8* %0 to %struct.hsts_kh*
  %3 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %2, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.03 = phi i32 [ %12, %.lr.ph ], [ %4, %.lr.ph.preheader ]
  %.012 = phi i8* [ %13, %.lr.ph ], [ %6, %.lr.ph.preheader ]
  %9 = mul i32 %.03, 31
  %10 = load i8, i8* %.012, align 1
  %11 = sext i8 %10 to i32
  %12 = add i32 %9, %11
  %13 = getelementptr inbounds i8, i8* %.012, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i32 [ %12, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.0.lcssa = phi i32 [ %4, %1 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %16 = zext i32 %.0.lcssa to i64
  ret i64 %16
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hsts_cmp_func(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.hsts_kh*
  %4 = bitcast i8* %1 to %struct.hsts_kh*
  %5 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %3, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %4, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = call i32 @strcmp(i8* %6, i8* %8) #14
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %17, label %11

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %3, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %4, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %13, %15
  br label %17

; <label>:17:                                     ; preds = %11, %2
  %18 = phi i1 [ false, %2 ], [ %16, %11 ]
  %19 = zext i1 %18 to i32
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @hsts_read_database(%struct.hsts_store*, %struct._IO_FILE*, i1 zeroext) #0 {
  %4 = alloca i8*, align 8, !track !363
  %5 = alloca i64, align 8, !track !364
  %6 = alloca [256 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = zext i1 %2 to i8
  store i8* null, i8** %4, align 8
  store i64 0, i64* %5, align 8
  %12 = trunc i8 %11 to i1
  %13 = zext i1 %12 to i64
  %14 = select i1 %12, i1 (%struct.hsts_store*, i8*, i32, i64, i64, i1)* @hsts_store_merge, i1 (%struct.hsts_store*, i8*, i32, i64, i64, i1)* @hsts_new_entry
  %15 = call i64 @getline(i8** %4, i64* %5, %struct._IO_FILE* %1)
  %16 = icmp sgt i64 %15, 0
  br i1 %16, label %.lr.ph3.preheader, label %._crit_edge4

.lr.ph3.preheader:                                ; preds = %3
  br label %.lr.ph3

.lr.ph3:                                          ; preds = %.lr.ph3.preheader, %.backedge
  call void @unroll_loop(i32 163)
  %17 = load i8*, i8** %4, align 8
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = call zeroext i1 @c_isspace(i32 %19)
  br i1 %20, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i8* [ %21, %.lr.ph ], [ %17, %.lr.ph.preheader ]
  call void @unroll_loop(i32 164)
  %21 = getelementptr inbounds i8, i8* %.01, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = call zeroext i1 @c_isspace(i32 %23)
  br i1 %24, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i8* [ %21, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph3
  %.0.lcssa = phi i8* [ %17, %.lr.ph3 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %25 = load i8, i8* %.0.lcssa, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 35
  br i1 %27, label %.backedge, label %30

.backedge:                                        ; preds = %30, %35, %._crit_edge
  %28 = call i64 @getline(i8** %4, i64* %5, %struct._IO_FILE* %1)
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %.lr.ph3, label %._crit_edge4.loopexit

; <label>:30:                                     ; preds = %._crit_edge
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i32 0, i32 0
  %32 = getelementptr [20 x i8], [20 x i8]* @.str.2.411, i32 0, i32 0
  %33 = call i32 (i8*, i8*, ...) @sscanf(i8* %.0.lcssa, i8* %32, i8* %31, i32* %7, i32* %10, i64* %8, i64* %9) #8
  %34 = icmp eq i32 %33, 5
  br i1 %34, label %35, label %.backedge

; <label>:35:                                     ; preds = %30
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i32 0, i32 0
  %37 = load i32, i32* %7, align 4
  %38 = load i64, i64* %8, align 8
  %39 = load i64, i64* %9, align 8
  %40 = load i32, i32* %10, align 4
  %41 = icmp ne i32 %40, 0
  %42 = xor i1 %41, true
  %43 = xor i1 %42, true
  %44 = call zeroext i1 %14(%struct.hsts_store* %0, i8* %36, i32 %37, i64 %38, i64 %39, i1 zeroext %43)
  br label %.backedge

._crit_edge4.loopexit:                            ; preds = %.backedge
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %._crit_edge4.loopexit, %3
  %45 = load i8*, i8** %4, align 8
  call void @free(i8* %45) #8
  store i8* null, i8** %4, align 8
  %46 = trunc i8 1 to i1
  ret i1 %46
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @hsts_store_close(%struct.hsts_store*) #0 {
  %2 = alloca %struct.hash_table_iterator, align 8, !track !365
  %3 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %4 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  call void @hash_table_iterate(%struct.hash_table* %4, %struct.hash_table_iterator* %2)
  %5 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 165)
  %7 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.hsts_kh*
  %10 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  call void @free(i8* %11) #8
  %12 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = bitcast i8* %13 to %struct.hsts_kh*
  %15 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %14, i32 0, i32 0
  store i8* null, i8** %15, align 8
  %16 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @free(i8* %17) #8
  %18 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  store i8* null, i8** %18, align 8
  %19 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  call void @free(i8* %20) #8
  %21 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 1
  store i8* null, i8** %21, align 8
  %22 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %24 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %25 = load %struct.hash_table*, %struct.hash_table** %24, align 8
  call void @hash_table_destroy(%struct.hash_table* %25)
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @hsts_store_merge(%struct.hsts_store*, i8*, i32, i64, i64, i1 zeroext) #0 {
  %7 = alloca i32, align 4
  %8 = zext i1 %5 to i8
  store i32 0, i32* %7, align 4
  %9 = icmp eq i32 %2, 443
  %. = select i1 %9, i32 0, i32 %2
  %10 = call %struct.hsts_kh_info* @hsts_find_entry(%struct.hsts_store* %0, i8* %1, i32 %., i32* %7, %struct.hsts_kh* null)
  %11 = icmp ne %struct.hsts_kh_info* %10, null
  %12 = load i32, i32* %7, align 4
  %13 = icmp eq i32 %12, 2
  %or.cond = and i1 %11, %13
  br i1 %or.cond, label %14, label %24

; <label>:14:                                     ; preds = %6
  %15 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %10, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp sgt i64 %3, %16
  br i1 %17, label %18, label %24

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %10, i32 0, i32 0
  store i64 %3, i64* %19, align 8
  %20 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %10, i32 0, i32 1
  store i64 %4, i64* %20, align 8
  %21 = trunc i8 %8 to i1
  %22 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %10, i32 0, i32 2
  %23 = zext i1 %21 to i8
  store i8 %23, i8* %22, align 8
  br label %30

; <label>:24:                                     ; preds = %14, %6
  %25 = icmp ne %struct.hsts_kh_info* %10, null
  br i1 %25, label %30, label %26

; <label>:26:                                     ; preds = %24
  %27 = trunc i8 %8 to i1
  %28 = call zeroext i1 @hsts_new_entry(%struct.hsts_store* %0, i8* %1, i32 %., i64 %3, i64 %4, i1 zeroext %27)
  %29 = zext i1 %28 to i8
  br label %30

; <label>:30:                                     ; preds = %24, %26, %18
  %.1 = phi i8 [ 1, %18 ], [ 0, %24 ], [ %29, %26 ]
  %31 = trunc i8 %.1 to i1
  ret i1 %31
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @hsts_new_entry(%struct.hsts_store*, i8*, i32, i64, i64, i1 zeroext) #0 {
  %7 = zext i1 %5 to i8
  %8 = trunc i8 %7 to i1
  %9 = call zeroext i1 @hsts_new_entry_internal(%struct.hsts_store* %0, i8* %1, i32 %2, i64 %3, i64 %4, i1 zeroext %8, i1 zeroext true, i1 zeroext true, i1 zeroext true)
  ret i1 %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @hsts_store_save(%struct.hsts_store*, i8*) #0 {
  %3 = alloca %struct.stat, align 8, !track !366
  %4 = icmp ne i8* %1, null
  br i1 %4, label %5, label %36

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %7 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %8 = call i32 @hash_table_count(%struct.hash_table* %7)
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %36

; <label>:10:                                     ; preds = %5
  %11 = getelementptr [3 x i8], [3 x i8]* @.str.1.412, i32 0, i32 0
  %12 = call %struct._IO_FILE* @fopen(i8* %1, i8* %11), !track !367
  %13 = icmp ne %struct._IO_FILE* %12, null
  br i1 %13, label %14, label %36

; <label>:14:                                     ; preds = %10
  %15 = call i32 @fileno(%struct._IO_FILE* %12) #8
  %16 = call i32 @flock(i32 %15, i32 2) #8
  %17 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %32

; <label>:20:                                     ; preds = %14
  %21 = call i32 @stat(i8* %1, %struct.stat* %3) #8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %32

; <label>:23:                                     ; preds = %20
  %24 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 12
  %25 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp sgt i64 %26, %28
  br i1 %29, label %30, label %32

; <label>:30:                                     ; preds = %23
  %31 = call zeroext i1 @hsts_read_database(%struct.hsts_store* %0, %struct._IO_FILE* %12, i1 zeroext true)
  br label %32

; <label>:32:                                     ; preds = %30, %23, %20, %14
  %33 = call i32 @fseek(%struct._IO_FILE* %12, i64 0, i32 0)
  %34 = call i32 @ftruncate(i32 %15, i64 0) #8
  call void @hsts_store_dump(%struct.hsts_store* %0, %struct._IO_FILE* %12)
  %35 = call i32 @fclose(%struct._IO_FILE* %12)
  br label %36

; <label>:36:                                     ; preds = %10, %32, %5, %2
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @flock(i32, i32) #2

declare dso_local i32 @fseek(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: nounwind
declare dso_local i32 @ftruncate(i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @hsts_store_dump(%struct.hsts_store*, %struct._IO_FILE*) #0 {
  %3 = alloca %struct.hash_table_iterator, align 8, !track !368
  %4 = getelementptr [47 x i8], [47 x i8]* @.str.3.413, i32 0, i32 0
  %5 = call i32 @fputs(i8* %4, %struct._IO_FILE* %1)
  %6 = getelementptr [26 x i8], [26 x i8]* @.str.4.414, i32 0, i32 0
  %7 = call i32 @fputs(i8* %6, %struct._IO_FILE* %1)
  %8 = getelementptr [62 x i8], [62 x i8]* @.str.5.415, i32 0, i32 0
  %9 = call i32 @fputs(i8* %8, %struct._IO_FILE* %1)
  %10 = getelementptr inbounds %struct.hsts_store, %struct.hsts_store* %0, i32 0, i32 0
  %11 = load %struct.hash_table*, %struct.hash_table** %10, align 8
  call void @hash_table_iterate(%struct.hash_table* %11, %struct.hash_table_iterator* %3)
  %12 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %3)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

; <label>:14:                                     ; preds = %.lr.ph
  %15 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %3)
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %.lr.ph, label %.loopexit.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %14
  call void @unroll_loop(i32 166)
  %17 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %3, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast i8* %18 to %struct.hsts_kh*
  %20 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %3, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = bitcast i8* %21 to %struct.hsts_kh_info*
  %23 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %19, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %19, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %22, i32 0, i32 2
  %28 = load i8, i8* %27, align 8
  %29 = trunc i8 %28 to i1
  %30 = zext i1 %29 to i32
  %31 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %22, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.hsts_kh_info, %struct.hsts_kh_info* %22, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr [18 x i8], [18 x i8]* @.str.6.416, i32 0, i32 0
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %35, i8* %24, i32 %26, i32 %30, i64 %32, i64 %34)
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %14

; <label>:38:                                     ; preds = %.lr.ph
  %39 = getelementptr [46 x i8], [46 x i8]* @.str.7.417, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %39)
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %14
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %2, %38
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @map_html_tags(i8*, i32, void (%struct.taginfo*, i8*)*, i8*, i32, %struct.hash_table*, %struct.hash_table*) #0 {
  %8 = alloca [256 x i8], align 16, !track !369
  %9 = alloca %struct.pool, align 8, !track !370
  %10 = alloca [8 x %struct.attr_pair], align 16, !track !371
  %11 = alloca %struct.tagstack_item*, align 8, !track !372
  %12 = alloca %struct.tagstack_item*, align 8, !track !373
  %13 = alloca %struct.taginfo, align 8, !track !374
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = getelementptr inbounds [8 x %struct.attr_pair], [8 x %struct.attr_pair]* %10, i32 0, i32 0
  store %struct.tagstack_item* null, %struct.tagstack_item** %11, align 8
  store %struct.tagstack_item* null, %struct.tagstack_item** %12, align 8
  %17 = icmp ne i32 %1, 0
  br i1 %17, label %18, label %484

; <label>:18:                                     ; preds = %7
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i32 0, i32 0
  %20 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  store i8* %19, i8** %20, align 8
  %21 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 1
  store i32 256, i32* %21, align 8
  %22 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 2
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 3
  store i8 0, i8* %23, align 8
  %24 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 4
  store i8* %25, i8** %26, align 8
  %27 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 5
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 2
  store i32 0, i32* %30, align 4
  %31 = ptrtoint i8* %15 to i64
  %32 = ptrtoint i8* %0 to i64
  %33 = sub i64 %31, %32
  %34 = call i8* @memchr(i8* %0, i32 60, i64 %33) #14, !track !375
  %35 = icmp ne i8* %34, null
  br i1 %35, label %.lr.ph.preheader, label %.outer248._crit_edge

.lr.ph.preheader:                                 ; preds = %18
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.outer248.backedge
  %36 = phi i8* [ %461, %.outer248.backedge ], [ %34, %.lr.ph.preheader ]
  %.015.ph316 = phi i32 [ %.015.ph.be, %.outer248.backedge ], [ 8, %.lr.ph.preheader ]
  %.019.ph315 = phi i8 [ %.019.ph.be, %.outer248.backedge ], [ 0, %.lr.ph.preheader ]
  %.025.ph314 = phi %struct.attr_pair* [ %.025.ph.be, %.outer248.backedge ], [ %16, %.lr.ph.preheader ]
  call void @unroll_loop(i32 153)
  br label %37

; <label>:37:                                     ; preds = %.lr.ph, %.backedge273
  %38 = phi i8* [ %36, %.lr.ph ], [ %70, %.backedge273 ]
  call void @unroll_loop(i32 170)
  %39 = getelementptr inbounds i8, i8* %38, i32 1
  %40 = icmp uge i8* %39, %15
  br i1 %40, label %.outer248._crit_edge.loopexit47, label %41

; <label>:41:                                     ; preds = %37
  %42 = load i8, i8* %39, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp eq i32 %43, 33
  br i1 %44, label %45, label %72

; <label>:45:                                     ; preds = %41
  %46 = and i32 %4, 1
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds i8, i8* %39, i64 3
  %49 = icmp ult i8* %48, %15
  %or.cond = and i1 %47, %49
  br i1 %or.cond, label %50, label %64

; <label>:50:                                     ; preds = %45
  %51 = getelementptr inbounds i8, i8* %39, i64 1
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 45
  br i1 %54, label %55, label %64

; <label>:55:                                     ; preds = %50
  %56 = getelementptr inbounds i8, i8* %39, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp eq i32 %58, 45
  br i1 %59, label %60, label %64

; <label>:60:                                     ; preds = %55
  %61 = getelementptr inbounds i8, i8* %39, i64 3
  %62 = call i8* @find_comment_end(i8* %61, i8* %15)
  %63 = icmp ne i8* %62, null
  %spec.select = select i1 %63, i8* %62, i8* %39
  br label %66

; <label>:64:                                     ; preds = %45, %55, %50
  %65 = call i8* @advance_declaration(i8* %39, i8* %15)
  br label %66

; <label>:66:                                     ; preds = %64, %60
  %.210 = phi i8* [ %65, %64 ], [ %spec.select, %60 ]
  %67 = icmp eq i8* %.210, %15
  br i1 %67, label %.outer248._crit_edge.loopexit47, label %.backedge273

.backedge273:                                     ; preds = %.critedge, %66
  %.08.be = phi i8* [ %.210, %66 ], [ %.4.lcssa, %.critedge ]
  store i32 0, i32* %30, align 4
  %68 = ptrtoint i8* %.08.be to i64
  %69 = sub i64 %31, %68
  %70 = call i8* @memchr(i8* %.08.be, i32 60, i64 %69) #14, !track !376
  %71 = icmp ne i8* %70, null
  br i1 %71, label %37, label %.outer248._crit_edge.loopexit47

; <label>:72:                                     ; preds = %41
  %73 = load i8, i8* %39, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %74, 47
  br i1 %75, label %76, label %79

; <label>:76:                                     ; preds = %72
  %77 = getelementptr inbounds i8, i8* %39, i32 1
  %78 = icmp uge i8* %77, %15
  br i1 %78, label %.outer248._crit_edge.loopexit47, label %79

; <label>:79:                                     ; preds = %72, %76
  %.034 = phi i32 [ 0, %72 ], [ 1, %76 ]
  %.3 = phi i8* [ %39, %72 ], [ %77, %76 ]
  br label %80

; <label>:80:                                     ; preds = %104, %79
  %.4 = phi i8* [ %.3, %79 ], [ %105, %104 ]
  call void @unroll_loop(i32 171)
  %81 = load i8, i8* %.4, align 1
  %82 = sext i8 %81 to i32
  %83 = icmp sgt i32 %82, 32
  br i1 %83, label %84, label %.critedge

; <label>:84:                                     ; preds = %80
  %85 = load i8, i8* %.4, align 1
  %86 = sext i8 %85 to i32
  %87 = icmp slt i32 %86, 127
  br i1 %87, label %88, label %.critedge

; <label>:88:                                     ; preds = %84
  %89 = load i8, i8* %.4, align 1
  %90 = sext i8 %89 to i32
  %91 = icmp ne i32 %90, 61
  br i1 %91, label %92, label %.critedge

; <label>:92:                                     ; preds = %88
  %93 = load i8, i8* %.4, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp ne i32 %94, 60
  br i1 %95, label %96, label %.critedge

; <label>:96:                                     ; preds = %92
  %97 = load i8, i8* %.4, align 1
  %98 = sext i8 %97 to i32
  %99 = icmp ne i32 %98, 62
  br i1 %99, label %100, label %.critedge

; <label>:100:                                    ; preds = %96
  %101 = load i8, i8* %.4, align 1
  %102 = sext i8 %101 to i32
  %103 = icmp ne i32 %102, 47
  br i1 %103, label %104, label %.critedge

; <label>:104:                                    ; preds = %100
  %105 = getelementptr inbounds i8, i8* %.4, i32 1
  %106 = icmp uge i8* %105, %15
  br i1 %106, label %.outer248._crit_edge.loopexit41, label %80

.critedge:                                        ; preds = %80, %84, %88, %92, %96, %100
  %.4.lcssa = phi i8* [ %.4, %100 ], [ %.4, %96 ], [ %.4, %92 ], [ %.4, %88 ], [ %.4, %84 ], [ %.4, %80 ]
  %107 = icmp eq i8* %.4.lcssa, %.3
  br i1 %107, label %.backedge273, label %108

; <label>:108:                                    ; preds = %.critedge
  %.lcssa253 = phi i8* [ %38, %.critedge ]
  %.034.lcssa = phi i32 [ %.034, %.critedge ]
  %.3.lcssa = phi i8* [ %.3, %.critedge ]
  %.4.lcssa.lcssa = phi i8* [ %.4.lcssa, %.critedge ]
  %109 = load i8, i8* %.4.lcssa.lcssa, align 1
  %110 = sext i8 %109 to i32
  %111 = call zeroext i1 @c_isspace(i32 %110)
  br i1 %111, label %.lr.ph279.preheader, label %._crit_edge280

.lr.ph279.preheader:                              ; preds = %108
  br label %.lr.ph279

.lr.ph279:                                        ; preds = %.lr.ph279.preheader, %114
  %.5277 = phi i8* [ %112, %114 ], [ %.4.lcssa.lcssa, %.lr.ph279.preheader ]
  call void @unroll_loop(i32 172)
  %112 = getelementptr inbounds i8, i8* %.5277, i32 1
  %113 = icmp uge i8* %112, %15
  br i1 %113, label %.outer248._crit_edge.loopexit44, label %114

; <label>:114:                                    ; preds = %.lr.ph279
  %115 = load i8, i8* %112, align 1
  %116 = sext i8 %115 to i32
  %117 = call zeroext i1 @c_isspace(i32 %116)
  br i1 %117, label %.lr.ph279, label %._crit_edge280.loopexit

._crit_edge280.loopexit:                          ; preds = %114
  %.5.lcssa.ph = phi i8* [ %112, %114 ]
  br label %._crit_edge280

._crit_edge280:                                   ; preds = %._crit_edge280.loopexit, %108
  %.5.lcssa = phi i8* [ %.4.lcssa.lcssa, %108 ], [ %.5.lcssa.ph, %._crit_edge280.loopexit ]
  %cond = icmp eq i32 %.034.lcssa, 0
  br i1 %cond, label %118, label %127

; <label>:118:                                    ; preds = %._crit_edge280
  %119 = call %struct.tagstack_item* @tagstack_push(%struct.tagstack_item** %11, %struct.tagstack_item** %12)
  %120 = icmp ne %struct.tagstack_item* %119, null
  br i1 %120, label %121, label %125

; <label>:121:                                    ; preds = %118
  %122 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %119, i32 0, i32 0
  store i8* %.3.lcssa, i8** %122, align 8
  %123 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %119, i32 0, i32 1
  store i8* %.4.lcssa.lcssa, i8** %123, align 8
  %124 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %119, i32 0, i32 2
  store i8* null, i8** %124, align 8
  br label %125

; <label>:125:                                    ; preds = %118, %121
  %126 = icmp ne i32 %.034.lcssa, 0
  br i1 %126, label %127, label %135

; <label>:127:                                    ; preds = %._crit_edge280, %125
  %128 = load i8, i8* %.5.lcssa, align 1
  %129 = sext i8 %128 to i32
  %130 = icmp ne i32 %129, 62
  br i1 %130, label %131, label %135

; <label>:131:                                    ; preds = %127
  %132 = load i8, i8* %.5.lcssa, align 1
  %133 = sext i8 %132 to i32
  %134 = icmp ne i32 %133, 60
  br i1 %134, label %457, label %135

; <label>:135:                                    ; preds = %131, %127, %125
  %136 = call zeroext i1 @name_allowed(%struct.hash_table* %5, i8* %.3.lcssa, i8* %.4.lcssa.lcssa)
  br i1 %136, label %137, label %138

; <label>:137:                                    ; preds = %135
  call void @convert_and_copy(%struct.pool* %9, i8* %.3.lcssa, i8* %.4.lcssa.lcssa, i32 1)
  br label %138

; <label>:138:                                    ; preds = %135, %137
  %.035 = phi i8 [ 0, %137 ], [ 1, %135 ]
  br label %.outer163

.outer163:                                        ; preds = %368, %138
  %indvars.iv = phi i64 [ %indvars.iv.next, %368 ], [ 0, %138 ]
  %.126.ph = phi %struct.attr_pair* [ %.328, %368 ], [ %.025.ph314, %138 ]
  %.120.ph = phi i8 [ %.322, %368 ], [ %.019.ph315, %138 ]
  %.116.ph = phi i32 [ %.217, %368 ], [ %.015.ph316, %138 ]
  %.6.ph = phi i8* [ %.16.lcssa, %368 ], [ %.5.lcssa, %138 ]
  call void @unroll_loop(i32 12)
  %139 = trunc i64 %indvars.iv to i32
  br label %140

; <label>:140:                                    ; preds = %.backedge, %.outer163
  %.6 = phi i8* [ %.6.ph, %.outer163 ], [ %.16, %.backedge ]
  call void @unroll_loop(i32 173)
  %141 = load i8, i8* %.6, align 1
  %142 = sext i8 %141 to i32
  %143 = call zeroext i1 @c_isspace(i32 %142)
  br i1 %143, label %.lr.ph284.preheader, label %._crit_edge285

.lr.ph284.preheader:                              ; preds = %140
  br label %.lr.ph284

.lr.ph284:                                        ; preds = %.lr.ph284.preheader, %146
  %.7282 = phi i8* [ %144, %146 ], [ %.6, %.lr.ph284.preheader ]
  call void @unroll_loop(i32 174)
  %144 = getelementptr inbounds i8, i8* %.7282, i32 1
  %145 = icmp uge i8* %144, %15
  br i1 %145, label %.outer248._crit_edge.loopexit34, label %146

; <label>:146:                                    ; preds = %.lr.ph284
  %147 = load i8, i8* %144, align 1
  %148 = sext i8 %147 to i32
  %149 = call zeroext i1 @c_isspace(i32 %148)
  br i1 %149, label %.lr.ph284, label %._crit_edge285.loopexit

._crit_edge285.loopexit:                          ; preds = %146
  %.7.lcssa.ph = phi i8* [ %144, %146 ]
  br label %._crit_edge285

._crit_edge285:                                   ; preds = %._crit_edge285.loopexit, %140
  %.7.lcssa = phi i8* [ %.6, %140 ], [ %.7.lcssa.ph, %._crit_edge285.loopexit ]
  %150 = load i8, i8* %.7.lcssa, align 1
  %151 = sext i8 %150 to i32
  %152 = icmp eq i32 %151, 47
  br i1 %152, label %153, label %173

; <label>:153:                                    ; preds = %._crit_edge285
  %154 = getelementptr inbounds i8, i8* %.7.lcssa, i32 1
  %155 = icmp uge i8* %154, %15
  br i1 %155, label %.outer248._crit_edge.loopexit37, label %156

; <label>:156:                                    ; preds = %153
  %157 = load i8, i8* %154, align 1
  %158 = sext i8 %157 to i32
  %159 = call zeroext i1 @c_isspace(i32 %158)
  br i1 %159, label %.lr.ph289.preheader, label %._crit_edge290

.lr.ph289.preheader:                              ; preds = %156
  br label %.lr.ph289

.lr.ph289:                                        ; preds = %.lr.ph289.preheader, %162
  %.8287 = phi i8* [ %160, %162 ], [ %154, %.lr.ph289.preheader ]
  call void @unroll_loop(i32 175)
  %160 = getelementptr inbounds i8, i8* %.8287, i32 1
  %161 = icmp uge i8* %160, %15
  br i1 %161, label %.outer248._crit_edge.loopexit31, label %162

; <label>:162:                                    ; preds = %.lr.ph289
  %163 = load i8, i8* %160, align 1
  %164 = sext i8 %163 to i32
  %165 = call zeroext i1 @c_isspace(i32 %164)
  br i1 %165, label %.lr.ph289, label %._crit_edge290.loopexit

._crit_edge290.loopexit:                          ; preds = %162
  %.8.lcssa.ph = phi i8* [ %160, %162 ]
  br label %._crit_edge290

._crit_edge290:                                   ; preds = %._crit_edge290.loopexit, %156
  %.8.lcssa = phi i8* [ %154, %156 ], [ %.8.lcssa.ph, %._crit_edge290.loopexit ]
  %166 = load i8, i8* %.8.lcssa, align 1
  %167 = sext i8 %166 to i32
  %168 = icmp ne i32 %167, 60
  br i1 %168, label %169, label %173

; <label>:169:                                    ; preds = %._crit_edge290
  %170 = load i8, i8* %.8.lcssa, align 1
  %171 = sext i8 %170 to i32
  %172 = icmp ne i32 %171, 62
  br i1 %172, label %.loopexit40, label %173

; <label>:173:                                    ; preds = %._crit_edge290, %169, %._crit_edge285
  %.9 = phi i8* [ %.7.lcssa, %._crit_edge285 ], [ %.8.lcssa, %169 ], [ %.8.lcssa, %._crit_edge290 ]
  %174 = load i8, i8* %.9, align 1
  %175 = sext i8 %174 to i32
  %176 = icmp eq i32 %175, 60
  br i1 %176, label %385, label %177

; <label>:177:                                    ; preds = %173
  %178 = load i8, i8* %.9, align 1
  %179 = sext i8 %178 to i32
  %180 = icmp eq i32 %179, 62
  br i1 %180, label %385, label %.preheader27

.preheader27:                                     ; preds = %177
  br label %181

; <label>:181:                                    ; preds = %.preheader27, %205
  %.10 = phi i8* [ %206, %205 ], [ %.9, %.preheader27 ]
  call void @unroll_loop(i32 176)
  %182 = load i8, i8* %.10, align 1
  %183 = sext i8 %182 to i32
  %184 = icmp sgt i32 %183, 32
  br i1 %184, label %185, label %.critedge6

; <label>:185:                                    ; preds = %181
  %186 = load i8, i8* %.10, align 1
  %187 = sext i8 %186 to i32
  %188 = icmp slt i32 %187, 127
  br i1 %188, label %189, label %.critedge6

; <label>:189:                                    ; preds = %185
  %190 = load i8, i8* %.10, align 1
  %191 = sext i8 %190 to i32
  %192 = icmp ne i32 %191, 61
  br i1 %192, label %193, label %.critedge6

; <label>:193:                                    ; preds = %189
  %194 = load i8, i8* %.10, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp ne i32 %195, 60
  br i1 %196, label %197, label %.critedge6

; <label>:197:                                    ; preds = %193
  %198 = load i8, i8* %.10, align 1
  %199 = sext i8 %198 to i32
  %200 = icmp ne i32 %199, 62
  br i1 %200, label %201, label %.critedge6

; <label>:201:                                    ; preds = %197
  %202 = load i8, i8* %.10, align 1
  %203 = sext i8 %202 to i32
  %204 = icmp ne i32 %203, 47
  br i1 %204, label %205, label %.critedge6

; <label>:205:                                    ; preds = %201
  %206 = getelementptr inbounds i8, i8* %.10, i32 1
  %207 = icmp uge i8* %206, %15
  br i1 %207, label %.outer248._crit_edge.loopexit28, label %181

.critedge6:                                       ; preds = %181, %185, %189, %193, %197, %201
  %.10.lcssa = phi i8* [ %.10, %201 ], [ %.10, %197 ], [ %.10, %193 ], [ %.10, %189 ], [ %.10, %185 ], [ %.10, %181 ]
  %208 = icmp eq i8* %.9, %.10.lcssa
  br i1 %208, label %.loopexit40, label %209

; <label>:209:                                    ; preds = %.critedge6
  %210 = load i8, i8* %.10.lcssa, align 1
  %211 = sext i8 %210 to i32
  %212 = call zeroext i1 @c_isspace(i32 %211)
  br i1 %212, label %.lr.ph294.preheader, label %._crit_edge295

.lr.ph294.preheader:                              ; preds = %209
  br label %.lr.ph294

.lr.ph294:                                        ; preds = %.lr.ph294.preheader, %215
  %.11292 = phi i8* [ %213, %215 ], [ %.10.lcssa, %.lr.ph294.preheader ]
  call void @unroll_loop(i32 177)
  %213 = getelementptr inbounds i8, i8* %.11292, i32 1
  %214 = icmp uge i8* %213, %15
  br i1 %214, label %.outer248._crit_edge.loopexit24, label %215

; <label>:215:                                    ; preds = %.lr.ph294
  %216 = load i8, i8* %213, align 1
  %217 = sext i8 %216 to i32
  %218 = call zeroext i1 @c_isspace(i32 %217)
  br i1 %218, label %.lr.ph294, label %._crit_edge295.loopexit

._crit_edge295.loopexit:                          ; preds = %215
  %.11.lcssa.ph = phi i8* [ %213, %215 ]
  br label %._crit_edge295

._crit_edge295:                                   ; preds = %._crit_edge295.loopexit, %209
  %.11.lcssa = phi i8* [ %.10.lcssa, %209 ], [ %.11.lcssa.ph, %._crit_edge295.loopexit ]
  %219 = load i8, i8* %.11.lcssa, align 1
  %220 = sext i8 %219 to i32
  %221 = icmp sgt i32 %220, 32
  br i1 %221, label %222, label %242

; <label>:222:                                    ; preds = %._crit_edge295
  %223 = load i8, i8* %.11.lcssa, align 1
  %224 = sext i8 %223 to i32
  %225 = icmp slt i32 %224, 127
  br i1 %225, label %226, label %242

; <label>:226:                                    ; preds = %222
  %227 = load i8, i8* %.11.lcssa, align 1
  %228 = sext i8 %227 to i32
  %229 = icmp ne i32 %228, 61
  br i1 %229, label %230, label %242

; <label>:230:                                    ; preds = %226
  %231 = load i8, i8* %.11.lcssa, align 1
  %232 = sext i8 %231 to i32
  %233 = icmp ne i32 %232, 60
  br i1 %233, label %234, label %242

; <label>:234:                                    ; preds = %230
  %235 = load i8, i8* %.11.lcssa, align 1
  %236 = sext i8 %235 to i32
  %237 = icmp ne i32 %236, 62
  br i1 %237, label %238, label %242

; <label>:238:                                    ; preds = %234
  %239 = load i8, i8* %.11.lcssa, align 1
  %240 = sext i8 %239 to i32
  %241 = icmp ne i32 %240, 47
  br i1 %241, label %340, label %242

; <label>:242:                                    ; preds = %238, %234, %230, %226, %222, %._crit_edge295
  %243 = load i8, i8* %.11.lcssa, align 1
  %244 = sext i8 %243 to i32
  %245 = icmp eq i32 %244, 47
  br i1 %245, label %340, label %246

; <label>:246:                                    ; preds = %242
  %247 = load i8, i8* %.11.lcssa, align 1
  %248 = sext i8 %247 to i32
  %249 = icmp eq i32 %248, 60
  br i1 %249, label %340, label %250

; <label>:250:                                    ; preds = %246
  %251 = load i8, i8* %.11.lcssa, align 1
  %252 = sext i8 %251 to i32
  %253 = icmp eq i32 %252, 62
  br i1 %253, label %340, label %254

; <label>:254:                                    ; preds = %250
  %255 = load i8, i8* %.11.lcssa, align 1
  %256 = sext i8 %255 to i32
  %257 = icmp eq i32 %256, 61
  br i1 %257, label %258, label %.loopexit40

; <label>:258:                                    ; preds = %254
  %259 = getelementptr inbounds i8, i8* %.11.lcssa, i32 1
  %260 = icmp uge i8* %259, %15
  br i1 %260, label %.outer248._crit_edge.loopexit37, label %261

; <label>:261:                                    ; preds = %258
  %262 = load i8, i8* %259, align 1
  %263 = sext i8 %262 to i32
  %264 = call zeroext i1 @c_isspace(i32 %263)
  br i1 %264, label %.lr.ph299.preheader, label %._crit_edge300

.lr.ph299.preheader:                              ; preds = %261
  br label %.lr.ph299

.lr.ph299:                                        ; preds = %.lr.ph299.preheader, %267
  %.12297 = phi i8* [ %265, %267 ], [ %259, %.lr.ph299.preheader ]
  call void @unroll_loop(i32 178)
  %265 = getelementptr inbounds i8, i8* %.12297, i32 1
  %266 = icmp uge i8* %265, %15
  br i1 %266, label %.outer248._crit_edge.loopexit21, label %267

; <label>:267:                                    ; preds = %.lr.ph299
  %268 = load i8, i8* %265, align 1
  %269 = sext i8 %268 to i32
  %270 = call zeroext i1 @c_isspace(i32 %269)
  br i1 %270, label %.lr.ph299, label %._crit_edge300.loopexit

._crit_edge300.loopexit:                          ; preds = %267
  %.12.lcssa.ph = phi i8* [ %265, %267 ]
  br label %._crit_edge300

._crit_edge300:                                   ; preds = %._crit_edge300.loopexit, %261
  %.12.lcssa = phi i8* [ %259, %261 ], [ %.12.lcssa.ph, %._crit_edge300.loopexit ]
  %271 = load i8, i8* %.12.lcssa, align 1
  %272 = sext i8 %271 to i32
  %273 = icmp eq i32 %272, 34
  br i1 %273, label %278, label %274

; <label>:274:                                    ; preds = %._crit_edge300
  %275 = load i8, i8* %.12.lcssa, align 1
  %276 = sext i8 %275 to i32
  %277 = icmp eq i32 %276, 39
  br i1 %277, label %278, label %.preheader

.preheader:                                       ; preds = %274
  br label %324

; <label>:278:                                    ; preds = %274, %._crit_edge300
  %279 = load i8, i8* %.12.lcssa, align 1
  %280 = getelementptr inbounds i8, i8* %.12.lcssa, i32 1
  %281 = icmp uge i8* %280, %15
  br i1 %281, label %.outer248._crit_edge.loopexit37, label %282

; <label>:282:                                    ; preds = %278
  %283 = load i8, i8* %280, align 1
  %284 = sext i8 %283 to i32
  %285 = sext i8 %279 to i32
  %286 = icmp ne i32 %284, %285
  br i1 %286, label %.lr.ph303.preheader, label %.loopexit

.lr.ph303.preheader:                              ; preds = %282
  br label %.lr.ph303

.lr.ph303:                                        ; preds = %.lr.ph303.preheader, %.outer
  %.02.ph306 = phi i8 [ 1, %.outer ], [ 0, %.lr.ph303.preheader ]
  call void @unroll_loop(i32 106)
  br label %287

; <label>:287:                                    ; preds = %.lr.ph303, %309
  %.13302 = phi i8* [ %280, %.lr.ph303 ], [ %307, %309 ]
  call void @unroll_loop(i32 179)
  %288 = trunc i8 %.02.ph306 to i1
  br i1 %288, label %296, label %289

; <label>:289:                                    ; preds = %287
  %290 = load i8, i8* %.13302, align 1
  %291 = sext i8 %290 to i32
  %292 = icmp eq i32 %291, 10
  br i1 %292, label %.outer, label %296

.outer:                                           ; preds = %289
  %293 = load i8, i8* %280, align 1
  %294 = sext i8 %293 to i32
  %295 = icmp ne i32 %294, %285
  br i1 %295, label %.lr.ph303, label %.loopexit.loopexit16

; <label>:296:                                    ; preds = %289, %287
  %297 = trunc i8 %.02.ph306 to i1
  br i1 %297, label %298, label %306

; <label>:298:                                    ; preds = %296
  %299 = load i8, i8* %.13302, align 1
  %300 = sext i8 %299 to i32
  %301 = icmp eq i32 %300, 60
  br i1 %301, label %.loopexit.loopexit, label %302

; <label>:302:                                    ; preds = %298
  %303 = load i8, i8* %.13302, align 1
  %304 = sext i8 %303 to i32
  %305 = icmp eq i32 %304, 62
  br i1 %305, label %.loopexit.loopexit, label %306

; <label>:306:                                    ; preds = %302, %296
  %307 = getelementptr inbounds i8, i8* %.13302, i32 1
  %308 = icmp uge i8* %307, %15
  br i1 %308, label %.outer248._crit_edge.loopexit, label %309

; <label>:309:                                    ; preds = %306
  %310 = load i8, i8* %307, align 1
  %311 = sext i8 %310 to i32
  %312 = icmp ne i32 %311, %285
  br i1 %312, label %287, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %302, %298, %309
  %.13.lcssa.ph = phi i8* [ %307, %309 ], [ %.13302, %298 ], [ %.13302, %302 ]
  br label %.loopexit

.loopexit.loopexit16:                             ; preds = %.outer
  %.13.lcssa.ph17 = phi i8* [ %280, %.outer ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit16, %.loopexit.loopexit, %282
  %.13.lcssa = phi i8* [ %280, %282 ], [ %.13.lcssa.ph, %.loopexit.loopexit ], [ %.13.lcssa.ph17, %.loopexit.loopexit16 ]
  %313 = load i8, i8* %.13.lcssa, align 1
  %314 = sext i8 %313 to i32
  %315 = sext i8 %279 to i32
  %316 = icmp eq i32 %314, %315
  br i1 %316, label %317, label %.outer248.backedge.loopexit

; <label>:317:                                    ; preds = %.loopexit
  %318 = getelementptr inbounds i8, i8* %.13.lcssa, i32 1
  %319 = icmp uge i8* %318, %15
  br i1 %319, label %.outer248._crit_edge.loopexit37, label %320

; <label>:320:                                    ; preds = %317
  %321 = and i32 %4, 2
  %322 = icmp ne i32 %321, 0
  %323 = or i32 2, 4
  %spec.select11 = select i1 %322, i32 %323, i32 2
  br label %340

; <label>:324:                                    ; preds = %.preheader, %336
  %.14 = phi i8* [ %337, %336 ], [ %.12.lcssa, %.preheader ]
  call void @unroll_loop(i32 180)
  %325 = load i8, i8* %.14, align 1
  %326 = sext i8 %325 to i32
  %327 = call zeroext i1 @c_isspace(i32 %326)
  br i1 %327, label %.critedge12, label %328

; <label>:328:                                    ; preds = %324
  %329 = load i8, i8* %.14, align 1
  %330 = sext i8 %329 to i32
  %331 = icmp ne i32 %330, 60
  br i1 %331, label %332, label %.critedge12

; <label>:332:                                    ; preds = %328
  %333 = load i8, i8* %.14, align 1
  %334 = sext i8 %333 to i32
  %335 = icmp ne i32 %334, 62
  br i1 %335, label %336, label %.critedge12

; <label>:336:                                    ; preds = %332
  %337 = getelementptr inbounds i8, i8* %.14, i32 1
  %338 = icmp uge i8* %337, %15
  br i1 %338, label %.outer248._crit_edge.loopexit18, label %324

.critedge12:                                      ; preds = %324, %328, %332
  %.14.lcssa = phi i8* [ %.14, %332 ], [ %.14, %328 ], [ %.14, %324 ]
  %339 = icmp eq i8* %.12.lcssa, %.14.lcssa
  br i1 %339, label %.loopexit40, label %340

; <label>:340:                                    ; preds = %.critedge12, %320, %238, %242, %246, %250
  %.1041 = phi i8* [ %.10.lcssa, %250 ], [ %.10.lcssa, %246 ], [ %.10.lcssa, %242 ], [ %.10.lcssa, %238 ], [ %.10.lcssa, %320 ], [ %.10.lcssa, %.critedge12 ]
  %.132 = phi i8* [ %.9, %250 ], [ %.9, %246 ], [ %.9, %242 ], [ %.9, %238 ], [ %280, %320 ], [ %.12.lcssa, %.critedge12 ]
  %.114 = phi i8* [ %.10.lcssa, %250 ], [ %.10.lcssa, %246 ], [ %.10.lcssa, %242 ], [ %.10.lcssa, %238 ], [ %.13.lcssa, %320 ], [ %.14.lcssa, %.critedge12 ]
  %.16 = phi i8* [ %.11.lcssa, %250 ], [ %.11.lcssa, %246 ], [ %.11.lcssa, %242 ], [ %.11.lcssa, %238 ], [ %318, %320 ], [ %.14.lcssa, %.critedge12 ]
  %.17 = phi i8* [ %.9, %250 ], [ %.9, %246 ], [ %.9, %242 ], [ %.9, %238 ], [ %.12.lcssa, %320 ], [ %.12.lcssa, %.critedge12 ]
  %.15 = phi i8* [ %.10.lcssa, %250 ], [ %.10.lcssa, %246 ], [ %.10.lcssa, %242 ], [ %.10.lcssa, %238 ], [ %318, %320 ], [ %.14.lcssa, %.critedge12 ]
  %.2 = phi i32 [ 1, %250 ], [ 1, %246 ], [ 1, %242 ], [ 1, %238 ], [ %spec.select11, %320 ], [ 2, %.critedge12 ]
  %341 = trunc i8 %.035 to i1
  br i1 %341, label %.backedge, label %342

; <label>:342:                                    ; preds = %340
  %343 = call zeroext i1 @name_allowed(%struct.hash_table* %6, i8* %.9, i8* %.1041)
  br i1 %343, label %344, label %.backedge

.backedge:                                        ; preds = %342, %340
  br label %140

; <label>:344:                                    ; preds = %342
  %.9.lcssa175 = phi i8* [ %.9, %342 ]
  %.1041.lcssa = phi i8* [ %.1041, %342 ]
  %.132.lcssa = phi i8* [ %.132, %342 ]
  %.114.lcssa = phi i8* [ %.114, %342 ]
  %.16.lcssa = phi i8* [ %.16, %342 ]
  %.17.lcssa = phi i8* [ %.17, %342 ]
  %.15.lcssa = phi i8* [ %.15, %342 ]
  %.2.lcssa = phi i32 [ %.2, %342 ]
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %345 = sext i32 %.116.ph to i64
  br label %346

; <label>:346:                                    ; preds = %346, %344
  %.01 = phi i64 [ %345, %344 ], [ %348, %346 ]
  %347 = icmp slt i64 %.01, %indvars.iv.next
  %348 = shl i64 %.01, 1
  br i1 %347, label %346, label %349

; <label>:349:                                    ; preds = %346
  %.01.lcssa = phi i64 [ %.01, %346 ]
  %350 = sext i32 %.116.ph to i64
  %351 = icmp ne i64 %.01.lcssa, %350
  br i1 %351, label %352, label %368

; <label>:352:                                    ; preds = %349
  %353 = trunc i8 %.120.ph to i1
  br i1 %353, label %354, label %359

; <label>:354:                                    ; preds = %352
  %355 = bitcast %struct.attr_pair* %.126.ph to i8*
  %356 = mul i64 %.01.lcssa, 40
  %357 = call i8* @xrealloc(i8* %355, i64 %356)
  %358 = bitcast i8* %357 to %struct.attr_pair*
  br label %366

; <label>:359:                                    ; preds = %352
  %360 = mul i64 %.01.lcssa, 40
  %361 = call noalias i8* @xmalloc(i64 %360)
  %362 = bitcast %struct.attr_pair* %.126.ph to i8*
  %363 = sext i32 %.116.ph to i64
  %364 = mul i64 %363, 40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %361, i8* align 8 %362, i64 %364, i1 false), !track !377
  %365 = bitcast i8* %361 to %struct.attr_pair*
  br label %366

; <label>:366:                                    ; preds = %359, %354
  %.227 = phi %struct.attr_pair* [ %358, %354 ], [ %365, %359 ]
  %.221 = phi i8 [ %.120.ph, %354 ], [ 1, %359 ]
  %367 = trunc i64 %.01.lcssa to i32
  br label %368

; <label>:368:                                    ; preds = %349, %366
  %.328 = phi %struct.attr_pair* [ %.227, %366 ], [ %.126.ph, %349 ]
  %.322 = phi i8 [ %.221, %366 ], [ %.120.ph, %349 ]
  %.217 = phi i32 [ %367, %366 ], [ %.116.ph, %349 ]
  %369 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 2
  %370 = load i32, i32* %369, align 4
  %371 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.328, i64 %indvars.iv
  %372 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %371, i32 0, i32 4
  store i32 %370, i32* %372, align 4
  call void @convert_and_copy(%struct.pool* %9, i8* %.9.lcssa175, i8* %.1041.lcssa, i32 1)
  %373 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 2
  %374 = load i32, i32* %373, align 4
  %375 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.328, i64 %indvars.iv
  %376 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %375, i32 0, i32 5
  store i32 %374, i32* %376, align 8
  call void @convert_and_copy(%struct.pool* %9, i8* %.132.lcssa, i8* %.114.lcssa, i32 %.2.lcssa)
  %377 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.328, i64 %indvars.iv
  %378 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %377, i32 0, i32 2
  store i8* %.17.lcssa, i8** %378, align 8
  %379 = ptrtoint i8* %.15.lcssa to i64
  %380 = ptrtoint i8* %.17.lcssa to i64
  %381 = sub i64 %379, %380
  %382 = trunc i64 %381 to i32
  %383 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.328, i64 %indvars.iv
  %384 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %383, i32 0, i32 3
  store i32 %382, i32* %384, align 8
  br label %.outer163

; <label>:385:                                    ; preds = %173, %177
  %.033.lcssa112 = phi i32 [ %139, %177 ], [ %139, %173 ]
  %.126.lcssa95 = phi %struct.attr_pair* [ %.126.ph, %177 ], [ %.126.ph, %173 ]
  %.120.lcssa78 = phi i8 [ %.120.ph, %177 ], [ %.120.ph, %173 ]
  %.116.lcssa62 = phi i32 [ %.116.ph, %177 ], [ %.116.ph, %173 ]
  %.9.lcssa = phi i8* [ %.9, %177 ], [ %.9, %173 ]
  %386 = icmp eq i32 %.034.lcssa, 0
  %387 = load %struct.tagstack_item*, %struct.tagstack_item** %12, align 8
  %388 = icmp ne %struct.tagstack_item* %387, null
  %or.cond15 = and i1 %386, %388
  br i1 %or.cond15, label %389, label %398

; <label>:389:                                    ; preds = %385
  %390 = load %struct.tagstack_item*, %struct.tagstack_item** %12, align 8
  %391 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %390, i32 0, i32 0
  %392 = load i8*, i8** %391, align 8
  %393 = icmp eq i8* %392, %.3.lcssa
  br i1 %393, label %394, label %398

; <label>:394:                                    ; preds = %389
  %395 = getelementptr inbounds i8, i8* %.9.lcssa, i64 1
  %396 = load %struct.tagstack_item*, %struct.tagstack_item** %12, align 8
  %397 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %396, i32 0, i32 2
  store i8* %395, i8** %397, align 8
  br label %398

; <label>:398:                                    ; preds = %385, %394, %389
  %399 = trunc i8 %.035 to i1
  br i1 %399, label %400, label %403

; <label>:400:                                    ; preds = %398
  %401 = getelementptr inbounds i8, i8* %.9.lcssa, i32 1
  %402 = icmp uge i8* %401, %15
  br i1 %402, label %.outer248._crit_edge.loopexit50, label %.outer248.backedge

; <label>:403:                                    ; preds = %398
  %404 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  %405 = load i8*, i8** %404, align 8
  %406 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 0
  store i8* %405, i8** %406, align 8
  %407 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 1
  store i32 %.034.lcssa, i32* %407, align 8
  %408 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 2
  store i32 %.033.lcssa112, i32* %408, align 4
  %409 = icmp slt i32 0, %.033.lcssa112
  br i1 %409, label %.lr.ph310.preheader, label %._crit_edge311

.lr.ph310.preheader:                              ; preds = %403
  %410 = zext i32 %.033.lcssa112 to i64
  br label %.lr.ph310

.lr.ph310:                                        ; preds = %.lr.ph310.preheader, %.lr.ph310
  %indvars.iv312 = phi i64 [ %indvars.iv.next313, %.lr.ph310 ], [ 0, %.lr.ph310.preheader ]
  call void @unroll_loop(i32 181)
  %411 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  %412 = load i8*, i8** %411, align 8
  %413 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.126.lcssa95, i64 %indvars.iv312
  %414 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %413, i32 0, i32 4
  %415 = load i32, i32* %414, align 4
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds i8, i8* %412, i64 %416
  %418 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.126.lcssa95, i64 %indvars.iv312
  %419 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %418, i32 0, i32 0
  store i8* %417, i8** %419, align 8
  %420 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  %421 = load i8*, i8** %420, align 8
  %422 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.126.lcssa95, i64 %indvars.iv312
  %423 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %422, i32 0, i32 5
  %424 = load i32, i32* %423, align 8
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i8, i8* %421, i64 %425
  %427 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %.126.lcssa95, i64 %indvars.iv312
  %428 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %427, i32 0, i32 1
  store i8* %426, i8** %428, align 8
  %indvars.iv.next313 = add nuw nsw i64 %indvars.iv312, 1
  %exitcond53 = icmp ne i64 %indvars.iv.next313, %410
  br i1 %exitcond53, label %.lr.ph310, label %._crit_edge311.loopexit

._crit_edge311.loopexit:                          ; preds = %.lr.ph310
  br label %._crit_edge311

._crit_edge311:                                   ; preds = %._crit_edge311.loopexit, %403
  %429 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 3
  store %struct.attr_pair* %.126.lcssa95, %struct.attr_pair** %429, align 8
  %430 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 4
  store i8* %.lcssa253, i8** %430, align 8
  %431 = getelementptr inbounds i8, i8* %.9.lcssa, i64 1
  %432 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 5
  store i8* %431, i8** %432, align 8
  %433 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 6
  store i8* null, i8** %433, align 8
  %434 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 7
  store i8* null, i8** %434, align 8
  %435 = icmp ne i32 %.034.lcssa, 0
  br i1 %435, label %436, label %450

; <label>:436:                                    ; preds = %._crit_edge311
  %437 = load %struct.tagstack_item*, %struct.tagstack_item** %12, align 8
  %438 = call %struct.tagstack_item* @tagstack_find(%struct.tagstack_item* %437, i8* %.3.lcssa, i8* %.4.lcssa.lcssa)
  %439 = icmp ne %struct.tagstack_item* %438, null
  br i1 %439, label %440, label %450

; <label>:440:                                    ; preds = %436
  %441 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %438, i32 0, i32 2
  %442 = load i8*, i8** %441, align 8
  %443 = icmp ne i8* %442, null
  br i1 %443, label %444, label %449

; <label>:444:                                    ; preds = %440
  %445 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %438, i32 0, i32 2
  %446 = load i8*, i8** %445, align 8
  %447 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 6
  store i8* %446, i8** %447, align 8
  %448 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %13, i32 0, i32 7
  store i8* %.lcssa253, i8** %448, align 8
  br label %449

; <label>:449:                                    ; preds = %444, %440
  call void @tagstack_pop(%struct.tagstack_item** %11, %struct.tagstack_item** %12, %struct.tagstack_item* %438)
  br label %450

; <label>:450:                                    ; preds = %436, %449, %._crit_edge311
  call void %2(%struct.taginfo* %13, i8* %3)
  %451 = load i8, i8* %.9.lcssa, align 1
  %452 = sext i8 %451 to i32
  %453 = icmp ne i32 %452, 60
  br i1 %453, label %454, label %.outer248.backedge

; <label>:454:                                    ; preds = %450
  %455 = getelementptr inbounds i8, i8* %.9.lcssa, i32 1
  %456 = icmp uge i8* %455, %15
  br i1 %456, label %.outer248._crit_edge.loopexit50, label %.outer248.backedge

.loopexit40:                                      ; preds = %169, %.critedge6, %.critedge12, %254
  %.429.ph = phi %struct.attr_pair* [ %.126.ph, %254 ], [ %.126.ph, %.critedge12 ], [ %.126.ph, %.critedge6 ], [ %.126.ph, %169 ]
  %.423.ph = phi i8 [ %.120.ph, %254 ], [ %.120.ph, %.critedge12 ], [ %.120.ph, %.critedge6 ], [ %.120.ph, %169 ]
  %.318.ph = phi i32 [ %.116.ph, %254 ], [ %.116.ph, %.critedge12 ], [ %.116.ph, %.critedge6 ], [ %.116.ph, %169 ]
  br label %457

; <label>:457:                                    ; preds = %.loopexit40, %131
  %.429 = phi %struct.attr_pair* [ %.025.ph314, %131 ], [ %.429.ph, %.loopexit40 ]
  %.423 = phi i8 [ %.019.ph315, %131 ], [ %.423.ph, %.loopexit40 ]
  %.318 = phi i32 [ %.015.ph316, %131 ], [ %.318.ph, %.loopexit40 ]
  %458 = getelementptr inbounds i8, i8* %.lcssa253, i64 1
  br label %.outer248.backedge

.outer248.backedge.loopexit:                      ; preds = %.loopexit
  %.025.ph.be.ph = phi %struct.attr_pair* [ %.126.ph, %.loopexit ]
  %.019.ph.be.ph = phi i8 [ %.120.ph, %.loopexit ]
  %.015.ph.be.ph = phi i32 [ %.116.ph, %.loopexit ]
  %.08.ph.be.ph = phi i8* [ %.13.lcssa, %.loopexit ]
  br label %.outer248.backedge

.outer248.backedge:                               ; preds = %.outer248.backedge.loopexit, %450, %454, %400, %457
  %.025.ph.be = phi %struct.attr_pair* [ %.429, %457 ], [ %.126.lcssa95, %400 ], [ %.126.lcssa95, %454 ], [ %.126.lcssa95, %450 ], [ %.025.ph.be.ph, %.outer248.backedge.loopexit ]
  %.019.ph.be = phi i8 [ %.423, %457 ], [ %.120.lcssa78, %400 ], [ %.120.lcssa78, %454 ], [ %.120.lcssa78, %450 ], [ %.019.ph.be.ph, %.outer248.backedge.loopexit ]
  %.015.ph.be = phi i32 [ %.318, %457 ], [ %.116.lcssa62, %400 ], [ %.116.lcssa62, %454 ], [ %.116.lcssa62, %450 ], [ %.015.ph.be.ph, %.outer248.backedge.loopexit ]
  %.08.ph.be = phi i8* [ %458, %457 ], [ %401, %400 ], [ %.9.lcssa, %450 ], [ %455, %454 ], [ %.08.ph.be.ph, %.outer248.backedge.loopexit ]
  store i32 0, i32* %30, align 4
  %459 = ptrtoint i8* %.08.ph.be to i64
  %460 = sub i64 %31, %459
  %461 = call i8* @memchr(i8* %.08.ph.be, i32 60, i64 %460) #14, !track !378
  %462 = icmp ne i8* %461, null
  br i1 %462, label %.lr.ph, label %.outer248._crit_edge.loopexit50

.outer248._crit_edge.loopexit:                    ; preds = %306
  %.530.ph = phi %struct.attr_pair* [ %.126.ph, %306 ]
  %.524.ph = phi i8 [ %.120.ph, %306 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit18:                  ; preds = %336
  %.530.ph19 = phi %struct.attr_pair* [ %.126.ph, %336 ]
  %.524.ph20 = phi i8 [ %.120.ph, %336 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit21:                  ; preds = %.lr.ph299
  %.530.ph22 = phi %struct.attr_pair* [ %.126.ph, %.lr.ph299 ]
  %.524.ph23 = phi i8 [ %.120.ph, %.lr.ph299 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit24:                  ; preds = %.lr.ph294
  %.530.ph25 = phi %struct.attr_pair* [ %.126.ph, %.lr.ph294 ]
  %.524.ph26 = phi i8 [ %.120.ph, %.lr.ph294 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit28:                  ; preds = %205
  %.530.ph29 = phi %struct.attr_pair* [ %.126.ph, %205 ]
  %.524.ph30 = phi i8 [ %.120.ph, %205 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit31:                  ; preds = %.lr.ph289
  %.530.ph32 = phi %struct.attr_pair* [ %.126.ph, %.lr.ph289 ]
  %.524.ph33 = phi i8 [ %.120.ph, %.lr.ph289 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit34:                  ; preds = %.lr.ph284
  %.530.ph35 = phi %struct.attr_pair* [ %.126.ph, %.lr.ph284 ]
  %.524.ph36 = phi i8 [ %.120.ph, %.lr.ph284 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit37:                  ; preds = %317, %278, %258, %153
  %.530.ph38 = phi %struct.attr_pair* [ %.126.ph, %317 ], [ %.126.ph, %278 ], [ %.126.ph, %258 ], [ %.126.ph, %153 ]
  %.524.ph39 = phi i8 [ %.120.ph, %317 ], [ %.120.ph, %278 ], [ %.120.ph, %258 ], [ %.120.ph, %153 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit41:                  ; preds = %104
  %.530.ph42 = phi %struct.attr_pair* [ %.025.ph314, %104 ]
  %.524.ph43 = phi i8 [ %.019.ph315, %104 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit44:                  ; preds = %.lr.ph279
  %.530.ph45 = phi %struct.attr_pair* [ %.025.ph314, %.lr.ph279 ]
  %.524.ph46 = phi i8 [ %.019.ph315, %.lr.ph279 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit47:                  ; preds = %76, %66, %37, %.backedge273
  %.530.ph48 = phi %struct.attr_pair* [ %.025.ph314, %76 ], [ %.025.ph314, %66 ], [ %.025.ph314, %37 ], [ %.025.ph314, %.backedge273 ]
  %.524.ph49 = phi i8 [ %.019.ph315, %76 ], [ %.019.ph315, %66 ], [ %.019.ph315, %37 ], [ %.019.ph315, %.backedge273 ]
  br label %.outer248._crit_edge

.outer248._crit_edge.loopexit50:                  ; preds = %454, %400, %.outer248.backedge
  %.530.ph51 = phi %struct.attr_pair* [ %.126.lcssa95, %454 ], [ %.126.lcssa95, %400 ], [ %.025.ph.be, %.outer248.backedge ]
  %.524.ph52 = phi i8 [ %.120.lcssa78, %454 ], [ %.120.lcssa78, %400 ], [ %.019.ph.be, %.outer248.backedge ]
  br label %.outer248._crit_edge

.outer248._crit_edge:                             ; preds = %.outer248._crit_edge.loopexit50, %.outer248._crit_edge.loopexit47, %.outer248._crit_edge.loopexit44, %.outer248._crit_edge.loopexit41, %.outer248._crit_edge.loopexit37, %.outer248._crit_edge.loopexit34, %.outer248._crit_edge.loopexit31, %.outer248._crit_edge.loopexit28, %.outer248._crit_edge.loopexit24, %.outer248._crit_edge.loopexit21, %.outer248._crit_edge.loopexit18, %.outer248._crit_edge.loopexit, %18
  %.530 = phi %struct.attr_pair* [ %16, %18 ], [ %.530.ph, %.outer248._crit_edge.loopexit ], [ %.530.ph19, %.outer248._crit_edge.loopexit18 ], [ %.530.ph22, %.outer248._crit_edge.loopexit21 ], [ %.530.ph25, %.outer248._crit_edge.loopexit24 ], [ %.530.ph29, %.outer248._crit_edge.loopexit28 ], [ %.530.ph32, %.outer248._crit_edge.loopexit31 ], [ %.530.ph35, %.outer248._crit_edge.loopexit34 ], [ %.530.ph38, %.outer248._crit_edge.loopexit37 ], [ %.530.ph42, %.outer248._crit_edge.loopexit41 ], [ %.530.ph45, %.outer248._crit_edge.loopexit44 ], [ %.530.ph48, %.outer248._crit_edge.loopexit47 ], [ %.530.ph51, %.outer248._crit_edge.loopexit50 ]
  %.524 = phi i8 [ 0, %18 ], [ %.524.ph, %.outer248._crit_edge.loopexit ], [ %.524.ph20, %.outer248._crit_edge.loopexit18 ], [ %.524.ph23, %.outer248._crit_edge.loopexit21 ], [ %.524.ph26, %.outer248._crit_edge.loopexit24 ], [ %.524.ph30, %.outer248._crit_edge.loopexit28 ], [ %.524.ph33, %.outer248._crit_edge.loopexit31 ], [ %.524.ph36, %.outer248._crit_edge.loopexit34 ], [ %.524.ph39, %.outer248._crit_edge.loopexit37 ], [ %.524.ph43, %.outer248._crit_edge.loopexit41 ], [ %.524.ph46, %.outer248._crit_edge.loopexit44 ], [ %.524.ph49, %.outer248._crit_edge.loopexit47 ], [ %.524.ph52, %.outer248._crit_edge.loopexit50 ]
  %463 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 3
  %464 = load i8, i8* %463, align 8
  %465 = trunc i8 %464 to i1
  br i1 %465, label %466, label %470

; <label>:466:                                    ; preds = %.outer248._crit_edge
  %467 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  %468 = load i8*, i8** %467, align 8
  call void @free(i8* %468) #8
  %469 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  store i8* null, i8** %469, align 8
  br label %470

; <label>:470:                                    ; preds = %466, %.outer248._crit_edge
  %471 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 4
  %472 = load i8*, i8** %471, align 8
  %473 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 0
  store i8* %472, i8** %473, align 8
  %474 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 5
  %475 = load i32, i32* %474, align 8
  %476 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 1
  store i32 %475, i32* %476, align 8
  %477 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 2
  store i32 0, i32* %477, align 4
  %478 = getelementptr inbounds %struct.pool, %struct.pool* %9, i32 0, i32 3
  store i8 0, i8* %478, align 8
  %479 = trunc i8 %.524 to i1
  br i1 %479, label %480, label %482

; <label>:480:                                    ; preds = %470
  %481 = bitcast %struct.attr_pair* %.530 to i8*
  call void @free(i8* %481) #8
  br label %482

; <label>:482:                                    ; preds = %480, %470
  %483 = load %struct.tagstack_item*, %struct.tagstack_item** %11, align 8
  call void @tagstack_pop(%struct.tagstack_item** %11, %struct.tagstack_item** %12, %struct.tagstack_item* %483)
  br label %484

; <label>:484:                                    ; preds = %7, %482
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @find_comment_end(i8*, i8*) #7 {
  %3 = getelementptr inbounds i8, i8* %0, i64 -1
  %4 = getelementptr inbounds i8, i8* %3, i64 3
  %5 = icmp ult i8* %4, %1
  br i1 %5, label %.lr.ph20.preheader, label %._crit_edge17

.lr.ph20.preheader:                               ; preds = %2
  br label %.lr.ph20

.lr.ph20:                                         ; preds = %.lr.ph20.preheader, %.loopexit
  %6 = phi i8* [ %53, %.loopexit ], [ %4, %.lr.ph20.preheader ]
  call void @unroll_loop(i32 167)
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  switch i32 %8, label %.loopexit [
    i32 62, label %9
    i32 45, label %21
  ]

; <label>:9:                                      ; preds = %.lr.ph20
  %10 = getelementptr inbounds i8, i8* %6, i64 -1
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 45
  br i1 %13, label %14, label %.loopexit

; <label>:14:                                     ; preds = %9
  %15 = getelementptr inbounds i8, i8* %6, i64 -2
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 45
  br i1 %18, label %19, label %.loopexit

; <label>:19:                                     ; preds = %14
  %.lcssa13 = phi i8* [ %6, %14 ]
  %20 = getelementptr inbounds i8, i8* %.lcssa13, i64 1
  br label %._crit_edge17

; <label>:21:                                     ; preds = %.lr.ph20
  %22 = getelementptr inbounds i8, i8* %6, i64 -1
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp eq i32 %24, 45
  br i1 %25, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %21
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %48
  %.1.lcssa.ph = phi i8* [ %36, %48 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %21
  %.1.lcssa = phi i8* [ %6, %21 ], [ %.1.lcssa.ph, %._crit_edge.loopexit ]
  %26 = getelementptr inbounds i8, i8* %.1.lcssa, i32 1
  %27 = icmp eq i8* %26, %1
  br i1 %27, label %._crit_edge17.loopexit5, label %.lr.ph16.preheader

.lr.ph16.preheader:                               ; preds = %._crit_edge
  br label %.lr.ph16

.lr.ph16:                                         ; preds = %.lr.ph16.preheader, %33
  %28 = phi i8* [ %34, %33 ], [ %26, %.lr.ph16.preheader ]
  call void @unroll_loop(i32 168)
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  switch i32 %30, label %.loopexit.loopexit [
    i32 62, label %31
    i32 45, label %33
  ]

; <label>:31:                                     ; preds = %.lr.ph16
  %.lcssa8 = phi i8* [ %28, %.lr.ph16 ]
  %32 = getelementptr inbounds i8, i8* %.lcssa8, i64 1
  br label %._crit_edge17

; <label>:33:                                     ; preds = %.lr.ph16
  %34 = getelementptr inbounds i8, i8* %28, i32 1
  %35 = icmp eq i8* %34, %1
  br i1 %35, label %._crit_edge17.loopexit, label %.lr.ph16

.lr.ph:                                           ; preds = %.lr.ph.preheader, %48
  %.114 = phi i8* [ %36, %48 ], [ %6, %.lr.ph.preheader ]
  call void @unroll_loop(i32 169)
  %36 = getelementptr inbounds i8, i8* %.114, i64 2
  %37 = icmp uge i8* %36, %1
  br i1 %37, label %._crit_edge17.loopexit1, label %38

; <label>:38:                                     ; preds = %.lr.ph
  %39 = load i8, i8* %36, align 1
  %40 = sext i8 %39 to i32
  switch i32 %40, label %.loopexit.loopexit3 [
    i32 62, label %41
    i32 45, label %48
  ]

; <label>:41:                                     ; preds = %38
  %.lcssa6 = phi i8* [ %36, %38 ]
  %.1.lcssa4 = phi i8* [ %.114, %38 ]
  %42 = getelementptr inbounds i8, i8* %.lcssa6, i64 -1
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  %45 = icmp eq i32 %44, 45
  br i1 %45, label %46, label %.loopexit

; <label>:46:                                     ; preds = %41
  %.lcssa6.lcssa = phi i8* [ %.lcssa6, %41 ]
  %47 = getelementptr inbounds i8, i8* %.lcssa6.lcssa, i64 1
  br label %._crit_edge17

; <label>:48:                                     ; preds = %38
  %49 = getelementptr inbounds i8, i8* %36, i64 -1
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 45
  br i1 %52, label %._crit_edge.loopexit, label %.lr.ph

.loopexit.loopexit:                               ; preds = %.lr.ph16
  %.4.ph = phi i8* [ %28, %.lr.ph16 ]
  br label %.loopexit

.loopexit.loopexit3:                              ; preds = %38
  %.4.ph4 = phi i8* [ %36, %38 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit3, %.loopexit.loopexit, %41, %9, %14, %.lr.ph20
  %.4 = phi i8* [ %6, %.lr.ph20 ], [ %6, %14 ], [ %6, %9 ], [ %.lcssa6, %41 ], [ %.4.ph, %.loopexit.loopexit ], [ %.4.ph4, %.loopexit.loopexit3 ]
  %53 = getelementptr inbounds i8, i8* %.4, i64 3
  %54 = icmp ult i8* %53, %1
  br i1 %54, label %.lr.ph20, label %._crit_edge17.loopexit5

._crit_edge17.loopexit:                           ; preds = %33
  %.0.ph = phi i8* [ null, %33 ]
  br label %._crit_edge17

._crit_edge17.loopexit1:                          ; preds = %.lr.ph
  %.0.ph2 = phi i8* [ null, %.lr.ph ]
  br label %._crit_edge17

._crit_edge17.loopexit5:                          ; preds = %._crit_edge, %.loopexit
  %.0.ph6 = phi i8* [ null, %.loopexit ], [ null, %._crit_edge ]
  br label %._crit_edge17

._crit_edge17:                                    ; preds = %._crit_edge17.loopexit5, %._crit_edge17.loopexit1, %._crit_edge17.loopexit, %2, %46, %31, %19
  %.0 = phi i8* [ %32, %31 ], [ %47, %46 ], [ %20, %19 ], [ null, %2 ], [ %.0.ph, %._crit_edge17.loopexit ], [ %.0.ph2, %._crit_edge17.loopexit1 ], [ %.0.ph6, %._crit_edge17.loopexit5 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @advance_declaration(i8*, i8*) #7 {
  %3 = icmp eq i8* %0, %1
  br i1 %3, label %94, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i32 1
  %6 = load i8, i8* %0, align 1
  call void @unroll_loop(i32 183)
  br label %7

; <label>:7:                                      ; preds = %4, %88
  %.0127 = phi i32 [ 2, %4 ], [ %.11, %88 ]
  %.0226 = phi i8 [ %6, %4 ], [ %.911, %88 ]
  %.01225 = phi i8* [ %5, %4 ], [ %.921, %88 ]
  %.02224 = phi i8 [ 0, %4 ], [ %.123, %88 ]
  %8 = icmp eq i8* %.01225, %1
  %spec.select3 = select i1 %8, i32 1, i32 %.0127
  switch i32 %spec.select3, label %88 [
    i32 9, label %83
    i32 8, label %80
    i32 2, label %9
    i32 3, label %15
    i32 4, label %35
    i32 10, label %54
    i32 11, label %57
    i32 12, label %64
    i32 5, label %67
    i32 6, label %70
    i32 7, label %75
  ]

; <label>:9:                                      ; preds = %7
  %10 = sext i8 %.0226 to i32
  %11 = icmp eq i32 %10, 33
  br i1 %11, label %12, label %88

; <label>:12:                                     ; preds = %9
  %13 = getelementptr inbounds i8, i8* %.01225, i32 1
  %14 = load i8, i8* %.01225, align 1
  br label %88

; <label>:15:                                     ; preds = %7
  %16 = sext i8 %.0226 to i32
  switch i32 %16, label %22 [
    i32 45, label %88
    i32 32, label %17
    i32 9, label %17
    i32 13, label %17
    i32 10, label %17
    i32 60, label %20
    i32 62, label %20
    i32 39, label %21
    i32 34, label %21
  ]

; <label>:17:                                     ; preds = %15, %15, %15, %15
  %18 = getelementptr inbounds i8, i8* %.01225, i32 1
  %19 = load i8, i8* %.01225, align 1
  br label %88

; <label>:20:                                     ; preds = %15, %15
  br label %88

; <label>:21:                                     ; preds = %15, %15
  br label %88

; <label>:22:                                     ; preds = %15
  %23 = sext i8 %.0226 to i32
  %24 = icmp sgt i32 %23, 32
  %25 = sext i8 %.0226 to i32
  %26 = icmp slt i32 %25, 127
  %or.cond = and i1 %24, %26
  %27 = sext i8 %.0226 to i32
  %28 = icmp ne i32 %27, 61
  %or.cond6 = and i1 %or.cond, %28
  %29 = sext i8 %.0226 to i32
  %30 = icmp ne i32 %29, 60
  %or.cond8 = and i1 %or.cond6, %30
  %31 = sext i8 %.0226 to i32
  %32 = icmp ne i32 %31, 62
  %or.cond10 = and i1 %or.cond8, %32
  %33 = sext i8 %.0226 to i32
  %34 = icmp ne i32 %33, 47
  %or.cond12 = and i1 %or.cond10, %34
  %.3 = select i1 %or.cond12, i32 4, i32 1
  br label %88

; <label>:35:                                     ; preds = %7
  %36 = sext i8 %.0226 to i32
  %37 = icmp eq i32 %36, 45
  br i1 %37, label %88, label %38

; <label>:38:                                     ; preds = %35
  %39 = sext i8 %.0226 to i32
  %40 = icmp sgt i32 %39, 32
  %41 = sext i8 %.0226 to i32
  %42 = icmp slt i32 %41, 127
  %or.cond14 = and i1 %40, %42
  %43 = sext i8 %.0226 to i32
  %44 = icmp ne i32 %43, 61
  %or.cond16 = and i1 %or.cond14, %44
  %45 = sext i8 %.0226 to i32
  %46 = icmp ne i32 %45, 60
  %or.cond18 = and i1 %or.cond16, %46
  %47 = sext i8 %.0226 to i32
  %48 = icmp ne i32 %47, 62
  %or.cond20 = and i1 %or.cond18, %48
  %49 = sext i8 %.0226 to i32
  %50 = icmp ne i32 %49, 47
  %or.cond22 = and i1 %or.cond20, %50
  br i1 %or.cond22, label %51, label %88

; <label>:51:                                     ; preds = %38
  %52 = getelementptr inbounds i8, i8* %.01225, i32 1
  %53 = load i8, i8* %.01225, align 1
  br label %88

; <label>:54:                                     ; preds = %7
  %55 = getelementptr inbounds i8, i8* %.01225, i32 1
  %56 = load i8, i8* %.01225, align 1
  br label %88

; <label>:57:                                     ; preds = %7
  %58 = sext i8 %.0226 to i32
  %59 = sext i8 %.02224 to i32
  %60 = icmp eq i32 %58, %59
  br i1 %60, label %88, label %61

; <label>:61:                                     ; preds = %57
  %62 = getelementptr inbounds i8, i8* %.01225, i32 1
  %63 = load i8, i8* %.01225, align 1
  br label %88

; <label>:64:                                     ; preds = %7
  %65 = getelementptr inbounds i8, i8* %.01225, i32 1
  %66 = load i8, i8* %.01225, align 1
  br label %88

; <label>:67:                                     ; preds = %7
  %68 = getelementptr inbounds i8, i8* %.01225, i32 1
  %69 = load i8, i8* %.01225, align 1
  br label %88

; <label>:70:                                     ; preds = %7
  %71 = sext i8 %.0226 to i32
  %cond2 = icmp eq i32 %71, 45
  br i1 %cond2, label %72, label %88

; <label>:72:                                     ; preds = %70
  %73 = getelementptr inbounds i8, i8* %.01225, i32 1
  %74 = load i8, i8* %.01225, align 1
  br label %88

; <label>:75:                                     ; preds = %7
  %76 = sext i8 %.0226 to i32
  %cond1 = icmp eq i32 %76, 45
  br i1 %cond1, label %88, label %77

; <label>:77:                                     ; preds = %75
  %78 = getelementptr inbounds i8, i8* %.01225, i32 1
  %79 = load i8, i8* %.01225, align 1
  br label %88

; <label>:80:                                     ; preds = %7
  %81 = getelementptr inbounds i8, i8* %.01225, i32 1
  %82 = load i8, i8* %.01225, align 1
  br label %88

; <label>:83:                                     ; preds = %7
  %84 = sext i8 %.0226 to i32
  %cond = icmp eq i32 %84, 45
  br i1 %cond, label %85, label %88

; <label>:85:                                     ; preds = %83
  %86 = getelementptr inbounds i8, i8* %.01225, i32 1
  %87 = load i8, i8* %.01225, align 1
  br label %88

; <label>:88:                                     ; preds = %85, %83, %77, %75, %72, %70, %61, %57, %35, %38, %51, %17, %20, %21, %15, %22, %12, %9, %7, %80, %67, %64, %54
  %.123 = phi i8 [ %.02224, %80 ], [ %.02224, %67 ], [ %.02224, %64 ], [ %.0226, %54 ], [ %.02224, %7 ], [ %.02224, %9 ], [ %.02224, %12 ], [ %.02224, %22 ], [ %.02224, %15 ], [ %.02224, %21 ], [ %.02224, %20 ], [ %.02224, %17 ], [ %.02224, %51 ], [ %.02224, %38 ], [ %.02224, %35 ], [ %.02224, %57 ], [ %.02224, %61 ], [ %.02224, %70 ], [ %.02224, %72 ], [ %.02224, %75 ], [ %.02224, %77 ], [ %.02224, %83 ], [ %.02224, %85 ]
  %.921 = phi i8* [ %81, %80 ], [ %68, %67 ], [ %65, %64 ], [ %55, %54 ], [ %.01225, %7 ], [ %13, %12 ], [ %.01225, %9 ], [ %.01225, %21 ], [ %.01225, %20 ], [ %18, %17 ], [ %.01225, %15 ], [ %.01225, %22 ], [ %.01225, %35 ], [ %52, %51 ], [ %.01225, %38 ], [ %62, %61 ], [ %.01225, %57 ], [ %73, %72 ], [ %.01225, %70 ], [ %78, %77 ], [ %.01225, %75 ], [ %86, %85 ], [ %.01225, %83 ]
  %.911 = phi i8 [ %82, %80 ], [ %69, %67 ], [ %66, %64 ], [ %56, %54 ], [ %.0226, %7 ], [ %14, %12 ], [ %.0226, %9 ], [ %.0226, %21 ], [ %.0226, %20 ], [ %19, %17 ], [ %.0226, %15 ], [ %.0226, %22 ], [ %.0226, %35 ], [ %53, %51 ], [ %.0226, %38 ], [ %63, %61 ], [ %.0226, %57 ], [ %74, %72 ], [ %.0226, %70 ], [ %79, %77 ], [ %.0226, %75 ], [ %87, %85 ], [ %.0226, %83 ]
  %.11 = phi i32 [ 9, %80 ], [ 6, %67 ], [ 3, %64 ], [ 11, %54 ], [ %spec.select3, %7 ], [ 3, %12 ], [ 1, %9 ], [ 10, %21 ], [ 0, %20 ], [ %spec.select3, %17 ], [ 5, %15 ], [ %.3, %22 ], [ 5, %35 ], [ %spec.select3, %51 ], [ 3, %38 ], [ %spec.select3, %61 ], [ 12, %57 ], [ 7, %72 ], [ 1, %70 ], [ %spec.select3, %77 ], [ 8, %75 ], [ 3, %85 ], [ 7, %83 ]
  call void @unroll_loop(i32 183)
  %89 = icmp ne i32 %.11, 0
  %90 = icmp ne i32 %.11, 1
  %spec.select = select i1 %89, i1 %90, i1 false
  br i1 %spec.select, label %7, label %91

; <label>:91:                                     ; preds = %88
  %.012.lcssa = phi i8* [ %.921, %88 ]
  %.01.lcssa = phi i32 [ %.11, %88 ]
  %92 = icmp eq i32 %.01.lcssa, 1
  %93 = getelementptr inbounds i8, i8* %0, i64 1
  %spec.select23 = select i1 %92, i8* %93, i8* %.012.lcssa
  ret i8* %spec.select23

; <label>:94:                                     ; preds = %2
  ret i8* %0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.tagstack_item* @tagstack_push(%struct.tagstack_item**, %struct.tagstack_item**) #7 {
  %3 = call noalias i8* @xmalloc(i64 40)
  %4 = bitcast i8* %3 to %struct.tagstack_item*
  %5 = load %struct.tagstack_item*, %struct.tagstack_item** %0, align 8
  %6 = icmp eq %struct.tagstack_item* %5, null
  br i1 %6, label %7, label %10

; <label>:7:                                      ; preds = %2
  store %struct.tagstack_item* %4, %struct.tagstack_item** %1, align 8
  store %struct.tagstack_item* %4, %struct.tagstack_item** %0, align 8
  %8 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %4, i32 0, i32 4
  store %struct.tagstack_item* null, %struct.tagstack_item** %8, align 8
  %9 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %4, i32 0, i32 3
  store %struct.tagstack_item* null, %struct.tagstack_item** %9, align 8
  br label %16

; <label>:10:                                     ; preds = %2
  %11 = load %struct.tagstack_item*, %struct.tagstack_item** %1, align 8
  %12 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %11, i32 0, i32 4
  store %struct.tagstack_item* %4, %struct.tagstack_item** %12, align 8
  %13 = load %struct.tagstack_item*, %struct.tagstack_item** %1, align 8
  %14 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %4, i32 0, i32 3
  store %struct.tagstack_item* %13, %struct.tagstack_item** %14, align 8
  store %struct.tagstack_item* %4, %struct.tagstack_item** %1, align 8
  %15 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %4, i32 0, i32 4
  store %struct.tagstack_item* null, %struct.tagstack_item** %15, align 8
  br label %16

; <label>:16:                                     ; preds = %10, %7
  ret %struct.tagstack_item* %4
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @name_allowed(%struct.hash_table*, i8*, i8*) #0 {
  %4 = icmp ne %struct.hash_table* %0, null
  br i1 %4, label %5, label %18

; <label>:5:                                      ; preds = %3
  %6 = ptrtoint i8* %2 to i64
  %7 = ptrtoint i8* %1 to i64
  %8 = sub i64 %6, %7
  %9 = trunc i64 %8 to i32
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = alloca i8, i64 %11, align 16, !track !379
  %13 = sext i32 %9 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %1, i64 %13, i1 false), !track !380
  %14 = sext i32 %9 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  store i8 0, i8* %15, align 1
  %16 = call i8* @hash_table_get(%struct.hash_table* %0, i8* %12)
  %17 = icmp ne i8* %16, null
  br label %18

; <label>:18:                                     ; preds = %3, %5
  %.0 = phi i1 [ %17, %5 ], [ true, %3 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_and_copy(%struct.pool*, i8*, i8*, i32) #0 {
  %5 = alloca i8*, align 8, !track !381
  %6 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %3, 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %.preheader, label %30

.preheader:                                       ; preds = %4
  br label %10

; <label>:10:                                     ; preds = %.preheader, %16
  %.01 = phi i8* [ %18, %16 ], [ %1, %.preheader ]
  call void @unroll_loop(i32 184)
  %11 = icmp ult i8* %.01, %2
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %10
  %13 = load i8, i8* %.01, align 1
  %14 = sext i8 %13 to i32
  %15 = call zeroext i1 @c_isspace(i32 %14)
  br label %16

; <label>:16:                                     ; preds = %12, %10
  %17 = phi i1 [ false, %10 ], [ %15, %12 ]
  %18 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %17, label %10, label %19

; <label>:19:                                     ; preds = %16
  %.01.lcssa = phi i8* [ %.01, %16 ]
  br label %20

; <label>:20:                                     ; preds = %27, %19
  %.02 = phi i8* [ %2, %19 ], [ %29, %27 ]
  call void @unroll_loop(i32 185)
  %21 = icmp ugt i8* %.02, %.01.lcssa
  br i1 %21, label %22, label %27

; <label>:22:                                     ; preds = %20
  %23 = getelementptr inbounds i8, i8* %.02, i64 -1
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = call zeroext i1 @c_isspace(i32 %25)
  br label %27

; <label>:27:                                     ; preds = %22, %20
  %28 = phi i1 [ false, %20 ], [ %26, %22 ]
  %29 = getelementptr inbounds i8, i8* %.02, i32 -1
  br i1 %28, label %20, label %.loopexit

.loopexit:                                        ; preds = %27
  %.13.ph = phi i8* [ %.02, %27 ]
  %.1.ph = phi i8* [ %.01.lcssa, %27 ]
  br label %30

; <label>:30:                                     ; preds = %.loopexit, %4
  %.13 = phi i8* [ %2, %4 ], [ %.13.ph, %.loopexit ]
  %.1 = phi i8* [ %1, %4 ], [ %.1.ph, %.loopexit ]
  %31 = and i32 %3, 2
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %182

; <label>:33:                                     ; preds = %30
  store i8* %.1, i8** %5, align 8
  %34 = and i32 %3, 4
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  %37 = xor i1 %36, true
  %38 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = sext i32 %39 to i64
  %41 = ptrtoint i8* %.13 to i64
  %42 = ptrtoint i8* %.1 to i64
  %43 = sub i64 %41, %42
  %44 = add nsw i64 %40, %43
  %45 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = sext i32 %46 to i64
  br label %48

; <label>:48:                                     ; preds = %48, %33
  %.09 = phi i64 [ %47, %33 ], [ %50, %48 ]
  call void @unroll_loop(i32 186)
  %49 = icmp slt i64 %.09, %44
  %50 = shl i64 %.09, 1
  br i1 %49, label %48, label %51

; <label>:51:                                     ; preds = %48
  %.09.lcssa = phi i64 [ %.09, %48 ]
  %52 = zext i1 %37 to i8
  %53 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = sext i32 %54 to i64
  %56 = icmp ne i64 %.09.lcssa, %55
  br i1 %56, label %57, label %81

; <label>:57:                                     ; preds = %51
  %58 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  %59 = load i8, i8* %58, align 8
  %60 = trunc i8 %59 to i1
  br i1 %60, label %61, label %67

; <label>:61:                                     ; preds = %57
  %62 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = mul i64 %.09.lcssa, 1
  %65 = call i8* @xrealloc(i8* %63, i64 %64)
  %66 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %65, i8** %66, align 8
  br label %78

; <label>:67:                                     ; preds = %57
  %68 = mul i64 %.09.lcssa, 1
  %69 = call noalias i8* @xmalloc(i64 %68)
  %70 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = sext i32 %73 to i64
  %75 = mul i64 %74, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %71, i64 %75, i1 false), !track !382
  %76 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %69, i8** %76, align 8
  %77 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  store i8 1, i8* %77, align 8
  br label %78

; <label>:78:                                     ; preds = %67, %61
  %79 = trunc i64 %.09.lcssa to i32
  %80 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  store i32 %79, i32* %80, align 8
  br label %81

; <label>:81:                                     ; preds = %51, %78
  %82 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %83, i64 %86
  %88 = load i8*, i8** %5, align 8
  %89 = icmp ult i8* %88, %.13
  br i1 %89, label %.lr.ph13.preheader, label %._crit_edge14

.lr.ph13.preheader:                               ; preds = %81
  br label %.lr.ph13

.lr.ph13:                                         ; preds = %.lr.ph13.preheader, %125
  %.0611 = phi i8* [ %.3, %125 ], [ %87, %.lr.ph13.preheader ]
  call void @unroll_loop(i32 187)
  %90 = load i8*, i8** %5, align 8
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp eq i32 %92, 38
  br i1 %93, label %94, label %105

; <label>:94:                                     ; preds = %.lr.ph13
  %95 = call i32 @decode_entity(i8** %5, i8* %.13)
  %96 = icmp ne i32 %95, -1
  br i1 %96, label %97, label %100

; <label>:97:                                     ; preds = %94
  %98 = trunc i32 %95 to i8
  %99 = getelementptr inbounds i8, i8* %.0611, i32 1
  store i8 %98, i8* %.0611, align 1
  br label %125

; <label>:100:                                    ; preds = %94
  %101 = load i8*, i8** %5, align 8
  %102 = getelementptr inbounds i8, i8* %101, i32 1
  store i8* %102, i8** %5, align 8
  %103 = load i8, i8* %101, align 1
  %104 = getelementptr inbounds i8, i8* %.0611, i32 1
  store i8 %103, i8* %.0611, align 1
  br label %125

; <label>:105:                                    ; preds = %.lr.ph13
  %106 = load i8*, i8** %5, align 8
  %107 = load i8, i8* %106, align 1
  %108 = sext i8 %107 to i32
  %109 = icmp eq i32 %108, 10
  br i1 %109, label %115, label %110

; <label>:110:                                    ; preds = %105
  %111 = load i8*, i8** %5, align 8
  %112 = load i8, i8* %111, align 1
  %113 = sext i8 %112 to i32
  %114 = icmp eq i32 %113, 13
  br i1 %114, label %115, label %120

; <label>:115:                                    ; preds = %110, %105
  %116 = trunc i8 %52 to i1
  br i1 %116, label %117, label %120

; <label>:117:                                    ; preds = %115
  %118 = load i8*, i8** %5, align 8
  %119 = getelementptr inbounds i8, i8* %118, i32 1
  store i8* %119, i8** %5, align 8
  br label %125

; <label>:120:                                    ; preds = %115, %110
  %121 = load i8*, i8** %5, align 8
  %122 = getelementptr inbounds i8, i8* %121, i32 1
  store i8* %122, i8** %5, align 8
  %123 = load i8, i8* %121, align 1
  %124 = getelementptr inbounds i8, i8* %.0611, i32 1
  store i8 %123, i8* %.0611, align 1
  br label %125

; <label>:125:                                    ; preds = %117, %120, %97, %100
  %.3 = phi i8* [ %99, %97 ], [ %104, %100 ], [ %.0611, %117 ], [ %124, %120 ]
  %126 = load i8*, i8** %5, align 8
  %127 = icmp ult i8* %126, %.13
  br i1 %127, label %.lr.ph13, label %._crit_edge14.loopexit

._crit_edge14.loopexit:                           ; preds = %125
  %.06.lcssa.ph = phi i8* [ %.3, %125 ]
  br label %._crit_edge14

._crit_edge14:                                    ; preds = %._crit_edge14.loopexit, %81
  %.06.lcssa = phi i8* [ %87, %81 ], [ %.06.lcssa.ph, %._crit_edge14.loopexit ]
  %128 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %129 = load i8*, i8** %128, align 8
  %130 = ptrtoint i8* %.06.lcssa to i64
  %131 = ptrtoint i8* %129 to i64
  %132 = sub i64 %130, %131
  %133 = trunc i64 %132 to i32
  %134 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %136 = load i32, i32* %135, align 4
  %137 = add nsw i32 %136, 1
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %140 = load i32, i32* %139, align 8
  %141 = sext i32 %140 to i64
  br label %142

; <label>:142:                                    ; preds = %142, %._crit_edge14
  %.08 = phi i64 [ %141, %._crit_edge14 ], [ %144, %142 ]
  call void @unroll_loop(i32 188)
  %143 = icmp slt i64 %.08, %138
  %144 = shl i64 %.08, 1
  br i1 %143, label %142, label %145

; <label>:145:                                    ; preds = %142
  %.08.lcssa = phi i64 [ %.08, %142 ]
  %146 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %147 = load i32, i32* %146, align 8
  %148 = sext i32 %147 to i64
  %149 = icmp ne i64 %.08.lcssa, %148
  br i1 %149, label %150, label %174

; <label>:150:                                    ; preds = %145
  %151 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  %152 = load i8, i8* %151, align 8
  %153 = trunc i8 %152 to i1
  br i1 %153, label %154, label %160

; <label>:154:                                    ; preds = %150
  %155 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  %157 = mul i64 %.08.lcssa, 1
  %158 = call i8* @xrealloc(i8* %156, i64 %157)
  %159 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %158, i8** %159, align 8
  br label %171

; <label>:160:                                    ; preds = %150
  %161 = mul i64 %.08.lcssa, 1
  %162 = call noalias i8* @xmalloc(i64 %161)
  %163 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %166 = load i32, i32* %165, align 8
  %167 = sext i32 %166 to i64
  %168 = mul i64 %167, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %162, i8* align 1 %164, i64 %168, i1 false), !track !383
  %169 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %162, i8** %169, align 8
  %170 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  store i8 1, i8* %170, align 8
  br label %171

; <label>:171:                                    ; preds = %160, %154
  %172 = trunc i64 %.08.lcssa to i32
  %173 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  store i32 %172, i32* %173, align 8
  br label %174

; <label>:174:                                    ; preds = %145, %171
  %175 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %178 = load i32, i32* %177, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %177, align 4
  %180 = sext i32 %178 to i64
  %181 = getelementptr inbounds i8, i8* %176, i64 %180
  store i8 0, i8* %181, align 1
  br label %284

; <label>:182:                                    ; preds = %30
  %183 = ptrtoint i8* %.13 to i64
  %184 = ptrtoint i8* %.1 to i64
  %185 = sub i64 %183, %184
  %186 = trunc i64 %185 to i32
  %187 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %188 = load i32, i32* %187, align 4
  %189 = add nsw i32 %188, %186
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %192 = load i32, i32* %191, align 8
  %193 = sext i32 %192 to i64
  br label %194

; <label>:194:                                    ; preds = %194, %182
  %.05 = phi i64 [ %193, %182 ], [ %196, %194 ]
  call void @unroll_loop(i32 189)
  %195 = icmp slt i64 %.05, %190
  %196 = shl i64 %.05, 1
  br i1 %195, label %194, label %197

; <label>:197:                                    ; preds = %194
  %.05.lcssa = phi i64 [ %.05, %194 ]
  %198 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %199 = load i32, i32* %198, align 8
  %200 = sext i32 %199 to i64
  %201 = icmp ne i64 %.05.lcssa, %200
  br i1 %201, label %202, label %226

; <label>:202:                                    ; preds = %197
  %203 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  %204 = load i8, i8* %203, align 8
  %205 = trunc i8 %204 to i1
  br i1 %205, label %206, label %212

; <label>:206:                                    ; preds = %202
  %207 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  %209 = mul i64 %.05.lcssa, 1
  %210 = call i8* @xrealloc(i8* %208, i64 %209)
  %211 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %210, i8** %211, align 8
  br label %223

; <label>:212:                                    ; preds = %202
  %213 = mul i64 %.05.lcssa, 1
  %214 = call noalias i8* @xmalloc(i64 %213)
  %215 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %216 = load i8*, i8** %215, align 8
  %217 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %218 = load i32, i32* %217, align 8
  %219 = sext i32 %218 to i64
  %220 = mul i64 %219, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %214, i8* align 1 %216, i64 %220, i1 false), !track !384
  %221 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %214, i8** %221, align 8
  %222 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  store i8 1, i8* %222, align 8
  br label %223

; <label>:223:                                    ; preds = %212, %206
  %224 = trunc i64 %.05.lcssa to i32
  %225 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  store i32 %224, i32* %225, align 8
  br label %226

; <label>:226:                                    ; preds = %197, %223
  %227 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %228 = load i8*, i8** %227, align 8
  %229 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %230 = load i32, i32* %229, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %228, i64 %231
  %233 = sext i32 %186 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* align 1 %.1, i64 %233, i1 false), !track !385
  %234 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %235 = load i32, i32* %234, align 4
  %236 = add nsw i32 %235, %186
  store i32 %236, i32* %234, align 4
  %237 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %238 = load i32, i32* %237, align 4
  %239 = add nsw i32 %238, 1
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %242 = load i32, i32* %241, align 8
  %243 = sext i32 %242 to i64
  br label %244

; <label>:244:                                    ; preds = %244, %226
  %.04 = phi i64 [ %243, %226 ], [ %246, %244 ]
  call void @unroll_loop(i32 190)
  %245 = icmp slt i64 %.04, %240
  %246 = shl i64 %.04, 1
  br i1 %245, label %244, label %247

; <label>:247:                                    ; preds = %244
  %.04.lcssa = phi i64 [ %.04, %244 ]
  %248 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %249 = load i32, i32* %248, align 8
  %250 = sext i32 %249 to i64
  %251 = icmp ne i64 %.04.lcssa, %250
  br i1 %251, label %252, label %276

; <label>:252:                                    ; preds = %247
  %253 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  %254 = load i8, i8* %253, align 8
  %255 = trunc i8 %254 to i1
  br i1 %255, label %256, label %262

; <label>:256:                                    ; preds = %252
  %257 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %258 = load i8*, i8** %257, align 8
  %259 = mul i64 %.04.lcssa, 1
  %260 = call i8* @xrealloc(i8* %258, i64 %259)
  %261 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %260, i8** %261, align 8
  br label %273

; <label>:262:                                    ; preds = %252
  %263 = mul i64 %.04.lcssa, 1
  %264 = call noalias i8* @xmalloc(i64 %263)
  %265 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %266 = load i8*, i8** %265, align 8
  %267 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  %268 = load i32, i32* %267, align 8
  %269 = sext i32 %268 to i64
  %270 = mul i64 %269, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %264, i8* align 1 %266, i64 %270, i1 false), !track !386
  %271 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  store i8* %264, i8** %271, align 8
  %272 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 3
  store i8 1, i8* %272, align 8
  br label %273

; <label>:273:                                    ; preds = %262, %256
  %274 = trunc i64 %.04.lcssa to i32
  %275 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 1
  store i32 %274, i32* %275, align 8
  br label %276

; <label>:276:                                    ; preds = %247, %273
  %277 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %278 = load i8*, i8** %277, align 8
  %279 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 2
  %280 = load i32, i32* %279, align 4
  %281 = add nsw i32 %280, 1
  store i32 %281, i32* %279, align 4
  %282 = sext i32 %280 to i64
  %283 = getelementptr inbounds i8, i8* %278, i64 %282
  store i8 0, i8* %283, align 1
  br label %284

; <label>:284:                                    ; preds = %276, %174
  %285 = and i32 %3, 1
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %._crit_edge

; <label>:287:                                    ; preds = %284
  %288 = getelementptr inbounds %struct.pool, %struct.pool* %0, i32 0, i32 0
  %289 = load i8*, i8** %288, align 8
  %290 = sext i32 %7 to i64
  %291 = getelementptr inbounds i8, i8* %289, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = icmp ne i8 %292, 0
  br i1 %293, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %287
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.010 = phi i8* [ %298, %.lr.ph ], [ %291, %.lr.ph.preheader ]
  call void @unroll_loop(i32 191)
  %294 = load i8, i8* %.010, align 1
  %295 = sext i8 %294 to i32
  %296 = call i32 @c_tolower(i32 %295)
  %297 = trunc i32 %296 to i8
  store i8 %297, i8* %.010, align 1
  %298 = getelementptr inbounds i8, i8* %.010, i32 1
  %299 = load i8, i8* %298, align 1
  %300 = icmp ne i8 %299, 0
  br i1 %300, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %287, %284
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.tagstack_item* @tagstack_find(%struct.tagstack_item*, i8*, i8*) #7 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = trunc i64 %6 to i32
  %8 = icmp ne %struct.tagstack_item* %0, null
  br i1 %8, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %24
  %.013 = phi %struct.tagstack_item* [ %26, %24 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 192)
  %9 = sext i32 %7 to i64
  %10 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %.013, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %.013, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %11 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = icmp eq i64 %9, %16
  br i1 %17, label %18, label %24

; <label>:18:                                     ; preds = %.lr.ph
  %19 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %.013, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = sext i32 %7 to i64
  %22 = call i32 @strncasecmp(i8* %20, i8* %1, i64 %21) #14
  %23 = icmp eq i32 0, %22
  br i1 %23, label %._crit_edge.loopexit, label %24

; <label>:24:                                     ; preds = %18, %.lr.ph
  %25 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %.013, i32 0, i32 3
  %26 = load %struct.tagstack_item*, %struct.tagstack_item** %25, align 8
  %27 = icmp ne %struct.tagstack_item* %26, null
  br i1 %27, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %18, %24
  %.0.ph = phi %struct.tagstack_item* [ null, %24 ], [ %.013, %18 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.0 = phi %struct.tagstack_item* [ null, %3 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret %struct.tagstack_item* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @tagstack_pop(%struct.tagstack_item**, %struct.tagstack_item**, %struct.tagstack_item*) #0 {
  %4 = load %struct.tagstack_item*, %struct.tagstack_item** %0, align 8
  %5 = icmp eq %struct.tagstack_item* %4, null
  br i1 %5, label %._crit_edge, label %6

; <label>:6:                                      ; preds = %3
  %7 = load %struct.tagstack_item*, %struct.tagstack_item** %1, align 8
  %8 = icmp eq %struct.tagstack_item* %2, %7
  %9 = load %struct.tagstack_item*, %struct.tagstack_item** %0, align 8
  %10 = icmp eq %struct.tagstack_item* %2, %9
  br i1 %8, label %11, label %21

; <label>:11:                                     ; preds = %6
  br i1 %10, label %12, label %14

; <label>:12:                                     ; preds = %11
  %13 = bitcast %struct.tagstack_item* %2 to i8*
  call void @free(i8* %13) #8
  store %struct.tagstack_item* null, %struct.tagstack_item** %1, align 8
  store %struct.tagstack_item* null, %struct.tagstack_item** %0, align 8
  br label %._crit_edge

; <label>:14:                                     ; preds = %11
  %15 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %2, i32 0, i32 3
  %16 = load %struct.tagstack_item*, %struct.tagstack_item** %15, align 8
  %17 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %16, i32 0, i32 4
  store %struct.tagstack_item* null, %struct.tagstack_item** %17, align 8
  %18 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %2, i32 0, i32 3
  %19 = load %struct.tagstack_item*, %struct.tagstack_item** %18, align 8
  store %struct.tagstack_item* %19, %struct.tagstack_item** %1, align 8
  %20 = bitcast %struct.tagstack_item* %2 to i8*
  call void @free(i8* %20) #8
  br label %._crit_edge

; <label>:21:                                     ; preds = %6
  br i1 %10, label %22, label %23

; <label>:22:                                     ; preds = %21
  store %struct.tagstack_item* null, %struct.tagstack_item** %0, align 8
  br label %23

; <label>:23:                                     ; preds = %22, %21
  %24 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %2, i32 0, i32 3
  %25 = load %struct.tagstack_item*, %struct.tagstack_item** %24, align 8
  store %struct.tagstack_item* %25, %struct.tagstack_item** %1, align 8
  %26 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %2, i32 0, i32 3
  %27 = load %struct.tagstack_item*, %struct.tagstack_item** %26, align 8
  %28 = icmp ne %struct.tagstack_item* %27, null
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %23
  %30 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %2, i32 0, i32 3
  %31 = load %struct.tagstack_item*, %struct.tagstack_item** %30, align 8
  %32 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %31, i32 0, i32 4
  store %struct.tagstack_item* null, %struct.tagstack_item** %32, align 8
  br label %33

; <label>:33:                                     ; preds = %29, %23
  %34 = icmp ne %struct.tagstack_item* %2, null
  br i1 %34, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %33
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi %struct.tagstack_item* [ %36, %.lr.ph ], [ %2, %.lr.ph.preheader ]
  call void @unroll_loop(i32 193)
  %35 = getelementptr inbounds %struct.tagstack_item, %struct.tagstack_item* %.01, i32 0, i32 4
  %36 = load %struct.tagstack_item*, %struct.tagstack_item** %35, align 8
  %37 = bitcast %struct.tagstack_item* %.01 to i8*
  call void @free(i8* %37) #8
  %38 = icmp ne %struct.tagstack_item* %36, null
  br i1 %38, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %33, %12, %14, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @decode_entity(i8**, i8*) #0 {
  %3 = load i8*, i8** %0, align 8
  %4 = getelementptr inbounds i8, i8* %3, i32 1
  %5 = icmp eq i8* %4, %1
  br i1 %5, label %226, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds i8, i8* %4, i32 1
  %8 = load i8, i8* %4, align 1
  %9 = sext i8 %8 to i32
  switch i32 %9, label %226 [
    i32 35, label %10
    i32 103, label %71
    i32 108, label %97
    i32 97, label %123
    i32 113, label %190
  ]

; <label>:10:                                     ; preds = %6
  %11 = load i8, i8* %7, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 120
  br i1 %13, label %15, label %.preheader

.preheader:                                       ; preds = %10
  call void @unroll_loop(i32 195)
  %14 = icmp ult i8* %7, %1
  br i1 %14, label %.lr.ph26, label %.critedge.loopexit10

.lr.ph26:                                         ; preds = %.preheader
  br label %42

; <label>:15:                                     ; preds = %10
  %16 = getelementptr inbounds i8, i8* %7, i32 1
  call void @unroll_loop(i32 194)
  %17 = icmp ult i8* %16, %1
  br i1 %17, label %.lr.ph, label %.critedge.loopexit

.lr.ph:                                           ; preds = %15
  br label %18

; <label>:18:                                     ; preds = %.lr.ph, %35
  %.0116 = phi i32 [ 0, %.lr.ph ], [ %39, %35 ]
  %.0215 = phi i32 [ 0, %.lr.ph ], [ %37, %35 ]
  %.0514 = phi i8* [ %16, %.lr.ph ], [ %38, %35 ]
  %19 = load i8, i8* %.0514, align 1
  %20 = sext i8 %19 to i32
  %21 = call zeroext i1 @c_isxdigit(i32 %20)
  br i1 %21, label %22, label %..critedge.loopexit_crit_edge19

; <label>:22:                                     ; preds = %18
  %23 = shl i32 %.0215, 4
  %24 = load i8, i8* %.0514, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp slt i32 %25, 65
  %27 = load i8, i8* %.0514, align 1
  %28 = sext i8 %27 to i32
  br i1 %26, label %29, label %31

; <label>:29:                                     ; preds = %22
  %30 = sub nsw i32 %28, 48
  br label %35

; <label>:31:                                     ; preds = %22
  %32 = call i32 @c_toupper(i32 %28)
  %33 = sub nsw i32 %32, 65
  %34 = add nsw i32 %33, 10
  br label %35

; <label>:35:                                     ; preds = %31, %29
  %36 = phi i32 [ %30, %29 ], [ %34, %31 ]
  %37 = add nsw i32 %23, %36
  %38 = getelementptr inbounds i8, i8* %.0514, i32 1
  %39 = add nuw nsw i32 %.0116, 1
  call void @unroll_loop(i32 194)
  %40 = icmp slt i32 %37, 256
  %41 = icmp ult i8* %38, %1
  %or.cond = and i1 %40, %41
  br i1 %or.cond, label %18, label %..critedge.loopexit_crit_edge

; <label>:42:                                     ; preds = %.lr.ph26, %46
  %.125 = phi i32 [ 0, %.lr.ph26 ], [ %53, %46 ]
  %.1324 = phi i32 [ 0, %.lr.ph26 ], [ %51, %46 ]
  %.1623 = phi i8* [ %7, %.lr.ph26 ], [ %52, %46 ]
  %43 = load i8, i8* %.1623, align 1
  %44 = sext i8 %43 to i32
  %45 = call zeroext i1 @c_isdigit(i32 %44)
  br i1 %45, label %46, label %..critedge.loopexit10_crit_edge30

; <label>:46:                                     ; preds = %42
  %47 = mul nsw i32 %.1324, 10
  %48 = load i8, i8* %.1623, align 1
  %49 = sext i8 %48 to i32
  %50 = sub nsw i32 %49, 48
  %51 = add nsw i32 %47, %50
  %52 = getelementptr inbounds i8, i8* %.1623, i32 1
  %53 = add nuw nsw i32 %.125, 1
  call void @unroll_loop(i32 195)
  %54 = icmp slt i32 %51, 256
  %55 = icmp ult i8* %52, %1
  %or.cond1 = and i1 %54, %55
  br i1 %or.cond1, label %42, label %..critedge.loopexit10_crit_edge

..critedge.loopexit_crit_edge:                    ; preds = %35
  %split = phi i8* [ %38, %35 ]
  %split17 = phi i32 [ %37, %35 ]
  %split18 = phi i32 [ %39, %35 ]
  br label %.critedge.loopexit

..critedge.loopexit_crit_edge19:                  ; preds = %18
  %split20 = phi i8* [ %.0514, %18 ]
  %split21 = phi i32 [ %.0215, %18 ]
  %split22 = phi i32 [ %.0116, %18 ]
  br label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %..critedge.loopexit_crit_edge19, %..critedge.loopexit_crit_edge, %15
  %.27.ph = phi i8* [ %split, %..critedge.loopexit_crit_edge ], [ %split20, %..critedge.loopexit_crit_edge19 ], [ %16, %15 ]
  %.24.ph = phi i32 [ %split17, %..critedge.loopexit_crit_edge ], [ %split21, %..critedge.loopexit_crit_edge19 ], [ 0, %15 ]
  %.2.ph = phi i32 [ %split18, %..critedge.loopexit_crit_edge ], [ %split22, %..critedge.loopexit_crit_edge19 ], [ 0, %15 ]
  br label %.critedge

..critedge.loopexit10_crit_edge:                  ; preds = %46
  %split27 = phi i8* [ %52, %46 ]
  %split28 = phi i32 [ %51, %46 ]
  %split29 = phi i32 [ %53, %46 ]
  br label %.critedge.loopexit10

..critedge.loopexit10_crit_edge30:                ; preds = %42
  %split31 = phi i8* [ %.1623, %42 ]
  %split32 = phi i32 [ %.1324, %42 ]
  %split33 = phi i32 [ %.125, %42 ]
  br label %.critedge.loopexit10

.critedge.loopexit10:                             ; preds = %..critedge.loopexit10_crit_edge30, %..critedge.loopexit10_crit_edge, %.preheader
  %.27.ph11 = phi i8* [ %split27, %..critedge.loopexit10_crit_edge ], [ %split31, %..critedge.loopexit10_crit_edge30 ], [ %7, %.preheader ]
  %.24.ph12 = phi i32 [ %split28, %..critedge.loopexit10_crit_edge ], [ %split32, %..critedge.loopexit10_crit_edge30 ], [ 0, %.preheader ]
  %.2.ph13 = phi i32 [ %split29, %..critedge.loopexit10_crit_edge ], [ %split33, %..critedge.loopexit10_crit_edge30 ], [ 0, %.preheader ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit10, %.critedge.loopexit
  %.27 = phi i8* [ %.27.ph, %.critedge.loopexit ], [ %.27.ph11, %.critedge.loopexit10 ]
  %.24 = phi i32 [ %.24.ph, %.critedge.loopexit ], [ %.24.ph12, %.critedge.loopexit10 ]
  %.2 = phi i32 [ %.2.ph, %.critedge.loopexit ], [ %.2.ph13, %.critedge.loopexit10 ]
  %56 = icmp ne i32 %.2, 0
  br i1 %56, label %57, label %226

; <label>:57:                                     ; preds = %.critedge
  %58 = icmp eq i32 %.24, 0
  %59 = and i32 %.24, -128
  %60 = icmp ne i32 %59, 0
  %or.cond4 = or i1 %58, %60
  br i1 %or.cond4, label %226, label %61

; <label>:61:                                     ; preds = %57
  %62 = getelementptr inbounds i8, i8* %.27, i64 0
  %63 = icmp ult i8* %62, %1
  br i1 %63, label %64, label %69

; <label>:64:                                     ; preds = %61
  %65 = load i8, i8* %62, align 1
  %66 = sext i8 %65 to i32
  %67 = icmp eq i32 %66, 59
  %68 = getelementptr inbounds i8, i8* %62, i32 1
  %spec.select = select i1 %67, i8* %68, i8* %62
  br label %69

; <label>:69:                                     ; preds = %64, %61
  %70 = phi i8* [ %62, %61 ], [ %spec.select, %64 ]
  store i8* %70, i8** %0, align 8
  br label %226

; <label>:71:                                     ; preds = %6
  %72 = getelementptr inbounds i8, i8* %7, i64 1
  %73 = icmp eq i8* %72, %1
  br i1 %73, label %82, label %74

; <label>:74:                                     ; preds = %71
  %75 = getelementptr inbounds i8, i8* %7, i64 1
  %76 = icmp ult i8* %75, %1
  br i1 %76, label %77, label %226

; <label>:77:                                     ; preds = %74
  %78 = getelementptr inbounds i8, i8* %7, i64 1
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = call zeroext i1 @c_isalnum(i32 %80)
  br i1 %81, label %226, label %82

; <label>:82:                                     ; preds = %77, %71
  %83 = getelementptr inbounds i8, i8* %7, i64 0
  %84 = load i8, i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = icmp eq i32 %85, 116
  br i1 %86, label %87, label %226

; <label>:87:                                     ; preds = %82
  %88 = getelementptr inbounds i8, i8* %7, i64 1
  %89 = icmp ult i8* %88, %1
  br i1 %89, label %90, label %95

; <label>:90:                                     ; preds = %87
  %91 = load i8, i8* %88, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp eq i32 %92, 59
  %94 = getelementptr inbounds i8, i8* %88, i32 1
  %spec.select5 = select i1 %93, i8* %94, i8* %88
  br label %95

; <label>:95:                                     ; preds = %90, %87
  %96 = phi i8* [ %88, %87 ], [ %spec.select5, %90 ]
  store i8* %96, i8** %0, align 8
  br label %226

; <label>:97:                                     ; preds = %6
  %98 = getelementptr inbounds i8, i8* %7, i64 1
  %99 = icmp eq i8* %98, %1
  br i1 %99, label %108, label %100

; <label>:100:                                    ; preds = %97
  %101 = getelementptr inbounds i8, i8* %7, i64 1
  %102 = icmp ult i8* %101, %1
  br i1 %102, label %103, label %226

; <label>:103:                                    ; preds = %100
  %104 = getelementptr inbounds i8, i8* %7, i64 1
  %105 = load i8, i8* %104, align 1
  %106 = sext i8 %105 to i32
  %107 = call zeroext i1 @c_isalnum(i32 %106)
  br i1 %107, label %226, label %108

; <label>:108:                                    ; preds = %103, %97
  %109 = getelementptr inbounds i8, i8* %7, i64 0
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = icmp eq i32 %111, 116
  br i1 %112, label %113, label %226

; <label>:113:                                    ; preds = %108
  %114 = getelementptr inbounds i8, i8* %7, i64 1
  %115 = icmp ult i8* %114, %1
  br i1 %115, label %116, label %121

; <label>:116:                                    ; preds = %113
  %117 = load i8, i8* %114, align 1
  %118 = sext i8 %117 to i32
  %119 = icmp eq i32 %118, 59
  %120 = getelementptr inbounds i8, i8* %114, i32 1
  %spec.select6 = select i1 %119, i8* %120, i8* %114
  br label %121

; <label>:121:                                    ; preds = %116, %113
  %122 = phi i8* [ %114, %113 ], [ %spec.select6, %116 ]
  store i8* %122, i8** %0, align 8
  br label %226

; <label>:123:                                    ; preds = %6
  %124 = getelementptr inbounds i8, i8* %7, i64 2
  %125 = icmp eq i8* %124, %1
  br i1 %125, label %134, label %126

; <label>:126:                                    ; preds = %123
  %127 = getelementptr inbounds i8, i8* %7, i64 2
  %128 = icmp ult i8* %127, %1
  br i1 %128, label %129, label %154

; <label>:129:                                    ; preds = %126
  %130 = getelementptr inbounds i8, i8* %7, i64 2
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i32
  %133 = call zeroext i1 @c_isalnum(i32 %132)
  br i1 %133, label %154, label %134

; <label>:134:                                    ; preds = %129, %123
  %135 = getelementptr inbounds i8, i8* %7, i64 0
  %136 = load i8, i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = icmp eq i32 %137, 109
  br i1 %138, label %139, label %154

; <label>:139:                                    ; preds = %134
  %140 = getelementptr inbounds i8, i8* %7, i64 1
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = icmp eq i32 %142, 112
  br i1 %143, label %144, label %154

; <label>:144:                                    ; preds = %139
  %145 = getelementptr inbounds i8, i8* %7, i64 2
  %146 = icmp ult i8* %145, %1
  br i1 %146, label %147, label %152

; <label>:147:                                    ; preds = %144
  %148 = load i8, i8* %145, align 1
  %149 = sext i8 %148 to i32
  %150 = icmp eq i32 %149, 59
  %151 = getelementptr inbounds i8, i8* %145, i32 1
  %spec.select7 = select i1 %150, i8* %151, i8* %145
  br label %152

; <label>:152:                                    ; preds = %147, %144
  %153 = phi i8* [ %145, %144 ], [ %spec.select7, %147 ]
  store i8* %153, i8** %0, align 8
  br label %226

; <label>:154:                                    ; preds = %139, %134, %129, %126
  %155 = getelementptr inbounds i8, i8* %7, i64 3
  %156 = icmp eq i8* %155, %1
  br i1 %156, label %165, label %157

; <label>:157:                                    ; preds = %154
  %158 = getelementptr inbounds i8, i8* %7, i64 3
  %159 = icmp ult i8* %158, %1
  br i1 %159, label %160, label %226

; <label>:160:                                    ; preds = %157
  %161 = getelementptr inbounds i8, i8* %7, i64 3
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = call zeroext i1 @c_isalnum(i32 %163)
  br i1 %164, label %226, label %165

; <label>:165:                                    ; preds = %160, %154
  %166 = getelementptr inbounds i8, i8* %7, i64 0
  %167 = load i8, i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = icmp eq i32 %168, 112
  br i1 %169, label %170, label %226

; <label>:170:                                    ; preds = %165
  %171 = getelementptr inbounds i8, i8* %7, i64 1
  %172 = load i8, i8* %171, align 1
  %173 = sext i8 %172 to i32
  %174 = icmp eq i32 %173, 111
  br i1 %174, label %175, label %226

; <label>:175:                                    ; preds = %170
  %176 = getelementptr inbounds i8, i8* %7, i64 2
  %177 = load i8, i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = icmp eq i32 %178, 115
  br i1 %179, label %180, label %226

; <label>:180:                                    ; preds = %175
  %181 = getelementptr inbounds i8, i8* %7, i64 3
  %182 = icmp ult i8* %181, %1
  br i1 %182, label %183, label %188

; <label>:183:                                    ; preds = %180
  %184 = load i8, i8* %181, align 1
  %185 = sext i8 %184 to i32
  %186 = icmp eq i32 %185, 59
  %187 = getelementptr inbounds i8, i8* %181, i32 1
  %spec.select8 = select i1 %186, i8* %187, i8* %181
  br label %188

; <label>:188:                                    ; preds = %183, %180
  %189 = phi i8* [ %181, %180 ], [ %spec.select8, %183 ]
  store i8* %189, i8** %0, align 8
  br label %226

; <label>:190:                                    ; preds = %6
  %191 = getelementptr inbounds i8, i8* %7, i64 3
  %192 = icmp eq i8* %191, %1
  br i1 %192, label %201, label %193

; <label>:193:                                    ; preds = %190
  %194 = getelementptr inbounds i8, i8* %7, i64 3
  %195 = icmp ult i8* %194, %1
  br i1 %195, label %196, label %226

; <label>:196:                                    ; preds = %193
  %197 = getelementptr inbounds i8, i8* %7, i64 3
  %198 = load i8, i8* %197, align 1
  %199 = sext i8 %198 to i32
  %200 = call zeroext i1 @c_isalnum(i32 %199)
  br i1 %200, label %226, label %201

; <label>:201:                                    ; preds = %196, %190
  %202 = getelementptr inbounds i8, i8* %7, i64 0
  %203 = load i8, i8* %202, align 1
  %204 = sext i8 %203 to i32
  %205 = icmp eq i32 %204, 117
  br i1 %205, label %206, label %226

; <label>:206:                                    ; preds = %201
  %207 = getelementptr inbounds i8, i8* %7, i64 1
  %208 = load i8, i8* %207, align 1
  %209 = sext i8 %208 to i32
  %210 = icmp eq i32 %209, 111
  br i1 %210, label %211, label %226

; <label>:211:                                    ; preds = %206
  %212 = getelementptr inbounds i8, i8* %7, i64 2
  %213 = load i8, i8* %212, align 1
  %214 = sext i8 %213 to i32
  %215 = icmp eq i32 %214, 116
  br i1 %215, label %216, label %226

; <label>:216:                                    ; preds = %211
  %217 = getelementptr inbounds i8, i8* %7, i64 3
  %218 = icmp ult i8* %217, %1
  br i1 %218, label %219, label %224

; <label>:219:                                    ; preds = %216
  %220 = load i8, i8* %217, align 1
  %221 = sext i8 %220 to i32
  %222 = icmp eq i32 %221, 59
  %223 = getelementptr inbounds i8, i8* %217, i32 1
  %spec.select9 = select i1 %222, i8* %223, i8* %217
  br label %224

; <label>:224:                                    ; preds = %219, %216
  %225 = phi i8* [ %217, %216 ], [ %spec.select9, %219 ]
  store i8* %225, i8** %0, align 8
  br label %226

; <label>:226:                                    ; preds = %6, %95, %82, %77, %74, %121, %108, %103, %100, %157, %160, %165, %170, %175, %188, %152, %224, %211, %206, %201, %196, %193, %57, %.critedge, %2, %69
  %.0 = phi i32 [ %.24, %69 ], [ -1, %2 ], [ -1, %.critedge ], [ -1, %57 ], [ -1, %6 ], [ 62, %95 ], [ -1, %82 ], [ -1, %77 ], [ -1, %74 ], [ 60, %121 ], [ -1, %108 ], [ -1, %103 ], [ -1, %100 ], [ 38, %152 ], [ 39, %188 ], [ -1, %175 ], [ -1, %170 ], [ -1, %165 ], [ -1, %160 ], [ -1, %157 ], [ 34, %224 ], [ -1, %211 ], [ -1, %206 ], [ -1, %201 ], [ -1, %196 ], [ -1, %193 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.urlpos* @append_url(i8*, i32, i32, %struct.map_context*) #7 {
  %5 = call zeroext i1 @url_has_scheme(i8* %0)
  %6 = zext i1 %5 to i32
  %7 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %4
  %11 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  br label %16

; <label>:13:                                     ; preds = %4
  %14 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 2
  %15 = load i8*, i8** %14, align 8
  br label %16

; <label>:16:                                     ; preds = %13, %10
  %17 = phi i8* [ %12, %10 ], [ %15, %13 ]
  %18 = call %struct.iri* @iri_new()
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %20 = load i8*, i8** %19, align 8
  call void @set_uri_encoding(%struct.iri* %18, i8* %20, i1 zeroext true)
  %21 = getelementptr inbounds %struct.iri, %struct.iri* %18, i32 0, i32 3
  store i8 1, i8* %21, align 8
  %22 = icmp ne i8* %17, null
  br i1 %22, label %50, label %23

; <label>:23:                                     ; preds = %16
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %25 = load i8, i8* %24, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %23
  %28 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 3
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr [35 x i8], [35 x i8]* @.str.420, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %30, i8* %29, i8* %0)
  br label %31

; <label>:31:                                     ; preds = %23, %27
  %32 = icmp ne i32 %6, 0
  br i1 %32, label %38, label %33

; <label>:33:                                     ; preds = %31
  %34 = getelementptr [40 x i8], [40 x i8]* @.str.1.421, i32 0, i32 0
  %35 = call i8* @gettext(i8* %34) #8
  %36 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 3
  %37 = load i8*, i8** %36, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %35, i8* %37, i8* %0)
  call void @iri_free(%struct.iri* %18)
  br label %130

; <label>:38:                                     ; preds = %31
  %39 = call %struct.url* @url_parse(i8* %0, i32* null, %struct.iri* %18, i1 zeroext false)
  %40 = icmp ne %struct.url* %39, null
  br i1 %40, label %76, label %41

; <label>:41:                                     ; preds = %38
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %43 = load i8, i8* %42, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %49

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 3
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr [30 x i8], [30 x i8]* @.str.2.422, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %48, i8* %47, i8* %0)
  br label %49

; <label>:49:                                     ; preds = %41, %45
  call void @iri_free(%struct.iri* %18)
  br label %130

; <label>:50:                                     ; preds = %16
  %51 = call i8* @uri_merge(i8* %17, i8* %0)
  %52 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %53 = load i8, i8* %52, align 1
  %54 = trunc i8 %53 to i1
  br i1 %54, label %55, label %63

; <label>:55:                                     ; preds = %50
  %56 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 3
  %57 = load i8*, i8** %56, align 8
  %58 = call i8* @quotearg_n_style(i32 0, i32 7, i8* %57)
  %59 = call i8* @quote_n(i32 1, i8* %17)
  %60 = call i8* @quote_n(i32 2, i8* %0)
  %61 = call i8* @quotearg_n_style(i32 3, i32 7, i8* %51)
  %62 = getelementptr [25 x i8], [25 x i8]* @.str.3.423, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %62, i8* %58, i8* %59, i8* %60, i8* %61)
  br label %63

; <label>:63:                                     ; preds = %50, %55
  %64 = call %struct.url* @url_parse(i8* %51, i32* null, %struct.iri* %18, i1 zeroext false)
  %65 = icmp ne %struct.url* %64, null
  br i1 %65, label %75, label %66

; <label>:66:                                     ; preds = %63
  %67 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %68 = load i8, i8* %67, align 1
  %69 = trunc i8 %68 to i1
  br i1 %69, label %70, label %74

; <label>:70:                                     ; preds = %66
  %71 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 3
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr [37 x i8], [37 x i8]* @.str.4.424, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %73, i8* %72, i8* %51)
  br label %74

; <label>:74:                                     ; preds = %70, %66
  call void @free(i8* %51) #8
  call void @iri_free(%struct.iri* %18)
  br label %130

; <label>:75:                                     ; preds = %63
  call void @free(i8* %51) #8
  br label %76

; <label>:76:                                     ; preds = %38, %75
  %.03 = phi %struct.url* [ %64, %75 ], [ %39, %38 ]
  call void @iri_free(%struct.iri* %18)
  %77 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %78 = load i8, i8* %77, align 1
  %79 = trunc i8 %78 to i1
  br i1 %79, label %80, label %85

; <label>:80:                                     ; preds = %76
  %81 = getelementptr inbounds %struct.url, %struct.url* %.03, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = call i8* @quote(i8* %82)
  %84 = getelementptr [25 x i8], [25 x i8]* @.str.5.425, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %84, i8* %83)
  br label %85

; <label>:85:                                     ; preds = %76, %80
  %86 = call noalias i8* @xcalloc(i64 1, i64 48)
  %87 = bitcast i8* %86 to %struct.urlpos*
  %88 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %87, i32 0, i32 0
  store %struct.url* %.03, %struct.url** %88, align 8
  %89 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %87, i32 0, i32 5
  store i32 %1, i32* %89, align 4
  %90 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %87, i32 0, i32 6
  store i32 %2, i32* %90, align 8
  %cond = icmp eq i32 %6, 0
  br i1 %cond, label %91, label %102

; <label>:91:                                     ; preds = %85
  %92 = load i8, i8* %0, align 1
  %93 = sext i8 %92 to i32
  %94 = icmp ne i32 %93, 47
  br i1 %94, label %95, label %100

; <label>:95:                                     ; preds = %91
  %96 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %87, i32 0, i32 2
  %97 = load i16, i16* %96, align 8
  %98 = and i16 %97, -3
  %99 = or i16 %98, 2
  store i16 %99, i16* %96, align 8
  br label %107

; <label>:100:                                    ; preds = %91
  %101 = icmp ne i32 %6, 0
  br i1 %101, label %102, label %107

; <label>:102:                                    ; preds = %85, %100
  %103 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %87, i32 0, i32 2
  %104 = load i16, i16* %103, align 8
  %105 = and i16 %104, -5
  %106 = or i16 %105, 4
  store i16 %106, i16* %103, align 8
  br label %107

; <label>:107:                                    ; preds = %100, %102, %95
  %108 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 5
  %109 = load %struct.urlpos*, %struct.urlpos** %108, align 8
  %110 = icmp eq %struct.urlpos* %109, null
  %111 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 5
  br i1 %110, label %112, label %113

; <label>:112:                                    ; preds = %107
  store %struct.urlpos* %87, %struct.urlpos** %111, align 8
  br label %130

; <label>:113:                                    ; preds = %107
  %114 = load %struct.urlpos*, %struct.urlpos** %111, align 8
  call void @unroll_loop(i32 196)
  %115 = icmp ne %struct.urlpos* %114, null
  br i1 %115, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %113
  br label %116

; <label>:116:                                    ; preds = %.lr.ph, %120
  %.012 = phi %struct.urlpos* [ null, %.lr.ph ], [ %.021, %120 ]
  %.021 = phi %struct.urlpos* [ %114, %.lr.ph ], [ %122, %120 ]
  %117 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.021, i32 0, i32 5
  %118 = load i32, i32* %117, align 4
  %119 = icmp sgt i32 %1, %118
  br i1 %119, label %120, label %..critedge_crit_edge4

; <label>:120:                                    ; preds = %116
  %121 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.021, i32 0, i32 7
  %122 = load %struct.urlpos*, %struct.urlpos** %121, align 8
  call void @unroll_loop(i32 196)
  %123 = icmp ne %struct.urlpos* %122, null
  br i1 %123, label %116, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %120
  %split = phi %struct.urlpos* [ %122, %120 ]
  %split3 = phi %struct.urlpos* [ %.021, %120 ]
  br label %.critedge

..critedge_crit_edge4:                            ; preds = %116
  %split5 = phi %struct.urlpos* [ %.021, %116 ]
  %split6 = phi %struct.urlpos* [ %.012, %116 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge4, %..critedge_crit_edge, %113
  %.02.lcssa = phi %struct.urlpos* [ %split5, %..critedge_crit_edge4 ], [ %split, %..critedge_crit_edge ], [ %114, %113 ]
  %.01.lcssa = phi %struct.urlpos* [ %split6, %..critedge_crit_edge4 ], [ %split3, %..critedge_crit_edge ], [ null, %113 ]
  %124 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %87, i32 0, i32 7
  store %struct.urlpos* %.02.lcssa, %struct.urlpos** %124, align 8
  %125 = icmp ne %struct.urlpos* %.01.lcssa, null
  br i1 %125, label %126, label %128

; <label>:126:                                    ; preds = %.critedge
  %127 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01.lcssa, i32 0, i32 7
  store %struct.urlpos* %87, %struct.urlpos** %127, align 8
  br label %130

; <label>:128:                                    ; preds = %.critedge
  %129 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 5
  store %struct.urlpos* %87, %struct.urlpos** %129, align 8
  br label %130

; <label>:130:                                    ; preds = %112, %128, %126, %74, %49, %33
  %.0 = phi %struct.urlpos* [ null, %74 ], [ null, %49 ], [ null, %33 ], [ %87, %126 ], [ %87, %128 ], [ %87, %112 ]
  ret %struct.urlpos* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.urlpos* @get_urls_html(i8*, i8*, i8*, %struct.iri*) #7 {
  %5 = alloca %struct.map_context, align 8, !track !387
  %6 = call %struct.file_memory* @wget_read_file(i8* %0)
  %7 = icmp ne %struct.file_memory* %6, null
  br i1 %7, label %13, label %8

; <label>:8:                                      ; preds = %4
  %9 = call i32* @__errno_location() #15
  %10 = load i32, i32* %9, align 4
  %11 = call i8* @strerror(i32 %10) #8
  %12 = getelementptr [8 x i8], [8 x i8]* @.str.6.428, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %12, i8* %0, i8* %11)
  br label %82

; <label>:13:                                     ; preds = %4
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %15 = load i8, i8* %14, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %6, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = call i8* @number_to_static_string(i64 %19)
  %21 = getelementptr [22 x i8], [22 x i8]* @.str.7.429, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %21, i8* %0, i8* %20)
  br label %22

; <label>:22:                                     ; preds = %13, %17
  %23 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %6, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 0
  store i8* %24, i8** %25, align 8
  %26 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 5
  store %struct.urlpos* null, %struct.urlpos** %26, align 8
  %27 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 1
  store i8* null, i8** %27, align 8
  %28 = icmp ne i8* %1, null
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 76
  %30 = load i8*, i8** %29, align 8
  %31 = select i1 %28, i8* %1, i8* %30
  %32 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 2
  store i8* %31, i8** %32, align 8
  %33 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 3
  store i8* %0, i8** %33, align 8
  %34 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 4
  store i8 0, i8* %34, align 8
  %35 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  %36 = icmp ne %struct.hash_table* %35, null
  br i1 %36, label %38, label %37

; <label>:37:                                     ; preds = %22
  call void @init_interesting()
  br label %38

; <label>:38:                                     ; preds = %37, %22
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 142
  %40 = load i8, i8* %39, align 4
  %41 = trunc i8 %40 to i1
  %42 = or i32 2, 1
  %spec.select = select i1 %41, i32 %42, i32 2
  %43 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %6, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %6, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = bitcast %struct.map_context* %5 to i8*
  %49 = load %struct.hash_table*, %struct.hash_table** @interesting_attributes, align 8
  call void @map_html_tags(i8* %44, i32 %47, void (%struct.taginfo*, i8*)* @collect_tags_mapper, i8* %48, i32 %spec.select, %struct.hash_table* null, %struct.hash_table* %49)
  %50 = icmp ne %struct.iri* %3, null
  br i1 %50, label %51, label %59

; <label>:51:                                     ; preds = %38
  %52 = getelementptr inbounds %struct.iri, %struct.iri* %3, i32 0, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, null
  %55 = load i8*, i8** @meta_charset, align 8
  %56 = icmp ne i8* %55, null
  %or.cond = and i1 %54, %56
  br i1 %or.cond, label %57, label %59

; <label>:57:                                     ; preds = %51
  %58 = load i8*, i8** @meta_charset, align 8
  call void @set_content_encoding(%struct.iri* %3, i8* %58)
  br label %59

; <label>:59:                                     ; preds = %38, %57, %51
  %60 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %61 = load i8, i8* %60, align 1
  %62 = trunc i8 %61 to i1
  br i1 %62, label %63, label %69

; <label>:63:                                     ; preds = %59
  %64 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 4
  %65 = load i8, i8* %64, align 8
  %66 = trunc i8 %65 to i1
  %67 = zext i1 %66 to i32
  %68 = getelementptr [21 x i8], [21 x i8]* @.str.8.430, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %68, i8* %0, i32 %67)
  br label %69

; <label>:69:                                     ; preds = %59, %63
  %70 = icmp ne i8* %2, null
  br i1 %70, label %71, label %76

; <label>:71:                                     ; preds = %69
  %72 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 4
  %73 = load i8, i8* %72, align 8
  %74 = trunc i8 %73 to i1
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %2, align 1
  br label %76

; <label>:76:                                     ; preds = %69, %71
  %77 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 1
  %78 = load i8*, i8** %77, align 8
  call void @free(i8* %78) #8
  %79 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 1
  store i8* null, i8** %79, align 8
  call void @wget_read_file_free(%struct.file_memory* %6)
  %80 = getelementptr inbounds %struct.map_context, %struct.map_context* %5, i32 0, i32 5
  %81 = load %struct.urlpos*, %struct.urlpos** %80, align 8
  br label %82

; <label>:82:                                     ; preds = %76, %8
  %.0 = phi %struct.urlpos* [ %81, %76 ], [ null, %8 ]
  ret %struct.urlpos* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_interesting() #0 {
  %1 = call %struct.hash_table* @make_nocase_string_hash_table(i32 25)
  store %struct.hash_table* %1, %struct.hash_table** @interesting_tags, align 8
  br label %2

; <label>:2:                                      ; preds = %0, %2
  %.011 = phi i64 [ 0, %0 ], [ %10, %2 ]
  call void @unroll_loop(i32 197)
  %3 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  %4 = getelementptr inbounds [25 x %struct.known_tag], [25 x %struct.known_tag]* @known_tags, i64 0, i64 %.011
  %5 = getelementptr inbounds %struct.known_tag, %struct.known_tag* %4, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr [25 x %struct.known_tag], [25 x %struct.known_tag]* @known_tags, i32 0, i32 0
  %8 = getelementptr inbounds %struct.known_tag, %struct.known_tag* %7, i64 %.011
  %9 = bitcast %struct.known_tag* %8 to i8*
  call void @hash_table_put(%struct.hash_table* %3, i8* %6, i8* %9)
  %10 = add nuw nsw i64 %.011, 1
  %exitcond12 = icmp ne i64 %10, 25
  br i1 %exitcond12, label %2, label %11

; <label>:11:                                     ; preds = %2
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 43
  %13 = load i8**, i8*** %12, align 8
  %14 = icmp ne i8** %13, null
  br i1 %14, label %15, label %._crit_edge10

; <label>:15:                                     ; preds = %11
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 43
  %17 = load i8**, i8*** %16, align 8
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %.lr.ph9.preheader, label %._crit_edge10

.lr.ph9.preheader:                                ; preds = %15
  br label %.lr.ph9

.lr.ph9:                                          ; preds = %.lr.ph9.preheader, %.lr.ph9
  %.017 = phi i8** [ %23, %.lr.ph9 ], [ %17, %.lr.ph9.preheader ]
  call void @unroll_loop(i32 198)
  %20 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  %21 = load i8*, i8** %.017, align 8
  %22 = call i32 @hash_table_remove(%struct.hash_table* %20, i8* %21)
  %23 = getelementptr inbounds i8*, i8** %.017, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %.lr.ph9, label %._crit_edge10.loopexit

._crit_edge10.loopexit:                           ; preds = %.lr.ph9
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %._crit_edge10.loopexit, %15, %11
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %27 = load i8**, i8*** %26, align 8
  %28 = icmp ne i8** %27, null
  br i1 %28, label %29, label %48

; <label>:29:                                     ; preds = %._crit_edge10
  %30 = call %struct.hash_table* @make_nocase_string_hash_table(i32 0)
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %32 = load i8**, i8*** %31, align 8
  %33 = load i8*, i8** %32, align 8
  %34 = icmp ne i8* %33, null
  br i1 %34, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %29
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %43
  %.026 = phi i8** [ %44, %43 ], [ %32, %.lr.ph.preheader ]
  call void @unroll_loop(i32 199)
  %35 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  %36 = load i8*, i8** %.026, align 8
  %37 = call i8* @hash_table_get(%struct.hash_table* %35, i8* %36)
  %38 = bitcast i8* %37 to %struct.known_tag*
  %39 = icmp ne %struct.known_tag* %38, null
  br i1 %39, label %40, label %43

; <label>:40:                                     ; preds = %.lr.ph
  %41 = load i8*, i8** %.026, align 8
  %42 = bitcast %struct.known_tag* %38 to i8*
  call void @hash_table_put(%struct.hash_table* %30, i8* %41, i8* %42)
  br label %43

; <label>:43:                                     ; preds = %.lr.ph, %40
  %44 = getelementptr inbounds i8*, i8** %.026, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %43
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %29
  %47 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  call void @hash_table_destroy(%struct.hash_table* %47)
  store %struct.hash_table* %30, %struct.hash_table** @interesting_tags, align 8
  br label %48

; <label>:48:                                     ; preds = %._crit_edge, %._crit_edge10
  %49 = call %struct.hash_table* @make_nocase_string_hash_table(i32 10)
  store %struct.hash_table* %49, %struct.hash_table** @interesting_attributes, align 8
  br label %50

; <label>:50:                                     ; preds = %48, %50
  %.14 = phi i64 [ 0, %48 ], [ %55, %50 ]
  call void @unroll_loop(i32 200)
  %51 = load %struct.hash_table*, %struct.hash_table** @interesting_attributes, align 8
  %52 = getelementptr inbounds [7 x i8*], [7 x i8*]* @additional_attributes, i64 0, i64 %.14
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr [2 x i8], [2 x i8]* @.str.10.432, i32 0, i32 0
  call void @hash_table_put(%struct.hash_table* %51, i8* %53, i8* %54)
  %55 = add nuw nsw i64 %.14, 1
  %exitcond5 = icmp ne i64 %55, 7
  br i1 %exitcond5, label %50, label %.preheader

.preheader:                                       ; preds = %50
  %.23.ph = phi i64 [ 0, %50 ]
  br label %56

; <label>:56:                                     ; preds = %.preheader, %56
  %.23 = phi i64 [ %62, %56 ], [ %.23.ph, %.preheader ]
  call void @unroll_loop(i32 201)
  %57 = load %struct.hash_table*, %struct.hash_table** @interesting_attributes, align 8
  %58 = getelementptr inbounds [26 x %struct.anon], [26 x %struct.anon]* @tag_url_attributes, i64 0, i64 %.23
  %59 = getelementptr inbounds %struct.anon, %struct.anon* %58, i32 0, i32 1
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr [2 x i8], [2 x i8]* @.str.10.432, i32 0, i32 0
  call void @hash_table_put(%struct.hash_table* %57, i8* %60, i8* %61)
  %62 = add nuw nsw i64 %.23, 1
  %exitcond = icmp ne i64 %62, 26
  br i1 %exitcond, label %56, label %63

; <label>:63:                                     ; preds = %56
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_tags_mapper(%struct.taginfo*, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.map_context*
  %4 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  %5 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = call i8* @hash_table_get(%struct.hash_table* %4, i8* %6)
  %8 = bitcast i8* %7 to %struct.known_tag*
  %9 = icmp ne %struct.known_tag* %8, null
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %struct.known_tag, %struct.known_tag* %8, i32 0, i32 2
  %12 = load void (i32, %struct.taginfo*, %struct.map_context*)*, void (i32, %struct.taginfo*, %struct.map_context*)** %11, align 8
  %13 = getelementptr inbounds %struct.known_tag, %struct.known_tag* %8, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  call void %12(i32 %14, %struct.taginfo* %0, %struct.map_context* %3)
  br label %15

; <label>:15:                                     ; preds = %10, %2
  call void @check_style_attr(%struct.taginfo* %0, %struct.map_context* %3)
  %16 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %56

; <label>:19:                                     ; preds = %15
  %20 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr [6 x i8], [6 x i8]* @.str.53.431, i32 0, i32 0
  %23 = call i32 @c_strcasecmp(i8* %21, i8* %22) #14
  %24 = icmp eq i32 0, %23
  br i1 %24, label %25, label %56

; <label>:25:                                     ; preds = %19
  %26 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 6
  %27 = load i8*, i8** %26, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %29, label %56

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 7
  %31 = load i8*, i8** %30, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %56

; <label>:33:                                     ; preds = %29
  %34 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 6
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 7
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ule i8* %35, %37
  br i1 %38, label %39, label %56

; <label>:39:                                     ; preds = %33
  %40 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 6
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.map_context, %struct.map_context* %3, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = ptrtoint i8* %41 to i64
  %45 = ptrtoint i8* %43 to i64
  %46 = sub i64 %44, %45
  %47 = trunc i64 %46 to i32
  %48 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 7
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 6
  %51 = load i8*, i8** %50, align 8
  %52 = ptrtoint i8* %49 to i64
  %53 = ptrtoint i8* %51 to i64
  %54 = sub i64 %52, %53
  %55 = trunc i64 %54 to i32
  call void @get_urls_css(%struct.map_context* %3, i32 %47, i32 %55)
  br label %56

; <label>:56:                                     ; preds = %39, %33, %29, %25, %19, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_style_attr(%struct.taginfo*, %struct.map_context*) #0 {
  %3 = alloca i32, align 4
  %4 = getelementptr [6 x i8], [6 x i8]* @.str.53.431, i32 0, i32 0
  %5 = call i8* @find_attr(%struct.taginfo* %0, i8* %4, i32* %3)
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %49

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 3
  %9 = load %struct.attr_pair*, %struct.attr_pair** %8, align 8
  %10 = load i32, i32* %3, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %9, i64 %11
  %13 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %12, i32 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.map_context, %struct.map_context* %1, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %14 to i64
  %18 = ptrtoint i8* %16 to i64
  %19 = sub i64 %17, %18
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 3
  %22 = load %struct.attr_pair*, %struct.attr_pair** %21, align 8
  %23 = load i32, i32* %3, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %22, i64 %24
  %26 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %25, i32 0, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.map_context, %struct.map_context* %1, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = sext i32 %20 to i64
  %31 = getelementptr inbounds i8, i8* %29, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %33, 39
  br i1 %34, label %43, label %35

; <label>:35:                                     ; preds = %7
  %36 = getelementptr inbounds %struct.map_context, %struct.map_context* %1, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = sext i32 %20 to i64
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 34
  br i1 %42, label %43, label %46

; <label>:43:                                     ; preds = %35, %7
  %44 = add nsw i32 %20, 1
  %45 = sub nsw i32 %27, 2
  br label %46

; <label>:46:                                     ; preds = %43, %35
  %.01 = phi i32 [ %44, %43 ], [ %20, %35 ]
  %.0 = phi i32 [ %45, %43 ], [ %27, %35 ]
  %47 = icmp sle i32 %.0, 0
  br i1 %47, label %49, label %48

; <label>:48:                                     ; preds = %46
  call void @get_urls_css(%struct.map_context* %1, i32 %.01, i32 %.0)
  br label %49

; <label>:49:                                     ; preds = %46, %2, %48
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @find_attr(%struct.taginfo*, i8*, i32*) #7 {
  %4 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 0, %5
  br i1 %6, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %25
  %indvars.iv = phi i64 [ %indvars.iv.next, %25 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 202)
  %7 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 3
  %8 = load %struct.attr_pair*, %struct.attr_pair** %7, align 8
  %9 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %8, i64 %indvars.iv
  %10 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = call i32 @c_strcasecmp(i8* %11, i8* %1) #14
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %25, label %14

; <label>:14:                                     ; preds = %.lr.ph
  %.01.lcssa2.wide = phi i64 [ %indvars.iv, %.lr.ph ]
  %15 = trunc i64 %.01.lcssa2.wide to i32
  %16 = icmp ne i32* %2, null
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %14
  store i32 %15, i32* %2, align 4
  br label %18

; <label>:18:                                     ; preds = %17, %14
  %19 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %0, i32 0, i32 3
  %20 = load %struct.attr_pair*, %struct.attr_pair** %19, align 8
  %21 = sext i32 %15 to i64
  %22 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %20, i64 %21
  %23 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %22, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  br label %._crit_edge

; <label>:25:                                     ; preds = %.lr.ph
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %26 = load i32, i32* %4, align 4
  %27 = sext i32 %26 to i64
  %28 = icmp slt i64 %indvars.iv.next, %27
  br i1 %28, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %25
  %.0.ph = phi i8* [ null, %25 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3, %18
  %.0 = phi i8* [ %24, %18 ], [ null, %3 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @tag_find_urls(i32, %struct.taginfo*, %struct.map_context*) #0 {
  br label %4

; <label>:4:                                      ; preds = %3, %11
  %.025 = phi i64 [ 0, %3 ], [ %12, %11 ]
  call void @unroll_loop(i32 203)
  %5 = getelementptr inbounds [26 x %struct.anon], [26 x %struct.anon]* @tag_url_attributes, i64 0, i64 %.025
  %6 = getelementptr inbounds %struct.anon, %struct.anon* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, %0
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %4
  %.02.lcssa3 = phi i64 [ %.025, %4 ]
  %10 = trunc i64 %.02.lcssa3 to i32
  br label %.loopexit

; <label>:11:                                     ; preds = %4
  %12 = add nuw nsw i64 %.025, 1
  %13 = icmp ult i64 %12, 26
  br i1 %13, label %4, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %11
  %.0.ph = phi i32 [ -1, %11 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %9
  %.0 = phi i32 [ %10, %9 ], [ %.0.ph, %.loopexit.loopexit ]
  %14 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 0, %15
  br i1 %16, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.loopexit
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.critedge
  %indvars.iv = phi i64 [ %indvars.iv.next, %.critedge ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 204)
  %17 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %18 = load %struct.attr_pair*, %struct.attr_pair** %17, align 8
  %19 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %18, i64 %indvars.iv
  %20 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %19, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = sext i32 %.0 to i64
  call void @unroll_loop(i32 205)
  %23 = icmp ult i64 %22, 26
  br i1 %23, label %.lr.ph2, label %.critedge

.lr.ph2:                                          ; preds = %.lr.ph
  br label %24

; <label>:24:                                     ; preds = %.lr.ph2, %78
  %.11 = phi i64 [ %22, %.lr.ph2 ], [ %79, %78 ]
  %25 = getelementptr inbounds [26 x %struct.anon], [26 x %struct.anon]* @tag_url_attributes, i64 0, i64 %.11
  %26 = getelementptr inbounds %struct.anon, %struct.anon* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, %0
  br i1 %28, label %29, label %..critedge_crit_edge

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %31 = load %struct.attr_pair*, %struct.attr_pair** %30, align 8
  %32 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %31, i64 %indvars.iv
  %33 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %32, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds [26 x %struct.anon], [26 x %struct.anon]* @tag_url_attributes, i64 0, i64 %.11
  %36 = getelementptr inbounds %struct.anon, %struct.anon* %35, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @strcasecmp(i8* %34, i8* %37) #14
  %39 = icmp eq i32 0, %38
  br i1 %39, label %40, label %78

; <label>:40:                                     ; preds = %29
  %41 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %42 = load %struct.attr_pair*, %struct.attr_pair** %41, align 8
  %43 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %42, i64 %indvars.iv
  %44 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %43, i32 0, i32 2
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = ptrtoint i8* %45 to i64
  %49 = ptrtoint i8* %47 to i64
  %50 = sub i64 %48, %49
  %51 = trunc i64 %50 to i32
  %52 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %53 = load %struct.attr_pair*, %struct.attr_pair** %52, align 8
  %54 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %53, i64 %indvars.iv
  %55 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %54, i32 0, i32 3
  %56 = load i32, i32* %55, align 8
  %57 = call %struct.urlpos* @append_url(i8* %21, i32 %51, i32 %56, %struct.map_context* %2)
  %58 = icmp ne %struct.urlpos* %57, null
  br i1 %58, label %59, label %78

; <label>:59:                                     ; preds = %40
  %60 = getelementptr inbounds [26 x %struct.anon], [26 x %struct.anon]* @tag_url_attributes, i64 0, i64 %.11
  %61 = getelementptr inbounds %struct.anon, %struct.anon* %60, i32 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = and i32 %62, 1
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %70

; <label>:65:                                     ; preds = %59
  %66 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %57, i32 0, i32 2
  %67 = load i16, i16* %66, align 8
  %68 = and i16 %67, -17
  %69 = or i16 %68, 16
  store i16 %69, i16* %66, align 8
  br label %70

; <label>:70:                                     ; preds = %65, %59
  %71 = and i32 %62, 2
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %78

; <label>:73:                                     ; preds = %70
  %74 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %57, i32 0, i32 2
  %75 = load i16, i16* %74, align 8
  %76 = and i16 %75, -65
  %77 = or i16 %76, 64
  store i16 %77, i16* %74, align 8
  br label %78

; <label>:78:                                     ; preds = %29, %70, %73, %40
  %79 = add nuw nsw i64 %.11, 1
  call void @unroll_loop(i32 205)
  %80 = icmp ult i64 %79, 26
  br i1 %80, label %24, label %..critedge_crit_edge3

..critedge_crit_edge:                             ; preds = %24
  br label %.critedge

..critedge_crit_edge3:                            ; preds = %78
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge3, %..critedge_crit_edge, %.lr.ph
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %81 = load i32, i32* %14, align 4
  %82 = sext i32 %81 to i64
  %83 = icmp slt i64 %indvars.iv.next, %82
  br i1 %83, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.critedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.loopexit
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @tag_handle_base(i32, %struct.taginfo*, %struct.map_context*) #0 {
  %4 = alloca i32, align 4
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.36.433, i32 0, i32 0
  %6 = call i8* @find_attr(%struct.taginfo* %1, i8* %5, i32* %4)
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %54

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %10 = load %struct.attr_pair*, %struct.attr_pair** %9, align 8
  %11 = load i32, i32* %4, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %10, i64 %12
  %14 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %13, i32 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = ptrtoint i8* %15 to i64
  %19 = ptrtoint i8* %17 to i64
  %20 = sub i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %23 = load %struct.attr_pair*, %struct.attr_pair** %22, align 8
  %24 = load i32, i32* %4, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %23, i64 %25
  %27 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %26, i32 0, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = call %struct.urlpos* @append_url(i8* %6, i32 %21, i32 %28, %struct.map_context* %2)
  %30 = icmp ne %struct.urlpos* %29, null
  br i1 %30, label %31, label %54

; <label>:31:                                     ; preds = %8
  %32 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %29, i32 0, i32 2
  %33 = load i16, i16* %32, align 8
  %34 = and i16 %33, -2
  %35 = or i16 %34, 1
  store i16 %35, i16* %32, align 8
  %36 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %29, i32 0, i32 2
  %37 = load i16, i16* %36, align 8
  %38 = and i16 %37, -9
  %39 = or i16 %38, 8
  store i16 %39, i16* %36, align 8
  %40 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 1
  %41 = load i8*, i8** %40, align 8
  call void @free(i8* %41) #8
  %42 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 1
  store i8* null, i8** %42, align 8
  %43 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 2
  %44 = load i8*, i8** %43, align 8
  %45 = icmp ne i8* %44, null
  br i1 %45, label %46, label %51

; <label>:46:                                     ; preds = %31
  %47 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 2
  %48 = load i8*, i8** %47, align 8
  %49 = call i8* @uri_merge(i8* %48, i8* %6)
  %50 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 1
  store i8* %49, i8** %50, align 8
  br label %54

; <label>:51:                                     ; preds = %31
  %52 = call noalias i8* @xstrdup(i8* %6)
  %53 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 1
  store i8* %52, i8** %53, align 8
  br label %54

; <label>:54:                                     ; preds = %8, %3, %51, %46
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @tag_handle_form(i32, %struct.taginfo*, %struct.map_context*) #0 {
  %4 = alloca i32, align 4
  %5 = getelementptr [7 x i8], [7 x i8]* @.str.37.445, i32 0, i32 0
  %6 = call i8* @find_attr(%struct.taginfo* %1, i8* %5, i32* %4)
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %36

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %10 = load %struct.attr_pair*, %struct.attr_pair** %9, align 8
  %11 = load i32, i32* %4, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %10, i64 %12
  %14 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %13, i32 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = ptrtoint i8* %15 to i64
  %19 = ptrtoint i8* %17 to i64
  %20 = sub i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %23 = load %struct.attr_pair*, %struct.attr_pair** %22, align 8
  %24 = load i32, i32* %4, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %23, i64 %25
  %27 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %26, i32 0, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = call %struct.urlpos* @append_url(i8* %6, i32 %21, i32 %28, %struct.map_context* %2)
  %30 = icmp ne %struct.urlpos* %29, null
  br i1 %30, label %31, label %36

; <label>:31:                                     ; preds = %8
  %32 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %29, i32 0, i32 2
  %33 = load i16, i16* %32, align 8
  %34 = and i16 %33, -2
  %35 = or i16 %34, 1
  store i16 %35, i16* %32, align 8
  br label %36

; <label>:36:                                     ; preds = %8, %31, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @tag_handle_link(i32, %struct.taginfo*, %struct.map_context*) #0 {
  %4 = alloca i32, align 4
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.36.433, i32 0, i32 0
  %6 = call i8* @find_attr(%struct.taginfo* %1, i8* %5, i32* %4)
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %70

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %10 = load %struct.attr_pair*, %struct.attr_pair** %9, align 8
  %11 = load i32, i32* %4, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %10, i64 %12
  %14 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %13, i32 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = ptrtoint i8* %15 to i64
  %19 = ptrtoint i8* %17 to i64
  %20 = sub i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %23 = load %struct.attr_pair*, %struct.attr_pair** %22, align 8
  %24 = load i32, i32* %4, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %23, i64 %25
  %27 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %26, i32 0, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = call %struct.urlpos* @append_url(i8* %6, i32 %21, i32 %28, %struct.map_context* %2)
  %30 = icmp ne %struct.urlpos* %29, null
  br i1 %30, label %31, label %70

; <label>:31:                                     ; preds = %8
  %32 = getelementptr [4 x i8], [4 x i8]* @.str.38.440, i32 0, i32 0
  %33 = call i8* @find_attr(%struct.taginfo* %1, i8* %32, i32* null)
  %34 = icmp ne i8* %33, null
  br i1 %34, label %35, label %70

; <label>:35:                                     ; preds = %31
  %36 = getelementptr [11 x i8], [11 x i8]* @.str.39.478, i32 0, i32 0
  %37 = call i32 @c_strcasecmp(i8* %33, i8* %36) #14
  %38 = icmp eq i32 0, %37
  br i1 %38, label %39, label %48

; <label>:39:                                     ; preds = %35
  %40 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %29, i32 0, i32 2
  %41 = load i16, i16* %40, align 8
  %42 = and i16 %41, -17
  %43 = or i16 %42, 16
  store i16 %43, i16* %40, align 8
  %44 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %29, i32 0, i32 2
  %45 = load i16, i16* %44, align 8
  %46 = and i16 %45, -129
  %47 = or i16 %46, 128
  store i16 %47, i16* %44, align 8
  br label %70

; <label>:48:                                     ; preds = %35
  %49 = getelementptr [14 x i8], [14 x i8]* @.str.40.479, i32 0, i32 0
  %50 = call i32 @c_strcasecmp(i8* %33, i8* %49) #14
  %51 = icmp eq i32 0, %50
  br i1 %51, label %52, label %57

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %29, i32 0, i32 2
  %54 = load i16, i16* %53, align 8
  %55 = and i16 %54, -17
  %56 = or i16 %55, 16
  store i16 %56, i16* %53, align 8
  br label %70

; <label>:57:                                     ; preds = %48
  %58 = getelementptr [5 x i8], [5 x i8]* @.str.41.441, i32 0, i32 0
  %59 = call i8* @find_attr(%struct.taginfo* %1, i8* %58, i32* null)
  %60 = icmp ne i8* %59, null
  br i1 %60, label %61, label %65

; <label>:61:                                     ; preds = %57
  %62 = getelementptr [10 x i8], [10 x i8]* @.str.42.480, i32 0, i32 0
  %63 = call i32 @c_strcasecmp(i8* %59, i8* %62) #14
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %70

; <label>:65:                                     ; preds = %61, %57
  %66 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %29, i32 0, i32 2
  %67 = load i16, i16* %66, align 8
  %68 = and i16 %67, -65
  %69 = or i16 %68, 64
  store i16 %69, i16* %66, align 8
  br label %70

; <label>:70:                                     ; preds = %8, %39, %61, %65, %52, %31, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @tag_handle_meta(i32, %struct.taginfo*, %struct.map_context*) #0 {
  %4 = alloca i32, align 4
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.43.443, i32 0, i32 0
  %6 = call i8* @find_attr(%struct.taginfo* %1, i8* %5, i32* null)
  %7 = getelementptr [11 x i8], [11 x i8]* @.str.44.442, i32 0, i32 0
  %8 = call i8* @find_attr(%struct.taginfo* %1, i8* %7, i32* null)
  %magicptr = ptrtoint i8* %8 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %116, label %9

; <label>:9:                                      ; preds = %3
  %10 = getelementptr [8 x i8], [8 x i8]* @.str.45.471, i32 0, i32 0
  %11 = call i32 @c_strcasecmp(i8* %8, i8* %10) #14
  %12 = icmp eq i32 0, %11
  br i1 %12, label %13, label %101

; <label>:13:                                     ; preds = %9
  %14 = getelementptr [8 x i8], [8 x i8]* @.str.46.444, i32 0, i32 0
  %15 = call i8* @find_attr(%struct.taginfo* %1, i8* %14, i32* %4)
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %._crit_edge11

; <label>:17:                                     ; preds = %13
  %18 = load i8, i8* %15, align 1
  %19 = sext i8 %18 to i32
  %20 = call zeroext i1 @c_isdigit(i32 %19)
  br i1 %20, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %17
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.026 = phi i8* [ %26, %.lr.ph ], [ %15, %.lr.ph.preheader ]
  %.045 = phi i32 [ %25, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 206)
  %21 = mul nsw i32 10, %.045
  %22 = load i8, i8* %.026, align 1
  %23 = sext i8 %22 to i32
  %24 = add nsw i32 %21, %23
  %25 = sub nsw i32 %24, 48
  %26 = getelementptr inbounds i8, i8* %.026, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i32
  %29 = call zeroext i1 @c_isdigit(i32 %28)
  br i1 %29, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.04.lcssa.ph = phi i32 [ %25, %.lr.ph ]
  %.02.lcssa.ph = phi i8* [ %26, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %17
  %.04.lcssa = phi i32 [ 0, %17 ], [ %.04.lcssa.ph, %._crit_edge.loopexit ]
  %.02.lcssa = phi i8* [ %15, %17 ], [ %.02.lcssa.ph, %._crit_edge.loopexit ]
  %30 = getelementptr inbounds i8, i8* %.02.lcssa, i32 1
  %31 = load i8, i8* %.02.lcssa, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp ne i32 %32, 59
  br i1 %33, label %._crit_edge11, label %.preheader

.preheader:                                       ; preds = %._crit_edge
  br label %34

; <label>:34:                                     ; preds = %.preheader, %34
  %.13 = phi i8* [ %38, %34 ], [ %30, %.preheader ]
  call void @unroll_loop(i32 207)
  %35 = load i8, i8* %.13, align 1
  %36 = sext i8 %35 to i32
  %37 = call zeroext i1 @c_isspace(i32 %36)
  %38 = getelementptr inbounds i8, i8* %.13, i32 1
  br i1 %37, label %34, label %39

; <label>:39:                                     ; preds = %34
  %.13.lcssa = phi i8* [ %.13, %34 ]
  %40 = load i8, i8* %.13.lcssa, align 1
  %41 = sext i8 %40 to i32
  %42 = call i32 @c_toupper(i32 %41)
  %43 = icmp eq i32 %42, 85
  br i1 %43, label %44, label %._crit_edge11

; <label>:44:                                     ; preds = %39
  %45 = getelementptr inbounds i8, i8* %.13.lcssa, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = call i32 @c_toupper(i32 %47)
  %49 = icmp eq i32 %48, 82
  br i1 %49, label %50, label %._crit_edge11

; <label>:50:                                     ; preds = %44
  %51 = getelementptr inbounds i8, i8* %.13.lcssa, i64 2
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = call i32 @c_toupper(i32 %53)
  %55 = icmp eq i32 %54, 76
  br i1 %55, label %56, label %._crit_edge11

; <label>:56:                                     ; preds = %50
  %57 = getelementptr inbounds i8, i8* %.13.lcssa, i64 3
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp eq i32 %59, 61
  br i1 %60, label %61, label %._crit_edge11

; <label>:61:                                     ; preds = %56
  %62 = getelementptr inbounds i8, i8* %.13.lcssa, i64 4
  br label %63

; <label>:63:                                     ; preds = %63, %61
  %.2 = phi i8* [ %62, %61 ], [ %67, %63 ]
  call void @unroll_loop(i32 208)
  %64 = load i8, i8* %.2, align 1
  %65 = sext i8 %64 to i32
  %66 = call zeroext i1 @c_isspace(i32 %65)
  %67 = getelementptr inbounds i8, i8* %.2, i32 1
  br i1 %66, label %63, label %68

; <label>:68:                                     ; preds = %63
  %.2.lcssa = phi i8* [ %.2, %63 ]
  %69 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %70 = load %struct.attr_pair*, %struct.attr_pair** %69, align 8
  %71 = load i32, i32* %4, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %70, i64 %72
  %74 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %73, i32 0, i32 2
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = ptrtoint i8* %75 to i64
  %79 = ptrtoint i8* %77 to i64
  %80 = sub i64 %78, %79
  %81 = trunc i64 %80 to i32
  %82 = getelementptr inbounds %struct.taginfo, %struct.taginfo* %1, i32 0, i32 3
  %83 = load %struct.attr_pair*, %struct.attr_pair** %82, align 8
  %84 = load i32, i32* %4, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %83, i64 %85
  %87 = getelementptr inbounds %struct.attr_pair, %struct.attr_pair* %86, i32 0, i32 3
  %88 = load i32, i32* %87, align 8
  %89 = call %struct.urlpos* @append_url(i8* %.2.lcssa, i32 %81, i32 %88, %struct.map_context* %2)
  %90 = icmp ne %struct.urlpos* %89, null
  br i1 %90, label %91, label %._crit_edge11

; <label>:91:                                     ; preds = %68
  %92 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %89, i32 0, i32 2
  %93 = load i16, i16* %92, align 8
  %94 = and i16 %93, -257
  %95 = or i16 %94, 256
  store i16 %95, i16* %92, align 8
  %96 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %89, i32 0, i32 3
  store i32 %.04.lcssa, i32* %96, align 4
  %97 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %89, i32 0, i32 2
  %98 = load i16, i16* %97, align 8
  %99 = and i16 %98, -65
  %100 = or i16 %99, 64
  store i16 %100, i16* %97, align 8
  br label %._crit_edge11

; <label>:101:                                    ; preds = %9
  %102 = icmp ne i8* %8, null
  br i1 %102, label %103, label %116

; <label>:103:                                    ; preds = %101
  %104 = getelementptr [13 x i8], [13 x i8]* @.str.47.472, i32 0, i32 0
  %105 = call i32 @c_strcasecmp(i8* %8, i8* %104) #14
  %106 = icmp eq i32 0, %105
  br i1 %106, label %107, label %116

; <label>:107:                                    ; preds = %103
  %108 = getelementptr [8 x i8], [8 x i8]* @.str.46.444, i32 0, i32 0
  %109 = call i8* @find_attr(%struct.taginfo* %1, i8* %108, i32* null)
  %110 = icmp ne i8* %109, null
  br i1 %110, label %111, label %._crit_edge11

; <label>:111:                                    ; preds = %107
  %112 = call i8* @parse_charset(i8* %109)
  %113 = icmp ne i8* %112, null
  br i1 %113, label %114, label %._crit_edge11

; <label>:114:                                    ; preds = %111
  %115 = load i8*, i8** @meta_charset, align 8
  call void @free(i8* %115) #8
  store i8* null, i8** @meta_charset, align 8
  store i8* %112, i8** @meta_charset, align 8
  br label %._crit_edge11

; <label>:116:                                    ; preds = %3, %103, %101
  %117 = icmp ne i8* %6, null
  br i1 %117, label %118, label %._crit_edge11

; <label>:118:                                    ; preds = %116
  %119 = getelementptr [7 x i8], [7 x i8]* @.str.48.473, i32 0, i32 0
  %120 = call i32 @c_strcasecmp(i8* %6, i8* %119) #14
  %121 = icmp eq i32 0, %120
  br i1 %121, label %122, label %._crit_edge11

; <label>:122:                                    ; preds = %118
  %123 = getelementptr [8 x i8], [8 x i8]* @.str.46.444, i32 0, i32 0
  %124 = call i8* @find_attr(%struct.taginfo* %1, i8* %123, i32* null)
  %125 = icmp ne i8* %124, null
  br i1 %125, label %126, label %._crit_edge11

; <label>:126:                                    ; preds = %122
  %127 = getelementptr [5 x i8], [5 x i8]* @.str.49.474, i32 0, i32 0
  %128 = call i32 @c_strcasecmp(i8* %124, i8* %127) #14
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %132, label %130

; <label>:130:                                    ; preds = %126
  %131 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 4
  store i8 1, i8* %131, align 8
  br label %._crit_edge11

; <label>:132:                                    ; preds = %126
  %133 = load i8, i8* %124, align 1
  %134 = icmp ne i8 %133, 0
  br i1 %134, label %.lr.ph10.preheader, label %._crit_edge11

.lr.ph10.preheader:                               ; preds = %132
  br label %.lr.ph10

.lr.ph10:                                         ; preds = %.lr.ph10.preheader, %163
  %.018 = phi i8* [ %.1, %163 ], [ %124, %.lr.ph10.preheader ]
  call void @unroll_loop(i32 209)
  %135 = getelementptr [7 x i8], [7 x i8]* @.str.50.475, i32 0, i32 0
  %136 = call i64 @strspn(i8* %.018, i8* %135) #14
  %137 = getelementptr inbounds i8, i8* %.018, i64 %136
  %138 = getelementptr [8 x i8], [8 x i8]* @.str.51.476, i32 0, i32 0
  %139 = call i64 @strcspn(i8* %137, i8* %138) #14
  %140 = getelementptr inbounds i8, i8* %137, i64 %139
  %141 = ptrtoint i8* %140 to i64
  %142 = ptrtoint i8* %137 to i64
  %143 = sub i64 %141, %142
  %144 = getelementptr [9 x i8], [9 x i8]* @.str.52.477, i32 0, i32 0
  %145 = call i32 @c_strncasecmp(i8* %137, i8* %144, i64 %143) #14
  %146 = icmp ne i32 %145, 0
  br i1 %146, label %149, label %147

; <label>:147:                                    ; preds = %.lr.ph10
  %148 = getelementptr inbounds %struct.map_context, %struct.map_context* %2, i32 0, i32 4
  store i8 1, i8* %148, align 8
  br label %149

; <label>:149:                                    ; preds = %147, %.lr.ph10
  %150 = load i8, i8* %140, align 1
  %151 = sext i8 %150 to i32
  %152 = icmp eq i32 %151, 44
  br i1 %152, label %153, label %155

; <label>:153:                                    ; preds = %149
  %154 = getelementptr inbounds i8, i8* %140, i32 1
  br label %163

; <label>:155:                                    ; preds = %149
  %156 = call i8* @strchr(i8* %140, i32 44) #14, !track !388
  %157 = icmp ne i8* %156, null
  br i1 %157, label %158, label %160

; <label>:158:                                    ; preds = %155
  %159 = getelementptr inbounds i8, i8* %156, i32 1
  br label %163

; <label>:160:                                    ; preds = %155
  %161 = call i64 @strlen(i8* %137) #14
  %162 = getelementptr inbounds i8, i8* %137, i64 %161
  br label %163

; <label>:163:                                    ; preds = %158, %160, %153
  %.1 = phi i8* [ %154, %153 ], [ %159, %158 ], [ %162, %160 ]
  %164 = load i8, i8* %.1, align 1
  %165 = icmp ne i8 %164, 0
  br i1 %165, label %.lr.ph10, label %._crit_edge11.loopexit

._crit_edge11.loopexit:                           ; preds = %163
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %114, %130, %132, %118, %116, %122, %111, %107, %68, %91, %39, %44, %50, %56, %._crit_edge, %13
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strspn(i8*, i8*) #1

; Function Attrs: nounwind readonly
declare dso_local i64 @strcspn(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.urlpos* @get_urls_file(i8*) #7 {
  %2 = alloca i32, align 4
  %3 = call %struct.file_memory* @wget_read_file(i8* %0)
  %4 = icmp ne %struct.file_memory* %3, null
  br i1 %4, label %10, label %5

; <label>:5:                                      ; preds = %1
  %6 = call i32* @__errno_location() #15
  %7 = load i32, i32* %6, align 4
  %8 = call i8* @strerror(i32 %7) #8
  %9 = getelementptr [8 x i8], [8 x i8]* @.str.6.428, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %9, i8* %0, i8* %8)
  br label %87

; <label>:10:                                     ; preds = %1
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %12 = load i8, i8* %11, align 1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %14, label %19

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %3, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = call i8* @number_to_static_string(i64 %16)
  %18 = getelementptr [22 x i8], [22 x i8]* @.str.7.429, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %18, i8* %0, i8* %17)
  br label %19

; <label>:19:                                     ; preds = %10, %14
  %20 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %3, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %3, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %3, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds i8, i8* %23, i64 %25
  %27 = icmp ult i8* %21, %26
  br i1 %27, label %.lr.ph.preheader, label %.outer._crit_edge

.lr.ph.preheader:                                 ; preds = %19
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.outer
  %.02.ph16 = phi %struct.urlpos* [ %.13, %.outer ], [ null, %.lr.ph.preheader ]
  %.04.ph15 = phi %struct.urlpos* [ %81, %.outer ], [ null, %.lr.ph.preheader ]
  %.05.ph14 = phi i8* [ %.01.lcssa, %.outer ], [ %21, %.lr.ph.preheader ]
  call void @unroll_loop(i32 182)
  br label %28

; <label>:28:                                     ; preds = %.lr.ph, %.backedge
  %.0512 = phi i8* [ %.05.ph14, %.lr.ph ], [ %.01, %.backedge ]
  call void @unroll_loop(i32 210)
  %29 = ptrtoint i8* %26 to i64
  %30 = ptrtoint i8* %.0512 to i64
  %31 = sub i64 %29, %30
  %32 = call i8* @memchr(i8* %.0512, i32 10, i64 %31) #14, !track !389
  %33 = icmp ne i8* %32, null
  %34 = getelementptr inbounds i8, i8* %32, i32 1
  %.01 = select i1 %33, i8* %34, i8* %26
  br label %35

; <label>:35:                                     ; preds = %41, %28
  %.06 = phi i8* [ %.0512, %28 ], [ %43, %41 ]
  call void @unroll_loop(i32 211)
  %36 = icmp ult i8* %.06, %.01
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %35
  %38 = load i8, i8* %.06, align 1
  %39 = sext i8 %38 to i32
  %40 = call zeroext i1 @c_isspace(i32 %39)
  br label %41

; <label>:41:                                     ; preds = %37, %35
  %42 = phi i1 [ false, %35 ], [ %40, %37 ]
  %43 = getelementptr inbounds i8, i8* %.06, i32 1
  br i1 %42, label %35, label %44

; <label>:44:                                     ; preds = %41
  %.06.lcssa = phi i8* [ %.06, %41 ]
  br label %45

; <label>:45:                                     ; preds = %52, %44
  %.1 = phi i8* [ %.01, %44 ], [ %54, %52 ]
  call void @unroll_loop(i32 212)
  %46 = icmp ugt i8* %.1, %.06.lcssa
  br i1 %46, label %47, label %52

; <label>:47:                                     ; preds = %45
  %48 = getelementptr inbounds i8, i8* %.1, i64 -1
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = call zeroext i1 @c_isspace(i32 %50)
  br label %52

; <label>:52:                                     ; preds = %47, %45
  %53 = phi i1 [ false, %45 ], [ %51, %47 ]
  %54 = getelementptr inbounds i8, i8* %.1, i32 -1
  br i1 %53, label %45, label %55

; <label>:55:                                     ; preds = %52
  %.1.lcssa = phi i8* [ %.1, %52 ]
  %56 = icmp eq i8* %.06.lcssa, %.1.lcssa
  br i1 %56, label %.backedge, label %58

.backedge:                                        ; preds = %55, %74
  %57 = icmp ult i8* %.01, %26
  br i1 %57, label %28, label %.outer._crit_edge.loopexit

; <label>:58:                                     ; preds = %55
  %59 = call i8* @strdupdelim(i8* %.06.lcssa, i8* %.1.lcssa)
  %60 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 76
  %61 = load i8*, i8** %60, align 8
  %62 = icmp ne i8* %61, null
  br i1 %62, label %63, label %67

; <label>:63:                                     ; preds = %58
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 76
  %65 = load i8*, i8** %64, align 8
  %66 = call i8* @uri_merge(i8* %65, i8* %59)
  call void @free(i8* %59) #8
  br label %67

; <label>:67:                                     ; preds = %63, %58
  %.07 = phi i8* [ %66, %63 ], [ %59, %58 ]
  %68 = call i8* @rewrite_shorthand_url(i8* %.07)
  %69 = icmp ne i8* %68, null
  br i1 %69, label %70, label %71

; <label>:70:                                     ; preds = %67
  call void @free(i8* %.07) #8
  br label %71

; <label>:71:                                     ; preds = %70, %67
  %.18 = phi i8* [ %68, %70 ], [ %.07, %67 ]
  %72 = call %struct.url* @url_parse(i8* %.18, i32* %2, %struct.iri* null, i1 zeroext false)
  %73 = icmp ne %struct.url* %72, null
  br i1 %73, label %79, label %74

; <label>:74:                                     ; preds = %71
  %75 = load i32, i32* %2, align 4
  %76 = call i8* @url_error(i8* %.18, i32 %75)
  %77 = getelementptr [24 x i8], [24 x i8]* @.str.9.481, i32 0, i32 0
  %78 = call i8* @gettext(i8* %77) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %78, i8* %0, i8* %.18, i8* %76)
  call void @free(i8* %.18) #8
  call void @free(i8* %76) #8
  call void @inform_exit_status(i32 18)
  br label %.backedge

; <label>:79:                                     ; preds = %71
  %.18.lcssa = phi i8* [ %.18, %71 ]
  %.lcssa = phi %struct.url* [ %72, %71 ]
  %.01.lcssa = phi i8* [ %.01, %71 ]
  call void @free(i8* %.18.lcssa) #8
  %80 = call noalias i8* @xcalloc(i64 1, i64 48)
  %81 = bitcast i8* %80 to %struct.urlpos*
  %82 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %81, i32 0, i32 0
  store %struct.url* %.lcssa, %struct.url** %82, align 8
  %83 = icmp ne %struct.urlpos* %.02.ph16, null
  br i1 %83, label %84, label %.outer

; <label>:84:                                     ; preds = %79
  %85 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.04.ph15, i32 0, i32 7
  store %struct.urlpos* %81, %struct.urlpos** %85, align 8
  br label %.outer

.outer:                                           ; preds = %79, %84
  %.13 = phi %struct.urlpos* [ %.02.ph16, %84 ], [ %81, %79 ]
  %86 = icmp ult i8* %.01.lcssa, %26
  br i1 %86, label %.lr.ph, label %.outer._crit_edge.loopexit1

.outer._crit_edge.loopexit:                       ; preds = %.backedge
  %.02.lcssa.ph = phi %struct.urlpos* [ %.02.ph16, %.backedge ]
  br label %.outer._crit_edge

.outer._crit_edge.loopexit1:                      ; preds = %.outer
  %.02.lcssa.ph2 = phi %struct.urlpos* [ %.13, %.outer ]
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer._crit_edge.loopexit1, %.outer._crit_edge.loopexit, %19
  %.02.lcssa = phi %struct.urlpos* [ null, %19 ], [ %.02.lcssa.ph, %.outer._crit_edge.loopexit ], [ %.02.lcssa.ph2, %.outer._crit_edge.loopexit1 ]
  call void @wget_read_file_free(%struct.file_memory* %3)
  br label %87

; <label>:87:                                     ; preds = %.outer._crit_edge, %5
  %.0 = phi %struct.urlpos* [ %.02.lcssa, %.outer._crit_edge ], [ null, %5 ]
  ret %struct.urlpos* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cleanup_html_url() #0 {
  %1 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  %2 = icmp ne %struct.hash_table* %1, null
  br i1 %2, label %3, label %5

; <label>:3:                                      ; preds = %0
  %4 = load %struct.hash_table*, %struct.hash_table** @interesting_tags, align 8
  call void @hash_table_destroy(%struct.hash_table* %4)
  br label %5

; <label>:5:                                      ; preds = %3, %0
  %6 = load %struct.hash_table*, %struct.hash_table** @interesting_attributes, align 8
  %7 = icmp ne %struct.hash_table* %6, null
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %5
  %9 = load %struct.hash_table*, %struct.hash_table** @interesting_attributes, align 8
  call void @hash_table_destroy(%struct.hash_table* %9)
  br label %10

; <label>:10:                                     ; preds = %8, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @extract_param(i8**, %struct.param_token*, %struct.param_token*, i8 signext, i8*) #0 {
  %6 = load i8*, i8** %0, align 8
  %7 = icmp ne i8* %4, null
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %5
  store i8 0, i8* %4, align 1
  br label %9

; <label>:9:                                      ; preds = %8, %5
  br label %10

; <label>:10:                                     ; preds = %10, %9
  %.01 = phi i8* [ %6, %9 ], [ %14, %10 ]
  call void @unroll_loop(i32 213)
  %11 = load i8, i8* %.01, align 1
  %12 = sext i8 %11 to i32
  %13 = call zeroext i1 @c_isspace(i32 %12)
  %14 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %13, label %10, label %15

; <label>:15:                                     ; preds = %10
  %.01.lcssa = phi i8* [ %.01, %10 ]
  %16 = load i8, i8* %.01.lcssa, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %15
  store i8* %.01.lcssa, i8** %0, align 8
  br label %176

; <label>:19:                                     ; preds = %15
  %20 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 0
  store i8* %.01.lcssa, i8** %20, align 8
  br label %21

; <label>:21:                                     ; preds = %38, %19
  %.1 = phi i8* [ %.01.lcssa, %19 ], [ %40, %38 ]
  call void @unroll_loop(i32 214)
  %22 = load i8, i8* %.1, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %38

; <label>:25:                                     ; preds = %21
  %26 = load i8, i8* %.1, align 1
  %27 = sext i8 %26 to i32
  %28 = call zeroext i1 @c_isspace(i32 %27)
  br i1 %28, label %38, label %29

; <label>:29:                                     ; preds = %25
  %30 = load i8, i8* %.1, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp ne i32 %31, 61
  br i1 %32, label %33, label %38

; <label>:33:                                     ; preds = %29
  %34 = load i8, i8* %.1, align 1
  %35 = sext i8 %34 to i32
  %36 = sext i8 %3 to i32
  %37 = icmp ne i32 %35, %36
  br label %38

; <label>:38:                                     ; preds = %33, %29, %25, %21
  %39 = phi i1 [ false, %29 ], [ false, %25 ], [ false, %21 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %.1, i32 1
  br i1 %39, label %21, label %41

; <label>:41:                                     ; preds = %38
  %.1.lcssa = phi i8* [ %.1, %38 ]
  %42 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 1
  store i8* %.1.lcssa, i8** %42, align 8
  %43 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 1
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %44, %46
  br i1 %47, label %176, label %.preheader2

.preheader2:                                      ; preds = %41
  br label %48

; <label>:48:                                     ; preds = %.preheader2, %48
  %.2 = phi i8* [ %52, %48 ], [ %.1.lcssa, %.preheader2 ]
  call void @unroll_loop(i32 215)
  %49 = load i8, i8* %.2, align 1
  %50 = sext i8 %49 to i32
  %51 = call zeroext i1 @c_isspace(i32 %50)
  %52 = getelementptr inbounds i8, i8* %.2, i32 1
  br i1 %51, label %48, label %53

; <label>:53:                                     ; preds = %48
  %.2.lcssa = phi i8* [ %.2, %48 ]
  %54 = load i8, i8* %.2.lcssa, align 1
  %55 = sext i8 %54 to i32
  %56 = sext i8 %3 to i32
  %57 = icmp eq i32 %55, %56
  br i1 %57, label %61, label %58

; <label>:58:                                     ; preds = %53
  %59 = load i8, i8* %.2.lcssa, align 1
  %60 = icmp ne i8 %59, 0
  br i1 %60, label %68, label %61

; <label>:61:                                     ; preds = %58, %53
  %62 = bitcast %struct.param_token* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false)
  %63 = load i8, i8* %.2.lcssa, align 1
  %64 = sext i8 %63 to i32
  %65 = sext i8 %3 to i32
  %66 = icmp eq i32 %64, %65
  %67 = getelementptr inbounds i8, i8* %.2.lcssa, i32 1
  %spec.select = select i1 %66, i8* %67, i8* %.2.lcssa
  store i8* %spec.select, i8** %0, align 8
  br label %176

; <label>:68:                                     ; preds = %58
  %69 = load i8, i8* %.2.lcssa, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp ne i32 %70, 61
  br i1 %71, label %176, label %72

; <label>:72:                                     ; preds = %68
  %73 = getelementptr inbounds i8, i8* %.2.lcssa, i32 1
  br label %74

; <label>:74:                                     ; preds = %74, %72
  %.4 = phi i8* [ %73, %72 ], [ %78, %74 ]
  call void @unroll_loop(i32 216)
  %75 = load i8, i8* %.4, align 1
  %76 = sext i8 %75 to i32
  %77 = call zeroext i1 @c_isspace(i32 %76)
  %78 = getelementptr inbounds i8, i8* %.4, i32 1
  br i1 %77, label %74, label %79

; <label>:79:                                     ; preds = %74
  %.4.lcssa = phi i8* [ %.4, %74 ]
  %80 = load i8, i8* %.4.lcssa, align 1
  %81 = sext i8 %80 to i32
  %82 = icmp eq i32 %81, 34
  br i1 %82, label %83, label %130

; <label>:83:                                     ; preds = %79
  %84 = getelementptr inbounds i8, i8* %.4.lcssa, i32 1
  %85 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 0
  store i8* %84, i8** %85, align 8
  br label %86

; <label>:86:                                     ; preds = %94, %83
  %.5 = phi i8* [ %84, %83 ], [ %96, %94 ]
  call void @unroll_loop(i32 217)
  %87 = load i8, i8* %.5, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %94

; <label>:90:                                     ; preds = %86
  %91 = load i8, i8* %.5, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp ne i32 %92, 34
  br label %94

; <label>:94:                                     ; preds = %90, %86
  %95 = phi i1 [ false, %86 ], [ %93, %90 ]
  %96 = getelementptr inbounds i8, i8* %.5, i32 1
  br i1 %95, label %86, label %97

; <label>:97:                                     ; preds = %94
  %.5.lcssa = phi i8* [ %.5, %94 ]
  %98 = load i8, i8* %.5.lcssa, align 1
  %99 = icmp ne i8 %98, 0
  br i1 %99, label %100, label %176

; <label>:100:                                    ; preds = %97
  %101 = getelementptr inbounds i8, i8* %.5.lcssa, i32 1
  %102 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 1
  store i8* %.5.lcssa, i8** %102, align 8
  br label %103

; <label>:103:                                    ; preds = %103, %100
  %.6 = phi i8* [ %101, %100 ], [ %107, %103 ]
  call void @unroll_loop(i32 218)
  %104 = load i8, i8* %.6, align 1
  %105 = sext i8 %104 to i32
  %106 = call zeroext i1 @c_isspace(i32 %105)
  %107 = getelementptr inbounds i8, i8* %.6, i32 1
  br i1 %106, label %103, label %.preheader

.preheader:                                       ; preds = %103
  %.7.ph = phi i8* [ %.6, %103 ]
  br label %108

; <label>:108:                                    ; preds = %.preheader, %117
  %.7 = phi i8* [ %119, %117 ], [ %.7.ph, %.preheader ]
  call void @unroll_loop(i32 219)
  %109 = load i8, i8* %.7, align 1
  %110 = sext i8 %109 to i32
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %117

; <label>:112:                                    ; preds = %108
  %113 = load i8, i8* %.7, align 1
  %114 = sext i8 %113 to i32
  %115 = sext i8 %3 to i32
  %116 = icmp ne i32 %114, %115
  br label %117

; <label>:117:                                    ; preds = %112, %108
  %118 = phi i1 [ false, %108 ], [ %116, %112 ]
  %119 = getelementptr inbounds i8, i8* %.7, i32 1
  br i1 %118, label %108, label %120

; <label>:120:                                    ; preds = %117
  %.7.lcssa = phi i8* [ %.7, %117 ]
  %121 = load i8, i8* %.7.lcssa, align 1
  %122 = sext i8 %121 to i32
  %123 = sext i8 %3 to i32
  %124 = icmp eq i32 %122, %123
  br i1 %124, label %125, label %127

; <label>:125:                                    ; preds = %120
  %126 = getelementptr inbounds i8, i8* %.7.lcssa, i32 1
  br label %170

; <label>:127:                                    ; preds = %120
  %128 = load i8, i8* %.7.lcssa, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %176, label %170

; <label>:130:                                    ; preds = %79
  %131 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 0
  store i8* %.4.lcssa, i8** %131, align 8
  br label %132

; <label>:132:                                    ; preds = %141, %130
  %.9 = phi i8* [ %.4.lcssa, %130 ], [ %143, %141 ]
  call void @unroll_loop(i32 220)
  %133 = load i8, i8* %.9, align 1
  %134 = sext i8 %133 to i32
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %141

; <label>:136:                                    ; preds = %132
  %137 = load i8, i8* %.9, align 1
  %138 = sext i8 %137 to i32
  %139 = sext i8 %3 to i32
  %140 = icmp ne i32 %138, %139
  br label %141

; <label>:141:                                    ; preds = %136, %132
  %142 = phi i1 [ false, %132 ], [ %140, %136 ]
  %143 = getelementptr inbounds i8, i8* %.9, i32 1
  br i1 %142, label %132, label %144

; <label>:144:                                    ; preds = %141
  %.9.lcssa = phi i8* [ %.9, %141 ]
  %145 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 1
  store i8* %.9.lcssa, i8** %145, align 8
  call void @unroll_loop(i32 221)
  %146 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 1
  %147 = load i8*, i8** %146, align 8
  %148 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = icmp ne i8* %147, %149
  br i1 %150, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %144
  br label %151

; <label>:151:                                    ; preds = %.lr.ph, %158
  %152 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 1
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 -1
  %155 = load i8, i8* %154, align 1
  %156 = sext i8 %155 to i32
  %157 = call zeroext i1 @c_isspace(i32 %156)
  br i1 %157, label %158, label %..critedge_crit_edge3

; <label>:158:                                    ; preds = %151
  %159 = getelementptr inbounds %struct.param_token, %struct.param_token* %2, i32 0, i32 1
  %160 = load i8*, i8** %159, align 8
  %161 = getelementptr inbounds i8, i8* %160, i32 -1
  store i8* %161, i8** %159, align 8
  call void @unroll_loop(i32 221)
  %162 = load i8*, i8** %146, align 8
  %163 = load i8*, i8** %148, align 8
  %164 = icmp ne i8* %162, %163
  br i1 %164, label %151, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %158
  br label %.critedge

..critedge_crit_edge3:                            ; preds = %151
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge3, %..critedge_crit_edge, %144
  %165 = load i8, i8* %.9.lcssa, align 1
  %166 = sext i8 %165 to i32
  %167 = sext i8 %3 to i32
  %168 = icmp eq i32 %166, %167
  %169 = getelementptr inbounds i8, i8* %.9.lcssa, i32 1
  %spec.select1 = select i1 %168, i8* %169, i8* %.9.lcssa
  br label %170

; <label>:170:                                    ; preds = %125, %127, %.critedge
  %.11 = phi i8* [ %spec.select1, %.critedge ], [ %126, %125 ], [ %.7.lcssa, %127 ]
  store i8* %.11, i8** %0, align 8
  %171 = call i32 @modify_param_name(%struct.param_token* %1)
  switch i32 %171, label %175 [
    i32 0, label %176
    i32 2, label %172
  ]

; <label>:172:                                    ; preds = %170
  %173 = icmp ne i8* %4, null
  br i1 %173, label %174, label %175

; <label>:174:                                    ; preds = %172
  store i8 1, i8* %4, align 1
  br label %175

; <label>:175:                                    ; preds = %170, %174, %172
  call void @modify_param_value(%struct.param_token* %2, i32 %171)
  br label %176

; <label>:176:                                    ; preds = %175, %170, %127, %97, %68, %41, %61, %18
  %.0 = phi i1 [ true, %61 ], [ false, %18 ], [ false, %41 ], [ false, %68 ], [ false, %97 ], [ false, %127 ], [ true, %170 ], [ true, %175 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @modify_param_name(%struct.param_token*) #0 {
  %2 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = ptrtoint i8* %5 to i64
  %9 = ptrtoint i8* %7 to i64
  %10 = sub i64 %8, %9
  %11 = call i8* @memchr(i8* %3, i32 42, i64 %10) #14, !track !390
  %12 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = ptrtoint i8* %15 to i64
  %19 = ptrtoint i8* %17 to i64
  %20 = sub i64 %18, %19
  %21 = call i8* @memrchr(i8* %13, i32 42, i64 %20) #14
  %22 = icmp eq i8* %11, null
  br i1 %22, label %32, label %23

; <label>:23:                                     ; preds = %1
  %24 = icmp eq i8* %11, %21
  %25 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 1
  br i1 %24, label %26, label %31

; <label>:26:                                     ; preds = %23
  %27 = load i8*, i8** %25, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 -1
  %29 = icmp eq i8* %28, %11
  %. = select i1 %29, i32 2, i32 1
  %30 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 1
  store i8* %11, i8** %30, align 8
  br label %32

; <label>:31:                                     ; preds = %23
  store i8* %11, i8** %25, align 8
  br label %32

; <label>:32:                                     ; preds = %26, %31, %1
  %.2 = phi i32 [ 0, %1 ], [ %., %26 ], [ 2, %31 ]
  ret i32 %.2
}

; Function Attrs: noinline nounwind uwtable
define internal void @modify_param_value(%struct.param_token*, i32) #0 {
  %3 = icmp eq i32 %1, 2
  br i1 %3, label %4, label %19

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %8 to i64
  %12 = ptrtoint i8* %10 to i64
  %13 = sub i64 %11, %12
  %14 = call i8* @memrchr(i8* %6, i32 39, i64 %13) #14
  %15 = icmp ne i8* %14, null
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %4
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  %18 = getelementptr inbounds %struct.param_token, %struct.param_token* %0, i32 0, i32 0
  store i8* %17, i8** %18, align 8
  br label %19

; <label>:19:                                     ; preds = %4, %16, %2
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i8* @memrchr(i8*, i32, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @http_loop(%struct.url*, %struct.url*, i8**, i8**, i8*, i32*, %struct.url*, %struct.iri*) #0 {
  %9 = alloca %struct.http_stat, align 8, !track !391
  %10 = alloca %struct.stat, align 8, !track !392
  %11 = alloca [256 x i8], align 16
  %12 = alloca i8*, align 8, !track !393
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, null
  %spec.select = select i1 %15, i8 1, i8 0
  %16 = icmp ne i8** %3, null
  br i1 %16, label %17, label %39

; <label>:17:                                     ; preds = %8
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %21, label %39

; <label>:21:                                     ; preds = %17
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %23 = load i8*, i8** %22, align 8
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 45
  br i1 %26, label %27, label %33

; <label>:27:                                     ; preds = %21
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = icmp ne i8 %31, 0
  br i1 %32, label %33, label %37

; <label>:33:                                     ; preds = %27, %21
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %35 = load i8*, i8** %34, align 8
  %36 = call noalias i8* @xstrdup(i8* %35)
  br label %37

; <label>:37:                                     ; preds = %27, %33
  %38 = phi i8* [ %36, %33 ], [ null, %27 ]
  store i8* %38, i8** %3, align 8
  br label %39

; <label>:39:                                     ; preds = %37, %17, %8
  store i8* null, i8** %2, align 8
  %40 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 129
  %41 = load i8, i8* %40, align 1
  %42 = trunc i8 %41 to i1
  br i1 %42, label %43, label %44

; <label>:43:                                     ; preds = %39
  call void @load_cookies()
  br label %44

; <label>:44:                                     ; preds = %43, %39
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 64
  %46 = load i8, i8* %45, align 1
  %47 = trunc i8 %46 to i1
  br i1 %47, label %48, label %55

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %50 = load i8*, i8** %49, align 8
  %51 = call zeroext i1 @has_wildcards_p(i8* %50)
  br i1 %51, label %52, label %55

; <label>:52:                                     ; preds = %48
  %53 = getelementptr [43 x i8], [43 x i8]* @.str.484, i32 0, i32 0
  %54 = call i8* @gettext(i8* %53) #8, !track !394
  call void @logputs(i32 0, i8* %54)
  br label %55

; <label>:55:                                     ; preds = %52, %48, %44
  %56 = bitcast %struct.http_stat* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 144, i1 false)
  %57 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 12
  store i8* %4, i8** %57, align 8
  %58 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %59 = load i8*, i8** %58, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %61, label %66

; <label>:61:                                     ; preds = %55
  %62 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %63 = load i8*, i8** %62, align 8
  %64 = call noalias i8* @xstrdup(i8* %63)
  %65 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  store i8* %64, i8** %65, align 8
  br label %76

; <label>:66:                                     ; preds = %55
  %67 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 147
  %68 = load i8, i8* %67, align 4
  %69 = trunc i8 %68 to i1
  br i1 %69, label %76, label %70

; <label>:70:                                     ; preds = %66
  %71 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 152
  %72 = load i8, i8* %71, align 8
  %73 = trunc i8 %72 to i1
  %. = select i1 %73, %struct.url* %0, %struct.url* %1
  %74 = call i8* @url_file_name(%struct.url* %., i8* null)
  %75 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  store i8* %74, i8** %75, align 8
  br label %76

; <label>:76:                                     ; preds = %66, %70, %61
  %.138 = phi i8 [ 1, %61 ], [ 0, %66 ], [ 1, %70 ]
  %77 = trunc i8 %.138 to i1
  br i1 %77, label %78, label %93

; <label>:78:                                     ; preds = %76
  %79 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %80 = load i8*, i8** %79, align 8
  %81 = call zeroext i1 @file_exists_p(i8* %80)
  br i1 %81, label %82, label %93

; <label>:82:                                     ; preds = %78
  %83 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %84 = load i8, i8* %83, align 2
  %85 = trunc i8 %84 to i1
  br i1 %85, label %86, label %93

; <label>:86:                                     ; preds = %82
  %87 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %88 = load i8*, i8** %87, align 8
  %89 = icmp ne i8* %88, null
  br i1 %89, label %93, label %90

; <label>:90:                                     ; preds = %86
  %91 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %92 = load i8*, i8** %91, align 8
  call void @get_file_flags(i8* %92, i32* %5)
  br label %.loopexit

; <label>:93:                                     ; preds = %86, %82, %78, %76
  store i32 0, i32* %5, align 4
  %94 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %95 = load i8, i8* %94, align 8
  %96 = trunc i8 %95 to i1
  %spec.select1 = select i1 %96, i8 1, i8 0
  %97 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 147
  %98 = load i8, i8* %97, align 4
  %99 = trunc i8 %98 to i1
  %100 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %101 = load i8, i8* %100, align 1
  %102 = trunc i8 %101 to i1
  %spec.select2 = select i1 %102, i8 1, i8 %spec.select1
  %.18 = select i1 %99, i8 %spec.select2, i8 %spec.select1
  %103 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %104 = load i8, i8* %103, align 4
  %105 = trunc i8 %104 to i1
  br i1 %105, label %106, label %132

; <label>:106:                                    ; preds = %93
  %107 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 96
  %108 = load i8, i8* %107, align 1
  %109 = trunc i8 %108 to i1
  br i1 %109, label %110, label %123

; <label>:110:                                    ; preds = %106
  %111 = trunc i8 %.18 to i1
  br i1 %111, label %123, label %112

; <label>:112:                                    ; preds = %110
  %113 = trunc i8 %.138 to i1
  br i1 %113, label %114, label %123

; <label>:114:                                    ; preds = %112
  %115 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %116 = load i8*, i8** %115, align 8
  %117 = call zeroext i1 @file_exists_p(i8* %116)
  br i1 %117, label %118, label %123

; <label>:118:                                    ; preds = %114
  %119 = load i32, i32* %5, align 4
  %120 = or i32 %119, 128
  store i32 %120, i32* %5, align 4
  %121 = call i32 @set_file_timestamp(%struct.http_stat* %9)
  %122 = icmp ne i32 %121, 25
  br i1 %122, label %763, label %132

; <label>:123:                                    ; preds = %114, %112, %110, %106
  %124 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 147
  %125 = load i8, i8* %124, align 4
  %126 = trunc i8 %125 to i1
  br i1 %126, label %131, label %127

; <label>:127:                                    ; preds = %123
  %128 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %129 = load i8*, i8** %128, align 8
  %130 = call zeroext i1 @file_exists_p(i8* %129)
  br i1 %130, label %131, label %132

; <label>:131:                                    ; preds = %127, %123
  br label %132

; <label>:132:                                    ; preds = %118, %131, %127, %93
  %.411 = phi i8 [ %.18, %93 ], [ %.18, %118 ], [ 1, %131 ], [ %.18, %127 ]
  br label %133

; <label>:133:                                    ; preds = %742, %132
  %.239 = phi i8 [ %.138, %132 ], [ %.340, %742 ]
  %.031 = phi i8 [ 0, %132 ], [ %.536, %742 ]
  %.028 = phi i8 [ 0, %132 ], [ %.230, %742 ]
  %.026 = phi i32 [ 0, %132 ], [ %.127, %742 ]
  %.019 = phi i32 [ 37, %132 ], [ %.524, %742 ]
  %.012 = phi i64 [ -1, %132 ], [ %.8, %742 ]
  %.15 = phi i8 [ %spec.select, %132 ], [ %.6, %742 ]
  call void @unroll_loop(i32 222)
  %134 = add nsw i32 %.026, 1
  call void @sleep_between_retrievals(i32 %134)
  %135 = call i64 @time(i64* null) #8
  %136 = call i8* @datetime_str(i64 %135)
  %137 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %138 = load i8, i8* %137, align 8
  %139 = trunc i8 %138 to i1
  br i1 %139, label %140, label %145

; <label>:140:                                    ; preds = %133
  %141 = trunc i8 %.028 to i1
  br i1 %141, label %145, label %142

; <label>:142:                                    ; preds = %140
  %143 = getelementptr [51 x i8], [51 x i8]* @.str.1.485, i32 0, i32 0
  %144 = call i8* @gettext(i8* %143) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %144)
  br label %145

; <label>:145:                                    ; preds = %142, %140, %133
  %146 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %147 = load i32, i32* %146, align 8
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %162

; <label>:149:                                    ; preds = %145
  %150 = call i8* @url_string(%struct.url* %0, i32 1)
  %151 = icmp sgt i32 %134, 1
  br i1 %151, label %152, label %159

; <label>:152:                                    ; preds = %149
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i32 0, i32 0
  %154 = getelementptr [10 x i8], [10 x i8]* @.str.2.486, i32 0, i32 0
  %155 = call i8* @gettext(i8* %154) #8
  %156 = call i32 (i8*, i8*, ...) @sprintf(i8* %153, i8* %155, i32 %134) #8
  %157 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i32 0, i32 0
  %158 = getelementptr [16 x i8], [16 x i8]* @.str.3.487, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %158, i8* %136, i8* %157, i8* %150)
  br label %161

; <label>:159:                                    ; preds = %149
  %160 = getelementptr [12 x i8], [12 x i8]* @.str.4.488, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %160, i8* %136, i8* %150)
  br label %161

; <label>:161:                                    ; preds = %152, %159
  call void @free(i8* %150) #8
  br label %162

; <label>:162:                                    ; preds = %161, %145
  %163 = trunc i8 %.411 to i1
  br i1 %163, label %164, label %169

; <label>:164:                                    ; preds = %162
  %165 = trunc i8 %.028 to i1
  br i1 %165, label %169, label %166

; <label>:166:                                    ; preds = %164
  %167 = load i32, i32* %5, align 4
  %168 = or i32 %167, 4
  store i32 %168, i32* %5, align 4
  br label %172

; <label>:169:                                    ; preds = %164, %162
  %170 = load i32, i32* %5, align 4
  %171 = and i32 %170, -5
  store i32 %171, i32* %5, align 4
  br label %172

; <label>:172:                                    ; preds = %169, %166
  %173 = trunc i8 %.15 to i1
  br i1 %173, label %174, label %178

; <label>:174:                                    ; preds = %172
  %175 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 2
  store i64 %176, i64* %177, align 8
  br label %214

; <label>:178:                                    ; preds = %172
  %179 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  %180 = load i64, i64* %179, align 8
  %181 = icmp sge i64 %180, 0
  br i1 %181, label %182, label %186

; <label>:182:                                    ; preds = %178
  %183 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 2
  store i64 %184, i64* %185, align 8
  br label %214

; <label>:186:                                    ; preds = %178
  %187 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %188 = load i8, i8* %187, align 1
  %189 = trunc i8 %188 to i1
  br i1 %189, label %190, label %206

; <label>:190:                                    ; preds = %186
  %191 = trunc i8 %.239 to i1
  br i1 %191, label %192, label %206

; <label>:192:                                    ; preds = %190
  %193 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %194 = load i8*, i8** %193, align 8
  %195 = call i32 @stat(i8* %194, %struct.stat* %10) #8
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %206

; <label>:197:                                    ; preds = %192
  %198 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 3
  %199 = load i32, i32* %198, align 8
  %200 = and i32 %199, 61440
  %201 = icmp eq i32 %200, 32768
  br i1 %201, label %202, label %206

; <label>:202:                                    ; preds = %197
  %203 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 8
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 2
  store i64 %204, i64* %205, align 8
  br label %214

; <label>:206:                                    ; preds = %197, %192, %190, %186
  %207 = icmp sgt i32 %134, 1
  br i1 %207, label %208, label %212

; <label>:208:                                    ; preds = %206
  %209 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %210 = load i64, i64* %209, align 8
  %211 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 2
  store i64 %210, i64* %211, align 8
  br label %214

; <label>:212:                                    ; preds = %206
  %213 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 2
  store i64 0, i64* %213, align 8
  br label %214

; <label>:214:                                    ; preds = %182, %208, %212, %202, %174
  %215 = icmp ne %struct.url* %6, null
  %216 = icmp sgt i32 %134, 1
  %or.cond = and i1 %215, %216
  br i1 %or.cond, label %221, label %217

; <label>:217:                                    ; preds = %214
  %218 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 71
  %219 = load i8, i8* %218, align 2
  %220 = trunc i8 %219 to i1
  br i1 %220, label %224, label %221

; <label>:221:                                    ; preds = %214, %217
  %222 = load i32, i32* %5, align 4
  %223 = or i32 %222, 8
  store i32 %223, i32* %5, align 4
  br label %227

; <label>:224:                                    ; preds = %217
  %225 = load i32, i32* %5, align 4
  %226 = and i32 %225, -9
  store i32 %226, i32* %5, align 4
  br label %227

; <label>:227:                                    ; preds = %224, %221
  %228 = call i32 @gethttp(%struct.url* %0, %struct.http_stat* %9, i32* %5, %struct.url* %6, %struct.iri* %7, i32 %134)
  %229 = call i64 @time(i64* null) #8
  %230 = call i8* @datetime_str(i64 %229)
  %231 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 5
  %232 = load i8*, i8** %231, align 8
  %233 = icmp ne i8* %232, null
  br i1 %233, label %234, label %238

; <label>:234:                                    ; preds = %227
  %235 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 5
  %236 = load i8*, i8** %235, align 8
  %237 = call noalias i8* @xstrdup(i8* %236)
  store i8* %237, i8** %2, align 8
  br label %238

; <label>:238:                                    ; preds = %234, %227
  switch i32 %228, label %290 [
    i32 24, label %239
    i32 22, label %239
    i32 2, label %239
    i32 3, label %239
    i32 36, label %239
    i32 44, label %239
    i32 39, label %239
    i32 20, label %239
    i32 23, label %239
    i32 21, label %242
    i32 19, label %242
    i32 1, label %.loopexit.loopexit
    i32 5, label %.loopexit.loopexit
    i32 41, label %.loopexit.loopexit
    i32 45, label %.loopexit.loopexit
    i32 33, label %.loopexit.loopexit
    i32 46, label %.loopexit.loopexit
    i32 38, label %.loopexit.loopexit
    i32 51, label %.loopexit.loopexit
    i32 50, label %252
    i32 42, label %256
    i32 52, label %260
    i32 53, label %264
    i32 54, label %264
    i32 4, label %268
    i32 47, label %271
    i32 6, label %281
    i32 48, label %281
    i32 34, label %289
    i32 35, label %291
  ]

; <label>:239:                                    ; preds = %238, %238, %238, %238, %238, %238, %238, %238, %238
  %240 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %241 = load i32, i32* %240, align 8
  call void @printwhat(i32 %134, i32 %241)
  br label %742

; <label>:242:                                    ; preds = %238, %238
  %.lcssa80 = phi i32 [ %228, %238 ], [ %228, %238 ]
  %.lcssa62 = phi i8* [ %230, %238 ], [ %230, %238 ]
  %.lcssa44 = phi i32 [ %134, %238 ], [ %134, %238 ]
  %243 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %243)
  %244 = getelementptr [26 x i8], [26 x i8]* @.str.6.490, i32 0, i32 0
  %245 = call i8* @gettext(i8* %244) #8
  %246 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %247 = load i8*, i8** %246, align 8
  %248 = call i8* @quote(i8* %247)
  %249 = call i32* @__errno_location() #15
  %250 = load i32, i32* %249, align 4
  %251 = call i8* @strerror(i32 %250) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %245, i8* %248, i8* %251)
  br label %.loopexit

; <label>:252:                                    ; preds = %238
  %.lcssa82 = phi i32 [ %228, %238 ]
  %253 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %253)
  %254 = getelementptr [50 x i8], [50 x i8]* @.str.7.491, i32 0, i32 0
  %255 = call i8* @gettext(i8* %254) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %255)
  br label %.loopexit

; <label>:256:                                    ; preds = %238
  %.lcssa83 = phi i32 [ %228, %238 ]
  %257 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %257)
  %258 = getelementptr [42 x i8], [42 x i8]* @.str.8.492, i32 0, i32 0
  %259 = call i8* @gettext(i8* %258) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %259)
  br label %.loopexit

; <label>:260:                                    ; preds = %238
  %.lcssa84 = phi i32 [ %228, %238 ]
  %261 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %261)
  %262 = getelementptr [28 x i8], [28 x i8]* @.str.9.493, i32 0, i32 0
  %263 = call i8* @gettext(i8* %262) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %263)
  br label %.loopexit

; <label>:264:                                    ; preds = %238, %238
  %.lcssa85 = phi i32 [ %228, %238 ], [ %228, %238 ]
  %265 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %265)
  %266 = getelementptr [38 x i8], [38 x i8]* @.str.10.494, i32 0, i32 0
  %267 = call i8* @gettext(i8* %266) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %267)
  br label %.loopexit

; <label>:268:                                    ; preds = %238
  %.lcssa86 = phi i32 [ %228, %238 ]
  %269 = getelementptr [37 x i8], [37 x i8]* @.str.11.495, i32 0, i32 0
  %270 = call i8* @gettext(i8* %269) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %270)
  br label %.loopexit

; <label>:271:                                    ; preds = %238
  %.lcssa87 = phi i32 [ %228, %238 ]
  %272 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %272)
  %273 = getelementptr [24 x i8], [24 x i8]* @.str.12.496, i32 0, i32 0
  %274 = call i8* @gettext(i8* %273) #8
  %275 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %276 = load i8*, i8** %275, align 8
  %277 = call i8* @quote(i8* %276)
  %278 = call i32* @__errno_location() #15
  %279 = load i32, i32* %278, align 4
  %280 = call i8* @strerror(i32 %279) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %274, i8* %277, i8* %280)
  br label %.loopexit

; <label>:281:                                    ; preds = %238, %238
  %.lcssa88 = phi i32 [ %228, %238 ], [ %228, %238 ]
  %282 = load i8*, i8** %2, align 8
  %283 = icmp ne i8* %282, null
  br i1 %283, label %.loopexit, label %284

; <label>:284:                                    ; preds = %281
  %285 = getelementptr [43 x i8], [43 x i8]* @.str.13.497, i32 0, i32 0
  %286 = call i8* @gettext(i8* %285) #8
  %287 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 8
  %288 = load i32, i32* %287, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %286, i32 %288)
  br label %.loopexit

; <label>:289:                                    ; preds = %238
  br label %.loopexit

; <label>:290:                                    ; preds = %238
  call void @abort() #16
  unreachable

; <label>:291:                                    ; preds = %238
  %292 = load i32, i32* %5, align 4
  %293 = and i32 %292, 2
  %294 = icmp ne i32 %293, 0
  br i1 %294, label %339, label %295

; <label>:295:                                    ; preds = %291
  %296 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %297 = load i32, i32* %296, align 8
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %302, label %299

; <label>:299:                                    ; preds = %295
  %300 = call i8* @url_string(%struct.url* %0, i32 1)
  %301 = getelementptr [5 x i8], [5 x i8]* @.str.14.498, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 2, i8* %301, i8* %300)
  br label %302

; <label>:302:                                    ; preds = %299, %295
  %.02 = phi i8* [ null, %295 ], [ %300, %299 ]
  %303 = load i32, i32* %5, align 4
  %304 = and i32 %303, 4
  %305 = icmp ne i32 %304, 0
  br i1 %305, label %306, label %314

; <label>:306:                                    ; preds = %302
  %307 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 8
  %308 = load i32, i32* %307, align 8
  %309 = icmp eq i32 %308, 500
  br i1 %309, label %742, label %310

; <label>:310:                                    ; preds = %306
  %311 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 8
  %312 = load i32, i32* %311, align 8
  %313 = icmp eq i32 %312, 501
  br i1 %313, label %742, label %314

; <label>:314:                                    ; preds = %310, %302
  %.lcssa72 = phi i8* [ %230, %310 ], [ %230, %302 ]
  %.02.lcssa = phi i8* [ %.02, %310 ], [ %.02, %302 ]
  %315 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %316 = load i8, i8* %315, align 8
  %317 = trunc i8 %316 to i1
  br i1 %317, label %318, label %329

; <label>:318:                                    ; preds = %314
  %319 = getelementptr inbounds %struct.iri, %struct.iri* %7, i32 0, i32 3
  %320 = load i8, i8* %319, align 8
  %321 = trunc i8 %320 to i1
  br i1 %321, label %329, label %322

; <label>:322:                                    ; preds = %318
  %323 = icmp ne i8* %.02.lcssa, null
  br i1 %323, label %326, label %324

; <label>:324:                                    ; preds = %322
  %325 = call i8* @url_string(%struct.url* %0, i32 1)
  br label %326

; <label>:326:                                    ; preds = %324, %322
  %.13 = phi i8* [ %.02.lcssa, %322 ], [ %325, %324 ]
  call void @nonexisting_url(i8* %.13)
  %327 = getelementptr [46 x i8], [46 x i8]* @.str.15.499, i32 0, i32 0
  %328 = call i8* @gettext(i8* %327) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %328)
  br label %337

; <label>:329:                                    ; preds = %318, %314
  %330 = getelementptr [18 x i8], [18 x i8]* @.str.16.500, i32 0, i32 0
  %331 = call i8* @gettext(i8* %330) #8
  %332 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 8
  %333 = load i32, i32* %332, align 8
  %334 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 7
  %335 = load i8*, i8** %334, align 8
  %336 = call i8* @quotearg_style(i32 7, i8* %335)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %331, i8* %.lcssa72, i32 %333, i8* %336)
  br label %337

; <label>:337:                                    ; preds = %326, %329
  %.2 = phi i8* [ %.02.lcssa, %329 ], [ %.13, %326 ]
  %338 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %338)
  call void @free(i8* %.2) #8
  br label %.loopexit

; <label>:339:                                    ; preds = %291
  %340 = trunc i8 %.028 to i1
  br i1 %340, label %341, label %349

; <label>:341:                                    ; preds = %339
  %342 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %343 = load i8, i8* %342, align 8
  %344 = trunc i8 %343 to i1
  br i1 %344, label %345, label %478

; <label>:345:                                    ; preds = %341
  %346 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %347 = load i8, i8* %346, align 1
  %348 = trunc i8 %347 to i1
  br i1 %348, label %478, label %349

; <label>:349:                                    ; preds = %345, %339
  %350 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %351 = load i8, i8* %350, align 4
  %352 = trunc i8 %351 to i1
  br i1 %352, label %353, label %360

; <label>:353:                                    ; preds = %349
  %354 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 6
  %355 = load i8*, i8** %354, align 8
  %356 = icmp ne i8* %355, null
  br i1 %356, label %360, label %357

; <label>:357:                                    ; preds = %353
  %358 = getelementptr [57 x i8], [57 x i8]* @.str.17.501, i32 0, i32 0
  %359 = call i8* @gettext(i8* %358) #8, !track !395
  call void @logputs(i32 1, i8* %359)
  br label %376

; <label>:360:                                    ; preds = %353, %349
  %361 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 6
  %362 = load i8*, i8** %361, align 8
  %363 = icmp ne i8* %362, null
  br i1 %363, label %364, label %376

; <label>:364:                                    ; preds = %360
  %365 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 6
  %366 = load i8*, i8** %365, align 8
  %367 = call i64 @http_atotm(i8* %366)
  %368 = icmp eq i64 %367, -1
  br i1 %368, label %369, label %372

; <label>:369:                                    ; preds = %364
  %370 = getelementptr [53 x i8], [53 x i8]* @.str.18.504, i32 0, i32 0
  %371 = call i8* @gettext(i8* %370) #8, !track !396
  call void @logputs(i32 0, i8* %371)
  br label %372

; <label>:372:                                    ; preds = %369, %364
  %373 = load i32, i32* %5, align 4
  %374 = and i32 %373, 4
  %375 = icmp ne i32 %374, 0
  %spec.select3 = select i1 %375, i8 1, i8 %.031
  br label %376

; <label>:376:                                    ; preds = %360, %372, %357
  %.334 = phi i8 [ %.031, %357 ], [ %spec.select3, %372 ], [ %.031, %360 ]
  %.214 = phi i64 [ %.012, %357 ], [ %367, %372 ], [ %.012, %360 ]
  %377 = trunc i8 %.411 to i1
  br i1 %377, label %378, label %478

; <label>:378:                                    ; preds = %376
  %379 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %380 = load i8, i8* %379, align 4
  %381 = trunc i8 %380 to i1
  br i1 %381, label %382, label %424

; <label>:382:                                    ; preds = %378
  %383 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 16
  %384 = load i8*, i8** %383, align 8
  %385 = icmp ne i8* %384, null
  br i1 %385, label %386, label %422

; <label>:386:                                    ; preds = %382
  %387 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 6
  %388 = load i8*, i8** %387, align 8
  %389 = icmp ne i8* %388, null
  %390 = icmp ne i64 %.214, -1
  %or.cond4 = and i1 %389, %390
  br i1 %or.cond4, label %391, label %422

; <label>:391:                                    ; preds = %386
  %392 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 18
  %393 = load i64, i64* %392, align 8
  %394 = icmp sge i64 %393, %.214
  br i1 %394, label %395, label %417

; <label>:395:                                    ; preds = %391
  %396 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %397 = load i64, i64* %396, align 8
  %398 = icmp eq i64 %397, -1
  br i1 %398, label %405, label %399

; <label>:399:                                    ; preds = %395
  %400 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 17
  %401 = load i64, i64* %400, align 8
  %402 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %403 = load i64, i64* %402, align 8
  %404 = icmp eq i64 %401, %403
  br i1 %404, label %405, label %411

; <label>:405:                                    ; preds = %399, %395
  %406 = getelementptr [61 x i8], [61 x i8]* @.str.19.505, i32 0, i32 0
  %407 = call i8* @gettext(i8* %406) #8
  %408 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 16
  %409 = load i8*, i8** %408, align 8
  %410 = call i8* @quote(i8* %409)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %407, i8* %410)
  br label %.loopexit

; <label>:411:                                    ; preds = %399
  %412 = getelementptr [50 x i8], [50 x i8]* @.str.20.506, i32 0, i32 0
  %413 = call i8* @gettext(i8* %412) #8
  %414 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 17
  %415 = load i64, i64* %414, align 8
  %416 = call i8* @number_to_static_string(i64 %415)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %413, i8* %416)
  br label %420

; <label>:417:                                    ; preds = %391
  %418 = getelementptr [35 x i8], [35 x i8]* @.str.21.507, i32 0, i32 0
  %419 = call i8* @gettext(i8* %418) #8, !track !397
  call void @logputs(i32 0, i8* %419)
  br label %420

; <label>:420:                                    ; preds = %417, %411
  %.26 = phi i8 [ %.15, %411 ], [ 1, %417 ]
  %421 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %421)
  br label %422

; <label>:422:                                    ; preds = %386, %420, %382
  %.4 = phi i8 [ %.15, %382 ], [ %.26, %420 ], [ %.15, %386 ]
  %423 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 15
  store i8 1, i8* %423, align 1
  br label %424

; <label>:424:                                    ; preds = %422, %378
  %.5 = phi i8 [ %.4, %422 ], [ %.15, %378 ]
  %425 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %426 = load i8, i8* %425, align 8
  %427 = trunc i8 %426 to i1
  br i1 %427, label %428, label %469

; <label>:428:                                    ; preds = %424
  %429 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %430 = load i8, i8* %429, align 1
  %431 = trunc i8 %430 to i1
  %432 = load i32, i32* %5, align 4
  %433 = and i32 %432, 1
  %434 = icmp ne i32 %433, 0
  br i1 %431, label %435, label %442

; <label>:435:                                    ; preds = %428
  br i1 %434, label %436, label %439

; <label>:436:                                    ; preds = %435
  %437 = getelementptr [79 x i8], [79 x i8]* @.str.22.508, i32 0, i32 0
  %438 = call i8* @gettext(i8* %437) #8, !track !398
  call void @logputs(i32 0, i8* %438)
  br label %449

; <label>:439:                                    ; preds = %435
  %440 = getelementptr [70 x i8], [70 x i8]* @.str.23.509, i32 0, i32 0
  %441 = call i8* @gettext(i8* %440) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %441)
  br label %449

; <label>:442:                                    ; preds = %428
  br i1 %434, label %443, label %446

; <label>:443:                                    ; preds = %442
  %444 = getelementptr [99 x i8], [99 x i8]* @.str.24.510, i32 0, i32 0
  %445 = call i8* @gettext(i8* %444) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %445)
  br label %449

; <label>:446:                                    ; preds = %442
  %447 = getelementptr [22 x i8], [22 x i8]* @.str.25.511, i32 0, i32 0
  %448 = call i8* @gettext(i8* %447) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %448)
  br label %449

; <label>:449:                                    ; preds = %443, %446, %436, %439
  %.322 = phi i32 [ %.019, %436 ], [ 25, %439 ], [ 25, %446 ], [ 25, %443 ]
  %.1 = phi i8 [ 0, %436 ], [ 1, %439 ], [ 1, %446 ], [ 1, %443 ]
  %450 = trunc i8 %.1 to i1
  br i1 %450, label %451, label %469

; <label>:451:                                    ; preds = %449
  %.lcssa74 = phi i8* [ %230, %449 ]
  %.322.lcssa = phi i32 [ %.322, %449 ]
  %452 = getelementptr [19 x i8], [19 x i8]* @.str.26.512, i32 0, i32 0
  %453 = call i8* @gettext(i8* %452) #8
  %454 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %455 = load i8*, i8** %454, align 8
  %456 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 8
  %457 = load i32, i32* %456, align 8
  %458 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 9
  %459 = load i8*, i8** %458, align 8
  %460 = icmp ne i8* %459, null
  br i1 %460, label %461, label %465

; <label>:461:                                    ; preds = %451
  %462 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 9
  %463 = load i8*, i8** %462, align 8
  %464 = call i8* @quotearg_style(i32 7, i8* %463)
  br label %467

; <label>:465:                                    ; preds = %451
  %466 = getelementptr [1 x i8], [1 x i8]* @.str.27.513, i32 0, i32 0
  br label %467

; <label>:467:                                    ; preds = %465, %461
  %468 = phi i8* [ %464, %461 ], [ %466, %465 ]
  call void (i32, i8*, ...) @logprintf(i32 2, i8* %453, i8* %.lcssa74, i8* %455, i32 %457, i8* %468)
  br label %.loopexit

; <label>:469:                                    ; preds = %449, %424
  %.423 = phi i32 [ %.019, %424 ], [ %.322, %449 ]
  %470 = load i32, i32* %5, align 4
  %471 = and i32 %470, -5
  store i32 %471, i32* %5, align 4
  %472 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 9
  %473 = load i8*, i8** %472, align 8
  call void @free(i8* %473) #8
  %474 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 9
  store i8* null, i8** %474, align 8
  %475 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 7
  %476 = load i8*, i8** %475, align 8
  call void @free(i8* %476) #8
  %477 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 7
  store i8* null, i8** %477, align 8
  br label %742

; <label>:478:                                    ; preds = %376, %345, %341
  %.435 = phi i8 [ %.031, %345 ], [ %.031, %341 ], [ %.334, %376 ]
  %.129 = phi i8 [ %.028, %345 ], [ %.028, %341 ], [ 1, %376 ]
  %.315 = phi i64 [ %.012, %345 ], [ %.012, %341 ], [ %.214, %376 ]
  %479 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 153
  %480 = load i8, i8* %479, align 1
  %481 = trunc i8 %480 to i1
  %482 = icmp ne i64 %.315, -1
  %or.cond5 = and i1 %481, %482
  br i1 %or.cond5, label %483, label %522

; <label>:483:                                    ; preds = %478
  %484 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %485 = load i64, i64* %484, align 8
  %486 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %487 = load i64, i64* %486, align 8
  %488 = icmp eq i64 %485, %487
  br i1 %488, label %497, label %489

; <label>:489:                                    ; preds = %483
  %490 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 3
  %491 = load i32, i32* %490, align 8
  %492 = icmp eq i32 %491, 0
  br i1 %492, label %493, label %522

; <label>:493:                                    ; preds = %489
  %494 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %495 = load i64, i64* %494, align 8
  %496 = icmp eq i64 %495, -1
  br i1 %496, label %497, label %522

; <label>:497:                                    ; preds = %493, %483
  store i8* null, i8** %12, align 8
  %498 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %499 = load i8*, i8** %498, align 8
  call void @set_local_file(i8** %12, i8* %499)
  %500 = load i8*, i8** %12, align 8
  %501 = icmp ne i8* %500, null
  br i1 %501, label %502, label %522

; <label>:502:                                    ; preds = %497
  %503 = trunc i8 %.435 to i1
  br i1 %503, label %504, label %520

; <label>:504:                                    ; preds = %502
  %505 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 6
  %506 = load i8*, i8** %505, align 8
  %507 = icmp ne i8* %506, null
  br i1 %507, label %508, label %520

; <label>:508:                                    ; preds = %504
  %509 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 6
  %510 = load i8*, i8** %509, align 8
  %511 = getelementptr inbounds i8, i8* %510, i64 0
  %512 = load i8, i8* %511, align 1
  %513 = sext i8 %512 to i32
  %514 = icmp ne i32 %513, 0
  br i1 %514, label %515, label %520

; <label>:515:                                    ; preds = %508
  %516 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 6
  %517 = load i8*, i8** %516, align 8
  %518 = call i64 @http_atotm(i8* %517)
  %519 = icmp ne i64 %518, -1
  %spec.select6 = select i1 %519, i64 %518, i64 %.315
  br label %520

; <label>:520:                                    ; preds = %515, %508, %504, %502
  %.517 = phi i64 [ %spec.select6, %515 ], [ %.315, %508 ], [ %.315, %504 ], [ %.315, %502 ]
  %521 = load i8*, i8** %12, align 8
  call void @touch(i8* %521, i64 %.517)
  br label %522

; <label>:522:                                    ; preds = %497, %520, %493, %489, %478
  %.7 = phi i64 [ %.315, %493 ], [ %.315, %489 ], [ %.315, %478 ], [ %.517, %520 ], [ %.315, %497 ]
  %523 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 10
  %524 = load i64, i64* %523, align 8
  %525 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 11
  %526 = load double, double* %525, align 8
  %527 = call i8* @retr_rate(i64 %524, double %526)
  %528 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 11
  %529 = load double, double* %528, align 8
  %530 = load double, double* @total_download_time, align 8
  %531 = fadd double %530, %529
  store double %531, double* @total_download_time, align 8
  %532 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %533 = load i64, i64* %532, align 8
  %534 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %535 = load i64, i64* %534, align 8
  %536 = icmp eq i64 %533, %535
  br i1 %536, label %537, label %616

; <label>:537:                                    ; preds = %522
  %.lcssa75 = phi i8* [ %230, %522 ]
  %.lcssa57 = phi i32 [ %134, %522 ]
  %.lcssa = phi i8* [ %527, %522 ]
  %538 = load i32, i32* %5, align 4
  %539 = and i32 %538, 2
  %540 = icmp ne i32 %539, 0
  br i1 %540, label %545, label %541

; <label>:541:                                    ; preds = %537
  %542 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 93
  %543 = load i8, i8* %542, align 2
  %544 = trunc i8 %543 to i1
  br i1 %544, label %545, label %600

; <label>:545:                                    ; preds = %541, %537
  %546 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %547 = load i8*, i8** %546, align 8
  %548 = icmp ne i8* %547, null
  br i1 %548, label %549, label %562

; <label>:549:                                    ; preds = %545
  %550 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %551 = load i8*, i8** %550, align 8
  %552 = load i8, i8* %551, align 1
  %553 = sext i8 %552 to i32
  %554 = icmp eq i32 %553, 45
  br i1 %554, label %555, label %562

; <label>:555:                                    ; preds = %549
  %556 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %557 = load i8*, i8** %556, align 8
  %558 = getelementptr inbounds i8, i8* %557, i64 1
  %559 = load i8, i8* %558, align 1
  %560 = icmp ne i8 %559, 0
  %561 = xor i1 %560, true
  br label %562

; <label>:562:                                    ; preds = %549, %555, %545
  %563 = phi i1 [ false, %545 ], [ false, %549 ], [ %561, %555 ]
  %564 = zext i1 %563 to i8
  %565 = trunc i8 %564 to i1
  br i1 %565, label %566, label %569

; <label>:566:                                    ; preds = %562
  %567 = getelementptr [40 x i8], [40 x i8]* @.str.28.514, i32 0, i32 0
  %568 = call i8* @gettext(i8* %567) #8
  br label %572

; <label>:569:                                    ; preds = %562
  %570 = getelementptr [29 x i8], [29 x i8]* @.str.29.515, i32 0, i32 0
  %571 = call i8* @gettext(i8* %570) #8
  br label %572

; <label>:572:                                    ; preds = %569, %566
  %573 = phi i8* [ %568, %566 ], [ %571, %569 ]
  %574 = trunc i8 %564 to i1
  br i1 %574, label %575, label %577

; <label>:575:                                    ; preds = %572
  %576 = getelementptr [1 x i8], [1 x i8]* @.str.27.513, i32 0, i32 0
  br label %581

; <label>:577:                                    ; preds = %572
  %578 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %579 = load i8*, i8** %578, align 8
  %580 = call i8* @quote(i8* %579)
  br label %581

; <label>:581:                                    ; preds = %577, %575
  %582 = phi i8* [ %576, %575 ], [ %580, %577 ]
  %583 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %584 = load i64, i64* %583, align 8
  %585 = call i8* @number_to_static_string(i64 %584)
  %586 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %587 = load i64, i64* %586, align 8
  %588 = call i8* @number_to_static_string(i64 %587)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %573, i8* %.lcssa75, i8* %.lcssa, i8* %582, i8* %585, i8* %588)
  %589 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %590 = load i8*, i8** %589, align 8
  %591 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %592 = load i64, i64* %591, align 8
  %593 = call i8* @number_to_static_string(i64 %592)
  %594 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %595 = load i64, i64* %594, align 8
  %596 = call i8* @number_to_static_string(i64 %595)
  %597 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %598 = load i8*, i8** %597, align 8
  %599 = getelementptr [32 x i8], [32 x i8]* @.str.30.516, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 2, i8* %599, i8* %.lcssa75, i8* %590, i8* %593, i8* %596, i8* %598, i32 %.lcssa57)
  br label %600

; <label>:600:                                    ; preds = %581, %541
  %601 = load i32, i32* @numurls, align 4
  %602 = add nsw i32 %601, 1
  store i32 %602, i32* @numurls, align 4
  %603 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 10
  %604 = load i64, i64* %603, align 8
  %605 = load i64, i64* @total_downloaded_bytes, align 8
  %606 = add nsw i64 %605, %604
  store i64 %606, i64* @total_downloaded_bytes, align 8
  %607 = load i32, i32* %5, align 4
  %608 = and i32 %607, 32
  %609 = icmp ne i32 %608, 0
  %610 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %611 = load i8*, i8** %610, align 8
  br i1 %609, label %612, label %614

; <label>:612:                                    ; preds = %600
  %613 = call i32 @downloaded_file(i32 2, i8* %611)
  br label %.loopexit

; <label>:614:                                    ; preds = %600
  %615 = call i32 @downloaded_file(i32 1, i8* %611)
  br label %.loopexit

; <label>:616:                                    ; preds = %522
  %617 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 3
  %618 = load i32, i32* %617, align 8
  %619 = icmp eq i32 %618, 0
  %620 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %621 = load i64, i64* %620, align 8
  %622 = icmp eq i64 %621, -1
  br i1 %619, label %623, label %718

; <label>:623:                                    ; preds = %616
  br i1 %622, label %624, label %697

; <label>:624:                                    ; preds = %623
  %.lcssa76 = phi i8* [ %230, %623 ]
  %.lcssa58 = phi i32 [ %134, %623 ]
  %.lcssa41 = phi i8* [ %527, %623 ]
  %625 = load i32, i32* %5, align 4
  %626 = and i32 %625, 2
  %627 = icmp ne i32 %626, 0
  br i1 %627, label %632, label %628

; <label>:628:                                    ; preds = %624
  %629 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 93
  %630 = load i8, i8* %629, align 2
  %631 = trunc i8 %630 to i1
  br i1 %631, label %632, label %681

; <label>:632:                                    ; preds = %628, %624
  %633 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %634 = load i8*, i8** %633, align 8
  %635 = icmp ne i8* %634, null
  br i1 %635, label %636, label %649

; <label>:636:                                    ; preds = %632
  %637 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %638 = load i8*, i8** %637, align 8
  %639 = load i8, i8* %638, align 1
  %640 = sext i8 %639 to i32
  %641 = icmp eq i32 %640, 45
  br i1 %641, label %642, label %649

; <label>:642:                                    ; preds = %636
  %643 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %644 = load i8*, i8** %643, align 8
  %645 = getelementptr inbounds i8, i8* %644, i64 1
  %646 = load i8, i8* %645, align 1
  %647 = icmp ne i8 %646, 0
  %648 = xor i1 %647, true
  br label %649

; <label>:649:                                    ; preds = %636, %642, %632
  %650 = phi i1 [ false, %632 ], [ false, %636 ], [ %648, %642 ]
  %651 = zext i1 %650 to i8
  %652 = trunc i8 %651 to i1
  br i1 %652, label %653, label %656

; <label>:653:                                    ; preds = %649
  %654 = getelementptr [37 x i8], [37 x i8]* @.str.31.517, i32 0, i32 0
  %655 = call i8* @gettext(i8* %654) #8
  br label %659

; <label>:656:                                    ; preds = %649
  %657 = getelementptr [26 x i8], [26 x i8]* @.str.32.518, i32 0, i32 0
  %658 = call i8* @gettext(i8* %657) #8
  br label %659

; <label>:659:                                    ; preds = %656, %653
  %660 = phi i8* [ %655, %653 ], [ %658, %656 ]
  %661 = trunc i8 %651 to i1
  br i1 %661, label %662, label %664

; <label>:662:                                    ; preds = %659
  %663 = getelementptr [1 x i8], [1 x i8]* @.str.27.513, i32 0, i32 0
  br label %668

; <label>:664:                                    ; preds = %659
  %665 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %666 = load i8*, i8** %665, align 8
  %667 = call i8* @quote(i8* %666)
  br label %668

; <label>:668:                                    ; preds = %664, %662
  %669 = phi i8* [ %663, %662 ], [ %667, %664 ]
  %670 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %671 = load i64, i64* %670, align 8
  %672 = call i8* @number_to_static_string(i64 %671)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %660, i8* %.lcssa76, i8* %.lcssa41, i8* %669, i8* %672)
  %673 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %674 = load i8*, i8** %673, align 8
  %675 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %676 = load i64, i64* %675, align 8
  %677 = call i8* @number_to_static_string(i64 %676)
  %678 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %679 = load i8*, i8** %678, align 8
  %680 = getelementptr [29 x i8], [29 x i8]* @.str.33.519, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 2, i8* %680, i8* %.lcssa76, i8* %674, i8* %677, i8* %679, i32 %.lcssa58)
  br label %681

; <label>:681:                                    ; preds = %668, %628
  %682 = load i32, i32* @numurls, align 4
  %683 = add nsw i32 %682, 1
  store i32 %683, i32* @numurls, align 4
  %684 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 10
  %685 = load i64, i64* %684, align 8
  %686 = load i64, i64* @total_downloaded_bytes, align 8
  %687 = add nsw i64 %686, %685
  store i64 %687, i64* @total_downloaded_bytes, align 8
  %688 = load i32, i32* %5, align 4
  %689 = and i32 %688, 32
  %690 = icmp ne i32 %689, 0
  %691 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %692 = load i8*, i8** %691, align 8
  br i1 %690, label %693, label %695

; <label>:693:                                    ; preds = %681
  %694 = call i32 @downloaded_file(i32 2, i8* %692)
  br label %.loopexit

; <label>:695:                                    ; preds = %681
  %696 = call i32 @downloaded_file(i32 1, i8* %692)
  br label %.loopexit

; <label>:697:                                    ; preds = %623
  %698 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %699 = load i64, i64* %698, align 8
  %700 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %701 = load i64, i64* %700, align 8
  %702 = icmp slt i64 %699, %701
  br i1 %702, label %703, label %711

; <label>:703:                                    ; preds = %697
  %704 = getelementptr [41 x i8], [41 x i8]* @.str.34.520, i32 0, i32 0
  %705 = call i8* @gettext(i8* %704) #8
  %706 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %707 = load i64, i64* %706, align 8
  %708 = call i8* @number_to_static_string(i64 %707)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %705, i8* %230, i8* %527, i8* %708)
  %709 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %710 = load i32, i32* %709, align 8
  call void @printwhat(i32 %134, i32 %710)
  br label %742

; <label>:711:                                    ; preds = %697
  %712 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %713 = load i64, i64* %712, align 8
  %714 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 2
  %715 = load i64, i64* %714, align 8
  %716 = icmp ne i64 %713, %715
  br i1 %716, label %717, label %.loopexit

; <label>:717:                                    ; preds = %711
  call void @abort() #16
  unreachable

; <label>:718:                                    ; preds = %616
  br i1 %622, label %719, label %729

; <label>:719:                                    ; preds = %718
  %720 = getelementptr [38 x i8], [38 x i8]* @.str.35.521, i32 0, i32 0
  %721 = call i8* @gettext(i8* %720) #8
  %722 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %723 = load i64, i64* %722, align 8
  %724 = call i8* @number_to_static_string(i64 %723)
  %725 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 4
  %726 = load i8*, i8** %725, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %721, i8* %230, i8* %527, i8* %724, i8* %726)
  %727 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %728 = load i32, i32* %727, align 8
  call void @printwhat(i32 %134, i32 %728)
  br label %742

; <label>:729:                                    ; preds = %718
  %730 = getelementptr [42 x i8], [42 x i8]* @.str.36.522, i32 0, i32 0
  %731 = call i8* @gettext(i8* %730) #8
  %732 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 0
  %733 = load i64, i64* %732, align 8
  %734 = call i8* @number_to_static_string(i64 %733)
  %735 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 1
  %736 = load i64, i64* %735, align 8
  %737 = call i8* @number_to_static_string(i64 %736)
  %738 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 4
  %739 = load i8*, i8** %738, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %731, i8* %230, i8* %527, i8* %734, i8* %737, i8* %739)
  %740 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %741 = load i32, i32* %740, align 8
  call void @printwhat(i32 %134, i32 %741)
  br label %742

; <label>:742:                                    ; preds = %306, %310, %729, %719, %703, %469, %239
  %.340 = phi i8 [ %.239, %703 ], [ %.239, %719 ], [ %.239, %729 ], [ 1, %469 ], [ %.239, %239 ], [ %.239, %310 ], [ %.239, %306 ]
  %.536 = phi i8 [ %.435, %703 ], [ %.435, %719 ], [ %.435, %729 ], [ %.334, %469 ], [ %.031, %239 ], [ %.031, %310 ], [ %.031, %306 ]
  %.230 = phi i8 [ %.129, %703 ], [ %.129, %719 ], [ %.129, %729 ], [ 1, %469 ], [ %.028, %239 ], [ 1, %310 ], [ 1, %306 ]
  %.127 = phi i32 [ %134, %703 ], [ %134, %719 ], [ %134, %729 ], [ 0, %469 ], [ %134, %239 ], [ %134, %310 ], [ %134, %306 ]
  %.524 = phi i32 [ %.019, %703 ], [ %.019, %719 ], [ %.019, %729 ], [ %.423, %469 ], [ %.019, %239 ], [ %.019, %310 ], [ %.019, %306 ]
  %.8 = phi i64 [ %.7, %703 ], [ %.7, %719 ], [ %.7, %729 ], [ %.214, %469 ], [ %.012, %239 ], [ %.012, %310 ], [ %.012, %306 ]
  %.6 = phi i8 [ %.15, %703 ], [ %.15, %719 ], [ %.15, %729 ], [ %.5, %469 ], [ %.15, %239 ], [ %.15, %310 ], [ %.15, %306 ]
  %743 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %744 = load i32, i32* %743, align 8
  %745 = icmp ne i32 %744, 0
  %746 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %747 = load i32, i32* %746, align 8
  %748 = icmp slt i32 %.127, %747
  %749 = select i1 %745, i1 %748, i1 true
  br i1 %749, label %133, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %238, %238, %238, %238, %238, %238, %238, %238, %742
  %.625.ph = phi i32 [ %.524, %742 ], [ %228, %238 ], [ %228, %238 ], [ %228, %238 ], [ %228, %238 ], [ %228, %238 ], [ %228, %238 ], [ %228, %238 ], [ %228, %238 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %711, %693, %695, %612, %614, %284, %281, %242, %467, %405, %337, %289, %271, %268, %264, %260, %256, %252, %90
  %.625 = phi i32 [ 25, %405 ], [ %.322.lcssa, %467 ], [ 27, %337 ], [ 25, %289 ], [ %.lcssa87, %271 ], [ %.lcssa86, %268 ], [ %.lcssa85, %264 ], [ %.lcssa84, %260 ], [ %.lcssa83, %256 ], [ %.lcssa82, %252 ], [ 25, %90 ], [ %.lcssa80, %242 ], [ 27, %284 ], [ %.lcssa88, %281 ], [ 25, %614 ], [ 25, %612 ], [ 25, %695 ], [ 25, %693 ], [ 25, %711 ], [ %.625.ph, %.loopexit.loopexit ]
  %750 = icmp eq i32 %.625, 25
  br i1 %750, label %756, label %751

; <label>:751:                                    ; preds = %.loopexit
  %752 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 93
  %753 = load i8, i8* %752, align 2
  %754 = trunc i8 %753 to i1
  %755 = icmp ne i8** %3, null
  %or.cond7 = and i1 %754, %755
  br i1 %or.cond7, label %757, label %762

; <label>:756:                                    ; preds = %.loopexit
  %.old = icmp ne i8** %3, null
  br i1 %.old, label %757, label %762

; <label>:757:                                    ; preds = %756, %751
  %758 = load i8*, i8** %3, align 8
  call void @free(i8* %758) #8
  store i8* null, i8** %3, align 8
  %759 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %9, i32 0, i32 13
  %760 = load i8*, i8** %759, align 8
  %761 = call noalias i8* @xstrdup(i8* %760)
  store i8* %761, i8** %3, align 8
  br label %762

; <label>:762:                                    ; preds = %757, %756, %751
  call void @free_hstat(%struct.http_stat* %9)
  br label %763

; <label>:763:                                    ; preds = %118, %762
  %.0 = phi i32 [ %.625, %762 ], [ %121, %118 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @load_cookies() #0 {
  %1 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  %2 = icmp ne %struct.cookie_jar* %1, null
  br i1 %2, label %5, label %3

; <label>:3:                                      ; preds = %0
  %4 = call %struct.cookie_jar* @cookie_jar_new()
  store %struct.cookie_jar* %4, %struct.cookie_jar** @wget_cookie_jar, align 8
  br label %5

; <label>:5:                                      ; preds = %3, %0
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 130
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, null
  br i1 %8, label %9, label %16

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* @cookies_loaded_p, align 1
  %11 = trunc i8 %10 to i1
  br i1 %11, label %16, label %12

; <label>:12:                                     ; preds = %9
  %13 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 130
  %15 = load i8*, i8** %14, align 8
  call void @cookie_jar_load(%struct.cookie_jar* %13, i8* %15)
  store i8 1, i8* @cookies_loaded_p, align 1
  br label %16

; <label>:16:                                     ; preds = %12, %9, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_file_flags(i8*, i32*) #0 {
  %3 = getelementptr [41 x i8], [41 x i8]* @.str.42.626, i32 0, i32 0
  %4 = call i8* @gettext(i8* %3) #8
  %5 = call i8* @quote(i8* %0)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %4, i8* %5)
  %6 = load i32, i32* %1, align 4
  %7 = or i32 %6, 2
  store i32 %7, i32* %1, align 4
  %8 = call zeroext i1 @has_html_suffix_p(i8* %0)
  br i1 %8, label %9, label %12

; <label>:9:                                      ; preds = %2
  %10 = load i32, i32* %1, align 4
  %11 = or i32 %10, 1
  store i32 %11, i32* %1, align 4
  br label %12

; <label>:12:                                     ; preds = %9, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @set_file_timestamp(%struct.http_stat*) #0 {
  %2 = alloca %struct.stat, align 8, !track !399
  %3 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %4 = load i8*, i8** %3, align 8
  %5 = call i64 @strlen(i8* %4) #14
  %6 = add i64 %5, 6
  %7 = alloca i8, i64 %6, align 16, !track !400
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 97
  %9 = load i8, i8* %8, align 2
  %10 = trunc i8 %9 to i1
  br i1 %10, label %11, label %18

; <label>:11:                                     ; preds = %1
  %12 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %13 = load i8*, i8** %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %13, i64 %5, i1 false), !track !401
  %14 = getelementptr inbounds i8, i8* %7, i64 %5
  %15 = getelementptr [6 x i8], [6 x i8]* @.str.43.625, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 6, i1 false), !track !402
  %16 = call i32 @stat(i8* %7, %struct.stat* %2) #8
  %17 = icmp eq i32 %16, 0
  %spec.select = select i1 %17, i8 1, i8 0
  %spec.select1 = select i1 %17, i8* %7, i8* null
  br label %18

; <label>:18:                                     ; preds = %11, %1
  %.12 = phi i8 [ %spec.select, %11 ], [ 0, %1 ]
  %.1 = phi i8* [ %spec.select1, %11 ], [ null, %1 ]
  %19 = trunc i8 %.12 to i1
  br i1 %19, label %28, label %20

; <label>:20:                                     ; preds = %18
  %21 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @stat(i8* %22, %struct.stat* %2) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %20
  %26 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %27 = load i8*, i8** %26, align 8
  br label %28

; <label>:28:                                     ; preds = %20, %25, %18
  %.3 = phi i8* [ %.1, %18 ], [ %27, %25 ], [ %.1, %20 ]
  %29 = icmp ne i8* %.3, null
  br i1 %29, label %30, label %41

; <label>:30:                                     ; preds = %28
  %31 = call noalias i8* @xstrdup(i8* %.3)
  %32 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 16
  store i8* %31, i8** %32, align 8
  %33 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 8
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 17
  store i64 %34, i64* %35, align 8
  %36 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 12
  %37 = getelementptr inbounds %struct.timeval, %struct.timeval* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 18
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 15
  store i8 1, i8* %40, align 1
  br label %41

; <label>:41:                                     ; preds = %30, %28
  ret i32 25
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gethttp(%struct.url*, %struct.http_stat*, i32*, %struct.url*, %struct.iri*, i32) #0 {
  %7 = alloca %struct.request*, align 8, !track !403
  %8 = alloca i8*, align 8, !track !404
  %9 = alloca i8*, align 8, !track !405
  %10 = alloca i8*, align 8, !track !406
  %11 = alloca %struct.url*, align 8, !track !407
  %12 = alloca %struct._IO_FILE*, align 8, !track !408
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca %struct.response*, align 8, !track !409
  %21 = alloca [512 x i8], align 16, !track !410
  %22 = alloca i8*, align 8, !track !411
  %23 = alloca [21 x i8], align 16, !track !412
  %24 = alloca [48 x i8], align 16
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i8*, align 8, !track !413
  %28 = alloca i8*, align 8, !track !414
  %29 = alloca i8, align 1
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  store %struct.request* null, %struct.request** %7, align 8
  store i32 -1, i32* %15, align 4
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %18, align 1
  store i8 0, i8* %19, align 1
  %33 = load i32, i32* %2, align 4
  %34 = and i32 %33, 4
  %35 = icmp ne i32 %34, 0
  %36 = xor i1 %35, true
  %37 = xor i1 %36, true
  %38 = zext i1 %37 to i8
  %39 = load i32, i32* %2, align 4
  %40 = and i32 %39, 128
  %41 = icmp ne i32 %40, 0
  %42 = xor i1 %41, true
  %43 = xor i1 %42, true
  %44 = zext i1 %43 to i8
  store %struct.response* null, %struct.response** %20, align 8
  store i8* null, i8** %22, align 8
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ne i8* %46, null
  %48 = zext i1 %47 to i8
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 69
  %50 = load i8, i8* %49, align 8
  %51 = trunc i8 %50 to i1
  %52 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %53 = load i8, i8* %52, align 2
  %54 = trunc i8 %53 to i1
  %55 = select i1 %51, i1 %54, i1 true
  %56 = zext i1 %55 to i8
  store i64 0, i64* %25, align 8
  %57 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %65

; <label>:60:                                     ; preds = %6
  %61 = call zeroext i1 @ssl_init()
  br i1 %61, label %65, label %62

; <label>:62:                                     ; preds = %60
  call void @scheme_disable(i32 1)
  %63 = getelementptr [42 x i8], [42 x i8]* @.str.44.528, i32 0, i32 0
  %64 = call i8* @gettext(i8* %63) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %64)
  br label %1267

; <label>:65:                                     ; preds = %60, %6
  %66 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 0
  store i64 0, i64* %66, align 8
  %67 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 1
  store i64 -1, i64* %67, align 8
  %68 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  store i32 -1, i32* %68, align 8
  %69 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 4
  store i8* null, i8** %69, align 8
  %70 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 5
  store i8* null, i8** %70, align 8
  %71 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 6
  %72 = load i8*, i8** %71, align 8
  call void @free(i8* %72) #8
  %73 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 6
  store i8* null, i8** %73, align 8
  %74 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 7
  store i8* null, i8** %74, align 8
  %75 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  store i8* null, i8** %75, align 8
  store %struct.url* %0, %struct.url** %11, align 8
  %76 = trunc i8 %56 to i1
  %77 = call %struct.request* @initialize_request(%struct.url* %0, %struct.http_stat* %1, i32* %2, %struct.url* %3, i1 zeroext %76, i8* %17, i64* %25, i8** %8, i8** %9, i32* %26)
  store %struct.request* %77, %struct.request** %7, align 8
  %78 = load %struct.request*, %struct.request** %7, align 8
  %79 = icmp eq %struct.request* %78, null
  br i1 %79, label %80, label %.preheader16

.preheader16:                                     ; preds = %65
  br label %82

; <label>:80:                                     ; preds = %65
  %81 = load i32, i32* %26, align 4
  br label %1267

; <label>:82:                                     ; preds = %.preheader16, %543
  %.032 = phi %struct._IO_FILE* [ %.133, %543 ], [ null, %.preheader16 ]
  %.029 = phi %struct.ip_address* [ %.231, %543 ], [ null, %.preheader16 ]
  %.024 = phi i64 [ %.5, %543 ], [ -1, %.preheader16 ]
  %.05 = phi i8* [ %.1, %543 ], [ null, %.preheader16 ]
  call void @unroll_loop(i32 224)
  %83 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 129
  %84 = load i8, i8* %83, align 1
  %85 = trunc i8 %84 to i1
  br i1 %85, label %86, label %100

; <label>:86:                                     ; preds = %82
  %87 = load %struct.request*, %struct.request** %7, align 8
  %88 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  %89 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %92 = load i32, i32* %91, align 8
  %93 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq i32 %96, 1
  %98 = call i8* @cookie_header(%struct.cookie_jar* %88, i8* %90, i32 %92, i8* %94, i1 zeroext %97)
  %99 = getelementptr [7 x i8], [7 x i8]* @.str.45.529, i32 0, i32 0
  call void @request_set_header(%struct.request* %87, i8* %99, i8* %98, i32 2)
  br label %100

; <label>:100:                                    ; preds = %86, %82
  %101 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  %102 = load i8**, i8*** %101, align 8
  %103 = icmp ne i8** %102, null
  br i1 %103, label %104, label %._crit_edge

; <label>:104:                                    ; preds = %100
  %105 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  %106 = load i8**, i8*** %105, align 8
  %107 = getelementptr inbounds i8*, i8** %106, i64 0
  %108 = load i8*, i8** %107, align 8
  %109 = icmp ne i8* %108, null
  br i1 %109, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %104
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 225)
  %110 = load %struct.request*, %struct.request** %7, align 8
  %111 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  %112 = load i8**, i8*** %111, align 8
  %113 = getelementptr inbounds i8*, i8** %112, i64 %indvars.iv
  %114 = load i8*, i8** %113, align 8
  call void @request_set_user_header(%struct.request* %110, i8* %114)
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %115 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  %116 = load i8**, i8*** %115, align 8
  %117 = getelementptr inbounds i8*, i8** %116, i64 %indvars.iv.next
  %118 = load i8*, i8** %117, align 8
  %119 = icmp ne i8* %118, null
  br i1 %119, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %104, %100
  store i8* null, i8** %10, align 8
  %120 = icmp ne %struct.url* %3, null
  br i1 %120, label %121, label %123

; <label>:121:                                    ; preds = %._crit_edge
  store %struct.url* %3, %struct.url** %11, align 8
  %122 = load %struct.request*, %struct.request** %7, align 8
  call void @initialize_proxy_configuration(%struct.url* %0, %struct.request* %122, %struct.url* %3, i8** %10)
  br label %123

; <label>:123:                                    ; preds = %121, %._crit_edge
  %124 = trunc i8 %56 to i1
  %spec.select = select i1 %124, i8 0, i8 1
  %125 = trunc i8 %56 to i1
  %126 = call i32 @establish_connection(%struct.url* %0, %struct.url** %11, %struct.http_stat* %1, %struct.url* %3, i8** %10, %struct.request** %7, i8* %19, i1 zeroext %125, i32* %15)
  %127 = icmp ne i32 %126, 25
  br i1 %127, label %.loopexit, label %128

; <label>:128:                                    ; preds = %123
  %129 = trunc i8 %48 to i1
  br i1 %129, label %130, label %152

; <label>:130:                                    ; preds = %128
  %131 = call %struct._IO_FILE* @warc_tempfile()
  %132 = icmp eq %struct._IO_FILE* %131, null
  br i1 %132, label %133, label %145

; <label>:133:                                    ; preds = %130
  %.05.lcssa50 = phi i8* [ %.05, %130 ]
  %134 = load i8, i8* @pconn_active, align 1
  %135 = trunc i8 %134 to i1
  br i1 %135, label %136, label %142

; <label>:136:                                    ; preds = %133
  %137 = load i32, i32* %15, align 4
  %138 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %139 = load i32, i32* %138, align 8
  %140 = icmp eq i32 %137, %139
  br i1 %140, label %141, label %142

; <label>:141:                                    ; preds = %136
  call void @invalidate_persistent()
  br label %144

; <label>:142:                                    ; preds = %136, %133
  %143 = load i32, i32* %15, align 4
  call void @fd_close(i32 %143)
  br label %144

; <label>:144:                                    ; preds = %142, %141
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:145:                                    ; preds = %130
  %146 = icmp ne %struct.url* %3, null
  br i1 %146, label %152, label %147

; <label>:147:                                    ; preds = %145
  %148 = alloca i8, i64 24, align 16, !track !415
  %149 = bitcast i8* %148 to %struct.ip_address*
  %150 = load i32, i32* %15, align 4
  %151 = call zeroext i1 @socket_ip_address(i32 %150, %struct.ip_address* %149, i32 1)
  br label %152

; <label>:152:                                    ; preds = %145, %147, %128
  %.133 = phi %struct._IO_FILE* [ %.032, %128 ], [ %131, %147 ], [ %131, %145 ]
  %.231 = phi %struct.ip_address* [ %.029, %128 ], [ %.029, %145 ], [ %149, %147 ]
  %153 = load %struct.request*, %struct.request** %7, align 8
  %154 = load i32, i32* %15, align 4
  %155 = call i32 @request_send(%struct.request* %153, i32 %154, %struct._IO_FILE* %.133)
  %156 = icmp sge i32 %155, 0
  br i1 %156, label %157, label %204

; <label>:157:                                    ; preds = %152
  %158 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %159 = load i8*, i8** %158, align 8
  %160 = icmp ne i8* %159, null
  br i1 %160, label %161, label %188

; <label>:161:                                    ; preds = %157
  %162 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %163 = load i8, i8* %162, align 1
  %164 = trunc i8 %163 to i1
  br i1 %164, label %165, label %169

; <label>:165:                                    ; preds = %161
  %166 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %167 = load i8*, i8** %166, align 8
  %168 = getelementptr [17 x i8], [17 x i8]* @.str.46.530, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %168, i8* %167)
  br label %169

; <label>:169:                                    ; preds = %161, %165
  %170 = load i32, i32* %15, align 4
  %171 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %172 = load i8*, i8** %171, align 8
  %173 = load i64, i64* %25, align 8
  %174 = trunc i64 %173 to i32
  %175 = call i32 @fd_write(i32 %170, i8* %172, i32 %174, double -1.000000e+00)
  %176 = icmp sge i32 %175, 0
  %177 = icmp ne %struct._IO_FILE* %.133, null
  %or.cond = and i1 %176, %177
  br i1 %or.cond, label %178, label %204

; <label>:178:                                    ; preds = %169
  %179 = call i64 @ftello(%struct._IO_FILE* %.133)
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %181 = load i8*, i8** %180, align 8
  %182 = load i64, i64* %25, align 8
  %183 = call i64 @fwrite(i8* %181, i64 1, i64 %182, %struct._IO_FILE* %.133)
  %184 = trunc i64 %183 to i32
  %185 = sext i32 %184 to i64
  %186 = load i64, i64* %25, align 8
  %187 = icmp ne i64 %185, %186
  %spec.select1 = select i1 %187, i32 -2, i32 %175
  br label %204

; <label>:188:                                    ; preds = %157
  %189 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %190 = load i8*, i8** %189, align 8
  %191 = icmp ne i8* %190, null
  %192 = load i64, i64* %25, align 8
  %193 = icmp ne i64 %192, 0
  %or.cond3 = and i1 %191, %193
  br i1 %or.cond3, label %194, label %204

; <label>:194:                                    ; preds = %188
  %195 = icmp ne %struct._IO_FILE* %.133, null
  br i1 %195, label %196, label %198

; <label>:196:                                    ; preds = %194
  %197 = call i64 @ftello(%struct._IO_FILE* %.133)
  br label %198

; <label>:198:                                    ; preds = %196, %194
  %.226 = phi i64 [ %197, %196 ], [ %.024, %194 ]
  %199 = load i32, i32* %15, align 4
  %200 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %201 = load i8*, i8** %200, align 8
  %202 = load i64, i64* %25, align 8
  %203 = call i32 @body_file_send(i32 %199, i8* %201, i64 %202, %struct._IO_FILE* %.133)
  br label %204

; <label>:204:                                    ; preds = %178, %169, %198, %188, %152
  %.5 = phi i64 [ %.024, %152 ], [ %179, %178 ], [ %.024, %169 ], [ %.226, %198 ], [ %.024, %188 ]
  %.4 = phi i32 [ %155, %152 ], [ %spec.select1, %178 ], [ %175, %169 ], [ %203, %198 ], [ %155, %188 ]
  %205 = icmp slt i32 %.4, 0
  br i1 %205, label %206, label %223

; <label>:206:                                    ; preds = %204
  %.4.lcssa = phi i32 [ %.4, %204 ]
  %.133.lcssa = phi %struct._IO_FILE* [ %.133, %204 ]
  %.05.lcssa51 = phi i8* [ %.05, %204 ]
  %207 = load i8, i8* @pconn_active, align 1
  %208 = trunc i8 %207 to i1
  br i1 %208, label %209, label %215

; <label>:209:                                    ; preds = %206
  %210 = load i32, i32* %15, align 4
  %211 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %212 = load i32, i32* %211, align 8
  %213 = icmp eq i32 %210, %212
  br i1 %213, label %214, label %215

; <label>:214:                                    ; preds = %209
  call void @invalidate_persistent()
  br label %217

; <label>:215:                                    ; preds = %209, %206
  %216 = load i32, i32* %15, align 4
  call void @fd_close(i32 %216)
  br label %217

; <label>:217:                                    ; preds = %215, %214
  store i32 -1, i32* %15, align 4
  %218 = icmp ne %struct._IO_FILE* %.133.lcssa, null
  br i1 %218, label %219, label %221

; <label>:219:                                    ; preds = %217
  %220 = call i32 @fclose(%struct._IO_FILE* %.133.lcssa)
  br label %221

; <label>:221:                                    ; preds = %219, %217
  %222 = icmp eq i32 %.4.lcssa, -2
  %. = select i1 %222, i32 54, i32 44
  br label %1267

; <label>:223:                                    ; preds = %204
  %224 = getelementptr [39 x i8], [39 x i8]* @.str.47.531, i32 0, i32 0
  %225 = call i8* @gettext(i8* %224) #8
  %226 = icmp ne %struct.url* %3, null
  %227 = zext i1 %226 to i64
  %228 = getelementptr [6 x i8], [6 x i8]* @.str.48.532, i32 0, i32 0
  %229 = getelementptr [5 x i8], [5 x i8]* @.str.49.533, i32 0, i32 0
  %230 = select i1 %226, i8* %228, i8* %229
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %225, i8* %230)
  %231 = load i32, i32* %2, align 4
  %232 = and i32 %231, -3
  store i32 %232, i32* %2, align 4
  %233 = trunc i8 %48 to i1
  br i1 %233, label %234, label %257

; <label>:234:                                    ; preds = %223
  %235 = getelementptr inbounds [21 x i8], [21 x i8]* %23, i32 0, i32 0
  %236 = call i8* @warc_timestamp(i8* %235, i64 21)
  %237 = getelementptr inbounds [48 x i8], [48 x i8]* %24, i32 0, i32 0
  call void @warc_uuid_str(i8* %237)
  %238 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %239 = load i8*, i8** %238, align 8
  %240 = getelementptr inbounds [21 x i8], [21 x i8]* %23, i32 0, i32 0
  %241 = getelementptr inbounds [48 x i8], [48 x i8]* %24, i32 0, i32 0
  %242 = call zeroext i1 @warc_write_request_record(i8* %239, i8* %240, i8* %241, %struct.ip_address* %.231, %struct._IO_FILE* %.133, i64 %.5)
  %243 = zext i1 %242 to i8
  %244 = trunc i8 %243 to i1
  br i1 %244, label %257, label %245

; <label>:245:                                    ; preds = %234
  %.05.lcssa52 = phi i8* [ %.05, %234 ]
  %246 = load i8, i8* @pconn_active, align 1
  %247 = trunc i8 %246 to i1
  br i1 %247, label %248, label %254

; <label>:248:                                    ; preds = %245
  %249 = load i32, i32* %15, align 4
  %250 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %251 = load i32, i32* %250, align 8
  %252 = icmp eq i32 %249, %251
  br i1 %252, label %253, label %254

; <label>:253:                                    ; preds = %248
  call void @invalidate_persistent()
  br label %256

; <label>:254:                                    ; preds = %248, %245
  %255 = load i32, i32* %15, align 4
  call void @fd_close(i32 %255)
  br label %256

; <label>:256:                                    ; preds = %254, %253
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:257:                                    ; preds = %234, %223
  br label %258

; <label>:258:                                    ; preds = %337, %257
  call void @unroll_loop(i32 226)
  %259 = load i32, i32* %15, align 4
  %260 = call i8* @read_http_response_head(i32 %259)
  %261 = icmp ne i8* %260, null
  br i1 %261, label %296, label %262

; <label>:262:                                    ; preds = %258
  %.05.lcssa53 = phi i8* [ %.05, %258 ]
  %.lcssa = phi i8* [ %260, %258 ]
  %263 = call i32* @__errno_location() #15
  %264 = load i32, i32* %263, align 4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %280

; <label>:266:                                    ; preds = %262
  %267 = getelementptr [19 x i8], [19 x i8]* @.str.50.534, i32 0, i32 0
  %268 = call i8* @gettext(i8* %267) #8, !track !416
  call void @logputs(i32 1, i8* %268)
  %269 = load i8, i8* @pconn_active, align 1
  %270 = trunc i8 %269 to i1
  br i1 %270, label %271, label %277

; <label>:271:                                    ; preds = %266
  %272 = load i32, i32* %15, align 4
  %273 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %274 = load i32, i32* %273, align 8
  %275 = icmp eq i32 %272, %274
  br i1 %275, label %276, label %277

; <label>:276:                                    ; preds = %271
  call void @invalidate_persistent()
  br label %279

; <label>:277:                                    ; preds = %271, %266
  %278 = load i32, i32* %15, align 4
  call void @fd_close(i32 %278)
  br label %279

; <label>:279:                                    ; preds = %277, %276
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:280:                                    ; preds = %262
  %281 = getelementptr [29 x i8], [29 x i8]* @.str.51.535, i32 0, i32 0
  %282 = call i8* @gettext(i8* %281) #8
  %283 = load i32, i32* %15, align 4
  %284 = call i8* @fd_errstr(i32 %283)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %282, i8* %284)
  %285 = load i8, i8* @pconn_active, align 1
  %286 = trunc i8 %285 to i1
  br i1 %286, label %287, label %293

; <label>:287:                                    ; preds = %280
  %288 = load i32, i32* %15, align 4
  %289 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %290 = load i32, i32* %289, align 8
  %291 = icmp eq i32 %288, %290
  br i1 %291, label %292, label %293

; <label>:292:                                    ; preds = %287
  call void @invalidate_persistent()
  br label %295

; <label>:293:                                    ; preds = %287, %280
  %294 = load i32, i32* %15, align 4
  call void @fd_close(i32 %294)
  br label %295

; <label>:295:                                    ; preds = %293, %292
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:296:                                    ; preds = %258
  %297 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %298 = load i8, i8* %297, align 1
  %299 = trunc i8 %298 to i1
  br i1 %299, label %300, label %302

; <label>:300:                                    ; preds = %296
  %301 = getelementptr [44 x i8], [44 x i8]* @.str.52.536, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %301, i8* %260)
  br label %302

; <label>:302:                                    ; preds = %296, %300
  %303 = call %struct.response* @resp_new(i8* %260)
  store %struct.response* %303, %struct.response** %20, align 8
  %304 = load i8*, i8** %22, align 8
  call void @free(i8* %304) #8
  store i8* null, i8** %22, align 8
  %305 = load %struct.response*, %struct.response** %20, align 8
  %306 = call i32 @resp_status(%struct.response* %305, i8** %22)
  %307 = icmp slt i32 %306, 0
  br i1 %307, label %308, label %328

; <label>:308:                                    ; preds = %302
  %.05.lcssa54 = phi i8* [ %.05, %302 ]
  %.lcssa39 = phi i32 [ %306, %302 ]
  %.lcssa37 = phi i8* [ %260, %302 ]
  %309 = call i64 @time(i64* null) #8
  %310 = call i8* @datetime_str(i64 %309)
  %311 = getelementptr [4 x i8], [4 x i8]* @.str.53.537, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %311, i32 %.lcssa39)
  %312 = getelementptr [18 x i8], [18 x i8]* @.str.16.500, i32 0, i32 0
  %313 = call i8* @gettext(i8* %312) #8
  %314 = getelementptr [22 x i8], [22 x i8]* @.str.54.538, i32 0, i32 0
  %315 = call i8* @gettext(i8* %314) #8, !track !417
  %316 = call i8* @quotearg_style(i32 7, i8* %315)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %313, i8* %310, i32 %.lcssa39, i8* %316)
  %317 = load i8, i8* @pconn_active, align 1
  %318 = trunc i8 %317 to i1
  br i1 %318, label %319, label %325

; <label>:319:                                    ; preds = %308
  %320 = load i32, i32* %15, align 4
  %321 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %322 = load i32, i32* %321, align 8
  %323 = icmp eq i32 %320, %322
  br i1 %323, label %324, label %325

; <label>:324:                                    ; preds = %319
  call void @invalidate_persistent()
  br label %327

; <label>:325:                                    ; preds = %319, %308
  %326 = load i32, i32* %15, align 4
  call void @fd_close(i32 %326)
  br label %327

; <label>:327:                                    ; preds = %325, %324
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:328:                                    ; preds = %302
  %329 = icmp sge i32 %306, 100
  %330 = icmp slt i32 %306, 200
  %or.cond4 = and i1 %329, %330
  br i1 %or.cond4, label %331, label %337

; <label>:331:                                    ; preds = %328
  call void @free(i8* %260) #8
  call void @resp_free(%struct.response** %20)
  %332 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %333 = load i8, i8* %332, align 1
  %334 = trunc i8 %333 to i1
  br i1 %334, label %335, label %337

; <label>:335:                                    ; preds = %331
  %336 = getelementptr [19 x i8], [19 x i8]* @.str.55.539, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %336)
  br label %337

; <label>:337:                                    ; preds = %331, %335, %328
  %.135 = phi i8* [ null, %331 ], [ null, %335 ], [ %260, %328 ]
  %.02 = phi i8 [ 1, %331 ], [ 1, %335 ], [ 0, %328 ]
  %338 = trunc i8 %.02 to i1
  br i1 %338, label %258, label %339

; <label>:339:                                    ; preds = %337
  %.135.lcssa = phi i8* [ %.135, %337 ]
  %.lcssa40 = phi i32 [ %306, %337 ]
  %340 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  %341 = load i8*, i8** %340, align 8
  call void @free(i8* %341) #8
  %342 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  store i8* null, i8** %342, align 8
  %343 = load i8*, i8** %22, align 8
  %344 = call noalias i8* @xstrdup(i8* %343)
  %345 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  store i8* %344, i8** %345, align 8
  %346 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %347 = load i8, i8* %346, align 8
  %348 = trunc i8 %347 to i1
  br i1 %348, label %360, label %349

; <label>:349:                                    ; preds = %339
  %350 = load i8*, i8** %22, align 8
  %351 = icmp ne i8* %350, null
  br i1 %351, label %352, label %355

; <label>:352:                                    ; preds = %349
  %353 = load i8*, i8** %22, align 8
  %354 = call i8* @quotearg_style(i32 7, i8* %353)
  br label %357

; <label>:355:                                    ; preds = %349
  %356 = getelementptr [1 x i8], [1 x i8]* @.str.27.513, i32 0, i32 0
  br label %357

; <label>:357:                                    ; preds = %355, %352
  %358 = phi i8* [ %354, %352 ], [ %356, %355 ]
  %359 = getelementptr [8 x i8], [8 x i8]* @.str.56.540, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %359, i32 %.lcssa40, i8* %358)
  br label %364

; <label>:360:                                    ; preds = %339
  %361 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %361)
  %362 = load %struct.response*, %struct.response** %20, align 8
  %363 = getelementptr [3 x i8], [3 x i8]* @.str.57.541, i32 0, i32 0
  call void @print_server_response(%struct.response* %362, i8* %363)
  br label %364

; <label>:364:                                    ; preds = %360, %357
  %365 = phi i32 [ %.lcssa40, %360 ], [ %.lcssa40, %357 ]
  %366 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %367 = load i8, i8* %366, align 2
  %368 = trunc i8 %367 to i1
  br i1 %368, label %385, label %369

; <label>:369:                                    ; preds = %364
  %370 = load %struct.response*, %struct.response** %20, align 8
  %371 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %372 = getelementptr [15 x i8], [15 x i8]* @.str.58.542, i32 0, i32 0
  %373 = call zeroext i1 @resp_header_copy(%struct.response* %370, i8* %372, i8* %371, i32 512)
  br i1 %373, label %374, label %385

; <label>:374:                                    ; preds = %369
  %375 = call i32* @__errno_location() #15
  store i32 0, i32* %375, align 4
  %376 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %377 = call i64 @strtol(i8* %376, i8** null, i32 10) #8, !track !418
  %378 = icmp eq i64 %377, 9223372036854775807
  br i1 %378, label %379, label %383

; <label>:379:                                    ; preds = %374
  %380 = call i32* @__errno_location() #15
  %381 = load i32, i32* %380, align 4
  %382 = icmp eq i32 %381, 34
  br i1 %382, label %385, label %383

; <label>:383:                                    ; preds = %379, %374
  %384 = icmp slt i64 %377, 0
  %.6 = select i1 %384, i64 -1, i64 %377
  br label %385

; <label>:385:                                    ; preds = %383, %379, %369, %364
  %.215 = phi i64 [ -1, %364 ], [ -1, %369 ], [ %.6, %383 ], [ -1, %379 ]
  %386 = trunc i8 %56 to i1
  br i1 %386, label %397, label %387

; <label>:387:                                    ; preds = %385
  %388 = load %struct.response*, %struct.response** %20, align 8
  %389 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %390 = getelementptr [11 x i8], [11 x i8]* @.str.59.543, i32 0, i32 0
  %391 = call zeroext i1 @resp_header_copy(%struct.response* %388, i8* %390, i8* %389, i32 512)
  br i1 %391, label %392, label %397

; <label>:392:                                    ; preds = %387
  %393 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %394 = getelementptr [6 x i8], [6 x i8]* @.str.60.544, i32 0, i32 0
  %395 = call i32 @c_strcasecmp(i8* %393, i8* %394) #14
  %396 = icmp eq i32 0, %395
  %spec.select7 = select i1 %396, i8 0, i8 %spec.select
  br label %397

; <label>:397:                                    ; preds = %387, %392, %385
  %.3 = phi i8 [ %spec.select, %385 ], [ %spec.select7, %392 ], [ %spec.select, %387 ]
  %398 = load %struct.response*, %struct.response** %20, align 8
  %399 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %400 = getelementptr [18 x i8], [18 x i8]* @.str.61.545, i32 0, i32 0
  %401 = call zeroext i1 @resp_header_copy(%struct.response* %398, i8* %400, i8* %399, i32 512)
  br i1 %401, label %402, label %407

; <label>:402:                                    ; preds = %397
  %403 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %404 = getelementptr [8 x i8], [8 x i8]* @.str.62.546, i32 0, i32 0
  %405 = call i32 @c_strcasecmp(i8* %403, i8* %404) #14
  %406 = icmp eq i32 0, %405
  %spec.select8 = select i1 %406, i8 1, i8 0
  br label %407

; <label>:407:                                    ; preds = %402, %397
  %.04 = phi i8 [ 0, %397 ], [ %spec.select8, %402 ]
  %408 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 129
  %409 = load i8, i8* %408, align 1
  %410 = trunc i8 %409 to i1
  br i1 %410, label %411, label %._crit_edge98

; <label>:411:                                    ; preds = %407
  %412 = load %struct.response*, %struct.response** %20, align 8
  %413 = getelementptr [11 x i8], [11 x i8]* @.str.63.547, i32 0, i32 0
  %414 = call i32 @resp_header_locate(%struct.response* %412, i8* %413, i32 0, i8** %27, i8** %28)
  %415 = icmp ne i32 %414, -1
  br i1 %415, label %.lr.ph97.preheader, label %._crit_edge98

.lr.ph97.preheader:                               ; preds = %411
  br label %.lr.ph97

.lr.ph97:                                         ; preds = %.lr.ph97.preheader, %.lr.ph97
  %416 = phi i32 [ %439, %.lr.ph97 ], [ %414, %.lr.ph97.preheader ]
  call void @unroll_loop(i32 227)
  %417 = load i8*, i8** %27, align 8
  %418 = load i8*, i8** %28, align 8
  %419 = ptrtoint i8* %418 to i64
  %420 = ptrtoint i8* %417 to i64
  %421 = sub i64 %419, %420
  %422 = trunc i64 %421 to i32
  %423 = add nsw i32 %422, 1
  %424 = sext i32 %423 to i64
  %425 = alloca i8, i64 %424, align 16, !track !419
  %426 = sext i32 %422 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %425, i8* align 1 %417, i64 %426, i1 false), !track !420
  %427 = sext i32 %422 to i64
  %428 = getelementptr inbounds i8, i8* %425, i64 %427
  store i8 0, i8* %428, align 1
  %429 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  %430 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %431 = load i8*, i8** %430, align 8
  %432 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %433 = load i32, i32* %432, align 8
  %434 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %435 = load i8*, i8** %434, align 8
  call void @cookie_handle_set_cookie(%struct.cookie_jar* %429, i8* %431, i32 %433, i8* %435, i8* %425)
  %436 = add nsw i32 %416, 1
  %437 = load %struct.response*, %struct.response** %20, align 8
  %438 = getelementptr [11 x i8], [11 x i8]* @.str.63.547, i32 0, i32 0
  %439 = call i32 @resp_header_locate(%struct.response* %437, i8* %438, i32 %436, i8** %27, i8** %28)
  %440 = icmp ne i32 %439, -1
  br i1 %440, label %.lr.ph97, label %._crit_edge98.loopexit

._crit_edge98.loopexit:                           ; preds = %.lr.ph97
  br label %._crit_edge98

._crit_edge98:                                    ; preds = %._crit_edge98.loopexit, %411, %407
  %441 = trunc i8 %.3 to i1
  br i1 %441, label %442, label %452

; <label>:442:                                    ; preds = %._crit_edge98
  %443 = load %struct.url*, %struct.url** %11, align 8
  %444 = getelementptr inbounds %struct.url, %struct.url* %443, i32 0, i32 2
  %445 = load i8*, i8** %444, align 8
  %446 = load %struct.url*, %struct.url** %11, align 8
  %447 = getelementptr inbounds %struct.url, %struct.url* %446, i32 0, i32 3
  %448 = load i32, i32* %447, align 8
  %449 = load i32, i32* %15, align 4
  %450 = load i8, i8* %19, align 1
  %451 = trunc i8 %450 to i1
  call void @register_persistent(i8* %445, i32 %448, i32 %449, i1 zeroext %451)
  br label %452

; <label>:452:                                    ; preds = %442, %._crit_edge98
  %453 = icmp eq i32 %365, 401
  br i1 %453, label %454, label %550

; <label>:454:                                    ; preds = %452
  %455 = trunc i8 %48 to i1
  br i1 %455, label %456, label %498

; <label>:456:                                    ; preds = %454
  %457 = load %struct.response*, %struct.response** %20, align 8
  %458 = getelementptr [13 x i8], [13 x i8]* @.str.64.548, i32 0, i32 0
  %459 = call i8* @resp_header_strdup(%struct.response* %457, i8* %458)
  %460 = load i32, i32* %15, align 4
  %461 = trunc i8 %.04 to i1
  %462 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %463 = load i8*, i8** %462, align 8
  %464 = getelementptr inbounds [21 x i8], [21 x i8]* %23, i32 0, i32 0
  %465 = getelementptr inbounds [48 x i8], [48 x i8]* %24, i32 0, i32 0
  %466 = call i32 @read_response_body(%struct.http_stat* %1, i32 %460, %struct._IO_FILE* null, i64 %.215, i64 0, i1 zeroext %461, i8* %463, i8* %464, i8* %465, %struct.ip_address* %.231, i8* %459, i32 %365, i8* %.135.lcssa)
  call void @free(i8* %459) #8
  %467 = icmp ne i32 %466, 35
  br i1 %467, label %472, label %468

; <label>:468:                                    ; preds = %456
  %469 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  %470 = load i32, i32* %469, align 8
  %471 = icmp slt i32 %470, 0
  br i1 %471, label %472, label %484

; <label>:472:                                    ; preds = %456, %468
  %.lcssa49 = phi i32 [ %466, %468 ], [ %466, %456 ]
  %.135.lcssa.lcssa46 = phi i8* [ %.135.lcssa, %468 ], [ %.135.lcssa, %456 ]
  %473 = load i8, i8* @pconn_active, align 1
  %474 = trunc i8 %473 to i1
  br i1 %474, label %475, label %481

; <label>:475:                                    ; preds = %472
  %476 = load i32, i32* %15, align 4
  %477 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %478 = load i32, i32* %477, align 8
  %479 = icmp eq i32 %476, %478
  br i1 %479, label %480, label %481

; <label>:480:                                    ; preds = %475
  call void @invalidate_persistent()
  br label %483

; <label>:481:                                    ; preds = %475, %472
  %482 = load i32, i32* %15, align 4
  call void @fd_close(i32 %482)
  br label %483

; <label>:483:                                    ; preds = %481, %480
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:484:                                    ; preds = %468
  %485 = trunc i8 %.3 to i1
  br i1 %485, label %532, label %486

; <label>:486:                                    ; preds = %484
  %487 = load i8, i8* @pconn_active, align 1
  %488 = trunc i8 %487 to i1
  br i1 %488, label %489, label %495

; <label>:489:                                    ; preds = %486
  %490 = load i32, i32* %15, align 4
  %491 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %492 = load i32, i32* %491, align 8
  %493 = icmp eq i32 %490, %492
  br i1 %493, label %494, label %495

; <label>:494:                                    ; preds = %489
  call void @invalidate_persistent()
  br label %497

; <label>:495:                                    ; preds = %489, %486
  %496 = load i32, i32* %15, align 4
  call void @fd_close(i32 %496)
  br label %497

; <label>:497:                                    ; preds = %495, %494
  store i32 -1, i32* %15, align 4
  br label %532

; <label>:498:                                    ; preds = %454
  %499 = trunc i8 %.3 to i1
  br i1 %499, label %500, label %520

; <label>:500:                                    ; preds = %498
  %501 = trunc i8 %38 to i1
  br i1 %501, label %520, label %502

; <label>:502:                                    ; preds = %500
  %503 = load i32, i32* %15, align 4
  %504 = trunc i8 %.04 to i1
  %505 = call zeroext i1 @skip_short_body(i32 %503, i64 %.215, i1 zeroext %504)
  br i1 %505, label %506, label %520

; <label>:506:                                    ; preds = %502
  %507 = trunc i8 %.3 to i1
  br i1 %507, label %532, label %508

; <label>:508:                                    ; preds = %506
  %509 = load i8, i8* @pconn_active, align 1
  %510 = trunc i8 %509 to i1
  br i1 %510, label %511, label %517

; <label>:511:                                    ; preds = %508
  %512 = load i32, i32* %15, align 4
  %513 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %514 = load i32, i32* %513, align 8
  %515 = icmp eq i32 %512, %514
  br i1 %515, label %516, label %517

; <label>:516:                                    ; preds = %511
  call void @invalidate_persistent()
  br label %519

; <label>:517:                                    ; preds = %511, %508
  %518 = load i32, i32* %15, align 4
  call void @fd_close(i32 %518)
  br label %519

; <label>:519:                                    ; preds = %517, %516
  store i32 -1, i32* %15, align 4
  br label %532

; <label>:520:                                    ; preds = %498, %500, %502
  %521 = load i8, i8* @pconn_active, align 1
  %522 = trunc i8 %521 to i1
  br i1 %522, label %523, label %529

; <label>:523:                                    ; preds = %520
  %524 = load i32, i32* %15, align 4
  %525 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %526 = load i32, i32* %525, align 8
  %527 = icmp eq i32 %524, %526
  br i1 %527, label %528, label %529

; <label>:528:                                    ; preds = %523
  call void @invalidate_persistent()
  br label %531

; <label>:529:                                    ; preds = %523, %520
  %530 = load i32, i32* %15, align 4
  call void @fd_close(i32 %530)
  br label %531

; <label>:531:                                    ; preds = %529, %528
  store i32 -1, i32* %15, align 4
  br label %532

; <label>:532:                                    ; preds = %531, %506, %519, %484, %497
  %.1 = phi i8* [ null, %497 ], [ null, %484 ], [ %.05, %519 ], [ %.05, %506 ], [ %.05, %531 ]
  %533 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 4
  store i8 0, i8* %533, align 1
  %534 = load i8*, i8** %8, align 8
  %535 = load i8*, i8** %9, align 8
  %536 = load %struct.response*, %struct.response** %20, align 8
  %537 = load %struct.request*, %struct.request** %7, align 8
  %538 = call i32 @check_auth(%struct.url* %0, i8* %534, i8* %535, %struct.response* %536, %struct.request* %537, i8* %18, i8* %29, i8* %17, i8* %16)
  %539 = icmp eq i32 %538, 25
  br i1 %539, label %540, label %548

; <label>:540:                                    ; preds = %532
  %541 = load i8, i8* %29, align 1
  %542 = trunc i8 %541 to i1
  br i1 %542, label %543, label %548

; <label>:543:                                    ; preds = %540
  %544 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  %545 = load i8*, i8** %544, align 8
  call void @free(i8* %545) #8
  %546 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  store i8* null, i8** %546, align 8
  call void @resp_free(%struct.response** %20)
  %547 = load i8*, i8** %22, align 8
  call void @free(i8* %547) #8
  store i8* null, i8** %22, align 8
  call void @free(i8* %.135.lcssa) #8
  br label %82

; <label>:548:                                    ; preds = %540, %532
  %.1.lcssa = phi i8* [ %.1, %540 ], [ %.1, %532 ]
  %.lcssa94 = phi i32 [ %538, %540 ], [ %538, %532 ]
  %.135.lcssa.lcssa47 = phi i8* [ %.135.lcssa, %540 ], [ %.135.lcssa, %532 ]
  %549 = icmp eq i32 %.lcssa94, 25
  %..lcssa94 = select i1 %549, i32 42, i32 %.lcssa94
  br label %1267

; <label>:550:                                    ; preds = %452
  %.04.lcssa = phi i8 [ %.04, %452 ]
  %.3.lcssa = phi i8 [ %.3, %452 ]
  %.215.lcssa = phi i64 [ %.215, %452 ]
  %.231.lcssa70 = phi %struct.ip_address* [ %.231, %452 ]
  %.05.lcssa55 = phi i8* [ %.05, %452 ]
  %.135.lcssa.lcssa = phi i8* [ %.135.lcssa, %452 ]
  %.lcssa41 = phi i32 [ %365, %452 ]
  %551 = load i8, i8* %18, align 1
  %552 = trunc i8 %551 to i1
  br i1 %552, label %553, label %555

; <label>:553:                                    ; preds = %550
  %554 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 4
  store i8 1, i8* %554, align 1
  br label %555

; <label>:555:                                    ; preds = %550, %553
  %556 = icmp eq i32 %.lcssa41, 504
  br i1 %556, label %557, label %578

; <label>:557:                                    ; preds = %555
  %558 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 0
  store i64 0, i64* %558, align 8
  %559 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  store i32 0, i32* %559, align 8
  %560 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  store i64 0, i64* %560, align 8
  %561 = trunc i8 %.3.lcssa to i1
  br i1 %561, label %574, label %562

; <label>:562:                                    ; preds = %557
  %563 = load i8, i8* @pconn_active, align 1
  %564 = trunc i8 %563 to i1
  br i1 %564, label %565, label %571

; <label>:565:                                    ; preds = %562
  %566 = load i32, i32* %15, align 4
  %567 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %568 = load i32, i32* %567, align 8
  %569 = icmp eq i32 %566, %568
  br i1 %569, label %570, label %571

; <label>:570:                                    ; preds = %565
  call void @invalidate_persistent()
  br label %573

; <label>:571:                                    ; preds = %565, %562
  %572 = load i32, i32* %15, align 4
  call void @fd_close(i32 %572)
  br label %573

; <label>:573:                                    ; preds = %571, %570
  store i32 -1, i32* %15, align 4
  br label %574

; <label>:574:                                    ; preds = %573, %557
  %575 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  %576 = load i8*, i8** %575, align 8
  call void @free(i8* %576) #8
  %577 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 9
  store i8* null, i8** %577, align 8
  br label %1267

; <label>:578:                                    ; preds = %555
  %579 = load %struct.response*, %struct.response** %20, align 8
  %580 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %581 = call i32 @check_file_output(%struct.url* %0, %struct.http_stat* %1, %struct.response* %579, i8* %580, i64 512)
  %582 = icmp ne i32 %581, 25
  br i1 %582, label %1267, label %583

; <label>:583:                                    ; preds = %578
  %584 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 8
  store i32 %.lcssa41, i32* %584, align 8
  %585 = icmp eq i32 %.lcssa41, -1
  br i1 %585, label %586, label %591

; <label>:586:                                    ; preds = %583
  %587 = getelementptr [22 x i8], [22 x i8]* @.str.54.538, i32 0, i32 0
  %588 = call i8* @gettext(i8* %587) #8, !track !421
  %589 = call noalias i8* @xstrdup(i8* %588)
  %590 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 7
  store i8* %589, i8** %590, align 8
  br label %604

; <label>:591:                                    ; preds = %583
  %592 = load i8*, i8** %22, align 8
  %593 = load i8, i8* %592, align 1
  %594 = icmp ne i8 %593, 0
  br i1 %594, label %600, label %595

; <label>:595:                                    ; preds = %591
  %596 = getelementptr [17 x i8], [17 x i8]* @.str.65.549, i32 0, i32 0
  %597 = call i8* @gettext(i8* %596) #8, !track !422
  %598 = call noalias i8* @xstrdup(i8* %597)
  %599 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 7
  store i8* %598, i8** %599, align 8
  br label %604

; <label>:600:                                    ; preds = %591
  %601 = load i8*, i8** %22, align 8
  %602 = call noalias i8* @xstrdup(i8* %601)
  %603 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 7
  store i8* %602, i8** %603, align 8
  br label %604

; <label>:604:                                    ; preds = %595, %600, %586
  %605 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 157
  %606 = load i8, i8* %605, align 8
  %607 = trunc i8 %606 to i1
  %608 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %609 = icmp ne %struct.hsts_store* %608, null
  %or.cond10 = and i1 %607, %609
  br i1 %or.cond10, label %610, label %660

; <label>:610:                                    ; preds = %604
  %611 = load %struct.response*, %struct.response** %20, align 8
  %612 = getelementptr [26 x i8], [26 x i8]* @.str.66.550, i32 0, i32 0
  %613 = call i8* @resp_header_strdup(%struct.response* %611, i8* %612)
  %614 = call zeroext i1 @parse_strict_transport_security(i8* %613, i64* %13, i8* %14)
  br i1 %614, label %615, label %660

; <label>:615:                                    ; preds = %610
  %616 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %617 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %618 = load i32, i32* %617, align 8
  %619 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %620 = load i8*, i8** %619, align 8
  %621 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %622 = load i32, i32* %621, align 8
  %623 = load i64, i64* %13, align 8
  %624 = load i8, i8* %14, align 1
  %625 = trunc i8 %624 to i1
  %626 = call zeroext i1 @hsts_store_entry(%struct.hsts_store* %616, i32 %618, i8* %620, i32 %622, i64 %623, i1 zeroext %625)
  %627 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %628 = load i8, i8* %627, align 1
  %629 = trunc i8 %628 to i1
  br i1 %626, label %630, label %645

; <label>:630:                                    ; preds = %615
  br i1 %629, label %631, label %660

; <label>:631:                                    ; preds = %630
  %632 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %633 = load i8*, i8** %632, align 8
  %634 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %635 = load i32, i32* %634, align 8
  %636 = load i64, i64* %13, align 8
  %637 = trunc i64 %636 to i32
  %638 = load i8, i8* %14, align 1
  %639 = trunc i8 %638 to i1
  %640 = zext i1 %639 to i64
  %641 = getelementptr [5 x i8], [5 x i8]* @.str.68.551, i32 0, i32 0
  %642 = getelementptr [6 x i8], [6 x i8]* @.str.69.552, i32 0, i32 0
  %643 = select i1 %639, i8* %641, i8* %642
  %644 = getelementptr [65 x i8], [65 x i8]* @.str.67.553, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %644, i8* %633, i32 %635, i32 %637, i8* %643)
  br label %660

; <label>:645:                                    ; preds = %615
  br i1 %629, label %646, label %660

; <label>:646:                                    ; preds = %645
  %647 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %648 = load i8*, i8** %647, align 8
  %649 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %650 = load i32, i32* %649, align 8
  %651 = load i64, i64* %13, align 8
  %652 = trunc i64 %651 to i32
  %653 = load i8, i8* %14, align 1
  %654 = trunc i8 %653 to i1
  %655 = zext i1 %654 to i64
  %656 = getelementptr [5 x i8], [5 x i8]* @.str.68.551, i32 0, i32 0
  %657 = getelementptr [6 x i8], [6 x i8]* @.str.69.552, i32 0, i32 0
  %658 = select i1 %654, i8* %656, i8* %657
  %659 = getelementptr [63 x i8], [63 x i8]* @.str.70.554, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %659, i8* %648, i32 %650, i32 %652, i8* %658)
  br label %660

; <label>:660:                                    ; preds = %610, %646, %645, %631, %630, %604
  %661 = load %struct.response*, %struct.response** %20, align 8
  %662 = getelementptr [13 x i8], [13 x i8]* @.str.64.548, i32 0, i32 0
  %663 = call i8* @resp_header_strdup(%struct.response* %661, i8* %662)
  %664 = icmp ne i8* %663, null
  br i1 %664, label %665, label %692

; <label>:665:                                    ; preds = %660
  %666 = call i8* @strchr(i8* %663, i32 59) #14, !track !423
  %667 = icmp ne i8* %666, null
  br i1 %667, label %.preheader, label %692

.preheader:                                       ; preds = %665
  br label %668

; <label>:668:                                    ; preds = %.preheader, %675
  %.0 = phi i8* [ %677, %675 ], [ %666, %.preheader ]
  call void @unroll_loop(i32 228)
  %669 = icmp ugt i8* %.0, %663
  br i1 %669, label %670, label %675

; <label>:670:                                    ; preds = %668
  %671 = getelementptr inbounds i8, i8* %.0, i64 -1
  %672 = load i8, i8* %671, align 1
  %673 = sext i8 %672 to i32
  %674 = call zeroext i1 @c_isspace(i32 %673)
  br label %675

; <label>:675:                                    ; preds = %670, %668
  %676 = phi i1 [ false, %668 ], [ %674, %670 ]
  %677 = getelementptr inbounds i8, i8* %.0, i32 -1
  br i1 %676, label %668, label %678

; <label>:678:                                    ; preds = %675
  %.0.lcssa = phi i8* [ %.0, %675 ]
  %679 = getelementptr inbounds i8, i8* %666, i64 1
  store i8 0, i8* %.0.lcssa, align 1
  %680 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %681 = load i8, i8* %680, align 2
  %682 = trunc i8 %681 to i1
  br i1 %682, label %683, label %692

; <label>:683:                                    ; preds = %678
  %684 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  %685 = load i8*, i8** %684, align 8
  %686 = icmp ne i8* %685, null
  br i1 %686, label %692, label %687

; <label>:687:                                    ; preds = %683
  %688 = call i8* @parse_charset(i8* %679)
  %689 = icmp ne i8* %688, null
  br i1 %689, label %690, label %691

; <label>:690:                                    ; preds = %687
  call void @set_content_encoding(%struct.iri* %4, i8* %688)
  br label %691

; <label>:691:                                    ; preds = %687, %690
  call void @free(i8* %688) #8
  br label %692

; <label>:692:                                    ; preds = %665, %691, %683, %678, %660
  %693 = load %struct.response*, %struct.response** %20, align 8
  %694 = getelementptr [9 x i8], [9 x i8]* @.str.71.555, i32 0, i32 0
  %695 = call i8* @resp_header_strdup(%struct.response* %693, i8* %694)
  %696 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 5
  store i8* %695, i8** %696, align 8
  %697 = load %struct.response*, %struct.response** %20, align 8
  %698 = getelementptr [14 x i8], [14 x i8]* @.str.72.556, i32 0, i32 0
  %699 = call i8* @resp_header_strdup(%struct.response* %697, i8* %698)
  %700 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 6
  store i8* %699, i8** %700, align 8
  %701 = load %struct.response*, %struct.response** %20, align 8
  %702 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %703 = getelementptr [14 x i8], [14 x i8]* @.str.73.557, i32 0, i32 0
  %704 = call zeroext i1 @resp_header_copy(%struct.response* %701, i8* %703, i8* %702, i32 512)
  br i1 %704, label %705, label %714

; <label>:705:                                    ; preds = %692
  %706 = getelementptr inbounds [512 x i8], [512 x i8]* %21, i32 0, i32 0
  %707 = call zeroext i1 @parse_content_range(i8* %706, i64* %30, i64* %31, i64* %32)
  br i1 %707, label %708, label %714

; <label>:708:                                    ; preds = %705
  %709 = load i64, i64* %30, align 8
  %710 = load i64, i64* %31, align 8
  %711 = load i64, i64* %30, align 8
  %712 = sub nsw i64 %710, %711
  %713 = add nsw i64 %712, 1
  br label %714

; <label>:714:                                    ; preds = %705, %708, %692
  %.119 = phi i64 [ 0, %692 ], [ %709, %708 ], [ 0, %705 ]
  %.417 = phi i64 [ %.215.lcssa, %692 ], [ %713, %708 ], [ %.215.lcssa, %705 ]
  %715 = icmp sge i32 %.lcssa41, 200
  %716 = icmp slt i32 %.lcssa41, 300
  %or.cond11 = and i1 %715, %716
  br i1 %or.cond11, label %717, label %720

; <label>:717:                                    ; preds = %714
  %718 = load i32, i32* %2, align 4
  %719 = or i32 %718, 2
  store i32 %719, i32* %2, align 4
  br label %720

; <label>:720:                                    ; preds = %717, %714
  switch i32 %.lcssa41, label %869 [
    i32 204, label %721
    i32 300, label %738
    i32 301, label %745
    i32 302, label %745
    i32 303, label %745
    i32 307, label %745
  ]

; <label>:721:                                    ; preds = %720
  %722 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 0
  store i64 0, i64* %722, align 8
  %723 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  store i32 0, i32* %723, align 8
  %724 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  store i64 0, i64* %724, align 8
  %725 = trunc i8 %.3.lcssa to i1
  br i1 %725, label %1267, label %726

; <label>:726:                                    ; preds = %721
  %727 = load i8, i8* @pconn_active, align 1
  %728 = trunc i8 %727 to i1
  br i1 %728, label %729, label %735

; <label>:729:                                    ; preds = %726
  %730 = load i32, i32* %15, align 4
  %731 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %732 = load i32, i32* %731, align 8
  %733 = icmp eq i32 %730, %732
  br i1 %733, label %734, label %735

; <label>:734:                                    ; preds = %729
  call void @invalidate_persistent()
  br label %737

; <label>:735:                                    ; preds = %729, %726
  %736 = load i32, i32* %15, align 4
  call void @fd_close(i32 %736)
  br label %737

; <label>:737:                                    ; preds = %735, %734
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:738:                                    ; preds = %720
  %739 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 5
  %740 = load i8*, i8** %739, align 8
  %741 = icmp ne i8* %740, null
  br i1 %741, label %745, label %742

; <label>:742:                                    ; preds = %738
  %743 = load i32, i32* %2, align 4
  %744 = or i32 %743, 2
  store i32 %744, i32* %2, align 4
  br label %869

; <label>:745:                                    ; preds = %720, %720, %720, %720, %738
  %746 = getelementptr [16 x i8], [16 x i8]* @.str.74.558, i32 0, i32 0
  %747 = call i8* @gettext(i8* %746) #8
  %748 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 5
  %749 = load i8*, i8** %748, align 8
  %750 = icmp ne i8* %749, null
  br i1 %750, label %751, label %755

; <label>:751:                                    ; preds = %745
  %752 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 5
  %753 = load i8*, i8** %752, align 8
  %754 = call i8* @escnonprint_uri(i8* %753)
  br label %758

; <label>:755:                                    ; preds = %745
  %756 = getelementptr [12 x i8], [12 x i8]* @.str.75.559, i32 0, i32 0
  %757 = call i8* @gettext(i8* %756) #8, !track !424
  br label %758

; <label>:758:                                    ; preds = %755, %751
  %759 = phi i8* [ %754, %751 ], [ %757, %755 ]
  %760 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 5
  %761 = load i8*, i8** %760, align 8
  %762 = icmp ne i8* %761, null
  br i1 %762, label %763, label %766

; <label>:763:                                    ; preds = %758
  %764 = getelementptr [13 x i8], [13 x i8]* @.str.76.560, i32 0, i32 0
  %765 = call i8* @gettext(i8* %764) #8
  br label %768

; <label>:766:                                    ; preds = %758
  %767 = getelementptr [1 x i8], [1 x i8]* @.str.27.513, i32 0, i32 0
  br label %768

; <label>:768:                                    ; preds = %766, %763
  %769 = phi i8* [ %765, %763 ], [ %767, %766 ]
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %747, i8* %759, i8* %769)
  %770 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 0
  store i64 0, i64* %770, align 8
  %771 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  store i32 0, i32* %771, align 8
  %772 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  store i64 0, i64* %772, align 8
  %773 = trunc i8 %48 to i1
  br i1 %773, label %774, label %813

; <label>:774:                                    ; preds = %768
  %775 = load i32, i32* %15, align 4
  %776 = trunc i8 %.04.lcssa to i1
  %777 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %778 = load i8*, i8** %777, align 8
  %779 = getelementptr inbounds [21 x i8], [21 x i8]* %23, i32 0, i32 0
  %780 = getelementptr inbounds [48 x i8], [48 x i8]* %24, i32 0, i32 0
  %781 = call i32 @read_response_body(%struct.http_stat* %1, i32 %775, %struct._IO_FILE* null, i64 %.417, i64 0, i1 zeroext %776, i8* %778, i8* %779, i8* %780, %struct.ip_address* %.231.lcssa70, i8* %663, i32 %.lcssa41, i8* %.135.lcssa.lcssa)
  %782 = icmp ne i32 %781, 35
  br i1 %782, label %787, label %783

; <label>:783:                                    ; preds = %774
  %784 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  %785 = load i32, i32* %784, align 8
  %786 = icmp slt i32 %785, 0
  br i1 %786, label %787, label %799

; <label>:787:                                    ; preds = %774, %783
  %788 = load i8, i8* @pconn_active, align 1
  %789 = trunc i8 %788 to i1
  br i1 %789, label %790, label %796

; <label>:790:                                    ; preds = %787
  %791 = load i32, i32* %15, align 4
  %792 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %793 = load i32, i32* %792, align 8
  %794 = icmp eq i32 %791, %793
  br i1 %794, label %795, label %796

; <label>:795:                                    ; preds = %790
  call void @invalidate_persistent()
  br label %798

; <label>:796:                                    ; preds = %790, %787
  %797 = load i32, i32* %15, align 4
  call void @fd_close(i32 %797)
  br label %798

; <label>:798:                                    ; preds = %796, %795
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:799:                                    ; preds = %783
  %800 = trunc i8 %.3.lcssa to i1
  br i1 %800, label %847, label %801

; <label>:801:                                    ; preds = %799
  %802 = load i8, i8* @pconn_active, align 1
  %803 = trunc i8 %802 to i1
  br i1 %803, label %804, label %810

; <label>:804:                                    ; preds = %801
  %805 = load i32, i32* %15, align 4
  %806 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %807 = load i32, i32* %806, align 8
  %808 = icmp eq i32 %805, %807
  br i1 %808, label %809, label %810

; <label>:809:                                    ; preds = %804
  call void @invalidate_persistent()
  br label %812

; <label>:810:                                    ; preds = %804, %801
  %811 = load i32, i32* %15, align 4
  call void @fd_close(i32 %811)
  br label %812

; <label>:812:                                    ; preds = %810, %809
  store i32 -1, i32* %15, align 4
  br label %847

; <label>:813:                                    ; preds = %768
  %814 = trunc i8 %.3.lcssa to i1
  br i1 %814, label %815, label %835

; <label>:815:                                    ; preds = %813
  %816 = trunc i8 %38 to i1
  br i1 %816, label %835, label %817

; <label>:817:                                    ; preds = %815
  %818 = load i32, i32* %15, align 4
  %819 = trunc i8 %.04.lcssa to i1
  %820 = call zeroext i1 @skip_short_body(i32 %818, i64 %.417, i1 zeroext %819)
  br i1 %820, label %821, label %835

; <label>:821:                                    ; preds = %817
  %822 = trunc i8 %.3.lcssa to i1
  br i1 %822, label %847, label %823

; <label>:823:                                    ; preds = %821
  %824 = load i8, i8* @pconn_active, align 1
  %825 = trunc i8 %824 to i1
  br i1 %825, label %826, label %832

; <label>:826:                                    ; preds = %823
  %827 = load i32, i32* %15, align 4
  %828 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %829 = load i32, i32* %828, align 8
  %830 = icmp eq i32 %827, %829
  br i1 %830, label %831, label %832

; <label>:831:                                    ; preds = %826
  call void @invalidate_persistent()
  br label %834

; <label>:832:                                    ; preds = %826, %823
  %833 = load i32, i32* %15, align 4
  call void @fd_close(i32 %833)
  br label %834

; <label>:834:                                    ; preds = %832, %831
  store i32 -1, i32* %15, align 4
  br label %847

; <label>:835:                                    ; preds = %813, %815, %817
  %836 = load i8, i8* @pconn_active, align 1
  %837 = trunc i8 %836 to i1
  br i1 %837, label %838, label %844

; <label>:838:                                    ; preds = %835
  %839 = load i32, i32* %15, align 4
  %840 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %841 = load i32, i32* %840, align 8
  %842 = icmp eq i32 %839, %841
  br i1 %842, label %843, label %844

; <label>:843:                                    ; preds = %838
  call void @invalidate_persistent()
  br label %846

; <label>:844:                                    ; preds = %838, %835
  %845 = load i32, i32* %15, align 4
  call void @fd_close(i32 %845)
  br label %846

; <label>:846:                                    ; preds = %844, %843
  store i32 -1, i32* %15, align 4
  br label %847

; <label>:847:                                    ; preds = %846, %821, %834, %799, %812
  switch i32 %.lcssa41, label %868 [
    i32 307, label %1267
    i32 301, label %848
    i32 302, label %858
  ]

; <label>:848:                                    ; preds = %847
  %849 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %850 = load i8*, i8** %849, align 8
  %851 = icmp ne i8* %850, null
  br i1 %851, label %852, label %868

; <label>:852:                                    ; preds = %848
  %853 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %854 = load i8*, i8** %853, align 8
  %855 = getelementptr [5 x i8], [5 x i8]* @.str.77.561, i32 0, i32 0
  %856 = call i32 @c_strcasecmp(i8* %854, i8* %855) #14
  %857 = icmp ne i32 %856, 0
  br i1 %857, label %1267, label %868

; <label>:858:                                    ; preds = %847
  %859 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %860 = load i8*, i8** %859, align 8
  %861 = icmp ne i8* %860, null
  br i1 %861, label %862, label %868

; <label>:862:                                    ; preds = %858
  %863 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %864 = load i8*, i8** %863, align 8
  %865 = getelementptr [5 x i8], [5 x i8]* @.str.77.561, i32 0, i32 0
  %866 = call i32 @c_strcasecmp(i8* %864, i8* %865) #14
  %867 = icmp ne i32 %866, 0
  br i1 %867, label %1267, label %868

; <label>:868:                                    ; preds = %858, %862, %848, %852, %847
  br label %1267

; <label>:869:                                    ; preds = %720, %742
  call void @set_content_type(i32* %2, i8* %663)
  %870 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 110
  %871 = load i8, i8* %870, align 1
  %872 = trunc i8 %871 to i1
  br i1 %872, label %873, label %885

; <label>:873:                                    ; preds = %869
  %874 = load i32, i32* %2, align 4
  %875 = and i32 %874, 1
  %876 = icmp ne i32 %875, 0
  br i1 %876, label %877, label %879

; <label>:877:                                    ; preds = %873
  %878 = getelementptr [6 x i8], [6 x i8]* @.str.78.562, i32 0, i32 0
  call void @ensure_extension(%struct.http_stat* %1, i8* %878, i32* %2)
  br label %885

; <label>:879:                                    ; preds = %873
  %880 = load i32, i32* %2, align 4
  %881 = and i32 %880, 64
  %882 = icmp ne i32 %881, 0
  br i1 %882, label %883, label %885

; <label>:883:                                    ; preds = %879
  %884 = getelementptr [5 x i8], [5 x i8]* @.str.79.563, i32 0, i32 0
  call void @ensure_extension(%struct.http_stat* %1, i8* %884, i32* %2)
  br label %885

; <label>:885:                                    ; preds = %877, %883, %879, %869
  %886 = trunc i8 %44 to i1
  br i1 %886, label %887, label %947

; <label>:887:                                    ; preds = %885
  switch i32 %.lcssa41, label %949 [
    i32 304, label %888
    i32 200, label %909
    i32 416, label %964
  ]

; <label>:888:                                    ; preds = %887
  %889 = getelementptr [53 x i8], [53 x i8]* @.str.80.564, i32 0, i32 0
  %890 = call i8* @gettext(i8* %889) #8
  %891 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  %892 = load i8*, i8** %891, align 8
  %893 = call i8* @quote(i8* %892)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %890, i8* %893)
  %894 = load i32, i32* %2, align 4
  %895 = or i32 %894, 2
  store i32 %895, i32* %2, align 4
  %896 = trunc i8 %.3.lcssa to i1
  br i1 %896, label %1267, label %897

; <label>:897:                                    ; preds = %888
  %898 = load i8, i8* @pconn_active, align 1
  %899 = trunc i8 %898 to i1
  br i1 %899, label %900, label %906

; <label>:900:                                    ; preds = %897
  %901 = load i32, i32* %15, align 4
  %902 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %903 = load i32, i32* %902, align 8
  %904 = icmp eq i32 %901, %903
  br i1 %904, label %905, label %906

; <label>:905:                                    ; preds = %900
  call void @invalidate_persistent()
  br label %908

; <label>:906:                                    ; preds = %900, %897
  %907 = load i32, i32* %15, align 4
  call void @fd_close(i32 %907)
  br label %908

; <label>:908:                                    ; preds = %906, %905
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:909:                                    ; preds = %887
  %910 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 6
  %911 = load i8*, i8** %910, align 8
  %912 = icmp ne i8* %911, null
  br i1 %912, label %913, label %947

; <label>:913:                                    ; preds = %909
  %914 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 6
  %915 = load i8*, i8** %914, align 8
  %916 = call i64 @http_atotm(i8* %915)
  %917 = icmp ne i64 %916, -1
  br i1 %917, label %918, label %947

; <label>:918:                                    ; preds = %913
  %919 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 18
  %920 = load i64, i64* %919, align 8
  %921 = icmp sle i64 %916, %920
  br i1 %921, label %922, label %947

; <label>:922:                                    ; preds = %918
  %923 = icmp eq i64 %.417, -1
  br i1 %923, label %928, label %924

; <label>:924:                                    ; preds = %922
  %925 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 17
  %926 = load i64, i64* %925, align 8
  %927 = icmp eq i64 %.417, %926
  br i1 %927, label %928, label %947

; <label>:928:                                    ; preds = %924, %922
  %929 = getelementptr [108 x i8], [108 x i8]* @.str.81.565, i32 0, i32 0
  %930 = call i8* @gettext(i8* %929) #8
  %931 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  %932 = load i8*, i8** %931, align 8
  %933 = call i8* @quote(i8* %932)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %930, i8* %933)
  %934 = load i32, i32* %2, align 4
  %935 = or i32 %934, 2
  store i32 %935, i32* %2, align 4
  %936 = load i8, i8* @pconn_active, align 1
  %937 = trunc i8 %936 to i1
  br i1 %937, label %938, label %944

; <label>:938:                                    ; preds = %928
  %939 = load i32, i32* %15, align 4
  %940 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %941 = load i32, i32* %940, align 8
  %942 = icmp eq i32 %939, %941
  br i1 %942, label %943, label %944

; <label>:943:                                    ; preds = %938
  call void @invalidate_persistent()
  br label %946

; <label>:944:                                    ; preds = %938, %928
  %945 = load i32, i32* %15, align 4
  call void @fd_close(i32 %945)
  br label %946

; <label>:946:                                    ; preds = %944, %943
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:947:                                    ; preds = %913, %918, %924, %909, %885
  %948 = icmp eq i32 %.lcssa41, 416
  br i1 %948, label %964, label %949

; <label>:949:                                    ; preds = %887, %947
  %950 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %951 = load i8, i8* %950, align 4
  %952 = trunc i8 %951 to i1
  br i1 %952, label %998, label %953

; <label>:953:                                    ; preds = %949
  %954 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  %955 = load i64, i64* %954, align 8
  %956 = icmp sgt i64 %955, 0
  %957 = icmp eq i32 %.lcssa41, 200
  %or.cond12 = and i1 %956, %957
  %958 = icmp eq i64 %.119, 0
  %or.cond13 = and i1 %or.cond12, %958
  %959 = icmp sge i64 %.417, 0
  %or.cond14 = and i1 %or.cond13, %959
  br i1 %or.cond14, label %960, label %998

; <label>:960:                                    ; preds = %953
  %961 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  %962 = load i64, i64* %961, align 8
  %963 = icmp sge i64 %962, %.417
  br i1 %963, label %964, label %998

; <label>:964:                                    ; preds = %887, %960, %947
  %965 = getelementptr [59 x i8], [59 x i8]* @.str.82.566, i32 0, i32 0
  %966 = call i8* @gettext(i8* %965) #8, !track !425
  call void @logputs(i32 0, i8* %966)
  %967 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 0
  store i64 %.417, i64* %967, align 8
  %968 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  store i32 0, i32* %968, align 8
  %969 = load i32, i32* %2, align 4
  %970 = or i32 %969, 2
  store i32 %970, i32* %2, align 4
  %971 = icmp eq i32 %.lcssa41, 416
  br i1 %971, label %972, label %986

; <label>:972:                                    ; preds = %964
  %973 = trunc i8 %.3.lcssa to i1
  br i1 %973, label %1267, label %974

; <label>:974:                                    ; preds = %972
  %975 = load i8, i8* @pconn_active, align 1
  %976 = trunc i8 %975 to i1
  br i1 %976, label %977, label %983

; <label>:977:                                    ; preds = %974
  %978 = load i32, i32* %15, align 4
  %979 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %980 = load i32, i32* %979, align 8
  %981 = icmp eq i32 %978, %980
  br i1 %981, label %982, label %983

; <label>:982:                                    ; preds = %977
  call void @invalidate_persistent()
  br label %985

; <label>:983:                                    ; preds = %977, %974
  %984 = load i32, i32* %15, align 4
  call void @fd_close(i32 %984)
  br label %985

; <label>:985:                                    ; preds = %983, %982
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:986:                                    ; preds = %964
  %987 = load i8, i8* @pconn_active, align 1
  %988 = trunc i8 %987 to i1
  br i1 %988, label %989, label %995

; <label>:989:                                    ; preds = %986
  %990 = load i32, i32* %15, align 4
  %991 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %992 = load i32, i32* %991, align 8
  %993 = icmp eq i32 %990, %992
  br i1 %993, label %994, label %995

; <label>:994:                                    ; preds = %989
  call void @invalidate_persistent()
  br label %997

; <label>:995:                                    ; preds = %989, %986
  %996 = load i32, i32* %15, align 4
  call void @fd_close(i32 %996)
  br label %997

; <label>:997:                                    ; preds = %995, %994
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:998:                                    ; preds = %960, %953, %949
  %999 = icmp ne i64 %.119, 0
  br i1 %999, label %1000, label %1004

; <label>:1000:                                   ; preds = %998
  %1001 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  %1002 = load i64, i64* %1001, align 8
  %1003 = icmp ne i64 %.119, %1002
  br i1 %1003, label %1007, label %1004

; <label>:1004:                                   ; preds = %1000, %998
  %1005 = icmp ne i32 %.lcssa41, 206
  %1006 = icmp ne i64 %.119, 0
  %or.cond15 = or i1 %1005, %1006
  br i1 %or.cond15, label %1019, label %1007

; <label>:1007:                                   ; preds = %1000, %1004
  %1008 = load i8, i8* @pconn_active, align 1
  %1009 = trunc i8 %1008 to i1
  br i1 %1009, label %1010, label %1016

; <label>:1010:                                   ; preds = %1007
  %1011 = load i32, i32* %15, align 4
  %1012 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1013 = load i32, i32* %1012, align 8
  %1014 = icmp eq i32 %1011, %1013
  br i1 %1014, label %1015, label %1016

; <label>:1015:                                   ; preds = %1010
  call void @invalidate_persistent()
  br label %1018

; <label>:1016:                                   ; preds = %1010, %1007
  %1017 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1017)
  br label %1018

; <label>:1018:                                   ; preds = %1016, %1015
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1019:                                   ; preds = %1004
  %1020 = icmp eq i64 %.417, -1
  br i1 %1020, label %1021, label %1023

; <label>:1021:                                   ; preds = %1019
  %1022 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 1
  store i64 -1, i64* %1022, align 8
  br label %1026

; <label>:1023:                                   ; preds = %1019
  %1024 = add nsw i64 %.417, %.119
  %1025 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 1
  store i64 %1024, i64* %1025, align 8
  br label %1026

; <label>:1026:                                   ; preds = %1023, %1021
  %1027 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %1028 = load i32, i32* %1027, align 8
  %1029 = icmp ne i32 %1028, 0
  br i1 %1029, label %1030, label %1078

; <label>:1030:                                   ; preds = %1026
  %1031 = load i32, i32* %2, align 4
  %1032 = and i32 %1031, 2
  %1033 = icmp ne i32 %1032, 0
  br i1 %1033, label %1034, label %1078

; <label>:1034:                                   ; preds = %1030
  %1035 = getelementptr [9 x i8], [9 x i8]* @.str.83.567, i32 0, i32 0
  %1036 = call i8* @gettext(i8* %1035) #8, !track !426
  call void @logputs(i32 0, i8* %1036)
  %1037 = icmp ne i64 %.417, -1
  br i1 %1037, label %1038, label %1059

; <label>:1038:                                   ; preds = %1034
  %1039 = add nsw i64 %.417, %.119
  %1040 = call i8* @number_to_static_string(i64 %1039)
  call void @logputs(i32 0, i8* %1040)
  %1041 = add nsw i64 %.417, %.119
  %1042 = icmp sge i64 %1041, 1024
  br i1 %1042, label %1043, label %1046

; <label>:1043:                                   ; preds = %1038
  %1044 = call i8* @human_readable(i64 %1039, i32 10, i32 1)
  %1045 = getelementptr [6 x i8], [6 x i8]* @.str.84.568, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %1045, i8* %1044)
  br label %1046

; <label>:1046:                                   ; preds = %1043, %1038
  %1047 = icmp ne i64 %.119, 0
  br i1 %1047, label %1048, label %1071

; <label>:1048:                                   ; preds = %1046
  %1049 = icmp sge i64 %.417, 1024
  br i1 %1049, label %1050, label %1055

; <label>:1050:                                   ; preds = %1048
  %1051 = getelementptr [20 x i8], [20 x i8]* @.str.85.569, i32 0, i32 0
  %1052 = call i8* @gettext(i8* %1051) #8
  %1053 = call i8* @number_to_static_string(i64 %.417)
  %1054 = call i8* @human_readable(i64 %.417, i32 10, i32 1)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %1052, i8* %1053, i8* %1054)
  br label %1071

; <label>:1055:                                   ; preds = %1048
  %1056 = getelementptr [15 x i8], [15 x i8]* @.str.86.570, i32 0, i32 0
  %1057 = call i8* @gettext(i8* %1056) #8
  %1058 = call i8* @number_to_static_string(i64 %.417)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %1057, i8* %1058)
  br label %1071

; <label>:1059:                                   ; preds = %1034
  %1060 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1061 = load i8, i8* %1060, align 2
  %1062 = trunc i8 %1061 to i1
  br i1 %1062, label %1063, label %1066

; <label>:1063:                                   ; preds = %1059
  %1064 = getelementptr [8 x i8], [8 x i8]* @.str.87.571, i32 0, i32 0
  %1065 = call i8* @gettext(i8* %1064) #8, !track !427
  br label %1069

; <label>:1066:                                   ; preds = %1059
  %1067 = getelementptr [12 x i8], [12 x i8]* @.str.75.559, i32 0, i32 0
  %1068 = call i8* @gettext(i8* %1067) #8, !track !428
  br label %1069

; <label>:1069:                                   ; preds = %1066, %1063
  %1070 = phi i8* [ %1065, %1063 ], [ %1068, %1066 ]
  call void @logputs(i32 0, i8* %1070)
  br label %1071

; <label>:1071:                                   ; preds = %1046, %1055, %1050, %1069
  %1072 = icmp ne i8* %663, null
  br i1 %1072, label %1073, label %1076

; <label>:1073:                                   ; preds = %1071
  %1074 = call i8* @quotearg_style(i32 7, i8* %663)
  %1075 = getelementptr [7 x i8], [7 x i8]* @.str.88.572, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %1075, i8* %1074)
  br label %1078

; <label>:1076:                                   ; preds = %1071
  %1077 = getelementptr [2 x i8], [2 x i8]* @.str.5.489, i32 0, i32 0
  call void @logputs(i32 0, i8* %1077)
  br label %1078

; <label>:1078:                                   ; preds = %1030, %1076, %1073, %1026
  %1079 = load i32, i32* %2, align 4
  %1080 = and i32 %1079, 2
  %1081 = icmp ne i32 %1080, 0
  br i1 %1081, label %1086, label %1082

; <label>:1082:                                   ; preds = %1078
  %1083 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 93
  %1084 = load i8, i8* %1083, align 2
  %1085 = trunc i8 %1084 to i1
  br i1 %1085, label %1086, label %1096

; <label>:1086:                                   ; preds = %1082, %1078
  %1087 = trunc i8 %38 to i1
  br i1 %1087, label %1096, label %1088

; <label>:1088:                                   ; preds = %1086
  %1089 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %1090 = load i8, i8* %1089, align 8
  %1091 = trunc i8 %1090 to i1
  br i1 %1091, label %1092, label %1208

; <label>:1092:                                   ; preds = %1088
  %1093 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1094 = load i8, i8* %1093, align 1
  %1095 = trunc i8 %1094 to i1
  br i1 %1095, label %1208, label %1096

; <label>:1096:                                   ; preds = %1092, %1086, %1082
  %.0493 = phi i8 [ %.04.lcssa, %1092 ], [ %.04.lcssa, %1086 ], [ %.04.lcssa, %1082 ]
  %.390 = phi i8 [ %.3.lcssa, %1092 ], [ %.3.lcssa, %1086 ], [ %.3.lcssa, %1082 ]
  %.23173 = phi %struct.ip_address* [ %.231.lcssa70, %1092 ], [ %.231.lcssa70, %1086 ], [ %.231.lcssa70, %1082 ]
  %.13544 = phi i8* [ %.135.lcssa.lcssa, %1092 ], [ %.135.lcssa.lcssa, %1086 ], [ %.135.lcssa.lcssa, %1082 ]
  %1097 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 0
  store i64 0, i64* %1097, align 8
  %1098 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  store i32 0, i32* %1098, align 8
  %1099 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  store i64 0, i64* %1099, align 8
  %1100 = trunc i8 %48 to i1
  br i1 %1100, label %1101, label %1140

; <label>:1101:                                   ; preds = %1096
  %1102 = load i32, i32* %15, align 4
  %1103 = trunc i8 %.0493 to i1
  %1104 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %1105 = load i8*, i8** %1104, align 8
  %1106 = getelementptr inbounds [21 x i8], [21 x i8]* %23, i32 0, i32 0
  %1107 = getelementptr inbounds [48 x i8], [48 x i8]* %24, i32 0, i32 0
  %1108 = call i32 @read_response_body(%struct.http_stat* %1, i32 %1102, %struct._IO_FILE* null, i64 %.417, i64 0, i1 zeroext %1103, i8* %1105, i8* %1106, i8* %1107, %struct.ip_address* %.23173, i8* %663, i32 %.lcssa41, i8* %.13544)
  %1109 = icmp ne i32 %1108, 35
  br i1 %1109, label %1114, label %1110

; <label>:1110:                                   ; preds = %1101
  %1111 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  %1112 = load i32, i32* %1111, align 8
  %1113 = icmp slt i32 %1112, 0
  br i1 %1113, label %1114, label %1126

; <label>:1114:                                   ; preds = %1101, %1110
  %1115 = load i8, i8* @pconn_active, align 1
  %1116 = trunc i8 %1115 to i1
  br i1 %1116, label %1117, label %1123

; <label>:1117:                                   ; preds = %1114
  %1118 = load i32, i32* %15, align 4
  %1119 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1120 = load i32, i32* %1119, align 8
  %1121 = icmp eq i32 %1118, %1120
  br i1 %1121, label %1122, label %1123

; <label>:1122:                                   ; preds = %1117
  call void @invalidate_persistent()
  br label %1125

; <label>:1123:                                   ; preds = %1117, %1114
  %1124 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1124)
  br label %1125

; <label>:1125:                                   ; preds = %1123, %1122
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1126:                                   ; preds = %1110
  %1127 = trunc i8 %.390 to i1
  br i1 %1127, label %1267, label %1128

; <label>:1128:                                   ; preds = %1126
  %1129 = load i8, i8* @pconn_active, align 1
  %1130 = trunc i8 %1129 to i1
  br i1 %1130, label %1131, label %1137

; <label>:1131:                                   ; preds = %1128
  %1132 = load i32, i32* %15, align 4
  %1133 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1134 = load i32, i32* %1133, align 8
  %1135 = icmp eq i32 %1132, %1134
  br i1 %1135, label %1136, label %1137

; <label>:1136:                                   ; preds = %1131
  call void @invalidate_persistent()
  br label %1139

; <label>:1137:                                   ; preds = %1131, %1128
  %1138 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1138)
  br label %1139

; <label>:1139:                                   ; preds = %1137, %1136
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1140:                                   ; preds = %1096
  %1141 = trunc i8 %38 to i1
  br i1 %1141, label %1142, label %1156

; <label>:1142:                                   ; preds = %1140
  %1143 = trunc i8 %.390 to i1
  br i1 %1143, label %1267, label %1144

; <label>:1144:                                   ; preds = %1142
  %1145 = load i8, i8* @pconn_active, align 1
  %1146 = trunc i8 %1145 to i1
  br i1 %1146, label %1147, label %1153

; <label>:1147:                                   ; preds = %1144
  %1148 = load i32, i32* %15, align 4
  %1149 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1150 = load i32, i32* %1149, align 8
  %1151 = icmp eq i32 %1148, %1150
  br i1 %1151, label %1152, label %1153

; <label>:1152:                                   ; preds = %1147
  call void @invalidate_persistent()
  br label %1155

; <label>:1153:                                   ; preds = %1147, %1144
  %1154 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1154)
  br label %1155

; <label>:1155:                                   ; preds = %1153, %1152
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1156:                                   ; preds = %1140
  %1157 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %1158 = load i8, i8* %1157, align 8
  %1159 = trunc i8 %1158 to i1
  br i1 %1159, label %1160, label %1176

; <label>:1160:                                   ; preds = %1156
  %1161 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1162 = load i8, i8* %1161, align 1
  %1163 = trunc i8 %1162 to i1
  br i1 %1163, label %1176, label %1164

; <label>:1164:                                   ; preds = %1160
  %1165 = load i8, i8* @pconn_active, align 1
  %1166 = trunc i8 %1165 to i1
  br i1 %1166, label %1167, label %1173

; <label>:1167:                                   ; preds = %1164
  %1168 = load i32, i32* %15, align 4
  %1169 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1170 = load i32, i32* %1169, align 8
  %1171 = icmp eq i32 %1168, %1170
  br i1 %1171, label %1172, label %1173

; <label>:1172:                                   ; preds = %1167
  call void @invalidate_persistent()
  br label %1175

; <label>:1173:                                   ; preds = %1167, %1164
  %1174 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1174)
  br label %1175

; <label>:1175:                                   ; preds = %1173, %1172
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1176:                                   ; preds = %1160, %1156
  %1177 = trunc i8 %.390 to i1
  br i1 %1177, label %1178, label %1196

; <label>:1178:                                   ; preds = %1176
  %1179 = load i32, i32* %15, align 4
  %1180 = trunc i8 %.0493 to i1
  %1181 = call zeroext i1 @skip_short_body(i32 %1179, i64 %.417, i1 zeroext %1180)
  br i1 %1181, label %1182, label %1196

; <label>:1182:                                   ; preds = %1178
  %1183 = trunc i8 %.390 to i1
  br i1 %1183, label %1267, label %1184

; <label>:1184:                                   ; preds = %1182
  %1185 = load i8, i8* @pconn_active, align 1
  %1186 = trunc i8 %1185 to i1
  br i1 %1186, label %1187, label %1193

; <label>:1187:                                   ; preds = %1184
  %1188 = load i32, i32* %15, align 4
  %1189 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1190 = load i32, i32* %1189, align 8
  %1191 = icmp eq i32 %1188, %1190
  br i1 %1191, label %1192, label %1193

; <label>:1192:                                   ; preds = %1187
  call void @invalidate_persistent()
  br label %1195

; <label>:1193:                                   ; preds = %1187, %1184
  %1194 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1194)
  br label %1195

; <label>:1195:                                   ; preds = %1193, %1192
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1196:                                   ; preds = %1176, %1178
  %1197 = load i8, i8* @pconn_active, align 1
  %1198 = trunc i8 %1197 to i1
  br i1 %1198, label %1199, label %1205

; <label>:1199:                                   ; preds = %1196
  %1200 = load i32, i32* %15, align 4
  %1201 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1202 = load i32, i32* %1201, align 8
  %1203 = icmp eq i32 %1200, %1202
  br i1 %1203, label %1204, label %1205

; <label>:1204:                                   ; preds = %1199
  call void @invalidate_persistent()
  br label %1207

; <label>:1205:                                   ; preds = %1199, %1196
  %1206 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1206)
  br label %1207

; <label>:1207:                                   ; preds = %1205, %1204
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1208:                                   ; preds = %1092, %1088
  %1209 = call i32 @open_output_stream(%struct.http_stat* %1, i32 %5, %struct._IO_FILE** %12)
  %1210 = icmp ne i32 %1209, 25
  br i1 %1210, label %1211, label %1223

; <label>:1211:                                   ; preds = %1208
  %1212 = load i8, i8* @pconn_active, align 1
  %1213 = trunc i8 %1212 to i1
  br i1 %1213, label %1214, label %1220

; <label>:1214:                                   ; preds = %1211
  %1215 = load i32, i32* %15, align 4
  %1216 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1217 = load i32, i32* %1216, align 8
  %1218 = icmp eq i32 %1215, %1217
  br i1 %1218, label %1219, label %1220

; <label>:1219:                                   ; preds = %1214
  call void @invalidate_persistent()
  br label %1222

; <label>:1220:                                   ; preds = %1214, %1211
  %1221 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1221)
  br label %1222

; <label>:1222:                                   ; preds = %1220, %1219
  store i32 -1, i32* %15, align 4
  br label %1267

; <label>:1223:                                   ; preds = %1208
  %1224 = load i32, i32* %15, align 4
  %1225 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %1226 = trunc i8 %.04.lcssa to i1
  %1227 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %1228 = load i8*, i8** %1227, align 8
  %1229 = getelementptr inbounds [21 x i8], [21 x i8]* %23, i32 0, i32 0
  %1230 = getelementptr inbounds [48 x i8], [48 x i8]* %24, i32 0, i32 0
  %1231 = call i32 @read_response_body(%struct.http_stat* %1, i32 %1224, %struct._IO_FILE* %1225, i64 %.417, i64 %.119, i1 zeroext %1226, i8* %1228, i8* %1229, i8* %1230, %struct.ip_address* %.231.lcssa70, i8* %663, i32 %.lcssa41, i8* %.135.lcssa.lcssa)
  %1232 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 3
  %1233 = load i32, i32* %1232, align 8
  %1234 = icmp sge i32 %1233, 0
  br i1 %1234, label %1235, label %1249

; <label>:1235:                                   ; preds = %1223
  %1236 = trunc i8 %.3.lcssa to i1
  br i1 %1236, label %1261, label %1237

; <label>:1237:                                   ; preds = %1235
  %1238 = load i8, i8* @pconn_active, align 1
  %1239 = trunc i8 %1238 to i1
  br i1 %1239, label %1240, label %1246

; <label>:1240:                                   ; preds = %1237
  %1241 = load i32, i32* %15, align 4
  %1242 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1243 = load i32, i32* %1242, align 8
  %1244 = icmp eq i32 %1241, %1243
  br i1 %1244, label %1245, label %1246

; <label>:1245:                                   ; preds = %1240
  call void @invalidate_persistent()
  br label %1248

; <label>:1246:                                   ; preds = %1240, %1237
  %1247 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1247)
  br label %1248

; <label>:1248:                                   ; preds = %1246, %1245
  store i32 -1, i32* %15, align 4
  br label %1261

; <label>:1249:                                   ; preds = %1223
  %1250 = load i8, i8* @pconn_active, align 1
  %1251 = trunc i8 %1250 to i1
  br i1 %1251, label %1252, label %1258

; <label>:1252:                                   ; preds = %1249
  %1253 = load i32, i32* %15, align 4
  %1254 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %1255 = load i32, i32* %1254, align 8
  %1256 = icmp eq i32 %1253, %1255
  br i1 %1256, label %1257, label %1258

; <label>:1257:                                   ; preds = %1252
  call void @invalidate_persistent()
  br label %1260

; <label>:1258:                                   ; preds = %1252, %1249
  %1259 = load i32, i32* %15, align 4
  call void @fd_close(i32 %1259)
  br label %1260

; <label>:1260:                                   ; preds = %1258, %1257
  store i32 -1, i32* %15, align 4
  br label %1261

; <label>:1261:                                   ; preds = %1248, %1235, %1260
  %1262 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %1263 = icmp ne %struct._IO_FILE* %1262, null
  br i1 %1263, label %1267, label %1264

; <label>:1264:                                   ; preds = %1261
  %1265 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %1266 = call i32 @fclose(%struct._IO_FILE* %1265)
  br label %1267

.loopexit:                                        ; preds = %123
  %.236.ph = phi i8* [ null, %123 ]
  %.323.ph = phi i32 [ %126, %123 ]
  %.2.ph = phi i8* [ %.05, %123 ]
  br label %1267

; <label>:1267:                                   ; preds = %.loopexit, %62, %80, %144, %221, %256, %327, %483, %548, %574, %798, %868, %946, %1018, %1125, %1222, %295, %279, %578, %721, %737, %847, %852, %862, %888, %908, %985, %972, %997, %1142, %1155, %1207, %1182, %1195, %1175, %1126, %1139, %1264, %1261
  %.236 = phi i8* [ null, %80 ], [ null, %144 ], [ null, %221 ], [ %.lcssa37, %327 ], [ %.135.lcssa.lcssa46, %483 ], [ %.135.lcssa.lcssa47, %548 ], [ %.135.lcssa.lcssa, %574 ], [ %.135.lcssa.lcssa, %798 ], [ %.135.lcssa.lcssa, %868 ], [ %.135.lcssa.lcssa, %946 ], [ %.135.lcssa.lcssa, %1018 ], [ %.13544, %1125 ], [ %.135.lcssa.lcssa, %1222 ], [ null, %256 ], [ null, %62 ], [ %.lcssa, %295 ], [ %.lcssa, %279 ], [ %.135.lcssa.lcssa, %578 ], [ %.135.lcssa.lcssa, %721 ], [ %.135.lcssa.lcssa, %737 ], [ %.135.lcssa.lcssa, %847 ], [ %.135.lcssa.lcssa, %852 ], [ %.135.lcssa.lcssa, %862 ], [ %.135.lcssa.lcssa, %888 ], [ %.135.lcssa.lcssa, %908 ], [ %.135.lcssa.lcssa, %985 ], [ %.135.lcssa.lcssa, %972 ], [ %.135.lcssa.lcssa, %997 ], [ %.13544, %1142 ], [ %.13544, %1155 ], [ %.13544, %1207 ], [ %.13544, %1182 ], [ %.13544, %1195 ], [ %.13544, %1175 ], [ %.13544, %1126 ], [ %.13544, %1139 ], [ %.135.lcssa.lcssa, %1264 ], [ %.135.lcssa.lcssa, %1261 ], [ %.236.ph, %.loopexit ]
  %.323 = phi i32 [ %81, %80 ], [ 53, %144 ], [ %., %221 ], [ 24, %327 ], [ %.lcssa49, %483 ], [ %..lcssa94, %548 ], [ 23, %574 ], [ %781, %798 ], [ 6, %868 ], [ 34, %946 ], [ 39, %1018 ], [ %1108, %1125 ], [ %1209, %1222 ], [ 52, %256 ], [ 45, %62 ], [ 22, %279 ], [ 24, %295 ], [ %581, %578 ], [ 35, %721 ], [ 35, %737 ], [ 48, %847 ], [ 48, %852 ], [ 48, %862 ], [ 34, %888 ], [ 34, %908 ], [ 34, %985 ], [ 34, %972 ], [ 34, %997 ], [ 35, %1142 ], [ 35, %1155 ], [ 35, %1207 ], [ 35, %1182 ], [ 35, %1195 ], [ 35, %1175 ], [ 35, %1126 ], [ 35, %1139 ], [ %1231, %1264 ], [ %1231, %1261 ], [ %.323.ph, %.loopexit ]
  %.2 = phi i8* [ null, %80 ], [ %.05.lcssa50, %144 ], [ %.05.lcssa51, %221 ], [ %.05.lcssa54, %327 ], [ null, %483 ], [ %.1.lcssa, %548 ], [ %.05.lcssa55, %574 ], [ %663, %798 ], [ %663, %868 ], [ %663, %946 ], [ %663, %1018 ], [ %663, %1125 ], [ %663, %1222 ], [ %.05.lcssa52, %256 ], [ null, %62 ], [ %.05.lcssa53, %295 ], [ %.05.lcssa53, %279 ], [ %.05.lcssa55, %578 ], [ %663, %721 ], [ %663, %737 ], [ %663, %847 ], [ %663, %852 ], [ %663, %862 ], [ %663, %888 ], [ %663, %908 ], [ %663, %985 ], [ %663, %972 ], [ %663, %997 ], [ %663, %1142 ], [ %663, %1155 ], [ %663, %1207 ], [ %663, %1182 ], [ %663, %1195 ], [ %663, %1175 ], [ %663, %1126 ], [ %663, %1139 ], [ %663, %1264 ], [ %663, %1261 ], [ %.2.ph, %.loopexit ]
  call void @free(i8* %.236) #8
  call void @free(i8* %.2) #8
  %1268 = load i8*, i8** %22, align 8
  call void @free(i8* %1268) #8
  store i8* null, i8** %22, align 8
  call void @resp_free(%struct.response** %20)
  call void @request_free(%struct.request** %7)
  ret i32 %.323
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @http_atotm(i8*) #0 {
  %2 = alloca [256 x i8], align 16
  %3 = alloca %struct.tm, align 8, !track !429
  %4 = call i8* @setlocale(i32 2, i8* null) #8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %14

; <label>:6:                                      ; preds = %1
  %7 = call i64 @strlen(i8* %4) #14
  %8 = add i64 %7, 1
  %9 = icmp uge i64 %8, 256
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  store i8 0, i8* %11, align 16
  br label %16

; <label>:12:                                     ; preds = %6
  %13 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 1 %4, i64 %8, i1 false)
  br label %16

; <label>:14:                                     ; preds = %1
  %15 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  store i8 0, i8* %15, align 16
  br label %16

; <label>:16:                                     ; preds = %10, %12, %14
  %17 = getelementptr [2 x i8], [2 x i8]* @.str.41.523, i32 0, i32 0
  %18 = call i8* @setlocale(i32 2, i8* %17) #8
  br label %19

; <label>:19:                                     ; preds = %16, %27
  %.012 = phi i64 [ 0, %16 ], [ %28, %27 ]
  call void @unroll_loop(i32 223)
  %20 = bitcast %struct.tm* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 56, i1 false)
  %21 = getelementptr inbounds [4 x i8*], [4 x i8*]* @http_atotm.time_formats, i64 0, i64 %.012
  %22 = load i8*, i8** %21, align 8
  %23 = call i8* @strptime(i8* %0, i8* %22, %struct.tm* %3) #8, !track !430
  %24 = call zeroext i1 @check_end(i8* %23)
  br i1 %24, label %25, label %27

; <label>:25:                                     ; preds = %19
  %26 = call i64 @timegm(%struct.tm* %3) #8
  br label %.loopexit

; <label>:27:                                     ; preds = %19
  %28 = add nuw nsw i64 %.012, 1
  %29 = icmp ult i64 %28, 4
  br i1 %29, label %19, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %27
  %.0.ph = phi i64 [ -1, %27 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %25
  %.0 = phi i64 [ %26, %25 ], [ %.0.ph, %.loopexit.loopexit ]
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  %31 = load i8, i8* %30, align 16
  %32 = icmp ne i8 %31, 0
  br i1 %32, label %33, label %36

; <label>:33:                                     ; preds = %.loopexit
  %34 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i32 0, i32 0
  %35 = call i8* @setlocale(i32 2, i8* %34) #8
  br label %36

; <label>:36:                                     ; preds = %33, %.loopexit
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_hstat(%struct.http_stat*) #0 {
  %2 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 5
  %3 = load i8*, i8** %2, align 8
  call void @free(i8* %3) #8
  %4 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 5
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 6
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 6
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 7
  %9 = load i8*, i8** %8, align 8
  call void @free(i8* %9) #8
  %10 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 7
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 4
  %12 = load i8*, i8** %11, align 8
  call void @free(i8* %12) #8
  %13 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 4
  store i8* null, i8** %13, align 8
  %14 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %15 = load i8*, i8** %14, align 8
  call void @free(i8* %15) #8
  %16 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  store i8* null, i8** %16, align 8
  %17 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 16
  %18 = load i8*, i8** %17, align 8
  call void @free(i8* %18) #8
  %19 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 16
  store i8* null, i8** %19, align 8
  %20 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 9
  %21 = load i8*, i8** %20, align 8
  call void @free(i8* %21) #8
  %22 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 9
  store i8* null, i8** %22, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @check_end(i8*) #0 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %.preheader, label %42

.preheader:                                       ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %.preheader, %3
  %.01 = phi i8* [ %7, %3 ], [ %0, %.preheader ]
  call void @unroll_loop(i32 229)
  %4 = load i8, i8* %.01, align 1
  %5 = sext i8 %4 to i32
  %6 = call zeroext i1 @c_isspace(i32 %5)
  %7 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %6, label %3, label %8

; <label>:8:                                      ; preds = %3
  %.01.lcssa = phi i8* [ %.01, %3 ]
  %9 = load i8, i8* %.01.lcssa, align 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %11, label %42

; <label>:11:                                     ; preds = %8
  %12 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %14, 71
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %11
  %17 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp eq i32 %19, 77
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %16
  %22 = getelementptr inbounds i8, i8* %.01.lcssa, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp eq i32 %24, 84
  br i1 %25, label %42, label %26

; <label>:26:                                     ; preds = %21, %16, %11
  %27 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = icmp eq i32 %29, 43
  br i1 %30, label %36, label %31

; <label>:31:                                     ; preds = %26
  %32 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp eq i32 %34, 45
  br i1 %35, label %36, label %41

; <label>:36:                                     ; preds = %31, %26
  %37 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = call zeroext i1 @c_isdigit(i32 %39)
  br i1 %40, label %42, label %41

; <label>:41:                                     ; preds = %36, %31
  br label %42

; <label>:42:                                     ; preds = %8, %21, %36, %1, %41
  %.0 = phi i1 [ false, %41 ], [ false, %1 ], [ true, %36 ], [ true, %21 ], [ true, %8 ]
  ret i1 %.0
}

; Function Attrs: nounwind
declare dso_local i64 @timegm(%struct.tm*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.request* @initialize_request(%struct.url*, %struct.http_stat*, i32*, %struct.url*, i1 zeroext, i8*, i64*, i8**, i8**, i32*) #7 {
  %11 = alloca %struct.request*, align 8, !track !431
  %12 = alloca [32 x i8], align 16, !track !432
  %13 = zext i1 %4 to i8
  %14 = load i32, i32* %2, align 4
  %15 = and i32 %14, 4
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %10
  %22 = getelementptr [5 x i8], [5 x i8]* @.str.90.581, i32 0, i32 0
  br label %30

; <label>:23:                                     ; preds = %10
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, null
  %27 = getelementptr [4 x i8], [4 x i8]* @.str.89.580, i32 0, i32 0
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %29 = load i8*, i8** %28, align 8
  %.01 = select i1 %26, i8* %29, i8* %27
  br label %30

; <label>:30:                                     ; preds = %23, %21
  %.1 = phi i8* [ %22, %21 ], [ %.01, %23 ]
  %31 = icmp ne %struct.url* %3, null
  br i1 %31, label %32, label %40

; <label>:32:                                     ; preds = %30
  %33 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = icmp ne i32 %34, 1
  br i1 %35, label %36, label %40

; <label>:36:                                     ; preds = %32
  %37 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = call noalias i8* @xstrdup(i8* %38)
  br label %42

; <label>:40:                                     ; preds = %32, %30
  %41 = call i8* @url_full_path(%struct.url* %0)
  br label %42

; <label>:42:                                     ; preds = %40, %36
  %.02 = phi i8* [ %39, %36 ], [ %41, %40 ]
  %43 = call %struct.request* @request_new(i8* %.1, i8* %.02)
  store %struct.request* %43, %struct.request** %11, align 8
  %44 = load %struct.request*, %struct.request** %11, align 8
  %45 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 12
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr [8 x i8], [8 x i8]* @.str.91.582, i32 0, i32 0
  call void @request_set_header(%struct.request* %44, i8* %47, i8* %46, i32 0)
  %48 = load i32, i32* %2, align 4
  %49 = and i32 %48, 8
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %58

; <label>:51:                                     ; preds = %42
  %52 = load %struct.request*, %struct.request** %11, align 8
  %53 = getelementptr [14 x i8], [14 x i8]* @.str.92.583, i32 0, i32 0
  %54 = getelementptr [26 x i8], [26 x i8]* @.str.93.584, i32 0, i32 0
  call void @request_set_header(%struct.request* %52, i8* %53, i8* %54, i32 0)
  %55 = load %struct.request*, %struct.request** %11, align 8
  %56 = getelementptr [7 x i8], [7 x i8]* @.str.94.585, i32 0, i32 0
  %57 = getelementptr [9 x i8], [9 x i8]* @.str.95.586, i32 0, i32 0
  call void @request_set_header(%struct.request* %55, i8* %56, i8* %57, i32 0)
  br label %58

; <label>:58:                                     ; preds = %51, %42
  %59 = load i32, i32* %2, align 4
  %60 = and i32 %59, 128
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %79

; <label>:62:                                     ; preds = %58
  %63 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 18
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i32 0, i32 0
  %66 = call i32 @time_to_rfc1123(i64 %64, i8* %65, i64 32)
  %67 = icmp ne i32 %66, 25
  br i1 %67, label %68, label %74

; <label>:68:                                     ; preds = %62
  %69 = getelementptr [92 x i8], [92 x i8]* @.str.96.587, i32 0, i32 0
  %70 = call i8* @gettext(i8* %69) #8, !track !433
  call void @logputs(i32 0, i8* %70)
  %71 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i32 0, i32 0
  %72 = getelementptr [30 x i8], [30 x i8]* @.str.97.588, i32 0, i32 0
  %73 = call i8* @strcpy(i8* %71, i8* %72) #8, !track !434
  br label %74

; <label>:74:                                     ; preds = %68, %62
  %75 = load %struct.request*, %struct.request** %11, align 8
  %76 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i32 0, i32 0
  %77 = call noalias i8* @xstrdup(i8* %76)
  %78 = getelementptr [18 x i8], [18 x i8]* @.str.98.589, i32 0, i32 0
  call void @request_set_header(%struct.request* %75, i8* %78, i8* %77, i32 2)
  br label %79

; <label>:79:                                     ; preds = %74, %58
  %80 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  %81 = load i64, i64* %80, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %91

; <label>:83:                                     ; preds = %79
  %84 = load %struct.request*, %struct.request** %11, align 8
  %85 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = call i8* @number_to_static_string(i64 %86)
  %88 = getelementptr [10 x i8], [10 x i8]* @.str.100.590, i32 0, i32 0
  %89 = call i8* (i8*, ...) @aprintf(i8* %88, i8* %87)
  %90 = getelementptr [6 x i8], [6 x i8]* @.str.99.591, i32 0, i32 0
  call void @request_set_header(%struct.request* %84, i8* %90, i8* %89, i32 2)
  br label %91

; <label>:91:                                     ; preds = %79, %83
  %92 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  %93 = load i8*, i8** %92, align 8
  %94 = icmp ne i8* %93, null
  br i1 %94, label %102, label %95

; <label>:95:                                     ; preds = %91
  %96 = load %struct.request*, %struct.request** %11, align 8
  %97 = load i8*, i8** @version_string, align 8
  %98 = getelementptr [13 x i8], [13 x i8]* @.str.102.576, i32 0, i32 0
  %99 = getelementptr [10 x i8], [10 x i8]* @.str.103.577, i32 0, i32 0
  %100 = call i8* (i8*, ...) @aprintf(i8* %98, i8* %97, i8* %99)
  %101 = getelementptr [11 x i8], [11 x i8]* @.str.101.578, i32 0, i32 0
  call void @request_set_header(%struct.request* %96, i8* %101, i8* %100, i32 2)
  br label %112

; <label>:102:                                    ; preds = %91
  %103 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  %104 = load i8*, i8** %103, align 8
  %105 = load i8, i8* %104, align 1
  %106 = icmp ne i8 %105, 0
  br i1 %106, label %107, label %112

; <label>:107:                                    ; preds = %102
  %108 = load %struct.request*, %struct.request** %11, align 8
  %109 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr [11 x i8], [11 x i8]* @.str.101.578, i32 0, i32 0
  call void @request_set_header(%struct.request* %108, i8* %111, i8* %110, i32 0)
  br label %112

; <label>:112:                                    ; preds = %95, %107, %102
  %113 = load %struct.request*, %struct.request** %11, align 8
  %114 = getelementptr [7 x i8], [7 x i8]* @.str.104.592, i32 0, i32 0
  %115 = getelementptr [4 x i8], [4 x i8]* @.str.105.593, i32 0, i32 0
  call void @request_set_header(%struct.request* %113, i8* %114, i8* %115, i32 0)
  %116 = load %struct.request*, %struct.request** %11, align 8
  %117 = getelementptr [16 x i8], [16 x i8]* @.str.106.594, i32 0, i32 0
  %118 = getelementptr [9 x i8], [9 x i8]* @.str.107.595, i32 0, i32 0
  call void @request_set_header(%struct.request* %116, i8* %117, i8* %118, i32 0)
  %119 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %120 = load i8*, i8** %119, align 8
  store i8* %120, i8** %7, align 8
  %121 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 11
  %122 = load i8*, i8** %121, align 8
  store i8* %122, i8** %8, align 8
  %123 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %124 = load i8*, i8** %123, align 8
  call void @search_netrc(i8* %124, i8** %7, i8** %8, i32 0)
  %125 = load i8*, i8** %7, align 8
  %126 = icmp ne i8* %125, null
  br i1 %126, label %127, label %129

; <label>:127:                                    ; preds = %112
  %128 = load i8*, i8** %7, align 8
  br label %138

; <label>:129:                                    ; preds = %112
  %130 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 66
  %131 = load i8*, i8** %130, align 8
  %132 = icmp ne i8* %131, null
  %133 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 66
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 56
  %136 = load i8*, i8** %135, align 8
  %137 = select i1 %132, i8* %134, i8* %136
  br label %138

; <label>:138:                                    ; preds = %129, %127
  %139 = phi i8* [ %128, %127 ], [ %137, %129 ]
  store i8* %139, i8** %7, align 8
  %140 = load i8*, i8** %8, align 8
  %141 = icmp ne i8* %140, null
  br i1 %141, label %142, label %144

; <label>:142:                                    ; preds = %138
  %143 = load i8*, i8** %8, align 8
  br label %153

; <label>:144:                                    ; preds = %138
  %145 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 67
  %146 = load i8*, i8** %145, align 8
  %147 = icmp ne i8* %146, null
  %148 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 67
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 57
  %151 = load i8*, i8** %150, align 8
  %152 = select i1 %147, i8* %149, i8* %151
  br label %153

; <label>:153:                                    ; preds = %144, %142
  %154 = phi i8* [ %143, %142 ], [ %152, %144 ]
  store i8* %154, i8** %8, align 8
  %155 = icmp ne i8** %7, null
  br i1 %155, label %156, label %175

; <label>:156:                                    ; preds = %153
  %157 = load i8*, i8** %8, align 8
  %158 = icmp ne i8* %157, null
  br i1 %158, label %159, label %175

; <label>:159:                                    ; preds = %156
  %160 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %161 = load i8*, i8** %160, align 8
  %162 = icmp ne i8* %161, null
  br i1 %162, label %163, label %167

; <label>:163:                                    ; preds = %159
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 148
  %165 = load i8, i8* %164, align 1
  %166 = trunc i8 %165 to i1
  br i1 %166, label %167, label %175

; <label>:167:                                    ; preds = %163, %159
  %168 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %169 = load i8*, i8** %168, align 8
  %170 = load i8*, i8** %7, align 8
  %171 = load i8*, i8** %8, align 8
  %172 = load %struct.request*, %struct.request** %11, align 8
  %173 = call zeroext i1 @maybe_send_basic_creds(i8* %169, i8* %170, i8* %171, %struct.request* %172)
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %5, align 1
  br label %175

; <label>:175:                                    ; preds = %167, %163, %156, %153
  %176 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %177 = load i32, i32* %176, align 8
  %178 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %179 = load i32, i32* %178, align 8
  %180 = call i32 @scheme_default_port(i32 %179)
  %181 = icmp ne i32 %177, %180
  %182 = zext i1 %181 to i32
  %183 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %184 = load i8*, i8** %183, align 8
  %185 = call i8* @strchr(i8* %184, i32 58) #14, !track !435
  %186 = icmp ne i8* %185, null
  %187 = zext i1 %186 to i32
  %188 = load %struct.request*, %struct.request** %11, align 8
  %189 = sext i32 %182 to i64
  %190 = getelementptr inbounds [2 x [2 x i8*]], [2 x [2 x i8*]]* @initialize_request.hfmt, i64 0, i64 %189
  %191 = sext i32 %187 to i64
  %192 = getelementptr inbounds [2 x i8*], [2 x i8*]* %190, i64 0, i64 %191
  %193 = load i8*, i8** %192, align 8
  %194 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %197 = load i32, i32* %196, align 8
  %198 = call i8* (i8*, ...) @aprintf(i8* %193, i8* %195, i32 %197)
  %199 = getelementptr [5 x i8], [5 x i8]* @.str.112.579, i32 0, i32 0
  call void @request_set_header(%struct.request* %188, i8* %199, i8* %198, i32 2)
  %200 = trunc i8 %13 to i1
  %201 = load %struct.request*, %struct.request** %11, align 8
  %202 = getelementptr [11 x i8], [11 x i8]* @.str.59.543, i32 0, i32 0
  br i1 %200, label %203, label %205

; <label>:203:                                    ; preds = %175
  %204 = getelementptr [6 x i8], [6 x i8]* @.str.60.544, i32 0, i32 0
  call void @request_set_header(%struct.request* %201, i8* %202, i8* %204, i32 0)
  br label %212

; <label>:205:                                    ; preds = %175
  %206 = getelementptr [11 x i8], [11 x i8]* @.str.113.596, i32 0, i32 0
  call void @request_set_header(%struct.request* %201, i8* %202, i8* %206, i32 0)
  %207 = icmp ne %struct.url* %3, null
  br i1 %207, label %208, label %212

; <label>:208:                                    ; preds = %205
  %209 = load %struct.request*, %struct.request** %11, align 8
  %210 = getelementptr [17 x i8], [17 x i8]* @.str.114.597, i32 0, i32 0
  %211 = getelementptr [11 x i8], [11 x i8]* @.str.113.596, i32 0, i32 0
  call void @request_set_header(%struct.request* %209, i8* %210, i8* %211, i32 0)
  br label %212

; <label>:212:                                    ; preds = %205, %208, %203
  %213 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %214 = load i8*, i8** %213, align 8
  %215 = icmp ne i8* %214, null
  br i1 %215, label %216, label %278

; <label>:216:                                    ; preds = %212
  %217 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %218 = load i8*, i8** %217, align 8
  %219 = icmp ne i8* %218, null
  br i1 %219, label %224, label %220

; <label>:220:                                    ; preds = %216
  %221 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %222 = load i8*, i8** %221, align 8
  %223 = icmp ne i8* %222, null
  br i1 %223, label %224, label %256

; <label>:224:                                    ; preds = %220, %216
  %225 = load %struct.request*, %struct.request** %11, align 8
  %226 = getelementptr [13 x i8], [13 x i8]* @.str.64.548, i32 0, i32 0
  %227 = getelementptr [34 x i8], [34 x i8]* @.str.115.598, i32 0, i32 0
  call void @request_set_header(%struct.request* %225, i8* %226, i8* %227, i32 0)
  %228 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %229 = load i8*, i8** %228, align 8
  %230 = icmp ne i8* %229, null
  br i1 %230, label %231, label %235

; <label>:231:                                    ; preds = %224
  %232 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %233 = load i8*, i8** %232, align 8
  %234 = call i64 @strlen(i8* %233) #14
  store i64 %234, i64* %6, align 8
  br label %250

; <label>:235:                                    ; preds = %224
  %236 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %237 = load i8*, i8** %236, align 8
  %238 = call i64 @file_size(i8* %237)
  store i64 %238, i64* %6, align 8
  %239 = load i64, i64* %6, align 8
  %240 = icmp eq i64 %239, -1
  br i1 %240, label %241, label %250

; <label>:241:                                    ; preds = %235
  %242 = getelementptr [31 x i8], [31 x i8]* @.str.116.599, i32 0, i32 0
  %243 = call i8* @gettext(i8* %242) #8
  %244 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %245 = load i8*, i8** %244, align 8
  %246 = call i8* @quote(i8* %245)
  %247 = call i32* @__errno_location() #15
  %248 = load i32, i32* %247, align 4
  %249 = call i8* @strerror(i32 %248) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %243, i8* %246, i8* %249)
  call void @request_free(%struct.request** %11)
  store i32 38, i32* %9, align 4
  br label %280

; <label>:250:                                    ; preds = %235, %231
  %251 = load %struct.request*, %struct.request** %11, align 8
  %252 = load i64, i64* %6, align 8
  %253 = call i8* @number_to_static_string(i64 %252)
  %254 = call noalias i8* @xstrdup(i8* %253)
  %255 = getelementptr [15 x i8], [15 x i8]* @.str.58.542, i32 0, i32 0
  call void @request_set_header(%struct.request* %251, i8* %255, i8* %254, i32 2)
  br label %278

; <label>:256:                                    ; preds = %220
  %257 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %258 = load i8*, i8** %257, align 8
  %259 = getelementptr [5 x i8], [5 x i8]* @.str.77.561, i32 0, i32 0
  %260 = call i32 @c_strcasecmp(i8* %258, i8* %259) #14
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %274, label %262

; <label>:262:                                    ; preds = %256
  %263 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %264 = load i8*, i8** %263, align 8
  %265 = getelementptr [4 x i8], [4 x i8]* @.str.117.600, i32 0, i32 0
  %266 = call i32 @c_strcasecmp(i8* %264, i8* %265) #14
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %274, label %268

; <label>:268:                                    ; preds = %262
  %269 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %270 = load i8*, i8** %269, align 8
  %271 = getelementptr [6 x i8], [6 x i8]* @.str.118.601, i32 0, i32 0
  %272 = call i32 @c_strcasecmp(i8* %270, i8* %271) #14
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %278

; <label>:274:                                    ; preds = %268, %262, %256
  %275 = load %struct.request*, %struct.request** %11, align 8
  %276 = getelementptr [15 x i8], [15 x i8]* @.str.58.542, i32 0, i32 0
  %277 = getelementptr [2 x i8], [2 x i8]* @.str.119.602, i32 0, i32 0
  call void @request_set_header(%struct.request* %275, i8* %276, i8* %277, i32 0)
  br label %278

; <label>:278:                                    ; preds = %250, %274, %268, %212
  %279 = load %struct.request*, %struct.request** %11, align 8
  br label %280

; <label>:280:                                    ; preds = %278, %241
  %.0 = phi %struct.request* [ %279, %278 ], [ null, %241 ]
  ret %struct.request* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @request_set_header(%struct.request*, i8*, i8*, i32) #0 {
  %5 = icmp ne i8* %2, null
  br i1 %5, label %8, label %6

; <label>:6:                                      ; preds = %4
  switch i32 %3, label %57 [
    i32 1, label %7
    i32 3, label %7
  ]

; <label>:7:                                      ; preds = %6, %6
  call void @free(i8* %1) #8
  br label %57

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp slt i32 0, %10
  br i1 %11, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %8
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %23
  %indvars.iv = phi i64 [ %indvars.iv.next, %23 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 230)
  %12 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 2
  %13 = load %struct.request_header*, %struct.request_header** %12, align 8
  %14 = getelementptr inbounds %struct.request_header, %struct.request_header* %13, i64 %indvars.iv
  %15 = getelementptr inbounds %struct.request_header, %struct.request_header* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @c_strcasecmp(i8* %1, i8* %16) #14
  %18 = icmp eq i32 0, %17
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %.lr.ph
  %.lcssa = phi %struct.request_header* [ %14, %.lr.ph ]
  call void @release_header(%struct.request_header* %.lcssa)
  %20 = getelementptr inbounds %struct.request_header, %struct.request_header* %.lcssa, i32 0, i32 0
  store i8* %1, i8** %20, align 8
  %21 = getelementptr inbounds %struct.request_header, %struct.request_header* %.lcssa, i32 0, i32 1
  store i8* %2, i8** %21, align 8
  %22 = getelementptr inbounds %struct.request_header, %struct.request_header* %.lcssa, i32 0, i32 2
  store i32 %3, i32* %22, align 8
  br label %57

; <label>:23:                                     ; preds = %.lr.ph
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %24 = load i32, i32* %9, align 8
  %25 = sext i32 %24 to i64
  %26 = icmp slt i64 %indvars.iv.next, %25
  br i1 %26, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %23
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %8
  %27 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp sge i32 %28, %30
  br i1 %31, label %32, label %46

; <label>:32:                                     ; preds = %._crit_edge
  %33 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 4
  %34 = load i32, i32* %33, align 4
  %35 = shl i32 %34, 1
  store i32 %35, i32* %33, align 4
  %36 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 2
  %37 = load %struct.request_header*, %struct.request_header** %36, align 8
  %38 = bitcast %struct.request_header* %37 to i8*
  %39 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 4
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = mul i64 %41, 24
  %43 = call i8* @xrealloc(i8* %38, i64 %42)
  %44 = bitcast i8* %43 to %struct.request_header*
  %45 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 2
  store %struct.request_header* %44, %struct.request_header** %45, align 8
  br label %46

; <label>:46:                                     ; preds = %32, %._crit_edge
  %47 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 2
  %48 = load %struct.request_header*, %struct.request_header** %47, align 8
  %49 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %50 = load i32, i32* %49, align 8
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %49, align 8
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds %struct.request_header, %struct.request_header* %48, i64 %52
  %54 = getelementptr inbounds %struct.request_header, %struct.request_header* %53, i32 0, i32 0
  store i8* %1, i8** %54, align 8
  %55 = getelementptr inbounds %struct.request_header, %struct.request_header* %53, i32 0, i32 1
  store i8* %2, i8** %55, align 8
  %56 = getelementptr inbounds %struct.request_header, %struct.request_header* %53, i32 0, i32 2
  store i32 %3, i32* %56, align 8
  br label %57

; <label>:57:                                     ; preds = %7, %6, %46, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @request_set_user_header(%struct.request*, i8*) #0 {
  %3 = call i8* @strchr(i8* %1, i32 58) #14, !track !436
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %24

; <label>:5:                                      ; preds = %2
  %6 = ptrtoint i8* %3 to i64
  %7 = ptrtoint i8* %1 to i64
  %8 = sub i64 %6, %7
  %9 = trunc i64 %8 to i32
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = alloca i8, i64 %11, align 16, !track !437
  %13 = sext i32 %9 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %1, i64 %13, i1 false), !track !438
  %14 = sext i32 %9 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds i8, i8* %3, i32 1
  br label %17

; <label>:17:                                     ; preds = %17, %5
  %.0 = phi i8* [ %16, %5 ], [ %21, %17 ]
  call void @unroll_loop(i32 231)
  %18 = load i8, i8* %.0, align 1
  %19 = sext i8 %18 to i32
  %20 = call zeroext i1 @c_isspace(i32 %19)
  %21 = getelementptr inbounds i8, i8* %.0, i32 1
  br i1 %20, label %17, label %22

; <label>:22:                                     ; preds = %17
  %.0.lcssa = phi i8* [ %.0, %17 ]
  %23 = call noalias i8* @xstrdup(i8* %12)
  call void @request_set_header(%struct.request* %0, i8* %23, i8* %.0.lcssa, i32 1)
  br label %24

; <label>:24:                                     ; preds = %2, %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_proxy_configuration(%struct.url*, %struct.request*, %struct.url*, i8**) #0 {
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 80
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %17

; <label>:8:                                      ; preds = %4
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 81
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %8
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 80
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 81
  %16 = load i8*, i8** %15, align 8
  br label %22

; <label>:17:                                     ; preds = %8, %4
  %18 = getelementptr inbounds %struct.url, %struct.url* %2, i32 0, i32 10
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.url, %struct.url* %2, i32 0, i32 11
  %21 = load i8*, i8** %20, align 8
  br label %22

; <label>:22:                                     ; preds = %17, %12
  %.01 = phi i8* [ %14, %12 ], [ %19, %17 ]
  %.0 = phi i8* [ %16, %12 ], [ %21, %17 ]
  %23 = icmp ne i8* %.01, null
  %24 = icmp ne i8* %.0, null
  %or.cond = and i1 %23, %24
  br i1 %or.cond, label %25, label %27

; <label>:25:                                     ; preds = %22
  %26 = call i8* @basic_authentication_encode(i8* %.01, i8* %.0)
  store i8* %26, i8** %3, align 8
  br label %27

; <label>:27:                                     ; preds = %25, %22
  %28 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = icmp ne i32 %29, 1
  br i1 %30, label %31, label %34

; <label>:31:                                     ; preds = %27
  %32 = load i8*, i8** %3, align 8
  %33 = getelementptr [20 x i8], [20 x i8]* @.str.147, i32 0, i32 0
  call void @request_set_header(%struct.request* %1, i8* %33, i8* %32, i32 2)
  br label %34

; <label>:34:                                     ; preds = %31, %27
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @establish_connection(%struct.url*, %struct.url**, %struct.http_stat*, %struct.url*, i8**, %struct.request**, i8*, i1 zeroext, i32*) #0 {
  %10 = alloca i8, align 1
  %11 = alloca %struct.response*, align 8, !track !439
  %12 = alloca i8*, align 8, !track !440
  %13 = alloca %struct.request*, align 8, !track !441
  %14 = zext i1 %7 to i8
  store i8 0, i8* %10, align 1
  %15 = load i32, i32* %8, align 4
  %16 = load %struct.request*, %struct.request** %5, align 8
  %17 = load %struct.url*, %struct.url** %1, align 8
  %18 = trunc i8 %14 to i1
  br i1 %18, label %83, label %19

; <label>:19:                                     ; preds = %9
  %20 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 1
  %spec.select = select i1 %22, %struct.url* %0, %struct.url* %17
  %23 = getelementptr inbounds %struct.url, %struct.url* %spec.select, i32 0, i32 2
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.url, %struct.url* %spec.select, i32 0, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.url, %struct.url* %spec.select, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 1
  %30 = call zeroext i1 @persistent_available_p(i8* %24, i32 %26, i1 zeroext %29, i8* %10)
  br i1 %30, label %31, label %71

; <label>:31:                                     ; preds = %19
  %32 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = call i32 @socket_family(i32 %33, i32 1)
  %35 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 3
  %38 = load i8, i8* %37, align 4
  %39 = trunc i8 %38 to i1
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %6, align 1
  %41 = icmp eq i32 %34, 10
  br i1 %41, label %42, label %50

; <label>:42:                                     ; preds = %31
  %43 = getelementptr [41 x i8], [41 x i8]* @.str.148, i32 0, i32 0
  %44 = call i8* @gettext(i8* %43) #8
  %45 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  %46 = load i8*, i8** %45, align 8
  %47 = call i8* @quotearg_style(i32 7, i8* %46)
  %48 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 2
  %49 = load i32, i32* %48, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %44, i8* %47, i32 %49)
  br label %58

; <label>:50:                                     ; preds = %31
  %51 = getelementptr [39 x i8], [39 x i8]* @.str.149.574, i32 0, i32 0
  %52 = call i8* @gettext(i8* %51) #8
  %53 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = call i8* @quotearg_style(i32 7, i8* %54)
  %56 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 2
  %57 = load i32, i32* %56, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %52, i8* %55, i32 %57)
  br label %58

; <label>:58:                                     ; preds = %42, %50
  %59 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %60 = load i8, i8* %59, align 1
  %61 = trunc i8 %60 to i1
  br i1 %61, label %62, label %64

; <label>:62:                                     ; preds = %58
  %63 = getelementptr [16 x i8], [16 x i8]* @.str.150, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %63, i32 %36)
  br label %64

; <label>:64:                                     ; preds = %58, %62
  %65 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 4
  %66 = load i8, i8* %65, align 1
  %67 = trunc i8 %66 to i1
  br i1 %67, label %68, label %83

; <label>:68:                                     ; preds = %64
  %69 = getelementptr [14 x i8], [14 x i8]* @.str.144, i32 0, i32 0
  %70 = call zeroext i1 @request_remove_header(%struct.request* %16, i8* %69)
  br label %83

; <label>:71:                                     ; preds = %19
  %72 = load i8, i8* %10, align 1
  %73 = trunc i8 %72 to i1
  br i1 %73, label %74, label %81

; <label>:74:                                     ; preds = %71
  %75 = getelementptr [39 x i8], [39 x i8]* @.str.151, i32 0, i32 0
  %76 = call i8* @gettext(i8* %75) #8
  %77 = load i8*, i8** @exec_name, align 8
  %78 = getelementptr inbounds %struct.url, %struct.url* %spec.select, i32 0, i32 2
  %79 = load i8*, i8** %78, align 8
  %80 = call i8* @quote(i8* %79)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %76, i8* %77, i8* %80)
  br label %256

; <label>:81:                                     ; preds = %71
  %82 = icmp ne i32 %15, -1
  %spec.select1 = select i1 %82, i32 -1, i32 %15
  br label %83

; <label>:83:                                     ; preds = %81, %68, %64, %9
  %.2 = phi i32 [ %15, %9 ], [ %spec.select1, %81 ], [ %36, %68 ], [ %36, %64 ]
  %84 = icmp slt i32 %.2, 0
  br i1 %84, label %85, label %255

; <label>:85:                                     ; preds = %83
  %86 = getelementptr inbounds %struct.url, %struct.url* %17, i32 0, i32 2
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %struct.url, %struct.url* %17, i32 0, i32 3
  %89 = load i32, i32* %88, align 8
  %90 = call i32 @connect_to_host(i8* %87, i32 %89)
  %91 = icmp eq i32 %90, -100
  br i1 %91, label %256, label %92

; <label>:92:                                     ; preds = %85
  %93 = icmp slt i32 %90, 0
  br i1 %93, label %94, label %100

; <label>:94:                                     ; preds = %92
  %95 = call i32* @__errno_location() #15
  %96 = load i32, i32* %95, align 4
  %97 = call zeroext i1 @retryable_socket_connect_error(i32 %96)
  %98 = zext i1 %97 to i64
  %99 = select i1 %97, i32 3, i32 5
  br label %256

; <label>:100:                                    ; preds = %92
  %101 = icmp ne %struct.url* %3, null
  br i1 %101, label %102, label %224

; <label>:102:                                    ; preds = %100
  %103 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %104 = load i32, i32* %103, align 8
  %105 = icmp eq i32 %104, 1
  br i1 %105, label %106, label %224

; <label>:106:                                    ; preds = %102
  %107 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %110 = load i32, i32* %109, align 8
  %111 = getelementptr [6 x i8], [6 x i8]* @.str.110.575, i32 0, i32 0
  %112 = call i8* (i8*, ...) @aprintf(i8* %111, i8* %108, i32 %110)
  %113 = getelementptr [8 x i8], [8 x i8]* @.str.152, i32 0, i32 0
  %114 = call %struct.request* @request_new(i8* %113, i8* %112)
  store %struct.request* %114, %struct.request** %13, align 8
  %115 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  %116 = load i8*, i8** %115, align 8
  %117 = icmp ne i8* %116, null
  br i1 %117, label %125, label %118

; <label>:118:                                    ; preds = %106
  %119 = load %struct.request*, %struct.request** %13, align 8
  %120 = load i8*, i8** @version_string, align 8
  %121 = getelementptr [13 x i8], [13 x i8]* @.str.102.576, i32 0, i32 0
  %122 = getelementptr [10 x i8], [10 x i8]* @.str.103.577, i32 0, i32 0
  %123 = call i8* (i8*, ...) @aprintf(i8* %121, i8* %120, i8* %122)
  %124 = getelementptr [11 x i8], [11 x i8]* @.str.101.578, i32 0, i32 0
  call void @request_set_header(%struct.request* %119, i8* %124, i8* %123, i32 2)
  br label %135

; <label>:125:                                    ; preds = %106
  %126 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  %127 = load i8*, i8** %126, align 8
  %128 = load i8, i8* %127, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %135

; <label>:130:                                    ; preds = %125
  %131 = load %struct.request*, %struct.request** %13, align 8
  %132 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  %133 = load i8*, i8** %132, align 8
  %134 = getelementptr [11 x i8], [11 x i8]* @.str.101.578, i32 0, i32 0
  call void @request_set_header(%struct.request* %131, i8* %134, i8* %133, i32 0)
  br label %135

; <label>:135:                                    ; preds = %118, %130, %125
  %136 = icmp ne i8** %4, null
  br i1 %136, label %137, label %141

; <label>:137:                                    ; preds = %135
  %138 = load %struct.request*, %struct.request** %13, align 8
  %139 = load i8*, i8** %4, align 8
  %140 = getelementptr [20 x i8], [20 x i8]* @.str.147, i32 0, i32 0
  call void @request_set_header(%struct.request* %138, i8* %140, i8* %139, i32 2)
  store i8* null, i8** %4, align 8
  br label %141

; <label>:141:                                    ; preds = %137, %135
  %142 = load %struct.request*, %struct.request** %13, align 8
  %143 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %144 = load i8*, i8** %143, align 8
  %145 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %146 = load i32, i32* %145, align 8
  %147 = getelementptr [6 x i8], [6 x i8]* @.str.110.575, i32 0, i32 0
  %148 = call i8* (i8*, ...) @aprintf(i8* %147, i8* %144, i32 %146)
  %149 = getelementptr [5 x i8], [5 x i8]* @.str.112.579, i32 0, i32 0
  call void @request_set_header(%struct.request* %142, i8* %149, i8* %148, i32 2)
  %150 = load %struct.request*, %struct.request** %13, align 8
  %151 = call i32 @request_send(%struct.request* %150, i32 %90, %struct._IO_FILE* null)
  call void @request_free(%struct.request** %13)
  %152 = icmp slt i32 %151, 0
  br i1 %152, label %153, label %162

; <label>:153:                                    ; preds = %141
  %154 = load i8, i8* @pconn_active, align 1
  %155 = trunc i8 %154 to i1
  br i1 %155, label %156, label %161

; <label>:156:                                    ; preds = %153
  %157 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %90, %158
  br i1 %159, label %160, label %161

; <label>:160:                                    ; preds = %156
  call void @invalidate_persistent()
  br label %256

; <label>:161:                                    ; preds = %156, %153
  call void @fd_close(i32 %90)
  br label %256

; <label>:162:                                    ; preds = %141
  %163 = call i8* @read_http_response_head(i32 %90)
  %164 = icmp ne i8* %163, null
  br i1 %164, label %177, label %165

; <label>:165:                                    ; preds = %162
  %166 = getelementptr [35 x i8], [35 x i8]* @.str.153, i32 0, i32 0
  %167 = call i8* @gettext(i8* %166) #8
  %168 = call i8* @fd_errstr(i32 %90)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %167, i8* %168)
  %169 = load i8, i8* @pconn_active, align 1
  %170 = trunc i8 %169 to i1
  br i1 %170, label %171, label %176

; <label>:171:                                    ; preds = %165
  %172 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %173 = load i32, i32* %172, align 8
  %174 = icmp eq i32 %90, %173
  br i1 %174, label %175, label %176

; <label>:175:                                    ; preds = %171
  call void @invalidate_persistent()
  br label %256

; <label>:176:                                    ; preds = %171, %165
  call void @fd_close(i32 %90)
  br label %256

; <label>:177:                                    ; preds = %162
  store i8* null, i8** %12, align 8
  %178 = load i8, i8* %163, align 1
  %179 = icmp ne i8 %178, 0
  br i1 %179, label %181, label %180

; <label>:180:                                    ; preds = %177
  call void @free(i8* %163) #8
  br label %209

; <label>:181:                                    ; preds = %177
  %182 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %183 = load i8, i8* %182, align 1
  %184 = trunc i8 %183 to i1
  br i1 %184, label %185, label %187

; <label>:185:                                    ; preds = %181
  %186 = getelementptr [28 x i8], [28 x i8]* @.str.154, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %186, i8* %163)
  br label %187

; <label>:187:                                    ; preds = %181, %185
  %188 = call %struct.response* @resp_new(i8* %163)
  store %struct.response* %188, %struct.response** %11, align 8
  %189 = load %struct.response*, %struct.response** %11, align 8
  %190 = call i32 @resp_status(%struct.response* %189, i8** %12)
  %191 = icmp slt i32 %190, 0
  br i1 %191, label %192, label %201

; <label>:192:                                    ; preds = %187
  %193 = call i64 @time(i64* null) #8
  %194 = call i8* @datetime_str(i64 %193)
  %195 = getelementptr [4 x i8], [4 x i8]* @.str.53.537, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %195, i32 %190)
  %196 = getelementptr [18 x i8], [18 x i8]* @.str.16.500, i32 0, i32 0
  %197 = call i8* @gettext(i8* %196) #8
  %198 = getelementptr [22 x i8], [22 x i8]* @.str.54.538, i32 0, i32 0
  %199 = call i8* @gettext(i8* %198) #8, !track !442
  %200 = call i8* @quotearg_style(i32 7, i8* %199)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %197, i8* %194, i32 %190, i8* %200)
  call void @free(i8* %163) #8
  br label %256

; <label>:201:                                    ; preds = %187
  %202 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %2, i32 0, i32 9
  %203 = load i8*, i8** %202, align 8
  call void @free(i8* %203) #8
  %204 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %2, i32 0, i32 9
  store i8* null, i8** %204, align 8
  %205 = load i8*, i8** %12, align 8
  %206 = call noalias i8* @xstrdup(i8* %205)
  %207 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %2, i32 0, i32 9
  store i8* %206, i8** %207, align 8
  call void @resp_free(%struct.response** %11)
  call void @free(i8* %163) #8
  %208 = icmp ne i32 %190, 200
  br i1 %208, label %209, label %222

; <label>:209:                                    ; preds = %201, %180
  %210 = getelementptr [27 x i8], [27 x i8]* @.str.155, i32 0, i32 0
  %211 = call i8* @gettext(i8* %210) #8
  %212 = load i8*, i8** %12, align 8
  %213 = icmp ne i8* %212, null
  br i1 %213, label %214, label %217

; <label>:214:                                    ; preds = %209
  %215 = load i8*, i8** %12, align 8
  %216 = call i8* @quotearg_style(i32 7, i8* %215)
  br label %219

; <label>:217:                                    ; preds = %209
  %218 = getelementptr [2 x i8], [2 x i8]* @.str.156, i32 0, i32 0
  br label %219

; <label>:219:                                    ; preds = %217, %214
  %220 = phi i8* [ %216, %214 ], [ %218, %217 ]
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %211, i8* %220)
  %221 = load i8*, i8** %12, align 8
  call void @free(i8* %221) #8
  store i8* null, i8** %12, align 8
  br label %256

; <label>:222:                                    ; preds = %201
  %223 = load i8*, i8** %12, align 8
  call void @free(i8* %223) #8
  store i8* null, i8** %12, align 8
  br label %224

; <label>:224:                                    ; preds = %222, %102, %100
  %.02 = phi %struct.url* [ %0, %222 ], [ %17, %102 ], [ %17, %100 ]
  %225 = getelementptr inbounds %struct.url, %struct.url* %.02, i32 0, i32 1
  %226 = load i32, i32* %225, align 8
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %228, label %255

; <label>:228:                                    ; preds = %224
  %229 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %230 = load i8*, i8** %229, align 8
  %231 = call zeroext i1 @ssl_connect_wget(i32 %90, i8* %230, i32* null)
  br i1 %231, label %241, label %232

; <label>:232:                                    ; preds = %228
  %233 = load i8, i8* @pconn_active, align 1
  %234 = trunc i8 %233 to i1
  br i1 %234, label %235, label %240

; <label>:235:                                    ; preds = %232
  %236 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %237 = load i32, i32* %236, align 8
  %238 = icmp eq i32 %90, %237
  br i1 %238, label %239, label %240

; <label>:239:                                    ; preds = %235
  call void @invalidate_persistent()
  br label %256

; <label>:240:                                    ; preds = %235, %232
  call void @fd_close(i32 %90)
  br label %256

; <label>:241:                                    ; preds = %228
  %242 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %243 = load i8*, i8** %242, align 8
  %244 = call zeroext i1 @ssl_check_certificate(i32 %90, i8* %243)
  br i1 %244, label %254, label %245

; <label>:245:                                    ; preds = %241
  %246 = load i8, i8* @pconn_active, align 1
  %247 = trunc i8 %246 to i1
  br i1 %247, label %248, label %253

; <label>:248:                                    ; preds = %245
  %249 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %250 = load i32, i32* %249, align 8
  %251 = icmp eq i32 %90, %250
  br i1 %251, label %252, label %253

; <label>:252:                                    ; preds = %248
  call void @invalidate_persistent()
  br label %256

; <label>:253:                                    ; preds = %248, %245
  call void @fd_close(i32 %90)
  br label %256

; <label>:254:                                    ; preds = %241
  store i8 1, i8* %6, align 1
  br label %255

; <label>:255:                                    ; preds = %224, %254, %83
  %.3 = phi i32 [ %.2, %83 ], [ %90, %254 ], [ %90, %224 ]
  %.1 = phi %struct.url* [ %17, %83 ], [ %.02, %254 ], [ %.02, %224 ]
  store %struct.url* %.1, %struct.url** %1, align 8
  store %struct.request* %16, %struct.request** %5, align 8
  store i32 %.3, i32* %8, align 4
  br label %256

; <label>:256:                                    ; preds = %253, %252, %240, %239, %176, %175, %161, %160, %85, %255, %219, %192, %94, %74
  %.0 = phi i32 [ %99, %94 ], [ 24, %192 ], [ 4, %219 ], [ 25, %255 ], [ 1, %74 ], [ 1, %85 ], [ 44, %160 ], [ 44, %161 ], [ 24, %175 ], [ 24, %176 ], [ 4, %239 ], [ 4, %240 ], [ 46, %252 ], [ 46, %253 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @invalidate_persistent() #0 {
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %2 = load i8, i8* %1, align 1
  %3 = trunc i8 %2 to i1
  br i1 %3, label %4, label %8

; <label>:4:                                      ; preds = %0
  %5 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr [39 x i8], [39 x i8]* @.str.157, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %7, i32 %6)
  br label %8

; <label>:8:                                      ; preds = %0, %4
  store i8 0, i8* @pconn_active, align 1
  %9 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  call void @fd_close(i32 %10)
  %11 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  call void @free(i8* %12) #8
  %13 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  store i8* null, i8** %13, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.anon.65* @pconn to i8*), i8 0, i64 40, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @request_send(%struct.request*, i32, %struct._IO_FILE*) #0 {
  %4 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = call i64 @strlen(i8* %5) #14
  %7 = add i64 %6, 1
  %8 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = call i64 @strlen(i8* %9) #14
  %11 = add i64 %7, %10
  %12 = add i64 %11, 1
  %13 = add i64 %12, 8
  %14 = add i64 %13, 2
  %15 = sext i32 0 to i64
  %16 = add i64 %15, %14
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = icmp slt i32 0, %19
  br i1 %20, label %.lr.ph9.preheader, label %._crit_edge10

.lr.ph9.preheader:                                ; preds = %3
  br label %.lr.ph9

.lr.ph9:                                          ; preds = %.lr.ph9.preheader, %.lr.ph9
  %indvars.iv12 = phi i64 [ %indvars.iv.next13, %.lr.ph9 ], [ 0, %.lr.ph9.preheader ]
  %.017 = phi i32 [ %35, %.lr.ph9 ], [ %17, %.lr.ph9.preheader ]
  call void @unroll_loop(i32 232)
  %21 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 2
  %22 = load %struct.request_header*, %struct.request_header** %21, align 8
  %23 = getelementptr inbounds %struct.request_header, %struct.request_header* %22, i64 %indvars.iv12
  %24 = getelementptr inbounds %struct.request_header, %struct.request_header* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i64 @strlen(i8* %25) #14
  %27 = add i64 %26, 2
  %28 = getelementptr inbounds %struct.request_header, %struct.request_header* %23, i32 0, i32 1
  %29 = load i8*, i8** %28, align 8
  %30 = call i64 @strlen(i8* %29) #14
  %31 = add i64 %27, %30
  %32 = add i64 %31, 2
  %33 = sext i32 %.017 to i64
  %34 = add i64 %33, %32
  %35 = trunc i64 %34 to i32
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %36 = load i32, i32* %18, align 8
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %indvars.iv.next13, %37
  br i1 %38, label %.lr.ph9, label %._crit_edge10.loopexit

._crit_edge10.loopexit:                           ; preds = %.lr.ph9
  %.01.lcssa.ph = phi i32 [ %35, %.lr.ph9 ]
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %._crit_edge10.loopexit, %3
  %.01.lcssa = phi i32 [ %17, %3 ], [ %.01.lcssa.ph, %._crit_edge10.loopexit ]
  %39 = add nsw i32 %.01.lcssa, 3
  %40 = sext i32 %39 to i64
  %41 = mul i64 %40, 1
  %42 = alloca i8, i64 %41, align 16, !track !443
  %43 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = call i64 @strlen(i8* %44) #14
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = sext i32 %46 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %48, i64 %49, i1 false), !track !444
  %50 = sext i32 %46 to i64
  %51 = getelementptr inbounds i8, i8* %42, i64 %50
  %52 = getelementptr inbounds i8, i8* %51, i32 1
  store i8 32, i8* %51, align 1
  %53 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = call i64 @strlen(i8* %54) #14
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 1
  %58 = load i8*, i8** %57, align 8
  %59 = sext i32 %56 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %58, i64 %59, i1 false), !track !445
  %60 = sext i32 %56 to i64
  %61 = getelementptr inbounds i8, i8* %52, i64 %60
  %62 = getelementptr inbounds i8, i8* %61, i32 1
  store i8 32, i8* %61, align 1
  %63 = getelementptr [11 x i8], [11 x i8]* @.str.158, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %63, i64 10, i1 false), !track !446
  %64 = getelementptr inbounds i8, i8* %62, i64 10
  %65 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %66 = load i32, i32* %65, align 8
  %67 = icmp slt i32 0, %66
  br i1 %67, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge10
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %.034 = phi i8* [ %92, %.lr.ph ], [ %64, %.lr.ph.preheader ]
  call void @unroll_loop(i32 233)
  %68 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 2
  %69 = load %struct.request_header*, %struct.request_header** %68, align 8
  %70 = getelementptr inbounds %struct.request_header, %struct.request_header* %69, i64 %indvars.iv
  %71 = getelementptr inbounds %struct.request_header, %struct.request_header* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = call i64 @strlen(i8* %72) #14
  %74 = trunc i64 %73 to i32
  %75 = getelementptr inbounds %struct.request_header, %struct.request_header* %70, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = sext i32 %74 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.034, i8* align 1 %76, i64 %77, i1 false), !track !447
  %78 = sext i32 %74 to i64
  %79 = getelementptr inbounds i8, i8* %.034, i64 %78
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8 58, i8* %79, align 1
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8 32, i8* %80, align 1
  %82 = getelementptr inbounds %struct.request_header, %struct.request_header* %70, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  %84 = call i64 @strlen(i8* %83) #14
  %85 = trunc i64 %84 to i32
  %86 = getelementptr inbounds %struct.request_header, %struct.request_header* %70, i32 0, i32 1
  %87 = load i8*, i8** %86, align 8
  %88 = sext i32 %85 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %81, i8* align 1 %87, i64 %88, i1 false), !track !448
  %89 = sext i32 %85 to i64
  %90 = getelementptr inbounds i8, i8* %81, i64 %89
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8 13, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %91, i32 1
  store i8 10, i8* %91, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %93 = load i32, i32* %65, align 8
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %indvars.iv.next, %94
  br i1 %95, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.03.lcssa.ph = phi i8* [ %92, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge10
  %.03.lcssa = phi i8* [ %64, %._crit_edge10 ], [ %.03.lcssa.ph, %._crit_edge.loopexit ]
  %96 = getelementptr inbounds i8, i8* %.03.lcssa, i32 1
  store i8 13, i8* %.03.lcssa, align 1
  %97 = getelementptr inbounds i8, i8* %96, i32 1
  store i8 10, i8* %96, align 1
  %98 = getelementptr inbounds i8, i8* %97, i32 1
  store i8 0, i8* %97, align 1
  %99 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %100 = load i8, i8* %99, align 1
  %101 = trunc i8 %100 to i1
  br i1 %101, label %102, label %104

; <label>:102:                                    ; preds = %._crit_edge
  %103 = getelementptr [42 x i8], [42 x i8]* @.str.159.573, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %103, i8* %42)
  br label %104

; <label>:104:                                    ; preds = %._crit_edge, %102
  %105 = sub nsw i32 %39, 1
  %106 = call i32 @fd_write(i32 %1, i8* %42, i32 %105, double -1.000000e+00)
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %108, label %112

; <label>:108:                                    ; preds = %104
  %109 = getelementptr [34 x i8], [34 x i8]* @.str.160, i32 0, i32 0
  %110 = call i8* @gettext(i8* %109) #8
  %111 = call i8* @fd_errstr(i32 %1)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %110, i8* %111)
  br label %121

; <label>:112:                                    ; preds = %104
  %113 = icmp ne %struct._IO_FILE* %2, null
  br i1 %113, label %114, label %121

; <label>:114:                                    ; preds = %112
  %115 = sub nsw i32 %39, 1
  %116 = sext i32 %115 to i64
  %117 = call i64 @fwrite(i8* %42, i64 1, i64 %116, %struct._IO_FILE* %2)
  %118 = trunc i64 %117 to i32
  %119 = sub nsw i32 %39, 1
  %120 = icmp ne i32 %118, %119
  br i1 %120, label %122, label %121

; <label>:121:                                    ; preds = %112, %114, %108
  br label %122

; <label>:122:                                    ; preds = %114, %121
  %.0 = phi i32 [ %106, %121 ], [ -2, %114 ]
  ret i32 %.0
}

declare dso_local i64 @ftello(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @body_file_send(i32, i8*, i64, %struct._IO_FILE*) #0 {
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %6 = load i8, i8* %5, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %4
  %9 = getelementptr [27 x i8], [27 x i8]* @.str.161, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %9, i8* %1)
  br label %10

; <label>:10:                                     ; preds = %4, %8
  %11 = getelementptr [3 x i8], [3 x i8]* @.str.162, i32 0, i32 0
  %12 = call %struct._IO_FILE* @fopen(i8* %1, i8* %11), !track !449
  %13 = icmp ne %struct._IO_FILE* %12, null
  br i1 %13, label %.preheader, label %61

.preheader:                                       ; preds = %10
  call void @unroll_loop(i32 234)
  %14 = call i32 @feof(%struct._IO_FILE* %12) #8
  %15 = icmp ne i32 %14, 0
  %16 = icmp slt i64 0, %2
  %spec.select1 = select i1 %15, i1 false, i1 %16
  br i1 %spec.select1, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %17

; <label>:17:                                     ; preds = %.lr.ph, %45
  %.012 = phi i64 [ 0, %.lr.ph ], [ %47, %45 ]
  %18 = getelementptr [8192 x i8], [8192 x i8]* @body_file_send.chunk, i32 0, i32 0
  %19 = call i64 @fread(i8* %18, i64 1, i64 8192, %struct._IO_FILE* %12)
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %..loopexit_crit_edge3, label %22

; <label>:22:                                     ; preds = %17
  %23 = sub nsw i64 %2, %.012
  %24 = sext i32 %20 to i64
  %25 = icmp sle i64 %23, %24
  %26 = sub nsw i64 %2, %.012
  %27 = sext i32 %20 to i64
  %28 = select i1 %25, i64 %26, i64 %27
  %29 = trunc i64 %28 to i32
  %30 = getelementptr [8192 x i8], [8192 x i8]* @body_file_send.chunk, i32 0, i32 0
  %31 = call i32 @fd_write(i32 %0, i8* %30, i32 %29, double -1.000000e+00)
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

; <label>:33:                                     ; preds = %22
  %34 = call i32 @fclose(%struct._IO_FILE* %12)
  br label %61

; <label>:35:                                     ; preds = %22
  %36 = icmp ne %struct._IO_FILE* %3, null
  br i1 %36, label %37, label %45

; <label>:37:                                     ; preds = %35
  %38 = sext i32 %29 to i64
  %39 = getelementptr [8192 x i8], [8192 x i8]* @body_file_send.chunk, i32 0, i32 0
  %40 = call i64 @fwrite(i8* %39, i64 1, i64 %38, %struct._IO_FILE* %3)
  %41 = trunc i64 %40 to i32
  %42 = icmp ne i32 %41, %29
  br i1 %42, label %43, label %45

; <label>:43:                                     ; preds = %37
  %44 = call i32 @fclose(%struct._IO_FILE* %12)
  br label %61

; <label>:45:                                     ; preds = %37, %35
  %46 = sext i32 %29 to i64
  %47 = add nsw i64 %.012, %46
  call void @unroll_loop(i32 234)
  %48 = call i32 @feof(%struct._IO_FILE* %12) #8
  %49 = icmp ne i32 %48, 0
  %50 = icmp slt i64 %47, %2
  %spec.select = select i1 %49, i1 false, i1 %50
  br i1 %spec.select, label %17, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %45
  %split = phi i64 [ %47, %45 ]
  br label %.loopexit

..loopexit_crit_edge3:                            ; preds = %17
  %split4 = phi i64 [ %.012, %17 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge3, %..loopexit_crit_edge, %.preheader
  %.01.lcssa = phi i64 [ %split4, %..loopexit_crit_edge3 ], [ %split, %..loopexit_crit_edge ], [ 0, %.preheader ]
  %51 = call i32 @fclose(%struct._IO_FILE* %12)
  %52 = icmp slt i64 %.01.lcssa, %2
  br i1 %52, label %53, label %55

; <label>:53:                                     ; preds = %.loopexit
  %54 = call i32* @__errno_location() #15
  store i32 22, i32* %54, align 4
  br label %61

; <label>:55:                                     ; preds = %.loopexit
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %57 = load i8, i8* %56, align 1
  %58 = trunc i8 %57 to i1
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %55
  %60 = getelementptr [7 x i8], [7 x i8]* @.str.163, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %60)
  br label %61

; <label>:61:                                     ; preds = %59, %55, %10, %53, %43, %33
  %.0 = phi i32 [ -1, %53 ], [ -1, %33 ], [ -2, %43 ], [ -1, %10 ], [ 0, %55 ], [ 0, %59 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @read_http_response_head(i32) #7 {
  %2 = call i8* @fd_read_hunk(i32 %0, i8* (i8*, i8*, i32)* @response_head_terminator, i64 512, i64 65536)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.response* @resp_new(i8*) #7 {
  %2 = call noalias i8* @xcalloc(i64 1, i64 16)
  %3 = bitcast i8* %2 to %struct.response*
  %4 = getelementptr inbounds %struct.response, %struct.response* %3, i32 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = load i8, i8* %0, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %87, label %8

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.response, %struct.response* %3, i32 0, i32 1
  br label %10

.loopexit:                                        ; preds = %58
  %.05.ph = phi i32 [ %.16.lcssa, %58 ]
  %.02.ph = phi i8* [ %.2, %58 ]
  br label %10

; <label>:10:                                     ; preds = %.loopexit, %8
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %.loopexit ]
  %.05 = phi i32 [ 0, %8 ], [ %.05.ph, %.loopexit ]
  %.02 = phi i8* [ %0, %8 ], [ %.02.ph, %.loopexit ]
  call void @unroll_loop(i32 3)
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %11 = sext i32 %.05 to i64
  %12 = icmp slt i64 %11, %indvars.iv.next
  br i1 %12, label %.lr.ph14.preheader, label %._crit_edge15

.lr.ph14.preheader:                               ; preds = %10
  br label %.lr.ph14

.lr.ph14:                                         ; preds = %.lr.ph14.preheader, %.lr.ph14
  %.1612 = phi i32 [ %16, %.lr.ph14 ], [ %.05, %.lr.ph14.preheader ]
  %13 = shl i32 %.1612, 1
  %14 = sext i32 %13 to i64
  %15 = icmp slt i64 %14, 16
  %spec.select = select i1 %15, i64 16, i64 %14
  %16 = trunc i64 %spec.select to i32
  %17 = sext i32 %16 to i64
  %18 = icmp slt i64 %17, %indvars.iv.next
  br i1 %18, label %.lr.ph14, label %._crit_edge15.loopexit

._crit_edge15.loopexit:                           ; preds = %.lr.ph14
  %.08.lcssa.ph = phi i64 [ %spec.select, %.lr.ph14 ]
  %.16.lcssa.ph = phi i32 [ %16, %.lr.ph14 ]
  br label %._crit_edge15

._crit_edge15:                                    ; preds = %._crit_edge15.loopexit, %10
  %.08.lcssa = phi i64 [ 0, %10 ], [ %.08.lcssa.ph, %._crit_edge15.loopexit ]
  %.16.lcssa = phi i32 [ %.05, %10 ], [ %.16.lcssa.ph, %._crit_edge15.loopexit ]
  %19 = icmp ne i64 %.08.lcssa, 0
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %._crit_edge15
  %21 = getelementptr inbounds %struct.response, %struct.response* %3, i32 0, i32 1
  %22 = load i8**, i8*** %21, align 8
  %23 = bitcast i8** %22 to i8*
  %24 = mul i64 %.08.lcssa, 8
  %25 = call i8* @xrealloc(i8* %23, i64 %24)
  %26 = bitcast i8* %25 to i8**
  %27 = getelementptr inbounds %struct.response, %struct.response* %3, i32 0, i32 1
  store i8** %26, i8*** %27, align 8
  br label %28

; <label>:28:                                     ; preds = %._crit_edge15, %20
  %29 = load i8**, i8*** %9, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 %indvars.iv
  store i8* %.02, i8** %30, align 8
  %31 = load i8, i8* %.02, align 1
  %32 = icmp ne i8 %31, 0
  %33 = trunc i64 %indvars.iv.next to i32
  br i1 %32, label %34, label %62

; <label>:34:                                     ; preds = %28
  %35 = load i8, i8* %.02, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 13
  br i1 %37, label %38, label %43

; <label>:38:                                     ; preds = %34
  %39 = getelementptr inbounds i8, i8* %.02, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 10
  br i1 %42, label %62, label %43

; <label>:43:                                     ; preds = %38, %34
  %44 = load i8, i8* %.02, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp eq i32 %45, 10
  br i1 %46, label %62, label %.critedge.preheader

.critedge.preheader:                              ; preds = %43
  br label %.critedge

.critedge:                                        ; preds = %.critedge.backedge, %.critedge.preheader
  %.13 = phi i8* [ %.02, %.critedge.preheader ], [ %.2, %.critedge.backedge ]
  call void @unroll_loop(i32 235)
  %47 = call i8* @strchr(i8* %.13, i32 10) #14, !track !450
  %48 = icmp ne i8* %47, null
  br i1 %48, label %49, label %51

; <label>:49:                                     ; preds = %.critedge
  %50 = getelementptr inbounds i8, i8* %47, i64 1
  br label %54

; <label>:51:                                     ; preds = %.critedge
  %52 = call i64 @strlen(i8* %.13) #14
  %53 = getelementptr inbounds i8, i8* %.13, i64 %52
  br label %54

; <label>:54:                                     ; preds = %49, %51
  %.2 = phi i8* [ %50, %49 ], [ %53, %51 ]
  %55 = load i8, i8* %.2, align 1
  %56 = sext i8 %55 to i32
  %57 = icmp eq i32 %56, 32
  br i1 %57, label %.critedge.backedge, label %58

; <label>:58:                                     ; preds = %54
  %59 = load i8, i8* %.2, align 1
  %60 = sext i8 %59 to i32
  %61 = icmp eq i32 %60, 9
  br i1 %61, label %.critedge.backedge, label %.loopexit

.critedge.backedge:                               ; preds = %58, %54
  br label %.critedge

; <label>:62:                                     ; preds = %43, %38, %28
  %.lcssa = phi i32 [ %33, %43 ], [ %33, %38 ], [ %33, %28 ]
  %.1610 = phi i32 [ %.16.lcssa, %43 ], [ %.16.lcssa, %38 ], [ %.16.lcssa, %28 ]
  %63 = add nsw i32 %.lcssa, 1
  %64 = sext i32 %63 to i64
  %65 = sext i32 %.1610 to i64
  %66 = icmp slt i64 %65, %64
  br i1 %66, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %62
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.2711 = phi i32 [ %70, %.lr.ph ], [ %.1610, %.lr.ph.preheader ]
  %67 = shl i32 %.2711, 1
  %68 = sext i32 %67 to i64
  %69 = icmp slt i64 %68, 16
  %spec.select1 = select i1 %69, i64 16, i64 %68
  %70 = trunc i64 %spec.select1 to i32
  %71 = sext i32 %70 to i64
  %72 = icmp slt i64 %71, %64
  br i1 %72, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.01.lcssa.ph = phi i64 [ %spec.select1, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %62
  %.01.lcssa = phi i64 [ 0, %62 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %73 = icmp ne i64 %.01.lcssa, 0
  br i1 %73, label %74, label %82

; <label>:74:                                     ; preds = %._crit_edge
  %75 = getelementptr inbounds %struct.response, %struct.response* %3, i32 0, i32 1
  %76 = load i8**, i8*** %75, align 8
  %77 = bitcast i8** %76 to i8*
  %78 = mul i64 %.01.lcssa, 8
  %79 = call i8* @xrealloc(i8* %77, i64 %78)
  %80 = bitcast i8* %79 to i8**
  %81 = getelementptr inbounds %struct.response, %struct.response* %3, i32 0, i32 1
  store i8** %80, i8*** %81, align 8
  br label %82

; <label>:82:                                     ; preds = %._crit_edge, %74
  %83 = getelementptr inbounds %struct.response, %struct.response* %3, i32 0, i32 1
  %84 = load i8**, i8*** %83, align 8
  %85 = sext i32 %.lcssa to i64
  %86 = getelementptr inbounds i8*, i8** %84, i64 %85
  store i8* null, i8** %86, align 8
  br label %87

; <label>:87:                                     ; preds = %1, %82
  ret %struct.response* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @resp_status(%struct.response*, i8**) #0 {
  %3 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %4 = load i8**, i8*** %3, align 8
  %5 = icmp ne i8** %4, null
  br i1 %5, label %12, label %6

; <label>:6:                                      ; preds = %2
  %7 = icmp ne i8** %1, null
  br i1 %7, label %8, label %137

; <label>:8:                                      ; preds = %6
  %9 = getelementptr [30 x i8], [30 x i8]* @.str.164, i32 0, i32 0
  %10 = call i8* @gettext(i8* %9) #8, !track !451
  %11 = call noalias i8* @xstrdup(i8* %10)
  store i8* %11, i8** %1, align 8
  br label %137

; <label>:12:                                     ; preds = %2
  %13 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %14 = load i8**, i8*** %13, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %18 = load i8**, i8*** %17, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %137

; <label>:22:                                     ; preds = %12
  %23 = ptrtoint i8* %20 to i64
  %24 = ptrtoint i8* %16 to i64
  %25 = sub i64 %23, %24
  %26 = icmp slt i64 %25, 4
  br i1 %26, label %137, label %27

; <label>:27:                                     ; preds = %22
  %28 = getelementptr [5 x i8], [5 x i8]* @.str.49.533, i32 0, i32 0
  %29 = call i32 @strncmp(i8* %16, i8* %28, i64 4) #14
  %30 = icmp ne i32 0, %29
  br i1 %30, label %137, label %31

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds i8, i8* %16, i64 4
  %33 = icmp ult i8* %32, %20
  br i1 %33, label %34, label %66

; <label>:34:                                     ; preds = %31
  %35 = load i8, i8* %32, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 47
  br i1 %37, label %38, label %66

; <label>:38:                                     ; preds = %34
  %39 = getelementptr inbounds i8, i8* %32, i32 1
  br label %40

; <label>:40:                                     ; preds = %46, %38
  %.02 = phi i8* [ %39, %38 ], [ %48, %46 ]
  call void @unroll_loop(i32 236)
  %41 = icmp ult i8* %.02, %20
  br i1 %41, label %42, label %46

; <label>:42:                                     ; preds = %40
  %43 = load i8, i8* %.02, align 1
  %44 = sext i8 %43 to i32
  %45 = call zeroext i1 @c_isdigit(i32 %44)
  br label %46

; <label>:46:                                     ; preds = %42, %40
  %47 = phi i1 [ false, %40 ], [ %45, %42 ]
  %48 = getelementptr inbounds i8, i8* %.02, i32 1
  br i1 %47, label %40, label %49

; <label>:49:                                     ; preds = %46
  %.02.lcssa = phi i8* [ %.02, %46 ]
  %50 = icmp ult i8* %.02.lcssa, %20
  br i1 %50, label %51, label %56

; <label>:51:                                     ; preds = %49
  %52 = load i8, i8* %.02.lcssa, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 46
  %55 = getelementptr inbounds i8, i8* %.02.lcssa, i32 1
  %spec.select = select i1 %54, i8* %55, i8* %.02.lcssa
  br label %56

; <label>:56:                                     ; preds = %51, %49
  %.1 = phi i8* [ %.02.lcssa, %49 ], [ %spec.select, %51 ]
  br label %57

; <label>:57:                                     ; preds = %63, %56
  %.2 = phi i8* [ %.1, %56 ], [ %65, %63 ]
  call void @unroll_loop(i32 237)
  %58 = icmp ult i8* %.2, %20
  br i1 %58, label %59, label %63

; <label>:59:                                     ; preds = %57
  %60 = load i8, i8* %.2, align 1
  %61 = sext i8 %60 to i32
  %62 = call zeroext i1 @c_isdigit(i32 %61)
  br label %63

; <label>:63:                                     ; preds = %59, %57
  %64 = phi i1 [ false, %57 ], [ %62, %59 ]
  %65 = getelementptr inbounds i8, i8* %.2, i32 1
  br i1 %64, label %57, label %.loopexit

.loopexit:                                        ; preds = %63
  %.3.ph = phi i8* [ %.2, %63 ]
  br label %66

; <label>:66:                                     ; preds = %.loopexit, %34, %31
  %.3 = phi i8* [ %32, %34 ], [ %32, %31 ], [ %.3.ph, %.loopexit ]
  br label %67

; <label>:67:                                     ; preds = %73, %66
  %.4 = phi i8* [ %.3, %66 ], [ %75, %73 ]
  call void @unroll_loop(i32 238)
  %68 = icmp ult i8* %.4, %20
  br i1 %68, label %69, label %73

; <label>:69:                                     ; preds = %67
  %70 = load i8, i8* %.4, align 1
  %71 = sext i8 %70 to i32
  %72 = call zeroext i1 @c_isspace(i32 %71)
  br label %73

; <label>:73:                                     ; preds = %69, %67
  %74 = phi i1 [ false, %67 ], [ %72, %69 ]
  %75 = getelementptr inbounds i8, i8* %.4, i32 1
  br i1 %74, label %67, label %76

; <label>:76:                                     ; preds = %73
  %.4.lcssa = phi i8* [ %.4, %73 ]
  %77 = ptrtoint i8* %20 to i64
  %78 = ptrtoint i8* %.4.lcssa to i64
  %79 = sub i64 %77, %78
  %80 = icmp slt i64 %79, 3
  br i1 %80, label %137, label %81

; <label>:81:                                     ; preds = %76
  %82 = getelementptr inbounds i8, i8* %.4.lcssa, i64 0
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = call zeroext i1 @c_isdigit(i32 %84)
  br i1 %85, label %86, label %137

; <label>:86:                                     ; preds = %81
  %87 = getelementptr inbounds i8, i8* %.4.lcssa, i64 1
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = call zeroext i1 @c_isdigit(i32 %89)
  br i1 %90, label %91, label %137

; <label>:91:                                     ; preds = %86
  %92 = getelementptr inbounds i8, i8* %.4.lcssa, i64 2
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = call zeroext i1 @c_isdigit(i32 %94)
  br i1 %95, label %96, label %137

; <label>:96:                                     ; preds = %91
  %97 = getelementptr inbounds i8, i8* %.4.lcssa, i64 0
  %98 = load i8, i8* %97, align 1
  %99 = sext i8 %98 to i32
  %100 = sub nsw i32 %99, 48
  %101 = mul nsw i32 100, %100
  %102 = getelementptr inbounds i8, i8* %.4.lcssa, i64 1
  %103 = load i8, i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = sub nsw i32 %104, 48
  %106 = mul nsw i32 10, %105
  %107 = add nsw i32 %101, %106
  %108 = getelementptr inbounds i8, i8* %.4.lcssa, i64 2
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %109 to i32
  %111 = sub nsw i32 %110, 48
  %112 = add nsw i32 %107, %111
  %113 = getelementptr inbounds i8, i8* %.4.lcssa, i64 3
  %114 = icmp ne i8** %1, null
  br i1 %114, label %.preheader, label %137

.preheader:                                       ; preds = %96
  br label %115

; <label>:115:                                    ; preds = %.preheader, %121
  %.5 = phi i8* [ %123, %121 ], [ %113, %.preheader ]
  call void @unroll_loop(i32 239)
  %116 = icmp ult i8* %.5, %20
  br i1 %116, label %117, label %121

; <label>:117:                                    ; preds = %115
  %118 = load i8, i8* %.5, align 1
  %119 = sext i8 %118 to i32
  %120 = call zeroext i1 @c_isspace(i32 %119)
  br label %121

; <label>:121:                                    ; preds = %117, %115
  %122 = phi i1 [ false, %115 ], [ %120, %117 ]
  %123 = getelementptr inbounds i8, i8* %.5, i32 1
  br i1 %122, label %115, label %124

; <label>:124:                                    ; preds = %121
  %.5.lcssa = phi i8* [ %.5, %121 ]
  br label %125

; <label>:125:                                    ; preds = %132, %124
  %.01 = phi i8* [ %20, %124 ], [ %134, %132 ]
  call void @unroll_loop(i32 240)
  %126 = icmp ult i8* %.5.lcssa, %.01
  br i1 %126, label %127, label %132

; <label>:127:                                    ; preds = %125
  %128 = getelementptr inbounds i8, i8* %.01, i64 -1
  %129 = load i8, i8* %128, align 1
  %130 = sext i8 %129 to i32
  %131 = call zeroext i1 @c_isspace(i32 %130)
  br label %132

; <label>:132:                                    ; preds = %127, %125
  %133 = phi i1 [ false, %125 ], [ %131, %127 ]
  %134 = getelementptr inbounds i8, i8* %.01, i32 -1
  br i1 %133, label %125, label %135

; <label>:135:                                    ; preds = %132
  %.01.lcssa = phi i8* [ %.01, %132 ]
  %136 = call i8* @strdupdelim(i8* %.5.lcssa, i8* %.01.lcssa)
  store i8* %136, i8** %1, align 8
  br label %137

; <label>:137:                                    ; preds = %96, %135, %76, %81, %86, %91, %22, %27, %12, %6, %8
  %.0 = phi i32 [ 200, %8 ], [ 200, %6 ], [ -1, %12 ], [ -1, %27 ], [ -1, %22 ], [ -1, %91 ], [ -1, %86 ], [ -1, %81 ], [ -1, %76 ], [ %112, %135 ], [ %112, %96 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @resp_free(%struct.response**) #0 {
  %2 = load %struct.response*, %struct.response** %0, align 8
  %3 = icmp ne %struct.response* %2, null
  br i1 %3, label %4, label %10

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds %struct.response, %struct.response* %2, i32 0, i32 1
  %6 = load i8**, i8*** %5, align 8
  %7 = bitcast i8** %6 to i8*
  call void @free(i8* %7) #8
  %8 = getelementptr inbounds %struct.response, %struct.response* %2, i32 0, i32 1
  store i8** null, i8*** %8, align 8
  %9 = bitcast %struct.response* %2 to i8*
  call void @free(i8* %9) #8
  store %struct.response* null, %struct.response** %0, align 8
  br label %10

; <label>:10:                                     ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_server_response(%struct.response*, i8*) #0 {
  %3 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %4 = load i8**, i8*** %3, align 8
  %5 = icmp ne i8** %4, null
  br i1 %5, label %6, label %.loopexit

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %8 = load i8**, i8*** %7, align 8
  %9 = getelementptr inbounds i8*, i8** %8, i64 1
  %10 = load i8*, i8** %9, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %35
  %indvars.iv = phi i64 [ %indvars.iv.next, %35 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 241)
  %12 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %13 = load i8**, i8*** %12, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 %indvars.iv
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %17 = load i8**, i8*** %16, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %18 = getelementptr inbounds i8*, i8** %17, i64 %indvars.iv.next
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ult i8* %15, %19
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %.lr.ph
  %22 = getelementptr inbounds i8, i8* %19, i64 -1
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp eq i32 %24, 10
  %26 = getelementptr inbounds i8, i8* %19, i32 -1
  %spec.select = select i1 %25, i8* %26, i8* %19
  br label %27

; <label>:27:                                     ; preds = %21, %.lr.ph
  %.0 = phi i8* [ %19, %.lr.ph ], [ %spec.select, %21 ]
  %28 = icmp ult i8* %15, %.0
  br i1 %28, label %29, label %35

; <label>:29:                                     ; preds = %27
  %30 = getelementptr inbounds i8, i8* %.0, i64 -1
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 13
  %34 = getelementptr inbounds i8, i8* %.0, i32 -1
  %spec.select1 = select i1 %33, i8* %34, i8* %.0
  br label %35

; <label>:35:                                     ; preds = %29, %27
  %.1 = phi i8* [ %.0, %27 ], [ %spec.select1, %29 ]
  call void @print_response_line(i8* %1, i8* %15, i8* %.1)
  %36 = load i8**, i8*** %7, align 8
  %37 = add nuw nsw i64 %indvars.iv.next, 1
  %38 = getelementptr inbounds i8*, i8** %36, i64 %37
  %39 = load i8*, i8** %38, align 8
  %40 = icmp ne i8* %39, null
  br i1 %40, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %35
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %6, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @resp_header_copy(%struct.response*, i8*, i8*, i32) #0 {
  %5 = alloca i8*, align 8, !track !452
  %6 = alloca i8*, align 8, !track !453
  %7 = call zeroext i1 @resp_header_get(%struct.response* %0, i8* %1, i8** %5, i8** %6)
  br i1 %7, label %8, label %35

; <label>:8:                                      ; preds = %4
  %9 = icmp ne i32 %3, 0
  br i1 %9, label %10, label %35

; <label>:10:                                     ; preds = %8
  %11 = load i8*, i8** %6, align 8
  %12 = load i8*, i8** %5, align 8
  %13 = ptrtoint i8* %11 to i64
  %14 = ptrtoint i8* %12 to i64
  %15 = sub i64 %13, %14
  %16 = sub nsw i32 %3, 1
  %17 = sext i32 %16 to i64
  %18 = icmp sle i64 %15, %17
  br i1 %18, label %19, label %25

; <label>:19:                                     ; preds = %10
  %20 = load i8*, i8** %6, align 8
  %21 = load i8*, i8** %5, align 8
  %22 = ptrtoint i8* %20 to i64
  %23 = ptrtoint i8* %21 to i64
  %24 = sub i64 %22, %23
  br label %28

; <label>:25:                                     ; preds = %10
  %26 = sub nsw i32 %3, 1
  %27 = sext i32 %26 to i64
  br label %28

; <label>:28:                                     ; preds = %25, %19
  %29 = phi i64 [ %24, %19 ], [ %27, %25 ]
  %30 = trunc i64 %29 to i32
  %31 = load i8*, i8** %5, align 8
  %32 = sext i32 %30 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %31, i64 %32, i1 false), !track !454
  %33 = sext i32 %30 to i64
  %34 = getelementptr inbounds i8, i8* %2, i64 %33
  store i8 0, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %8, %28, %4
  %.0 = phi i1 [ false, %4 ], [ true, %28 ], [ true, %8 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @resp_header_locate(%struct.response*, i8*, i32, i8**, i8**) #0 {
  %6 = getelementptr inbounds %struct.response, %struct.response* %0, i32 0, i32 1
  %7 = load i8**, i8*** %6, align 8
  %8 = icmp ne i8** %7, null
  br i1 %8, label %9, label %._crit_edge

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8*, i8** %7, i64 1
  %11 = load i8*, i8** %10, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %._crit_edge

; <label>:13:                                     ; preds = %9
  %14 = call i64 @strlen(i8* %1) #14
  %15 = trunc i64 %14 to i32
  %16 = icmp sgt i32 %2, 0
  %. = select i1 %16, i32 %2, i32 1
  %17 = add nsw i32 %., 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8*, i8** %7, i64 %18
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %13
  %22 = sext i32 %. to i64
  br label %23

; <label>:23:                                     ; preds = %.lr.ph, %69
  %indvars.iv = phi i64 [ %22, %.lr.ph ], [ %indvars.iv.next, %69 ]
  call void @unroll_loop(i32 242)
  %24 = getelementptr inbounds i8*, i8** %7, i64 %indvars.iv
  %25 = load i8*, i8** %24, align 8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %26 = getelementptr inbounds i8*, i8** %7, i64 %indvars.iv.next
  %27 = load i8*, i8** %26, align 8
  %28 = ptrtoint i8* %27 to i64
  %29 = ptrtoint i8* %25 to i64
  %30 = sub i64 %28, %29
  %31 = sext i32 %15 to i64
  %32 = icmp sgt i64 %30, %31
  br i1 %32, label %33, label %69

; <label>:33:                                     ; preds = %23
  %34 = sext i32 %15 to i64
  %35 = getelementptr inbounds i8, i8* %25, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 58
  br i1 %38, label %39, label %69

; <label>:39:                                     ; preds = %33
  %40 = sext i32 %15 to i64
  %41 = call i32 @c_strncasecmp(i8* %25, i8* %1, i64 %40) #14
  %42 = icmp eq i32 0, %41
  br i1 %42, label %43, label %69

; <label>:43:                                     ; preds = %39
  %.lcssa5 = phi i8* [ %25, %39 ]
  %.lcssa = phi i8* [ %27, %39 ]
  %.1.lcssa4.wide = phi i64 [ %indvars.iv, %39 ]
  %44 = add nsw i32 %15, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %.lcssa5, i64 %45
  br label %47

; <label>:47:                                     ; preds = %53, %43
  %.02 = phi i8* [ %46, %43 ], [ %55, %53 ]
  call void @unroll_loop(i32 243)
  %48 = icmp ult i8* %.02, %.lcssa
  br i1 %48, label %49, label %53

; <label>:49:                                     ; preds = %47
  %50 = load i8, i8* %.02, align 1
  %51 = sext i8 %50 to i32
  %52 = call zeroext i1 @c_isspace(i32 %51)
  br label %53

; <label>:53:                                     ; preds = %49, %47
  %54 = phi i1 [ false, %47 ], [ %52, %49 ]
  %55 = getelementptr inbounds i8, i8* %.02, i32 1
  br i1 %54, label %47, label %56

; <label>:56:                                     ; preds = %53
  %.02.lcssa = phi i8* [ %.02, %53 ]
  %57 = trunc i64 %.1.lcssa4.wide to i32
  br label %58

; <label>:58:                                     ; preds = %65, %56
  %.01 = phi i8* [ %.lcssa, %56 ], [ %67, %65 ]
  call void @unroll_loop(i32 244)
  %59 = icmp ult i8* %.02.lcssa, %.01
  br i1 %59, label %60, label %65

; <label>:60:                                     ; preds = %58
  %61 = getelementptr inbounds i8, i8* %.01, i64 -1
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = call zeroext i1 @c_isspace(i32 %63)
  br label %65

; <label>:65:                                     ; preds = %60, %58
  %66 = phi i1 [ false, %58 ], [ %64, %60 ]
  %67 = getelementptr inbounds i8, i8* %.01, i32 -1
  br i1 %66, label %58, label %68

; <label>:68:                                     ; preds = %65
  %.01.lcssa = phi i8* [ %.01, %65 ]
  store i8* %.02.lcssa, i8** %3, align 8
  store i8* %.01.lcssa, i8** %4, align 8
  br label %._crit_edge

; <label>:69:                                     ; preds = %23, %33, %39
  %70 = add nsw i64 %indvars.iv.next, 1
  %71 = getelementptr inbounds i8*, i8** %7, i64 %70
  %72 = load i8*, i8** %71, align 8
  %73 = icmp ne i8* %72, null
  br i1 %73, label %23, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %69
  %.0.ph = phi i32 [ -1, %69 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %13, %5, %9, %68
  %.0 = phi i32 [ %57, %68 ], [ -1, %9 ], [ -1, %5 ], [ -1, %13 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @register_persistent(i8*, i32, i32, i1 zeroext) #0 {
  %5 = zext i1 %3 to i8
  %6 = load i8, i8* @pconn_active, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %4
  %9 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, %2
  br i1 %11, label %27, label %12

; <label>:12:                                     ; preds = %8
  call void @invalidate_persistent()
  br label %13

; <label>:13:                                     ; preds = %12, %4
  store i8 1, i8* @pconn_active, align 1
  %14 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  store i32 %2, i32* %14, align 8
  %15 = call noalias i8* @xstrdup(i8* %0)
  %16 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  store i8* %15, i8** %16, align 8
  %17 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 2
  store i32 %1, i32* %17, align 8
  %18 = trunc i8 %5 to i1
  %19 = zext i1 %18 to i8
  %20 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 3
  store i8 %19, i8* %20, align 4
  %21 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 4
  store i8 0, i8* %21, align 1
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %23 = load i8, i8* %22, align 1
  %24 = trunc i8 %23 to i1
  br i1 %24, label %25, label %27

; <label>:25:                                     ; preds = %13
  %26 = getelementptr [44 x i8], [44 x i8]* @.str.166, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %26, i32 %2)
  br label %27

; <label>:27:                                     ; preds = %13, %25, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @resp_header_strdup(%struct.response*, i8*) #7 {
  %3 = alloca i8*, align 8, !track !455
  %4 = alloca i8*, align 8, !track !456
  %5 = call zeroext i1 @resp_header_get(%struct.response* %0, i8* %1, i8** %3, i8** %4)
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %2
  %7 = load i8*, i8** %3, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = call i8* @strdupdelim(i8* %7, i8* %8)
  br label %10

; <label>:10:                                     ; preds = %2, %6
  %.0 = phi i8* [ %9, %6 ], [ null, %2 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @read_response_body(%struct.http_stat*, i32, %struct._IO_FILE*, i64, i64, i1 zeroext, i8*, i8*, i8*, %struct.ip_address*, i8*, i32, i8*) #0 {
  %14 = zext i1 %5 to i8
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %35

; <label>:18:                                     ; preds = %13
  %19 = call %struct._IO_FILE* @warc_tempfile()
  %20 = icmp eq %struct._IO_FILE* %19, null
  %spec.select = select i1 %20, i32 53, i32 0
  %21 = icmp eq i32 %spec.select, 0
  br i1 %21, label %22, label %29

; <label>:22:                                     ; preds = %18
  %23 = call i64 @strlen(i8* %12) #14
  %24 = trunc i64 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = call i64 @fwrite(i8* %12, i64 1, i64 %25, %struct._IO_FILE* %19)
  %27 = trunc i64 %26 to i32
  %28 = icmp ne i32 %27, %24
  %spec.select1 = select i1 %28, i32 54, i32 %spec.select
  br label %29

; <label>:29:                                     ; preds = %22, %18
  %.06 = phi i32 [ %24, %22 ], [ 0, %18 ]
  %.24 = phi i32 [ %spec.select1, %22 ], [ %spec.select, %18 ]
  %30 = icmp ne i32 %.24, 0
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %29
  %32 = icmp ne %struct._IO_FILE* %19, null
  br i1 %32, label %33, label %104

; <label>:33:                                     ; preds = %31
  %34 = call i32 @fclose(%struct._IO_FILE* %19)
  br label %104

; <label>:35:                                     ; preds = %29, %13
  %.17 = phi i32 [ 0, %13 ], [ %.06, %29 ]
  %.05 = phi %struct._IO_FILE* [ null, %13 ], [ %19, %29 ]
  %36 = icmp ne %struct._IO_FILE* %2, null
  br i1 %36, label %37, label %48

; <label>:37:                                     ; preds = %35
  %38 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 92
  %39 = load i8, i8* %38, align 1
  %40 = trunc i8 %39 to i1
  br i1 %40, label %41, label %48

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %48

; <label>:45:                                     ; preds = %41
  %46 = call i64 @strlen(i8* %12) #14
  %47 = call i64 @fwrite(i8* %12, i64 1, i64 %46, %struct._IO_FILE* %2)
  br label %48

; <label>:48:                                     ; preds = %37, %41, %45, %35
  %49 = icmp ne i64 %3, -1
  %50 = or i32 0, 1
  %spec.select2 = select i1 %49, i32 %50, i32 0
  %51 = icmp ne %struct._IO_FILE* %2, null
  br i1 %51, label %52, label %58

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp sgt i64 %54, 0
  %56 = icmp eq i64 %4, 0
  %or.cond = and i1 %55, %56
  %57 = or i32 %spec.select2, 2
  %spec.select4 = select i1 %or.cond, i32 %57, i32 %spec.select2
  br label %58

; <label>:58:                                     ; preds = %52, %48
  %.1 = phi i32 [ %spec.select2, %48 ], [ %spec.select4, %52 ]
  %59 = trunc i8 %14 to i1
  %60 = or i32 %.1, 4
  %spec.select3 = select i1 %59, i32 %60, i32 %.1
  %61 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 0
  store i64 %62, i64* %63, align 8
  %64 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 10
  store i64 0, i64* %64, align 8
  %65 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %66 = load i8*, i8** %65, align 8
  %67 = icmp ne i64 %3, -1
  %68 = select i1 %67, i64 %3, i64 0
  %69 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 10
  %72 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 0
  %73 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 11
  %74 = call i32 @fd_read_body(i8* %66, i32 %1, %struct._IO_FILE* %2, i64 %68, i64 %70, i64* %71, i64* %72, double* %73, i32 %spec.select3, %struct._IO_FILE* %.05)
  %75 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 3
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = icmp sge i32 %77, 0
  %79 = icmp ne %struct._IO_FILE* %.05, null
  br i1 %78, label %80, label %89

; <label>:80:                                     ; preds = %58
  br i1 %79, label %81, label %88

; <label>:81:                                     ; preds = %80
  %82 = sext i32 %.17 to i64
  %83 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 5
  %84 = load i8*, i8** %83, align 8
  %85 = call zeroext i1 @warc_write_response_record(i8* %6, i8* %7, i8* %8, %struct.ip_address* %9, %struct._IO_FILE* %.05, i64 %82, i8* %10, i32 %11, i8* %84)
  %86 = zext i1 %85 to i8
  %87 = trunc i8 %86 to i1
  br i1 %87, label %88, label %104

; <label>:88:                                     ; preds = %81, %80
  br label %104

; <label>:89:                                     ; preds = %58
  br i1 %79, label %90, label %92

; <label>:90:                                     ; preds = %89
  %91 = call i32 @fclose(%struct._IO_FILE* %.05)
  br label %92

; <label>:92:                                     ; preds = %90, %89
  %93 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 3
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, -2
  br i1 %95, label %104, label %96

; <label>:96:                                     ; preds = %92
  %97 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 3
  %98 = load i32, i32* %97, align 8
  %99 = icmp eq i32 %98, -3
  br i1 %99, label %104, label %100

; <label>:100:                                    ; preds = %96
  %101 = call i8* @fd_errstr(i32 %1)
  %102 = call noalias i8* @xstrdup(i8* %101)
  %103 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 4
  store i8* %102, i8** %103, align 8
  br label %104

; <label>:104:                                    ; preds = %96, %92, %81, %31, %33, %100, %88
  %.0 = phi i32 [ 35, %88 ], [ 35, %100 ], [ %.24, %33 ], [ %.24, %31 ], [ 52, %81 ], [ 21, %92 ], [ 54, %96 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @skip_short_body(i32, i64, i1 zeroext) #0 {
  %4 = alloca [513 x i8], align 16
  %5 = alloca i8*, align 8, !track !457
  %6 = zext i1 %2 to i8
  %7 = getelementptr inbounds [513 x i8], [513 x i8]* %4, i64 0, i64 512
  store i8 0, i8* %7, align 16
  %8 = icmp sgt i64 %1, 4096
  br i1 %8, label %77, label %.preheader

.preheader:                                       ; preds = %3
  call void @unroll_loop(i32 245)
  %9 = icmp sgt i64 %1, 0
  %10 = trunc i8 %6 to i1
  %spec.select2 = select i1 %9, i1 true, i1 %10
  br i1 %spec.select2, label %.lr.ph, label %.loopexit.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %11

; <label>:11:                                     ; preds = %.lr.ph, %70
  %.014 = phi i64 [ %1, %.lr.ph ], [ %53, %70 ]
  %.023 = phi i64 [ 0, %.lr.ph ], [ %.3, %70 ]
  %12 = trunc i8 %6 to i1
  br i1 %12, label %13, label %25

; <label>:13:                                     ; preds = %11
  %14 = icmp eq i64 %.023, 0
  br i1 %14, label %15, label %23

; <label>:15:                                     ; preds = %13
  %16 = call i8* @fd_read_line(i32 %0)
  %17 = icmp eq i8* %16, null
  br i1 %17, label %..loopexit.loopexit_crit_edge5, label %18

; <label>:18:                                     ; preds = %15
  %19 = call i64 @strtol(i8* %16, i8** %5, i32 16) #8, !track !458
  call void @free(i8* %16) #8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %18
  %22 = call i8* @fd_read_line(i32 %0)
  call void @free(i8* %22) #8
  br label %.loopexit

; <label>:23:                                     ; preds = %18, %13
  %.13 = phi i64 [ %.023, %13 ], [ %19, %18 ]
  %24 = icmp sle i64 %.13, 512
  %.13. = select i1 %24, i64 %.13, i64 512
  br label %25

; <label>:25:                                     ; preds = %11, %23
  %.2 = phi i64 [ %.13, %23 ], [ %.023, %11 ]
  %.1 = phi i64 [ %.13., %23 ], [ %.014, %11 ]
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %27 = load i8, i8* %26, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %32

; <label>:29:                                     ; preds = %25
  %30 = call i8* @number_to_static_string(i64 %.1)
  %31 = getelementptr [29 x i8], [29 x i8]* @.str.167, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %31, i8* %30)
  br label %32

; <label>:32:                                     ; preds = %25, %29
  %33 = getelementptr inbounds [513 x i8], [513 x i8]* %4, i32 0, i32 0
  %34 = icmp sle i64 %.1, 512
  %.1. = select i1 %34, i64 %.1, i64 512
  %35 = trunc i64 %.1. to i32
  %36 = call i32 @fd_read(i32 %0, i8* %33, i32 %35, double -1.000000e+00)
  %37 = icmp sle i32 %36, 0
  br i1 %37, label %38, label %51

; <label>:38:                                     ; preds = %32
  %.lcssa = phi i32 [ %36, %32 ]
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %40 = load i8, i8* %39, align 1
  %41 = trunc i8 %40 to i1
  br i1 %41, label %42, label %77

; <label>:42:                                     ; preds = %38
  %43 = icmp slt i32 %.lcssa, 0
  br i1 %43, label %44, label %46

; <label>:44:                                     ; preds = %42
  %45 = call i8* @fd_errstr(i32 %0)
  br label %48

; <label>:46:                                     ; preds = %42
  %47 = getelementptr [13 x i8], [13 x i8]* @.str.169, i32 0, i32 0
  br label %48

; <label>:48:                                     ; preds = %46, %44
  %49 = phi i8* [ %45, %44 ], [ %47, %46 ]
  %50 = getelementptr [18 x i8], [18 x i8]* @.str.168, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %50, i8* %49)
  br label %77

; <label>:51:                                     ; preds = %32
  %52 = sext i32 %36 to i64
  %53 = sub nsw i64 %.1, %52
  %54 = trunc i8 %6 to i1
  br i1 %54, label %55, label %63

; <label>:55:                                     ; preds = %51
  %56 = sext i32 %36 to i64
  %57 = sub nsw i64 %.2, %56
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %63

; <label>:59:                                     ; preds = %55
  %60 = call i8* @fd_read_line(i32 %0)
  %61 = icmp eq i8* %60, null
  br i1 %61, label %.loopexit1, label %62

; <label>:62:                                     ; preds = %59
  call void @free(i8* %60) #8
  br label %63

; <label>:63:                                     ; preds = %51, %62, %55
  %.3 = phi i64 [ %.2, %51 ], [ %57, %62 ], [ %57, %55 ]
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %65 = load i8, i8* %64, align 1
  %66 = trunc i8 %65 to i1
  br i1 %66, label %67, label %70

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds [513 x i8], [513 x i8]* %4, i32 0, i32 0
  %69 = getelementptr [5 x i8], [5 x i8]* @.str.170, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %69, i32 %36, i8* %68)
  br label %70

; <label>:70:                                     ; preds = %63, %67
  call void @unroll_loop(i32 245)
  %71 = icmp sgt i64 %53, 0
  %spec.select = select i1 %71, i1 true, i1 %10
  br i1 %spec.select, label %11, label %..loopexit.loopexit_crit_edge

..loopexit.loopexit_crit_edge:                    ; preds = %70
  br label %.loopexit.loopexit

..loopexit.loopexit_crit_edge5:                   ; preds = %15
  br label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %..loopexit.loopexit_crit_edge5, %..loopexit.loopexit_crit_edge, %.preheader
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %21
  %72 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %73 = load i8, i8* %72, align 1
  %74 = trunc i8 %73 to i1
  br i1 %74, label %75, label %77

; <label>:75:                                     ; preds = %.loopexit
  %76 = getelementptr [9 x i8], [9 x i8]* @.str.171, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %76)
  br label %77

.loopexit1:                                       ; preds = %59
  %.0.ph = phi i1 [ false, %59 ]
  br label %77

; <label>:77:                                     ; preds = %.loopexit1, %75, %.loopexit, %48, %38, %3
  %.0 = phi i1 [ false, %3 ], [ false, %38 ], [ false, %48 ], [ true, %.loopexit ], [ true, %75 ], [ %.0.ph, %.loopexit1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_auth(%struct.url*, i8*, i8*, %struct.response*, %struct.request*, i8*, i8*, i8*, i8*) #0 {
  %10 = alloca i8, align 1
  %11 = alloca i8*, align 8, !track !459
  %12 = alloca i8*, align 8, !track !460
  %13 = alloca i8*, align 8, !track !461
  %14 = alloca %struct.param_token, align 8, !track !462
  %15 = alloca %struct.param_token, align 8, !track !463
  %16 = load i8, i8* %7, align 1
  %17 = trunc i8 %16 to i1
  %18 = zext i1 %17 to i8
  %19 = load i8, i8* %8, align 1
  %20 = trunc i8 %19 to i1
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %10, align 1
  %22 = load i8, i8* %5, align 1
  %23 = trunc i8 %22 to i1
  %24 = zext i1 %23 to i8
  store i8 0, i8* %6, align 1
  %25 = load i8, i8* %10, align 1
  %26 = trunc i8 %25 to i1
  %.not = xor i1 %26, true
  %27 = icmp ne i8* %1, null
  %or.cond = and i1 %.not, %27
  %28 = icmp ne i8* %2, null
  %or.cond1 = and i1 %or.cond, %28
  br i1 %or.cond1, label %29, label %302

; <label>:29:                                     ; preds = %9
  store i8* null, i8** %11, align 8
  br label %30

; <label>:30:                                     ; preds = %.loopexit, %29
  %.07 = phi i32 [ 0, %29 ], [ %230, %.loopexit ]
  %.03 = phi i8* [ null, %29 ], [ %.14.lcssa, %.loopexit ]
  %.01 = phi i8* [ null, %29 ], [ %.12.lcssa, %.loopexit ]
  %.0 = phi i8* [ null, %29 ], [ %.1, %.loopexit ]
  call void @unroll_loop(i32 246)
  %31 = icmp ne i8* %.0, null
  br i1 %31, label %36, label %32

; <label>:32:                                     ; preds = %30
  %33 = getelementptr [17 x i8], [17 x i8]* @.str.172, i32 0, i32 0
  %34 = call i32 @resp_header_locate(%struct.response* %3, i8* %33, i32 %.07, i8** %12, i8** %13)
  %35 = icmp ne i32 %34, -1
  br label %36

; <label>:36:                                     ; preds = %32, %30
  %.18 = phi i32 [ %.07, %30 ], [ %34, %32 ]
  %37 = phi i1 [ false, %30 ], [ %35, %32 ]
  br i1 %37, label %38, label %231

; <label>:38:                                     ; preds = %36
  %39 = load i8*, i8** %12, align 8
  %40 = load i8*, i8** %13, align 8
  %41 = ptrtoint i8* %40 to i64
  %42 = ptrtoint i8* %39 to i64
  %43 = sub i64 %41, %42
  %44 = trunc i64 %43 to i32
  %45 = add nsw i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = alloca i8, i64 %46, align 16, !track !464
  %48 = sext i32 %44 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %39, i64 %48, i1 false), !track !465
  %49 = sext i32 %44 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  store i8 0, i8* %50, align 1
  store i8* %47, i8** %11, align 8
  %51 = icmp ne i8* %.0, null
  %52 = xor i1 %51, true
  br i1 %52, label %.lr.ph22.preheader, label %.loopexit

.lr.ph22.preheader:                               ; preds = %38
  br label %.lr.ph22

.lr.ph22:                                         ; preds = %.lr.ph22.preheader, %.critedge2
  %.1220 = phi i8* [ %.4, %.critedge2 ], [ %.01, %.lr.ph22.preheader ]
  %.1419 = phi i8* [ %.36, %.critedge2 ], [ %.03, %.lr.ph22.preheader ]
  call void @unroll_loop(i32 247)
  %53 = load i8*, i8** %11, align 8
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = call zeroext i1 @c_isspace(i32 %55)
  br i1 %56, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph22
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 248)
  %57 = load i8*, i8** %11, align 8
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %58, i8** %11, align 8
  %59 = load i8*, i8** %11, align 8
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = call zeroext i1 @c_isspace(i32 %61)
  br i1 %62, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph22
  %63 = load i8*, i8** %11, align 8
  %64 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  store i8* %63, i8** %64, align 8
  %65 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  store i8* %63, i8** %65, align 8
  call void @unroll_loop(i32 249)
  %66 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %.lr.ph7, label %.critedge

.lr.ph7:                                          ; preds = %._crit_edge
  br label %71

; <label>:71:                                     ; preds = %.lr.ph7, %78
  %72 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %73 = load i8*, i8** %72, align 8
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = call zeroext i1 @c_isspace(i32 %75)
  %77 = xor i1 %76, true
  br i1 %77, label %78, label %..critedge_crit_edge8

; <label>:78:                                     ; preds = %71
  %79 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %79, align 8
  call void @unroll_loop(i32 249)
  %82 = load i8*, i8** %66, align 8
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %71, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %78
  br label %.critedge

..critedge_crit_edge8:                            ; preds = %71
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge8, %..critedge_crit_edge, %._crit_edge
  %86 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %89 = load i8*, i8** %88, align 8
  %90 = icmp eq i8* %87, %89
  br i1 %90, label %.loopexit.loopexit, label %91

; <label>:91:                                     ; preds = %.critedge
  %92 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %93 = load i8, i8* %92, align 1
  %94 = trunc i8 %93 to i1
  br i1 %94, label %95, label %107

; <label>:95:                                     ; preds = %91
  %96 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %97 = load i8*, i8** %96, align 8
  %98 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  %100 = ptrtoint i8* %97 to i64
  %101 = ptrtoint i8* %99 to i64
  %102 = sub i64 %100, %101
  %103 = trunc i64 %102 to i32
  %104 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = getelementptr [26 x i8], [26 x i8]* @.str.173, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %106, i32 %103, i8* %105)
  br label %107

; <label>:107:                                    ; preds = %91, %95
  %108 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %111 = load i8*, i8** %110, align 8
  %112 = call zeroext i1 @known_authentication_scheme_p(i8* %109, i8* %111)
  br i1 %112, label %113, label %183

; <label>:113:                                    ; preds = %107
  %114 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr [5 x i8], [5 x i8]* @.str.174, i32 0, i32 0
  %117 = call i32 @c_strncasecmp(i8* %115, i8* %116, i64 4) #14
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %135, label %119

; <label>:119:                                    ; preds = %113
  %120 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 4
  %123 = load i8, i8* %122, align 1
  %124 = sext i8 %123 to i32
  %125 = call zeroext i1 @c_isspace(i32 %124)
  br i1 %125, label %132, label %126

; <label>:126:                                    ; preds = %119
  %127 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = getelementptr inbounds i8, i8* %128, i64 4
  %130 = load i8, i8* %129, align 1
  %131 = icmp ne i8 %130, 0
  br i1 %131, label %135, label %132

; <label>:132:                                    ; preds = %126, %119
  %.14.lcssa18 = phi i8* [ %.1419, %126 ], [ %.1419, %119 ]
  %.12.lcssa16 = phi i8* [ %.1220, %126 ], [ %.1220, %119 ]
  %133 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  br label %.loopexit

; <label>:135:                                    ; preds = %126, %113
  %136 = icmp ne i8* %.1419, null
  br i1 %136, label %159, label %137

; <label>:137:                                    ; preds = %135
  %138 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr [7 x i8], [7 x i8]* @.str.175, i32 0, i32 0
  %141 = call i32 @c_strncasecmp(i8* %139, i8* %140, i64 6) #14
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %159, label %143

; <label>:143:                                    ; preds = %137
  %144 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %145 = load i8*, i8** %144, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 6
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = call zeroext i1 @c_isspace(i32 %148)
  br i1 %149, label %156, label %150

; <label>:150:                                    ; preds = %143
  %151 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 6
  %154 = load i8, i8* %153, align 1
  %155 = icmp ne i8 %154, 0
  br i1 %155, label %159, label %156

; <label>:156:                                    ; preds = %150, %143
  %157 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  br label %183

; <label>:159:                                    ; preds = %150, %137, %135
  %160 = icmp ne i8* %.1220, null
  br i1 %160, label %183, label %161

; <label>:161:                                    ; preds = %159
  %162 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8
  %164 = getelementptr [6 x i8], [6 x i8]* @.str.176, i32 0, i32 0
  %165 = call i32 @c_strncasecmp(i8* %163, i8* %164, i64 5) #14
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %183, label %167

; <label>:167:                                    ; preds = %161
  %168 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %169 = load i8*, i8** %168, align 8
  %170 = getelementptr inbounds i8, i8* %169, i64 5
  %171 = load i8, i8* %170, align 1
  %172 = sext i8 %171 to i32
  %173 = call zeroext i1 @c_isspace(i32 %172)
  br i1 %173, label %180, label %174

; <label>:174:                                    ; preds = %167
  %175 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 5
  %178 = load i8, i8* %177, align 1
  %179 = icmp ne i8 %178, 0
  br i1 %179, label %183, label %180

; <label>:180:                                    ; preds = %174, %167
  %181 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  br label %183

; <label>:183:                                    ; preds = %159, %161, %174, %180, %156, %107
  %.36 = phi i8* [ %.1419, %107 ], [ %158, %156 ], [ %.1419, %180 ], [ %.1419, %174 ], [ %.1419, %161 ], [ %.1419, %159 ]
  %.4 = phi i8* [ %.1220, %107 ], [ %.1220, %156 ], [ %.1220, %159 ], [ %.1220, %161 ], [ %182, %180 ], [ %.1220, %174 ]
  %184 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %185 = load i8*, i8** %184, align 8
  store i8* %185, i8** %11, align 8
  %186 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %187 = load i8, i8* %186, align 1
  %188 = trunc i8 %187 to i1
  br i1 %188, label %189, label %192

; <label>:189:                                    ; preds = %183
  %190 = load i8*, i8** %11, align 8
  %191 = getelementptr [22 x i8], [22 x i8]* @.str.177, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %191, i8* %190)
  br label %192

; <label>:192:                                    ; preds = %183, %189
  %193 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %194 = getelementptr inbounds %struct.param_token, %struct.param_token* %15, i32 0, i32 0
  call void @unroll_loop(i32 250)
  %195 = call zeroext i1 @extract_param(i8** %11, %struct.param_token* %14, %struct.param_token* %15, i8 signext 44, i8* null)
  br i1 %195, label %.lr.ph10, label %.critedge2

.lr.ph10:                                         ; preds = %192
  br label %196

; <label>:196:                                    ; preds = %.lr.ph10, %228
  %197 = load i8*, i8** %193, align 8
  %198 = icmp ne i8* %197, null
  br i1 %198, label %199, label %..critedge2_crit_edge11

; <label>:199:                                    ; preds = %196
  %200 = load i8*, i8** %194, align 8
  %201 = icmp ne i8* %200, null
  br i1 %201, label %202, label %..critedge2_crit_edge12

; <label>:202:                                    ; preds = %199
  %203 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %204 = load i8, i8* %203, align 1
  %205 = trunc i8 %204 to i1
  br i1 %205, label %206, label %228

; <label>:206:                                    ; preds = %202
  %207 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 1
  %208 = load i8*, i8** %207, align 8
  %209 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %210 = load i8*, i8** %209, align 8
  %211 = ptrtoint i8* %208 to i64
  %212 = ptrtoint i8* %210 to i64
  %213 = sub i64 %211, %212
  %214 = trunc i64 %213 to i32
  %215 = getelementptr inbounds %struct.param_token, %struct.param_token* %14, i32 0, i32 0
  %216 = load i8*, i8** %215, align 8
  %217 = getelementptr inbounds %struct.param_token, %struct.param_token* %15, i32 0, i32 1
  %218 = load i8*, i8** %217, align 8
  %219 = getelementptr inbounds %struct.param_token, %struct.param_token* %15, i32 0, i32 0
  %220 = load i8*, i8** %219, align 8
  %221 = ptrtoint i8* %218 to i64
  %222 = ptrtoint i8* %220 to i64
  %223 = sub i64 %221, %222
  %224 = trunc i64 %223 to i32
  %225 = getelementptr inbounds %struct.param_token, %struct.param_token* %15, i32 0, i32 0
  %226 = load i8*, i8** %225, align 8
  %227 = getelementptr [22 x i8], [22 x i8]* @.str.178, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %227, i32 %214, i8* %216, i32 %224, i8* %226)
  br label %228

; <label>:228:                                    ; preds = %202, %206
  call void @unroll_loop(i32 250)
  %229 = call zeroext i1 @extract_param(i8** %11, %struct.param_token* %14, %struct.param_token* %15, i8 signext 44, i8* null)
  br i1 %229, label %196, label %..critedge2_crit_edge

..critedge2_crit_edge:                            ; preds = %228
  br label %.critedge2

..critedge2_crit_edge11:                          ; preds = %196
  br label %.critedge2

..critedge2_crit_edge12:                          ; preds = %199
  br label %.critedge2

.critedge2:                                       ; preds = %..critedge2_crit_edge12, %..critedge2_crit_edge11, %..critedge2_crit_edge, %192
  br i1 %52, label %.lr.ph22, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.critedge2, %.critedge
  %.14.lcssa.ph = phi i8* [ %.36, %.critedge2 ], [ %.1419, %.critedge ]
  %.12.lcssa.ph = phi i8* [ %.4, %.critedge2 ], [ %.1220, %.critedge ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %132, %38
  %.14.lcssa = phi i8* [ %.14.lcssa18, %132 ], [ %.03, %38 ], [ %.14.lcssa.ph, %.loopexit.loopexit ]
  %.12.lcssa = phi i8* [ %.12.lcssa16, %132 ], [ %.01, %38 ], [ %.12.lcssa.ph, %.loopexit.loopexit ]
  %.1 = phi i8* [ %134, %132 ], [ %.0, %38 ], [ %.0, %.loopexit.loopexit ]
  %230 = add nsw i32 %.18, 1
  br label %30

; <label>:231:                                    ; preds = %36
  %.03.lcssa = phi i8* [ %.03, %36 ]
  %.01.lcssa = phi i8* [ %.01, %36 ]
  %.0.lcssa = phi i8* [ %.0, %36 ]
  %232 = icmp ne i8* %.01.lcssa, null
  %233 = icmp ne i8* %.03.lcssa, null
  %or.cond4 = or i1 %232, %233
  %234 = icmp ne i8* %.0.lcssa, null
  %or.cond5 = or i1 %or.cond4, %234
  br i1 %or.cond5, label %238, label %235

; <label>:235:                                    ; preds = %231
  %236 = getelementptr [32 x i8], [32 x i8]* @.str.179, i32 0, i32 0
  %237 = call i8* @gettext(i8* %236) #8, !track !466
  call void @logputs(i32 1, i8* %237)
  br label %302

; <label>:238:                                    ; preds = %231
  %239 = trunc i8 %18 to i1
  %240 = icmp ne i8* %.01.lcssa, null
  %or.cond6 = and i1 %239, %240
  br i1 %or.cond6, label %302, label %241

; <label>:241:                                    ; preds = %238
  %242 = call i8* @url_full_path(%struct.url* %0)
  %243 = call noalias i8* @xmalloc(i64 4)
  %244 = bitcast i8* %243 to i32*
  store i32 25, i32* %244, align 4
  %245 = icmp ne i8* %.0.lcssa, null
  br i1 %245, label %246, label %247

; <label>:246:                                    ; preds = %241
  store i8* %.0.lcssa, i8** %11, align 8
  br label %251

; <label>:247:                                    ; preds = %241
  %248 = icmp ne i8* %.03.lcssa, null
  br i1 %248, label %249, label %250

; <label>:249:                                    ; preds = %247
  store i8* %.03.lcssa, i8** %11, align 8
  br label %251

; <label>:250:                                    ; preds = %247
  store i8* %.01.lcssa, i8** %11, align 8
  br label %251

; <label>:251:                                    ; preds = %249, %250, %246
  %252 = getelementptr [29 x i8], [29 x i8]* @.str.180, i32 0, i32 0
  %253 = call i8* @gettext(i8* %252) #8
  %254 = load i8*, i8** %11, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %253, i8* %254)
  %255 = load i8*, i8** %11, align 8
  %256 = call i8* @request_method(%struct.request* %4)
  %257 = call i8* @create_authorization_line(i8* %255, i8* %1, i8* %2, i8* %256, i8* %242, i8* %10, i32* %244)
  %258 = load i32, i32* %244, align 4
  %259 = icmp eq i32 %258, 25
  br i1 %259, label %260, label %302

; <label>:260:                                    ; preds = %251
  %261 = getelementptr [14 x i8], [14 x i8]* @.str.144, i32 0, i32 0
  call void @request_set_header(%struct.request* %4, i8* %261, i8* %257, i32 2)
  %262 = load i8*, i8** %11, align 8
  %263 = getelementptr [5 x i8], [5 x i8]* @.str.174, i32 0, i32 0
  %264 = call i32 @c_strncasecmp(i8* %262, i8* %263, i64 4) #14
  %265 = icmp ne i32 %264, 0
  br i1 %265, label %277, label %266

; <label>:266:                                    ; preds = %260
  %267 = load i8*, i8** %11, align 8
  %268 = getelementptr inbounds i8, i8* %267, i64 4
  %269 = load i8, i8* %268, align 1
  %270 = sext i8 %269 to i32
  %271 = call zeroext i1 @c_isspace(i32 %270)
  br i1 %271, label %300, label %272

; <label>:272:                                    ; preds = %266
  %273 = load i8*, i8** %11, align 8
  %274 = getelementptr inbounds i8, i8* %273, i64 4
  %275 = load i8, i8* %274, align 1
  %276 = icmp ne i8 %275, 0
  br i1 %276, label %277, label %300

; <label>:277:                                    ; preds = %272, %260
  %278 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %279 = load i8*, i8** %278, align 8
  %280 = icmp ne i8* %279, null
  br i1 %280, label %300, label %281

; <label>:281:                                    ; preds = %277
  %282 = load i8*, i8** %11, align 8
  %283 = getelementptr [6 x i8], [6 x i8]* @.str.176, i32 0, i32 0
  %284 = call i32 @c_strncasecmp(i8* %282, i8* %283, i64 5) #14
  %285 = icmp ne i32 %284, 0
  br i1 %285, label %300, label %286

; <label>:286:                                    ; preds = %281
  %287 = load i8*, i8** %11, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 5
  %289 = load i8, i8* %288, align 1
  %290 = sext i8 %289 to i32
  %291 = call zeroext i1 @c_isspace(i32 %290)
  br i1 %291, label %297, label %292

; <label>:292:                                    ; preds = %286
  %293 = load i8*, i8** %11, align 8
  %294 = getelementptr inbounds i8, i8* %293, i64 5
  %295 = load i8, i8* %294, align 1
  %296 = icmp ne i8 %295, 0
  br i1 %296, label %300, label %297

; <label>:297:                                    ; preds = %292, %286
  %298 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %299 = load i8*, i8** %298, align 8
  call void @register_basic_auth_host(i8* %299)
  br label %300

; <label>:300:                                    ; preds = %272, %266, %297, %292, %281, %277
  %.09 = phi i8 [ 1, %272 ], [ 1, %266 ], [ %24, %297 ], [ %24, %292 ], [ %24, %281 ], [ %24, %277 ]
  call void @free(i8* %242) #8
  %301 = bitcast i32* %244 to i8*
  call void @free(i8* %301) #8
  store i8 1, i8* %6, align 1
  br label %302

; <label>:302:                                    ; preds = %9, %251, %238, %235, %300
  %.314 = phi i32 [ %258, %300 ], [ 25, %9 ], [ 25, %235 ], [ %258, %251 ], [ 25, %238 ]
  %.110 = phi i8 [ %.09, %300 ], [ %24, %235 ], [ %24, %238 ], [ %24, %251 ], [ %24, %9 ]
  %303 = trunc i8 %.110 to i1
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %5, align 1
  %305 = trunc i8 %18 to i1
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %7, align 1
  %307 = load i8, i8* %10, align 1
  %308 = trunc i8 %307 to i1
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %8, align 1
  ret i32 %.314
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_file_output(%struct.url*, %struct.http_stat*, %struct.response*, i8*, i64) #0 {
  %6 = alloca i8*, align 8, !track !467
  %7 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %36, label %10

; <label>:10:                                     ; preds = %5
  store i8* null, i8** %6, align 8
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 147
  %12 = load i8, i8* %11, align 4
  %13 = trunc i8 %12 to i1
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %10
  %15 = trunc i64 %4 to i32
  %16 = getelementptr [20 x i8], [20 x i8]* @.str.200, i32 0, i32 0
  %17 = call zeroext i1 @resp_header_copy(%struct.response* %2, i8* %16, i8* %3, i32 %15)
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %14
  %19 = call zeroext i1 @parse_content_disposition(i8* %3, i8** %6)
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %18, %14, %10
  %21 = call i8* @url_file_name(%struct.url* %0, i8* null)
  %22 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  store i8* %21, i8** %22, align 8
  br label %34

; <label>:23:                                     ; preds = %18
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %25 = load i8, i8* %24, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %23
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr [46 x i8], [46 x i8]* @.str.201, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %29, i8* %28)
  br label %30

; <label>:30:                                     ; preds = %23, %27
  %31 = load i8*, i8** %6, align 8
  %32 = call i8* @url_file_name(%struct.url* %0, i8* %31)
  %33 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  store i8* %32, i8** %33, align 8
  br label %34

; <label>:34:                                     ; preds = %20, %30
  %35 = load i8*, i8** %6, align 8
  call void @free(i8* %35) #8
  store i8* null, i8** %6, align 8
  br label %36

; <label>:36:                                     ; preds = %34, %5
  %37 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 14
  %38 = load i8, i8* %37, align 8
  %39 = trunc i8 %38 to i1
  br i1 %39, label %89, label %40

; <label>:40:                                     ; preds = %36
  %41 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  %42 = load i8*, i8** %41, align 8
  %43 = call zeroext i1 @file_exists_p(i8* %42)
  br i1 %43, label %44, label %89

; <label>:44:                                     ; preds = %40
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %46 = load i8, i8* %45, align 2
  %47 = trunc i8 %46 to i1
  br i1 %47, label %48, label %52

; <label>:48:                                     ; preds = %44
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %50 = load i8*, i8** %49, align 8
  %51 = icmp ne i8* %50, null
  br i1 %51, label %52, label %102

; <label>:52:                                     ; preds = %48, %44
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %54 = load i8, i8* %53, align 2
  %55 = trunc i8 %54 to i1
  br i1 %55, label %89, label %56

; <label>:56:                                     ; preds = %52
  %57 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %58 = load i8, i8* %57, align 1
  %59 = trunc i8 %58 to i1
  br i1 %59, label %89, label %60

; <label>:60:                                     ; preds = %56
  %61 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %62 = load i8, i8* %61, align 4
  %63 = trunc i8 %62 to i1
  br i1 %63, label %89, label %64

; <label>:64:                                     ; preds = %60
  %65 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %66 = load i8, i8* %65, align 8
  %67 = trunc i8 %66 to i1
  br i1 %67, label %89, label %68

; <label>:68:                                     ; preds = %64
  %69 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %70 = load i8*, i8** %69, align 8
  %71 = icmp ne i8* %70, null
  br i1 %71, label %89, label %72

; <label>:72:                                     ; preds = %68
  %73 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %74 = load i32, i32* %73, align 8
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %89, label %76

; <label>:76:                                     ; preds = %72
  %77 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  %78 = load i8*, i8** %77, align 8
  %79 = call i8* @unique_name(i8* %78, i1 zeroext true)
  %80 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  %81 = load i8*, i8** %80, align 8
  %82 = icmp ne i8* %79, %81
  br i1 %82, label %83, label %87

; <label>:83:                                     ; preds = %76
  %84 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  %85 = load i8*, i8** %84, align 8
  call void @free(i8* %85) #8
  %86 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  store i8* null, i8** %86, align 8
  br label %87

; <label>:87:                                     ; preds = %83, %76
  %88 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 13
  store i8* %79, i8** %88, align 8
  br label %89

; <label>:89:                                     ; preds = %87, %72, %68, %64, %60, %56, %52, %40, %36
  %90 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 14
  store i8 1, i8* %90, align 8
  %91 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %92 = load i8, i8* %91, align 4
  %93 = trunc i8 %92 to i1
  br i1 %93, label %94, label %101

; <label>:94:                                     ; preds = %89
  %95 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %1, i32 0, i32 15
  %96 = load i8, i8* %95, align 1
  %97 = trunc i8 %96 to i1
  br i1 %97, label %101, label %98

; <label>:98:                                     ; preds = %94
  %99 = call i32 @set_file_timestamp(%struct.http_stat* %1)
  %100 = icmp ne i32 %99, 25
  br i1 %100, label %102, label %101

; <label>:101:                                    ; preds = %98, %94, %89
  br label %102

; <label>:102:                                    ; preds = %98, %48, %101
  %.0 = phi i32 [ 25, %101 ], [ 34, %48 ], [ %99, %98 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @parse_strict_transport_security(i8*, i64*, i8*) #0 {
  %4 = alloca i8*, align 8, !track !468
  %5 = alloca %struct.param_token, align 8, !track !469
  %6 = alloca %struct.param_token, align 8, !track !470
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8 0, i8* %7, align 1
  %8 = load i8*, i8** %4, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %73

; <label>:10:                                     ; preds = %3
  %11 = call zeroext i1 @extract_param(i8** %4, %struct.param_token* %5, %struct.param_token* %6, i8 signext 59, i8* %7)
  br i1 %11, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %10
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %47
  %.016 = phi i8 [ %.2, %47 ], [ 0, %.lr.ph.preheader ]
  %.035 = phi i8* [ %.14, %47 ], [ null, %.lr.ph.preheader ]
  call void @unroll_loop(i32 251)
  %12 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = ptrtoint i8* %13 to i64
  %17 = ptrtoint i8* %15 to i64
  %18 = sub i64 %16, %17
  %19 = icmp eq i64 %18, 7
  br i1 %19, label %20, label %32

; <label>:20:                                     ; preds = %.lr.ph
  %21 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr [8 x i8], [8 x i8]* @.str.203, i32 0, i32 0
  %24 = call i32 @c_strncasecmp(i8* %22, i8* %23, i64 7) #14
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %32, label %26

; <label>:26:                                     ; preds = %20
  call void @free(i8* %.035) #8
  %27 = getelementptr inbounds %struct.param_token, %struct.param_token* %6, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %struct.param_token, %struct.param_token* %6, i32 0, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i8* @strdupdelim(i8* %28, i8* %30)
  br label %47

; <label>:32:                                     ; preds = %20, %.lr.ph
  %33 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = ptrtoint i8* %34 to i64
  %38 = ptrtoint i8* %36 to i64
  %39 = sub i64 %37, %38
  %40 = icmp eq i64 %39, 17
  br i1 %40, label %41, label %47

; <label>:41:                                     ; preds = %32
  %42 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr [18 x i8], [18 x i8]* @.str.204, i32 0, i32 0
  %45 = call i32 @c_strncasecmp(i8* %43, i8* %44, i64 17) #14
  %46 = icmp ne i32 %45, 0
  %spec.select = select i1 %46, i8 %.016, i8 1
  br label %47

; <label>:47:                                     ; preds = %41, %26, %32
  %.14 = phi i8* [ %31, %26 ], [ %.035, %41 ], [ %.035, %32 ]
  %.2 = phi i8 [ %.016, %26 ], [ %.016, %32 ], [ %spec.select, %41 ]
  store i8 0, i8* %7, align 1
  %48 = call zeroext i1 @extract_param(i8** %4, %struct.param_token* %5, %struct.param_token* %6, i8 signext 59, i8* %7)
  br i1 %48, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %47
  %.03.lcssa.ph = phi i8* [ %.14, %47 ]
  %.01.lcssa.ph = phi i8 [ %.2, %47 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %10
  %.03.lcssa = phi i8* [ null, %10 ], [ %.03.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i8 [ 0, %10 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %49 = icmp ne i8* %.03.lcssa, null
  br i1 %49, label %50, label %71

; <label>:50:                                     ; preds = %._crit_edge
  %51 = icmp ne i64* %1, null
  br i1 %51, label %52, label %54

; <label>:52:                                     ; preds = %50
  %53 = call i64 @strtol(i8* %.03.lcssa, i8** null, i32 10) #8, !track !471
  store i64 %53, i64* %1, align 8
  br label %54

; <label>:54:                                     ; preds = %52, %50
  %55 = icmp ne i8* %2, null
  br i1 %55, label %56, label %59

; <label>:56:                                     ; preds = %54
  %57 = trunc i8 %.01.lcssa to i1
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %2, align 1
  br label %59

; <label>:59:                                     ; preds = %54, %56
  %60 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %61 = load i8, i8* %60, align 1
  %62 = trunc i8 %61 to i1
  br i1 %62, label %63, label %70

; <label>:63:                                     ; preds = %59
  %64 = trunc i8 %.01.lcssa to i1
  %65 = zext i1 %64 to i64
  %66 = getelementptr [5 x i8], [5 x i8]* @.str.68.551, i32 0, i32 0
  %67 = getelementptr [6 x i8], [6 x i8]* @.str.69.552, i32 0, i32 0
  %68 = select i1 %64, i8* %66, i8* %67
  %69 = getelementptr [71 x i8], [71 x i8]* @.str.205, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %69, i8* %.03.lcssa, i8* %68)
  br label %70

; <label>:70:                                     ; preds = %63, %59
  call void @free(i8* %.03.lcssa) #8
  br label %73

; <label>:71:                                     ; preds = %._crit_edge
  %72 = getelementptr [50 x i8], [50 x i8]* @.str.206, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %72)
  br label %73

; <label>:73:                                     ; preds = %70, %71, %3
  %.1 = phi i8 [ 0, %3 ], [ 1, %70 ], [ 0, %71 ]
  %74 = trunc i8 %.1 to i1
  ret i1 %74
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @parse_content_range(i8*, i64*, i64*, i64*) #0 {
  %5 = getelementptr [6 x i8], [6 x i8]* @.str.207, i32 0, i32 0
  %6 = call i32 @strncasecmp(i8* %0, i8* %5, i64 5) #14
  %7 = icmp eq i32 0, %6
  br i1 %7, label %8, label %22

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds i8, i8* %0, i64 5
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %11, 58
  %13 = getelementptr inbounds i8, i8* %9, i32 1
  %spec.select = select i1 %12, i8* %13, i8* %9
  br label %14

; <label>:14:                                     ; preds = %14, %8
  %.1 = phi i8* [ %spec.select, %8 ], [ %18, %14 ]
  call void @unroll_loop(i32 252)
  %15 = load i8, i8* %.1, align 1
  %16 = sext i8 %15 to i32
  %17 = call zeroext i1 @c_isspace(i32 %16)
  %18 = getelementptr inbounds i8, i8* %.1, i32 1
  br i1 %17, label %14, label %19

; <label>:19:                                     ; preds = %14
  %.1.lcssa = phi i8* [ %.1, %14 ]
  %20 = load i8, i8* %.1.lcssa, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %22, label %106

; <label>:22:                                     ; preds = %19, %4
  %.2 = phi i8* [ %0, %4 ], [ %.1.lcssa, %19 ]
  %23 = load i8, i8* %.2, align 1
  %24 = sext i8 %23 to i32
  %25 = call zeroext i1 @c_isdigit(i32 %24)
  br i1 %25, label %26, label %106

; <label>:26:                                     ; preds = %22
  %27 = load i8, i8* %.2, align 1
  %28 = sext i8 %27 to i32
  %29 = call zeroext i1 @c_isdigit(i32 %28)
  br i1 %29, label %.lr.ph18.preheader, label %._crit_edge19

.lr.ph18.preheader:                               ; preds = %26
  br label %.lr.ph18

.lr.ph18:                                         ; preds = %.lr.ph18.preheader, %.lr.ph18
  %.316 = phi i8* [ %36, %.lr.ph18 ], [ %.2, %.lr.ph18.preheader ]
  %.0215 = phi i64 [ %35, %.lr.ph18 ], [ 0, %.lr.ph18.preheader ]
  call void @unroll_loop(i32 253)
  %30 = mul nsw i64 10, %.0215
  %31 = load i8, i8* %.316, align 1
  %32 = sext i8 %31 to i32
  %33 = sub nsw i32 %32, 48
  %34 = sext i32 %33 to i64
  %35 = add nsw i64 %30, %34
  %36 = getelementptr inbounds i8, i8* %.316, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = call zeroext i1 @c_isdigit(i32 %38)
  br i1 %39, label %.lr.ph18, label %._crit_edge19.loopexit

._crit_edge19.loopexit:                           ; preds = %.lr.ph18
  %.02.lcssa.ph = phi i64 [ %35, %.lr.ph18 ]
  %.3.lcssa.ph = phi i8* [ %36, %.lr.ph18 ]
  br label %._crit_edge19

._crit_edge19:                                    ; preds = %._crit_edge19.loopexit, %26
  %.02.lcssa = phi i64 [ 0, %26 ], [ %.02.lcssa.ph, %._crit_edge19.loopexit ]
  %.3.lcssa = phi i8* [ %.2, %26 ], [ %.3.lcssa.ph, %._crit_edge19.loopexit ]
  %40 = load i8, i8* %.3.lcssa, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp ne i32 %41, 45
  br i1 %42, label %106, label %43

; <label>:43:                                     ; preds = %._crit_edge19
  %44 = getelementptr inbounds i8, i8* %.3.lcssa, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = call zeroext i1 @c_isdigit(i32 %46)
  br i1 %47, label %48, label %106

; <label>:48:                                     ; preds = %43
  store i64 %.02.lcssa, i64* %1, align 8
  %49 = getelementptr inbounds i8, i8* %.3.lcssa, i32 1
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = call zeroext i1 @c_isdigit(i32 %51)
  br i1 %52, label %.lr.ph11.preheader, label %._crit_edge12

.lr.ph11.preheader:                               ; preds = %48
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %.lr.ph11
  %.49 = phi i8* [ %59, %.lr.ph11 ], [ %49, %.lr.ph11.preheader ]
  %.138 = phi i64 [ %58, %.lr.ph11 ], [ 0, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 254)
  %53 = mul nsw i64 10, %.138
  %54 = load i8, i8* %.49, align 1
  %55 = sext i8 %54 to i32
  %56 = sub nsw i32 %55, 48
  %57 = sext i32 %56 to i64
  %58 = add nsw i64 %53, %57
  %59 = getelementptr inbounds i8, i8* %.49, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = call zeroext i1 @c_isdigit(i32 %61)
  br i1 %62, label %.lr.ph11, label %._crit_edge12.loopexit

._crit_edge12.loopexit:                           ; preds = %.lr.ph11
  %.13.lcssa.ph = phi i64 [ %58, %.lr.ph11 ]
  %.4.lcssa.ph = phi i8* [ %59, %.lr.ph11 ]
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %48
  %.13.lcssa = phi i64 [ 0, %48 ], [ %.13.lcssa.ph, %._crit_edge12.loopexit ]
  %.4.lcssa = phi i8* [ %49, %48 ], [ %.4.lcssa.ph, %._crit_edge12.loopexit ]
  %63 = load i8, i8* %.4.lcssa, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp ne i32 %64, 47
  br i1 %65, label %106, label %66

; <label>:66:                                     ; preds = %._crit_edge12
  store i64 %.13.lcssa, i64* %2, align 8
  %67 = getelementptr inbounds i8, i8* %.4.lcssa, i64 1
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = call zeroext i1 @c_isdigit(i32 %69)
  br i1 %70, label %76, label %71

; <label>:71:                                     ; preds = %66
  %72 = getelementptr inbounds i8, i8* %.4.lcssa, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %74, 42
  br i1 %75, label %76, label %106

; <label>:76:                                     ; preds = %71, %66
  %77 = load i64, i64* %2, align 8
  %78 = load i64, i64* %1, align 8
  %79 = icmp slt i64 %77, %78
  br i1 %79, label %106, label %80

; <label>:80:                                     ; preds = %76
  %81 = getelementptr inbounds i8, i8* %.4.lcssa, i32 1
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = icmp eq i32 %83, 42
  br i1 %84, label %._crit_edge, label %85

; <label>:85:                                     ; preds = %80
  %86 = load i8, i8* %81, align 1
  %87 = sext i8 %86 to i32
  %88 = call zeroext i1 @c_isdigit(i32 %87)
  br i1 %88, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %85
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.57 = phi i8* [ %95, %.lr.ph ], [ %81, %.lr.ph.preheader ]
  %.246 = phi i64 [ %94, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 255)
  %89 = mul nsw i64 10, %.246
  %90 = load i8, i8* %.57, align 1
  %91 = sext i8 %90 to i32
  %92 = sub nsw i32 %91, 48
  %93 = sext i32 %92 to i64
  %94 = add nsw i64 %89, %93
  %95 = getelementptr inbounds i8, i8* %.57, i32 1
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = call zeroext i1 @c_isdigit(i32 %97)
  br i1 %98, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.35.ph = phi i64 [ %94, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %85, %80
  %.35 = phi i64 [ -1, %80 ], [ 0, %85 ], [ %.35.ph, %._crit_edge.loopexit ]
  store i64 %.35, i64* %3, align 8
  %99 = load i64, i64* %3, align 8
  %100 = load i64, i64* %2, align 8
  %101 = icmp sle i64 %99, %100
  br i1 %101, label %102, label %105

; <label>:102:                                    ; preds = %._crit_edge
  %103 = load i64, i64* %3, align 8
  %104 = icmp ne i64 %103, -1
  br i1 %104, label %106, label %105

; <label>:105:                                    ; preds = %102, %._crit_edge
  br label %106

; <label>:106:                                    ; preds = %102, %76, %71, %._crit_edge12, %._crit_edge19, %43, %22, %19, %105
  %.0 = phi i1 [ true, %105 ], [ false, %19 ], [ false, %22 ], [ false, %43 ], [ false, %._crit_edge19 ], [ false, %._crit_edge12 ], [ false, %71 ], [ false, %76 ], [ false, %102 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_content_type(i32*, i8*) #0 {
  %3 = icmp ne i8* %1, null
  br i1 %3, label %4, label %12

; <label>:4:                                      ; preds = %2
  %5 = getelementptr [10 x i8], [10 x i8]* @.str.208, i32 0, i32 0
  %6 = call i32 @strncasecmp(i8* %1, i8* %5, i64 9) #14
  %7 = icmp eq i32 0, %6
  br i1 %7, label %12, label %8

; <label>:8:                                      ; preds = %4
  %9 = getelementptr [22 x i8], [22 x i8]* @.str.209, i32 0, i32 0
  %10 = call i32 @strncasecmp(i8* %1, i8* %9, i64 21) #14
  %11 = icmp eq i32 0, %10
  br i1 %11, label %12, label %15

; <label>:12:                                     ; preds = %8, %4, %2
  %13 = load i32, i32* %0, align 4
  %14 = or i32 %13, 1
  store i32 %14, i32* %0, align 4
  br label %18

; <label>:15:                                     ; preds = %8
  %16 = load i32, i32* %0, align 4
  %17 = and i32 %16, -2
  store i32 %17, i32* %0, align 4
  br label %18

; <label>:18:                                     ; preds = %15, %12
  %19 = icmp ne i8* %1, null
  br i1 %19, label %20, label %27

; <label>:20:                                     ; preds = %18
  %21 = getelementptr [9 x i8], [9 x i8]* @.str.210, i32 0, i32 0
  %22 = call i32 @strncasecmp(i8* %1, i8* %21, i64 8) #14
  %23 = icmp eq i32 0, %22
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %20
  %25 = load i32, i32* %0, align 4
  %26 = or i32 %25, 64
  store i32 %26, i32* %0, align 4
  br label %30

; <label>:27:                                     ; preds = %20, %18
  %28 = load i32, i32* %0, align 4
  %29 = and i32 %28, -65
  store i32 %29, i32* %0, align 4
  br label %30

; <label>:30:                                     ; preds = %27, %24
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @ensure_extension(%struct.http_stat*, i8*, i32*) #0 {
  %4 = alloca [8 x i8], align 1, !track !472
  %5 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %6 = load i8*, i8** %5, align 8
  %7 = call i8* @strrchr(i8* %6, i32 46) #14, !track !473
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 0
  store i8 0, i8* %8, align 1
  %9 = call i64 @strlen(i8* %1) #14
  %10 = trunc i64 %9 to i32
  %11 = icmp eq i32 %10, 5
  br i1 %11, label %12, label %19

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  %14 = sub nsw i32 %10, 1
  %15 = sext i32 %14 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %1, i64 %15, i1 false), !track !474
  %16 = sub nsw i32 %10, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %17
  store i8 0, i8* %18, align 1
  br label %19

; <label>:19:                                     ; preds = %12, %3
  %20 = icmp eq i8* %7, null
  br i1 %20, label %28, label %21

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  %23 = call i32 @strcasecmp(i8* %7, i8* %22) #14
  %24 = icmp eq i32 0, %23
  br i1 %24, label %86, label %25

; <label>:25:                                     ; preds = %21
  %26 = call i32 @strcasecmp(i8* %7, i8* %1) #14
  %27 = icmp eq i32 0, %26
  br i1 %27, label %86, label %28

; <label>:28:                                     ; preds = %25, %19
  %29 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %30 = load i8*, i8** %29, align 8
  %31 = call i64 @strlen(i8* %30) #14
  %32 = trunc i64 %31 to i32
  %33 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %34 = load i8*, i8** %33, align 8
  %35 = add nsw i32 %32, 24
  %36 = add nsw i32 %35, %10
  %37 = sext i32 %36 to i64
  %38 = call i8* @xrealloc(i8* %34, i64 %37)
  %39 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  store i8* %38, i8** %39, align 8
  %40 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %41 = load i8*, i8** %40, align 8
  %42 = sext i32 %32 to i64
  %43 = getelementptr inbounds i8, i8* %41, i64 %42
  %44 = call i8* @strcpy(i8* %43, i8* %1) #8, !track !475
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %46 = load i8, i8* %45, align 2
  %47 = trunc i8 %46 to i1
  br i1 %47, label %83, label %48

; <label>:48:                                     ; preds = %28
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %50 = load i8, i8* %49, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %83, label %52

; <label>:52:                                     ; preds = %48
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %54 = load i8, i8* %53, align 4
  %55 = trunc i8 %54 to i1
  br i1 %55, label %83, label %56

; <label>:56:                                     ; preds = %52
  %57 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %58 = load i8, i8* %57, align 8
  %59 = trunc i8 %58 to i1
  br i1 %59, label %83, label %60

; <label>:60:                                     ; preds = %56
  %61 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %62 = load i8*, i8** %61, align 8
  %63 = icmp ne i8* %62, null
  br i1 %63, label %83, label %64

; <label>:64:                                     ; preds = %60
  %65 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %66 = load i32, i32* %65, align 8
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %83, label %68

; <label>:68:                                     ; preds = %64
  %69 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %70 = load i8*, i8** %69, align 8
  %71 = call zeroext i1 @file_exists_p(i8* %70)
  br i1 %71, label %.preheader, label %83

.preheader:                                       ; preds = %68
  br label %72

; <label>:72:                                     ; preds = %.preheader, %72
  %.0 = phi i32 [ %77, %72 ], [ 1, %.preheader ]
  call void @unroll_loop(i32 256)
  %73 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %74 = load i8*, i8** %73, align 8
  %75 = sext i32 %32 to i64
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = add nuw nsw i32 %.0, 1
  %78 = getelementptr [6 x i8], [6 x i8]* @.str.211, i32 0, i32 0
  %79 = call i32 (i8*, i8*, ...) @sprintf(i8* %76, i8* %78, i32 %.0, i8* %1) #8
  %80 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %81 = load i8*, i8** %80, align 8
  %82 = call zeroext i1 @file_exists_p(i8* %81)
  br i1 %82, label %72, label %.loopexit

.loopexit:                                        ; preds = %72
  br label %83

; <label>:83:                                     ; preds = %.loopexit, %68, %64, %60, %56, %52, %48, %28
  %84 = load i32, i32* %2, align 4
  %85 = or i32 %84, 32
  store i32 %85, i32* %2, align 4
  br label %86

; <label>:86:                                     ; preds = %83, %25, %21
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @open_output_stream(%struct.http_stat*, i32, %struct._IO_FILE**) #0 {
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  br i1 %5, label %100, label %6

; <label>:6:                                      ; preds = %3
  %7 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %8 = load i8*, i8** %7, align 8
  %9 = call i32 @mkalldirs(i8* %8)
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %11 = load i32, i32* %10, align 8
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %6
  %14 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %15 = load i8*, i8** %14, align 8
  call void @rotate_backups(i8* %15)
  br label %16

; <label>:16:                                     ; preds = %13, %6
  %17 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %25

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr [3 x i8], [3 x i8]* @.str.212, i32 0, i32 0
  %24 = call %struct._IO_FILE* @fopen(i8* %22, i8* %23), !track !476
  store %struct._IO_FILE* %24, %struct._IO_FILE** %2, align 8
  br label %90

; <label>:25:                                     ; preds = %16
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %27 = load i8, i8* %26, align 2
  %28 = trunc i8 %27 to i1
  br i1 %28, label %50, label %29

; <label>:29:                                     ; preds = %25
  %30 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %31 = load i8, i8* %30, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %50, label %33

; <label>:33:                                     ; preds = %29
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %35 = load i8, i8* %34, align 4
  %36 = trunc i8 %35 to i1
  br i1 %36, label %50, label %37

; <label>:37:                                     ; preds = %33
  %38 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %39 = load i8, i8* %38, align 8
  %40 = trunc i8 %39 to i1
  br i1 %40, label %50, label %41

; <label>:41:                                     ; preds = %37
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %43 = load i8*, i8** %42, align 8
  %44 = icmp ne i8* %43, null
  br i1 %44, label %50, label %45

; <label>:45:                                     ; preds = %41
  %46 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %47 = load i32, i32* %46, align 8
  %48 = icmp sgt i32 %47, 0
  %49 = icmp sgt i32 %1, 0
  %or.cond = or i1 %48, %49
  br i1 %or.cond, label %50, label %75

; <label>:50:                                     ; preds = %45, %41, %37, %33, %29, %25
  %51 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 18
  %52 = load i8, i8* %51, align 1
  %53 = trunc i8 %52 to i1
  br i1 %53, label %54, label %70

; <label>:54:                                     ; preds = %50
  %55 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %56 = load i8*, i8** %55, align 8
  %57 = call zeroext i1 @file_exists_p(i8* %56)
  br i1 %57, label %58, label %70

; <label>:58:                                     ; preds = %54
  %59 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 @unlink(i8* %60) #8
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %70

; <label>:63:                                     ; preds = %58
  %64 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %65 = load i8*, i8** %64, align 8
  %66 = call i32* @__errno_location() #15
  %67 = load i32, i32* %66, align 4
  %68 = call i8* @strerror(i32 %67) #8
  %69 = getelementptr [8 x i8], [8 x i8]* @.str.213, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %69, i8* %65, i8* %68)
  br label %125

; <label>:70:                                     ; preds = %58, %54, %50
  %71 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr [3 x i8], [3 x i8]* @.str.214, i32 0, i32 0
  %74 = call %struct._IO_FILE* @fopen(i8* %72, i8* %73), !track !477
  store %struct._IO_FILE* %74, %struct._IO_FILE** %2, align 8
  br label %90

; <label>:75:                                     ; preds = %45
  %76 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %77 = load i8*, i8** %76, align 8
  %78 = call %struct._IO_FILE* @fopen_excl(i8* %77, i32 1)
  store %struct._IO_FILE* %78, %struct._IO_FILE** %2, align 8
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8
  %80 = icmp ne %struct._IO_FILE* %79, null
  br i1 %80, label %90, label %81

; <label>:81:                                     ; preds = %75
  %82 = call i32* @__errno_location() #15
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 17
  br i1 %84, label %85, label %90

; <label>:85:                                     ; preds = %81
  %86 = getelementptr [31 x i8], [31 x i8]* @.str.215, i32 0, i32 0
  %87 = call i8* @gettext(i8* %86) #8
  %88 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %89 = load i8*, i8** %88, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %87, i8* %89)
  br label %125

; <label>:90:                                     ; preds = %70, %81, %75, %20
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8
  %92 = icmp ne %struct._IO_FILE* %91, null
  br i1 %92, label %102, label %93

; <label>:93:                                     ; preds = %90
  %94 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %95 = load i8*, i8** %94, align 8
  %96 = call i32* @__errno_location() #15
  %97 = load i32, i32* %96, align 4
  %98 = call i8* @strerror(i32 %97) #8
  %99 = getelementptr [8 x i8], [8 x i8]* @.str.213, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %99, i8* %95, i8* %98)
  br label %125

; <label>:100:                                    ; preds = %3
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  store %struct._IO_FILE* %101, %struct._IO_FILE** %2, align 8
  br label %102

; <label>:102:                                    ; preds = %90, %100
  %103 = getelementptr [15 x i8], [15 x i8]* @.str.216, i32 0, i32 0
  %104 = call i8* @gettext(i8* %103) #8
  %105 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %106 = load i8*, i8** %105, align 8
  %107 = load i8, i8* %106, align 1
  %108 = sext i8 %107 to i32
  %109 = icmp eq i32 %108, 45
  br i1 %109, label %110, label %119

; <label>:110:                                    ; preds = %102
  %111 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp ne i8 %114, 0
  br i1 %115, label %119, label %116

; <label>:116:                                    ; preds = %110
  %117 = getelementptr [7 x i8], [7 x i8]* @.str.217, i32 0, i32 0
  %118 = call i8* @quote(i8* %117)
  br label %123

; <label>:119:                                    ; preds = %110, %102
  %120 = getelementptr inbounds %struct.http_stat, %struct.http_stat* %0, i32 0, i32 13
  %121 = load i8*, i8** %120, align 8
  %122 = call i8* @quote(i8* %121)
  br label %123

; <label>:123:                                    ; preds = %119, %116
  %124 = phi i8* [ %118, %116 ], [ %122, %119 ]
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %104, i8* %124)
  br label %125

; <label>:125:                                    ; preds = %123, %93, %85, %63
  %.0 = phi i32 [ 25, %123 ], [ 19, %93 ], [ 47, %63 ], [ 20, %85 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @request_free(%struct.request**) #0 {
  %2 = load %struct.request*, %struct.request** %0, align 8
  %3 = icmp ne %struct.request* %2, null
  br i1 %3, label %4, label %22

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds %struct.request, %struct.request* %2, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.request, %struct.request* %2, i32 0, i32 1
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.request, %struct.request* %2, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 0, %9
  br i1 %10, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 118)
  %11 = getelementptr inbounds %struct.request, %struct.request* %2, i32 0, i32 2
  %12 = load %struct.request_header*, %struct.request_header** %11, align 8
  %13 = getelementptr inbounds %struct.request_header, %struct.request_header* %12, i64 %indvars.iv
  call void @release_header(%struct.request_header* %13)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %14 = load i32, i32* %8, align 8
  %15 = sext i32 %14 to i64
  %16 = icmp slt i64 %indvars.iv.next, %15
  br i1 %16, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %17 = getelementptr inbounds %struct.request, %struct.request* %2, i32 0, i32 2
  %18 = load %struct.request_header*, %struct.request_header** %17, align 8
  %19 = bitcast %struct.request_header* %18 to i8*
  call void @free(i8* %19) #8
  %20 = getelementptr inbounds %struct.request, %struct.request* %2, i32 0, i32 2
  store %struct.request_header* null, %struct.request_header** %20, align 8
  %21 = bitcast %struct.request* %2 to i8*
  call void @free(i8* %21) #8
  store %struct.request* null, %struct.request** %0, align 8
  br label %22

; <label>:22:                                     ; preds = %1, %._crit_edge
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @release_header(%struct.request_header*) #0 {
  %2 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 2
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %19 [
    i32 3, label %12
    i32 1, label %4
    i32 2, label %8
  ]

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 0
  store i8* null, i8** %7, align 8
  br label %19

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  call void @free(i8* %10) #8
  %11 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 1
  store i8* null, i8** %11, align 8
  br label %19

; <label>:12:                                     ; preds = %1
  %13 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @free(i8* %14) #8
  %15 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 0
  store i8* null, i8** %15, align 8
  %16 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  call void @free(i8* %17) #8
  %18 = getelementptr inbounds %struct.request_header, %struct.request_header* %0, i32 0, i32 1
  store i8* null, i8** %18, align 8
  br label %19

; <label>:19:                                     ; preds = %1, %12, %8, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @parse_content_disposition(i8*, i8**) #0 {
  %3 = alloca i8*, align 8, !track !478
  %4 = alloca %struct.param_token, align 8, !track !479
  %5 = alloca %struct.param_token, align 8, !track !480
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8, !track !481
  %8 = alloca i8*, align 8, !track !482
  store i8* %0, i8** %3, align 8
  store i8 0, i8* %6, align 1
  store i8* null, i8** %7, align 8
  store i8* null, i8** %8, align 8
  %9 = call zeroext i1 @extract_param(i8** %3, %struct.param_token* %4, %struct.param_token* %5, i8 signext 59, i8* %6)
  br i1 %9, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %106
  call void @unroll_loop(i32 119)
  %10 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %11 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = icmp eq i64 %16, 8
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %.lr.ph
  %19 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr [9 x i8], [9 x i8]* @.str.202, i32 0, i32 0
  %22 = call i32 @c_strncasecmp(i8* %20, i8* %21, i64 8) #14
  %23 = icmp ne i32 %22, 0
  %24 = xor i1 %23, true
  br label %25

; <label>:25:                                     ; preds = %18, %.lr.ph
  %26 = phi i1 [ false, %.lr.ph ], [ %24, %18 ]
  %27 = zext i1 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %106

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %106

; <label>:33:                                     ; preds = %29
  %34 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = ptrtoint i8* %37 to i64
  %41 = ptrtoint i8* %39 to i64
  %42 = sub i64 %40, %41
  %43 = call i8* @memrchr(i8* %35, i32 47, i64 %42) #14
  %44 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = ptrtoint i8* %47 to i64
  %51 = ptrtoint i8* %49 to i64
  %52 = sub i64 %50, %51
  %53 = call i8* @memrchr(i8* %45, i32 92, i64 %52) #14
  %54 = icmp ne i8* %43, null
  %55 = icmp ne i8* %53, null
  %or.cond = and i1 %54, %55
  br i1 %or.cond, label %56, label %60

; <label>:56:                                     ; preds = %33
  %57 = icmp uge i8* %43, %53
  %. = select i1 %57, i8* %43, i8* %53
  %58 = getelementptr inbounds i8, i8* %., i64 1
  %59 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  store i8* %58, i8** %59, align 8
  br label %67

; <label>:60:                                     ; preds = %33
  %61 = icmp ne i8* %43, null
  %62 = icmp ne i8* %53, null
  %or.cond1 = or i1 %61, %62
  br i1 %or.cond1, label %63, label %67

; <label>:63:                                     ; preds = %60
  %64 = icmp ne i8* %43, null
  %.2 = select i1 %64, i8* %43, i8* %53
  %65 = getelementptr inbounds i8, i8* %.2, i64 1
  %66 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  store i8* %65, i8** %66, align 8
  br label %67

; <label>:67:                                     ; preds = %63, %60, %56
  %68 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %71 = load i8*, i8** %70, align 8
  %72 = icmp eq i8* %69, %71
  br i1 %72, label %106, label %73

; <label>:73:                                     ; preds = %67
  %74 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %75 = load i8*, i8** %74, align 8
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %77, 42
  br i1 %78, label %79, label %87

; <label>:79:                                     ; preds = %73
  %80 = getelementptr inbounds %struct.param_token, %struct.param_token* %4, i32 0, i32 1
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 1
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = call zeroext i1 @c_isdigit(i32 %84)
  %86 = xor i1 %85, true
  br label %87

; <label>:87:                                     ; preds = %79, %73
  %88 = phi i1 [ false, %73 ], [ %86, %79 ]
  %89 = zext i1 %88 to i8
  %90 = trunc i8 %89 to i1
  %.3 = select i1 %90, i8** %7, i8** %8
  %91 = load i8*, i8** %.3, align 8
  %92 = icmp ne i8* %91, null
  br i1 %92, label %93, label %96

; <label>:93:                                     ; preds = %87
  %94 = load i8, i8* %6, align 1
  %95 = trunc i8 %94 to i1
  call void @append_value_to_filename(i8** %.3, %struct.param_token* %5, i1 zeroext %95)
  br label %106

; <label>:96:                                     ; preds = %87
  %97 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %struct.param_token, %struct.param_token* %5, i32 0, i32 1
  %100 = load i8*, i8** %99, align 8
  %101 = call i8* @strdupdelim(i8* %98, i8* %100)
  store i8* %101, i8** %.3, align 8
  %102 = load i8, i8* %6, align 1
  %103 = trunc i8 %102 to i1
  br i1 %103, label %104, label %106

; <label>:104:                                    ; preds = %96
  %105 = load i8*, i8** %.3, align 8
  call void @url_unescape(i8* %105)
  br label %106

; <label>:106:                                    ; preds = %25, %29, %96, %104, %93, %67
  store i8 0, i8* %6, align 1
  %107 = call zeroext i1 @extract_param(i8** %3, %struct.param_token* %4, %struct.param_token* %5, i8 signext 59, i8* %6)
  br i1 %107, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %106
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %108 = load i8*, i8** %7, align 8
  %109 = icmp ne i8* %108, null
  br i1 %109, label %110, label %113

; <label>:110:                                    ; preds = %._crit_edge
  %111 = load i8*, i8** %8, align 8
  call void @free(i8* %111) #8
  store i8* null, i8** %8, align 8
  %112 = load i8*, i8** %7, align 8
  store i8* %112, i8** %1, align 8
  br label %116

; <label>:113:                                    ; preds = %._crit_edge
  %114 = load i8*, i8** %7, align 8
  call void @free(i8* %114) #8
  store i8* null, i8** %7, align 8
  %115 = load i8*, i8** %8, align 8
  store i8* %115, i8** %1, align 8
  br label %116

; <label>:116:                                    ; preds = %113, %110
  %117 = load i8*, i8** %1, align 8
  %118 = icmp ne i8* %117, null
  %.4 = select i1 %118, i1 true, i1 false
  ret i1 %.4
}

; Function Attrs: noinline nounwind uwtable
define internal void @append_value_to_filename(i8**, %struct.param_token*, i1 zeroext) #0 {
  %4 = zext i1 %2 to i8
  %5 = load i8*, i8** %0, align 8
  %6 = call i64 @strlen(i8* %5) #14
  %7 = trunc i64 %6 to i32
  %8 = load i8*, i8** %0, align 8
  %9 = call i64 @strlen(i8* %8) #14
  %10 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %11 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = add i64 %9, %16
  %18 = trunc i64 %17 to i32
  %19 = load i8*, i8** %0, align 8
  %20 = add nsw i32 %18, 1
  %21 = sext i32 %20 to i64
  %22 = call i8* @xrealloc(i8* %19, i64 %21)
  store i8* %22, i8** %0, align 8
  %23 = load i8*, i8** %0, align 8
  %24 = sext i32 %7 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 1
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.param_token, %struct.param_token* %1, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %29 to i64
  %33 = ptrtoint i8* %31 to i64
  %34 = sub i64 %32, %33
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %27, i64 %34, i1 false), !track !483
  %35 = load i8*, i8** %0, align 8
  %36 = sext i32 %18 to i64
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  store i8 0, i8* %37, align 1
  %38 = trunc i8 %4 to i1
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %3
  %40 = load i8*, i8** %0, align 8
  %41 = sext i32 %7 to i64
  %42 = getelementptr inbounds i8, i8* %40, i64 %41
  call void @url_unescape(i8* %42)
  br label %43

; <label>:43:                                     ; preds = %39, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @known_authentication_scheme_p(i8*, i8*) #0 {
  %3 = icmp ugt i8* %1, %0
  br i1 %3, label %4, label %23

; <label>:4:                                      ; preds = %2
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %0 to i64
  %7 = sub i64 %5, %6
  %8 = icmp uge i64 %7, 5
  br i1 %8, label %9, label %23

; <label>:9:                                      ; preds = %4
  %10 = getelementptr [6 x i8], [6 x i8]* @.str.176, i32 0, i32 0
  %11 = call i32 @c_strncasecmp(i8* %0, i8* %10, i64 5) #14
  %12 = icmp eq i32 0, %11
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %9
  %14 = ptrtoint i8* %1 to i64
  %15 = ptrtoint i8* %0 to i64
  %16 = sub i64 %14, %15
  %17 = icmp eq i64 %16, 5
  br i1 %17, label %65, label %18

; <label>:18:                                     ; preds = %13
  %19 = getelementptr inbounds i8, i8* %0, i64 5
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = call zeroext i1 @c_isspace(i32 %21)
  br i1 %22, label %65, label %23

; <label>:23:                                     ; preds = %18, %9, %4, %2
  %24 = icmp ugt i8* %1, %0
  br i1 %24, label %25, label %44

; <label>:25:                                     ; preds = %23
  %26 = ptrtoint i8* %1 to i64
  %27 = ptrtoint i8* %0 to i64
  %28 = sub i64 %26, %27
  %29 = icmp uge i64 %28, 6
  br i1 %29, label %30, label %44

; <label>:30:                                     ; preds = %25
  %31 = getelementptr [7 x i8], [7 x i8]* @.str.175, i32 0, i32 0
  %32 = call i32 @c_strncasecmp(i8* %0, i8* %31, i64 6) #14
  %33 = icmp eq i32 0, %32
  br i1 %33, label %34, label %44

; <label>:34:                                     ; preds = %30
  %35 = ptrtoint i8* %1 to i64
  %36 = ptrtoint i8* %0 to i64
  %37 = sub i64 %35, %36
  %38 = icmp eq i64 %37, 6
  br i1 %38, label %65, label %39

; <label>:39:                                     ; preds = %34
  %40 = getelementptr inbounds i8, i8* %0, i64 6
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = call zeroext i1 @c_isspace(i32 %42)
  br i1 %43, label %65, label %44

; <label>:44:                                     ; preds = %39, %30, %25, %23
  %45 = icmp ugt i8* %1, %0
  br i1 %45, label %46, label %65

; <label>:46:                                     ; preds = %44
  %47 = ptrtoint i8* %1 to i64
  %48 = ptrtoint i8* %0 to i64
  %49 = sub i64 %47, %48
  %50 = icmp uge i64 %49, 4
  br i1 %50, label %51, label %65

; <label>:51:                                     ; preds = %46
  %52 = getelementptr [5 x i8], [5 x i8]* @.str.174, i32 0, i32 0
  %53 = call i32 @c_strncasecmp(i8* %0, i8* %52, i64 4) #14
  %54 = icmp eq i32 0, %53
  br i1 %54, label %55, label %65

; <label>:55:                                     ; preds = %51
  %56 = ptrtoint i8* %1 to i64
  %57 = ptrtoint i8* %0 to i64
  %58 = sub i64 %56, %57
  %59 = icmp eq i64 %58, 4
  br i1 %59, label %65, label %60

; <label>:60:                                     ; preds = %55
  %61 = getelementptr inbounds i8, i8* %0, i64 4
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = call zeroext i1 @c_isspace(i32 %63)
  br label %65

; <label>:65:                                     ; preds = %44, %46, %51, %60, %55, %39, %34, %18, %13
  %66 = phi i1 [ true, %39 ], [ true, %34 ], [ true, %18 ], [ true, %13 ], [ false, %51 ], [ false, %46 ], [ false, %44 ], [ true, %55 ], [ %64, %60 ]
  ret i1 %66
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @request_method(%struct.request*) #7 {
  %2 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @create_authorization_line(i8*, i8*, i8*, i8*, i8*, i8*, i32*) #7 {
  %8 = load i8, i8* %0, align 1
  %9 = sext i8 %8 to i32
  %10 = call i32 @c_toupper(i32 %9)
  switch i32 %10, label %22 [
    i32 66, label %11
    i32 68, label %13
    i32 78, label %15
  ]

; <label>:11:                                     ; preds = %7
  store i8 1, i8* %5, align 1
  %12 = call i8* @basic_authentication_encode(i8* %1, i8* %2)
  br label %23

; <label>:13:                                     ; preds = %7
  store i8 1, i8* %5, align 1
  %14 = call i8* @digest_authentication_encode(i8* %0, i8* %1, i8* %2, i8* %3, i8* %4, i32* %6)
  br label %23

; <label>:15:                                     ; preds = %7
  %16 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 5
  %17 = call zeroext i1 @ntlm_input(%struct.ntlmdata* %16, i8* %0)
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %15
  store i8 1, i8* %5, align 1
  br label %23

; <label>:19:                                     ; preds = %15
  %20 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 5
  %21 = call i8* @ntlm_output(%struct.ntlmdata* %20, i8* %1, i8* %2, i8* %5)
  br label %23

; <label>:22:                                     ; preds = %7
  call void @abort() #16
  unreachable

; <label>:23:                                     ; preds = %19, %18, %13, %11
  %.0 = phi i8* [ %21, %19 ], [ null, %18 ], [ %14, %13 ], [ %12, %11 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @register_basic_auth_host(i8*) #0 {
  %2 = load %struct.hash_table*, %struct.hash_table** @basic_authed_hosts, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = call %struct.hash_table* @make_nocase_string_hash_table(i32 1)
  store %struct.hash_table* %5, %struct.hash_table** @basic_authed_hosts, align 8
  br label %6

; <label>:6:                                      ; preds = %4, %1
  %7 = load %struct.hash_table*, %struct.hash_table** @basic_authed_hosts, align 8
  %8 = call i32 @hash_table_contains(%struct.hash_table* %7, i8* %0)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %19, label %10

; <label>:10:                                     ; preds = %6
  %11 = load %struct.hash_table*, %struct.hash_table** @basic_authed_hosts, align 8
  %12 = call noalias i8* @xstrdup(i8* %0)
  call void @hash_table_put(%struct.hash_table* %11, i8* %12, i8* null)
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %14 = load i8, i8* %13, align 1
  %15 = trunc i8 %14 to i1
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %10
  %17 = call i8* @quote(i8* %0)
  %18 = getelementptr [37 x i8], [37 x i8]* @.str.199, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %18, i8* %17)
  br label %19

; <label>:19:                                     ; preds = %16, %10, %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @basic_authentication_encode(i8*, i8*) #7 {
  %3 = call i64 @strlen(i8* %0) #14
  %4 = add i64 %3, 1
  %5 = call i64 @strlen(i8* %1) #14
  %6 = add i64 %4, %5
  %7 = trunc i64 %6 to i32
  %8 = add nsw i32 %7, 1
  %9 = sext i32 %8 to i64
  %10 = alloca i8, i64 %9, align 16, !track !484
  %11 = getelementptr [6 x i8], [6 x i8]* @.str.145, i32 0, i32 0
  %12 = call i32 (i8*, i8*, ...) @sprintf(i8* %10, i8* %11, i8* %0, i8* %1) #8
  %13 = add nsw i32 %7, 2
  %14 = sdiv i32 %13, 3
  %15 = mul nsw i32 4, %14
  %16 = add nsw i32 %15, 1
  %17 = sext i32 %16 to i64
  %18 = alloca i8, i64 %17, align 16, !track !485
  %19 = sext i32 %7 to i64
  %20 = call i64 @base64_encode(i8* %10, i64 %19, i8* %18)
  %21 = getelementptr [7 x i8], [7 x i8]* @.str.146, i32 0, i32 0
  %22 = call i8* (i8*, ...) @concat_strings(i8* %21, i8* %18, i8* null)
  ret i8* %22
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @digest_authentication_encode(i8*, i8*, i8*, i8*, i8*, i32*) #7 {
  %7 = alloca i8*, align 8, !track !486
  %8 = alloca [16 x i8], align 16, !track !487
  %9 = alloca %struct.param_token, align 8, !track !488
  %10 = alloca %struct.param_token, align 8, !track !489
  %11 = alloca %struct.md5_ctx, align 4, !track !490
  %12 = alloca [16 x i8], align 16, !track !491
  %13 = alloca [33 x i8], align 16, !track !492
  %14 = alloca [33 x i8], align 16, !track !493
  %15 = alloca [33 x i8], align 16, !track !494
  store i8* %0, i8** %7, align 8
  %16 = bitcast [16 x i8]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %16, i8 0, i64 16, i1 false)
  store i8* null, i8** @digest_authentication_encode.qop, align 8
  store i8* null, i8** @digest_authentication_encode.algorithm, align 8
  store i8* null, i8** @digest_authentication_encode.nonce, align 8
  store i8* null, i8** @digest_authentication_encode.opaque, align 8
  store i8* null, i8** @digest_authentication_encode.realm, align 8
  %17 = load i8*, i8** %7, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 6
  store i8* %18, i8** %7, align 8
  %19 = call zeroext i1 @extract_param(i8** %7, %struct.param_token* %9, %struct.param_token* %10, i8 signext 44, i8* null)
  br i1 %19, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.loopexit
  call void @unroll_loop(i32 120)
  %20 = getelementptr inbounds %struct.param_token, %struct.param_token* %9, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.param_token, %struct.param_token* %9, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = ptrtoint i8* %21 to i64
  %25 = ptrtoint i8* %23 to i64
  %26 = sub i64 %24, %25
  br label %27

; <label>:27:                                     ; preds = %.lr.ph, %50
  %.014 = phi i64 [ 0, %.lr.ph ], [ %51, %50 ]
  call void @unroll_loop(i32 121)
  %28 = getelementptr inbounds [5 x %struct.response], [5 x %struct.response]* @digest_authentication_encode.options, i64 0, i64 %.014
  %29 = getelementptr inbounds %struct.response, %struct.response* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 16
  %31 = call i64 @strlen(i8* %30) #14
  %32 = icmp eq i64 %26, %31
  br i1 %32, label %33, label %50

; <label>:33:                                     ; preds = %27
  %34 = getelementptr inbounds %struct.param_token, %struct.param_token* %9, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds [5 x %struct.response], [5 x %struct.response]* @digest_authentication_encode.options, i64 0, i64 %.014
  %37 = getelementptr inbounds %struct.response, %struct.response* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 16
  %39 = call i32 @strncmp(i8* %35, i8* %38, i64 %26) #14
  %40 = icmp eq i32 0, %39
  br i1 %40, label %41, label %50

; <label>:41:                                     ; preds = %33
  %.01.lcssa3 = phi i64 [ %.014, %33 ]
  %42 = getelementptr inbounds %struct.param_token, %struct.param_token* %10, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.param_token, %struct.param_token* %10, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i8* @strdupdelim(i8* %43, i8* %45)
  %47 = getelementptr inbounds [5 x %struct.response], [5 x %struct.response]* @digest_authentication_encode.options, i64 0, i64 %.01.lcssa3
  %48 = getelementptr inbounds %struct.response, %struct.response* %47, i32 0, i32 1
  %49 = load i8**, i8*** %48, align 8
  store i8* %46, i8** %49, align 8
  br label %.loopexit

; <label>:50:                                     ; preds = %27, %33
  %51 = add nuw nsw i64 %.014, 1
  %52 = icmp ult i64 %51, 5
  br i1 %52, label %27, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %50
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %41
  %53 = call zeroext i1 @extract_param(i8** %7, %struct.param_token* %9, %struct.param_token* %10, i8 signext 44, i8* null)
  br i1 %53, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.loopexit
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %6
  %54 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %55 = icmp ne i8* %54, null
  br i1 %55, label %56, label %66

; <label>:56:                                     ; preds = %._crit_edge
  %57 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %58 = getelementptr [5 x i8], [5 x i8]* @.str.186, i32 0, i32 0
  %59 = call i32 @strcmp(i8* %57, i8* %58) #14
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %66

; <label>:61:                                     ; preds = %56
  %62 = getelementptr [41 x i8], [41 x i8]* @.str.187, i32 0, i32 0
  %63 = call i8* @gettext(i8* %62) #8
  %64 = load i8*, i8** @digest_authentication_encode.qop, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %63, i8* %64)
  %65 = load i8*, i8** @digest_authentication_encode.qop, align 8
  call void @free(i8* %65) #8
  store i8* null, i8** @digest_authentication_encode.qop, align 8
  br label %84

; <label>:66:                                     ; preds = %56, %._crit_edge
  %67 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %68 = icmp ne i8* %67, null
  br i1 %68, label %69, label %84

; <label>:69:                                     ; preds = %66
  %70 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %71 = getelementptr [4 x i8], [4 x i8]* @.str.188, i32 0, i32 0
  %72 = call i32 @strcmp(i8* %70, i8* %71) #14
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %84

; <label>:74:                                     ; preds = %69
  %75 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %76 = getelementptr [9 x i8], [9 x i8]* @.str.189, i32 0, i32 0
  %77 = call i32 @strcmp(i8* %75, i8* %76) #14
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %84

; <label>:79:                                     ; preds = %74
  %80 = getelementptr [29 x i8], [29 x i8]* @.str.190, i32 0, i32 0
  %81 = call i8* @gettext(i8* %80) #8
  %82 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %81, i8* %82)
  %83 = load i8*, i8** @digest_authentication_encode.qop, align 8
  call void @free(i8* %83) #8
  store i8* null, i8** @digest_authentication_encode.qop, align 8
  br label %84

; <label>:84:                                     ; preds = %66, %69, %74, %79, %61
  %85 = load i8*, i8** @digest_authentication_encode.realm, align 8
  %86 = icmp ne i8* %85, null
  %87 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %88 = icmp ne i8* %87, null
  %or.cond = and i1 %86, %88
  %89 = icmp ne i8* %1, null
  %or.cond2 = and i1 %or.cond, %89
  %90 = icmp ne i8* %2, null
  %or.cond3 = and i1 %or.cond2, %90
  %91 = icmp ne i8* %4, null
  %or.cond4 = and i1 %or.cond3, %91
  %92 = icmp ne i8* %3, null
  %or.cond5 = and i1 %or.cond4, %92
  br i1 %or.cond5, label %99, label %93

; <label>:93:                                     ; preds = %84
  store i32 50, i32* %5, align 4
  %94 = load i8*, i8** @digest_authentication_encode.realm, align 8
  call void @free(i8* %94) #8
  store i8* null, i8** @digest_authentication_encode.realm, align 8
  %95 = load i8*, i8** @digest_authentication_encode.opaque, align 8
  call void @free(i8* %95) #8
  store i8* null, i8** @digest_authentication_encode.opaque, align 8
  %96 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  call void @free(i8* %96) #8
  store i8* null, i8** @digest_authentication_encode.nonce, align 8
  %97 = load i8*, i8** @digest_authentication_encode.qop, align 8
  call void @free(i8* %97) #8
  store i8* null, i8** @digest_authentication_encode.qop, align 8
  %98 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  call void @free(i8* %98) #8
  store i8* null, i8** @digest_authentication_encode.algorithm, align 8
  br label %279

; <label>:99:                                     ; preds = %84
  call void @md5_init_ctx(%struct.md5_ctx* %11) #8
  %100 = call i64 @strlen(i8* %1) #14
  call void @md5_process_bytes(i8* %1, i64 %100, %struct.md5_ctx* %11) #8
  %101 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %101, i64 1, %struct.md5_ctx* %11) #8
  %102 = load i8*, i8** @digest_authentication_encode.realm, align 8
  %103 = load i8*, i8** @digest_authentication_encode.realm, align 8
  %104 = call i64 @strlen(i8* %103) #14
  call void @md5_process_bytes(i8* %102, i64 %104, %struct.md5_ctx* %11) #8
  %105 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %105, i64 1, %struct.md5_ctx* %11) #8
  %106 = call i64 @strlen(i8* %2) #14
  call void @md5_process_bytes(i8* %2, i64 %106, %struct.md5_ctx* %11) #8
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  %108 = call i8* @md5_finish_ctx(%struct.md5_ctx* %11, i8* %107) #8
  %109 = getelementptr inbounds [33 x i8], [33 x i8]* %13, i32 0, i32 0
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  call void @dump_hash(i8* %109, i8* %110)
  %111 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %112 = icmp ne i8* %111, null
  br i1 %112, label %113, label %136

; <label>:113:                                    ; preds = %99
  %114 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %115 = getelementptr [9 x i8], [9 x i8]* @.str.189, i32 0, i32 0
  %116 = call i32 @strcmp(i8* %114, i8* %115) #14
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %136, label %118

; <label>:118:                                    ; preds = %113
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %120 = call i32 @random_number(i32 2147483647)
  %121 = getelementptr [5 x i8], [5 x i8]* @.str.192, i32 0, i32 0
  %122 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %119, i64 16, i8* %121, i32 %120) #8
  call void @md5_init_ctx(%struct.md5_ctx* %11) #8
  %123 = getelementptr inbounds [33 x i8], [33 x i8]* %13, i32 0, i32 0
  call void @md5_process_bytes(i8* %123, i64 32, %struct.md5_ctx* %11) #8
  %124 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %124, i64 1, %struct.md5_ctx* %11) #8
  %125 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %126 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %127 = call i64 @strlen(i8* %126) #14
  call void @md5_process_bytes(i8* %125, i64 %127, %struct.md5_ctx* %11) #8
  %128 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %128, i64 1, %struct.md5_ctx* %11) #8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %131 = call i64 @strlen(i8* %130) #14
  call void @md5_process_bytes(i8* %129, i64 %131, %struct.md5_ctx* %11) #8
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  %133 = call i8* @md5_finish_ctx(%struct.md5_ctx* %11, i8* %132) #8
  %134 = getelementptr inbounds [33 x i8], [33 x i8]* %13, i32 0, i32 0
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  call void @dump_hash(i8* %134, i8* %135)
  br label %136

; <label>:136:                                    ; preds = %118, %113, %99
  call void @md5_init_ctx(%struct.md5_ctx* %11) #8
  %137 = call i64 @strlen(i8* %3) #14
  call void @md5_process_bytes(i8* %3, i64 %137, %struct.md5_ctx* %11) #8
  %138 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %138, i64 1, %struct.md5_ctx* %11) #8
  %139 = call i64 @strlen(i8* %4) #14
  call void @md5_process_bytes(i8* %4, i64 %139, %struct.md5_ctx* %11) #8
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  %141 = call i8* @md5_finish_ctx(%struct.md5_ctx* %11, i8* %140) #8
  %142 = getelementptr inbounds [33 x i8], [33 x i8]* %14, i32 0, i32 0
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  call void @dump_hash(i8* %142, i8* %143)
  %144 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %145 = icmp ne i8* %144, null
  br i1 %145, label %146, label %180

; <label>:146:                                    ; preds = %136
  %147 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %148 = getelementptr [5 x i8], [5 x i8]* @.str.186, i32 0, i32 0
  %149 = call i32 @strcmp(i8* %147, i8* %148) #14
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %180, label %151

; <label>:151:                                    ; preds = %146
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %153 = load i8, i8* %152, align 16
  %154 = icmp ne i8 %153, 0
  br i1 %154, label %160, label %155

; <label>:155:                                    ; preds = %151
  %156 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %157 = call i32 @random_number(i32 2147483647)
  %158 = getelementptr [5 x i8], [5 x i8]* @.str.192, i32 0, i32 0
  %159 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %156, i64 16, i8* %158, i32 %157) #8
  br label %160

; <label>:160:                                    ; preds = %155, %151
  call void @md5_init_ctx(%struct.md5_ctx* %11) #8
  %161 = getelementptr inbounds [33 x i8], [33 x i8]* %13, i32 0, i32 0
  call void @md5_process_bytes(i8* %161, i64 32, %struct.md5_ctx* %11) #8
  %162 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %162, i64 1, %struct.md5_ctx* %11) #8
  %163 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %164 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %165 = call i64 @strlen(i8* %164) #14
  call void @md5_process_bytes(i8* %163, i64 %165, %struct.md5_ctx* %11) #8
  %166 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %166, i64 1, %struct.md5_ctx* %11) #8
  %167 = getelementptr [9 x i8], [9 x i8]* @.str.193, i32 0, i32 0
  call void @md5_process_bytes(i8* %167, i64 8, %struct.md5_ctx* %11) #8
  %168 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %168, i64 1, %struct.md5_ctx* %11) #8
  %169 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %170 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %171 = call i64 @strlen(i8* %170) #14
  call void @md5_process_bytes(i8* %169, i64 %171, %struct.md5_ctx* %11) #8
  %172 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %172, i64 1, %struct.md5_ctx* %11) #8
  %173 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %174 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %175 = call i64 @strlen(i8* %174) #14
  call void @md5_process_bytes(i8* %173, i64 %175, %struct.md5_ctx* %11) #8
  %176 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %176, i64 1, %struct.md5_ctx* %11) #8
  %177 = getelementptr inbounds [33 x i8], [33 x i8]* %14, i32 0, i32 0
  call void @md5_process_bytes(i8* %177, i64 32, %struct.md5_ctx* %11) #8
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  %179 = call i8* @md5_finish_ctx(%struct.md5_ctx* %11, i8* %178) #8
  br label %190

; <label>:180:                                    ; preds = %146, %136
  call void @md5_init_ctx(%struct.md5_ctx* %11) #8
  %181 = getelementptr inbounds [33 x i8], [33 x i8]* %13, i32 0, i32 0
  call void @md5_process_bytes(i8* %181, i64 32, %struct.md5_ctx* %11) #8
  %182 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %182, i64 1, %struct.md5_ctx* %11) #8
  %183 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %184 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %185 = call i64 @strlen(i8* %184) #14
  call void @md5_process_bytes(i8* %183, i64 %185, %struct.md5_ctx* %11) #8
  %186 = getelementptr [2 x i8], [2 x i8]* @.str.191, i32 0, i32 0
  call void @md5_process_bytes(i8* %186, i64 1, %struct.md5_ctx* %11) #8
  %187 = getelementptr inbounds [33 x i8], [33 x i8]* %14, i32 0, i32 0
  call void @md5_process_bytes(i8* %187, i64 32, %struct.md5_ctx* %11) #8
  %188 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  %189 = call i8* @md5_finish_ctx(%struct.md5_ctx* %11, i8* %188) #8
  br label %190

; <label>:190:                                    ; preds = %180, %160
  %191 = getelementptr inbounds [33 x i8], [33 x i8]* %15, i32 0, i32 0
  %192 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i32 0, i32 0
  call void @dump_hash(i8* %191, i8* %192)
  %193 = call i64 @strlen(i8* %1) #14
  %194 = load i8*, i8** @digest_authentication_encode.realm, align 8
  %195 = call i64 @strlen(i8* %194) #14
  %196 = add i64 %193, %195
  %197 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %198 = call i64 @strlen(i8* %197) #14
  %199 = add i64 %196, %198
  %200 = call i64 @strlen(i8* %4) #14
  %201 = add i64 %199, %200
  %202 = add i64 %201, 32
  %203 = load i8*, i8** @digest_authentication_encode.opaque, align 8
  %204 = icmp ne i8* %203, null
  br i1 %204, label %205, label %208

; <label>:205:                                    ; preds = %190
  %206 = load i8*, i8** @digest_authentication_encode.opaque, align 8
  %207 = call i64 @strlen(i8* %206) #14
  br label %208

; <label>:208:                                    ; preds = %190, %205
  %209 = phi i64 [ %207, %205 ], [ 0, %190 ]
  %210 = add i64 %202, %209
  %211 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %212 = icmp ne i8* %211, null
  br i1 %212, label %213, label %216

; <label>:213:                                    ; preds = %208
  %214 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %215 = call i64 @strlen(i8* %214) #14
  br label %216

; <label>:216:                                    ; preds = %208, %213
  %217 = phi i64 [ %215, %213 ], [ 0, %208 ]
  %218 = add i64 %210, %217
  %219 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %220 = icmp ne i8* %219, null
  %221 = zext i1 %220 to i64
  %222 = select i1 %220, i32 128, i32 0
  %223 = sext i32 %222 to i64
  %224 = add i64 %218, %223
  %225 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %226 = call i64 @strlen(i8* %225) #14
  %227 = add i64 %224, %226
  %228 = add i64 %227, 128
  %229 = call noalias i8* @xmalloc(i64 %228)
  %230 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %231 = icmp ne i8* %230, null
  br i1 %231, label %232, label %244

; <label>:232:                                    ; preds = %216
  %233 = load i8*, i8** @digest_authentication_encode.qop, align 8
  %234 = getelementptr [5 x i8], [5 x i8]* @.str.186, i32 0, i32 0
  %235 = call i32 @strcmp(i8* %233, i8* %234) #14
  %236 = icmp ne i32 %235, 0
  br i1 %236, label %244, label %237

; <label>:237:                                    ; preds = %232
  %238 = load i8*, i8** @digest_authentication_encode.realm, align 8
  %239 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %240 = getelementptr inbounds [33 x i8], [33 x i8]* %15, i32 0, i32 0
  %241 = getelementptr inbounds [16 x i8], [16 x i8]* %8, i32 0, i32 0
  %242 = getelementptr [106 x i8], [106 x i8]* @.str.194, i32 0, i32 0
  %243 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %229, i64 %228, i8* %242, i8* %1, i8* %238, i8* %239, i8* %4, i8* %240, i8* %241) #8
  br label %250

; <label>:244:                                    ; preds = %232, %216
  %245 = load i8*, i8** @digest_authentication_encode.realm, align 8
  %246 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  %247 = getelementptr inbounds [33 x i8], [33 x i8]* %15, i32 0, i32 0
  %248 = getelementptr [70 x i8], [70 x i8]* @.str.195, i32 0, i32 0
  %249 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %229, i64 %228, i8* %248, i8* %1, i8* %245, i8* %246, i8* %4, i8* %247) #8
  br label %250

; <label>:250:                                    ; preds = %244, %237
  %.02 = phi i32 [ %249, %244 ], [ %243, %237 ]
  %251 = load i8*, i8** @digest_authentication_encode.opaque, align 8
  %252 = icmp ne i8* %251, null
  br i1 %252, label %253, label %262

; <label>:253:                                    ; preds = %250
  %254 = sext i32 %.02 to i64
  %255 = getelementptr inbounds i8, i8* %229, i64 %254
  %256 = sext i32 %.02 to i64
  %257 = sub i64 %228, %256
  %258 = load i8*, i8** @digest_authentication_encode.opaque, align 8
  %259 = getelementptr [14 x i8], [14 x i8]* @.str.196, i32 0, i32 0
  %260 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %255, i64 %257, i8* %259, i8* %258) #8
  %261 = add nsw i32 %.02, %260
  br label %262

; <label>:262:                                    ; preds = %253, %250
  %.1 = phi i32 [ %261, %253 ], [ %.02, %250 ]
  %263 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %264 = icmp ne i8* %263, null
  br i1 %264, label %265, label %273

; <label>:265:                                    ; preds = %262
  %266 = sext i32 %.1 to i64
  %267 = getelementptr inbounds i8, i8* %229, i64 %266
  %268 = sext i32 %.1 to i64
  %269 = sub i64 %228, %268
  %270 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  %271 = getelementptr [17 x i8], [17 x i8]* @.str.197, i32 0, i32 0
  %272 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %267, i64 %269, i8* %271, i8* %270) #8
  br label %273

; <label>:273:                                    ; preds = %262, %265
  %274 = load i8*, i8** @digest_authentication_encode.realm, align 8
  call void @free(i8* %274) #8
  store i8* null, i8** @digest_authentication_encode.realm, align 8
  %275 = load i8*, i8** @digest_authentication_encode.opaque, align 8
  call void @free(i8* %275) #8
  store i8* null, i8** @digest_authentication_encode.opaque, align 8
  %276 = load i8*, i8** @digest_authentication_encode.nonce, align 8
  call void @free(i8* %276) #8
  store i8* null, i8** @digest_authentication_encode.nonce, align 8
  %277 = load i8*, i8** @digest_authentication_encode.qop, align 8
  call void @free(i8* %277) #8
  store i8* null, i8** @digest_authentication_encode.qop, align 8
  %278 = load i8*, i8** @digest_authentication_encode.algorithm, align 8
  call void @free(i8* %278) #8
  store i8* null, i8** @digest_authentication_encode.algorithm, align 8
  br label %279

; <label>:279:                                    ; preds = %273, %93
  %.0 = phi i8* [ %229, %273 ], [ null, %93 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_hash(i8*, i8*) #0 {
  br label %3

; <label>:3:                                      ; preds = %2, %3
  %.05 = phi i8* [ %0, %2 ], [ %23, %3 ]
  %.014 = phi i8* [ %1, %2 ], [ %25, %3 ]
  %.023 = phi i32 [ 0, %2 ], [ %24, %3 ]
  call void @unroll_loop(i32 122)
  %4 = load i8, i8* %.014, align 1
  %5 = zext i8 %4 to i32
  %6 = ashr i32 %5, 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.198, i64 0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = add nsw i32 %10, 0
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds i8, i8* %.05, i32 1
  store i8 %12, i8* %.05, align 1
  %14 = load i8, i8* %.014, align 1
  %15 = zext i8 %14 to i32
  %16 = and i32 %15, 15
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.198, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = add nsw i32 %20, 0
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds i8, i8* %13, i32 1
  store i8 %22, i8* %13, align 1
  %24 = add nuw nsw i32 %.023, 1
  %25 = getelementptr inbounds i8, i8* %.014, i32 1
  %exitcond = icmp ne i32 %24, 16
  br i1 %exitcond, label %3, label %26

; <label>:26:                                     ; preds = %3
  %scevgep = getelementptr i8, i8* %0, i64 32
  store i8 0, i8* %scevgep, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @resp_header_get(%struct.response*, i8*, i8**, i8**) #0 {
  %5 = call i32 @resp_header_locate(%struct.response* %0, i8* %1, i32 0, i8** %2, i8** %3)
  %6 = icmp ne i32 %5, -1
  ret i1 %6
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_response_line(i8*, i8*, i8*) #0 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = trunc i64 %6 to i32
  %8 = add nsw i32 %7, 1
  %9 = sext i32 %8 to i64
  %10 = alloca i8, i64 %9, align 16, !track !495
  %11 = sext i32 %7 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %1, i64 %11, i1 false), !track !496
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  store i8 0, i8* %13, align 1
  %14 = call i8* @quotearg_style(i32 7, i8* %10)
  %15 = getelementptr [6 x i8], [6 x i8]* @.str.165, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %15, i8* %0, i8* %14)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @response_head_terminator(i8*, i8*, i32) #0 {
  %4 = icmp eq i8* %0, %1
  br i1 %4, label %5, label %11

; <label>:5:                                      ; preds = %3
  %6 = icmp sle i32 %2, 4
  %. = select i1 %6, i32 %2, i32 4
  %7 = sext i32 %. to i64
  %8 = getelementptr [5 x i8], [5 x i8]* @.str.49.533, i32 0, i32 0
  %9 = call i32 @memcmp(i8* %0, i8* %8, i64 %7) #14
  %10 = icmp ne i32 0, %9
  br i1 %10, label %57, label %11

; <label>:11:                                     ; preds = %5, %3
  %12 = ptrtoint i8* %1 to i64
  %13 = ptrtoint i8* %0 to i64
  %14 = sub i64 %12, %13
  %15 = icmp slt i64 %14, 2
  %16 = getelementptr inbounds i8, i8* %1, i64 -2
  %17 = select i1 %15, i8* %0, i8* %16
  %18 = sext i32 %2 to i64
  %19 = getelementptr inbounds i8, i8* %1, i64 %18
  %20 = getelementptr inbounds i8, i8* %19, i64 -2
  %21 = icmp ult i8* %17, %20
  br i1 %21, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %11
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %44
  %.014 = phi i8* [ %45, %44 ], [ %17, %.lr.ph.preheader ]
  %22 = load i8, i8* %.014, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp eq i32 %23, 10
  br i1 %24, label %25, label %44

; <label>:25:                                     ; preds = %.lr.ph
  %26 = getelementptr inbounds i8, i8* %.014, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i32
  %29 = icmp eq i32 %28, 13
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %25
  %31 = getelementptr inbounds i8, i8* %.014, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %33, 10
  br i1 %34, label %35, label %37

; <label>:35:                                     ; preds = %30
  %.01.lcssa2 = phi i8* [ %.014, %30 ]
  %36 = getelementptr inbounds i8, i8* %.01.lcssa2, i64 3
  br label %57

; <label>:37:                                     ; preds = %30, %25
  %38 = getelementptr inbounds i8, i8* %.014, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 10
  br i1 %41, label %42, label %44

; <label>:42:                                     ; preds = %37
  %.01.lcssa3 = phi i8* [ %.014, %37 ]
  %43 = getelementptr inbounds i8, i8* %.01.lcssa3, i64 2
  br label %57

; <label>:44:                                     ; preds = %.lr.ph, %37
  %.015 = phi i8* [ %.014, %.lr.ph ], [ %.014, %37 ]
  %45 = getelementptr inbounds i8, i8* %.015, i32 1
  %46 = icmp ult i8* %45, %20
  br i1 %46, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %44
  %.01.lcssa.ph = phi i8* [ %45, %44 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %11
  %.01.lcssa = phi i8* [ %17, %11 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %47 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp eq i32 %49, 10
  br i1 %50, label %51, label %57

; <label>:51:                                     ; preds = %._crit_edge
  %52 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %53 = load i8, i8* %52, align 1
  %54 = sext i8 %53 to i32
  %55 = icmp eq i32 %54, 10
  %56 = getelementptr inbounds i8, i8* %.01.lcssa, i64 2
  %spec.select = select i1 %55, i8* %56, i8* null
  ret i8* %spec.select

; <label>:57:                                     ; preds = %._crit_edge, %5, %42, %35
  %.0 = phi i8* [ %36, %35 ], [ %43, %42 ], [ %0, %5 ], [ null, %._crit_edge ]
  ret i8* %.0
}

; Function Attrs: nounwind
declare dso_local i32 @feof(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @persistent_available_p(i8*, i32, i1 zeroext, i8*) #0 {
  %5 = alloca %struct.ip_address, align 4, !track !497
  %6 = zext i1 %2 to i8
  %7 = load i8, i8* @pconn_active, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %46

; <label>:9:                                      ; preds = %4
  %10 = trunc i8 %6 to i1
  %11 = zext i1 %10 to i32
  %12 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 3
  %13 = load i8, i8* %12, align 4
  %14 = trunc i8 %13 to i1
  %15 = zext i1 %14 to i32
  %16 = icmp ne i32 %11, %15
  br i1 %16, label %46, label %17

; <label>:17:                                     ; preds = %9
  %18 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp ne i32 %1, %19
  br i1 %20, label %46, label %21

; <label>:21:                                     ; preds = %17
  %22 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @strcasecmp(i8* %0, i8* %23) #14
  %25 = icmp ne i32 0, %24
  br i1 %25, label %26, label %41

; <label>:26:                                     ; preds = %21
  %27 = trunc i8 %6 to i1
  br i1 %27, label %46, label %28

; <label>:28:                                     ; preds = %26
  %29 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = call zeroext i1 @socket_ip_address(i32 %30, %struct.ip_address* %5, i32 1)
  br i1 %31, label %33, label %32

; <label>:32:                                     ; preds = %28
  call void @invalidate_persistent()
  br label %46

; <label>:33:                                     ; preds = %28
  %34 = call %struct.address_list* @lookup_host(i8* %0, i32 0)
  %35 = icmp ne %struct.address_list* %34, null
  br i1 %35, label %37, label %36

; <label>:36:                                     ; preds = %33
  store i8 1, i8* %3, align 1
  br label %46

; <label>:37:                                     ; preds = %33
  %38 = call zeroext i1 @address_list_contains(%struct.address_list* %34, %struct.ip_address* %5)
  %39 = zext i1 %38 to i8
  call void @address_list_release(%struct.address_list* %34)
  %40 = trunc i8 %39 to i1
  br i1 %40, label %41, label %46

; <label>:41:                                     ; preds = %37, %21
  %42 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = call zeroext i1 @test_socket_open(i32 %43)
  br i1 %44, label %46, label %45

; <label>:45:                                     ; preds = %41
  call void @invalidate_persistent()
  br label %46

; <label>:46:                                     ; preds = %41, %37, %26, %17, %9, %4, %45, %36, %32
  %.0 = phi i1 [ false, %45 ], [ false, %36 ], [ false, %32 ], [ false, %4 ], [ false, %9 ], [ false, %17 ], [ false, %26 ], [ false, %37 ], [ true, %41 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @request_remove_header(%struct.request*, i8*) #0 {
  %3 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 0, %4
  br i1 %5, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %33
  %indvars.iv = phi i64 [ %indvars.iv.next, %33 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 123)
  %6 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 2
  %7 = load %struct.request_header*, %struct.request_header** %6, align 8
  %8 = getelementptr inbounds %struct.request_header, %struct.request_header* %7, i64 %indvars.iv
  %9 = getelementptr inbounds %struct.request_header, %struct.request_header* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = call i32 @c_strcasecmp(i8* %1, i8* %10) #14
  %12 = icmp eq i32 0, %11
  br i1 %12, label %13, label %33

; <label>:13:                                     ; preds = %.lr.ph
  %.lcssa = phi %struct.request_header* [ %8, %.lr.ph ]
  %.01.lcssa2.wide = phi i64 [ %indvars.iv, %.lr.ph ]
  %14 = trunc i64 %.01.lcssa2.wide to i32
  call void @release_header(%struct.request_header* %.lcssa)
  %15 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = sub nsw i32 %16, 1
  %18 = icmp slt i32 %14, %17
  br i1 %18, label %19, label %29

; <label>:19:                                     ; preds = %13
  %20 = bitcast %struct.request_header* %.lcssa to i8*
  %21 = getelementptr inbounds %struct.request_header, %struct.request_header* %.lcssa, i64 1
  %22 = bitcast %struct.request_header* %21 to i8*
  %23 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = sub nsw i32 %24, %14
  %26 = sub nsw i32 %25, 1
  %27 = sext i32 %26 to i64
  %28 = mul i64 %27, 24
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %22, i64 %28, i1 false), !track !498
  br label %29

; <label>:29:                                     ; preds = %19, %13
  %30 = getelementptr inbounds %struct.request, %struct.request* %0, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = add nsw i32 %31, -1
  store i32 %32, i32* %30, align 8
  br label %._crit_edge

; <label>:33:                                     ; preds = %.lr.ph
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %34 = load i32, i32* %3, align 8
  %35 = sext i32 %34 to i64
  %36 = icmp slt i64 %indvars.iv.next, %35
  br i1 %36, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %33
  %.0.ph = phi i1 [ false, %33 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2, %29
  %.0 = phi i1 [ true, %29 ], [ false, %2 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.request* @request_new(i8*, i8*) #7 {
  %3 = call noalias i8* @xcalloc(i64 1, i64 32)
  %4 = bitcast i8* %3 to %struct.request*
  %5 = getelementptr inbounds %struct.request, %struct.request* %4, i32 0, i32 4
  store i32 8, i32* %5, align 4
  %6 = getelementptr inbounds %struct.request, %struct.request* %4, i32 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = sext i32 %7 to i64
  %9 = mul i64 %8, 24
  %10 = call noalias i8* @xmalloc(i64 %9)
  %11 = bitcast i8* %10 to %struct.request_header*
  %12 = getelementptr inbounds %struct.request, %struct.request* %4, i32 0, i32 2
  store %struct.request_header* %11, %struct.request_header** %12, align 8
  %13 = getelementptr inbounds %struct.request, %struct.request* %4, i32 0, i32 0
  store i8* %0, i8** %13, align 8
  %14 = getelementptr inbounds %struct.request, %struct.request* %4, i32 0, i32 1
  store i8* %1, i8** %14, align 8
  ret %struct.request* %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #6

; Function Attrs: noinline nounwind uwtable
define internal i32 @time_to_rfc1123(i64, i8*, i64) #0 {
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = call %struct.tm* @gmtime(i64* %4) #8
  %6 = icmp ne %struct.tm* %5, null
  br i1 %6, label %10, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr [40 x i8], [40 x i8]* @.str.140, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %9)
  br label %34

; <label>:10:                                     ; preds = %3
  %11 = load i8*, i8** @time_to_rfc1123.time_format, align 8
  %12 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 6
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [7 x i8*], [7 x i8*]* @time_to_rfc1123.wkday, i64 0, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [12 x i8*], [12 x i8*]* @time_to_rfc1123.month, i64 0, i64 %21
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 5
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1900
  %27 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %1, i64 %2, i8* %11, i8* %16, i32 %18, i8* %23, i32 %26, i32 %28, i32 %30, i32 %32) #8
  br label %34

; <label>:34:                                     ; preds = %10, %7
  %.0 = phi i32 [ 25, %10 ], [ 55, %7 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @maybe_send_basic_creds(i8*, i8*, i8*, %struct.request*) #0 {
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 148
  %6 = load i8, i8* %5, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %14

; <label>:8:                                      ; preds = %4
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %10 = load i8, i8* %9, align 1
  %11 = trunc i8 %10 to i1
  br i1 %11, label %12, label %35

; <label>:12:                                     ; preds = %8
  %13 = getelementptr [56 x i8], [56 x i8]* @.str.141, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %13)
  br label %35

; <label>:14:                                     ; preds = %4
  %15 = load %struct.hash_table*, %struct.hash_table** @basic_authed_hosts, align 8
  %16 = icmp ne %struct.hash_table* %15, null
  br i1 %16, label %17, label %28

; <label>:17:                                     ; preds = %14
  %18 = load %struct.hash_table*, %struct.hash_table** @basic_authed_hosts, align 8
  %19 = call i32 @hash_table_contains(%struct.hash_table* %18, i8* %0)
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %28

; <label>:21:                                     ; preds = %17
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %23 = load i8, i8* %22, align 1
  %24 = trunc i8 %23 to i1
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %21
  %26 = call i8* @quote(i8* %0)
  %27 = getelementptr [33 x i8], [33 x i8]* @.str.142, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %27, i8* %26)
  br label %35

; <label>:28:                                     ; preds = %14, %17
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %30 = load i8, i8* %29, align 1
  %31 = trunc i8 %30 to i1
  br i1 %31, label %32, label %35

; <label>:32:                                     ; preds = %28
  %33 = call i8* @quote(i8* %0)
  %34 = getelementptr [51 x i8], [51 x i8]* @.str.143, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %34, i8* %33)
  br label %35

; <label>:35:                                     ; preds = %21, %25, %28, %32, %12, %8
  %.1 = phi i8 [ 1, %8 ], [ 1, %12 ], [ 1, %21 ], [ 1, %25 ], [ 0, %28 ], [ 0, %32 ]
  %36 = trunc i8 %.1 to i1
  br i1 %36, label %37, label %40

; <label>:37:                                     ; preds = %35
  %38 = call i8* @basic_authentication_encode(i8* %1, i8* %2)
  %39 = getelementptr [14 x i8], [14 x i8]* @.str.144, i32 0, i32 0
  call void @request_set_header(%struct.request* %3, i8* %39, i8* %38, i32 2)
  br label %40

; <label>:40:                                     ; preds = %37, %35
  %41 = trunc i8 %.1 to i1
  ret i1 %41
}

; Function Attrs: nounwind
declare dso_local %struct.tm* @gmtime(i64*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @save_cookies() #0 {
  %1 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  %2 = icmp ne %struct.cookie_jar* %1, null
  br i1 %2, label %3, label %7

; <label>:3:                                      ; preds = %0
  %4 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 131
  %6 = load i8*, i8** %5, align 8
  call void @cookie_jar_save(%struct.cookie_jar* %4, i8* %6)
  br label %7

; <label>:7:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @http_cleanup() #0 {
  %1 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  %2 = load i8*, i8** %1, align 8
  call void @free(i8* %2) #8
  %3 = getelementptr %struct.anon.65, %struct.anon.65* @pconn, i32 0, i32 1
  store i8* null, i8** %3, align 8
  %4 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  %5 = icmp ne %struct.cookie_jar* %4, null
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %0
  %7 = load %struct.cookie_jar*, %struct.cookie_jar** @wget_cookie_jar, align 8
  call void @cookie_jar_delete(%struct.cookie_jar* %7)
  br label %8

; <label>:8:                                      ; preds = %6, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @defaults() #0 {
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.options* @opt to i8*), i8 0, i64 832, i1 false)
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 129
  store i8 1, i8* %1, align 1
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  store i32 -1, i32* %2, align 8
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  store i32 20, i32* %3, align 8
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  store i32 5, i32* %4, align 4
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 15
  store i8 1, i8* %5, align 8
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 63
  store i8 1, i8* %6, align 8
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 64
  store i8 1, i8* %7, align 1
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 104
  store i8 1, i8* %8, align 1
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 69
  store i8 1, i8* %9, align 8
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 70
  store i8 1, i8* %10, align 1
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 102
  store i8 0, i8* %11, align 1
  %12 = getelementptr [9 x i8], [9 x i8]* @.str.627, i32 0, i32 0
  %13 = call i8* @getenv(i8* %12) #8, !track !499
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %18

; <label>:15:                                     ; preds = %0
  %16 = call i8** @sepstring(i8* %13)
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 75
  store i8** %16, i8*** %17, align 8
  br label %18

; <label>:18:                                     ; preds = %15, %0
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 146
  store i32 2, i32* %19, align 8
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 71
  store i8 1, i8* %20, align 2
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 96
  store i8 1, i8* %21, align 1
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  store double 9.000000e+02, double* %22, align 8
  %23 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 88
  store i8 1, i8* %23, align 8
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 103
  store i8 1, i8* %24, align 2
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  store i64 1024, i64* %25, align 8
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  store i32 10, i32* %26, align 4
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  store i32 50, i32* %27, align 8
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 41
  store i8 1, i8* %28, align 8
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 65
  store i8 1, i8* %29, align 2
  %30 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 45
  store i8 1, i8* %30, align 1
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 114
  store i32 1, i32* %31, align 4
  %32 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 125
  store i8 1, i8* %32, align 1
  %33 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 126
  store i8 0, i8* %33, align 2
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 127
  store i8 0, i8* %34, align 1
  %35 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 128
  store i8 0, i8* %35, align 4
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  store i32 0, i32* %36, align 8
  %37 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 139
  store i8 1, i8* %37, align 4
  %38 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 140
  store i8 0, i8* %38, align 1
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 141
  store i32 0, i32* %39, align 8
  %40 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 36
  store i32 1, i32* %40, align 8
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  store i32 20, i32* %41, align 4
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 87
  store double 1.000000e+01, double* %42, align 8
  %43 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  store i8 1, i8* %43, align 2
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  store i8* null, i8** %44, align 8
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  store i8* null, i8** %45, align 8
  %46 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 153
  store i8 1, i8* %46, align 1
  %47 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 154
  store i8 0, i8* %47, align 2
  %48 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 50
  store i64 0, i64* %48, align 8
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 51
  store i8 1, i8* %49, align 8
  %50 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 52
  store i8 1, i8* %50, align 1
  %51 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 53
  store i8 0, i8* %51, align 2
  %52 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 49
  store i8* null, i8** %52, align 8
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 48
  store i8* null, i8** %53, align 8
  %54 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 54
  store i8 1, i8* %54, align 1
  %55 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  store i64 -1, i64* %55, align 8
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  store i32 -1, i32* %56, align 8
  %57 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 79
  store i8 0, i8* %57, align 4
  %58 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 157
  store i8 1, i8* %58, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @home_dir() #7 {
  %1 = load i8*, i8** @home_dir.home, align 8
  %2 = icmp ne i8* %1, null
  br i1 %2, label %19, label %3

; <label>:3:                                      ; preds = %0
  %4 = getelementptr [5 x i8], [5 x i8]* @.str.1.628, i32 0, i32 0
  %5 = call i8* @getenv(i8* %4) #8, !track !500
  store i8* %5, i8** @home_dir.home, align 8
  %6 = load i8*, i8** @home_dir.home, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %19, label %8

; <label>:8:                                      ; preds = %3
  %9 = call i32 @getuid() #8
  %10 = call %struct.passwd* @getpwuid(i32 %9), !track !501
  %11 = icmp ne %struct.passwd* %10, null
  br i1 %11, label %12, label %29

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.passwd, %struct.passwd* %10, i32 0, i32 5
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %16, label %29

; <label>:16:                                     ; preds = %12
  %17 = getelementptr inbounds %struct.passwd, %struct.passwd* %10, i32 0, i32 5
  %18 = load i8*, i8** %17, align 8
  store i8* %18, i8** @home_dir.home, align 8
  br label %19

; <label>:19:                                     ; preds = %3, %16, %0
  %20 = load i8*, i8** @home_dir.home, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %25

; <label>:22:                                     ; preds = %19
  %23 = load i8*, i8** @home_dir.home, align 8
  %24 = call noalias i8* @xstrdup(i8* %23)
  br label %25

; <label>:25:                                     ; preds = %19, %22
  %26 = phi i8* [ %24, %22 ], [ null, %19 ]
  store i8* %26, i8** @home_dir.ret, align 8
  %27 = load i8*, i8** @home_dir.buf, align 8
  call void @free(i8* %27) #8
  store i8* null, i8** @home_dir.buf, align 8
  %28 = load i8*, i8** @home_dir.ret, align 8
  br label %29

; <label>:29:                                     ; preds = %8, %12, %25
  %.0 = phi i8* [ %28, %25 ], [ null, %12 ], [ null, %8 ]
  ret i8* %.0
}

; Function Attrs: nounwind
declare dso_local i32 @getuid() #2

declare dso_local %struct.passwd* @getpwuid(i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @wgetrc_env_file_name() #7 {
  %1 = getelementptr [7 x i8], [7 x i8]* @.str.2.629, i32 0, i32 0
  %2 = call i8* @getenv(i8* %1) #8, !track !502
  %3 = icmp ne i8* %2, null
  br i1 %3, label %4, label %18

; <label>:4:                                      ; preds = %0
  %5 = load i8, i8* %2, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %18

; <label>:8:                                      ; preds = %4
  %9 = call zeroext i1 @file_exists_p(i8* %2)
  br i1 %9, label %16, label %10

; <label>:10:                                     ; preds = %8
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = getelementptr [47 x i8], [47 x i8]* @.str.3.630, i32 0, i32 0
  %13 = call i8* @gettext(i8* %12) #8, !track !503
  %14 = load i8*, i8** @exec_name, align 8
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* %13, i8* %14, i8* %2)
  call void @exit(i32 1) #16
  unreachable

; <label>:16:                                     ; preds = %8
  %17 = call noalias i8* @xstrdup(i8* %2)
  br label %18

; <label>:18:                                     ; preds = %0, %4, %16
  %.0 = phi i8* [ %17, %16 ], [ null, %4 ], [ null, %0 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @wgetrc_user_file_name() #7 {
  %1 = call i8* @home_dir()
  %2 = icmp ne i8* %1, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %0
  %4 = getelementptr [11 x i8], [11 x i8]* @.str.4.631, i32 0, i32 0
  %5 = call i8* (i8*, ...) @aprintf(i8* %4, i8* %1)
  br label %6

; <label>:6:                                      ; preds = %0, %3
  %.01 = phi i8* [ %5, %3 ], [ null, %0 ]
  call void @free(i8* %1) #8
  %7 = icmp ne i8* %.01, null
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %6
  %9 = call zeroext i1 @file_exists_p(i8* %.01)
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %8
  call void @free(i8* %.01) #8
  br label %11

; <label>:11:                                     ; preds = %8, %6, %10
  %.0 = phi i8* [ null, %10 ], [ null, %6 ], [ %.01, %8 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @wgetrc_file_name() #7 {
  %1 = call i8* @wgetrc_env_file_name()
  %2 = icmp ne i8* %1, null
  br i1 %2, label %3, label %7

; <label>:3:                                      ; preds = %0
  %4 = load i8, i8* %1, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %3, %0
  %8 = call i8* @wgetrc_user_file_name()
  br label %9

; <label>:9:                                      ; preds = %3, %7
  %.0 = phi i8* [ %8, %7 ], [ %1, %3 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @run_wgetrc(i8*) #0 {
  %2 = alloca i8*, align 8, !track !504
  %3 = alloca i64, align 8, !track !505
  %4 = alloca i8*, align 8, !track !506
  %5 = alloca i8*, align 8, !track !507
  %6 = alloca i32, align 4
  store i8* null, i8** %2, align 8
  store i64 0, i64* %3, align 8
  %7 = getelementptr [2 x i8], [2 x i8]* @.str.5.632, i32 0, i32 0
  %8 = call %struct._IO_FILE* @fopen(i8* %0, i8* %7), !track !508
  %9 = icmp ne %struct._IO_FILE* %8, null
  br i1 %9, label %19, label %10

; <label>:10:                                     ; preds = %1
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = getelementptr [26 x i8], [26 x i8]* @.str.6.633, i32 0, i32 0
  %13 = call i8* @gettext(i8* %12) #8, !track !509
  %14 = load i8*, i8** @exec_name, align 8
  %15 = call i32* @__errno_location() #15
  %16 = load i32, i32* %15, align 4
  %17 = call i8* @strerror(i32 %16) #8, !track !510
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* %13, i8* %14, i8* %0, i8* %17)
  br label %62

; <label>:19:                                     ; preds = %1
  %20 = call i64 @getline(i8** %2, i64* %3, %struct._IO_FILE* %8)
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %19
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %53
  %.015 = phi i32 [ %.2, %53 ], [ 0, %.lr.ph.preheader ]
  %.024 = phi i32 [ %56, %53 ], [ 1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 124)
  store i8* null, i8** %4, align 8
  store i8* null, i8** %5, align 8
  %22 = load i8*, i8** %2, align 8
  %23 = call i32 @parse_line(i8* %22, i8** %4, i8** %5, i32* %6)
  switch i32 %23, label %52 [
    i32 0, label %24
    i32 2, label %36
    i32 3, label %43
    i32 1, label %53
  ]

; <label>:24:                                     ; preds = %.lr.ph
  %25 = load i32, i32* %6, align 4
  %26 = load i8*, i8** %4, align 8
  %27 = load i8*, i8** %5, align 8
  %28 = call zeroext i1 @setval_internal_tilde(i32 %25, i8* %26, i8* %27)
  br i1 %28, label %53, label %29

; <label>:29:                                     ; preds = %24
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %31 = getelementptr [29 x i8], [29 x i8]* @.str.7.634, i32 0, i32 0
  %32 = call i8* @gettext(i8* %31) #8, !track !511
  %33 = load i8*, i8** @exec_name, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* %32, i8* %33, i8* %0, i32 %.024)
  %35 = add nsw i32 %.015, 1
  br label %53

; <label>:36:                                     ; preds = %.lr.ph
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %38 = getelementptr [36 x i8], [36 x i8]* @.str.8.635, i32 0, i32 0
  %39 = call i8* @gettext(i8* %38) #8, !track !512
  %40 = load i8*, i8** @exec_name, align 8
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* %39, i8* %40, i8* %0, i32 %.024)
  %42 = add nsw i32 %.015, 1
  br label %53

; <label>:43:                                     ; preds = %.lr.ph
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %45 = getelementptr [42 x i8], [42 x i8]* @.str.9.636, i32 0, i32 0
  %46 = call i8* @gettext(i8* %45) #8, !track !513
  %47 = load i8*, i8** @exec_name, align 8
  %48 = load i8*, i8** %4, align 8
  %49 = call i8* @quote(i8* %48)
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* %46, i8* %47, i8* %49, i8* %0, i32 %.024)
  %51 = add nsw i32 %.015, 1
  br label %53

; <label>:52:                                     ; preds = %.lr.ph
  call void @abort() #16
  unreachable

; <label>:53:                                     ; preds = %36, %43, %29, %24, %.lr.ph
  %.2 = phi i32 [ %51, %43 ], [ %42, %36 ], [ %.015, %24 ], [ %35, %29 ], [ %.015, %.lr.ph ]
  %54 = load i8*, i8** %4, align 8
  call void @free(i8* %54) #8
  store i8* null, i8** %4, align 8
  %55 = load i8*, i8** %5, align 8
  call void @free(i8* %55) #8
  store i8* null, i8** %5, align 8
  %56 = add nuw nsw i32 %.024, 1
  %57 = call i64 @getline(i8** %2, i64* %3, %struct._IO_FILE* %8)
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %53
  %.01.lcssa.ph = phi i32 [ %.2, %53 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %19
  %.01.lcssa = phi i32 [ 0, %19 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %59 = load i8*, i8** %2, align 8
  call void @free(i8* %59) #8
  store i8* null, i8** %2, align 8
  %60 = call i32 @fclose(%struct._IO_FILE* %8)
  %61 = icmp eq i32 %.01.lcssa, 0
  br label %62

; <label>:62:                                     ; preds = %._crit_edge, %10
  %.0 = phi i1 [ %61, %._crit_edge ], [ true, %10 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @parse_line(i8*, i8**, i8**, i32*) #0 {
  %5 = call i64 @strlen(i8* %0) #14
  br label %6

; <label>:6:                                      ; preds = %14, %4
  %.01 = phi i8* [ %0, %4 ], [ %16, %14 ]
  call void @unroll_loop(i32 125)
  %7 = load i8, i8* %.01, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %6
  %11 = load i8, i8* %.01, align 1
  %12 = sext i8 %11 to i32
  %13 = call zeroext i1 @c_isspace(i32 %12)
  br label %14

; <label>:14:                                     ; preds = %10, %6
  %15 = phi i1 [ false, %6 ], [ %13, %10 ]
  %16 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %15, label %6, label %17

; <label>:17:                                     ; preds = %14
  %.01.lcssa = phi i8* [ %.01, %14 ]
  %18 = getelementptr inbounds i8, i8* %0, i64 %5
  br label %19

; <label>:19:                                     ; preds = %26, %17
  %.02 = phi i8* [ %18, %17 ], [ %28, %26 ]
  call void @unroll_loop(i32 126)
  %20 = icmp ugt i8* %.02, %.01.lcssa
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds i8, i8* %.02, i64 -1
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = call zeroext i1 @c_isspace(i32 %24)
  br label %26

; <label>:26:                                     ; preds = %21, %19
  %27 = phi i1 [ false, %19 ], [ %25, %21 ]
  %28 = getelementptr inbounds i8, i8* %.02, i32 -1
  br i1 %27, label %19, label %29

; <label>:29:                                     ; preds = %26
  %.02.lcssa = phi i8* [ %.02, %26 ]
  %30 = load i8, i8* %.01.lcssa, align 1
  %31 = icmp ne i8 %30, 0
  br i1 %31, label %32, label %96

; <label>:32:                                     ; preds = %29
  %33 = load i8, i8* %.01.lcssa, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp eq i32 %34, 35
  br i1 %35, label %96, label %.preheader

.preheader:                                       ; preds = %32
  br label %36

; <label>:36:                                     ; preds = %.preheader, %50
  %.03 = phi i8* [ %52, %50 ], [ %.01.lcssa, %.preheader ]
  call void @unroll_loop(i32 127)
  %37 = icmp ult i8* %.03, %.02.lcssa
  br i1 %37, label %38, label %50

; <label>:38:                                     ; preds = %36
  %39 = load i8, i8* %.03, align 1
  %40 = sext i8 %39 to i32
  %41 = call zeroext i1 @c_isalnum(i32 %40)
  br i1 %41, label %50, label %42

; <label>:42:                                     ; preds = %38
  %43 = load i8, i8* %.03, align 1
  %44 = sext i8 %43 to i32
  %45 = icmp eq i32 %44, 95
  br i1 %45, label %50, label %46

; <label>:46:                                     ; preds = %42
  %47 = load i8, i8* %.03, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp eq i32 %48, 45
  br label %50

; <label>:50:                                     ; preds = %38, %42, %46, %36
  %51 = phi i1 [ false, %36 ], [ true, %42 ], [ true, %38 ], [ %49, %46 ]
  %52 = getelementptr inbounds i8, i8* %.03, i32 1
  br i1 %51, label %36, label %53

; <label>:53:                                     ; preds = %50
  %.03.lcssa = phi i8* [ %.03, %50 ]
  br label %54

; <label>:54:                                     ; preds = %60, %53
  %.1 = phi i8* [ %.03.lcssa, %53 ], [ %62, %60 ]
  call void @unroll_loop(i32 128)
  %55 = icmp ult i8* %.1, %.02.lcssa
  br i1 %55, label %56, label %60

; <label>:56:                                     ; preds = %54
  %57 = load i8, i8* %.1, align 1
  %58 = sext i8 %57 to i32
  %59 = call zeroext i1 @c_isspace(i32 %58)
  br label %60

; <label>:60:                                     ; preds = %56, %54
  %61 = phi i1 [ false, %54 ], [ %59, %56 ]
  %62 = getelementptr inbounds i8, i8* %.1, i32 1
  br i1 %61, label %54, label %63

; <label>:63:                                     ; preds = %60
  %.1.lcssa = phi i8* [ %.1, %60 ]
  %64 = icmp eq i8* %.1.lcssa, %.02.lcssa
  br i1 %64, label %96, label %65

; <label>:65:                                     ; preds = %63
  %66 = load i8, i8* %.1.lcssa, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp ne i32 %67, 61
  br i1 %68, label %96, label %69

; <label>:69:                                     ; preds = %65
  %70 = getelementptr inbounds i8, i8* %.1.lcssa, i32 1
  br label %71

; <label>:71:                                     ; preds = %77, %69
  %.2 = phi i8* [ %70, %69 ], [ %79, %77 ]
  call void @unroll_loop(i32 129)
  %72 = icmp ult i8* %.2, %.02.lcssa
  br i1 %72, label %73, label %77

; <label>:73:                                     ; preds = %71
  %74 = load i8, i8* %.2, align 1
  %75 = sext i8 %74 to i32
  %76 = call zeroext i1 @c_isspace(i32 %75)
  br label %77

; <label>:77:                                     ; preds = %73, %71
  %78 = phi i1 [ false, %71 ], [ %76, %73 ]
  %79 = getelementptr inbounds i8, i8* %.2, i32 1
  br i1 %78, label %71, label %80

; <label>:80:                                     ; preds = %77
  %.2.lcssa = phi i8* [ %.2, %77 ]
  %81 = call i8* @strdupdelim(i8* %.01.lcssa, i8* %.03.lcssa)
  store i8* %81, i8** %1, align 8
  %82 = call i8* @strdupdelim(i8* %.2.lcssa, i8* %.02.lcssa)
  store i8* %82, i8** %2, align 8
  %83 = ptrtoint i8* %.03.lcssa to i64
  %84 = ptrtoint i8* %.01.lcssa to i64
  %85 = sub i64 %83, %84
  %86 = trunc i64 %85 to i32
  %87 = add nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = alloca i8, i64 %88, align 16, !track !514
  %90 = sext i32 %86 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %.01.lcssa, i64 %90, i1 false), !track !515
  %91 = sext i32 %86 to i64
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  store i8 0, i8* %92, align 1
  call void @dehyphen(i8* %89)
  %93 = call i32 @command_by_name(i8* %89)
  %94 = icmp eq i32 %93, -1
  br i1 %94, label %96, label %95

; <label>:95:                                     ; preds = %80
  store i32 %93, i32* %3, align 4
  br label %96

; <label>:96:                                     ; preds = %80, %63, %65, %29, %32, %95
  %.0 = phi i32 [ 0, %95 ], [ 1, %32 ], [ 1, %29 ], [ 2, %65 ], [ 2, %63 ], [ 3, %80 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @setval_internal_tilde(i32, i8*, i8*) #0 {
  %4 = call zeroext i1 @setval_internal(i32 %0, i8* %1, i8* %2)
  %5 = zext i1 %4 to i8
  %6 = sext i32 %0 to i64
  %7 = getelementptr inbounds [160 x %struct.anon.83], [160 x %struct.anon.83]* @commands, i64 0, i64 %6
  %8 = getelementptr inbounds %struct.anon.83, %struct.anon.83* %7, i32 0, i32 2
  %9 = load i1 (i8*, i8*, i8*)*, i1 (i8*, i8*, i8*)** %8, align 8
  %10 = icmp eq i1 (i8*, i8*, i8*)* %9, @cmd_file
  br i1 %10, label %17, label %11

; <label>:11:                                     ; preds = %3
  %12 = sext i32 %0 to i64
  %13 = getelementptr inbounds [160 x %struct.anon.83], [160 x %struct.anon.83]* @commands, i64 0, i64 %12
  %14 = getelementptr inbounds %struct.anon.83, %struct.anon.83* %13, i32 0, i32 2
  %15 = load i1 (i8*, i8*, i8*)*, i1 (i8*, i8*, i8*)** %14, align 8
  %16 = icmp eq i1 (i8*, i8*, i8*)* %15, @cmd_directory
  br i1 %16, label %17, label %60

; <label>:17:                                     ; preds = %11, %3
  %18 = trunc i8 %5 to i1
  br i1 %18, label %19, label %60

; <label>:19:                                     ; preds = %17
  %20 = load i8, i8* %2, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp eq i32 %21, 126
  br i1 %22, label %23, label %60

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds i8, i8* %2, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 47
  br i1 %27, label %28, label %60

; <label>:28:                                     ; preds = %23
  %29 = sext i32 %0 to i64
  %30 = getelementptr inbounds [160 x %struct.anon.83], [160 x %struct.anon.83]* @commands, i64 0, i64 %29
  %31 = getelementptr inbounds %struct.anon.83, %struct.anon.83* %30, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast i8* %32 to i8**
  %34 = call i8* @home_dir()
  %35 = icmp ne i8* %34, null
  br i1 %35, label %36, label %60

; <label>:36:                                     ; preds = %28
  %37 = call i64 @strlen(i8* %34) #14
  %38 = trunc i64 %37 to i32
  %39 = sext i32 %38 to i64
  %sext = sext i32 0 to i64
  call void @unroll_loop(i32 266)
  %40 = icmp ne i64 %39, %sext
  br i1 %40, label %.lr.ph3, label %.critedge

.lr.ph3:                                          ; preds = %36
  br label %41

; <label>:41:                                     ; preds = %.lr.ph3, %47
  %indvars.iv1 = phi i64 [ %39, %.lr.ph3 ], [ %indvars.iv.next, %47 ]
  %42 = sub nsw i64 %indvars.iv1, 1
  %43 = getelementptr inbounds i8, i8* %34, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp eq i32 %45, 47
  br i1 %46, label %47, label %..critedge_crit_edge4

; <label>:47:                                     ; preds = %41
  %indvars.iv.next = add nsw i64 %indvars.iv1, -1
  %48 = getelementptr inbounds i8, i8* %34, i64 %indvars.iv.next
  store i8 0, i8* %48, align 1
  call void @unroll_loop(i32 266)
  %49 = icmp ne i64 %indvars.iv.next, %sext
  br i1 %49, label %41, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %47
  br label %.critedge

..critedge_crit_edge4:                            ; preds = %41
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge4, %..critedge_crit_edge, %36
  %50 = getelementptr inbounds i8, i8* %2, i32 1
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp eq i32 %52, 47
  br i1 %53, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.critedge
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.012 = phi i8* [ %54, %.lr.ph ], [ %50, %.lr.ph.preheader ]
  call void @unroll_loop(i32 267)
  %54 = getelementptr inbounds i8, i8* %.012, i32 1
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = icmp eq i32 %56, 47
  br i1 %57, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.01.lcssa.ph = phi i8* [ %54, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.critedge
  %.01.lcssa = phi i8* [ %50, %.critedge ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %58 = getelementptr [2 x i8], [2 x i8]* @.str.16.637, i32 0, i32 0
  %59 = call i8* (i8*, ...) @concat_strings(i8* %34, i8* %58, i8* %.01.lcssa, i8* null)
  store i8* %59, i8** %33, align 8
  br label %60

; <label>:60:                                     ; preds = %28, %._crit_edge, %23, %19, %17, %11
  %61 = trunc i8 %5 to i1
  ret i1 %61
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @setval_internal(i32, i8*, i8*) #0 {
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %5 = load i8, i8* %4, align 1
  %6 = trunc i8 %5 to i1
  br i1 %6, label %7, label %13

; <label>:7:                                      ; preds = %3
  %8 = sext i32 %0 to i64
  %9 = getelementptr inbounds [160 x %struct.anon.83], [160 x %struct.anon.83]* @commands, i64 0, i64 %8
  %10 = getelementptr inbounds %struct.anon.83, %struct.anon.83* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr [23 x i8], [23 x i8]* @.str.212.833, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %12, i8* %1, i8* %11, i8* %2)
  br label %13

; <label>:13:                                     ; preds = %3, %7
  %14 = sext i32 %0 to i64
  %15 = getelementptr inbounds [160 x %struct.anon.83], [160 x %struct.anon.83]* @commands, i64 0, i64 %14
  %16 = getelementptr inbounds %struct.anon.83, %struct.anon.83* %15, i32 0, i32 2
  %17 = load i1 (i8*, i8*, i8*)*, i1 (i8*, i8*, i8*)** %16, align 8
  %18 = sext i32 %0 to i64
  %19 = getelementptr inbounds [160 x %struct.anon.83], [160 x %struct.anon.83]* @commands, i64 0, i64 %18
  %20 = getelementptr inbounds %struct.anon.83, %struct.anon.83* %19, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = call zeroext i1 %17(i8* %1, i8* %2, i8* %21)
  ret i1 %22
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_file(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i8**
  %5 = load i8*, i8** %4, align 8
  call void @free(i8* %5) #8
  store i8* null, i8** %4, align 8
  %6 = call noalias i8* @xstrdup(i8* %1)
  store i8* %6, i8** %4, align 8
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_directory(i8*, i8*, i8*) #0 {
  %4 = call zeroext i1 @cmd_file(i8* %0, i8* %1, i8* %2)
  br i1 %4, label %5, label %20

; <label>:5:                                      ; preds = %3
  %6 = bitcast i8* %2 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = call i64 @strlen(i8* %7) #14
  %9 = getelementptr inbounds i8, i8* %7, i64 %8
  br label %10

; <label>:10:                                     ; preds = %19, %5
  %.01 = phi i8* [ %9, %5 ], [ %.1, %19 ]
  call void @unroll_loop(i32 268)
  %11 = icmp ugt i8* %.01, %7
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %10
  %13 = getelementptr inbounds i8, i8* %.01, i32 -1
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp eq i32 %15, 47
  br label %17

; <label>:17:                                     ; preds = %12, %10
  %.1 = phi i8* [ %13, %12 ], [ %.01, %10 ]
  %18 = phi i1 [ false, %10 ], [ %16, %12 ]
  br i1 %18, label %19, label %.loopexit

; <label>:19:                                     ; preds = %17
  store i8 0, i8* %.1, align 1
  br label %10

.loopexit:                                        ; preds = %17
  %.0.ph = phi i1 [ true, %17 ]
  br label %20

; <label>:20:                                     ; preds = %.loopexit, %3
  %.0 = phi i1 [ false, %3 ], [ %.0.ph, %.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_vector(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i8***
  %5 = load i8, i8* %1, align 1
  %6 = icmp ne i8 %5, 0
  %7 = load i8**, i8*** %4, align 8
  br i1 %6, label %8, label %11

; <label>:8:                                      ; preds = %3
  %9 = call i8** @sepstring(i8* %1)
  %10 = call i8** @merge_vecs(i8** %7, i8** %9)
  store i8** %10, i8*** %4, align 8
  br label %12

; <label>:11:                                     ; preds = %3
  call void @free_vec(i8** %7)
  store i8** null, i8*** %4, align 8
  br label %12

; <label>:12:                                     ; preds = %11, %8
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_string(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i8**
  %5 = load i8*, i8** %4, align 8
  call void @free(i8* %5) #8
  store i8* null, i8** %4, align 8
  %6 = call noalias i8* @xstrdup(i8* %1)
  store i8* %6, i8** %4, align 8
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_boolean(i8*, i8*, i8*) #0 {
  %4 = call i32 @cmd_boolean_internal(i8* %0, i8* %1, i8* %2)
  switch i32 %4, label %6 [
    i32 0, label %13
    i32 1, label %5
  ]

; <label>:5:                                      ; preds = %3
  br label %13

; <label>:6:                                      ; preds = %3
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = getelementptr [48 x i8], [48 x i8]* @.str.177.832, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8, !track !516
  %10 = load i8*, i8** @exec_name, align 8
  %11 = call i8* @quote(i8* %1)
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %9, i8* %10, i8* %0, i8* %11)
  br label %16

; <label>:13:                                     ; preds = %3, %5
  %.01 = phi i8 [ 1, %5 ], [ 0, %3 ]
  %14 = trunc i8 %.01 to i1
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %2, align 1
  br label %16

; <label>:16:                                     ; preds = %13, %6
  %.0 = phi i1 [ false, %6 ], [ true, %13 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_number(i8*, i8*, i8*) #0 {
  %4 = call i64 @strlen(i8* %1) #14
  %5 = getelementptr inbounds i8, i8* %1, i64 %4
  %6 = bitcast i8* %2 to i32*
  %7 = call zeroext i1 @simple_atoi(i8* %1, i8* %5, i32* %6)
  br i1 %7, label %8, label %12

; <label>:8:                                      ; preds = %3
  %9 = bitcast i8* %2 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %19

; <label>:12:                                     ; preds = %8, %3
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = getelementptr [28 x i8], [28 x i8]* @.str.178.831, i32 0, i32 0
  %15 = call i8* @gettext(i8* %14) #8, !track !517
  %16 = load i8*, i8** @exec_name, align 8
  %17 = call i8* @quote(i8* %1)
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* %15, i8* %16, i8* %0, i8* %17)
  br label %19

; <label>:19:                                     ; preds = %8, %12
  %.0 = phi i1 [ false, %12 ], [ true, %8 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_cert_type(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i32*
  %5 = getelementptr [3 x %struct.hsts_kh], [3 x %struct.hsts_kh]* @cmd_cert_type.choices, i32 0, i32 0
  %6 = call zeroext i1 @decode_string(i8* %1, %struct.hsts_kh* %5, i32 3, i32* %4)
  %7 = zext i1 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %16, label %9

; <label>:9:                                      ; preds = %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = getelementptr [27 x i8], [27 x i8]* @.str.182.799, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8, !track !518
  %13 = load i8*, i8** @exec_name, align 8
  %14 = call i8* @quote(i8* %1)
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* %12, i8* %13, i8* %0, i8* %14)
  br label %16

; <label>:16:                                     ; preds = %9, %3
  %17 = icmp ne i32 %7, 0
  ret i1 %17
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_check_cert(i8*, i8*, i8*) #0 {
  %4 = call i32 @cmd_boolean_internal(i8* %0, i8* %1, i8* %2)
  switch i32 %4, label %6 [
    i32 0, label %17
    i32 1, label %5
  ]

; <label>:5:                                      ; preds = %3
  br label %17

; <label>:6:                                      ; preds = %3
  %7 = getelementptr [6 x i8], [6 x i8]* @.str.126.747, i32 0, i32 0
  %8 = call i32 @c_strcasecmp(i8* %1, i8* %7) #14
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %17

; <label>:10:                                     ; preds = %6
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = getelementptr [49 x i8], [49 x i8]* @.str.183.827, i32 0, i32 0
  %13 = call i8* @gettext(i8* %12) #8, !track !519
  %14 = load i8*, i8** @exec_name, align 8
  %15 = call i8* @quote(i8* %1)
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* %13, i8* %14, i8* %0, i8* %15)
  br label %19

; <label>:17:                                     ; preds = %6, %3, %5
  %.01 = phi i32 [ 1, %5 ], [ 0, %3 ], [ 2, %6 ]
  %18 = bitcast i8* %2 to i32*
  store i32 %.01, i32* %18, align 4
  br label %19

; <label>:19:                                     ; preds = %17, %10
  %.0 = phi i1 [ false, %10 ], [ true, %17 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_time(i8*, i8*, i8*) #0 {
  %4 = alloca double, align 8
  %5 = call i64 @strlen(i8* %1) #14
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  br label %7

; <label>:7:                                      ; preds = %14, %3
  %.01 = phi i8* [ %6, %3 ], [ %16, %14 ]
  %8 = icmp ult i8* %1, %.01
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %7
  %10 = getelementptr inbounds i8, i8* %.01, i64 -1
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = call zeroext i1 @c_isspace(i32 %12)
  br label %14

; <label>:14:                                     ; preds = %9, %7
  %15 = phi i1 [ false, %7 ], [ %13, %9 ]
  %16 = getelementptr inbounds i8, i8* %.01, i32 -1
  br i1 %15, label %7, label %17

; <label>:17:                                     ; preds = %14
  %.01.lcssa = phi i8* [ %.01, %14 ]
  %18 = icmp eq i8* %1, %.01.lcssa
  br i1 %18, label %19, label %26

; <label>:19:                                     ; preds = %64, %62, %17
  %.02 = phi i8* [ %1, %17 ], [ %.13.lcssa, %62 ], [ %.13.lcssa, %64 ]
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %21 = getelementptr [32 x i8], [32 x i8]* @.str.184.826, i32 0, i32 0
  %22 = call i8* @gettext(i8* %21) #8, !track !520
  %23 = load i8*, i8** @exec_name, align 8
  %24 = call i8* @quote(i8* %.02)
  %25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* %22, i8* %23, i8* %0, i8* %24)
  br label %70

; <label>:26:                                     ; preds = %17
  %27 = getelementptr inbounds i8, i8* %.01.lcssa, i64 -1
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = call i32 @c_tolower(i32 %29)
  switch i32 %30, label %41 [
    i32 115, label %31
    i32 109, label %33
    i32 104, label %35
    i32 100, label %37
    i32 119, label %39
  ]

; <label>:31:                                     ; preds = %26
  %32 = getelementptr inbounds i8, i8* %.01.lcssa, i32 -1
  br label %41

; <label>:33:                                     ; preds = %26
  %34 = getelementptr inbounds i8, i8* %.01.lcssa, i32 -1
  br label %41

; <label>:35:                                     ; preds = %26
  %36 = getelementptr inbounds i8, i8* %.01.lcssa, i32 -1
  br label %41

; <label>:37:                                     ; preds = %26
  %38 = getelementptr inbounds i8, i8* %.01.lcssa, i32 -1
  br label %41

; <label>:39:                                     ; preds = %26
  %40 = getelementptr inbounds i8, i8* %.01.lcssa, i32 -1
  br label %41

; <label>:41:                                     ; preds = %26, %39, %37, %35, %33, %31
  %.04 = phi double [ 6.048000e+05, %39 ], [ 8.640000e+04, %37 ], [ 3.600000e+03, %35 ], [ 6.000000e+01, %33 ], [ 1.000000e+00, %31 ], [ 1.000000e+00, %26 ]
  %.1 = phi i8* [ %40, %39 ], [ %38, %37 ], [ %36, %35 ], [ %34, %33 ], [ %32, %31 ], [ %.01.lcssa, %26 ]
  br label %42

; <label>:42:                                     ; preds = %48, %41
  %.13 = phi i8* [ %1, %41 ], [ %50, %48 ]
  call void @unroll_loop(i32 269)
  %43 = icmp ult i8* %.13, %.1
  br i1 %43, label %44, label %48

; <label>:44:                                     ; preds = %42
  %45 = load i8, i8* %.13, align 1
  %46 = sext i8 %45 to i32
  %47 = call zeroext i1 @c_isspace(i32 %46)
  br label %48

; <label>:48:                                     ; preds = %44, %42
  %49 = phi i1 [ false, %42 ], [ %47, %44 ]
  %50 = getelementptr inbounds i8, i8* %.13, i32 1
  br i1 %49, label %42, label %51

; <label>:51:                                     ; preds = %48
  %.13.lcssa = phi i8* [ %.13, %48 ]
  br label %52

; <label>:52:                                     ; preds = %59, %51
  %.2 = phi i8* [ %.1, %51 ], [ %61, %59 ]
  %53 = icmp ult i8* %.13.lcssa, %.2
  br i1 %53, label %54, label %59

; <label>:54:                                     ; preds = %52
  %55 = getelementptr inbounds i8, i8* %.2, i64 -1
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = call zeroext i1 @c_isspace(i32 %57)
  br label %59

; <label>:59:                                     ; preds = %54, %52
  %60 = phi i1 [ false, %52 ], [ %58, %54 ]
  %61 = getelementptr inbounds i8, i8* %.2, i32 -1
  br i1 %60, label %52, label %62

; <label>:62:                                     ; preds = %59
  %.2.lcssa = phi i8* [ %.2, %59 ]
  %63 = icmp eq i8* %.13.lcssa, %.2.lcssa
  br i1 %63, label %19, label %64

; <label>:64:                                     ; preds = %62
  %65 = call zeroext i1 @simple_atof(i8* %.13.lcssa, i8* %.2.lcssa, double* %4)
  br i1 %65, label %66, label %19

; <label>:66:                                     ; preds = %64
  %67 = load double, double* %4, align 8
  %68 = fmul double %67, %.04
  %69 = bitcast i8* %2 to double*
  store double %68, double* %69, align 8
  br label %70

; <label>:70:                                     ; preds = %66, %19
  %.0 = phi i1 [ false, %19 ], [ true, %66 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_file_once(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %13

; <label>:7:                                      ; preds = %3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = getelementptr [31 x i8], [31 x i8]* @.str.185.825, i32 0, i32 0
  %10 = call i8* @gettext(i8* %9) #8, !track !521
  %11 = load i8*, i8** @exec_name, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* %10, i8* %11, i8* %0)
  br label %15

; <label>:13:                                     ; preds = %3
  %14 = call zeroext i1 @cmd_file(i8* %0, i8* %1, i8* %2)
  br label %15

; <label>:15:                                     ; preds = %13, %7
  %.0 = phi i1 [ false, %7 ], [ %14, %13 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_dirstruct(i8*, i8*, i8*) #0 {
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %5 = call zeroext i1 @cmd_boolean(i8* %0, i8* %1, i8* %4)
  br i1 %5, label %6, label %13

; <label>:6:                                      ; preds = %3
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %8 = load i8, i8* %7, align 8
  %9 = trunc i8 %8 to i1
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  br i1 %9, label %11, label %12

; <label>:11:                                     ; preds = %6
  store i8 0, i8* %10, align 1
  br label %13

; <label>:12:                                     ; preds = %6
  store i8 1, i8* %10, align 1
  br label %13

; <label>:13:                                     ; preds = %11, %12, %3
  %.0 = phi i1 [ false, %3 ], [ true, %12 ], [ true, %11 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_bytes(i8*, i8*, i8*) #0 {
  %4 = alloca double, align 8
  %5 = call zeroext i1 @parse_bytes_helper(i8* %1, double* %4)
  br i1 %5, label %13, label %6

; <label>:6:                                      ; preds = %3
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = getelementptr [31 x i8], [31 x i8]* @.str.186.818, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8, !track !522
  %10 = load i8*, i8** @exec_name, align 8
  %11 = call i8* @quote(i8* %1)
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %9, i8* %10, i8* %0, i8* %11)
  br label %17

; <label>:13:                                     ; preds = %3
  %14 = load double, double* %4, align 8
  %15 = fptosi double %14 to i64
  %16 = bitcast i8* %2 to i64*
  store i64 %15, i64* %16, align 8
  br label %17

; <label>:17:                                     ; preds = %13, %6
  %.0 = phi i1 [ true, %13 ], [ false, %6 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_directory_vector(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i8***
  %5 = load i8, i8* %1, align 1
  %6 = icmp ne i8 %5, 0
  br i1 %6, label %7, label %36

; <label>:7:                                      ; preds = %3
  %8 = call i8** @sepstring(i8* %1)
  call void @unroll_loop(i32 270)
  %9 = icmp ne i8** %8, null
  br i1 %9, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %7
  br label %10

; <label>:10:                                     ; preds = %.lr.ph, %31
  %.01 = phi i8** [ %8, %.lr.ph ], [ %32, %31 ]
  %11 = load i8*, i8** %.01, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %..critedge_crit_edge2

; <label>:13:                                     ; preds = %10
  %14 = load i8*, i8** %.01, align 8
  %15 = call i64 @strlen(i8* %14) #14
  %16 = trunc i64 %15 to i32
  %17 = icmp sgt i32 %16, 1
  br i1 %17, label %18, label %31

; <label>:18:                                     ; preds = %13
  %19 = load i8*, i8** %.01, align 8
  %20 = sub nsw i32 %16, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp eq i32 %24, 47
  br i1 %25, label %26, label %31

; <label>:26:                                     ; preds = %18
  %27 = load i8*, i8** %.01, align 8
  %28 = sub nsw i32 %16, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  store i8 0, i8* %30, align 1
  br label %31

; <label>:31:                                     ; preds = %13, %26, %18
  %32 = getelementptr inbounds i8*, i8** %.01, i32 1
  call void @unroll_loop(i32 270)
  %33 = icmp ne i8** %32, null
  br i1 %33, label %10, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %31
  br label %.critedge

..critedge_crit_edge2:                            ; preds = %10
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge2, %..critedge_crit_edge, %7
  %34 = load i8**, i8*** %4, align 8
  %35 = call i8** @merge_vecs(i8** %34, i8** %8)
  store i8** %35, i8*** %4, align 8
  br label %38

; <label>:36:                                     ; preds = %3
  %37 = load i8**, i8*** %4, align 8
  call void @free_vec(i8** %37)
  store i8** null, i8*** %4, align 8
  br label %38

; <label>:38:                                     ; preds = %36, %.critedge
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_header(i8*, i8*, i8*) #0 {
  %4 = load i8, i8* %1, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %3
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  %9 = load i8**, i8*** %8, align 8
  call void @free_vec(i8** %9)
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  store i8** null, i8*** %10, align 8
  br label %25

; <label>:11:                                     ; preds = %3
  %12 = call zeroext i1 @check_user_specified_header(i8* %1)
  br i1 %12, label %20, label %13

; <label>:13:                                     ; preds = %11
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %15 = getelementptr [28 x i8], [28 x i8]* @.str.188.824, i32 0, i32 0
  %16 = call i8* @gettext(i8* %15) #8, !track !523
  %17 = load i8*, i8** @exec_name, align 8
  %18 = call i8* @quote(i8* %1)
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* %16, i8* %17, i8* %0, i8* %18)
  br label %25

; <label>:20:                                     ; preds = %11
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  %22 = load i8**, i8*** %21, align 8
  %23 = call i8** @vec_append(i8** %22, i8* %1)
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 68
  store i8** %23, i8*** %24, align 8
  br label %25

; <label>:25:                                     ; preds = %20, %13, %7
  %.0 = phi i1 [ true, %7 ], [ true, %20 ], [ false, %13 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_htmlify(i8*, i8*, i8*) #0 {
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 104
  %5 = call zeroext i1 @cmd_boolean(i8* %0, i8* %1, i8* %4)
  %6 = zext i1 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %14

; <label>:8:                                      ; preds = %3
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 104
  %10 = load i8, i8* %9, align 1
  %11 = trunc i8 %10 to i1
  br i1 %11, label %14, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 103
  store i8 0, i8* %13, align 2
  br label %14

; <label>:14:                                     ; preds = %12, %8, %3
  %15 = icmp ne i32 %6, 0
  ret i1 %15
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_string_uppercase(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i8**
  %5 = load i8*, i8** %4, align 8
  call void @free(i8* %5) #8
  store i8* null, i8** %4, align 8
  %6 = call i64 @strlen(i8* %1) #14
  %7 = add i64 %6, 1
  %8 = call noalias i8* @xmalloc(i64 %7)
  store i8* %8, i8** %4, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = load i8, i8* %1, align 1
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.03 = phi i8* [ %17, %.lr.ph ], [ %9, %.lr.ph.preheader ]
  %.012 = phi i8* [ %16, %.lr.ph ], [ %1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 271)
  %12 = load i8, i8* %.012, align 1
  %13 = sext i8 %12 to i32
  %14 = call i32 @c_toupper(i32 %13)
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %.03, align 1
  %16 = getelementptr inbounds i8, i8* %.012, i32 1
  %17 = getelementptr inbounds i8, i8* %.03, i32 1
  %18 = load i8, i8* %16, align 1
  %19 = icmp ne i8 %18, 0
  br i1 %19, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i8* [ %17, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.0.lcssa = phi i8* [ %9, %3 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.0.lcssa, align 1
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_mirror(i8*, i8*, i8*) #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = call zeroext i1 @cmd_boolean(i8* %0, i8* %1, i8* %5)
  br i1 %6, label %7, label %21

; <label>:7:                                      ; preds = %3
  %8 = load i32, i32* %4, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %21

; <label>:10:                                     ; preds = %7
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  store i8 1, i8* %11, align 1
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %17, label %15

; <label>:15:                                     ; preds = %10
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  store i8 1, i8* %16, align 8
  br label %17

; <label>:17:                                     ; preds = %15, %10
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  store i8 1, i8* %18, align 4
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  store i32 -1, i32* %19, align 4
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 103
  store i8 0, i8* %20, align 2
  br label %21

; <label>:21:                                     ; preds = %7, %17, %3
  %.0 = phi i1 [ false, %3 ], [ true, %17 ], [ true, %7 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_number_inf(i8*, i8*, i8*) #0 {
  %4 = getelementptr [4 x i8], [4 x i8]* @.str.187.819, i32 0, i32 0
  %5 = call i32 @c_strcasecmp(i8* %1, i8* %4) #14
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %3
  %8 = bitcast i8* %2 to i32*
  store i32 0, i32* %8, align 4
  br label %11

; <label>:9:                                      ; preds = %3
  %10 = call zeroext i1 @cmd_number(i8* %0, i8* %1, i8* %2)
  br label %11

; <label>:11:                                     ; preds = %9, %7
  %.0 = phi i1 [ %10, %9 ], [ true, %7 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_prefer_family(i8*, i8*, i8*) #0 {
  %4 = alloca i32, align 4
  store i32 2, i32* %4, align 4
  %5 = getelementptr [3 x %struct.hsts_kh], [3 x %struct.hsts_kh]* @cmd_spec_prefer_family.choices, i32 0, i32 0
  %6 = call zeroext i1 @decode_string(i8* %1, %struct.hsts_kh* %5, i32 3, i32* %4)
  %7 = zext i1 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %16, label %9

; <label>:9:                                      ; preds = %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = getelementptr [27 x i8], [27 x i8]* @.str.182.799, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8, !track !524
  %13 = load i8*, i8** @exec_name, align 8
  %14 = call i8* @quote(i8* %1)
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* %12, i8* %13, i8* %0, i8* %14)
  br label %16

; <label>:16:                                     ; preds = %9, %3
  %17 = load i32, i32* %4, align 4
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 146
  store i32 %17, i32* %18, align 8
  %19 = icmp ne i32 %7, 0
  ret i1 %19
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_progress(i8*, i8*, i8*) #0 {
  %4 = call zeroext i1 @valid_progress_implementation_p(i8* %1)
  br i1 %4, label %12, label %5

; <label>:5:                                      ; preds = %3
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %7 = getelementptr [35 x i8], [35 x i8]* @.str.192.820, i32 0, i32 0
  %8 = call i8* @gettext(i8* %7) #8, !track !525
  %9 = load i8*, i8** @exec_name, align 8
  %10 = call i8* @quote(i8* %1)
  %11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* %8, i8* %9, i8* %0, i8* %10)
  br label %18

; <label>:12:                                     ; preds = %3
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 77
  %14 = load i8*, i8** %13, align 8
  call void @free(i8* %14) #8
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 77
  store i8* null, i8** %15, align 8
  %16 = call noalias i8* @xstrdup(i8* %1)
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 77
  store i8* %16, i8** %17, align 8
  br label %18

; <label>:18:                                     ; preds = %12, %5
  %.0 = phi i1 [ true, %12 ], [ false, %5 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_bytes_sum(i8*, i8*, i8*) #0 {
  %4 = alloca double, align 8
  %5 = call zeroext i1 @parse_bytes_helper(i8* %1, double* %4)
  br i1 %5, label %13, label %6

; <label>:6:                                      ; preds = %3
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = getelementptr [31 x i8], [31 x i8]* @.str.186.818, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8, !track !526
  %10 = load i8*, i8** @exec_name, align 8
  %11 = call i8* @quote(i8* %1)
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %9, i8* %10, i8* %0, i8* %11)
  br label %17

; <label>:13:                                     ; preds = %3
  %14 = load double, double* %4, align 8
  %15 = fptosi double %14 to i64
  %16 = bitcast i8* %2 to i64*
  store i64 %15, i64* %16, align 8
  br label %17

; <label>:17:                                     ; preds = %13, %6
  %.0 = phi i1 [ true, %13 ], [ false, %6 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_recursive(i8*, i8*, i8*) #0 {
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %5 = call zeroext i1 @cmd_boolean(i8* %0, i8* %1, i8* %4)
  br i1 %5, label %6, label %16

; <label>:6:                                      ; preds = %3
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %8 = load i8, i8* %7, align 1
  %9 = trunc i8 %8 to i1
  br i1 %9, label %10, label %16

; <label>:10:                                     ; preds = %6
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %12 = load i8, i8* %11, align 1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %16, label %14

; <label>:14:                                     ; preds = %10
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  store i8 1, i8* %15, align 8
  br label %16

; <label>:16:                                     ; preds = %14, %10, %6, %3
  %.0 = phi i1 [ false, %3 ], [ true, %6 ], [ true, %10 ], [ true, %14 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_regex_type(i8*, i8*, i8*) #0 {
  %4 = alloca i32, align 4
  store i32 1, i32* %4, align 4
  %5 = getelementptr [2 x %struct.hsts_kh], [2 x %struct.hsts_kh]* @cmd_spec_regex_type.choices, i32 0, i32 0
  %6 = call zeroext i1 @decode_string(i8* %1, %struct.hsts_kh* %5, i32 2, i32* %4)
  %7 = zext i1 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %16, label %9

; <label>:9:                                      ; preds = %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = getelementptr [27 x i8], [27 x i8]* @.str.182.799, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8, !track !527
  %13 = load i8*, i8** @exec_name, align 8
  %14 = call i8* @quote(i8* %1)
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* %12, i8* %13, i8* %0, i8* %14)
  br label %16

; <label>:16:                                     ; preds = %9, %3
  %17 = load i32, i32* %4, align 4
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 36
  store i32 %17, i32* %18, align 8
  %19 = icmp ne i32 %7, 0
  ret i1 %19
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_report_speed(i8*, i8*, i8*) #0 {
  %4 = getelementptr [5 x i8], [5 x i8]* @.str.195.815, i32 0, i32 0
  %5 = call i32 @c_strcasecmp(i8* %1, i8* %4) #14
  %6 = icmp eq i32 %5, 0
  %7 = zext i1 %6 to i8
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 155
  store i8 %7, i8* %8, align 1
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 155
  %10 = load i8, i8* %9, align 1
  %11 = trunc i8 %10 to i1
  br i1 %11, label %19, label %12

; <label>:12:                                     ; preds = %3
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = getelementptr [27 x i8], [27 x i8]* @.str.182.799, i32 0, i32 0
  %15 = call i8* @gettext(i8* %14) #8, !track !528
  %16 = load i8*, i8** @exec_name, align 8
  %17 = call i8* @quote(i8* %1)
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* %15, i8* %16, i8* %0, i8* %17)
  br label %19

; <label>:19:                                     ; preds = %12, %3
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 155
  %21 = load i8, i8* %20, align 1
  %22 = trunc i8 %21 to i1
  ret i1 %22
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_restrict_file_names(i8*, i8*, i8*) #0 {
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 139
  %7 = load i8, i8* %6, align 4
  %8 = trunc i8 %7 to i1
  %9 = zext i1 %8 to i32
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 141
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 140
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  %15 = zext i1 %14 to i32
  br label %16

; <label>:16:                                     ; preds = %99, %3
  %.016 = phi i32 [ %11, %3 ], [ %.521, %99 ]
  %.09 = phi i32 [ %9, %3 ], [ %.615, %99 ]
  %.05 = phi i32 [ %5, %3 ], [ %.38, %99 ]
  %.03 = phi i32 [ %15, %3 ], [ %.6, %99 ]
  %.02 = phi i8* [ %1, %3 ], [ %spec.select, %99 ]
  call void @unroll_loop(i32 272)
  %17 = call i8* @strchr(i8* %.02, i32 44) #14, !track !529
  %18 = icmp ne i8* %17, null
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %16
  %20 = call i64 @strlen(i8* %.02) #14
  %21 = getelementptr inbounds i8, i8* %.02, i64 %20
  br label %22

; <label>:22:                                     ; preds = %19, %16
  %.01 = phi i8* [ %17, %16 ], [ %21, %19 ]
  %23 = ptrtoint i8* %.01 to i64
  %24 = ptrtoint i8* %.02 to i64
  %25 = sub i64 %23, %24
  %26 = icmp eq i64 %25, 4
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %22
  %28 = getelementptr [5 x i8], [5 x i8]* @.str.196.807, i32 0, i32 0
  %29 = call i32 @memcmp(i8* %.02, i8* %28, i64 4) #14
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %92

; <label>:31:                                     ; preds = %27, %22
  %32 = ptrtoint i8* %.01 to i64
  %33 = ptrtoint i8* %.02 to i64
  %34 = sub i64 %32, %33
  %35 = icmp eq i64 %34, 3
  br i1 %35, label %36, label %40

; <label>:36:                                     ; preds = %31
  %37 = getelementptr [4 x i8], [4 x i8]* @.str.197.808, i32 0, i32 0
  %38 = call i32 @memcmp(i8* %.02, i8* %37, i64 3) #14
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %92

; <label>:40:                                     ; preds = %36, %31
  %41 = ptrtoint i8* %.01 to i64
  %42 = ptrtoint i8* %.02 to i64
  %43 = sub i64 %41, %42
  %44 = icmp eq i64 %43, 7
  br i1 %44, label %45, label %49

; <label>:45:                                     ; preds = %40
  %46 = getelementptr [8 x i8], [8 x i8]* @.str.198.809, i32 0, i32 0
  %47 = call i32 @memcmp(i8* %.02, i8* %46, i64 7) #14
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %92

; <label>:49:                                     ; preds = %45, %40
  %50 = ptrtoint i8* %.01 to i64
  %51 = ptrtoint i8* %.02 to i64
  %52 = sub i64 %50, %51
  %53 = icmp eq i64 %52, 9
  br i1 %53, label %54, label %58

; <label>:54:                                     ; preds = %49
  %55 = getelementptr [10 x i8], [10 x i8]* @.str.199.810, i32 0, i32 0
  %56 = call i32 @memcmp(i8* %.02, i8* %55, i64 9) #14
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %92

; <label>:58:                                     ; preds = %54, %49
  %59 = ptrtoint i8* %.01 to i64
  %60 = ptrtoint i8* %.02 to i64
  %61 = sub i64 %59, %60
  %62 = icmp eq i64 %61, 9
  br i1 %62, label %63, label %67

; <label>:63:                                     ; preds = %58
  %64 = getelementptr [10 x i8], [10 x i8]* @.str.200.811, i32 0, i32 0
  %65 = call i32 @memcmp(i8* %.02, i8* %64, i64 9) #14
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %92

; <label>:67:                                     ; preds = %63, %58
  %68 = ptrtoint i8* %.01 to i64
  %69 = ptrtoint i8* %.02 to i64
  %70 = sub i64 %68, %69
  %71 = icmp eq i64 %70, 9
  br i1 %71, label %72, label %76

; <label>:72:                                     ; preds = %67
  %73 = getelementptr [10 x i8], [10 x i8]* @.str.201.812, i32 0, i32 0
  %74 = call i32 @memcmp(i8* %.02, i8* %73, i64 9) #14
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %92

; <label>:76:                                     ; preds = %72, %67
  %77 = ptrtoint i8* %.01 to i64
  %78 = ptrtoint i8* %.02 to i64
  %79 = sub i64 %77, %78
  %80 = icmp eq i64 %79, 5
  br i1 %80, label %81, label %85

; <label>:81:                                     ; preds = %76
  %82 = getelementptr [6 x i8], [6 x i8]* @.str.202.813, i32 0, i32 0
  %83 = call i32 @memcmp(i8* %.02, i8* %82, i64 5) #14
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %92

; <label>:85:                                     ; preds = %81, %76
  %.02.lcssa = phi i8* [ %.02, %81 ], [ %.02, %76 ]
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %87 = getelementptr [103 x i8], [103 x i8]* @.str.203.814, i32 0, i32 0
  %88 = call i8* @gettext(i8* %87) #8, !track !530
  %89 = load i8*, i8** @exec_name, align 8
  %90 = call i8* @quote(i8* %.02.lcssa)
  %91 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* %88, i8* %89, i8* %0, i8* %90)
  br label %111

; <label>:92:                                     ; preds = %36, %54, %72, %81, %63, %45, %27
  %.521 = phi i32 [ %.016, %27 ], [ %.016, %36 ], [ %.016, %45 ], [ 1, %54 ], [ 2, %63 ], [ %.016, %81 ], [ %.016, %72 ]
  %.615 = phi i32 [ %.09, %27 ], [ %.09, %36 ], [ %.09, %45 ], [ %.09, %54 ], [ %.09, %63 ], [ 0, %72 ], [ %.09, %81 ]
  %.38 = phi i32 [ 0, %27 ], [ 1, %36 ], [ 2, %45 ], [ %.05, %63 ], [ %.05, %81 ], [ %.05, %72 ], [ %.05, %54 ]
  %.6 = phi i32 [ %.03, %27 ], [ %.03, %36 ], [ %.03, %45 ], [ %.03, %54 ], [ %.03, %63 ], [ %.03, %72 ], [ 1, %81 ]
  %93 = load i8, i8* %.01, align 1
  %94 = icmp ne i8 %93, 0
  %95 = getelementptr inbounds i8, i8* %.01, i64 1
  %spec.select = select i1 %94, i8* %95, i8* %.02
  %96 = load i8, i8* %spec.select, align 1
  %97 = sext i8 %96 to i32
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %99, label %.critedge

; <label>:99:                                     ; preds = %92
  %100 = load i8, i8* %.01, align 1
  %101 = sext i8 %100 to i32
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %16, label %.critedge

.critedge:                                        ; preds = %92, %99
  %.521.lcssa = phi i32 [ %.521, %99 ], [ %.521, %92 ]
  %.615.lcssa = phi i32 [ %.615, %99 ], [ %.615, %92 ]
  %.38.lcssa = phi i32 [ %.38, %99 ], [ %.38, %92 ]
  %.6.lcssa = phi i32 [ %.6, %99 ], [ %.6, %92 ]
  %103 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  store i32 %.38.lcssa, i32* %103, align 8
  %104 = icmp ne i32 %.615.lcssa, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 139
  store i8 %105, i8* %106, align 4
  %107 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 141
  store i32 %.521.lcssa, i32* %107, align 8
  %108 = icmp ne i32 %.6.lcssa, 0
  %109 = zext i1 %108 to i8
  %110 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 140
  store i8 %109, i8* %110, align 1
  br label %111

; <label>:111:                                    ; preds = %.critedge, %85
  %.0 = phi i1 [ false, %85 ], [ true, %.critedge ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_secure_protocol(i8*, i8*, i8*) #0 {
  %4 = bitcast i8* %2 to i32*
  %5 = getelementptr [7 x %struct.hsts_kh], [7 x %struct.hsts_kh]* @cmd_spec_secure_protocol.choices, i32 0, i32 0
  %6 = call zeroext i1 @decode_string(i8* %1, %struct.hsts_kh* %5, i32 7, i32* %4)
  %7 = zext i1 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %16, label %9

; <label>:9:                                      ; preds = %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = getelementptr [27 x i8], [27 x i8]* @.str.182.799, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8, !track !531
  %13 = load i8*, i8** @exec_name, align 8
  %14 = call i8* @quote(i8* %1)
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* %12, i8* %13, i8* %0, i8* %14)
  br label %16

; <label>:16:                                     ; preds = %9, %3
  %17 = icmp ne i32 %7, 0
  ret i1 %17
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_progressdisp(i8*, i8*, i8*) #0 {
  %4 = alloca i8, align 1
  %5 = call zeroext i1 @cmd_boolean(i8* %0, i8* %1, i8* %4)
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %3
  %7 = load i8, i8* %4, align 1
  %8 = trunc i8 %7 to i1
  %9 = zext i1 %8 to i32
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  store i32 %9, i32* %10, align 8
  br label %11

; <label>:11:                                     ; preds = %3, %6
  %.0 = phi i1 [ true, %6 ], [ false, %3 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_timeout(i8*, i8*, i8*) #0 {
  %4 = alloca double, align 8
  %5 = bitcast double* %4 to i8*
  %6 = call zeroext i1 @cmd_time(i8* %0, i8* %1, i8* %5)
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %3
  %8 = load double, double* %4, align 8
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  store double %8, double* %9, align 8
  %10 = load double, double* %4, align 8
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 84
  store double %10, double* %11, align 8
  %12 = load double, double* %4, align 8
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 83
  store double %12, double* %13, align 8
  br label %14

; <label>:14:                                     ; preds = %3, %7
  %.0 = phi i1 [ true, %7 ], [ false, %3 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_useragent(i8*, i8*, i8*) #0 {
  %4 = call i8* @strchr(i8* %1, i32 10) #14
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %13

; <label>:6:                                      ; preds = %3
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = getelementptr [27 x i8], [27 x i8]* @.str.182.799, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8, !track !532
  %10 = load i8*, i8** @exec_name, align 8
  %11 = call i8* @quote(i8* %1)
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %9, i8* %10, i8* %0, i8* %11)
  br label %19

; <label>:13:                                     ; preds = %3
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  %15 = load i8*, i8** %14, align 8
  call void @free(i8* %15) #8
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  store i8* null, i8** %16, align 8
  %17 = call noalias i8* @xstrdup(i8* %1)
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 99
  store i8* %17, i8** %18, align 8
  br label %19

; <label>:19:                                     ; preds = %13, %6
  %.0 = phi i1 [ false, %6 ], [ true, %13 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_verbose(i8*, i8*, i8*) #0 {
  %4 = alloca i8, align 1
  %5 = call zeroext i1 @cmd_boolean(i8* %0, i8* %1, i8* %4)
  br i1 %5, label %6, label %12

; <label>:6:                                      ; preds = %3
  %7 = load i8, i8* %4, align 1
  %8 = trunc i8 %7 to i1
  %9 = zext i1 %8 to i32
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  store i32 %9, i32* %10, align 8
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  store i32 -1, i32* %11, align 8
  br label %12

; <label>:12:                                     ; preds = %3, %6
  %.0 = phi i1 [ true, %6 ], [ false, %3 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @cmd_spec_warc_header(i8*, i8*, i8*) #0 {
  %4 = load i8, i8* %1, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %3
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  %9 = load i8**, i8*** %8, align 8
  call void @free_vec(i8** %9)
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  store i8** null, i8*** %10, align 8
  br label %25

; <label>:11:                                     ; preds = %3
  %12 = call zeroext i1 @check_user_specified_header(i8* %1)
  br i1 %12, label %20, label %13

; <label>:13:                                     ; preds = %11
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %15 = getelementptr [33 x i8], [33 x i8]* @.str.211.798, i32 0, i32 0
  %16 = call i8* @gettext(i8* %15) #8, !track !533
  %17 = load i8*, i8** @exec_name, align 8
  %18 = call i8* @quote(i8* %1)
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* %16, i8* %17, i8* %0, i8* %18)
  br label %25

; <label>:20:                                     ; preds = %11
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  %22 = load i8**, i8*** %21, align 8
  %23 = call i8** @vec_append(i8** %22, i8* %1)
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  store i8** %23, i8*** %24, align 8
  br label %25

; <label>:25:                                     ; preds = %20, %13, %7
  %.0 = phi i1 [ true, %7 ], [ true, %20 ], [ false, %13 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @check_user_specified_header(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %1
  br label %5

; <label>:5:                                      ; preds = %.lr.ph, %14
  %.012 = phi i8* [ %0, %.lr.ph ], [ %15, %14 ]
  %6 = load i8, i8* %.012, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 58
  br i1 %8, label %9, label %..critedge_crit_edge3

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %.012, align 1
  %11 = sext i8 %10 to i32
  %12 = call zeroext i1 @c_isspace(i32 %11)
  %13 = xor i1 %12, true
  br i1 %13, label %14, label %..critedge_crit_edge5

; <label>:14:                                     ; preds = %9
  %15 = getelementptr inbounds i8, i8* %.012, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %5, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %14
  %split = phi i8* [ %15, %14 ]
  br label %.critedge

..critedge_crit_edge3:                            ; preds = %5
  %split4 = phi i8* [ %.012, %5 ]
  br label %.critedge

..critedge_crit_edge5:                            ; preds = %9
  %split6 = phi i8* [ %.012, %9 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge5, %..critedge_crit_edge3, %..critedge_crit_edge, %1
  %.01.lcssa = phi i8* [ %split6, %..critedge_crit_edge5 ], [ %split4, %..critedge_crit_edge3 ], [ %split, %..critedge_crit_edge ], [ %0, %1 ]
  %19 = load i8, i8* %.01.lcssa, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp ne i32 %20, 58
  %22 = icmp eq i8* %.01.lcssa, %0
  %or.cond = or i1 %21, %22
  br i1 %or.cond, label %26, label %23

; <label>:23:                                     ; preds = %.critedge
  %24 = call i8* @strchr(i8* %0, i32 10) #14
  %25 = icmp ne i8* %24, null
  %. = select i1 %25, i1 false, i1 true
  br label %26

; <label>:26:                                     ; preds = %23, %.critedge
  %.0 = phi i1 [ false, %.critedge ], [ %., %23 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @decode_string(i8*, %struct.hsts_kh*, i32, i32*) #0 {
  %5 = icmp slt i32 0, %2
  br i1 %5, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %4
  %6 = sext i32 %2 to i64
  br label %7

; <label>:7:                                      ; preds = %.lr.ph, %19
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %19 ]
  %8 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %1, i64 %indvars.iv
  %9 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = call i32 @c_strcasecmp(i8* %0, i8* %10) #14
  %12 = icmp eq i32 0, %11
  br i1 %12, label %13, label %19

; <label>:13:                                     ; preds = %7
  %.01.lcssa2.wide = phi i64 [ %indvars.iv, %7 ]
  %14 = trunc i64 %.01.lcssa2.wide to i32
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %1, i64 %15
  %17 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %16, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  store i32 %18, i32* %3, align 4
  br label %._crit_edge

; <label>:19:                                     ; preds = %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %20 = icmp slt i64 %indvars.iv.next, %6
  br i1 %20, label %7, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %19
  %.0.ph = phi i1 [ false, %19 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4, %13
  %.0 = phi i1 [ true, %13 ], [ false, %4 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @parse_bytes_helper(i8*, double*) #0 {
  %3 = alloca double, align 8
  %4 = call i64 @strlen(i8* %0) #14
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = getelementptr [4 x i8], [4 x i8]* @.str.187.819, i32 0, i32 0
  %7 = call i32 @strcmp(i8* %0, i8* %6) #14
  %8 = icmp eq i32 0, %7
  br i1 %8, label %9, label %.preheader

.preheader:                                       ; preds = %2
  br label %10

; <label>:9:                                      ; preds = %2
  store double 0.000000e+00, double* %1, align 8
  br label %65

; <label>:10:                                     ; preds = %.preheader, %17
  %.02 = phi i8* [ %19, %17 ], [ %5, %.preheader ]
  %11 = icmp ult i8* %0, %.02
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %10
  %13 = getelementptr inbounds i8, i8* %.02, i64 -1
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = call zeroext i1 @c_isspace(i32 %15)
  br label %17

; <label>:17:                                     ; preds = %12, %10
  %18 = phi i1 [ false, %10 ], [ %16, %12 ]
  %19 = getelementptr inbounds i8, i8* %.02, i32 -1
  br i1 %18, label %10, label %20

; <label>:20:                                     ; preds = %17
  %.02.lcssa = phi i8* [ %.02, %17 ]
  %21 = icmp eq i8* %0, %.02.lcssa
  br i1 %21, label %65, label %22

; <label>:22:                                     ; preds = %20
  %23 = getelementptr inbounds i8, i8* %.02.lcssa, i64 -1
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = call i32 @c_tolower(i32 %25)
  switch i32 %26, label %35 [
    i32 107, label %27
    i32 109, label %29
    i32 103, label %31
    i32 116, label %33
  ]

; <label>:27:                                     ; preds = %22
  %28 = getelementptr inbounds i8, i8* %.02.lcssa, i32 -1
  br label %35

; <label>:29:                                     ; preds = %22
  %30 = getelementptr inbounds i8, i8* %.02.lcssa, i32 -1
  br label %35

; <label>:31:                                     ; preds = %22
  %32 = getelementptr inbounds i8, i8* %.02.lcssa, i32 -1
  br label %35

; <label>:33:                                     ; preds = %22
  %34 = getelementptr inbounds i8, i8* %.02.lcssa, i32 -1
  br label %35

; <label>:35:                                     ; preds = %22, %33, %31, %29, %27
  %.03 = phi double [ 0x4270000000000000, %33 ], [ 0x41D0000000000000, %31 ], [ 0x4130000000000000, %29 ], [ 1.024000e+03, %27 ], [ 1.000000e+00, %22 ]
  %.1 = phi i8* [ %34, %33 ], [ %32, %31 ], [ %30, %29 ], [ %28, %27 ], [ %.02.lcssa, %22 ]
  br label %36

; <label>:36:                                     ; preds = %42, %35
  %.01 = phi i8* [ %0, %35 ], [ %44, %42 ]
  %37 = icmp ult i8* %.01, %.1
  br i1 %37, label %38, label %42

; <label>:38:                                     ; preds = %36
  %39 = load i8, i8* %.01, align 1
  %40 = sext i8 %39 to i32
  %41 = call zeroext i1 @c_isspace(i32 %40)
  br label %42

; <label>:42:                                     ; preds = %38, %36
  %43 = phi i1 [ false, %36 ], [ %41, %38 ]
  %44 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %43, label %36, label %45

; <label>:45:                                     ; preds = %42
  %.01.lcssa = phi i8* [ %.01, %42 ]
  br label %46

; <label>:46:                                     ; preds = %53, %45
  %.2 = phi i8* [ %.1, %45 ], [ %55, %53 ]
  %47 = icmp ult i8* %.01.lcssa, %.2
  br i1 %47, label %48, label %53

; <label>:48:                                     ; preds = %46
  %49 = getelementptr inbounds i8, i8* %.2, i64 -1
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = call zeroext i1 @c_isspace(i32 %51)
  br label %53

; <label>:53:                                     ; preds = %48, %46
  %54 = phi i1 [ false, %46 ], [ %52, %48 ]
  %55 = getelementptr inbounds i8, i8* %.2, i32 -1
  br i1 %54, label %46, label %56

; <label>:56:                                     ; preds = %53
  %.2.lcssa = phi i8* [ %.2, %53 ]
  %57 = icmp eq i8* %.01.lcssa, %.2.lcssa
  br i1 %57, label %65, label %58

; <label>:58:                                     ; preds = %56
  %59 = call zeroext i1 @simple_atof(i8* %.01.lcssa, i8* %.2.lcssa, double* %3)
  %.not = xor i1 %59, true
  %60 = load double, double* %3, align 8
  %61 = fcmp olt double %60, 0.000000e+00
  %or.cond = or i1 %.not, %61
  br i1 %or.cond, label %65, label %62

; <label>:62:                                     ; preds = %58
  %63 = load double, double* %3, align 8
  %64 = fmul double %63, %.03
  store double %64, double* %1, align 8
  br label %65

; <label>:65:                                     ; preds = %58, %56, %20, %62, %9
  %.0 = phi i1 [ true, %9 ], [ true, %62 ], [ false, %20 ], [ false, %56 ], [ false, %58 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @simple_atof(i8*, i8*, double*) #0 {
  br label %4

; <label>:4:                                      ; preds = %10, %3
  %.01 = phi i8* [ %0, %3 ], [ %12, %10 ]
  %5 = icmp ult i8* %.01, %1
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %4
  %7 = load i8, i8* %.01, align 1
  %8 = sext i8 %7 to i32
  %9 = call zeroext i1 @c_isspace(i32 %8)
  br label %10

; <label>:10:                                     ; preds = %6, %4
  %11 = phi i1 [ false, %4 ], [ %9, %6 ]
  %12 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %11, label %4, label %13

; <label>:13:                                     ; preds = %10
  %.01.lcssa = phi i8* [ %.01, %10 ]
  %14 = icmp ult i8* %.01.lcssa, %1
  br i1 %14, label %15, label %29

; <label>:15:                                     ; preds = %13
  %16 = load i8, i8* %.01.lcssa, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 45
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %15
  %20 = load i8, i8* %.01.lcssa, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp eq i32 %21, 43
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %19, %15
  %24 = load i8, i8* %.01.lcssa, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 45
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds i8, i8* %.01.lcssa, i32 1
  br label %29

; <label>:29:                                     ; preds = %23, %19, %13
  %.010 = phi i8 [ %27, %23 ], [ 0, %19 ], [ 0, %13 ]
  %.1 = phi i8* [ %28, %23 ], [ %.01.lcssa, %19 ], [ %.01.lcssa, %13 ]
  %30 = icmp ult i8* %.1, %1
  br i1 %30, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %29
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %54
  %.221 = phi i8* [ %55, %54 ], [ %.1, %.lr.ph.preheader ]
  %.0220 = phi double [ %.24, %54 ], [ 1.000000e+00, %.lr.ph.preheader ]
  %.0519 = phi i8 [ %.16, %54 ], [ 0, %.lr.ph.preheader ]
  %.0718 = phi double [ %.29, %54 ], [ 0.000000e+00, %.lr.ph.preheader ]
  %.01117 = phi i8 [ %.112, %54 ], [ 0, %.lr.ph.preheader ]
  %31 = load i8, i8* %.221, align 1
  %32 = sext i8 %31 to i32
  %33 = call zeroext i1 @c_isdigit(i32 %32)
  br i1 %33, label %34, label %49

; <label>:34:                                     ; preds = %.lr.ph
  %35 = trunc i8 %.01117 to i1
  br i1 %35, label %42, label %36

; <label>:36:                                     ; preds = %34
  %37 = fmul double 1.000000e+01, %.0718
  %38 = sext i8 %31 to i32
  %39 = sub nsw i32 %38, 48
  %40 = sitofp i32 %39 to double
  %41 = fadd double %37, %40
  br label %54

; <label>:42:                                     ; preds = %34
  %43 = sext i8 %31 to i32
  %44 = sub nsw i32 %43, 48
  %45 = sitofp i32 %44 to double
  %46 = fmul double %.0220, 1.000000e+01
  %47 = fdiv double %45, %46
  %48 = fadd double %.0718, %47
  br label %54

; <label>:49:                                     ; preds = %.lr.ph
  %50 = sext i8 %31 to i32
  %51 = icmp eq i32 %50, 46
  br i1 %51, label %52, label %.loopexit

; <label>:52:                                     ; preds = %49
  %53 = trunc i8 %.01117 to i1
  br i1 %53, label %.loopexit, label %54

; <label>:54:                                     ; preds = %42, %36, %52
  %.112 = phi i8 [ %.01117, %42 ], [ %.01117, %36 ], [ 1, %52 ]
  %.29 = phi double [ %48, %42 ], [ %41, %36 ], [ %.0718, %52 ]
  %.16 = phi i8 [ 1, %42 ], [ 1, %36 ], [ %.0519, %52 ]
  %.24 = phi double [ %46, %42 ], [ %.0220, %36 ], [ %.0220, %52 ]
  %55 = getelementptr inbounds i8, i8* %.221, i32 1
  %56 = icmp ult i8* %55, %1
  br i1 %56, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %54
  %.07.lcssa.ph = phi double [ %.29, %54 ]
  %.05.lcssa.ph = phi i8 [ %.16, %54 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %29
  %.07.lcssa = phi double [ 0.000000e+00, %29 ], [ %.07.lcssa.ph, %._crit_edge.loopexit ]
  %.05.lcssa = phi i8 [ 0, %29 ], [ %.05.lcssa.ph, %._crit_edge.loopexit ]
  %57 = trunc i8 %.05.lcssa to i1
  br i1 %57, label %58, label %61

; <label>:58:                                     ; preds = %._crit_edge
  %59 = trunc i8 %.010 to i1
  %60 = fsub double -0.000000e+00, %.07.lcssa
  %spec.select = select i1 %59, double %60, double %.07.lcssa
  store double %spec.select, double* %2, align 8
  br label %61

.loopexit:                                        ; preds = %52, %49
  %.0.ph = phi i1 [ false, %49 ], [ false, %52 ]
  br label %61

; <label>:61:                                     ; preds = %.loopexit, %._crit_edge, %58
  %.0 = phi i1 [ true, %58 ], [ false, %._crit_edge ], [ %.0.ph, %.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmd_boolean_internal(i8*, i8*, i8*) #0 {
  %4 = getelementptr inbounds i8, i8* %1, i64 0
  %5 = load i8, i8* %4, align 1
  %6 = sext i8 %5 to i32
  %7 = call i32 @c_tolower(i32 %6)
  %8 = icmp eq i32 %7, 111
  br i1 %8, label %9, label %20

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = call i32 @c_tolower(i32 %12)
  %14 = icmp eq i32 %13, 110
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %9
  %16 = getelementptr inbounds i8, i8* %1, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %106, label %20

; <label>:20:                                     ; preds = %15, %9, %3
  %21 = getelementptr inbounds i8, i8* %1, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = call i32 @c_tolower(i32 %23)
  %25 = icmp eq i32 %24, 121
  br i1 %25, label %26, label %43

; <label>:26:                                     ; preds = %20
  %27 = getelementptr inbounds i8, i8* %1, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = call i32 @c_tolower(i32 %29)
  %31 = icmp eq i32 %30, 101
  br i1 %31, label %32, label %43

; <label>:32:                                     ; preds = %26
  %33 = getelementptr inbounds i8, i8* %1, i64 2
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = call i32 @c_tolower(i32 %35)
  %37 = icmp eq i32 %36, 115
  br i1 %37, label %38, label %43

; <label>:38:                                     ; preds = %32
  %39 = getelementptr inbounds i8, i8* %1, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %106, label %43

; <label>:43:                                     ; preds = %38, %32, %26, %20
  %44 = getelementptr inbounds i8, i8* %1, i64 0
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = call i32 @c_tolower(i32 %46)
  %48 = icmp eq i32 %47, 49
  br i1 %48, label %49, label %54

; <label>:49:                                     ; preds = %43
  %50 = getelementptr inbounds i8, i8* %1, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %106, label %54

; <label>:54:                                     ; preds = %49, %43
  %55 = getelementptr inbounds i8, i8* %1, i64 0
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = call i32 @c_tolower(i32 %57)
  %59 = icmp eq i32 %58, 111
  br i1 %59, label %60, label %77

; <label>:60:                                     ; preds = %54
  %61 = getelementptr inbounds i8, i8* %1, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = call i32 @c_tolower(i32 %63)
  %65 = icmp eq i32 %64, 102
  br i1 %65, label %66, label %77

; <label>:66:                                     ; preds = %60
  %67 = getelementptr inbounds i8, i8* %1, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = call i32 @c_tolower(i32 %69)
  %71 = icmp eq i32 %70, 102
  br i1 %71, label %72, label %77

; <label>:72:                                     ; preds = %66
  %73 = getelementptr inbounds i8, i8* %1, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %106, label %77

; <label>:77:                                     ; preds = %72, %66, %60, %54
  %78 = getelementptr inbounds i8, i8* %1, i64 0
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = call i32 @c_tolower(i32 %80)
  %82 = icmp eq i32 %81, 110
  br i1 %82, label %83, label %94

; <label>:83:                                     ; preds = %77
  %84 = getelementptr inbounds i8, i8* %1, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = call i32 @c_tolower(i32 %86)
  %88 = icmp eq i32 %87, 111
  br i1 %88, label %89, label %94

; <label>:89:                                     ; preds = %83
  %90 = getelementptr inbounds i8, i8* %1, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %106, label %94

; <label>:94:                                     ; preds = %89, %83, %77
  %95 = getelementptr inbounds i8, i8* %1, i64 0
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = call i32 @c_tolower(i32 %97)
  %99 = icmp eq i32 %98, 48
  br i1 %99, label %100, label %105

; <label>:100:                                    ; preds = %94
  %101 = getelementptr inbounds i8, i8* %1, i64 1
  %102 = load i8, i8* %101, align 1
  %103 = sext i8 %102 to i32
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %106, label %105

; <label>:105:                                    ; preds = %94, %100
  br label %106

; <label>:106:                                    ; preds = %72, %89, %100, %15, %38, %49, %105
  %.0 = phi i32 [ -1, %105 ], [ 1, %49 ], [ 1, %38 ], [ 1, %15 ], [ 0, %100 ], [ 0, %89 ], [ 0, %72 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @simple_atoi(i8*, i8*, i32*) #0 {
  br label %4

; <label>:4:                                      ; preds = %10, %3
  %.01 = phi i8* [ %0, %3 ], [ %12, %10 ]
  %5 = icmp ult i8* %.01, %1
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %4
  %7 = load i8, i8* %.01, align 1
  %8 = sext i8 %7 to i32
  %9 = call zeroext i1 @c_isspace(i32 %8)
  br label %10

; <label>:10:                                     ; preds = %6, %4
  %11 = phi i1 [ false, %4 ], [ %9, %6 ]
  %12 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %11, label %4, label %13

; <label>:13:                                     ; preds = %10
  %.01.lcssa = phi i8* [ %.01, %10 ]
  %14 = icmp ult i8* %.01.lcssa, %1
  br i1 %14, label %15, label %29

; <label>:15:                                     ; preds = %13
  %16 = load i8, i8* %.01.lcssa, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 45
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %15
  %20 = load i8, i8* %.01.lcssa, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp eq i32 %21, 43
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %19, %15
  %24 = load i8, i8* %.01.lcssa, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 45
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds i8, i8* %.01.lcssa, i32 1
  br label %29

; <label>:29:                                     ; preds = %23, %19, %13
  %.02 = phi i8 [ %27, %23 ], [ 0, %19 ], [ 0, %13 ]
  %.1 = phi i8* [ %28, %23 ], [ %.01.lcssa, %19 ], [ %.01.lcssa, %13 ]
  %30 = icmp eq i8* %.1, %1
  br i1 %30, label %65, label %31

; <label>:31:                                     ; preds = %29
  %32 = trunc i8 %.02 to i1
  br i1 %32, label %.preheader, label %.preheader2

.preheader2:                                      ; preds = %31
  %33 = icmp ult i8* %.1, %1
  br i1 %33, label %.lr.ph16, label %.critedge.loopexit3

.lr.ph16:                                         ; preds = %.preheader2
  br label %35

.preheader:                                       ; preds = %31
  %34 = icmp ult i8* %.1, %1
  br i1 %34, label %.lr.ph, label %.critedge.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %49

; <label>:35:                                     ; preds = %.lr.ph16, %46
  %.215 = phi i8* [ %.1, %.lr.ph16 ], [ %47, %46 ]
  %.0314 = phi i32 [ 0, %.lr.ph16 ], [ %44, %46 ]
  %36 = load i8, i8* %.215, align 1
  %37 = sext i8 %36 to i32
  %38 = call zeroext i1 @c_isdigit(i32 %37)
  br i1 %38, label %39, label %..critedge.loopexit3_crit_edge19

; <label>:39:                                     ; preds = %35
  %40 = mul nsw i32 10, %.0314
  %41 = load i8, i8* %.215, align 1
  %42 = sext i8 %41 to i32
  %43 = sub nsw i32 %42, 48
  %44 = add nsw i32 %40, %43
  %45 = icmp slt i32 %44, %.0314
  br i1 %45, label %.loopexit6, label %46

; <label>:46:                                     ; preds = %39
  %47 = getelementptr inbounds i8, i8* %.215, i32 1
  %48 = icmp ult i8* %47, %1
  br i1 %48, label %35, label %..critedge.loopexit3_crit_edge

; <label>:49:                                     ; preds = %.lr.ph, %60
  %.39 = phi i8* [ %.1, %.lr.ph ], [ %61, %60 ]
  %.148 = phi i32 [ 0, %.lr.ph ], [ %58, %60 ]
  %50 = load i8, i8* %.39, align 1
  %51 = sext i8 %50 to i32
  %52 = call zeroext i1 @c_isdigit(i32 %51)
  br i1 %52, label %53, label %..critedge.loopexit_crit_edge11

; <label>:53:                                     ; preds = %49
  %54 = mul nsw i32 10, %.148
  %55 = load i8, i8* %.39, align 1
  %56 = sext i8 %55 to i32
  %57 = sub nsw i32 %56, 48
  %58 = sub nsw i32 %54, %57
  %59 = icmp sgt i32 %58, %.148
  br i1 %59, label %.loopexit, label %60

; <label>:60:                                     ; preds = %53
  %61 = getelementptr inbounds i8, i8* %.39, i32 1
  %62 = icmp ult i8* %61, %1
  br i1 %62, label %49, label %..critedge.loopexit_crit_edge

..critedge.loopexit_crit_edge:                    ; preds = %60
  %split = phi i32 [ %58, %60 ]
  %split10 = phi i8* [ %61, %60 ]
  br label %.critedge.loopexit

..critedge.loopexit_crit_edge11:                  ; preds = %49
  %split12 = phi i32 [ %.148, %49 ]
  %split13 = phi i8* [ %.39, %49 ]
  br label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %..critedge.loopexit_crit_edge11, %..critedge.loopexit_crit_edge, %.preheader
  %.25.ph = phi i32 [ %split, %..critedge.loopexit_crit_edge ], [ %split12, %..critedge.loopexit_crit_edge11 ], [ 0, %.preheader ]
  %.4.ph = phi i8* [ %split10, %..critedge.loopexit_crit_edge ], [ %split13, %..critedge.loopexit_crit_edge11 ], [ %.1, %.preheader ]
  br label %.critedge

..critedge.loopexit3_crit_edge:                   ; preds = %46
  %split17 = phi i32 [ %44, %46 ]
  %split18 = phi i8* [ %47, %46 ]
  br label %.critedge.loopexit3

..critedge.loopexit3_crit_edge19:                 ; preds = %35
  %split20 = phi i32 [ %.0314, %35 ]
  %split21 = phi i8* [ %.215, %35 ]
  br label %.critedge.loopexit3

.critedge.loopexit3:                              ; preds = %..critedge.loopexit3_crit_edge19, %..critedge.loopexit3_crit_edge, %.preheader2
  %.25.ph4 = phi i32 [ %split17, %..critedge.loopexit3_crit_edge ], [ %split20, %..critedge.loopexit3_crit_edge19 ], [ 0, %.preheader2 ]
  %.4.ph5 = phi i8* [ %split18, %..critedge.loopexit3_crit_edge ], [ %split21, %..critedge.loopexit3_crit_edge19 ], [ %.1, %.preheader2 ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit3, %.critedge.loopexit
  %.25 = phi i32 [ %.25.ph, %.critedge.loopexit ], [ %.25.ph4, %.critedge.loopexit3 ]
  %.4 = phi i8* [ %.4.ph, %.critedge.loopexit ], [ %.4.ph5, %.critedge.loopexit3 ]
  %63 = icmp ne i8* %.4, %1
  br i1 %63, label %65, label %64

; <label>:64:                                     ; preds = %.critedge
  store i32 %.25, i32* %2, align 4
  br label %65

.loopexit:                                        ; preds = %53
  %.0.ph = phi i1 [ false, %53 ]
  br label %65

.loopexit6:                                       ; preds = %39
  %.0.ph7 = phi i1 [ false, %39 ]
  br label %65

; <label>:65:                                     ; preds = %.loopexit6, %.loopexit, %.critedge, %29, %64
  %.0 = phi i1 [ true, %64 ], [ false, %29 ], [ false, %.critedge ], [ %.0.ph, %.loopexit ], [ %.0.ph7, %.loopexit6 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @dehyphen(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %17
  %.04 = phi i8* [ %.1, %17 ], [ %0, %.lr.ph.preheader ]
  %.013 = phi i8* [ %.12, %17 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 273)
  %4 = load i8, i8* %.04, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp eq i32 %5, 95
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %.lr.ph
  %8 = load i8, i8* %.04, align 1
  %9 = sext i8 %8 to i32
  %10 = icmp eq i32 %9, 45
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %7, %.lr.ph
  %12 = getelementptr inbounds i8, i8* %.04, i32 1
  br label %17

; <label>:13:                                     ; preds = %7
  %14 = getelementptr inbounds i8, i8* %.04, i32 1
  %15 = load i8, i8* %.04, align 1
  %16 = getelementptr inbounds i8, i8* %.013, i32 1
  store i8 %15, i8* %.013, align 1
  br label %17

; <label>:17:                                     ; preds = %13, %11
  %.12 = phi i8* [ %.013, %11 ], [ %16, %13 ]
  %.1 = phi i8* [ %12, %11 ], [ %14, %13 ]
  %18 = load i8, i8* %.1, align 1
  %19 = icmp ne i8 %18, 0
  br i1 %19, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %17
  %.01.lcssa.ph = phi i8* [ %.12, %17 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.01.lcssa = phi i8* [ %0, %1 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.01.lcssa, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @command_by_name(i8*) #0 {
  br label %2

; <label>:2:                                      ; preds = %1, %17
  %.015 = phi i32 [ 159, %1 ], [ %.1, %17 ]
  %.024 = phi i32 [ 0, %1 ], [ %.13, %17 ]
  call void @unroll_loop(i32 274)
  %3 = add nsw i32 %.024, %.015
  %4 = ashr i32 %3, 1
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [160 x %struct.anon.83], [160 x %struct.anon.83]* @commands, i64 0, i64 %5
  %7 = getelementptr inbounds %struct.anon.83, %struct.anon.83* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = call i32 @c_strcasecmp(i8* %0, i8* %8) #14
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %2
  %12 = sub nsw i32 %4, 1
  br label %17

; <label>:13:                                     ; preds = %2
  %14 = icmp sgt i32 %9, 0
  br i1 %14, label %15, label %19

; <label>:15:                                     ; preds = %13
  %16 = add nsw i32 %4, 1
  br label %17

; <label>:17:                                     ; preds = %15, %11
  %.13 = phi i32 [ %.024, %11 ], [ %16, %15 ]
  %.1 = phi i32 [ %12, %11 ], [ %.015, %15 ]
  %18 = icmp sle i32 %.13, %.1
  br i1 %18, label %2, label %19

; <label>:19:                                     ; preds = %17, %13
  %.0 = phi i32 [ %4, %13 ], [ -1, %17 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @initialize() #0 {
  %1 = getelementptr [14 x i8], [14 x i8]* @.str.10.834, i32 0, i32 0
  %2 = call i8* @getenv(i8* %1) #8, !track !534
  %3 = icmp ne i8* %2, null
  br i1 %3, label %4, label %20

; <label>:4:                                      ; preds = %0
  %5 = call zeroext i1 @file_exists_p(i8* %2)
  br i1 %5, label %6, label %20

; <label>:6:                                      ; preds = %4
  %7 = call zeroext i1 @run_wgetrc(i8* %2)
  %8 = zext i1 %7 to i32
  %9 = trunc i8 1 to i1
  %10 = zext i1 %9 to i32
  %11 = and i32 %10, %8
  %12 = icmp ne i32 %11, 0
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %32, label %15

; <label>:15:                                     ; preds = %6
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %17 = getelementptr [120 x i8], [120 x i8]* @.str.11.835, i32 0, i32 0
  %18 = call i8* @gettext(i8* %17) #8, !track !535
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* %18, i8* %2)
  call void @exit(i32 2) #16
  unreachable

; <label>:20:                                     ; preds = %4, %0
  %21 = getelementptr [22 x i8], [22 x i8]* @.str.12.836, i32 0, i32 0
  %22 = call zeroext i1 @file_exists_p(i8* %21)
  br i1 %22, label %23, label %32

; <label>:23:                                     ; preds = %20
  %24 = getelementptr [22 x i8], [22 x i8]* @.str.12.836, i32 0, i32 0
  %25 = call zeroext i1 @run_wgetrc(i8* %24)
  %26 = zext i1 %25 to i32
  %27 = trunc i8 1 to i1
  %28 = zext i1 %27 to i32
  %29 = and i32 %28, %26
  %30 = icmp ne i32 %29, 0
  %31 = zext i1 %30 to i8
  br label %32

; <label>:32:                                     ; preds = %20, %23, %6
  %.1 = phi i8 [ %13, %6 ], [ %31, %23 ], [ 1, %20 ]
  %33 = trunc i8 %.1 to i1
  br i1 %33, label %40, label %34

; <label>:34:                                     ; preds = %32
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %36 = getelementptr [100 x i8], [100 x i8]* @.str.13.837, i32 0, i32 0
  %37 = call i8* @gettext(i8* %36) #8, !track !536
  %38 = getelementptr [22 x i8], [22 x i8]* @.str.12.836, i32 0, i32 0
  %39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* %37, i8* %38)
  call void @exit(i32 2) #16
  unreachable

; <label>:40:                                     ; preds = %32
  %41 = call i8* @wgetrc_file_name()
  %42 = icmp ne i8* %41, null
  br i1 %42, label %43, label %66

; <label>:43:                                     ; preds = %40
  %44 = getelementptr [22 x i8], [22 x i8]* @.str.12.836, i32 0, i32 0
  %45 = call i32 @strcmp(i8* %41, i8* %44) #14
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %54, label %47

; <label>:47:                                     ; preds = %43
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %49 = getelementptr [55 x i8], [55 x i8]* @.str.14.838, i32 0, i32 0
  %50 = call i8* @gettext(i8* %49) #8, !track !537
  %51 = load i8*, i8** @exec_name, align 8
  %52 = call i8* @quote(i8* %41)
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %50, i8* %51, i8* %52)
  br label %62

; <label>:54:                                     ; preds = %43
  %55 = call zeroext i1 @run_wgetrc(i8* %41)
  %56 = zext i1 %55 to i32
  %57 = trunc i8 %.1 to i1
  %58 = zext i1 %57 to i32
  %59 = and i32 %58, %56
  %60 = icmp ne i32 %59, 0
  %61 = zext i1 %60 to i8
  br label %62

; <label>:62:                                     ; preds = %54, %47
  %.2 = phi i8 [ %61, %54 ], [ %.1, %47 ]
  %63 = trunc i8 %.2 to i1
  br i1 %63, label %65, label %64

; <label>:64:                                     ; preds = %62
  call void @exit(i32 2) #16
  unreachable

; <label>:65:                                     ; preds = %62
  call void @free(i8* %41) #8
  br label %66

; <label>:66:                                     ; preds = %40, %65
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @setoptval(i8*, i8*, i8*) #0 {
  %4 = call i64 @strlen(i8* %2) #14
  %5 = add i64 2, %4
  %6 = add i64 %5, 1
  %7 = alloca i8, i64 %6, align 16, !track !538
  %8 = getelementptr inbounds i8, i8* %7, i64 0
  store i8 45, i8* %8, align 1
  %9 = getelementptr inbounds i8, i8* %7, i64 1
  store i8 45, i8* %9, align 1
  %10 = getelementptr inbounds i8, i8* %7, i64 2
  %11 = call i8* @strcpy(i8* %10, i8* %2) #8, !track !539
  %12 = call i32 @command_by_name(i8* %0)
  %13 = call zeroext i1 @setval_internal(i32 %12, i8* %7, i8* %1)
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %3
  call void @exit(i32 2) #16
  unreachable

; <label>:15:                                     ; preds = %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @run_command(i8*) #0 {
  %2 = alloca i8*, align 8, !track !540
  %3 = alloca i8*, align 8, !track !541
  %4 = alloca i32, align 4
  %5 = call i32 @parse_line(i8* %0, i8** %2, i8** %3, i32* %4)
  %cond = icmp eq i32 %5, 0
  br i1 %cond, label %6, label %15

; <label>:6:                                      ; preds = %1
  %7 = load i32, i32* %4, align 4
  %8 = load i8*, i8** %2, align 8
  %9 = load i8*, i8** %3, align 8
  %10 = call zeroext i1 @setval_internal(i32 %7, i8* %8, i8* %9)
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %6
  call void @exit(i32 2) #16
  unreachable

; <label>:12:                                     ; preds = %6
  %13 = load i8*, i8** %2, align 8
  call void @free(i8* %13) #8
  store i8* null, i8** %2, align 8
  %14 = load i8*, i8** %3, align 8
  call void @free(i8* %14) #8
  store i8* null, i8** %3, align 8
  ret void

; <label>:15:                                     ; preds = %1
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %17 = getelementptr [34 x i8], [34 x i8]* @.str.15.839, i32 0, i32 0
  %18 = call i8* @gettext(i8* %17) #8, !track !542
  %19 = load i8*, i8** @exec_name, align 8
  %20 = call i8* @quote(i8* %0)
  %21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* %18, i8* %19, i8* %20)
  call void @exit(i32 2) #16
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cleanup() #0 {
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %2 = load i8*, i8** %1, align 8
  %3 = icmp ne i8* %2, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %0
  call void @warc_close()
  br label %5

; <label>:5:                                      ; preds = %4, %0
  call void @log_close()
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %7 = icmp ne %struct._IO_FILE* %6, null
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %5
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %10 = call i32 @fclose(%struct._IO_FILE* %9)
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  call void @inform_exit_status(i32 49)
  br label %13

; <label>:13:                                     ; preds = %8, %12, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @log_set_warc_log_fp(%struct._IO_FILE*) #0 {
  store %struct._IO_FILE* %0, %struct._IO_FILE** @warclogfp, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @logputs(i32, i8*) #0 {
  call void @check_redirect_output()
  %3 = icmp eq i32 %0, 4
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %2
  %5 = call %struct._IO_FILE* @get_progress_fp()
  br label %8

; <label>:6:                                      ; preds = %2
  %7 = call %struct._IO_FILE* @get_log_fp()
  br label %8

; <label>:8:                                      ; preds = %6, %4
  %.0 = phi %struct._IO_FILE* [ %5, %4 ], [ %7, %6 ]
  %9 = icmp eq %struct._IO_FILE* %.0, null
  br i1 %9, label %46, label %10

; <label>:10:                                     ; preds = %8
  %11 = call %struct._IO_FILE* @get_warc_log_fp()
  switch i32 %0, label %32 [
    i32 4, label %12
    i32 0, label %28
    i32 1, label %16
    i32 2, label %20
  ]

; <label>:12:                                     ; preds = %10
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %14 = load i32, i32* %13, align 8
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %32, label %46

; <label>:16:                                     ; preds = %10
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %18 = load i8, i8* %17, align 4
  %19 = trunc i8 %18 to i1
  br i1 %19, label %46, label %32

; <label>:20:                                     ; preds = %10
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %46, label %24

; <label>:24:                                     ; preds = %20
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %26 = load i8, i8* %25, align 4
  %27 = trunc i8 %26 to i1
  br i1 %27, label %46, label %32

; <label>:28:                                     ; preds = %10
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %46

; <label>:32:                                     ; preds = %28, %24, %16, %12, %10
  %33 = call i32 @fputs(i8* %1, %struct._IO_FILE* %.0)
  %34 = icmp ne %struct._IO_FILE* %11, null
  br i1 %34, label %35, label %37

; <label>:35:                                     ; preds = %32
  %36 = call i32 @fputs(i8* %1, %struct._IO_FILE* %11)
  br label %37

; <label>:37:                                     ; preds = %35, %32
  %38 = load i8, i8* @save_context_p, align 1
  %39 = trunc i8 %38 to i1
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %37
  call void @saved_append(i8* %1)
  br label %41

; <label>:41:                                     ; preds = %40, %37
  %42 = load i8, i8* @flush_log_p, align 1
  %43 = trunc i8 %42 to i1
  br i1 %43, label %44, label %45

; <label>:44:                                     ; preds = %41
  call void @logflush()
  br label %46

; <label>:45:                                     ; preds = %41
  store i8 1, i8* @needs_flushing, align 1
  br label %46

; <label>:46:                                     ; preds = %28, %20, %24, %16, %12, %8, %45, %44
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_redirect_output() #0 {
  %1 = load i32, i32* @redirect_request, align 4
  %2 = icmp eq i32 %1, 1
  br i1 %2, label %3, label %4

; <label>:3:                                      ; preds = %0
  store i32 2, i32* @redirect_request, align 4
  call void @redirect_output()
  br label %4

; <label>:4:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._IO_FILE* @get_progress_fp() #0 {
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %2 = load i32, i32* %1, align 8
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %0
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  br label %8

; <label>:6:                                      ; preds = %0
  %7 = call %struct._IO_FILE* @get_log_fp()
  br label %8

; <label>:8:                                      ; preds = %6, %4
  %.0 = phi %struct._IO_FILE* [ %5, %4 ], [ %7, %6 ]
  ret %struct._IO_FILE* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._IO_FILE* @get_log_fp() #0 {
  %1 = load i8, i8* @inhibit_logging, align 1
  %2 = trunc i8 %1 to i1
  br i1 %2, label %10, label %3

; <label>:3:                                      ; preds = %0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %3
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  br label %10

; <label>:8:                                      ; preds = %3
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  br label %10

; <label>:10:                                     ; preds = %0, %8, %6
  %.0 = phi %struct._IO_FILE* [ %7, %6 ], [ %9, %8 ], [ null, %0 ]
  ret %struct._IO_FILE* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._IO_FILE* @get_warc_log_fp() #0 {
  %1 = load i8, i8* @inhibit_logging, align 1
  %2 = trunc i8 %1 to i1
  %.not = xor i1 %2, true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @warclogfp, align 8
  %4 = icmp ne %struct._IO_FILE* %3, null
  %or.cond = and i1 %.not, %4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @warclogfp, align 8
  %.0 = select i1 %or.cond, %struct._IO_FILE* %5, %struct._IO_FILE* null
  ret %struct._IO_FILE* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @saved_append(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %11
  %.02 = phi i8* [ %.01, %11 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 275)
  %4 = call i8* @strchr(i8* %.02, i32 10) #14, !track !543
  %5 = icmp ne i8* %4, null
  br i1 %5, label %9, label %6

; <label>:6:                                      ; preds = %.lr.ph
  %7 = call i64 @strlen(i8* %.02) #14
  %8 = getelementptr inbounds i8, i8* %.02, i64 %7
  br label %11

; <label>:9:                                      ; preds = %.lr.ph
  %10 = getelementptr inbounds i8, i8* %4, i32 1
  br label %11

; <label>:11:                                     ; preds = %9, %6
  %.01 = phi i8* [ %10, %9 ], [ %8, %6 ]
  call void @saved_append_1(i8* %.02, i8* %.01)
  %12 = load i8, i8* %.01, align 1
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %11
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @logflush() #0 {
  %1 = call %struct._IO_FILE* @get_log_fp()
  %2 = call %struct._IO_FILE* @get_warc_log_fp()
  %3 = icmp ne %struct._IO_FILE* %1, null
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %0
  %5 = call i32 @fflush(%struct._IO_FILE* %1)
  br label %6

; <label>:6:                                      ; preds = %4, %0
  %7 = icmp ne %struct._IO_FILE* %2, null
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %6
  %9 = call i32 @fflush(%struct._IO_FILE* %2)
  br label %10

; <label>:10:                                     ; preds = %8, %6
  store i8 0, i8* @needs_flushing, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @saved_append_1(i8*, i8*) #0 {
  %3 = ptrtoint i8* %1 to i64
  %4 = ptrtoint i8* %0 to i64
  %5 = sub i64 %3, %4
  %6 = trunc i64 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %128

; <label>:8:                                      ; preds = %2
  %9 = load i8, i8* @trailing_line, align 1
  %10 = trunc i8 %9 to i1
  %11 = load i32, i32* @log_line_current, align 4
  br i1 %10, label %39, label %12

; <label>:12:                                     ; preds = %8
  %13 = icmp eq i32 %11, -1
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %12
  store i32 0, i32* @log_line_current, align 4
  br label %17

; <label>:15:                                     ; preds = %12
  %16 = load i32, i32* @log_line_current, align 4
  call void @free_log_line(i32 %16)
  br label %17

; <label>:17:                                     ; preds = %15, %14
  %18 = load i32, i32* @log_line_current, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr [24 x %struct.log_ln], [24 x %struct.log_ln]* @log_lines, i32 0, i32 0
  %21 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %20, i64 %19
  %22 = icmp sgt i32 %6, 128
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %17
  %24 = call i8* @strdupdelim(i8* %0, i8* %1)
  %25 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %21, i32 0, i32 1
  store i8* %24, i8** %25, align 8
  %26 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %21, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %21, i32 0, i32 2
  store i8* %27, i8** %28, align 8
  br label %115

; <label>:29:                                     ; preds = %17
  %30 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %21, i32 0, i32 0
  %31 = getelementptr inbounds [129 x i8], [129 x i8]* %30, i32 0, i32 0
  %32 = sext i32 %6 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 1 %0, i64 %32, i1 false), !track !544
  %33 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %21, i32 0, i32 0
  %34 = sext i32 %6 to i64
  %35 = getelementptr inbounds [129 x i8], [129 x i8]* %33, i64 0, i64 %34
  store i8 0, i8* %35, align 1
  %36 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %21, i32 0, i32 0
  %37 = getelementptr inbounds [129 x i8], [129 x i8]* %36, i32 0, i32 0
  %38 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %21, i32 0, i32 2
  store i8* %37, i8** %38, align 8
  br label %115

; <label>:39:                                     ; preds = %8
  %40 = sext i32 %11 to i64
  %41 = getelementptr [24 x %struct.log_ln], [24 x %struct.log_ln]* @log_lines, i32 0, i32 0
  %42 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %41, i64 %40
  %43 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = icmp ne i8* %44, null
  br i1 %45, label %46, label %71

; <label>:46:                                     ; preds = %39
  %47 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = call i64 @strlen(i8* %48) #14
  %50 = trunc i64 %49 to i32
  %51 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %52 = load i8*, i8** %51, align 8
  %53 = add nsw i32 %50, %6
  %54 = add nsw i32 %53, 1
  %55 = sext i32 %54 to i64
  %56 = call i8* @xrealloc(i8* %52, i64 %55)
  %57 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  store i8* %56, i8** %57, align 8
  %58 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %59 = load i8*, i8** %58, align 8
  %60 = sext i32 %50 to i64
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = sext i32 %6 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %0, i64 %62, i1 false), !track !545
  %63 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = add nsw i32 %50, %6
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %64, i64 %66
  store i8 0, i8* %67, align 1
  %68 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 2
  store i8* %69, i8** %70, align 8
  br label %115

; <label>:71:                                     ; preds = %39
  %72 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 0
  %73 = getelementptr inbounds [129 x i8], [129 x i8]* %72, i32 0, i32 0
  %74 = call i64 @strlen(i8* %73) #14
  %75 = trunc i64 %74 to i32
  %76 = add nsw i32 %75, %6
  %77 = icmp sgt i32 %76, 128
  br i1 %77, label %78, label %102

; <label>:78:                                     ; preds = %71
  %79 = add nsw i32 %75, %6
  %80 = add nsw i32 %79, 1
  %81 = sext i32 %80 to i64
  %82 = call noalias i8* @xmalloc(i64 %81)
  %83 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  store i8* %82, i8** %83, align 8
  %84 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 0
  %87 = getelementptr inbounds [129 x i8], [129 x i8]* %86, i32 0, i32 0
  %88 = sext i32 %75 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 8 %87, i64 %88, i1 false), !track !546
  %89 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %90 = load i8*, i8** %89, align 8
  %91 = sext i32 %75 to i64
  %92 = getelementptr inbounds i8, i8* %90, i64 %91
  %93 = sext i32 %6 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %0, i64 %93, i1 false), !track !547
  %94 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %95 = load i8*, i8** %94, align 8
  %96 = add nsw i32 %75, %6
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %95, i64 %97
  store i8 0, i8* %98, align 1
  %99 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 1
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 2
  store i8* %100, i8** %101, align 8
  br label %115

; <label>:102:                                    ; preds = %71
  %103 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 0
  %104 = getelementptr inbounds [129 x i8], [129 x i8]* %103, i32 0, i32 0
  %105 = sext i32 %75 to i64
  %106 = getelementptr inbounds i8, i8* %104, i64 %105
  %107 = sext i32 %6 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %0, i64 %107, i1 false), !track !548
  %108 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 0
  %109 = add nsw i32 %75, %6
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [129 x i8], [129 x i8]* %108, i64 0, i64 %110
  store i8 0, i8* %111, align 1
  %112 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 0
  %113 = getelementptr inbounds [129 x i8], [129 x i8]* %112, i32 0, i32 0
  %114 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %42, i32 0, i32 2
  store i8* %113, i8** %114, align 8
  br label %115

; <label>:115:                                    ; preds = %46, %102, %78, %23, %29
  %116 = getelementptr inbounds i8, i8* %1, i64 -1
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = icmp eq i32 %118, 10
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i8
  store i8 %121, i8* @trailing_line, align 1
  %122 = load i8, i8* @trailing_line, align 1
  %123 = trunc i8 %122 to i1
  br i1 %123, label %128, label %124

; <label>:124:                                    ; preds = %115
  %125 = load i32, i32* @log_line_current, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* @log_line_current, align 4
  %127 = icmp sge i32 %126, 24
  %spec.store.select = select i1 %127, i32 0, i32 %126
  store i32 %spec.store.select, i32* @log_line_current, align 4
  br label %128

; <label>:128:                                    ; preds = %2, %124, %115
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_log_line(i32) #0 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr [24 x %struct.log_ln], [24 x %struct.log_ln]* @log_lines, i32 0, i32 0
  %4 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %3, i64 %2
  %5 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %4, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %4, i32 0, i32 1
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %4, i32 0, i32 2
  store i8* null, i8** %8, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @redirect_output() #0 {
  %1 = alloca i8*, align 8, !track !549
  %2 = getelementptr [9 x i8], [9 x i8]* @.str.4.842, i32 0, i32 0
  %3 = call %struct._IO_FILE* @unique_create(i8* %2, i1 zeroext false, i8** %1)
  store %struct._IO_FILE* %3, %struct._IO_FILE** @logfp, align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  %5 = icmp ne %struct._IO_FILE* %4, null
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  br i1 %5, label %7, label %15

; <label>:7:                                      ; preds = %0
  %8 = getelementptr [41 x i8], [41 x i8]* @.str.5.843, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8, !track !550
  %10 = load i8*, i8** @redirect_request_signal_name, align 8
  %11 = load i8*, i8** %1, align 8
  %12 = call i8* @quote(i8* %11)
  %13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* %9, i8* %10, i8* %12)
  %14 = load i8*, i8** %1, align 8
  call void @free(i8* %14) #8
  store i8* null, i8** %1, align 8
  call void @log_dump_context()
  br label %32

; <label>:15:                                     ; preds = %0
  %16 = getelementptr [15 x i8], [15 x i8]* @.str.6.844, i32 0, i32 0
  %17 = call i8* @gettext(i8* %16) #8, !track !551
  %18 = load i8*, i8** @redirect_request_signal_name, align 8
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* %17, i8* %18)
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %21 = getelementptr [28 x i8], [28 x i8]* @.str.7.845, i32 0, i32 0
  %22 = call i8* @gettext(i8* %21) #8, !track !552
  %23 = load i8*, i8** %1, align 8
  %24 = icmp ne i8* %23, null
  %25 = load i8*, i8** %1, align 8
  %26 = getelementptr [9 x i8], [9 x i8]* @.str.4.842, i32 0, i32 0
  %27 = select i1 %24, i8* %25, i8* %26
  %28 = call i32* @__errno_location() #15
  %29 = load i32, i32* %28, align 4
  %30 = call i8* @strerror(i32 %29) #8, !track !553
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* %22, i8* %27, i8* %30)
  store i8 1, i8* @inhibit_logging, align 1
  br label %32

; <label>:32:                                     ; preds = %15, %7
  store i8 0, i8* @save_context_p, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @log_dump_context() #0 {
  %1 = load i32, i32* @log_line_current, align 4
  %2 = call %struct._IO_FILE* @get_log_fp()
  %3 = call %struct._IO_FILE* @get_warc_log_fp()
  %4 = icmp eq %struct._IO_FILE* %2, null
  %5 = icmp eq i32 %1, -1
  %or.cond = or i1 %4, %5
  br i1 %or.cond, label %62, label %6

; <label>:6:                                      ; preds = %0
  %7 = load i8, i8* @trailing_line, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %12

; <label>:9:                                      ; preds = %6
  %10 = add nsw i32 %1, 1
  %11 = icmp sge i32 %10, 24
  %spec.select = select i1 %11, i32 0, i32 %10
  br label %12

; <label>:12:                                     ; preds = %9, %6
  %.1 = phi i32 [ %spec.select, %9 ], [ %1, %6 ]
  br label %13

; <label>:13:                                     ; preds = %29, %12
  %.2 = phi i32 [ %.1, %12 ], [ %spec.select1, %29 ]
  call void @unroll_loop(i32 276)
  %14 = sext i32 %.2 to i64
  %15 = getelementptr [24 x %struct.log_ln], [24 x %struct.log_ln]* @log_lines, i32 0, i32 0
  %16 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %15, i64 %14
  %17 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %16, i32 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %20, label %29

; <label>:20:                                     ; preds = %13
  %21 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %16, i32 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @fputs(i8* %22, %struct._IO_FILE* %2)
  %24 = icmp ne %struct._IO_FILE* %3, null
  br i1 %24, label %25, label %29

; <label>:25:                                     ; preds = %20
  %26 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %16, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @fputs(i8* %27, %struct._IO_FILE* %3)
  br label %29

; <label>:29:                                     ; preds = %13, %25, %20
  %30 = add nsw i32 %.2, 1
  %31 = icmp sge i32 %30, 24
  %spec.select1 = select i1 %31, i32 0, i32 %30
  %32 = load i32, i32* @log_line_current, align 4
  %33 = icmp ne i32 %spec.select1, %32
  br i1 %33, label %13, label %34

; <label>:34:                                     ; preds = %29
  %35 = load i8, i8* @trailing_line, align 1
  %36 = trunc i8 %35 to i1
  br i1 %36, label %37, label %59

; <label>:37:                                     ; preds = %34
  %38 = load i32, i32* @log_line_current, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [24 x %struct.log_ln], [24 x %struct.log_ln]* @log_lines, i64 0, i64 %39
  %41 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %40, i32 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %44, label %59

; <label>:44:                                     ; preds = %37
  %45 = load i32, i32* @log_line_current, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [24 x %struct.log_ln], [24 x %struct.log_ln]* @log_lines, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %47, i32 0, i32 2
  %49 = load i8*, i8** %48, align 8
  %50 = call i32 @fputs(i8* %49, %struct._IO_FILE* %2)
  %51 = icmp ne %struct._IO_FILE* %3, null
  br i1 %51, label %52, label %59

; <label>:52:                                     ; preds = %44
  %53 = load i32, i32* @log_line_current, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [24 x %struct.log_ln], [24 x %struct.log_ln]* @log_lines, i64 0, i64 %54
  %56 = getelementptr inbounds %struct.log_ln, %struct.log_ln* %55, i32 0, i32 2
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @fputs(i8* %57, %struct._IO_FILE* %3)
  br label %59

; <label>:59:                                     ; preds = %37, %52, %44, %34
  %60 = call i32 @fflush(%struct._IO_FILE* %2)
  %61 = call i32 @fflush(%struct._IO_FILE* %3)
  br label %62

; <label>:62:                                     ; preds = %0, %59
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @log_set_flush(i1 zeroext) #0 {
  %2 = zext i1 %0 to i8
  %3 = trunc i8 %2 to i1
  %4 = zext i1 %3 to i32
  %5 = load i8, i8* @flush_log_p, align 1
  %6 = trunc i8 %5 to i1
  %7 = zext i1 %6 to i32
  %8 = icmp eq i32 %4, %7
  br i1 %8, label %19, label %9

; <label>:9:                                      ; preds = %1
  %10 = trunc i8 %2 to i1
  %11 = zext i1 %10 to i32
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  store i8 0, i8* @flush_log_p, align 1
  br label %19

; <label>:14:                                     ; preds = %9
  %15 = load i8, i8* @needs_flushing, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %14
  call void @logflush()
  br label %18

; <label>:18:                                     ; preds = %17, %14
  store i8 1, i8* @flush_log_p, align 1
  br label %19

; <label>:19:                                     ; preds = %1, %18, %13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @log_set_save_context(i1 zeroext) #0 {
  %2 = zext i1 %0 to i8
  %3 = load i8, i8* @save_context_p, align 1
  %4 = trunc i8 %3 to i1
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %2 to i1
  %7 = zext i1 %6 to i8
  store i8 %7, i8* @save_context_p, align 1
  %8 = trunc i8 %5 to i1
  ret i1 %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @logprintf(i32, i8*, ...) #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = alloca %struct.logvprintf_state, align 8, !track !554
  call void @check_redirect_output()
  %5 = load i8, i8* @inhibit_logging, align 1
  %6 = trunc i8 %5 to i1
  br i1 %6, label %.loopexit, label %7

; <label>:7:                                      ; preds = %2
  switch i32 %0, label %28 [
    i32 4, label %8
    i32 0, label %24
    i32 1, label %12
    i32 2, label %16
  ]

; <label>:8:                                      ; preds = %7
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %10 = load i32, i32* %9, align 8
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %28, label %.loopexit

; <label>:12:                                     ; preds = %7
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %14 = load i8, i8* %13, align 4
  %15 = trunc i8 %14 to i1
  br i1 %15, label %.loopexit, label %28

; <label>:16:                                     ; preds = %7
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %.loopexit, label %20

; <label>:20:                                     ; preds = %16
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %22 = load i8, i8* %21, align 4
  %23 = trunc i8 %22 to i1
  br i1 %23, label %.loopexit, label %28

; <label>:24:                                     ; preds = %7
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %.loopexit

; <label>:28:                                     ; preds = %24, %20, %12, %8, %7
  %29 = bitcast %struct.logvprintf_state* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false)
  %30 = call i32* @__errno_location() #15
  store i32 0, i32* %30, align 4
  br label %31

; <label>:31:                                     ; preds = %45, %28
  call void @unroll_loop(i32 277)
  %32 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %33 = bitcast %struct.__va_list_tag* %32 to i8*
  call void @llvm.va_start(i8* %33)
  %34 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %35 = call zeroext i1 @log_vprintf_internal(%struct.logvprintf_state* %4, i8* %1, %struct.__va_list_tag* %34)
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %38 = bitcast %struct.__va_list_tag* %37 to i8*
  call void @llvm.va_end(i8* %38)
  %39 = trunc i8 %36 to i1
  br i1 %39, label %40, label %45

; <label>:40:                                     ; preds = %31
  %41 = call i32* @__errno_location() #15
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 32
  br i1 %43, label %44, label %45

; <label>:44:                                     ; preds = %40
  call void @exit(i32 1) #16
  unreachable

; <label>:45:                                     ; preds = %31, %40
  %46 = trunc i8 %36 to i1
  %47 = xor i1 %46, true
  br i1 %47, label %31, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %45
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %24, %16, %20, %12, %8, %2
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #8

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @log_vprintf_internal(%struct.logvprintf_state*, i8*, %struct.__va_list_tag*) #0 {
  %4 = alloca [128 x i8], align 16, !track !555
  %5 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i32 0, i32 0
  %6 = call %struct._IO_FILE* @get_log_fp()
  %7 = call %struct._IO_FILE* @get_warc_log_fp()
  %8 = load i8, i8* @save_context_p, align 1
  %9 = trunc i8 %8 to i1
  %.not = xor i1 %9, true
  %10 = icmp eq %struct._IO_FILE* %7, null
  %or.cond = and i1 %.not, %10
  br i1 %or.cond, label %11, label %13

; <label>:11:                                     ; preds = %3
  %12 = call i32 @vfprintf(%struct._IO_FILE* %6, i8* %1, %struct.__va_list_tag* %2)
  br label %57

; <label>:13:                                     ; preds = %3
  %14 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  br label %22

; <label>:22:                                     ; preds = %17, %13
  %.02 = phi i8* [ %19, %17 ], [ %5, %13 ]
  %.01 = phi i32 [ %21, %17 ], [ 128, %13 ]
  %23 = sext i32 %.01 to i64
  %24 = call i32 @vsnprintf(i8* %.02, i64 %23, i8* %1, %struct.__va_list_tag* %2) #8
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %34

; <label>:26:                                     ; preds = %22
  %27 = shl i32 %.01, 1
  %28 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = sext i32 %27 to i64
  %31 = call i8* @xrealloc(i8* %29, i64 %30)
  %32 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  store i8* %31, i8** %32, align 8
  %33 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 2
  store i32 %27, i32* %33, align 4
  br label %62

; <label>:34:                                     ; preds = %22
  %35 = icmp sge i32 %24, %.01
  br i1 %35, label %36, label %44

; <label>:36:                                     ; preds = %34
  %37 = add nsw i32 %24, 1
  %38 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = sext i32 %37 to i64
  %41 = call i8* @xrealloc(i8* %39, i64 %40)
  %42 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  store i8* %41, i8** %42, align 8
  %43 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 2
  store i32 %37, i32* %43, align 4
  br label %62

; <label>:44:                                     ; preds = %34
  %45 = load i8, i8* @save_context_p, align 1
  %46 = trunc i8 %45 to i1
  br i1 %46, label %47, label %48

; <label>:47:                                     ; preds = %44
  call void @saved_append(i8* %.02)
  br label %48

; <label>:48:                                     ; preds = %47, %44
  %49 = call i32 @fputs(i8* %.02, %struct._IO_FILE* %6)
  %50 = icmp ne %struct._IO_FILE* %7, null
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %48
  %52 = call i32 @fputs(i8* %.02, %struct._IO_FILE* %7)
  br label %53

; <label>:53:                                     ; preds = %48, %51
  %54 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  call void @free(i8* %55) #8
  %56 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  br label %57

; <label>:57:                                     ; preds = %53, %11
  %58 = load i8, i8* @flush_log_p, align 1
  %59 = trunc i8 %58 to i1
  br i1 %59, label %60, label %61

; <label>:60:                                     ; preds = %57
  call void @logflush()
  br label %62

; <label>:61:                                     ; preds = %57
  store i8 1, i8* @needs_flushing, align 1
  br label %62

; <label>:62:                                     ; preds = %60, %61, %36, %26
  %.0 = phi i1 [ false, %26 ], [ false, %36 ], [ true, %61 ], [ true, %60 ]
  ret i1 %.0
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #8

declare dso_local i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) #3

; Function Attrs: nounwind
declare dso_local i32 @vsnprintf(i8*, i64, i8*, %struct.__va_list_tag*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_logprintf(i8*, ...) #0 {
  %2 = alloca [1 x %struct.__va_list_tag], align 16
  %3 = alloca %struct.logvprintf_state, align 8, !track !556
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %5 = load i8, i8* %4, align 1
  %6 = trunc i8 %5 to i1
  br i1 %6, label %7, label %22

; <label>:7:                                      ; preds = %1
  call void @check_redirect_output()
  %8 = load i8, i8* @inhibit_logging, align 1
  %9 = trunc i8 %8 to i1
  br i1 %9, label %22, label %10

; <label>:10:                                     ; preds = %7
  %11 = bitcast %struct.logvprintf_state* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false)
  br label %12

; <label>:12:                                     ; preds = %12, %10
  call void @unroll_loop(i32 278)
  %13 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %14 = bitcast %struct.__va_list_tag* %13 to i8*
  call void @llvm.va_start(i8* %14)
  %15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %16 = call zeroext i1 @log_vprintf_internal(%struct.logvprintf_state* %3, i8* %0, %struct.__va_list_tag* %15)
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %19 = bitcast %struct.__va_list_tag* %18 to i8*
  call void @llvm.va_end(i8* %19)
  %20 = trunc i8 %17 to i1
  %21 = xor i1 %20, true
  br i1 %21, label %12, label %.loopexit

.loopexit:                                        ; preds = %12
  br label %22

; <label>:22:                                     ; preds = %.loopexit, %7, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @log_init(i8*, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = icmp ne i8* %0, null
  br i1 %4, label %5, label %32

; <label>:5:                                      ; preds = %2
  %6 = load i8, i8* %0, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp eq i32 %7, 45
  br i1 %8, label %9, label %15

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %9
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %14, %struct._IO_FILE** @logfp, align 8
  br label %39

; <label>:15:                                     ; preds = %9, %5
  %16 = trunc i8 %3 to i1
  %17 = zext i1 %16 to i64
  %18 = getelementptr [2 x i8], [2 x i8]* @.str.850, i32 0, i32 0
  %19 = getelementptr [2 x i8], [2 x i8]* @.str.1.851, i32 0, i32 0
  %20 = select i1 %16, i8* %18, i8* %19
  %21 = call %struct._IO_FILE* @fopen(i8* %0, i8* %20), !track !557
  store %struct._IO_FILE* %21, %struct._IO_FILE** @logfp, align 8
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  %23 = icmp ne %struct._IO_FILE* %22, null
  br i1 %23, label %39, label %24

; <label>:24:                                     ; preds = %15
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %26 = load i8*, i8** @exec_name, align 8
  %27 = call i32* @__errno_location() #15
  %28 = load i32, i32* %27, align 4
  %29 = call i8* @strerror(i32 %28) #8, !track !558
  %30 = getelementptr [12 x i8], [12 x i8]* @.str.2.852, i32 0, i32 0
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* %30, i8* %26, i8* %0, i8* %29)
  call void @exit(i32 1) #16
  unreachable

; <label>:32:                                     ; preds = %2
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  store %struct._IO_FILE* %33, %struct._IO_FILE** @logfp, align 8
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  %35 = call i32 @fileno(%struct._IO_FILE* %34) #8
  %36 = call i32 @isatty(i32 %35) #8
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %32
  store i8 1, i8* @save_context_p, align 1
  br label %39

; <label>:39:                                     ; preds = %32, %38, %13, %15
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @isatty(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @log_close() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  %2 = icmp ne %struct._IO_FILE* %1, null
  br i1 %2, label %3, label %10

; <label>:3:                                      ; preds = %0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %6 = icmp ne %struct._IO_FILE* %4, %5
  br i1 %6, label %7, label %10

; <label>:7:                                      ; preds = %3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @logfp, align 8
  %9 = call i32 @fclose(%struct._IO_FILE* %8)
  br label %10

; <label>:10:                                     ; preds = %7, %3, %0
  store %struct._IO_FILE* null, %struct._IO_FILE** @logfp, align 8
  store i8 1, i8* @inhibit_logging, align 1
  store i8 0, i8* @save_context_p, align 1
  br label %11

; <label>:11:                                     ; preds = %10, %11
  %.01 = phi i32 [ 0, %10 ], [ %12, %11 ]
  call void @free_log_line(i32 %.01)
  %12 = add nuw nsw i32 %.01, 1
  %exitcond = icmp ne i32 %12, 24
  br i1 %exitcond, label %11, label %13

; <label>:13:                                     ; preds = %11
  store i32 -1, i32* @log_line_current, align 4
  store i8 0, i8* @trailing_line, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @escnonprint(i8*) #0 {
  %2 = call i8* @escnonprint_internal(i8* %0, i8 signext 92, i32 8)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @escnonprint_internal(i8*, i8 signext, i32) #0 {
  %4 = call i32 @count_nonprint(i8* %0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %42, label %6

; <label>:6:                                      ; preds = %3
  %7 = load i32, i32* @escnonprint_internal.ringpos, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr [3 x %struct.hsts_kh], [3 x %struct.hsts_kh]* @ring, i32 0, i32 0
  %10 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %9, i64 %8
  %11 = call i64 @strlen(i8* %0) #14
  %12 = add i64 %11, 1
  %13 = icmp eq i32 %2, 8
  %14 = mul nsw i32 3, %4
  %15 = mul nsw i32 2, %4
  %16 = select i1 %13, i32 %14, i32 %15
  %17 = sext i32 %16 to i64
  %18 = add i64 %12, %17
  %19 = trunc i64 %18 to i32
  %20 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %27, label %23

; <label>:23:                                     ; preds = %6
  %24 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp slt i32 %25, %19
  br i1 %26, label %27, label %34

; <label>:27:                                     ; preds = %23, %6
  %28 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = sext i32 %19 to i64
  %31 = call i8* @xrealloc(i8* %29, i64 %30)
  %32 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  store i8* %31, i8** %32, align 8
  %33 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 1
  store i32 %19, i32* %33, align 8
  br label %34

; <label>:34:                                     ; preds = %27, %23
  %35 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  call void @copy_and_escape(i8* %0, i8* %36, i8 signext %1, i32 %2)
  %37 = load i32, i32* @escnonprint_internal.ringpos, align 4
  %38 = add nsw i32 %37, 1
  %39 = srem i32 %38, 3
  store i32 %39, i32* @escnonprint_internal.ringpos, align 4
  %40 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  br label %42

; <label>:42:                                     ; preds = %3, %34
  %.0 = phi i8* [ %41, %34 ], [ %0, %3 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @count_nonprint(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.03 = phi i32 [ %spec.select, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %.012 = phi i8* [ %8, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 279)
  %4 = load i8, i8* %.012, align 1
  %5 = sext i8 %4 to i32
  %6 = call zeroext i1 @c_isprint(i32 %5)
  %7 = add nsw i32 %.03, 1
  %spec.select = select i1 %6, i32 %.03, i32 %7
  %8 = getelementptr inbounds i8, i8* %.012, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i32 [ %spec.select, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.0.lcssa = phi i32 [ 0, %1 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  ret i32 %.0.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_and_escape(i8*, i8*, i8 signext, i32) #0 {
  switch i32 %3, label %73 [
    i32 8, label %5
    i32 16, label %38
  ]

; <label>:5:                                      ; preds = %4
  %6 = getelementptr inbounds i8, i8* %0, i32 1
  %7 = load i8, i8* %0, align 1
  %8 = zext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %5
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %33
  %10 = phi i8 [ %35, %33 ], [ %7, %.lr.ph.preheader ]
  %11 = phi i8* [ %34, %33 ], [ %6, %.lr.ph.preheader ]
  %.03 = phi i8* [ %.1, %33 ], [ %1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 280)
  %12 = zext i8 %10 to i32
  %13 = call zeroext i1 @c_isprint(i32 %12)
  %14 = getelementptr inbounds i8, i8* %.03, i32 1
  br i1 %13, label %15, label %16

; <label>:15:                                     ; preds = %.lr.ph
  store i8 %10, i8* %.03, align 1
  br label %33

; <label>:16:                                     ; preds = %.lr.ph
  store i8 %2, i8* %.03, align 1
  %17 = zext i8 %10 to i32
  %18 = ashr i32 %17, 6
  %19 = add nsw i32 48, %18
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds i8, i8* %14, i32 1
  store i8 %20, i8* %14, align 1
  %22 = zext i8 %10 to i32
  %23 = ashr i32 %22, 3
  %24 = and i32 %23, 7
  %25 = add nsw i32 48, %24
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds i8, i8* %21, i32 1
  store i8 %26, i8* %21, align 1
  %28 = zext i8 %10 to i32
  %29 = and i32 %28, 7
  %30 = add nsw i32 48, %29
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds i8, i8* %27, i32 1
  store i8 %31, i8* %27, align 1
  br label %33

; <label>:33:                                     ; preds = %16, %15
  %.1 = phi i8* [ %14, %15 ], [ %32, %16 ]
  %34 = getelementptr inbounds i8, i8* %11, i32 1
  %35 = load i8, i8* %11, align 1
  %36 = zext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %.lr.ph, label %._crit_edge.loopexit

; <label>:38:                                     ; preds = %4
  %39 = getelementptr inbounds i8, i8* %0, i32 1
  %40 = load i8, i8* %0, align 1
  %41 = zext i8 %40 to i32
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %.lr.ph6.preheader, label %._crit_edge

.lr.ph6.preheader:                                ; preds = %38
  br label %.lr.ph6

.lr.ph6:                                          ; preds = %.lr.ph6.preheader, %68
  %43 = phi i8 [ %70, %68 ], [ %40, %.lr.ph6.preheader ]
  %44 = phi i8* [ %69, %68 ], [ %39, %.lr.ph6.preheader ]
  %.24 = phi i8* [ %.3, %68 ], [ %1, %.lr.ph6.preheader ]
  call void @unroll_loop(i32 281)
  %45 = zext i8 %43 to i32
  %46 = call zeroext i1 @c_isprint(i32 %45)
  %47 = getelementptr inbounds i8, i8* %.24, i32 1
  br i1 %46, label %48, label %49

; <label>:48:                                     ; preds = %.lr.ph6
  store i8 %43, i8* %.24, align 1
  br label %68

; <label>:49:                                     ; preds = %.lr.ph6
  store i8 %2, i8* %.24, align 1
  %50 = zext i8 %43 to i32
  %51 = ashr i32 %50, 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3.855, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = add nsw i32 %55, 0
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %47, i32 1
  store i8 %57, i8* %47, align 1
  %59 = zext i8 %43 to i32
  %60 = and i32 %59, 15
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.3.855, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = add nsw i32 %64, 0
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %58, i32 1
  store i8 %66, i8* %58, align 1
  br label %68

; <label>:68:                                     ; preds = %49, %48
  %.3 = phi i8* [ %47, %48 ], [ %67, %49 ]
  %69 = getelementptr inbounds i8, i8* %44, i32 1
  %70 = load i8, i8* %44, align 1
  %71 = zext i8 %70 to i32
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %.lr.ph6, label %._crit_edge.loopexit1

; <label>:73:                                     ; preds = %4
  call void @abort() #16
  unreachable

._crit_edge.loopexit:                             ; preds = %33
  %.4.ph = phi i8* [ %.1, %33 ]
  br label %._crit_edge

._crit_edge.loopexit1:                            ; preds = %68
  %.4.ph2 = phi i8* [ %.3, %68 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit1, %._crit_edge.loopexit, %38, %5
  %.4 = phi i8* [ %1, %5 ], [ %1, %38 ], [ %.4.ph, %._crit_edge.loopexit ], [ %.4.ph2, %._crit_edge.loopexit1 ]
  store i8 0, i8* %.4, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @escnonprint_uri(i8*) #0 {
  %2 = call i8* @escnonprint_internal(i8* %0, i8 signext 37, i32 16)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @log_cleanup() #0 {
  br label %1

; <label>:1:                                      ; preds = %0, %1
  %.01 = phi i64 [ 0, %0 ], [ %7, %1 ]
  call void @unroll_loop(i32 282)
  %2 = getelementptr inbounds [3 x %struct.hsts_kh], [3 x %struct.hsts_kh]* @ring, i64 0, i64 %.01
  %3 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %2, i32 0, i32 0
  %4 = load i8*, i8** %3, align 16
  call void @free(i8* %4) #8
  %5 = getelementptr inbounds [3 x %struct.hsts_kh], [3 x %struct.hsts_kh]* @ring, i64 0, i64 %.01
  %6 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %5, i32 0, i32 0
  store i8* null, i8** %6, align 16
  %7 = add nuw nsw i64 %.01, 1
  %exitcond = icmp ne i64 %7, 3
  br i1 %exitcond, label %1, label %8

; <label>:8:                                      ; preds = %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @log_request_redirect_output(i8*) #0 {
  %2 = load i32, i32* @redirect_request, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %8

; <label>:4:                                      ; preds = %1
  %5 = load i8, i8* @save_context_p, align 1
  %6 = trunc i8 %5 to i1
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  store i32 1, i32* @redirect_request, align 4
  br label %8

; <label>:8:                                      ; preds = %7, %4, %1
  store i8* %0, i8** @redirect_request_signal_name, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32, i8**) #0 {
  %3 = call i8* @malloc(i64 32)
  %4 = bitcast i8* %3 to i8**
  store i8** %4, i8*** @__argv_new__
  %5 = load i8**, i8*** @__argv_new__
  %6 = getelementptr i8*, i8** %5, i32 0
  %7 = call i8* @malloc(i64 100)
  store i8* %7, i8** %6
  %8 = load i8*, i8** %6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i64 100, i1 false)
  %9 = getelementptr i8, i8* %8, i32 4
  store i8 0, i8* %9
  %10 = load i8**, i8*** @__argv_new__
  %11 = getelementptr i8*, i8** %10, i32 1
  %12 = call i8* @malloc(i64 100)
  store i8* %12, i8** %11
  %13 = load i8*, i8** %11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i32 0, i32 0), i64 100, i1 false)
  %14 = getelementptr i8, i8* %13, i32 15
  store i8 0, i8* %14
  %15 = load i8**, i8*** @__argv_new__
  %16 = getelementptr i8*, i8** %15, i32 2
  %17 = getelementptr i8*, i8** %1, i32 2
  %18 = load i8*, i8** %17
  store i8* %18, i8** %16
  %19 = load i8**, i8*** @__argv_new__
  %20 = getelementptr i8*, i8** %19, i32 3
  store i8* null, i8** %20
  %21 = alloca i32, align 4, !track !559
  %22 = alloca %struct.stat, align 8
  %23 = alloca i8*, align 8, !track !560
  %24 = alloca i8*, align 8, !track !561
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = call %struct.ptimer* @ptimer_new()
  %29 = call double @ptimer_measure(%struct.ptimer* %28)
  store i64 0, i64* @total_downloaded_bytes, align 8
  %30 = getelementptr inbounds i8*, i8** %19, i64 0
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** @program_name, align 8
  call void @i18n_initialize()
  %32 = getelementptr inbounds i8*, i8** %19, i64 0
  %33 = load i8*, i8** %32, align 8
  %34 = call i8* @base_name(i8* %33)
  store i8* %34, i8** @exec_name, align 8
  %35 = icmp slt i32 1, 3, !track_argc !562
  br i1 %35, label %.lr.ph42.preheader, label %._crit_edge43

.lr.ph42.preheader:                               ; preds = %2
  br label %.lr.ph42

.lr.ph42:                                         ; preds = %.lr.ph42.preheader, %.lr.ph42
  %indvars.iv45 = phi i64 [ %indvars.iv.next46, %.lr.ph42 ], [ 1, %.lr.ph42.preheader ]
  %.0939 = phi i32 [ %43, %.lr.ph42 ], [ 1, %.lr.ph42.preheader ]
  call void @unroll_loop(i32 284)
  %36 = getelementptr inbounds i8*, i8** %19, i64 %indvars.iv45
  %37 = load i8*, i8** %36, align 8
  %38 = call i64 @strlen(i8* %37) #14
  %39 = add i64 %38, 3
  %40 = add i64 %39, 1
  %41 = sext i32 %.0939 to i64
  %42 = add i64 %41, %40
  %43 = trunc i64 %42 to i32
  %indvars.iv.next46 = add nuw nsw i64 %indvars.iv45, 1
  %exitcond16 = icmp ne i64 %indvars.iv.next46, 3
  br i1 %exitcond16, label %.lr.ph42, label %._crit_edge43.loopexit

._crit_edge43.loopexit:                           ; preds = %.lr.ph42
  %.09.lcssa.ph = phi i32 [ %43, %.lr.ph42 ]
  br label %._crit_edge43

._crit_edge43:                                    ; preds = %._crit_edge43.loopexit, %2
  %.09.lcssa = phi i32 [ 1, %2 ], [ %.09.lcssa.ph, %._crit_edge43.loopexit ]
  %44 = sext i32 %.09.lcssa to i64
  %45 = call noalias i8* @malloc(i64 %44) #8, !track !563
  store i8* %45, i8** @program_argstring, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %52

; <label>:47:                                     ; preds = %._crit_edge43
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %49 = getelementptr [27 x i8], [27 x i8]* @.str.866, i32 0, i32 0
  %50 = call i8* @gettext(i8* %49) #8, !track !564
  %51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %50)
  call void @exit(i32 2) #16
  unreachable

; <label>:52:                                     ; preds = %._crit_edge43
  %53 = icmp slt i32 1, 3, !track_argc !562
  br i1 %53, label %.lr.ph32.preheader, label %._crit_edge33

.lr.ph32.preheader:                               ; preds = %52
  br label %.lr.ph32

.lr.ph32:                                         ; preds = %.lr.ph32.preheader, %.lr.ph32
  %indvars.iv35 = phi i64 [ %indvars.iv.next36, %.lr.ph32 ], [ 1, %.lr.ph32.preheader ]
  %.0230 = phi i8* [ %65, %.lr.ph32 ], [ %45, %.lr.ph32.preheader ]
  call void @unroll_loop(i32 285)
  %54 = getelementptr inbounds i8, i8* %.0230, i32 1
  store i8 34, i8* %.0230, align 1
  %55 = getelementptr inbounds i8*, i8** %19, i64 %indvars.iv35
  %56 = load i8*, i8** %55, align 8
  %57 = call i64 @strlen(i8* %56) #14
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds i8*, i8** %19, i64 %indvars.iv35
  %60 = load i8*, i8** %59, align 8
  %61 = sext i32 %58 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %60, i64 %61, i1 false), !track !565
  %62 = sext i32 %58 to i64
  %63 = getelementptr inbounds i8, i8* %54, i64 %62
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  store i8 34, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %64, i32 1
  store i8 32, i8* %64, align 1
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond = icmp ne i64 %indvars.iv.next36, 3
  br i1 %exitcond, label %.lr.ph32, label %._crit_edge33.loopexit

._crit_edge33.loopexit:                           ; preds = %.lr.ph32
  %.02.lcssa.ph = phi i8* [ %65, %.lr.ph32 ]
  br label %._crit_edge33

._crit_edge33:                                    ; preds = %._crit_edge33.loopexit, %52
  %.02.lcssa = phi i8* [ %45, %52 ], [ %.02.lcssa.ph, %._crit_edge33.loopexit ]
  store i8 0, i8* %.02.lcssa, align 1
  call void @defaults()
  call void @init_switches()
  store i32 -1, i32* %21, align 4
  %66 = getelementptr [128 x i8], [128 x i8]* @short_options, i32 0, i32 0
  %67 = getelementptr [313 x %struct.option], [313 x %struct.option]* @long_options, i32 0, i32 0
  %68 = call i32 @getopt_long(i32 3, i8** %19, i8* %66, %struct.option* %67, i32* %21) #8, !track_argc !562
  %69 = icmp ne i32 %68, -1
  br i1 %69, label %.lr.ph26.preheader, label %.loopexit

.lr.ph26.preheader:                               ; preds = %._crit_edge33
  br label %.lr.ph26

.lr.ph26:                                         ; preds = %.lr.ph26.preheader, %108
  call void @unroll_loop(i32 286)
  %70 = load i32, i32* %21, align 4
  %71 = icmp sge i32 %70, 0
  br i1 %71, label %72, label %108

; <label>:72:                                     ; preds = %.lr.ph26
  %73 = load i32, i32* %21, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [313 x %struct.option], [313 x %struct.option]* @long_options, i64 0, i64 %74
  %76 = getelementptr inbounds %struct.option, %struct.option* %75, i32 0, i32 3
  %77 = load i32, i32* %76, align 8
  %78 = and i32 %77, -1025
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [156 x %struct.cmdline_option], [156 x %struct.cmdline_option]* @option_data, i64 0, i64 %79
  %81 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %80, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr [10 x i8], [10 x i8]* @.str.1.867, i32 0, i32 0
  %84 = call i32 @strcmp(i8* %82, i8* %83) #14
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %.loopexit.loopexit, label %86

; <label>:86:                                     ; preds = %72
  %87 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %80, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr [7 x i8], [7 x i8]* @.str.2.868, i32 0, i32 0
  %90 = call i32 @strcmp(i8* %88, i8* %89) #14
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %108

; <label>:92:                                     ; preds = %86
  %93 = load i8*, i8** @optarg, align 8
  %94 = call zeroext i1 @run_wgetrc(i8* %93)
  %95 = zext i1 %94 to i32
  %96 = trunc i8 1 to i1
  %97 = zext i1 %96 to i32
  %98 = and i32 %97, %95
  %99 = icmp ne i32 %98, 0
  %100 = zext i1 %99 to i8
  %101 = trunc i8 %100 to i1
  br i1 %101, label %.loopexit, label %102

; <label>:102:                                    ; preds = %92
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %104 = getelementptr [28 x i8], [28 x i8]* @.str.3.869, i32 0, i32 0
  %105 = call i8* @gettext(i8* %104) #8, !track !566
  %106 = load i8*, i8** @optarg, align 8
  %107 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* %105, i8* %106)
  call void @exit(i32 2) #16
  unreachable

; <label>:108:                                    ; preds = %86, %.lr.ph26
  %109 = getelementptr [128 x i8], [128 x i8]* @short_options, i32 0, i32 0
  %110 = getelementptr [313 x %struct.option], [313 x %struct.option]* @long_options, i32 0, i32 0
  %111 = call i32 @getopt_long(i32 3, i8** %19, i8* %109, %struct.option* %110, i32* %21) #8, !track_argc !562
  %112 = icmp ne i32 %111, -1
  br i1 %112, label %.lr.ph26, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %72, %108
  %.08.ph = phi i8 [ 0, %108 ], [ 0, %72 ]
  %.07.ph = phi i8 [ 0, %108 ], [ 1, %72 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %._crit_edge33, %92
  %.08 = phi i8 [ 1, %92 ], [ 0, %._crit_edge33 ], [ %.08.ph, %.loopexit.loopexit ]
  %.07 = phi i8 [ 0, %92 ], [ 0, %._crit_edge33 ], [ %.07.ph, %.loopexit.loopexit ]
  %113 = trunc i8 %.07 to i1
  %114 = zext i1 %113 to i32
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %121

; <label>:116:                                    ; preds = %.loopexit
  %117 = trunc i8 %.08 to i1
  %118 = zext i1 %117 to i32
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

; <label>:120:                                    ; preds = %116
  call void @initialize()
  br label %121

; <label>:121:                                    ; preds = %120, %116, %.loopexit
  store i32 0, i32* @opterr, align 4
  store i32 0, i32* @optind, align 4
  store i32 -1, i32* %21, align 4
  %122 = getelementptr [128 x i8], [128 x i8]* @short_options, i32 0, i32 0
  %123 = getelementptr [313 x %struct.option], [313 x %struct.option]* @long_options, i32 0, i32 0
  %124 = call i32 @getopt_long(i32 3, i8** %19, i8* %122, %struct.option* %123, i32* %21) #8, !track_argc !562
  %125 = icmp ne i32 %124, -1
  br i1 %125, label %.lr.ph23.preheader, label %._crit_edge24

.lr.ph23.preheader:                               ; preds = %121
  br label %.lr.ph23

.lr.ph23:                                         ; preds = %.lr.ph23.preheader, %.critedge
  %126 = phi i32 [ %307, %.critedge ], [ %124, %.lr.ph23.preheader ]
  %.0521 = phi i8 [ %.16, %.critedge ], [ 0, %.lr.ph23.preheader ]
  call void @unroll_loop(i32 287)
  %127 = load i32, i32* %21, align 4
  %128 = icmp eq i32 %127, -1
  br i1 %128, label %129, label %147

; <label>:129:                                    ; preds = %.lr.ph23
  %130 = icmp eq i32 %126, 63
  br i1 %130, label %131, label %141

; <label>:131:                                    ; preds = %129
  %132 = call i32 @print_usage(i32 1)
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %134 = getelementptr [2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0
  %135 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %133, i8* %134)
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %137 = getelementptr [35 x i8], [35 x i8]* @.str.5.871, i32 0, i32 0
  %138 = call i8* @gettext(i8* %137) #8, !track !567
  %139 = load i8*, i8** @exec_name, align 8
  %140 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %136, i8* %138, i8* %139)
  call void @exit(i32 2) #16
  unreachable

; <label>:141:                                    ; preds = %129
  %142 = sub nsw i32 %126, 32
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [96 x i8], [96 x i8]* @optmap, i64 0, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  store i32 %146, i32* %21, align 4
  br label %147

; <label>:147:                                    ; preds = %141, %.lr.ph23
  %148 = load i32, i32* %21, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [313 x %struct.option], [313 x %struct.option]* @long_options, i64 0, i64 %149
  %151 = getelementptr inbounds %struct.option, %struct.option* %150, i32 0, i32 3
  %152 = load i32, i32* %151, align 8
  %153 = and i32 %152, -1025
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [156 x %struct.cmdline_option], [156 x %struct.cmdline_option]* @option_data, i64 0, i64 %154
  %156 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 2
  %157 = load i32, i32* %156, align 4
  switch i32 %157, label %.critedge [
    i32 0, label %158
    i32 1, label %164
    i32 2, label %188
    i32 3, label %192
    i32 6, label %197
    i32 7, label %199
    i32 8, label %254
    i32 4, label %254
    i32 5, label %300
  ]

; <label>:158:                                    ; preds = %147
  %159 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 3
  %160 = load i8*, i8** %159, align 8
  %161 = load i8*, i8** @optarg, align 8
  %162 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8
  call void @setoptval(i8* %160, i8* %161, i8* %163)
  br label %.critedge

; <label>:164:                                    ; preds = %147
  %165 = load i8*, i8** @optarg, align 8
  %166 = icmp ne i8* %165, null
  br i1 %166, label %167, label %173

; <label>:167:                                    ; preds = %164
  %168 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 3
  %169 = load i8*, i8** %168, align 8
  %170 = load i8*, i8** @optarg, align 8
  %171 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %172 = load i8*, i8** %171, align 8
  call void @setoptval(i8* %169, i8* %170, i8* %172)
  br label %.critedge

; <label>:173:                                    ; preds = %164
  %174 = and i32 %152, 1024
  %175 = icmp ne i32 %174, 0
  %176 = xor i1 %175, true
  %177 = xor i1 %176, true
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 3
  %180 = load i8*, i8** %179, align 8
  %181 = trunc i8 %178 to i1
  %182 = zext i1 %181 to i64
  %183 = getelementptr [2 x i8], [2 x i8]* @.str.6.872, i32 0, i32 0
  %184 = getelementptr [2 x i8], [2 x i8]* @.str.7.873, i32 0, i32 0
  %185 = select i1 %181, i8* %183, i8* %184
  %186 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  call void @setoptval(i8* %180, i8* %185, i8* %187)
  br label %.critedge

; <label>:188:                                    ; preds = %147
  %189 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 3
  %190 = load i8*, i8** %189, align 8
  %191 = bitcast i8* %190 to void ()*
  call void %191()
  br label %.critedge

; <label>:192:                                    ; preds = %147
  %193 = load i8*, i8** @optarg, align 8
  %194 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr [8 x i8], [8 x i8]* @.str.8.874, i32 0, i32 0
  call void @setoptval(i8* %196, i8* %193, i8* %195)
  br label %.critedge

; <label>:197:                                    ; preds = %147
  %198 = load i8*, i8** @optarg, align 8
  call void @run_command(i8* %198)
  br label %.critedge

; <label>:199:                                    ; preds = %147
  %200 = load i8*, i8** @optarg, align 8
  call void @unroll_loop(i32 288)
  %201 = icmp ne i8* %200, null
  br i1 %201, label %.lr.ph13, label %.critedge.loopexit

.lr.ph13:                                         ; preds = %199
  br label %202

; <label>:202:                                    ; preds = %.lr.ph13, %251
  %.111 = phi i8* [ %200, %.lr.ph13 ], [ %252, %251 ]
  %203 = load i8, i8* %.111, align 1
  %204 = sext i8 %203 to i32
  %205 = icmp ne i32 %204, 0
  br i1 %205, label %206, label %..critedge.loopexit_crit_edge14

; <label>:206:                                    ; preds = %202
  %207 = load i8, i8* %.111, align 1
  %208 = sext i8 %207 to i32
  switch i32 %208, label %234 [
    i32 118, label %209
    i32 72, label %214
    i32 100, label %219
    i32 99, label %224
    i32 112, label %229
  ]

; <label>:209:                                    ; preds = %206
  %210 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %211 = load i8*, i8** %210, align 8
  %212 = getelementptr [8 x i8], [8 x i8]* @.str.9.875, i32 0, i32 0
  %213 = getelementptr [2 x i8], [2 x i8]* @.str.6.872, i32 0, i32 0
  call void @setoptval(i8* %212, i8* %213, i8* %211)
  br label %251

; <label>:214:                                    ; preds = %206
  %215 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %216 = load i8*, i8** %215, align 8
  %217 = getelementptr [11 x i8], [11 x i8]* @.str.10.876, i32 0, i32 0
  %218 = getelementptr [2 x i8], [2 x i8]* @.str.6.872, i32 0, i32 0
  call void @setoptval(i8* %217, i8* %218, i8* %216)
  br label %251

; <label>:219:                                    ; preds = %206
  %220 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %221 = load i8*, i8** %220, align 8
  %222 = getelementptr [10 x i8], [10 x i8]* @.str.11.877, i32 0, i32 0
  %223 = getelementptr [2 x i8], [2 x i8]* @.str.6.872, i32 0, i32 0
  call void @setoptval(i8* %222, i8* %223, i8* %221)
  br label %251

; <label>:224:                                    ; preds = %206
  %225 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %226 = load i8*, i8** %225, align 8
  %227 = getelementptr [10 x i8], [10 x i8]* @.str.12.878, i32 0, i32 0
  %228 = getelementptr [2 x i8], [2 x i8]* @.str.7.873, i32 0, i32 0
  call void @setoptval(i8* %227, i8* %228, i8* %226)
  br label %251

; <label>:229:                                    ; preds = %206
  %230 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %231 = load i8*, i8** %230, align 8
  %232 = getelementptr [9 x i8], [9 x i8]* @.str.13.879, i32 0, i32 0
  %233 = getelementptr [2 x i8], [2 x i8]* @.str.7.873, i32 0, i32 0
  call void @setoptval(i8* %232, i8* %233, i8* %231)
  br label %251

; <label>:234:                                    ; preds = %206
  %.1.lcssa10 = phi i8* [ %.111, %206 ]
  %235 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %236 = getelementptr [30 x i8], [30 x i8]* @.str.14.880, i32 0, i32 0
  %237 = call i8* @gettext(i8* %236) #8, !track !568
  %238 = load i8*, i8** @exec_name, align 8
  %239 = load i8, i8* %.1.lcssa10, align 1
  %240 = sext i8 %239 to i32
  %241 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %235, i8* %237, i8* %238, i32 %240)
  %242 = call i32 @print_usage(i32 1)
  %243 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %244 = getelementptr [2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0
  %245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %243, i8* %244)
  %246 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %247 = getelementptr [35 x i8], [35 x i8]* @.str.5.871, i32 0, i32 0
  %248 = call i8* @gettext(i8* %247) #8, !track !569
  %249 = load i8*, i8** @exec_name, align 8
  %250 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %246, i8* %248, i8* %249)
  call void @exit(i32 1) #16
  unreachable

; <label>:251:                                    ; preds = %209, %214, %219, %224, %229
  %252 = getelementptr inbounds i8, i8* %.111, i32 1
  call void @unroll_loop(i32 288)
  %253 = icmp ne i8* %252, null
  br i1 %253, label %202, label %..critedge.loopexit_crit_edge

; <label>:254:                                    ; preds = %147, %147
  %255 = load i8*, i8** @optarg, align 8
  %256 = icmp ne i8* %255, null
  br i1 %256, label %257, label %285

; <label>:257:                                    ; preds = %254
  %258 = load i8*, i8** @optarg, align 8
  %259 = load i8, i8* %258, align 1
  %260 = sext i8 %259 to i32
  %261 = icmp eq i32 %260, 49
  br i1 %261, label %282, label %262

; <label>:262:                                    ; preds = %257
  %263 = load i8*, i8** @optarg, align 8
  %264 = load i8, i8* %263, align 1
  %265 = sext i8 %264 to i32
  %266 = call i32 @c_tolower(i32 %265)
  %267 = icmp eq i32 %266, 121
  br i1 %267, label %282, label %268

; <label>:268:                                    ; preds = %262
  %269 = load i8*, i8** @optarg, align 8
  %270 = getelementptr inbounds i8, i8* %269, i64 0
  %271 = load i8, i8* %270, align 1
  %272 = sext i8 %271 to i32
  %273 = call i32 @c_tolower(i32 %272)
  %274 = icmp eq i32 %273, 111
  br i1 %274, label %275, label %282

; <label>:275:                                    ; preds = %268
  %276 = load i8*, i8** @optarg, align 8
  %277 = getelementptr inbounds i8, i8* %276, i64 1
  %278 = load i8, i8* %277, align 1
  %279 = sext i8 %278 to i32
  %280 = call i32 @c_tolower(i32 %279)
  %281 = icmp eq i32 %280, 110
  br label %282

; <label>:282:                                    ; preds = %268, %275, %262, %257
  %283 = phi i1 [ true, %262 ], [ true, %257 ], [ false, %268 ], [ %281, %275 ]
  %284 = zext i1 %283 to i8
  br label %285

; <label>:285:                                    ; preds = %282, %254
  %.0 = phi i8 [ %284, %282 ], [ 1, %254 ]
  %286 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 2
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %287, 8
  %289 = zext i1 %288 to i64
  %290 = getelementptr [9 x i8], [9 x i8]* @.str.13.879, i32 0, i32 0
  %291 = getelementptr [10 x i8], [10 x i8]* @.str.12.878, i32 0, i32 0
  %292 = select i1 %288, i8* %290, i8* %291
  %293 = trunc i8 %.0 to i1
  %294 = zext i1 %293 to i64
  %295 = getelementptr [2 x i8], [2 x i8]* @.str.6.872, i32 0, i32 0
  %296 = getelementptr [2 x i8], [2 x i8]* @.str.7.873, i32 0, i32 0
  %297 = select i1 %293, i8* %295, i8* %296
  %298 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %299 = load i8*, i8** %298, align 8
  call void @setoptval(i8* %292, i8* %297, i8* %299)
  br label %.critedge

; <label>:300:                                    ; preds = %147
  %301 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %155, i32 0, i32 0
  %302 = load i8*, i8** %301, align 8
  %303 = getelementptr [14 x i8], [14 x i8]* @.str.15.881, i32 0, i32 0
  %304 = getelementptr [2 x i8], [2 x i8]* @.str.6.872, i32 0, i32 0
  call void @setoptval(i8* %303, i8* %304, i8* %302)
  br label %.critedge

..critedge.loopexit_crit_edge:                    ; preds = %251
  br label %.critedge.loopexit

..critedge.loopexit_crit_edge14:                  ; preds = %202
  br label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %..critedge.loopexit_crit_edge14, %..critedge.loopexit_crit_edge, %199
  %.16.ph = phi i8 [ %.0521, %..critedge.loopexit_crit_edge14 ], [ %.0521, %..critedge.loopexit_crit_edge ], [ %.0521, %199 ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %167, %173, %147, %300, %285, %197, %192, %188, %158
  %.16 = phi i8 [ %.0521, %147 ], [ %.0521, %300 ], [ %.0521, %285 ], [ %.0521, %197 ], [ 1, %192 ], [ %.0521, %188 ], [ %.0521, %158 ], [ %.0521, %173 ], [ %.0521, %167 ], [ %.16.ph, %.critedge.loopexit ]
  store i32 -1, i32* %21, align 4
  %305 = getelementptr [128 x i8], [128 x i8]* @short_options, i32 0, i32 0
  %306 = getelementptr [313 x %struct.option], [313 x %struct.option]* @long_options, i32 0, i32 0
  %307 = call i32 @getopt_long(i32 3, i8** %19, i8* %305, %struct.option* %306, i32* %21) #8, !track_argc !562
  %308 = icmp ne i32 %307, -1
  br i1 %308, label %.lr.ph23, label %._crit_edge24.loopexit

._crit_edge24.loopexit:                           ; preds = %.critedge
  %.05.lcssa.ph = phi i8 [ %.16, %.critedge ]
  br label %._crit_edge24

._crit_edge24:                                    ; preds = %._crit_edge24.loopexit, %121
  %.05.lcssa = phi i8 [ 0, %121 ], [ %.05.lcssa.ph, %._crit_edge24.loopexit ]
  %309 = load i32, i32* @optind, align 4
  %310 = sub nsw i32 3, %309, !track_argc !562
  %311 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %312 = load i8, i8* %311, align 2
  %313 = trunc i8 %312 to i1
  br i1 %313, label %314, label %337

; <label>:314:                                    ; preds = %._crit_edge24
  %315 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 101
  %316 = load i8, i8* %315, align 8
  %317 = trunc i8 %316 to i1
  br i1 %317, label %322, label %318

; <label>:318:                                    ; preds = %314
  %319 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 102
  %320 = load i8, i8* %319, align 1
  %321 = trunc i8 %320 to i1
  br i1 %321, label %322, label %337

; <label>:322:                                    ; preds = %318, %314
  %323 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %324 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 101
  %325 = load i8, i8* %324, align 8
  %326 = trunc i8 %325 to i1
  br i1 %326, label %327, label %330

; <label>:327:                                    ; preds = %322
  %328 = getelementptr [90 x i8], [90 x i8]* @.str.16.882, i32 0, i32 0
  %329 = call i8* @gettext(i8* %328) #8
  br label %333

; <label>:330:                                    ; preds = %322
  %331 = getelementptr [98 x i8], [98 x i8]* @.str.17.883, i32 0, i32 0
  %332 = call i8* @gettext(i8* %331) #8
  br label %333

; <label>:333:                                    ; preds = %330, %327
  %334 = phi i8* [ %329, %327 ], [ %332, %330 ]
  %335 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %323, i8* %334)
  %336 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  store i8 0, i8* %336, align 2
  br label %337

; <label>:337:                                    ; preds = %333, %318, %._crit_edge24
  %338 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %339 = load i32, i32* %338, align 4
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %343

; <label>:341:                                    ; preds = %337
  %342 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  store i32 -1, i32* %342, align 4
  br label %343

; <label>:343:                                    ; preds = %341, %337
  %344 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %345 = load i8, i8* %344, align 8
  %346 = trunc i8 %345 to i1
  br i1 %346, label %351, label %347

; <label>:347:                                    ; preds = %343
  %348 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %349 = load i8, i8* %348, align 8
  %350 = trunc i8 %349 to i1
  br i1 %350, label %351, label %353

; <label>:351:                                    ; preds = %347, %343
  %352 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  store i8 1, i8* %352, align 1
  br label %353

; <label>:353:                                    ; preds = %351, %347
  %354 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %355 = load i8, i8* %354, align 2
  %356 = trunc i8 %355 to i1
  br i1 %356, label %357, label %368

; <label>:357:                                    ; preds = %353
  %358 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %359 = load i8, i8* %358, align 1
  %360 = trunc i8 %359 to i1
  br i1 %360, label %368, label %361

; <label>:361:                                    ; preds = %357
  %362 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  store i32 0, i32* %362, align 4
  %363 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %364 = load i8, i8* %363, align 1
  %365 = trunc i8 %364 to i1
  br i1 %365, label %368, label %366

; <label>:366:                                    ; preds = %361
  %367 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  store i8 1, i8* %367, align 8
  br label %368

; <label>:368:                                    ; preds = %361, %366, %357, %353
  %369 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %370 = load i32, i32* %369, align 8
  %371 = icmp eq i32 %370, -1
  br i1 %371, label %372, label %379

; <label>:372:                                    ; preds = %368
  %373 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %374 = load i8, i8* %373, align 4
  %375 = trunc i8 %374 to i1
  %376 = xor i1 %375, true
  %377 = zext i1 %376 to i32
  %378 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  store i32 %377, i32* %378, align 8
  br label %379

; <label>:379:                                    ; preds = %372, %368
  %380 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %381 = load i32, i32* %380, align 8
  %382 = icmp ne i32 %381, 0
  br i1 %382, label %389, label %383

; <label>:383:                                    ; preds = %379
  %384 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %385 = load i32, i32* %384, align 8
  %386 = icmp eq i32 %385, -1
  br i1 %386, label %387, label %389

; <label>:387:                                    ; preds = %383
  %388 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  store i32 0, i32* %388, align 8
  br label %389

; <label>:389:                                    ; preds = %387, %383, %379
  %390 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %391 = load i8, i8* %390, align 4
  %392 = trunc i8 %391 to i1
  br i1 %392, label %393, label %399

; <label>:393:                                    ; preds = %389
  %394 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %395 = load i32, i32* %394, align 8
  %396 = icmp eq i32 %395, -1
  br i1 %396, label %397, label %399

; <label>:397:                                    ; preds = %393
  %398 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  store i32 0, i32* %398, align 8
  br label %399

; <label>:399:                                    ; preds = %397, %393, %389
  %400 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %401 = load i32, i32* %400, align 8
  %402 = icmp ne i32 %401, 0
  br i1 %402, label %403, label %413

; <label>:403:                                    ; preds = %399
  %404 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %405 = load i8, i8* %404, align 4
  %406 = trunc i8 %405 to i1
  br i1 %406, label %407, label %413

; <label>:407:                                    ; preds = %403
  %408 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %409 = getelementptr [46 x i8], [46 x i8]* @.str.18.884, i32 0, i32 0
  %410 = call i8* @gettext(i8* %409) #8, !track !570
  %411 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %408, i8* %410)
  %412 = call i32 @print_usage(i32 1)
  call void @exit(i32 1) #16
  unreachable

; <label>:413:                                    ; preds = %403, %399
  %414 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %415 = load i8, i8* %414, align 4
  %416 = trunc i8 %415 to i1
  br i1 %416, label %417, label %427

; <label>:417:                                    ; preds = %413
  %418 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %419 = load i8, i8* %418, align 2
  %420 = trunc i8 %419 to i1
  br i1 %420, label %421, label %427

; <label>:421:                                    ; preds = %417
  %422 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %423 = getelementptr [61 x i8], [61 x i8]* @.str.19.885, i32 0, i32 0
  %424 = call i8* @gettext(i8* %423) #8, !track !571
  %425 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %422, i8* %424)
  %426 = call i32 @print_usage(i32 1)
  call void @exit(i32 1) #16
  unreachable

; <label>:427:                                    ; preds = %417, %413
  %428 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 144
  %429 = load i8, i8* %428, align 2
  %430 = trunc i8 %429 to i1
  br i1 %430, label %431, label %441

; <label>:431:                                    ; preds = %427
  %432 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 145
  %433 = load i8, i8* %432, align 1
  %434 = trunc i8 %433 to i1
  br i1 %434, label %435, label %441

; <label>:435:                                    ; preds = %431
  %436 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %437 = getelementptr [52 x i8], [52 x i8]* @.str.20.886, i32 0, i32 0
  %438 = call i8* @gettext(i8* %437) #8, !track !572
  %439 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %436, i8* %438)
  %440 = call i32 @print_usage(i32 1)
  call void @exit(i32 1) #16
  unreachable

; <label>:441:                                    ; preds = %431, %427
  %442 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %443 = load i8*, i8** %442, align 8
  %444 = icmp ne i8* %443, null
  br i1 %444, label %445, label %503

; <label>:445:                                    ; preds = %441
  %446 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 101
  %447 = load i8, i8* %446, align 8
  %448 = trunc i8 %447 to i1
  br i1 %448, label %453, label %449

; <label>:449:                                    ; preds = %445
  %450 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 102
  %451 = load i8, i8* %450, align 1
  %452 = trunc i8 %451 to i1
  br i1 %452, label %453, label %469

; <label>:453:                                    ; preds = %449, %445
  %454 = icmp sgt i32 %310, 1
  br i1 %454, label %463, label %455

; <label>:455:                                    ; preds = %453
  %456 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %457 = load i8, i8* %456, align 2
  %458 = trunc i8 %457 to i1
  br i1 %458, label %463, label %459

; <label>:459:                                    ; preds = %455
  %460 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %461 = load i8, i8* %460, align 1
  %462 = trunc i8 %461 to i1
  br i1 %462, label %463, label %469

; <label>:463:                                    ; preds = %459, %455, %453
  %464 = getelementptr [144 x i8], [144 x i8]* @.str.21.887, i32 0, i32 0
  %465 = call i8* @gettext(i8* %464) #8, !track !573
  %466 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %467 = call i32 @fputs(i8* %465, %struct._IO_FILE* %466)
  %468 = call i32 @print_usage(i32 1)
  call void @exit(i32 1) #16
  unreachable

; <label>:469:                                    ; preds = %459, %449
  %470 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %471 = load i8, i8* %470, align 2
  %472 = trunc i8 %471 to i1
  br i1 %472, label %477, label %473

; <label>:473:                                    ; preds = %469
  %474 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %475 = load i8, i8* %474, align 1
  %476 = trunc i8 %475 to i1
  br i1 %476, label %477, label %481

; <label>:477:                                    ; preds = %473, %469
  %478 = getelementptr [125 x i8], [125 x i8]* @.str.23.888, i32 0, i32 0
  %479 = call i8* @gettext(i8* %478) #8
  %480 = getelementptr [3 x i8], [3 x i8]* @.str.22.889, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %480, i8* %479)
  br label %481

; <label>:481:                                    ; preds = %477, %473
  %482 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %483 = load i8, i8* %482, align 4
  %484 = trunc i8 %483 to i1
  br i1 %484, label %485, label %490

; <label>:485:                                    ; preds = %481
  %486 = getelementptr [89 x i8], [89 x i8]* @.str.24.890, i32 0, i32 0
  %487 = call i8* @gettext(i8* %486) #8
  %488 = getelementptr [3 x i8], [3 x i8]* @.str.22.889, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %488, i8* %487)
  %489 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  store i8 0, i8* %489, align 4
  br label %490

; <label>:490:                                    ; preds = %485, %481
  %491 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %492 = load i8, i8* %491, align 2
  %493 = trunc i8 %492 to i1
  br i1 %493, label %494, label %503

; <label>:494:                                    ; preds = %490
  %495 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %496 = load i8*, i8** %495, align 8
  %497 = call zeroext i1 @file_exists_p(i8* %496)
  br i1 %497, label %498, label %503

; <label>:498:                                    ; preds = %494
  %499 = getelementptr [42 x i8], [42 x i8]* @.str.25.891, i32 0, i32 0
  %500 = call i8* @gettext(i8* %499) #8
  %501 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %502 = load i8*, i8** %501, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %500, i8* %502)
  call void @exit(i32 1) #16
  unreachable

; <label>:503:                                    ; preds = %490, %494, %441
  %504 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %505 = load i8*, i8** %504, align 8
  %506 = icmp ne i8* %505, null
  br i1 %506, label %507, label %572

; <label>:507:                                    ; preds = %503
  %508 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %509 = load i8, i8* %508, align 2
  %510 = trunc i8 %509 to i1
  br i1 %510, label %511, label %517

; <label>:511:                                    ; preds = %507
  %512 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %513 = getelementptr [77 x i8], [77 x i8]* @.str.26.892, i32 0, i32 0
  %514 = call i8* @gettext(i8* %513) #8, !track !574
  %515 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %512, i8* %514)
  %516 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  store i8 0, i8* %516, align 2
  br label %517

; <label>:517:                                    ; preds = %511, %507
  %518 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %519 = load i8, i8* %518, align 4
  %520 = trunc i8 %519 to i1
  br i1 %520, label %521, label %527

; <label>:521:                                    ; preds = %517
  %522 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %523 = getelementptr [77 x i8], [77 x i8]* @.str.27.893, i32 0, i32 0
  %524 = call i8* @gettext(i8* %523) #8, !track !575
  %525 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %522, i8* %524)
  %526 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  store i8 0, i8* %526, align 4
  br label %527

; <label>:527:                                    ; preds = %521, %517
  %528 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %529 = load i8, i8* %528, align 8
  %530 = trunc i8 %529 to i1
  br i1 %530, label %531, label %536

; <label>:531:                                    ; preds = %527
  %532 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %533 = getelementptr [42 x i8], [42 x i8]* @.str.28.894, i32 0, i32 0
  %534 = call i8* @gettext(i8* %533) #8, !track !576
  %535 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %532, i8* %534)
  call void @exit(i32 1) #16
  unreachable

; <label>:536:                                    ; preds = %527
  %537 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %538 = load i8, i8* %537, align 1
  %539 = trunc i8 %538 to i1
  br i1 %539, label %544, label %540

; <label>:540:                                    ; preds = %536
  %541 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  %542 = load i64, i64* %541, align 8
  %543 = icmp sge i64 %542, 0
  br i1 %543, label %544, label %551

; <label>:544:                                    ; preds = %540, %536
  %545 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %546 = getelementptr [82 x i8], [82 x i8]* @.str.29.895, i32 0, i32 0
  %547 = call i8* @gettext(i8* %546) #8, !track !577
  %548 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %545, i8* %547)
  %549 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  store i8 0, i8* %549, align 1
  %550 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  store i64 -1, i64* %550, align 8
  br label %551

; <label>:551:                                    ; preds = %544, %540
  %552 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 49
  %553 = load i8*, i8** %552, align 8
  %554 = icmp ne i8* %553, null
  br i1 %554, label %555, label %564

; <label>:555:                                    ; preds = %551
  %556 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 52
  %557 = load i8, i8* %556, align 1
  %558 = trunc i8 %557 to i1
  br i1 %558, label %564, label %559

; <label>:559:                                    ; preds = %555
  %560 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %561 = getelementptr [75 x i8], [75 x i8]* @.str.30.896, i32 0, i32 0
  %562 = call i8* @gettext(i8* %561) #8, !track !578
  %563 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %560, i8* %562)
  br label %564

; <label>:564:                                    ; preds = %559, %555, %551
  %565 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 54
  %566 = load i8, i8* %565, align 1
  %567 = trunc i8 %566 to i1
  br i1 %567, label %568, label %572

; <label>:568:                                    ; preds = %564
  %569 = getelementptr [4 x i8], [4 x i8]* @.str.31.897, i32 0, i32 0
  %570 = call noalias i8* @xstrdup(i8* %569)
  %571 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 77
  store i8* %570, i8** %571, align 8
  br label %572

; <label>:572:                                    ; preds = %564, %568, %503
  %573 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 58
  %574 = load i8, i8* %573, align 8
  %575 = trunc i8 %574 to i1
  br i1 %575, label %576, label %586

; <label>:576:                                    ; preds = %572
  %577 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 57
  %578 = load i8*, i8** %577, align 8
  %579 = icmp ne i8* %578, null
  br i1 %579, label %580, label %586

; <label>:580:                                    ; preds = %576
  %581 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %582 = getelementptr [52 x i8], [52 x i8]* @.str.32.898, i32 0, i32 0
  %583 = call i8* @gettext(i8* %582) #8, !track !579
  %584 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %581, i8* %583)
  %585 = call i32 @print_usage(i32 1)
  call void @exit(i32 1) #16
  unreachable

; <label>:586:                                    ; preds = %576, %572
  %587 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 60
  %588 = load i64, i64* %587, align 8
  %589 = icmp sge i64 %588, 0
  br i1 %589, label %590, label %600

; <label>:590:                                    ; preds = %586
  %591 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %592 = load i8, i8* %591, align 1
  %593 = trunc i8 %592 to i1
  br i1 %593, label %594, label %600

; <label>:594:                                    ; preds = %590
  %595 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %596 = getelementptr [93 x i8], [93 x i8]* @.str.33.899, i32 0, i32 0
  %597 = call i8* @gettext(i8* %596) #8, !track !580
  %598 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %595, i8* %597)
  %599 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  store i8 0, i8* %599, align 1
  br label %600

; <label>:600:                                    ; preds = %594, %590, %586
  %601 = icmp ne i32 %310, 0
  br i1 %601, label %621, label %602

; <label>:602:                                    ; preds = %600
  %603 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %604 = load i8*, i8** %603, align 8
  %605 = icmp ne i8* %604, null
  br i1 %605, label %621, label %606

; <label>:606:                                    ; preds = %602
  %607 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %608 = getelementptr [17 x i8], [17 x i8]* @.str.34.900, i32 0, i32 0
  %609 = call i8* @gettext(i8* %608) #8, !track !581
  %610 = load i8*, i8** @exec_name, align 8
  %611 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %607, i8* %609, i8* %610)
  %612 = call i32 @print_usage(i32 1)
  %613 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %614 = getelementptr [2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0
  %615 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %613, i8* %614)
  %616 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %617 = getelementptr [35 x i8], [35 x i8]* @.str.5.871, i32 0, i32 0
  %618 = call i8* @gettext(i8* %617) #8, !track !582
  %619 = load i8*, i8** @exec_name, align 8
  %620 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %616, i8* %618, i8* %619)
  call void @exit(i32 1) #16
  unreachable

; <label>:621:                                    ; preds = %602, %600
  %622 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 36
  %623 = load i32, i32* %622, align 8
  %cond = icmp eq i32 %623, 0
  %624 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 37
  br i1 %cond, label %625, label %627

; <label>:625:                                    ; preds = %621
  store i8* (i8*)* @compile_pcre_regex, i8* (i8*)** %624, align 8
  %626 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  store i1 (i8*, i8*)* @match_pcre_regex, i1 (i8*, i8*)** %626, align 8
  br label %629

; <label>:627:                                    ; preds = %621
  store i8* (i8*)* @compile_posix_regex, i8* (i8*)** %624, align 8
  %628 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  store i1 (i8*, i8*)* @match_posix_regex, i1 (i8*, i8*)** %628, align 8
  br label %629

; <label>:629:                                    ; preds = %627, %625
  %630 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  %631 = load i8*, i8** %630, align 8
  %632 = icmp ne i8* %631, null
  br i1 %632, label %633, label %644

; <label>:633:                                    ; preds = %629
  %634 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 37
  %635 = load i8* (i8*)*, i8* (i8*)** %634, align 8
  %636 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  %637 = load i8*, i8** %636, align 8
  %638 = call i8* %635(i8* %637)
  %639 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  store i8* %638, i8** %639, align 8
  %640 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %641 = load i8*, i8** %640, align 8
  %642 = icmp ne i8* %641, null
  br i1 %642, label %644, label %643

; <label>:643:                                    ; preds = %633
  call void @exit(i32 1) #16
  unreachable

; <label>:644:                                    ; preds = %633, %629
  %645 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %646 = load i8*, i8** %645, align 8
  %647 = icmp ne i8* %646, null
  br i1 %647, label %648, label %659

; <label>:648:                                    ; preds = %644
  %649 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 37
  %650 = load i8* (i8*)*, i8* (i8*)** %649, align 8
  %651 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %652 = load i8*, i8** %651, align 8
  %653 = call i8* %650(i8* %652)
  %654 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  store i8* %653, i8** %654, align 8
  %655 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  %656 = load i8*, i8** %655, align 8
  %657 = icmp ne i8* %656, null
  br i1 %657, label %659, label %658

; <label>:658:                                    ; preds = %648
  call void @exit(i32 1) #16
  unreachable

; <label>:659:                                    ; preds = %648, %644
  %660 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 133
  %661 = load i8*, i8** %660, align 8
  %662 = icmp ne i8* %661, null
  br i1 %662, label %667, label %663

; <label>:663:                                    ; preds = %659
  %664 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 134
  %665 = load i8*, i8** %664, align 8
  %666 = icmp ne i8* %665, null
  br i1 %666, label %667, label %689

; <label>:667:                                    ; preds = %663, %659
  %668 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 133
  %669 = load i8*, i8** %668, align 8
  %670 = icmp ne i8* %669, null
  br i1 %670, label %671, label %680

; <label>:671:                                    ; preds = %667
  %672 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 134
  %673 = load i8*, i8** %672, align 8
  %674 = icmp ne i8* %673, null
  br i1 %674, label %675, label %680

; <label>:675:                                    ; preds = %671
  %676 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %677 = getelementptr [54 x i8], [54 x i8]* @.str.35.901, i32 0, i32 0
  %678 = call i8* @gettext(i8* %677) #8, !track !583
  %679 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %676, i8* %678)
  call void @exit(i32 1) #16
  unreachable

; <label>:680:                                    ; preds = %671, %667
  %681 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %682 = load i8*, i8** %681, align 8
  %683 = icmp ne i8* %682, null
  br i1 %683, label %684, label %689

; <label>:684:                                    ; preds = %680
  %685 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %686 = getelementptr [129 x i8], [129 x i8]* @.str.36.902, i32 0, i32 0
  %687 = call i8* @gettext(i8* %686) #8, !track !584
  %688 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %685, i8* %687)
  call void @exit(i32 1) #16
  unreachable

; <label>:689:                                    ; preds = %680, %663
  %690 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %691 = load i8*, i8** %690, align 8
  %692 = icmp ne i8* %691, null
  br i1 %692, label %697, label %693

; <label>:693:                                    ; preds = %689
  %694 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %695 = load i8*, i8** %694, align 8
  %696 = icmp ne i8* %695, null
  br i1 %696, label %697, label %719

; <label>:697:                                    ; preds = %693, %689
  %698 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %699 = load i8*, i8** %698, align 8
  %700 = icmp ne i8* %699, null
  br i1 %700, label %706, label %701

; <label>:701:                                    ; preds = %697
  %702 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %703 = getelementptr [95 x i8], [95 x i8]* @.str.37.903, i32 0, i32 0
  %704 = call i8* @gettext(i8* %703) #8, !track !585
  %705 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %702, i8* %704)
  call void @exit(i32 1) #16
  unreachable

; <label>:706:                                    ; preds = %697
  %707 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %708 = load i8*, i8** %707, align 8
  %709 = icmp ne i8* %708, null
  br i1 %709, label %710, label %719

; <label>:710:                                    ; preds = %706
  %711 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %712 = load i8*, i8** %711, align 8
  %713 = icmp ne i8* %712, null
  br i1 %713, label %714, label %719

; <label>:714:                                    ; preds = %710
  %715 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %716 = getelementptr [54 x i8], [54 x i8]* @.str.38.904, i32 0, i32 0
  %717 = call i8* @gettext(i8* %716) #8, !track !586
  %718 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %715, i8* %717)
  call void @exit(i32 1) #16
  unreachable

; <label>:719:                                    ; preds = %710, %706, %693
  %720 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %721 = load i8*, i8** %720, align 8
  %722 = icmp ne i8* %721, null
  br i1 %722, label %723, label %732

; <label>:723:                                    ; preds = %719
  %724 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %725 = load i8*, i8** %724, align 8
  %726 = getelementptr [5 x i8], [5 x i8]* @.str.39.905, i32 0, i32 0
  %727 = call i32 @c_strcasecmp(i8* %725, i8* %726) #14
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %729, label %732

; <label>:729:                                    ; preds = %723
  %730 = getelementptr [7 x i8], [7 x i8]* @.str.40.906, i32 0, i32 0
  %731 = getelementptr [2 x i8], [2 x i8]* @.str.7.873, i32 0, i32 0
  call void @setoptval(i8* %730, i8* %731, i8* %730)
  br label %732

; <label>:732:                                    ; preds = %729, %723, %719
  %733 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 133
  %734 = load i8*, i8** %733, align 8
  %735 = icmp ne i8* %734, null
  br i1 %735, label %740, label %736

; <label>:736:                                    ; preds = %732
  %737 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 134
  %738 = load i8*, i8** %737, align 8
  %739 = icmp ne i8* %738, null
  br i1 %739, label %740, label %762

; <label>:740:                                    ; preds = %736, %732
  %741 = getelementptr [7 x i8], [7 x i8]* @.str.41.907, i32 0, i32 0
  %742 = getelementptr [5 x i8], [5 x i8]* @.str.42.908, i32 0, i32 0
  call void @setoptval(i8* %741, i8* %742, i8* %741)
  %743 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 133
  %744 = load i8*, i8** %743, align 8
  %745 = icmp ne i8* %744, null
  br i1 %745, label %746, label %754

; <label>:746:                                    ; preds = %740
  %747 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 133
  %748 = load i8*, i8** %747, align 8
  %749 = getelementptr [9 x i8], [9 x i8]* @.str.43.909, i32 0, i32 0
  %750 = getelementptr [10 x i8], [10 x i8]* @.str.44.910, i32 0, i32 0
  call void @setoptval(i8* %749, i8* %748, i8* %750)
  %751 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 133
  %752 = load i8*, i8** %751, align 8
  call void @free(i8* %752) #8
  %753 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 133
  store i8* null, i8** %753, align 8
  br label %762

; <label>:754:                                    ; preds = %740
  %755 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 134
  %756 = load i8*, i8** %755, align 8
  %757 = getelementptr [9 x i8], [9 x i8]* @.str.45.911, i32 0, i32 0
  %758 = getelementptr [10 x i8], [10 x i8]* @.str.46.912, i32 0, i32 0
  call void @setoptval(i8* %757, i8* %756, i8* %758)
  %759 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 134
  %760 = load i8*, i8** %759, align 8
  call void @free(i8* %760) #8
  %761 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 134
  store i8* null, i8** %761, align 8
  br label %762

; <label>:762:                                    ; preds = %746, %754, %736
  %763 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %764 = load i8, i8* %763, align 2
  %765 = trunc i8 %764 to i1
  br i1 %765, label %766, label %793

; <label>:766:                                    ; preds = %762
  %767 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %768 = load i8*, i8** %767, align 8
  %769 = icmp ne i8* %768, null
  br i1 %769, label %770, label %776

; <label>:770:                                    ; preds = %766
  %771 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %772 = load i8*, i8** %771, align 8
  %773 = call zeroext i1 @check_encoding_name(i8* %772)
  br i1 %773, label %776, label %774

; <label>:774:                                    ; preds = %770
  %775 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  store i8* null, i8** %775, align 8
  br label %776

; <label>:776:                                    ; preds = %774, %770, %766
  %777 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %778 = load i8*, i8** %777, align 8
  %779 = icmp ne i8* %778, null
  br i1 %779, label %783, label %780

; <label>:780:                                    ; preds = %776
  %781 = call i8* @find_locale()
  %782 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  store i8* %781, i8** %782, align 8
  br label %783

; <label>:783:                                    ; preds = %780, %776
  %784 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  %785 = load i8*, i8** %784, align 8
  %786 = icmp ne i8* %785, null
  br i1 %786, label %787, label %793

; <label>:787:                                    ; preds = %783
  %788 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  %789 = load i8*, i8** %788, align 8
  %790 = call zeroext i1 @check_encoding_name(i8* %789)
  br i1 %790, label %793, label %791

; <label>:791:                                    ; preds = %787
  %792 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  store i8* null, i8** %792, align 8
  br label %793

; <label>:793:                                    ; preds = %783, %787, %791, %762
  %794 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 58
  %795 = load i8, i8* %794, align 8
  %796 = trunc i8 %795 to i1
  br i1 %796, label %797, label %811

; <label>:797:                                    ; preds = %793
  %798 = call i8* @prompt_for_password()
  %799 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 57
  store i8* %798, i8** %799, align 8
  %800 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 57
  %801 = load i8*, i8** %800, align 8
  %802 = icmp eq i8* %801, null
  br i1 %802, label %810, label %803

; <label>:803:                                    ; preds = %797
  %804 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 57
  %805 = load i8*, i8** %804, align 8
  %806 = getelementptr inbounds i8, i8* %805, i64 0
  %807 = load i8, i8* %806, align 1
  %808 = sext i8 %807 to i32
  %809 = icmp eq i32 %808, 0
  br i1 %809, label %810, label %811

; <label>:810:                                    ; preds = %803, %797
  call void @exit(i32 1) #16
  unreachable

; <label>:811:                                    ; preds = %803, %793
  %812 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4
  %813 = load i8, i8* %812, align 1
  %814 = trunc i8 %813 to i1
  br i1 %814, label %815, label %816

; <label>:815:                                    ; preds = %811
  call void @fork_to_background()
  br label %816

; <label>:816:                                    ; preds = %815, %811
  %817 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %818 = load i32, i32* %817, align 8
  %819 = icmp ne i32 %818, 0
  br i1 %819, label %820, label %823

; <label>:820:                                    ; preds = %816
  %821 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 77
  %822 = load i8*, i8** %821, align 8
  call void @set_progress_implementation(i8* %822)
  br label %823

; <label>:823:                                    ; preds = %820, %816
  %824 = add nsw i32 %310, 1
  %825 = sext i32 %824 to i64
  %826 = mul i64 %825, 8
  %827 = alloca i8, i64 %826, align 16, !track !587
  %828 = bitcast i8* %827 to i8**
  %829 = icmp eq i8** %828, null
  br i1 %829, label %830, label %835

; <label>:830:                                    ; preds = %823
  %831 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %832 = getelementptr [27 x i8], [27 x i8]* @.str.866, i32 0, i32 0
  %833 = call i8* @gettext(i8* %832) #8, !track !588
  %834 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %831, i8* %833)
  call void @exit(i32 2) #16
  unreachable

; <label>:835:                                    ; preds = %823
  %836 = icmp slt i32 0, %310
  br i1 %836, label %.lr.ph19, label %863

.lr.ph19:                                         ; preds = %835
  %837 = add i32 3, -1, !track_argc !562
  %838 = sub i32 %837, %309
  %839 = sub i32 3, %309, !track_argc !562
  %840 = zext i32 %839 to i64
  br label %841

; <label>:841:                                    ; preds = %.lr.ph19, %857
  %indvars.iv = phi i64 [ 0, %.lr.ph19 ], [ %indvars.iv.next, %857 ]
  call void @unroll_loop(i32 289)
  %842 = load i32, i32* @optind, align 4
  %843 = sext i32 %842 to i64
  %844 = getelementptr inbounds i8*, i8** %19, i64 %843
  %845 = load i8*, i8** %844, align 8
  %846 = call i8* @rewrite_shorthand_url(i8* %845)
  %847 = icmp ne i8* %846, null
  br i1 %847, label %848, label %850

; <label>:848:                                    ; preds = %841
  %849 = getelementptr inbounds i8*, i8** %828, i64 %indvars.iv
  store i8* %846, i8** %849, align 8
  br label %857

; <label>:850:                                    ; preds = %841
  %851 = load i32, i32* @optind, align 4
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds i8*, i8** %19, i64 %852
  %854 = load i8*, i8** %853, align 8
  %855 = call noalias i8* @xstrdup(i8* %854)
  %856 = getelementptr inbounds i8*, i8** %828, i64 %indvars.iv
  store i8* %855, i8** %856, align 8
  br label %857

; <label>:857:                                    ; preds = %848, %850
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %858 = load i32, i32* @optind, align 4
  %859 = add nsw i32 %858, 1
  store i32 %859, i32* @optind, align 4
  %exitcond10 = icmp ne i64 %indvars.iv.next, %840
  br i1 %exitcond10, label %841, label %._crit_edge20

._crit_edge20:                                    ; preds = %857
  %860 = zext i32 %838 to i64
  %861 = add i64 %860, 1
  %862 = trunc i64 %861 to i32
  br label %863

; <label>:863:                                    ; preds = %._crit_edge20, %835
  %.2.lcssa = phi i32 [ %862, %._crit_edge20 ], [ 0, %835 ]
  %864 = sext i32 %.2.lcssa to i64
  %865 = getelementptr inbounds i8*, i8** %828, i64 %864
  store i8* null, i8** %865, align 8
  %866 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %867 = load i8*, i8** %866, align 8
  %868 = trunc i8 %.05.lcssa to i1
  call void @log_init(i8* %867, i1 zeroext %868)
  %869 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %870 = load i8*, i8** %869, align 8
  %871 = icmp ne i8* %870, null
  br i1 %871, label %872, label %873

; <label>:872:                                    ; preds = %863
  call void @warc_init()
  br label %873

; <label>:873:                                    ; preds = %863, %872
  %874 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %875 = load i8, i8* %874, align 1
  %876 = trunc i8 %875 to i1
  br i1 %876, label %877, label %881

; <label>:877:                                    ; preds = %873
  %878 = load i8*, i8** @version_string, align 8
  %879 = getelementptr [41 x i8], [41 x i8]* @.str.47.913, i32 0, i32 0
  %880 = getelementptr [10 x i8], [10 x i8]* @.str.48.914, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %879, i8* %878, i8* %880)
  br label %881

; <label>:881:                                    ; preds = %873, %877
  %882 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %883 = load i8*, i8** %882, align 8
  %884 = icmp ne i8* %883, null
  br i1 %884, label %885, label %958

; <label>:885:                                    ; preds = %881
  %886 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %887 = load i8*, i8** %886, align 8
  %888 = load i8, i8* %887, align 1
  %889 = sext i8 %888 to i32
  %890 = icmp eq i32 %889, 45
  br i1 %890, label %891, label %899

; <label>:891:                                    ; preds = %885
  %892 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %893 = load i8*, i8** %892, align 8
  %894 = getelementptr inbounds i8, i8* %893, i64 1
  %895 = load i8, i8* %894, align 1
  %896 = icmp ne i8 %895, 0
  br i1 %896, label %899, label %897

; <label>:897:                                    ; preds = %891
  %898 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %898, %struct._IO_FILE** @output_stream, align 8
  br label %926

; <label>:899:                                    ; preds = %891, %885
  %900 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %901 = load i8*, i8** %900, align 8
  %902 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %903 = load i8, i8* %902, align 1
  %904 = trunc i8 %903 to i1
  %905 = zext i1 %904 to i64
  %906 = getelementptr [3 x i8], [3 x i8]* @.str.49.915, i32 0, i32 0
  %907 = getelementptr [3 x i8], [3 x i8]* @.str.50.916, i32 0, i32 0
  %908 = select i1 %904, i8* %906, i8* %907
  %909 = call %struct._IO_FILE* @fopen(i8* %901, i8* %908), !track !589
  store %struct._IO_FILE* %909, %struct._IO_FILE** @output_stream, align 8
  %910 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %911 = icmp eq %struct._IO_FILE* %910, null
  br i1 %911, label %912, label %915

; <label>:912:                                    ; preds = %899
  %913 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %914 = load i8*, i8** %913, align 8
  call void @perror(i8* %914)
  call void @exit(i32 1) #16
  unreachable

; <label>:915:                                    ; preds = %899
  %916 = load %struct._IO_FILE*, %struct._IO_FILE** @output_stream, align 8
  %917 = call i32 @fileno(%struct._IO_FILE* %916) #8
  %918 = call i32 @fstat(i32 %917, %struct.stat* %22) #8
  %919 = icmp eq i32 %918, 0
  br i1 %919, label %920, label %926

; <label>:920:                                    ; preds = %915
  %921 = getelementptr inbounds %struct.stat, %struct.stat* %22, i32 0, i32 3
  %922 = load i32, i32* %921, align 8
  %923 = and i32 %922, 61440
  %924 = icmp eq i32 %923, 32768
  br i1 %924, label %925, label %926

; <label>:925:                                    ; preds = %920
  store i8 1, i8* @output_stream_regular, align 1
  br label %926

; <label>:926:                                    ; preds = %915, %920, %925, %897
  %927 = load i8, i8* @output_stream_regular, align 1
  %928 = trunc i8 %927 to i1
  br i1 %928, label %942, label %929

; <label>:929:                                    ; preds = %926
  %930 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 101
  %931 = load i8, i8* %930, align 8
  %932 = trunc i8 %931 to i1
  br i1 %932, label %937, label %933

; <label>:933:                                    ; preds = %929
  %934 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %935 = load i8, i8* %934, align 1
  %936 = trunc i8 %935 to i1
  br i1 %936, label %937, label %942

; <label>:937:                                    ; preds = %933, %929
  %938 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %939 = getelementptr [77 x i8], [77 x i8]* @.str.51.917, i32 0, i32 0
  %940 = call i8* @gettext(i8* %939) #8, !track !590
  %941 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %938, i8* %940)
  call void @exit(i32 1) #16
  unreachable

; <label>:942:                                    ; preds = %933, %926
  %943 = load i8, i8* @output_stream_regular, align 1
  %944 = trunc i8 %943 to i1
  br i1 %944, label %958, label %945

; <label>:945:                                    ; preds = %942
  %946 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 101
  %947 = load i8, i8* %946, align 8
  %948 = trunc i8 %947 to i1
  br i1 %948, label %953, label %949

; <label>:949:                                    ; preds = %945
  %950 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 102
  %951 = load i8, i8* %950, align 1
  %952 = trunc i8 %951 to i1
  br i1 %952, label %953, label %958

; <label>:953:                                    ; preds = %949, %945
  %954 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %955 = getelementptr [99 x i8], [99 x i8]* @.str.52.918, i32 0, i32 0
  %956 = call i8* @gettext(i8* %955) #8, !track !591
  %957 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %954, i8* %956)
  call void @exit(i32 1) #16
  unreachable

; <label>:958:                                    ; preds = %942, %949, %881
  %959 = call void (i32)* @signal(i32 1, void (i32)* inttoptr (i64 1 to void (i32)*)) #8
  %960 = icmp ne void (i32)* %959, inttoptr (i64 1 to void (i32)*)
  br i1 %960, label %961, label %963

; <label>:961:                                    ; preds = %958
  %962 = call void (i32)* @signal(i32 1, void (i32)* @redirect_output_signal) #8
  br label %963

; <label>:963:                                    ; preds = %961, %958
  %964 = call void (i32)* @signal(i32 10, void (i32)* @redirect_output_signal) #8
  %965 = call void (i32)* @signal(i32 13, void (i32)* inttoptr (i64 1 to void (i32)*)) #8
  %966 = call void (i32)* @signal(i32 28, void (i32)* @progress_handle_sigwinch) #8
  %967 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 157
  %968 = load i8, i8* %967, align 8
  %969 = trunc i8 %968 to i1
  br i1 %969, label %970, label %971

; <label>:970:                                    ; preds = %963
  call void @load_hsts()
  br label %971

; <label>:971:                                    ; preds = %970, %963
  %972 = load i8*, i8** %828, align 8
  %973 = icmp ne i8* %972, null
  br i1 %973, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %971
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %1059
  %.0113 = phi i8** [ %1060, %1059 ], [ %828, %.lr.ph.preheader ]
  call void @unroll_loop(i32 290)
  store i8* null, i8** %23, align 8
  store i8* null, i8** %24, align 8
  %974 = call %struct.iri* @iri_new()
  %975 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %976 = load i8*, i8** %975, align 8
  call void @set_uri_encoding(%struct.iri* %974, i8* %976, i1 zeroext true)
  %977 = load i8*, i8** %.0113, align 8
  %978 = call %struct.url* @url_parse(i8* %977, i32* %26, %struct.iri* %974, i1 zeroext true)
  %979 = icmp ne %struct.url* %978, null
  br i1 %979, label %986, label %980

; <label>:980:                                    ; preds = %.lr.ph
  %981 = load i8*, i8** %.0113, align 8
  %982 = load i32, i32* %26, align 4
  %983 = call i8* @url_error(i8* %981, i32 %982)
  %984 = load i8*, i8** %.0113, align 8
  %985 = getelementptr [9 x i8], [9 x i8]* @.str.53.919, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %985, i8* %984, i8* %983)
  call void @free(i8* %983) #8
  call void @inform_exit_status(i32 18)
  br label %1059

; <label>:986:                                    ; preds = %.lr.ph
  %987 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %988 = load i8, i8* %987, align 1
  %989 = trunc i8 %988 to i1
  br i1 %989, label %994, label %990

; <label>:990:                                    ; preds = %986
  %991 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %992 = load i8, i8* %991, align 2
  %993 = trunc i8 %992 to i1
  br i1 %993, label %994, label %1023

; <label>:994:                                    ; preds = %990, %986
  %995 = load i8*, i8** %.0113, align 8
  %996 = call i32 @url_scheme(i8* %995)
  %997 = icmp ne i32 %996, 2
  br i1 %997, label %998, label %1002

; <label>:998:                                    ; preds = %994
  %999 = load i8*, i8** %.0113, align 8
  %1000 = call i32 @url_scheme(i8* %999)
  %1001 = icmp ne i32 %1000, 3
  br i1 %1001, label %1004, label %1002

; <label>:1002:                                   ; preds = %998, %994
  %1003 = call zeroext i1 @url_uses_proxy(%struct.url* %978)
  br i1 %1003, label %1004, label %1023

; <label>:1004:                                   ; preds = %1002, %998
  %1005 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 44
  %1006 = load i8, i8* %1005, align 8
  %1007 = trunc i8 %1006 to i1
  %1008 = zext i1 %1007 to i32
  %1009 = load i8*, i8** %.0113, align 8
  %1010 = call i32 @url_scheme(i8* %1009)
  %1011 = icmp eq i32 %1010, 2
  br i1 %1011, label %1016, label %1012

; <label>:1012:                                   ; preds = %1004
  %1013 = load i8*, i8** %.0113, align 8
  %1014 = call i32 @url_scheme(i8* %1013)
  %1015 = icmp eq i32 %1014, 3
  br i1 %1015, label %1016, label %1018

; <label>:1016:                                   ; preds = %1012, %1004
  %1017 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 44
  store i8 1, i8* %1017, align 8
  br label %1018

; <label>:1018:                                   ; preds = %1016, %1012
  %1019 = call i32 @retrieve_tree(%struct.url* %978, %struct.iri* null)
  %1020 = icmp ne i32 %1008, 0
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 44
  store i8 %1021, i8* %1022, align 8
  br label %1029

; <label>:1023:                                   ; preds = %1002, %990
  %1024 = load i8*, i8** %.0113, align 8
  %1025 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1026 = load i8, i8* %1025, align 1
  %1027 = trunc i8 %1026 to i1
  %1028 = call i32 @retrieve_url(%struct.url* %978, i8* %1024, i8** %23, i8** %24, i8* null, i32* %25, i1 zeroext %1027, %struct.iri* %974, i1 zeroext true)
  br label %1029

; <label>:1029:                                   ; preds = %1023, %1018
  %1030 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %1031 = load i8, i8* %1030, align 8
  %1032 = trunc i8 %1031 to i1
  %1033 = load i8*, i8** %23, align 8
  %1034 = icmp ne i8* %1033, null
  %or.cond = and i1 %1032, %1034
  br i1 %or.cond, label %1035, label %1056

; <label>:1035:                                   ; preds = %1029
  %1036 = load i8*, i8** %23, align 8
  %1037 = call zeroext i1 @file_exists_p(i8* %1036)
  br i1 %1037, label %1038, label %1056

; <label>:1038:                                   ; preds = %1035
  %1039 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %1040 = load i8, i8* %1039, align 1
  %1041 = trunc i8 %1040 to i1
  br i1 %1041, label %1042, label %1044

; <label>:1042:                                   ; preds = %1038
  %1043 = getelementptr [48 x i8], [48 x i8]* @.str.54.920, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %1043)
  br label %1044

; <label>:1044:                                   ; preds = %1038, %1042
  %1045 = getelementptr [14 x i8], [14 x i8]* @.str.55.921, i32 0, i32 0
  %1046 = call i8* @gettext(i8* %1045) #8
  %1047 = load i8*, i8** %23, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %1046, i8* %1047)
  %1048 = load i8*, i8** %23, align 8
  %1049 = call i32 @unlink(i8* %1048) #8
  %1050 = icmp ne i32 %1049, 0
  br i1 %1050, label %1051, label %1056

; <label>:1051:                                   ; preds = %1044
  %1052 = call i32* @__errno_location() #15
  %1053 = load i32, i32* %1052, align 4
  %1054 = call i8* @strerror(i32 %1053) #8
  %1055 = getelementptr [12 x i8], [12 x i8]* @.str.56.922, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1055, i8* %1054)
  br label %1056

; <label>:1056:                                   ; preds = %1029, %1035, %1051, %1044
  %1057 = load i8*, i8** %24, align 8
  call void @free(i8* %1057) #8
  store i8* null, i8** %24, align 8
  %1058 = load i8*, i8** %23, align 8
  call void @free(i8* %1058) #8
  store i8* null, i8** %23, align 8
  call void @url_free(%struct.url* %978)
  br label %1059

; <label>:1059:                                   ; preds = %1056, %980
  %.0115 = phi i8** [ %.0113, %1056 ], [ %.0113, %980 ]
  call void @iri_free(%struct.iri* %974)
  %1060 = getelementptr inbounds i8*, i8** %.0115, i32 1
  %1061 = load i8*, i8** %1060, align 8
  %1062 = icmp ne i8* %1061, null
  br i1 %1062, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %1059
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %971
  %1063 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %1064 = load i8*, i8** %1063, align 8
  %1065 = icmp ne i8* %1064, null
  br i1 %1065, label %1066, label %1080

; <label>:1066:                                   ; preds = %._crit_edge
  %1067 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %1068 = load i8*, i8** %1067, align 8
  %1069 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 24
  %1070 = load i8, i8* %1069, align 1
  %1071 = trunc i8 %1070 to i1
  %1072 = call i32 @retrieve_from_file(i8* %1068, i1 zeroext %1071, i32* %27)
  call void @inform_exit_status(i32 %1072)
  %1073 = load i32, i32* %27, align 4
  %1074 = icmp ne i32 %1073, 0
  br i1 %1074, label %1080, label %1075

; <label>:1075:                                   ; preds = %1066
  %1076 = getelementptr [22 x i8], [22 x i8]* @.str.57.923, i32 0, i32 0
  %1077 = call i8* @gettext(i8* %1076) #8
  %1078 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %1079 = load i8*, i8** %1078, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1077, i8* %1079)
  br label %1080

; <label>:1080:                                   ; preds = %1066, %1075, %._crit_edge
  %1081 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1082 = load i8, i8* %1081, align 1
  %1083 = trunc i8 %1082 to i1
  br i1 %1083, label %1084, label %1089

; <label>:1084:                                   ; preds = %1080
  %1085 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %1086 = load i8, i8* %1085, align 8
  %1087 = trunc i8 %1086 to i1
  br i1 %1087, label %1088, label %1089

; <label>:1088:                                   ; preds = %1084
  call void @print_broken_links()
  br label %1089

; <label>:1089:                                   ; preds = %1088, %1084, %1080
  %1090 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1091 = load i8, i8* %1090, align 1
  %1092 = trunc i8 %1091 to i1
  br i1 %1092, label %1106, label %1093

; <label>:1093:                                   ; preds = %1089
  %1094 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %1095 = load i8, i8* %1094, align 2
  %1096 = trunc i8 %1095 to i1
  %1097 = icmp sgt i32 %310, 1
  %or.cond2 = or i1 %1096, %1097
  br i1 %or.cond2, label %1106, label %1098

; <label>:1098:                                   ; preds = %1093
  %1099 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %1100 = load i8*, i8** %1099, align 8
  %1101 = icmp ne i8* %1100, null
  %1102 = load i64, i64* @total_downloaded_bytes, align 8
  %1103 = icmp ne i64 %1102, 0
  %or.cond4 = and i1 %1101, %1103
  %1104 = load i64, i64* @total_downloaded_bytes, align 8
  %1105 = icmp ne i64 %1104, 0
  %or.cond6 = and i1 %or.cond4, %1105
  br i1 %or.cond6, label %1107, label %1139

; <label>:1106:                                   ; preds = %1093, %1089
  %.old = load i64, i64* @total_downloaded_bytes, align 8
  %.old5 = icmp ne i64 %.old, 0
  br i1 %.old5, label %1107, label %1139

; <label>:1107:                                   ; preds = %1098, %1106
  %1108 = call double @ptimer_measure(%struct.ptimer* %28)
  %1109 = fsub double %1108, %29
  %1110 = call i8* @secs_to_human_time(double %1109)
  %1111 = call noalias i8* @xstrdup(i8* %1110)
  %1112 = load double, double* @total_download_time, align 8
  %1113 = call i8* @secs_to_human_time(double %1112)
  %1114 = call noalias i8* @xstrdup(i8* %1113)
  call void @ptimer_destroy(%struct.ptimer* %28)
  %1115 = getelementptr [79 x i8], [79 x i8]* @.str.58.924, i32 0, i32 0
  %1116 = call i8* @gettext(i8* %1115) #8
  %1117 = call i64 @time(i64* null) #8
  %1118 = call i8* @datetime_str(i64 %1117)
  %1119 = load i32, i32* @numurls, align 4
  %1120 = load i64, i64* @total_downloaded_bytes, align 8
  %1121 = call i8* @human_readable(i64 %1120, i32 10, i32 1)
  %1122 = load i64, i64* @total_downloaded_bytes, align 8
  %1123 = load double, double* @total_download_time, align 8
  %1124 = call i8* @retr_rate(i64 %1122, double %1123)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1116, i8* %1118, i8* %1111, i32 %1119, i8* %1121, i8* %1114, i8* %1124)
  call void @free(i8* %1111) #8
  call void @free(i8* %1114) #8
  %1125 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %1126 = load i64, i64* %1125, align 8
  %1127 = icmp ne i64 %1126, 0
  br i1 %1127, label %1128, label %1139

; <label>:1128:                                   ; preds = %1107
  %1129 = load i64, i64* @total_downloaded_bytes, align 8
  %1130 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %1131 = load i64, i64* %1130, align 8
  %1132 = icmp sgt i64 %1129, %1131
  br i1 %1132, label %1133, label %1139

; <label>:1133:                                   ; preds = %1128
  %1134 = getelementptr [32 x i8], [32 x i8]* @.str.59.925, i32 0, i32 0
  %1135 = call i8* @gettext(i8* %1134) #8
  %1136 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %1137 = load i64, i64* %1136, align 8
  %1138 = call i8* @human_readable(i64 %1137, i32 10, i32 1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %1135, i8* %1138)
  br label %1139

; <label>:1139:                                   ; preds = %1107, %1128, %1133, %1106, %1098
  %1140 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 131
  %1141 = load i8*, i8** %1140, align 8
  %1142 = icmp ne i8* %1141, null
  br i1 %1142, label %1143, label %1144

; <label>:1143:                                   ; preds = %1139
  call void @save_cookies()
  br label %1144

; <label>:1144:                                   ; preds = %1143, %1139
  %1145 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 157
  %1146 = load i8, i8* %1145, align 8
  %1147 = trunc i8 %1146 to i1
  %1148 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %1149 = icmp ne %struct.hsts_store* %1148, null
  %or.cond9 = and i1 %1147, %1149
  br i1 %or.cond9, label %1150, label %1151

; <label>:1150:                                   ; preds = %1144
  call void @save_hsts()
  br label %1151

; <label>:1151:                                   ; preds = %1150, %1144
  %1152 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 101
  %1153 = load i8, i8* %1152, align 8
  %1154 = trunc i8 %1153 to i1
  br i1 %1154, label %1159, label %1155

; <label>:1155:                                   ; preds = %1151
  %1156 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 102
  %1157 = load i8, i8* %1156, align 1
  %1158 = trunc i8 %1157 to i1
  br i1 %1158, label %1159, label %1164

; <label>:1159:                                   ; preds = %1155, %1151
  %1160 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %1161 = load i8, i8* %1160, align 8
  %1162 = trunc i8 %1161 to i1
  br i1 %1162, label %1164, label %1163

; <label>:1163:                                   ; preds = %1159
  call void @convert_all_links()
  br label %1164

; <label>:1164:                                   ; preds = %1163, %1159, %1155
  call void @cleanup()
  %1165 = call i32 @get_exit_status()
  call void @exit(i32 %1165) #16
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @i18n_initialize() #0 {
  %1 = getelementptr [1 x i8], [1 x i8]* @.str.60.926, i32 0, i32 0
  %2 = call i8* @setlocale(i32 6, i8* %1) #8
  %3 = getelementptr [5 x i8], [5 x i8]* @.str.61.1088, i32 0, i32 0
  %4 = getelementptr [24 x i8], [24 x i8]* @.str.62.1083, i32 0, i32 0
  %5 = call i8* @bindtextdomain(i8* %3, i8* %4) #8, !track !592
  %6 = getelementptr [5 x i8], [5 x i8]* @.str.61.1088, i32 0, i32 0
  %7 = call i8* @textdomain(i8* %6) #8, !track !593
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_switches() #0 {
  %1 = getelementptr [128 x i8], [128 x i8]* @short_options, i32 0, i32 0
  br label %2

; <label>:2:                                      ; preds = %0, %67
  %.08 = phi i8* [ %1, %0 ], [ %.6, %67 ]
  %.016 = phi i64 [ 0, %0 ], [ %68, %67 ]
  %.025 = phi i64 [ 0, %0 ], [ %.24, %67 ]
  call void @unroll_loop(i32 283)
  %3 = getelementptr inbounds [156 x %struct.cmdline_option], [156 x %struct.cmdline_option]* @option_data, i64 0, i64 %.016
  %4 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %67

; <label>:7:                                      ; preds = %2
  %8 = add i64 %.025, 1
  %9 = getelementptr inbounds [313 x %struct.option], [313 x %struct.option]* @long_options, i64 0, i64 %.025
  %10 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.option, %struct.option* %9, i32 0, i32 0
  store i8* %11, i8** %12, align 8
  %13 = trunc i64 %.016 to i32
  %14 = getelementptr inbounds %struct.option, %struct.option* %9, i32 0, i32 3
  store i32 %13, i32* %14, align 8
  %15 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 1
  %16 = load i8, i8* %15, align 8
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %18, label %32

; <label>:18:                                     ; preds = %7
  %19 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 1
  %20 = load i8, i8* %19, align 8
  %21 = getelementptr inbounds i8, i8* %.08, i32 1
  store i8 %20, i8* %.08, align 1
  %22 = ptrtoint %struct.option* %9 to i64
  %23 = sub i64 %22, ptrtoint ([313 x %struct.option]* @long_options to i64)
  %24 = sdiv exact i64 %23, 32
  %25 = trunc i64 %24 to i8
  %26 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 1
  %27 = load i8, i8* %26, align 8
  %28 = sext i8 %27 to i32
  %29 = sub nsw i32 %28, 32
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [96 x i8], [96 x i8]* @optmap, i64 0, i64 %30
  store i8 %25, i8* %31, align 1
  br label %32

; <label>:32:                                     ; preds = %18, %7
  %.1 = phi i8* [ %21, %18 ], [ %.08, %7 ]
  %33 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  switch i32 %34, label %54 [
    i32 0, label %35
    i32 1, label %42
  ]

; <label>:35:                                     ; preds = %32
  %36 = getelementptr inbounds %struct.option, %struct.option* %9, i32 0, i32 1
  store i32 1, i32* %36, align 8
  %37 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 1
  %38 = load i8, i8* %37, align 8
  %39 = icmp ne i8 %38, 0
  br i1 %39, label %40, label %67

; <label>:40:                                     ; preds = %35
  %41 = getelementptr inbounds i8, i8* %.1, i32 1
  store i8 58, i8* %.1, align 1
  br label %67

; <label>:42:                                     ; preds = %32
  %43 = getelementptr inbounds %struct.option, %struct.option* %9, i32 0, i32 1
  store i32 2, i32* %43, align 8
  %44 = add i64 %8, 1
  %45 = getelementptr inbounds [313 x %struct.option], [313 x %struct.option]* @long_options, i64 0, i64 %8
  %46 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i8* @no_prefix(i8* %47)
  %49 = getelementptr inbounds %struct.option, %struct.option* %45, i32 0, i32 0
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %struct.option, %struct.option* %45, i32 0, i32 1
  store i32 0, i32* %50, align 8
  %51 = or i64 %.016, 1024
  %52 = trunc i64 %51 to i32
  %53 = getelementptr inbounds %struct.option, %struct.option* %45, i32 0, i32 3
  store i32 %52, i32* %53, align 8
  br label %67

; <label>:54:                                     ; preds = %32
  %55 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 4
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.option, %struct.option* %9, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  %58 = getelementptr inbounds %struct.cmdline_option, %struct.cmdline_option* %3, i32 0, i32 1
  %59 = load i8, i8* %58, align 8
  %60 = icmp ne i8 %59, 0
  br i1 %60, label %61, label %67

; <label>:61:                                     ; preds = %54
  %62 = getelementptr inbounds %struct.option, %struct.option* %9, i32 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %67

; <label>:65:                                     ; preds = %61
  %66 = getelementptr inbounds i8, i8* %.1, i32 1
  store i8 58, i8* %.1, align 1
  br label %67

; <label>:67:                                     ; preds = %42, %40, %35, %61, %65, %54, %2
  %.24 = phi i64 [ %.025, %2 ], [ %44, %42 ], [ %8, %40 ], [ %8, %35 ], [ %8, %61 ], [ %8, %65 ], [ %8, %54 ]
  %.6 = phi i8* [ %.08, %2 ], [ %.1, %42 ], [ %41, %40 ], [ %.1, %35 ], [ %.1, %54 ], [ %66, %65 ], [ %.1, %61 ]
  %68 = add nuw nsw i64 %.016, 1
  %exitcond = icmp ne i64 %68, 156
  br i1 %exitcond, label %2, label %69

; <label>:69:                                     ; preds = %67
  %.0.lcssa = phi i8* [ %.6, %67 ]
  store i8 0, i8* %.0.lcssa, align 1
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @print_usage(i32) #0 {
  %2 = icmp ne i32 %0, 0
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %5 = select i1 %2, %struct._IO_FILE* %3, %struct._IO_FILE* %4
  %6 = getelementptr [32 x i8], [32 x i8]* @.str.487, i32 0, i32 0
  %7 = call i8* @gettext(i8* %6) #8, !track !594
  %8 = load i8*, i8** @exec_name, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* %7, i8* %8)
  ret i32 %9
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @prompt_for_password() #7 {
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 56
  %2 = load i8*, i8** %1, align 8
  %3 = icmp ne i8* %2, null
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  br i1 %3, label %5, label %12

; <label>:5:                                      ; preds = %0
  %6 = getelementptr [23 x i8], [23 x i8]* @.str.488, i32 0, i32 0
  %7 = call i8* @gettext(i8* %6) #8, !track !595
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 56
  %9 = load i8*, i8** %8, align 8
  %10 = call i8* @quote(i8* %9)
  %11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* %7, i8* %10)
  br label %16

; <label>:12:                                     ; preds = %0
  %13 = getelementptr [11 x i8], [11 x i8]* @.str.489, i32 0, i32 0
  %14 = call i8* @gettext(i8* %13) #8, !track !596
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* %14)
  br label %16

; <label>:16:                                     ; preds = %12, %5
  %17 = getelementptr [1 x i8], [1 x i8]* @.str.60.926, i32 0, i32 0
  %18 = call i8* @gnu_getpass(i8* %17)
  ret i8* %18
}

declare dso_local void @perror(i8*) #3

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @redirect_output_signal(i32) #0 {
  %2 = icmp eq i32 %0, 1
  %3 = getelementptr [6 x i8], [6 x i8]* @.str.490, i32 0, i32 0
  %4 = getelementptr [7 x i8], [7 x i8]* @.str.491, i32 0, i32 0
  %spec.select = select i1 %2, i8* %4, i8* %3
  %5 = icmp eq i32 %0, 10
  %6 = getelementptr [8 x i8], [8 x i8]* @.str.492, i32 0, i32 0
  %.1 = select i1 %5, i8* %6, i8* %spec.select
  call void @log_request_redirect_output(i8* %.1)
  call void @progress_schedule_redirect()
  %7 = call void (i32)* @signal(i32 %0, void (i32)* @redirect_output_signal) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @load_hsts() #0 {
  %1 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %2 = icmp ne %struct.hsts_store* %1, null
  br i1 %2, label %21, label %3

; <label>:3:                                      ; preds = %0
  %4 = call i8* @get_hsts_database()
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %18

; <label>:6:                                      ; preds = %3
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %8 = load i8, i8* %7, align 1
  %9 = trunc i8 %8 to i1
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %6
  %11 = getelementptr [30 x i8], [30 x i8]* @.str.493, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %11, i8* %4)
  br label %12

; <label>:12:                                     ; preds = %6, %10
  %13 = call %struct.hsts_store* @hsts_store_open(i8* %4)
  store %struct.hsts_store* %13, %struct.hsts_store** @hsts_store, align 8
  %14 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %15 = icmp ne %struct.hsts_store* %14, null
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %12
  %17 = getelementptr [66 x i8], [66 x i8]* @.str.494, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %17, i8* %4)
  br label %20

; <label>:18:                                     ; preds = %3
  %19 = getelementptr [58 x i8], [58 x i8]* @.str.495, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %19)
  br label %20

; <label>:20:                                     ; preds = %18, %16, %12
  call void @free(i8* %4) #8
  br label %21

; <label>:21:                                     ; preds = %20, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @secs_to_human_time(double) #7 {
  %2 = fadd double %0, 5.000000e-01
  %3 = fptosi double %2 to i32
  %4 = sdiv i32 %3, 86400
  %5 = srem i32 %3, 86400
  %6 = sdiv i32 %5, 3600
  %7 = srem i32 %5, 3600
  %8 = sdiv i32 %7, 60
  %9 = srem i32 %7, 60
  %10 = icmp ne i32 %4, 0
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %1
  %12 = getelementptr [32 x i8], [32 x i8]* @secs_to_human_time.buf, i32 0, i32 0
  %13 = getelementptr [16 x i8], [16 x i8]* @.str.497, i32 0, i32 0
  %14 = call i32 (i8*, i8*, ...) @sprintf(i8* %12, i8* %13, i32 %4, i32 %6, i32 %8, i32 %9) #8
  br label %32

; <label>:15:                                     ; preds = %1
  %16 = icmp ne i32 %6, 0
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %15
  %18 = getelementptr [32 x i8], [32 x i8]* @secs_to_human_time.buf, i32 0, i32 0
  %19 = getelementptr [12 x i8], [12 x i8]* @.str.498, i32 0, i32 0
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %18, i8* %19, i32 %6, i32 %8, i32 %9) #8
  br label %32

; <label>:21:                                     ; preds = %15
  %22 = icmp ne i32 %8, 0
  br i1 %22, label %23, label %27

; <label>:23:                                     ; preds = %21
  %24 = getelementptr [32 x i8], [32 x i8]* @secs_to_human_time.buf, i32 0, i32 0
  %25 = getelementptr [8 x i8], [8 x i8]* @.str.499, i32 0, i32 0
  %26 = call i32 (i8*, i8*, ...) @sprintf(i8* %24, i8* %25, i32 %8, i32 %9) #8
  br label %32

; <label>:27:                                     ; preds = %21
  %28 = call i8* @print_decimal(double %0)
  %29 = getelementptr [32 x i8], [32 x i8]* @secs_to_human_time.buf, i32 0, i32 0
  %30 = getelementptr [4 x i8], [4 x i8]* @.str.500, i32 0, i32 0
  %31 = call i32 (i8*, i8*, ...) @sprintf(i8* %29, i8* %30, i8* %28) #8
  br label %32

; <label>:32:                                     ; preds = %17, %27, %23, %11
  %33 = getelementptr [32 x i8], [32 x i8]* @secs_to_human_time.buf, i32 0, i32 0
  ret i8* %33
}

; Function Attrs: noinline nounwind uwtable
define internal void @save_hsts() #0 {
  %1 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %2 = icmp ne %struct.hsts_store* %1, null
  br i1 %2, label %3, label %15

; <label>:3:                                      ; preds = %0
  %4 = call i8* @get_hsts_database()
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %12

; <label>:6:                                      ; preds = %3
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %8 = load i8, i8* %7, align 1
  %9 = trunc i8 %8 to i1
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %6
  %11 = getelementptr [27 x i8], [27 x i8]* @.str.501, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %11, i8* %4)
  br label %12

; <label>:12:                                     ; preds = %10, %6, %3
  %13 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  call void @hsts_store_save(%struct.hsts_store* %13, i8* %4)
  %14 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  call void @hsts_store_close(%struct.hsts_store* %14)
  call void @free(i8* %4) #8
  br label %15

; <label>:15:                                     ; preds = %12, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_hsts_database() #0 {
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 158
  %2 = load i8*, i8** %1, align 8
  %3 = icmp ne i8* %2, null
  br i1 %3, label %4, label %8

; <label>:4:                                      ; preds = %0
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 158
  %6 = load i8*, i8** %5, align 8
  %7 = call noalias i8* @xstrdup(i8* %6)
  br label %14

; <label>:8:                                      ; preds = %0
  %9 = call i8* @home_dir()
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %8
  %12 = getelementptr [14 x i8], [14 x i8]* @.str.496, i32 0, i32 0
  %13 = call i8* (i8*, ...) @aprintf(i8* %12, i8* %9)
  call void @free(i8* %9) #8
  br label %14

; <label>:14:                                     ; preds = %8, %11, %4
  %.0 = phi i8* [ %7, %4 ], [ %13, %11 ], [ null, %8 ]
  ret i8* %.0
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @print_help() #9 {
  %1 = getelementptr [51 x i8], [51 x i8]* @.str.468, i32 0, i32 0
  %2 = call i8* @gettext(i8* %1) #8, !track !597
  %3 = load i8*, i8** @version_string, align 8
  %4 = call i32 (i8*, ...) @printf(i8* %2, i8* %3)
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %0
  call void @exit(i32 3) #16
  unreachable

; <label>:7:                                      ; preds = %0
  %8 = call i32 @print_usage(i32 0)
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %.preheader

.preheader:                                       ; preds = %7
  br label %11

; <label>:10:                                     ; preds = %7
  call void @exit(i32 3) #16
  unreachable

; <label>:11:                                     ; preds = %.preheader, %19
  %.01 = phi i64 [ %20, %19 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 291)
  %12 = getelementptr inbounds [170 x i8*], [170 x i8*]* @print_help.help, i64 0, i64 %.01
  %13 = load i8*, i8** %12, align 8
  %14 = call i8* @gettext(i8* %13) #8, !track !598
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %16 = call i32 @fputs(i8* %14, %struct._IO_FILE* %15)
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %11
  call void @exit(i32 3) #16
  unreachable

; <label>:19:                                     ; preds = %11
  %20 = add nuw nsw i64 %.01, 1
  %21 = icmp ult i64 %20, 170
  br i1 %21, label %11, label %22

; <label>:22:                                     ; preds = %19
  call void @exit(i32 0) #16
  unreachable
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @print_version() #9 {
  %1 = getelementptr [9 x i8], [9 x i8]* @.str.469, i32 0, i32 0
  %2 = call i8* @gettext(i8* %1) #8
  %3 = getelementptr [9 x i8], [9 x i8]* @.str.470, i32 0, i32 0
  %4 = call i8* @gettext(i8* %3) #8
  %5 = getelementptr [10 x i8], [10 x i8]* @.str.471, i32 0, i32 0
  %6 = call i8* @gettext(i8* %5) #8
  %7 = getelementptr [7 x i8], [7 x i8]* @.str.472, i32 0, i32 0
  %8 = call i8* @gettext(i8* %7) #8
  %9 = getelementptr [27 x i8], [27 x i8]* @.str.473, i32 0, i32 0
  %10 = call i8* @gettext(i8* %9) #8, !track !599
  %11 = load i8*, i8** @version_string, align 8
  %12 = getelementptr [10 x i8], [10 x i8]* @.str.48.914, i32 0, i32 0
  %13 = call i32 (i8*, ...) @printf(i8* %10, i8* %11, i8* %12)
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %0
  call void @exit(i32 3) #16
  unreachable

; <label>:16:                                     ; preds = %0
  %17 = getelementptr [13 x i8*], [13 x i8*]* @compiled_features, i64 0, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %16
  br label %.lr.ph

; <label>:20:                                     ; preds = %.critedge
  %.01 = phi i32 [ %46, %.critedge ]
  %21 = sext i32 %.01 to i64
  %22 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([13 x i8*]* @compiled_features to [0 x i8*]*), i64 0, i64 %21
  %23 = load i8*, i8** %22, align 8
  %24 = icmp ne i8* %23, null
  br i1 %24, label %.lr.ph, label %._crit_edge.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %20
  %.013 = phi i32 [ %.01, %20 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 292)
  %25 = sext i32 %.013 to i64
  br label %26

; <label>:26:                                     ; preds = %.lr.ph, %37
  %.02 = phi i32 [ 72, %.lr.ph ], [ %44, %37 ]
  %indvars.iv1 = phi i64 [ %25, %.lr.ph ], [ %indvars.iv.next, %37 ]
  %27 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([13 x i8*]* @compiled_features to [0 x i8*]*), i64 0, i64 %indvars.iv1
  %28 = load i8*, i8** %27, align 8
  %29 = icmp ne i8* %28, null
  br i1 %29, label %30, label %.critedge

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([13 x i8*]* @compiled_features to [0 x i8*]*), i64 0, i64 %indvars.iv1
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr [4 x i8], [4 x i8]* @.str.474, i32 0, i32 0
  %34 = call i32 (i8*, ...) @printf(i8* %33, i8* %32)
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %30
  call void @exit(i32 3) #16
  unreachable

; <label>:37:                                     ; preds = %30
  %38 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([13 x i8*]* @compiled_features to [0 x i8*]*), i64 0, i64 %indvars.iv1
  %39 = load i8*, i8** %38, align 8
  %40 = call i64 @strlen(i8* %39) #14
  %41 = add i64 %40, 2
  %42 = sext i32 %.02 to i64
  %43 = sub i64 %42, %41
  %44 = trunc i64 %43 to i32
  %indvars.iv.next = add i64 %indvars.iv1, 1
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %26, label %.critedge

.critedge:                                        ; preds = %37, %26
  %.1.lcssa.wide = phi i64 [ %indvars.iv1, %26 ], [ %indvars.iv.next, %37 ]
  %46 = trunc i64 %.1.lcssa.wide to i32
  %47 = getelementptr [2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0
  %48 = call i32 (i8*, ...) @printf(i8* %47)
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %20

; <label>:50:                                     ; preds = %.critedge
  call void @exit(i32 3) #16
  unreachable

._crit_edge.loopexit:                             ; preds = %20
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %16
  %51 = getelementptr [2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0
  %52 = call i32 (i8*, ...) @printf(i8* %51)
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %._crit_edge
  call void @exit(i32 3) #16
  unreachable

; <label>:55:                                     ; preds = %._crit_edge
  %56 = getelementptr [4 x i8], [4 x i8]* @.str.475, i32 0, i32 0
  %57 = call i32 (i8*, ...) @printf(i8* %56, i8* %2)
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %59, label %60

; <label>:59:                                     ; preds = %55
  call void @exit(i32 3) #16
  unreachable

; <label>:60:                                     ; preds = %55
  %61 = call i8* @wgetrc_env_file_name()
  %62 = icmp ne i8* %61, null
  br i1 %62, label %63, label %74

; <label>:63:                                     ; preds = %60
  %64 = load i8, i8* %61, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %74

; <label>:67:                                     ; preds = %63
  %68 = getelementptr [14 x i8], [14 x i8]* @.str.476, i32 0, i32 0
  %69 = call i8* @gettext(i8* %68) #8, !track !600
  %70 = call i32 (i8*, ...) @printf(i8* %69, i8* %61)
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %73

; <label>:72:                                     ; preds = %67
  call void @exit(i32 3) #16
  unreachable

; <label>:73:                                     ; preds = %67
  call void @free(i8* %61) #8
  br label %74

; <label>:74:                                     ; preds = %73, %63, %60
  %75 = call i8* @wgetrc_user_file_name()
  %76 = icmp ne i8* %75, null
  br i1 %76, label %77, label %84

; <label>:77:                                     ; preds = %74
  %78 = getelementptr [15 x i8], [15 x i8]* @.str.477, i32 0, i32 0
  %79 = call i8* @gettext(i8* %78) #8, !track !601
  %80 = call i32 (i8*, ...) @printf(i8* %79, i8* %75)
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %77
  call void @exit(i32 3) #16
  unreachable

; <label>:83:                                     ; preds = %77
  call void @free(i8* %75) #8
  br label %84

; <label>:84:                                     ; preds = %83, %74
  %85 = getelementptr [17 x i8], [17 x i8]* @.str.478, i32 0, i32 0
  %86 = call i8* @gettext(i8* %85) #8
  %87 = getelementptr [22 x i8], [22 x i8]* @.str.479, i32 0, i32 0
  %88 = call i32 (i8*, ...) @printf(i8* %86, i8* %87)
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %90, label %91

; <label>:90:                                     ; preds = %84
  call void @exit(i32 3) #16
  unreachable

; <label>:91:                                     ; preds = %84
  %92 = getelementptr [24 x i8], [24 x i8]* @.str.62.1083, i32 0, i32 0
  %93 = call i32 @format_and_print_line(i8* %4, i8* %92, i32 72)
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %95, label %96

; <label>:95:                                     ; preds = %91
  call void @exit(i32 3) #16
  unreachable

; <label>:96:                                     ; preds = %91
  %97 = load i8*, i8** @compilation_string, align 8
  %98 = icmp ne i8* %97, null
  br i1 %98, label %99, label %104

; <label>:99:                                     ; preds = %96
  %100 = load i8*, i8** @compilation_string, align 8
  %101 = call i32 @format_and_print_line(i8* %6, i8* %100, i32 72)
  %102 = icmp slt i32 %101, 0
  br i1 %102, label %103, label %104

; <label>:103:                                    ; preds = %99
  call void @exit(i32 3) #16
  unreachable

; <label>:104:                                    ; preds = %99, %96
  %105 = load i8*, i8** @link_string, align 8
  %106 = icmp ne i8* %105, null
  br i1 %106, label %107, label %112

; <label>:107:                                    ; preds = %104
  %108 = load i8*, i8** @link_string, align 8
  %109 = call i32 @format_and_print_line(i8* %8, i8* %108, i32 72)
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %111, label %112

; <label>:111:                                    ; preds = %107
  call void @exit(i32 3) #16
  unreachable

; <label>:112:                                    ; preds = %107, %104
  %113 = getelementptr [2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0
  %114 = call i32 (i8*, ...) @printf(i8* %113)
  %115 = icmp slt i32 %114, 0
  br i1 %115, label %116, label %117

; <label>:116:                                    ; preds = %112
  call void @exit(i32 3) #16
  unreachable

; <label>:117:                                    ; preds = %112
  %118 = getelementptr [49 x i8], [49 x i8]* @.str.480, i32 0, i32 0
  %119 = call i8* @gettext(i8* %118) #8
  %120 = getelementptr [5 x i8], [5 x i8]* @.str.481, i32 0, i32 0
  %121 = call i32 (i8*, ...) @printf(i8* %119, i8* %120)
  %122 = icmp slt i32 %121, 0
  br i1 %122, label %123, label %124

; <label>:123:                                    ; preds = %117
  call void @exit(i32 3) #16
  unreachable

; <label>:124:                                    ; preds = %117
  %125 = getelementptr [205 x i8], [205 x i8]* @.str.482, i32 0, i32 0
  %126 = call i8* @gettext(i8* %125) #8, !track !602
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %128 = call i32 @fputs(i8* %126, %struct._IO_FILE* %127)
  %129 = icmp slt i32 %128, 0
  br i1 %129, label %130, label %131

; <label>:130:                                    ; preds = %124
  call void @exit(i32 3) #16
  unreachable

; <label>:131:                                    ; preds = %124
  %132 = getelementptr [60 x i8], [60 x i8]* @.str.483, i32 0, i32 0
  %133 = call i8* @gettext(i8* %132) #8, !track !603
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %135 = call i32 @fputs(i8* %133, %struct._IO_FILE* %134)
  %136 = icmp slt i32 %135, 0
  br i1 %136, label %137, label %138

; <label>:137:                                    ; preds = %131
  call void @exit(i32 3) #16
  unreachable

; <label>:138:                                    ; preds = %131
  %139 = getelementptr [62 x i8], [62 x i8]* @.str.484.1084, i32 0, i32 0
  %140 = call i8* @gettext(i8* %139) #8, !track !604
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %142 = call i32 @fputs(i8* %140, %struct._IO_FILE* %141)
  %143 = icmp slt i32 %142, 0
  br i1 %143, label %144, label %145

; <label>:144:                                    ; preds = %138
  call void @exit(i32 3) #16
  unreachable

; <label>:145:                                    ; preds = %138
  call void @exit(i32 0) #16
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @format_and_print_line(i8*, i8*, i32) #0 {
  %4 = call noalias i8* @xstrdup(i8* %1)
  %5 = getelementptr [3 x i8], [3 x i8]* @.str.22.889, i32 0, i32 0
  %6 = call i32 (i8*, ...) @printf(i8* %5, i8* %0)
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %3
  call void @free(i8* %4) #8
  br label %40

; <label>:9:                                      ; preds = %3
  %10 = getelementptr [2 x i8], [2 x i8]* @.str.485, i32 0, i32 0
  %11 = call i8* @strtok(i8* %4, i8* %10) #8, !track !605
  %12 = icmp ne i8* %11, null
  br i1 %12, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %9
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %28
  %.014 = phi i8* [ %35, %28 ], [ %11, %.lr.ph.preheader ]
  %.023 = phi i32 [ %33, %28 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 293)
  %13 = call i64 @strlen(i8* %.014) #14
  %14 = trunc i64 %13 to i32
  %15 = icmp sle i32 %.023, %14
  br i1 %15, label %16, label %23

; <label>:16:                                     ; preds = %.lr.ph
  %17 = getelementptr [5 x i8], [5 x i8]* @.str.486, i32 0, i32 0
  %18 = call i32 (i8*, ...) @printf(i8* %17, i32 4, i32 32)
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %16
  call void @free(i8* %4) #8
  br label %40

; <label>:21:                                     ; preds = %16
  %22 = sub nsw i32 %2, 4
  br label %23

; <label>:23:                                     ; preds = %21, %.lr.ph
  %.1 = phi i32 [ %22, %21 ], [ %.023, %.lr.ph ]
  %24 = getelementptr [4 x i8], [4 x i8]* @.str.474, i32 0, i32 0
  %25 = call i32 (i8*, ...) @printf(i8* %24, i8* %.014)
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %23
  call void @free(i8* %4) #8
  br label %40

; <label>:28:                                     ; preds = %23
  %29 = call i64 @strlen(i8* %.014) #14
  %30 = add i64 %29, 1
  %31 = sext i32 %.1 to i64
  %32 = sub i64 %31, %30
  %33 = trunc i64 %32 to i32
  %34 = getelementptr [2 x i8], [2 x i8]* @.str.485, i32 0, i32 0
  %35 = call i8* @strtok(i8* null, i8* %34) #8, !track !606
  %36 = icmp ne i8* %35, null
  br i1 %36, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %28
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %37 = getelementptr [2 x i8], [2 x i8]* @.str.4.870, i32 0, i32 0
  %38 = call i32 (i8*, ...) @printf(i8* %37)
  %39 = icmp slt i32 %38, 0
  call void @free(i8* %4) #8
  %. = select i1 %39, i32 -1, i32 0
  br label %40

; <label>:40:                                     ; preds = %._crit_edge, %27, %20, %8
  %.0 = phi i32 [ -1, %8 ], [ -1, %20 ], [ -1, %27 ], [ %., %._crit_edge ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @no_prefix(i8*) #7 {
  %2 = load i8*, i8** @no_prefix.p, align 8
  %3 = call i64 @strlen(i8* %0) #14
  %4 = add i64 3, %3
  %5 = add i64 %4, 1
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds i8, i8* %2, i64 0
  store i8 110, i8* %7, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 111, i8* %8, align 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  store i8 45, i8* %9, align 1
  %10 = getelementptr inbounds i8, i8* %2, i64 3
  %11 = call i8* @strcpy(i8* %10, i8* %0) #8, !track !607
  %12 = load i8*, i8** @no_prefix.p, align 8
  %13 = sext i32 %6 to i64
  %14 = getelementptr inbounds i8, i8* %12, i64 %13
  store i8* %14, i8** @no_prefix.p, align 8
  ret i8* %2
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @netrc_cleanup() #0 {
  %1 = load %struct._acc_t*, %struct._acc_t** @netrc_list, align 8
  call void @free_netrc(%struct._acc_t* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_netrc(%struct._acc_t*) #0 {
  %2 = icmp ne %struct._acc_t* %0, null
  br i1 %2, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi %struct._acc_t* [ %4, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 294)
  %3 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.01, i32 0, i32 3
  %4 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %5 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.01, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.01, i32 0, i32 1
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.01, i32 0, i32 2
  %9 = load i8*, i8** %8, align 8
  call void @free(i8* %9) #8
  %10 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.01, i32 0, i32 2
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.01, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  call void @free(i8* %12) #8
  %13 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.01, i32 0, i32 0
  store i8* null, i8** %13, align 8
  %14 = bitcast %struct._acc_t* %.01 to i8*
  call void @free(i8* %14) #8
  %15 = icmp ne %struct._acc_t* %4, null
  br i1 %15, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @search_netrc(i8*, i8**, i8**, i32) #0 {
  %5 = alloca %struct.stat, align 8, !track !608
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 63
  %7 = load i8, i8* %6, align 8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %97

; <label>:9:                                      ; preds = %4
  %10 = load i32, i32* @search_netrc.processed_netrc, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %28, label %12

; <label>:12:                                     ; preds = %9
  %13 = call i8* @home_dir()
  store %struct._acc_t* null, %struct._acc_t** @netrc_list, align 8
  store i32 1, i32* @search_netrc.processed_netrc, align 4
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %28

; <label>:15:                                     ; preds = %12
  %16 = call i64 @strlen(i8* %13) #14
  %17 = add i64 %16, 1
  %18 = add i64 %17, 6
  %19 = add i64 %18, 1
  %20 = alloca i8, i64 %19, align 16, !track !609
  %21 = getelementptr [6 x i8], [6 x i8]* @.str.1091, i32 0, i32 0
  %22 = getelementptr [7 x i8], [7 x i8]* @.str.1.1092, i32 0, i32 0
  %23 = call i32 (i8*, i8*, ...) @sprintf(i8* %20, i8* %21, i8* %13, i8* %22) #8
  call void @free(i8* %13) #8
  %24 = call i32 @stat(i8* %20, %struct.stat* %5) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %15
  %27 = call %struct._acc_t* @parse_netrc(i8* %20)
  store %struct._acc_t* %27, %struct._acc_t** @netrc_list, align 8
  br label %28

; <label>:28:                                     ; preds = %12, %26, %15, %9
  %29 = load %struct._acc_t*, %struct._acc_t** @netrc_list, align 8
  %30 = icmp ne %struct._acc_t* %29, null
  br i1 %30, label %31, label %97

; <label>:31:                                     ; preds = %28
  %32 = load i8*, i8** %1, align 8
  %33 = icmp ne i8* %32, null
  br i1 %33, label %34, label %37

; <label>:34:                                     ; preds = %31
  %35 = load i8*, i8** %2, align 8
  %36 = icmp ne i8* %35, null
  br i1 %36, label %97, label %37

; <label>:37:                                     ; preds = %34, %31
  %38 = load %struct._acc_t*, %struct._acc_t** @netrc_list, align 8
  %39 = icmp ne %struct._acc_t* %38, null
  br i1 %39, label %.lr.ph6.preheader, label %.loopexit3

.lr.ph6.preheader:                                ; preds = %37
  br label %.lr.ph6

.lr.ph6:                                          ; preds = %.lr.ph6.preheader, %48
  %.05 = phi %struct._acc_t* [ %50, %48 ], [ %38, %.lr.ph6.preheader ]
  call void @unroll_loop(i32 295)
  %40 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.05, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ne i8* %41, null
  br i1 %42, label %43, label %48

; <label>:43:                                     ; preds = %.lr.ph6
  %44 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.05, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @strcasecmp(i8* %45, i8* %0) #14
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %.loopexit3.loopexit

; <label>:48:                                     ; preds = %43, %.lr.ph6
  %49 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.05, i32 0, i32 3
  %50 = load %struct._acc_t*, %struct._acc_t** %49, align 8
  %51 = icmp ne %struct._acc_t* %50, null
  br i1 %51, label %.lr.ph6, label %.loopexit3.loopexit

.loopexit3.loopexit:                              ; preds = %43, %48
  %.0.lcssa.ph = phi %struct._acc_t* [ %50, %48 ], [ %.05, %43 ]
  br label %.loopexit3

.loopexit3:                                       ; preds = %.loopexit3.loopexit, %37
  %.0.lcssa = phi %struct._acc_t* [ %38, %37 ], [ %.0.lcssa.ph, %.loopexit3.loopexit ]
  %52 = icmp ne %struct._acc_t* %.0.lcssa, null
  br i1 %52, label %53, label %73

; <label>:53:                                     ; preds = %.loopexit3
  %54 = load i8*, i8** %1, align 8
  %55 = icmp ne i8* %54, null
  %56 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.0.lcssa, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  br i1 %55, label %58, label %66

; <label>:58:                                     ; preds = %53
  %59 = load i8*, i8** %1, align 8
  %60 = call i32 @strcmp(i8* %57, i8* %59) #14
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %65, label %62

; <label>:62:                                     ; preds = %58
  %63 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.0.lcssa, i32 0, i32 2
  %64 = load i8*, i8** %63, align 8
  store i8* %64, i8** %2, align 8
  br label %97

; <label>:65:                                     ; preds = %58
  store i8* null, i8** %2, align 8
  br label %97

; <label>:66:                                     ; preds = %53
  store i8* %57, i8** %1, align 8
  %67 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.0.lcssa, i32 0, i32 2
  %68 = load i8*, i8** %67, align 8
  %69 = icmp ne i8* %68, null
  br i1 %69, label %70, label %97

; <label>:70:                                     ; preds = %66
  %71 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.0.lcssa, i32 0, i32 2
  %72 = load i8*, i8** %71, align 8
  store i8* %72, i8** %2, align 8
  br label %97

; <label>:73:                                     ; preds = %.loopexit3
  %74 = icmp ne i32 %3, 0
  br i1 %74, label %75, label %97

; <label>:75:                                     ; preds = %73
  %76 = load i8*, i8** %1, align 8
  %77 = icmp ne i8* %76, null
  br i1 %77, label %97, label %78

; <label>:78:                                     ; preds = %75
  %79 = load %struct._acc_t*, %struct._acc_t** @netrc_list, align 8
  %80 = icmp ne %struct._acc_t* %79, null
  br i1 %80, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %78
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %84
  %.14 = phi %struct._acc_t* [ %86, %84 ], [ %79, %.lr.ph.preheader ]
  call void @unroll_loop(i32 296)
  %81 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.14, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = icmp ne i8* %82, null
  br i1 %83, label %84, label %.loopexit.loopexit

; <label>:84:                                     ; preds = %.lr.ph
  %85 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.14, i32 0, i32 3
  %86 = load %struct._acc_t*, %struct._acc_t** %85, align 8
  %87 = icmp ne %struct._acc_t* %86, null
  br i1 %87, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph, %84
  %.1.lcssa.ph = phi %struct._acc_t* [ %86, %84 ], [ %.14, %.lr.ph ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %78
  %.1.lcssa = phi %struct._acc_t* [ %79, %78 ], [ %.1.lcssa.ph, %.loopexit.loopexit ]
  %88 = icmp ne %struct._acc_t* %.1.lcssa, null
  br i1 %88, label %89, label %97

; <label>:89:                                     ; preds = %.loopexit
  %90 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.1.lcssa, i32 0, i32 1
  %91 = load i8*, i8** %90, align 8
  store i8* %91, i8** %1, align 8
  %92 = load i8*, i8** %2, align 8
  %93 = icmp ne i8* %92, null
  br i1 %93, label %97, label %94

; <label>:94:                                     ; preds = %89
  %95 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %.1.lcssa, i32 0, i32 2
  %96 = load i8*, i8** %95, align 8
  store i8* %96, i8** %2, align 8
  br label %97

; <label>:97:                                     ; preds = %89, %94, %.loopexit, %75, %73, %65, %62, %70, %66, %34, %28, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._acc_t* @parse_netrc(i8*) #7 {
  %2 = alloca i8*, align 8, !track !610
  %3 = alloca %struct._acc_t*, align 8, !track !611
  %4 = alloca %struct._acc_t*, align 8, !track !612
  %5 = alloca i64, align 8, !track !613
  store i8* null, i8** %2, align 8
  store i64 0, i64* %5, align 8
  store %struct._acc_t* null, %struct._acc_t** %4, align 8
  store %struct._acc_t* null, %struct._acc_t** %3, align 8
  %6 = getelementptr [2 x i8], [2 x i8]* @.str.2.1093, i32 0, i32 0
  %7 = call %struct._IO_FILE* @fopen(i8* %0, i8* %6), !track !614
  %8 = icmp ne %struct._IO_FILE* %7, null
  br i1 %8, label %19, label %9

; <label>:9:                                      ; preds = %1
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = getelementptr [26 x i8], [26 x i8]* @.str.3.1094, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8, !track !615
  %13 = load i8*, i8** @exec_name, align 8
  %14 = call i32* @__errno_location() #15
  %15 = load i32, i32* %14, align 4
  %16 = call i8* @strerror(i32 %15) #8, !track !616
  %17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* %12, i8* %13, i8* %0, i8* %16)
  %18 = load %struct._acc_t*, %struct._acc_t** %4, align 8
  br label %200

; <label>:19:                                     ; preds = %1
  %20 = call i64 @getline(i8** %2, i64* %5, %struct._IO_FILE* %7)
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %.lr.ph25.preheader, label %._crit_edge26

.lr.ph25.preheader:                               ; preds = %19
  br label %.lr.ph25

.lr.ph25:                                         ; preds = %.lr.ph25.preheader, %.loopexit
  %.0123 = phi i32 [ %.2.lcssa, %.loopexit ], [ 0, %.lr.ph25.preheader ]
  %.01022 = phi i32 [ %35, %.loopexit ], [ 0, %.lr.ph25.preheader ]
  %.01121 = phi i8* [ %.112.lcssa, %.loopexit ], [ null, %.lr.ph25.preheader ]
  call void @unroll_loop(i32 297)
  %22 = load i8*, i8** %2, align 8
  br label %23

; <label>:23:                                     ; preds = %31, %.lr.ph25
  %.05 = phi i8* [ %22, %.lr.ph25 ], [ %33, %31 ]
  call void @unroll_loop(i32 298)
  %24 = load i8, i8* %.05, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %23
  %28 = load i8, i8* %.05, align 1
  %29 = sext i8 %28 to i32
  %30 = call zeroext i1 @c_isspace(i32 %29)
  br label %31

; <label>:31:                                     ; preds = %27, %23
  %32 = phi i1 [ false, %23 ], [ %30, %27 ]
  %33 = getelementptr inbounds i8, i8* %.05, i32 1
  br i1 %32, label %23, label %34

; <label>:34:                                     ; preds = %31
  %.05.lcssa = phi i8* [ %.05, %31 ]
  %35 = add nuw nsw i32 %.01022, 1
  %36 = icmp eq i32 %.0123, 3
  br i1 %36, label %37, label %40

; <label>:37:                                     ; preds = %34
  %38 = load i8, i8* %.05.lcssa, align 1
  %39 = icmp ne i8 %38, 0
  %spec.select = select i1 %39, i32 %.0123, i32 0
  br label %40

; <label>:40:                                     ; preds = %37, %34
  %.1 = phi i32 [ %.0123, %34 ], [ %spec.select, %37 ]
  call void @unroll_loop(i32 299)
  %41 = load i8, i8* %.05.lcssa, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp ne i32 %42, 0
  %44 = icmp ne i32 %.1, 3
  %spec.select19 = select i1 %43, i1 %44, i1 false
  br i1 %spec.select19, label %.preheader.lr.ph, label %.loopexit

.preheader.lr.ph:                                 ; preds = %40
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %176
  %.213 = phi i32 [ %.1, %.preheader.lr.ph ], [ %.9, %176 ]
  %.0212 = phi i32 [ 0, %.preheader.lr.ph ], [ %.24, %176 ]
  %.1611 = phi i8* [ %.05.lcssa, %.preheader.lr.ph ], [ %.49, %176 ]
  %.11210 = phi i8* [ %.01121, %.preheader.lr.ph ], [ %.718, %176 ]
  br label %45

; <label>:45:                                     ; preds = %.preheader, %53
  %.27 = phi i8* [ %55, %53 ], [ %.1611, %.preheader ]
  call void @unroll_loop(i32 300)
  %46 = load i8, i8* %.27, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %53

; <label>:49:                                     ; preds = %45
  %50 = load i8, i8* %.27, align 1
  %51 = sext i8 %50 to i32
  %52 = call zeroext i1 @c_isspace(i32 %51)
  br label %53

; <label>:53:                                     ; preds = %49, %45
  %54 = phi i1 [ false, %45 ], [ %52, %49 ]
  %55 = getelementptr inbounds i8, i8* %.27, i32 1
  br i1 %54, label %45, label %56

; <label>:56:                                     ; preds = %53
  %.27.lcssa = phi i8* [ %.27, %53 ]
  %57 = load i8, i8* %.27.lcssa, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp eq i32 %58, 35
  br i1 %59, label %..loopexit_crit_edge16, label %60

; <label>:60:                                     ; preds = %56
  %61 = load i8, i8* %.27.lcssa, align 1
  %62 = icmp ne i8 %61, 0
  br i1 %62, label %63, label %..loopexit_crit_edge19

; <label>:63:                                     ; preds = %60
  %64 = load i8, i8* %.27.lcssa, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp eq i32 %65, 34
  br i1 %66, label %67, label %68

; <label>:67:                                     ; preds = %63
  call void @shift_left(i8* %.27.lcssa)
  br label %68

; <label>:68:                                     ; preds = %67, %63
  %.13 = phi i32 [ 1, %67 ], [ %.0212, %63 ]
  call void @unroll_loop(i32 301)
  %69 = load i8, i8* %.27.lcssa, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %.lr.ph6, label %.critedge

.lr.ph6:                                          ; preds = %68
  br label %72

; <label>:72:                                     ; preds = %.lr.ph6, %91
  %.384 = phi i8* [ %.27.lcssa, %.lr.ph6 ], [ %92, %91 ]
  %73 = icmp ne i32 %.13, 0
  %74 = load i8, i8* %.384, align 1
  %75 = sext i8 %74 to i32
  br i1 %73, label %76, label %79

; <label>:76:                                     ; preds = %72
  %77 = icmp ne i32 %75, 34
  %78 = zext i1 %77 to i32
  br label %83

; <label>:79:                                     ; preds = %72
  %80 = call zeroext i1 @c_isspace(i32 %75)
  %81 = xor i1 %80, true
  %82 = zext i1 %81 to i32
  br label %83

; <label>:83:                                     ; preds = %79, %76
  %84 = phi i32 [ %78, %76 ], [ %82, %79 ]
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %..critedge_crit_edge7

; <label>:86:                                     ; preds = %83
  %87 = load i8, i8* %.384, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp eq i32 %88, 92
  br i1 %89, label %90, label %91

; <label>:90:                                     ; preds = %86
  call void @shift_left(i8* %.384)
  br label %91

; <label>:91:                                     ; preds = %90, %86
  %92 = getelementptr inbounds i8, i8* %.384, i32 1
  call void @unroll_loop(i32 301)
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %72, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %91
  %split = phi i8* [ %92, %91 ]
  br label %.critedge

..critedge_crit_edge7:                            ; preds = %83
  %split8 = phi i8* [ %.384, %83 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge7, %..critedge_crit_edge, %68
  %.38.lcssa = phi i8* [ %split8, %..critedge_crit_edge7 ], [ %split, %..critedge_crit_edge ], [ %.27.lcssa, %68 ]
  %96 = icmp ne i32 %.13, 0
  br i1 %96, label %97, label %98

; <label>:97:                                     ; preds = %.critedge
  call void @shift_left(i8* %.38.lcssa)
  br label %98

; <label>:98:                                     ; preds = %97, %.critedge
  %.24 = phi i32 [ 0, %97 ], [ %.13, %.critedge ]
  %99 = load i8, i8* %.38.lcssa, align 1
  %100 = icmp ne i8 %99, 0
  br i1 %100, label %101, label %103

; <label>:101:                                    ; preds = %98
  %102 = getelementptr inbounds i8, i8* %.38.lcssa, i32 1
  store i8 0, i8* %.38.lcssa, align 1
  br label %103

; <label>:103:                                    ; preds = %101, %98
  %.49 = phi i8* [ %102, %101 ], [ %.38.lcssa, %98 ]
  switch i32 %.213, label %134 [
    i32 2, label %104
    i32 4, label %113
    i32 5, label %117
    i32 3, label %126
    i32 1, label %130
  ]

; <label>:104:                                    ; preds = %103
  %105 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %106 = icmp ne %struct._acc_t* %105, null
  br i1 %106, label %107, label %111

; <label>:107:                                    ; preds = %104
  %108 = call noalias i8* @xstrdup(i8* %.27.lcssa)
  %109 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %110 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %109, i32 0, i32 1
  store i8* %108, i8** %110, align 8
  br label %134

; <label>:111:                                    ; preds = %104
  %112 = getelementptr [6 x i8], [6 x i8]* @.str.4.1095, i32 0, i32 0
  br label %134

; <label>:113:                                    ; preds = %103
  call void @maybe_add_to_list(%struct._acc_t** %3, %struct._acc_t** %4)
  %114 = call noalias i8* @xstrdup(i8* %.27.lcssa)
  %115 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %116 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %115, i32 0, i32 0
  store i8* %114, i8** %116, align 8
  br label %134

; <label>:117:                                    ; preds = %103
  %118 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %119 = icmp ne %struct._acc_t* %118, null
  br i1 %119, label %120, label %124

; <label>:120:                                    ; preds = %117
  %121 = call noalias i8* @xstrdup(i8* %.27.lcssa)
  %122 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %123 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %122, i32 0, i32 2
  store i8* %121, i8** %123, align 8
  br label %134

; <label>:124:                                    ; preds = %117
  %125 = getelementptr [9 x i8], [9 x i8]* @.str.5.1096, i32 0, i32 0
  br label %134

; <label>:126:                                    ; preds = %103
  %127 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %128 = icmp ne %struct._acc_t* %127, null
  %129 = getelementptr [7 x i8], [7 x i8]* @.str.6.1097, i32 0, i32 0
  %spec.select2 = select i1 %128, i8* %.11210, i8* %129
  br label %134

; <label>:130:                                    ; preds = %103
  %131 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %132 = icmp ne %struct._acc_t* %131, null
  %133 = getelementptr [8 x i8], [8 x i8]* @.str.7.1098, i32 0, i32 0
  %spec.select3 = select i1 %132, i8* %.11210, i8* %133
  br label %134

; <label>:134:                                    ; preds = %120, %124, %107, %111, %103, %130, %126, %113
  %.617 = phi i8* [ %spec.select3, %130 ], [ %spec.select2, %126 ], [ %.11210, %113 ], [ %.11210, %107 ], [ %112, %111 ], [ %.11210, %120 ], [ %125, %124 ], [ %.11210, %103 ]
  %135 = icmp ne i8* %.617, null
  br i1 %135, label %136, label %143

; <label>:136:                                    ; preds = %134
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %138 = getelementptr [62 x i8], [62 x i8]* @.str.8.1099, i32 0, i32 0
  %139 = call i8* @gettext(i8* %138) #8, !track !617
  %140 = load i8*, i8** @exec_name, align 8
  %141 = call i8* @quote(i8* %.617)
  %142 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* %139, i8* %140, i8* %0, i32 %35, i8* %141)
  br label %143

; <label>:143:                                    ; preds = %136, %134
  %.718 = phi i8* [ null, %136 ], [ %.617, %134 ]
  %144 = icmp ne i32 %.213, 0
  br i1 %144, label %176, label %145

; <label>:145:                                    ; preds = %143
  %146 = getelementptr [8 x i8], [8 x i8]* @.str.7.1098, i32 0, i32 0
  %147 = call i32 @strcmp(i8* %.27.lcssa, i8* %146) #14
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %176

; <label>:149:                                    ; preds = %145
  %150 = getelementptr [8 x i8], [8 x i8]* @.str.9.1100, i32 0, i32 0
  %151 = call i32 @strcmp(i8* %.27.lcssa, i8* %150) #14
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %154, label %153

; <label>:153:                                    ; preds = %149
  call void @maybe_add_to_list(%struct._acc_t** %3, %struct._acc_t** %4)
  br label %176

; <label>:154:                                    ; preds = %149
  %155 = getelementptr [6 x i8], [6 x i8]* @.str.4.1095, i32 0, i32 0
  %156 = call i32 @strcmp(i8* %.27.lcssa, i8* %155) #14
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %176

; <label>:158:                                    ; preds = %154
  %159 = getelementptr [7 x i8], [7 x i8]* @.str.6.1097, i32 0, i32 0
  %160 = call i32 @strcmp(i8* %.27.lcssa, i8* %159) #14
  %161 = icmp ne i32 %160, 0
  br i1 %161, label %162, label %176

; <label>:162:                                    ; preds = %158
  %163 = getelementptr [8 x i8], [8 x i8]* @.str.10.1101, i32 0, i32 0
  %164 = call i32 @strcmp(i8* %.27.lcssa, i8* %163) #14
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %176

; <label>:166:                                    ; preds = %162
  %167 = getelementptr [9 x i8], [9 x i8]* @.str.5.1096, i32 0, i32 0
  %168 = call i32 @strcmp(i8* %.27.lcssa, i8* %167) #14
  %169 = icmp ne i32 %168, 0
  br i1 %169, label %170, label %176

; <label>:170:                                    ; preds = %166
  %171 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %172 = getelementptr [31 x i8], [31 x i8]* @.str.11.1102, i32 0, i32 0
  %173 = call i8* @gettext(i8* %172) #8, !track !618
  %174 = load i8*, i8** @exec_name, align 8
  %175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %171, i8* %173, i8* %174, i8* %0, i32 %35, i8* %.27.lcssa)
  br label %176

; <label>:176:                                    ; preds = %145, %154, %162, %166, %170, %158, %153, %143
  %.9 = phi i32 [ 0, %143 ], [ 1, %145 ], [ %.213, %153 ], [ 2, %154 ], [ 3, %158 ], [ 4, %162 ], [ %.213, %170 ], [ 5, %166 ]
  call void @unroll_loop(i32 299)
  %177 = load i8, i8* %.49, align 1
  %178 = sext i8 %177 to i32
  %179 = icmp ne i32 %178, 0
  %180 = icmp ne i32 %.9, 3
  %spec.select1 = select i1 %179, i1 %180, i1 false
  br i1 %spec.select1, label %.preheader, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %176
  %split14 = phi i8* [ %.718, %176 ]
  %split15 = phi i32 [ %.9, %176 ]
  br label %.loopexit

..loopexit_crit_edge16:                           ; preds = %56
  %split17 = phi i8* [ %.11210, %56 ]
  %split18 = phi i32 [ %.213, %56 ]
  br label %.loopexit

..loopexit_crit_edge19:                           ; preds = %60
  %split20 = phi i8* [ %.11210, %60 ]
  %split21 = phi i32 [ %.213, %60 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge19, %..loopexit_crit_edge16, %..loopexit_crit_edge, %40
  %.112.lcssa = phi i8* [ %split20, %..loopexit_crit_edge19 ], [ %split17, %..loopexit_crit_edge16 ], [ %split14, %..loopexit_crit_edge ], [ %.01121, %40 ]
  %.2.lcssa = phi i32 [ %split21, %..loopexit_crit_edge19 ], [ %split18, %..loopexit_crit_edge16 ], [ %split15, %..loopexit_crit_edge ], [ %.1, %40 ]
  %181 = call i64 @getline(i8** %2, i64* %5, %struct._IO_FILE* %7)
  %182 = icmp sgt i64 %181, 0
  br i1 %182, label %.lr.ph25, label %._crit_edge26.loopexit

._crit_edge26.loopexit:                           ; preds = %.loopexit
  br label %._crit_edge26

._crit_edge26:                                    ; preds = %._crit_edge26.loopexit, %19
  %183 = load i8*, i8** %2, align 8
  call void @free(i8* %183) #8
  store i8* null, i8** %2, align 8
  %184 = call i32 @fclose(%struct._IO_FILE* %7)
  call void @maybe_add_to_list(%struct._acc_t** %3, %struct._acc_t** %4)
  %185 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %186 = bitcast %struct._acc_t* %185 to i8*
  call void @free(i8* %186) #8
  store %struct._acc_t* null, %struct._acc_t** %3, align 8
  %187 = load %struct._acc_t*, %struct._acc_t** %4, align 8
  store %struct._acc_t* %187, %struct._acc_t** %3, align 8
  store %struct._acc_t* null, %struct._acc_t** %4, align 8
  %188 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %189 = icmp ne %struct._acc_t* %188, null
  br i1 %189, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge26
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 302)
  %190 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %191 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %190, i32 0, i32 3
  %192 = load %struct._acc_t*, %struct._acc_t** %191, align 8
  %193 = load %struct._acc_t*, %struct._acc_t** %4, align 8
  %194 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %195 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %194, i32 0, i32 3
  store %struct._acc_t* %193, %struct._acc_t** %195, align 8
  %196 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  store %struct._acc_t* %196, %struct._acc_t** %4, align 8
  store %struct._acc_t* %192, %struct._acc_t** %3, align 8
  %197 = load %struct._acc_t*, %struct._acc_t** %3, align 8
  %198 = icmp ne %struct._acc_t* %197, null
  br i1 %198, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge26
  %199 = load %struct._acc_t*, %struct._acc_t** %4, align 8
  br label %200

; <label>:200:                                    ; preds = %._crit_edge, %9
  %.0 = phi %struct._acc_t* [ %199, %._crit_edge ], [ %18, %9 ]
  ret %struct._acc_t* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @shift_left(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i8* [ %6, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 303)
  %4 = getelementptr inbounds i8, i8* %.01, i64 1
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %.01, align 1
  %6 = getelementptr inbounds i8, i8* %.01, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_add_to_list(%struct._acc_t**, %struct._acc_t**) #0 {
  %3 = load %struct._acc_t*, %struct._acc_t** %0, align 8
  %4 = load %struct._acc_t*, %struct._acc_t** %1, align 8
  %magicptr = ptrtoint %struct._acc_t* %3 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %23, label %5

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, null
  br i1 %8, label %19, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  call void @free(i8* %11) #8
  %12 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 0
  store i8* null, i8** %12, align 8
  %13 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  call void @free(i8* %14) #8
  %15 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 1
  store i8* null, i8** %15, align 8
  %16 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 2
  %17 = load i8*, i8** %16, align 8
  call void @free(i8* %17) #8
  %18 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 2
  store i8* null, i8** %18, align 8
  br label %26

; <label>:19:                                     ; preds = %5
  %20 = icmp ne %struct._acc_t* %3, null
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds %struct._acc_t, %struct._acc_t* %3, i32 0, i32 3
  store %struct._acc_t* %4, %struct._acc_t** %22, align 8
  br label %23

; <label>:23:                                     ; preds = %2, %21, %19
  %.0 = phi %struct._acc_t* [ %3, %21 ], [ %4, %19 ], [ %4, %2 ]
  %24 = call noalias i8* @xmalloc(i64 32)
  %25 = bitcast i8* %24 to %struct._acc_t*
  br label %26

; <label>:26:                                     ; preds = %23, %9
  %.01 = phi %struct._acc_t* [ %25, %23 ], [ %3, %9 ]
  %.1 = phi %struct._acc_t* [ %.0, %23 ], [ %4, %9 ]
  %27 = bitcast %struct._acc_t* %.01 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 32, i1 false)
  store %struct._acc_t* %.01, %struct._acc_t** %0, align 8
  store %struct._acc_t* %.1, %struct._acc_t** %1, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @valid_progress_implementation_p(i8*) #0 {
  %2 = call i8* @strchr(i8* %0, i32 58) #14
  %3 = icmp ne i8* %2, null
  br i1 %3, label %4, label %8

; <label>:4:                                      ; preds = %1
  %5 = ptrtoint i8* %2 to i64
  %6 = ptrtoint i8* %0 to i64
  %7 = sub i64 %5, %6
  br label %10

; <label>:8:                                      ; preds = %1
  %9 = call i64 @strlen(i8* %0) #14
  br label %10

; <label>:10:                                     ; preds = %8, %4
  %11 = phi i64 [ %7, %4 ], [ %9, %8 ]
  %12 = getelementptr [2 x %struct.progress_implementation], [2 x %struct.progress_implementation]* @implementations, i32 0, i32 0
  br label %13

; <label>:13:                                     ; preds = %10, %18
  %.014 = phi %struct.progress_implementation* [ %12, %10 ], [ %20, %18 ]
  %.023 = phi i64 [ 0, %10 ], [ %19, %18 ]
  call void @unroll_loop(i32 304)
  %14 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %.014, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @strncmp(i8* %15, i8* %0, i64 %11) #14
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %22

; <label>:18:                                     ; preds = %13
  %19 = add nuw nsw i64 %.023, 1
  %20 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %.014, i32 1
  %21 = icmp ult i64 %19, 2
  br i1 %21, label %13, label %22

; <label>:22:                                     ; preds = %18, %13
  %.0 = phi i1 [ true, %13 ], [ false, %18 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @dot_create(i8*, i64, i64) #0 {
  %4 = call noalias i8* @xcalloc(i64 1, i64 48)
  %5 = bitcast i8* %4 to %struct.dot_progress*
  %6 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 0
  store i64 %1, i64* %6, align 8
  %7 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 1
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %63

; <label>:11:                                     ; preds = %3
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  %18 = load i32, i32* %17, align 8
  %19 = sext i32 %18 to i64
  %20 = mul nsw i64 %16, %19
  %21 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = srem i64 %22, %20
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = sext i32 %24 to i64
  %28 = sub nsw i64 %26, %27
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %39

; <label>:30:                                     ; preds = %11
  %31 = sdiv i64 %28, 1024
  %32 = call i32 @numdigit(i64 %31)
  %33 = icmp slt i32 %32, 6
  %spec.select = select i1 %33, i32 6, i32 %32
  %34 = getelementptr [21 x i8], [21 x i8]* @.str.2.1150, i32 0, i32 0
  %35 = call i8* @gettext(i8* %34) #8
  %36 = add nsw i32 2, %spec.select
  %37 = call i8* @number_to_static_string(i64 %31)
  %38 = getelementptr [1 x i8], [1 x i8]* @.str.3.1123, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %35, i32 %36, i8* %38, i8* %37)
  br label %39

; <label>:39:                                     ; preds = %30, %11
  %40 = sdiv i64 %28, 1024
  %41 = call i8* @number_to_static_string(i64 %40)
  %42 = getelementptr [6 x i8], [6 x i8]* @.str.4.1143, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %42, i8* %41)
  %43 = icmp sge i32 %24, %14
  br i1 %43, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %39
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %52
  %.012 = phi i32 [ %57, %52 ], [ %24, %.lr.ph.preheader ]
  call void @unroll_loop(i32 305)
  %44 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 5
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  %47 = load i32, i32* %46, align 4
  %48 = srem i32 %45, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

; <label>:50:                                     ; preds = %.lr.ph
  %51 = getelementptr [2 x i8], [2 x i8]* @.str.5.1124, i32 0, i32 0
  call void @logputs(i32 4, i8* %51)
  br label %52

; <label>:52:                                     ; preds = %50, %.lr.ph
  %53 = getelementptr [2 x i8], [2 x i8]* @.str.6.1151, i32 0, i32 0
  call void @logputs(i32 4, i8* %53)
  %54 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 5
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %54, align 4
  %57 = sub nsw i32 %.012, %14
  %58 = icmp sge i32 %57, %14
  br i1 %58, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %52
  %.01.lcssa.ph = phi i32 [ %57, %52 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %39
  %.01.lcssa = phi i32 [ %24, %39 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %59 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 2
  store i32 %.01.lcssa, i32* %59, align 8
  %60 = sdiv i64 %28, %20
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %5, i32 0, i32 4
  store i32 %61, i32* %62, align 8
  br label %63

; <label>:63:                                     ; preds = %._crit_edge, %3
  %64 = bitcast %struct.dot_progress* %5 to i8*
  ret i8* %64
}

; Function Attrs: noinline nounwind uwtable
define internal void @dot_update(i8*, i64, double) #0 {
  %4 = bitcast i8* %0 to %struct.dot_progress*
  %5 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %4, i32 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = add nsw i64 %7, %1
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %5, align 8
  %10 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %4, i32 0, i32 3
  store double %2, double* %10, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @dot_draw(i8*) #0 {
  %2 = bitcast i8* %0 to %struct.dot_progress*
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %7, %10
  call void @log_set_flush(i1 zeroext false)
  %12 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = icmp sge i32 %13, %5
  br i1 %14, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %52
  call void @unroll_loop(i32 307)
  %15 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %26

; <label>:18:                                     ; preds = %.lr.ph
  %19 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %21, %11
  %23 = sdiv i64 %22, 1024
  %24 = call i8* @number_to_static_string(i64 %23)
  %25 = getelementptr [6 x i8], [6 x i8]* @.str.4.1143, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %25, i8* %24)
  br label %26

; <label>:26:                                     ; preds = %18, %.lr.ph
  %27 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  %30 = load i32, i32* %29, align 4
  %31 = srem i32 %28, %30
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

; <label>:33:                                     ; preds = %26
  %34 = getelementptr [2 x i8], [2 x i8]* @.str.5.1124, i32 0, i32 0
  call void @logputs(i32 4, i8* %34)
  br label %35

; <label>:35:                                     ; preds = %33, %26
  %36 = getelementptr [2 x i8], [2 x i8]* @.str.7.1149, i32 0, i32 0
  call void @logputs(i32 4, i8* %36)
  %37 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 5
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %37, align 4
  %40 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 5
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  %43 = load i32, i32* %42, align 8
  %44 = icmp sge i32 %41, %43
  br i1 %44, label %45, label %52

; <label>:45:                                     ; preds = %35
  %46 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 4
  %47 = load i32, i32* %46, align 8
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %46, align 8
  %49 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 5
  store i32 0, i32* %49, align 4
  %50 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 3
  %51 = load double, double* %50, align 8
  call void @print_row_stats(%struct.dot_progress* %2, double %51, i1 zeroext false)
  br label %52

; <label>:52:                                     ; preds = %35, %45
  %53 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %2, i32 0, i32 2
  %54 = load i32, i32* %53, align 8
  %55 = sub nsw i32 %54, %5
  store i32 %55, i32* %53, align 8
  %56 = load i32, i32* %12, align 8
  %57 = icmp sge i32 %56, %5
  br i1 %57, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %52
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  call void @log_set_flush(i1 zeroext true)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @dot_finish(i8*, double) #0 {
  %3 = bitcast i8* %0 to %struct.dot_progress*
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = mul nsw i64 %5, %8
  call void @log_set_flush(i1 zeroext false)
  %10 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %3, i32 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %21

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %3, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = sext i32 %15 to i64
  %17 = mul nsw i64 %16, %9
  %18 = sdiv i64 %17, 1024
  %19 = call i8* @number_to_static_string(i64 %18)
  %20 = getelementptr [6 x i8], [6 x i8]* @.str.4.1143, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %20, i8* %19)
  br label %21

; <label>:21:                                     ; preds = %13, %2
  %22 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %3, i32 0, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  %25 = load i32, i32* %24, align 8
  %26 = icmp slt i32 %23, %25
  br i1 %26, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %21
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %33
  %.01 = phi i32 [ %35, %33 ], [ %23, %.lr.ph.preheader ]
  call void @unroll_loop(i32 308)
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  %28 = load i32, i32* %27, align 4
  %29 = srem i32 %.01, %28
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %.lr.ph
  %32 = getelementptr [2 x i8], [2 x i8]* @.str.5.1124, i32 0, i32 0
  call void @logputs(i32 4, i8* %32)
  br label %33

; <label>:33:                                     ; preds = %31, %.lr.ph
  %34 = getelementptr [2 x i8], [2 x i8]* @.str.5.1124, i32 0, i32 0
  call void @logputs(i32 4, i8* %34)
  %35 = add nsw i32 %.01, 1
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  %37 = load i32, i32* %36, align 8
  %38 = icmp slt i32 %35, %37
  br i1 %38, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %33
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %21
  call void @print_row_stats(%struct.dot_progress* %3, double %1, i1 zeroext true)
  %39 = getelementptr [3 x i8], [3 x i8]* @.str.18.1144, i32 0, i32 0
  call void @logputs(i32 0, i8* %39)
  call void @log_set_flush(i1 zeroext false)
  %40 = bitcast %struct.dot_progress* %3 to i8*
  call void @free(i8* %40) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @dot_set_params(i8*) #0 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = load i8, i8* %0, align 1
  %5 = icmp ne i8 %4, 0
  br i1 %5, label %9, label %6

; <label>:6:                                      ; preds = %3, %1
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 105
  %8 = load i8*, i8** %7, align 8
  br label %9

; <label>:9:                                      ; preds = %6, %3
  %.0 = phi i8* [ %0, %3 ], [ %8, %6 ]
  %10 = icmp ne i8* %.0, null
  br i1 %10, label %11, label %49

; <label>:11:                                     ; preds = %9
  %12 = getelementptr [8 x i8], [8 x i8]* @.str.19.1138, i32 0, i32 0
  %13 = call i32 @c_strcasecmp(i8* %.0, i8* %12) #14
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %11
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  store i64 1024, i64* %16, align 8
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  store i32 10, i32* %17, align 4
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  store i32 50, i32* %18, align 8
  br label %49

; <label>:19:                                     ; preds = %11
  %20 = getelementptr [7 x i8], [7 x i8]* @.str.20.1139, i32 0, i32 0
  %21 = call i32 @c_strcasecmp(i8* %.0, i8* %20) #14
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %27, label %23

; <label>:23:                                     ; preds = %19
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  store i64 8192, i64* %24, align 8
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  store i32 16, i32* %25, align 4
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  store i32 48, i32* %26, align 8
  br label %49

; <label>:27:                                     ; preds = %19
  %28 = getelementptr [5 x i8], [5 x i8]* @.str.21.1140, i32 0, i32 0
  %29 = call i32 @c_strcasecmp(i8* %.0, i8* %28) #14
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %35, label %31

; <label>:31:                                     ; preds = %27
  %32 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  store i64 65536, i64* %32, align 8
  %33 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  store i32 8, i32* %33, align 4
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  store i32 48, i32* %34, align 8
  br label %49

; <label>:35:                                     ; preds = %27
  %36 = getelementptr [5 x i8], [5 x i8]* @.str.22.1141, i32 0, i32 0
  %37 = call i32 @c_strcasecmp(i8* %.0, i8* %36) #14
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %43, label %39

; <label>:39:                                     ; preds = %35
  %40 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  store i64 1048576, i64* %40, align 8
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 108
  store i32 8, i32* %41, align 4
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  store i32 32, i32* %42, align 8
  br label %49

; <label>:43:                                     ; preds = %35
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %45 = getelementptr [56 x i8], [56 x i8]* @.str.23.1142, i32 0, i32 0
  %46 = call i8* @gettext(i8* %45) #8, !track !619
  %47 = call i8* @quote(i8* %.0)
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* %46, i8* %47)
  br label %49

; <label>:49:                                     ; preds = %23, %39, %43, %31, %9, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @bar_create(i8*, i64, i64) #0 {
  %4 = call noalias i8* @xcalloc(i64 1, i64 456)
  %5 = bitcast i8* %4 to %struct.bar_progress*
  %6 = icmp sgt i64 %1, %2
  %spec.select = select i1 %6, i64 %1, i64 %2
  %7 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %5, i32 0, i32 1
  store i64 %1, i64* %7, align 8
  %8 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %5, i32 0, i32 2
  store i64 %spec.select, i64* %8, align 8
  %9 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %5, i32 0, i32 0
  store i8* %0, i8** %9, align 8
  %10 = load i32, i32* @screen_width, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %15

; <label>:12:                                     ; preds = %3
  %13 = load volatile i32, i32* @received_sigwinch, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %25

; <label>:15:                                     ; preds = %12, %3
  %16 = call i32 @determine_screen_width()
  store i32 %16, i32* @screen_width, align 4
  %17 = load i32, i32* @screen_width, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %20, label %19

; <label>:19:                                     ; preds = %15
  store i32 80, i32* @screen_width, align 4
  br label %24

; <label>:20:                                     ; preds = %15
  %21 = load i32, i32* @screen_width, align 4
  %22 = icmp slt i32 %21, 45
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %20
  store i32 45, i32* @screen_width, align 4
  br label %24

; <label>:24:                                     ; preds = %20, %23, %19
  store volatile i32 0, i32* @received_sigwinch, align 4
  br label %25

; <label>:25:                                     ; preds = %24, %12
  %26 = load i32, i32* @screen_width, align 4
  %27 = sub nsw i32 %26, 1
  %28 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %5, i32 0, i32 6
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %5, i32 0, i32 6
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, 100
  %32 = sext i32 %31 to i64
  %33 = call noalias i8* @xmalloc(i64 %32)
  %34 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %5, i32 0, i32 7
  store i8* %33, i8** %34, align 8
  %35 = getelementptr [2 x i8], [2 x i8]* @.str.24.1114, i32 0, i32 0
  call void @logputs(i32 0, i8* %35)
  call void @create_image(%struct.bar_progress* %5, double 0.000000e+00, i1 zeroext false)
  %36 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %5, i32 0, i32 7
  %37 = load i8*, i8** %36, align 8
  call void @display_image(i8* %37)
  %38 = bitcast %struct.bar_progress* %5 to i8*
  ret i8* %38
}

; Function Attrs: noinline nounwind uwtable
define internal void @bar_update(i8*, i64, double) #0 {
  %4 = bitcast i8* %0 to %struct.bar_progress*
  %5 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 5
  store double %2, double* %5, align 8
  %6 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, %1
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %10, 0
  br i1 %11, label %12, label %28

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %14, %16
  %18 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = icmp sgt i64 %17, %19
  br i1 %20, label %21, label %28

; <label>:21:                                     ; preds = %12
  %22 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %23, %25
  %27 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %4, i32 0, i32 2
  store i64 %26, i64* %27, align 8
  br label %28

; <label>:28:                                     ; preds = %21, %12, %3
  call void @update_speed_ring(%struct.bar_progress* %4, i64 %1, double %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @bar_draw(i8*) #0 {
  %2 = bitcast i8* %0 to %struct.bar_progress*
  %3 = load volatile i32, i32* @received_sigwinch, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %31

; <label>:5:                                      ; preds = %1
  %6 = load i32, i32* @screen_width, align 4
  %7 = call i32 @determine_screen_width()
  store i32 %7, i32* @screen_width, align 4
  %8 = load i32, i32* @screen_width, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %5
  store i32 80, i32* @screen_width, align 4
  br label %15

; <label>:11:                                     ; preds = %5
  %12 = load i32, i32* @screen_width, align 4
  %13 = icmp slt i32 %12, 45
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %11
  store i32 45, i32* @screen_width, align 4
  br label %15

; <label>:15:                                     ; preds = %11, %14, %10
  %16 = load i32, i32* @screen_width, align 4
  %17 = icmp ne i32 %16, %6
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %15
  %19 = load i32, i32* @screen_width, align 4
  %20 = sub nsw i32 %19, 1
  %21 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 6
  store i32 %20, i32* %21, align 8
  %22 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 7
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 6
  %25 = load i32, i32* %24, align 8
  %26 = add nsw i32 %25, 100
  %27 = sext i32 %26 to i64
  %28 = call i8* @xrealloc(i8* %23, i64 %27)
  %29 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 7
  store i8* %28, i8** %29, align 8
  br label %30

; <label>:30:                                     ; preds = %18, %15
  %.0 = phi i8 [ 1, %18 ], [ 0, %15 ]
  store volatile i32 0, i32* @received_sigwinch, align 4
  br label %31

; <label>:31:                                     ; preds = %30, %1
  %.1 = phi i8 [ %.0, %30 ], [ 0, %1 ]
  %32 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 5
  %33 = load double, double* %32, align 8
  %34 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 4
  %35 = load double, double* %34, align 8
  %36 = fsub double %33, %35
  %37 = fcmp olt double %36, 2.000000e-01
  br i1 %37, label %38, label %40

; <label>:38:                                     ; preds = %31
  %39 = trunc i8 %.1 to i1
  br i1 %39, label %40, label %48

; <label>:40:                                     ; preds = %38, %31
  %41 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 5
  %42 = load double, double* %41, align 8
  call void @create_image(%struct.bar_progress* %2, double %42, i1 zeroext false)
  %43 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 7
  %44 = load i8*, i8** %43, align 8
  call void @display_image(i8* %44)
  %45 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 5
  %46 = load double, double* %45, align 8
  %47 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %2, i32 0, i32 4
  store double %46, double* %47, align 8
  br label %48

; <label>:48:                                     ; preds = %38, %40
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @bar_finish(i8*, double) #0 {
  %3 = bitcast i8* %0 to %struct.bar_progress*
  %4 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp sgt i64 %5, 0
  br i1 %6, label %7, label %23

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add nsw i64 %9, %11
  %13 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %12, %14
  br i1 %15, label %16, label %23

; <label>:16:                                     ; preds = %7
  %17 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %18, %20
  %22 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 2
  store i64 %21, i64* %22, align 8
  br label %23

; <label>:23:                                     ; preds = %16, %7, %2
  call void @create_image(%struct.bar_progress* %3, double %1, i1 zeroext true)
  %24 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 7
  %25 = load i8*, i8** %24, align 8
  call void @display_image(i8* %25)
  %26 = getelementptr [2 x i8], [2 x i8]* @.str.24.1114, i32 0, i32 0
  call void @logputs(i32 0, i8* %26)
  %27 = getelementptr [2 x i8], [2 x i8]* @.str.24.1114, i32 0, i32 0
  call void @logputs(i32 4, i8* %27)
  %28 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 7
  %29 = load i8*, i8** %28, align 8
  call void @free(i8* %29) #8
  %30 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %3, i32 0, i32 7
  store i8* null, i8** %30, align 8
  %31 = bitcast %struct.bar_progress* %3 to i8*
  call void @free(i8* %31) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @bar_set_params(i8*) #0 {
  %2 = getelementptr [5 x i8], [5 x i8]* @.str.40.1107, i32 0, i32 0
  %3 = call i8* @getenv(i8* %2) #8
  %4 = icmp ne i8* %0, null
  br i1 %4, label %5, label %23

; <label>:5:                                      ; preds = %1
  %6 = getelementptr [2 x i8], [2 x i8]* @.str.41.1108, i32 0, i32 0
  %7 = call i8* @strtok(i8* %0, i8* %6) #8
  br label %8

; <label>:8:                                      ; preds = %19, %5
  %.0 = phi i8* [ %7, %5 ], [ %21, %19 ]
  call void @unroll_loop(i32 309)
  %9 = getelementptr [6 x i8], [6 x i8]* @.str.42.1109, i32 0, i32 0
  %10 = call i32 @strcmp(i8* %.0, i8* %9) #14
  %11 = icmp eq i32 0, %10
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  store i32 1, i32* @current_impl_locked, align 4
  br label %19

; <label>:13:                                     ; preds = %8
  %14 = getelementptr [9 x i8], [9 x i8]* @.str.43.1110, i32 0, i32 0
  %15 = call i32 @strcmp(i8* %.0, i8* %14) #14
  %16 = icmp eq i32 0, %15
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %13
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 79
  store i8 1, i8* %18, align 4
  br label %19

; <label>:19:                                     ; preds = %12, %17, %13
  %20 = getelementptr [2 x i8], [2 x i8]* @.str.41.1108, i32 0, i32 0
  %21 = call i8* @strtok(i8* null, i8* %20) #8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %8, label %.loopexit

.loopexit:                                        ; preds = %19
  br label %23

; <label>:23:                                     ; preds = %.loopexit, %1
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %23
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %29 = load i32, i32* %28, align 8
  %30 = icmp ne i32 %29, 1
  br i1 %30, label %44, label %31

; <label>:31:                                     ; preds = %27, %23
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %33 = call i32 @fileno(%struct._IO_FILE* %32) #8
  %34 = call i32 @isatty(i32 %33) #8
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %44

; <label>:36:                                     ; preds = %31
  %37 = icmp ne i8* %3, null
  br i1 %37, label %38, label %47

; <label>:38:                                     ; preds = %36
  %39 = getelementptr [6 x i8], [6 x i8]* @.str.44.1111, i32 0, i32 0
  %40 = call i32 @strcmp(i8* %3, i8* %39) #14
  %41 = icmp ne i32 0, %40
  %42 = load i32, i32* @current_impl_locked, align 4
  %43 = icmp ne i32 %42, 0
  %or.cond = or i1 %41, %43
  br i1 %or.cond, label %47, label %45

; <label>:44:                                     ; preds = %31, %27
  %.old = load i32, i32* @current_impl_locked, align 4
  %.old1 = icmp ne i32 %.old, 0
  br i1 %.old1, label %47, label %45

; <label>:45:                                     ; preds = %38, %44
  %46 = getelementptr [4 x i8], [4 x i8]* @.str.1.1105, i32 0, i32 0
  call void @set_progress_implementation(i8* %46)
  br label %47

; <label>:47:                                     ; preds = %38, %45, %44, %36
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_progress_implementation(i8*) #0 {
  %2 = icmp ne i8* %0, null
  %3 = getelementptr [4 x i8], [4 x i8]* @.str.1106, i32 0, i32 0
  %spec.select = select i1 %2, i8* %0, i8* %3
  %4 = call i8* @strchr(i8* %spec.select, i32 58) #14
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = ptrtoint i8* %spec.select to i64
  %9 = sub i64 %7, %8
  br label %12

; <label>:10:                                     ; preds = %1
  %11 = call i64 @strlen(i8* %spec.select) #14
  br label %12

; <label>:12:                                     ; preds = %10, %6
  %13 = phi i64 [ %9, %6 ], [ %11, %10 ]
  %14 = getelementptr [2 x %struct.progress_implementation], [2 x %struct.progress_implementation]* @implementations, i32 0, i32 0
  br label %15

; <label>:15:                                     ; preds = %12, %30
  %.016 = phi i64 [ 0, %12 ], [ %31, %30 ]
  %.035 = phi %struct.progress_implementation* [ %14, %12 ], [ %32, %30 ]
  call void @unroll_loop(i32 310)
  %16 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %.035, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @strncmp(i8* %17, i8* %spec.select, i64 %13) #14
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %30, label %20

; <label>:20:                                     ; preds = %15
  %.03.lcssa4 = phi %struct.progress_implementation* [ %.035, %15 ]
  store %struct.progress_implementation* %.03.lcssa4, %struct.progress_implementation** @current_impl, align 8
  store i32 0, i32* @current_impl_locked, align 4
  %21 = icmp ne i8* %4, null
  %22 = getelementptr inbounds i8, i8* %4, i32 1
  %spec.select1 = select i1 %21, i8* %22, i8* %4
  %23 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %.03.lcssa4, i32 0, i32 6
  %24 = load void (i8*)*, void (i8*)** %23, align 8
  %25 = icmp ne void (i8*)* %24, null
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %20
  %27 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %.03.lcssa4, i32 0, i32 6
  %28 = load void (i8*)*, void (i8*)** %27, align 8
  call void %28(i8* %spec.select1)
  br label %29

; <label>:29:                                     ; preds = %26, %20
  ret void

; <label>:30:                                     ; preds = %15
  %31 = add nuw nsw i64 %.016, 1
  %32 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %.035, i32 1
  %33 = icmp ult i64 %31, 2
  br i1 %33, label %15, label %34

; <label>:34:                                     ; preds = %30
  call void @abort() #16
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_image(%struct.bar_progress*, double, i1 zeroext) #0 {
  %4 = alloca i32, align 4, !track !620
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = zext i1 %2 to i8
  %8 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = sdiv i32 %9, 4
  %11 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 7
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %14, %16
  %18 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 9
  %19 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @count_cols(i8* %20)
  %22 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 6
  %23 = load i32, i32* %22, align 8
  %24 = add nsw i32 %10, 1
  %25 = add nsw i32 %24, 4
  %26 = add nsw i32 %25, 2
  %27 = add nsw i32 %26, 7
  %28 = add nsw i32 %27, 1
  %29 = add nsw i32 %28, 8
  %30 = add nsw i32 %29, 2
  %31 = add nsw i32 %30, 15
  %32 = sub nsw i32 %23, %31
  store i32 0, i32* %4, align 4
  %33 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 7
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 6
  %36 = load i32, i32* %35, align 8
  %37 = add nsw i32 %36, 100
  %38 = sext i32 %37 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 0, i64 %38, i1 false)
  %39 = icmp slt i32 %32, 5
  %spec.select = select i1 %39, i32 0, i32 %32
  %40 = icmp sle i32 %21, %10
  br i1 %40, label %41, label %52

; <label>:41:                                     ; preds = %3
  %42 = sub nsw i32 %10, %21
  %43 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr [4 x i8], [4 x i8]* @.str.25.1116, i32 0, i32 0
  %46 = call i32 (i8*, i8*, ...) @sprintf(i8* %12, i8* %45, i8* %44) #8
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %12, i64 %47
  %49 = sext i32 %42 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 32, i64 %49, i1 false)
  %50 = sext i32 %42 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  br label %101

; <label>:52:                                     ; preds = %3
  %53 = add nsw i32 %10, 5
  %54 = icmp sgt i32 %21, %53
  br i1 %54, label %55, label %76

; <label>:55:                                     ; preds = %52
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 79
  %57 = load i8, i8* %56, align 4
  %58 = trunc i8 %57 to i1
  br i1 %58, label %76, label %59

; <label>:59:                                     ; preds = %55
  %60 = trunc i8 %7 to i1
  br i1 %60, label %76, label %61

; <label>:61:                                     ; preds = %59
  %62 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 8
  %63 = load i32, i32* %62, align 8
  %64 = add nsw i32 %63, %21
  %65 = sdiv i32 %10, 2
  %66 = add nsw i32 %64, %65
  %67 = add nsw i32 %21, %10
  %68 = srem i32 %66, %67
  %69 = icmp sgt i32 %68, %21
  br i1 %69, label %70, label %76

; <label>:70:                                     ; preds = %61
  %71 = sub nsw i32 %68, %21
  %72 = sub nsw i32 %10, %71
  %73 = sext i32 %72 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 32, i64 %73, i1 false)
  %74 = sext i32 %72 to i64
  %75 = getelementptr inbounds i8, i8* %12, i64 %74
  br label %76

; <label>:76:                                     ; preds = %52, %55, %59, %70, %61
  %.19 = phi i32 [ %72, %70 ], [ 0, %61 ], [ 0, %59 ], [ 0, %55 ], [ 0, %52 ]
  %.16 = phi i32 [ 0, %70 ], [ %68, %61 ], [ 0, %59 ], [ 0, %55 ], [ 0, %52 ]
  %.1 = phi i8* [ %75, %70 ], [ %12, %61 ], [ %12, %59 ], [ %12, %55 ], [ %12, %52 ]
  %77 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @cols_to_bytes(i8* %78, i32 %.16, i32* %5)
  %80 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = sext i32 %79 to i64
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  %84 = sub nsw i32 %10, %.19
  %85 = call i32 @cols_to_bytes(i8* %83, i32 %84, i32* %5)
  %86 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = sext i32 %79 to i64
  %89 = getelementptr inbounds i8, i8* %87, i64 %88
  %90 = sext i32 %85 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.1, i8* align 1 %89, i64 %90, i1 false), !track !621
  %91 = sext i32 %85 to i64
  %92 = getelementptr inbounds i8, i8* %.1, i64 %91
  %93 = load i32, i32* %5, align 4
  %94 = add nsw i32 %.19, %93
  %95 = sub nsw i32 %10, %94
  %96 = add nsw i32 %95, 1
  %97 = sext i32 %96 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %92, i8 32, i64 %97, i1 false)
  %98 = add nsw i32 %95, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %92, i64 %99
  br label %101

; <label>:101:                                    ; preds = %76, %41
  %.2 = phi i8* [ %51, %41 ], [ %100, %76 ]
  %102 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %103 = load i64, i64* %102, align 8
  %104 = icmp sgt i64 %103, 0
  br i1 %104, label %105, label %117

; <label>:105:                                    ; preds = %101
  %106 = sitofp i64 %17 to double
  %107 = fmul double 1.000000e+02, %106
  %108 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %109 = load i64, i64* %108, align 8
  %110 = sitofp i64 %109 to double
  %111 = fdiv double %107, %110
  %112 = fptosi double %111 to i32
  %113 = getelementptr [6 x i8], [6 x i8]* @.str.8.1117, i32 0, i32 0
  %114 = call i32 (i8*, i8*, ...) @sprintf(i8* %.2, i8* %113, i32 %112) #8
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %.2, i64 %115
  br label %119

; <label>:117:                                    ; preds = %101
  call void @llvm.memset.p0i8.i64(i8* align 1 %.2, i8 32, i64 4, i1 false)
  %118 = getelementptr inbounds i8, i8* %.2, i64 4
  br label %119

; <label>:119:                                    ; preds = %117, %105
  %.3 = phi i8* [ %116, %105 ], [ %118, %117 ]
  %cond = icmp eq i32 %spec.select, 0
  br i1 %cond, label %205, label %120

; <label>:120:                                    ; preds = %119
  %121 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %122 = load i64, i64* %121, align 8
  %123 = icmp sgt i64 %122, 0
  br i1 %123, label %124, label %169

; <label>:124:                                    ; preds = %120
  %125 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = sitofp i64 %126 to double
  %128 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %129 = load i64, i64* %128, align 8
  %130 = sitofp i64 %129 to double
  %131 = fdiv double %127, %130
  %132 = sitofp i32 %spec.select to double
  %133 = fmul double %131, %132
  %134 = fptosi double %133 to i32
  %135 = sitofp i64 %17 to double
  %136 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %137 = load i64, i64* %136, align 8
  %138 = sitofp i64 %137 to double
  %139 = fdiv double %135, %138
  %140 = sitofp i32 %spec.select to double
  %141 = fmul double %139, %140
  %142 = fptosi double %141 to i32
  %143 = getelementptr inbounds i8, i8* %.3, i32 1
  store i8 91, i8* %.3, align 1
  %144 = sext i32 %134 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %143, i8 43, i64 %144, i1 false)
  %145 = sext i32 %134 to i64
  %146 = getelementptr inbounds i8, i8* %143, i64 %145
  %147 = sub nsw i32 %142, %134
  %148 = icmp sgt i32 %147, 0
  br i1 %148, label %149, label %156

; <label>:149:                                    ; preds = %124
  %150 = sub nsw i32 %147, 1
  %151 = sext i32 %150 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %146, i8 61, i64 %151, i1 false)
  %152 = sub nsw i32 %147, 1
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %146, i64 %153
  %155 = getelementptr inbounds i8, i8* %154, i32 1
  store i8 62, i8* %154, align 1
  br label %156

; <label>:156:                                    ; preds = %149, %124
  %.4 = phi i8* [ %155, %149 ], [ %146, %124 ]
  %157 = sext i32 %spec.select to i64
  %158 = ptrtoint i8* %.4 to i64
  %159 = ptrtoint i8* %143 to i64
  %160 = sub i64 %158, %159
  %161 = sub nsw i64 %157, %160
  call void @llvm.memset.p0i8.i64(i8* align 1 %.4, i8 32, i64 %161, i1 false)
  %162 = sext i32 %spec.select to i64
  %163 = ptrtoint i8* %.4 to i64
  %164 = ptrtoint i8* %143 to i64
  %165 = sub i64 %163, %164
  %166 = sub nsw i64 %162, %165
  %167 = getelementptr inbounds i8, i8* %.4, i64 %166
  %168 = getelementptr inbounds i8, i8* %167, i32 1
  store i8 93, i8* %167, align 1
  br label %205

; <label>:169:                                    ; preds = %120
  %170 = icmp ne i32 %spec.select, 0
  br i1 %170, label %171, label %205

; <label>:171:                                    ; preds = %169
  %172 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 8
  %173 = load i32, i32* %172, align 8
  %174 = mul nsw i32 %spec.select, 2
  %175 = sub nsw i32 %174, 6
  %176 = srem i32 %173, %175
  %177 = sub nsw i32 %spec.select, 2
  %178 = icmp slt i32 %176, %177
  br i1 %178, label %179, label %181

; <label>:179:                                    ; preds = %171
  %180 = add nsw i32 %176, 1
  br label %185

; <label>:181:                                    ; preds = %171
  %182 = sub nsw i32 %176, %spec.select
  %183 = add nsw i32 %182, 5
  %184 = sub nsw i32 %spec.select, %183
  br label %185

; <label>:185:                                    ; preds = %181, %179
  %.02 = phi i32 [ %180, %179 ], [ %184, %181 ]
  %186 = getelementptr inbounds i8, i8* %.3, i32 1
  store i8 91, i8* %.3, align 1
  %187 = icmp slt i32 0, %spec.select
  br i1 %187, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %185
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %202
  %.0311 = phi i32 [ %203, %202 ], [ 0, %.lr.ph.preheader ]
  %.510 = phi i8* [ %.8, %202 ], [ %186, %.lr.ph.preheader ]
  call void @unroll_loop(i32 311)
  %188 = sub nsw i32 %.02, 1
  %189 = icmp eq i32 %.0311, %188
  br i1 %189, label %190, label %192

; <label>:190:                                    ; preds = %.lr.ph
  %191 = getelementptr inbounds i8, i8* %.510, i32 1
  store i8 60, i8* %.510, align 1
  br label %202

; <label>:192:                                    ; preds = %.lr.ph
  %193 = icmp eq i32 %.0311, %.02
  br i1 %193, label %194, label %196

; <label>:194:                                    ; preds = %192
  %195 = getelementptr inbounds i8, i8* %.510, i32 1
  store i8 61, i8* %.510, align 1
  br label %202

; <label>:196:                                    ; preds = %192
  %197 = add nsw i32 %.02, 1
  %198 = icmp eq i32 %.0311, %197
  %199 = getelementptr inbounds i8, i8* %.510, i32 1
  br i1 %198, label %200, label %201

; <label>:200:                                    ; preds = %196
  store i8 62, i8* %.510, align 1
  br label %202

; <label>:201:                                    ; preds = %196
  store i8 32, i8* %.510, align 1
  br label %202

; <label>:202:                                    ; preds = %190, %200, %201, %194
  %.8 = phi i8* [ %191, %190 ], [ %195, %194 ], [ %199, %201 ], [ %199, %200 ]
  %203 = add nuw nsw i32 %.0311, 1
  %exitcond = icmp ne i32 %203, %spec.select
  br i1 %exitcond, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %202
  %.5.lcssa.ph = phi i8* [ %.8, %202 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %185
  %.5.lcssa = phi i8* [ %186, %185 ], [ %.5.lcssa.ph, %._crit_edge.loopexit ]
  %204 = getelementptr inbounds i8, i8* %.5.lcssa, i32 1
  store i8 93, i8* %.5.lcssa, align 1
  br label %205

; <label>:205:                                    ; preds = %119, %169, %._crit_edge, %156
  %.10 = phi i8* [ %168, %156 ], [ %204, %._crit_edge ], [ %.3, %169 ], [ %.3, %119 ]
  %206 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 8
  %207 = load i32, i32* %206, align 8
  %208 = add nsw i32 %207, 1
  store i32 %208, i32* %206, align 8
  %209 = call i8* @human_readable(i64 %17, i32 1000, i32 2)
  %210 = call i32 @count_cols(i8* %209)
  %211 = sub nsw i32 8, %210
  %212 = sext i32 %211 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %.10, i8 32, i64 %212, i1 false)
  %213 = sext i32 %211 to i64
  %214 = getelementptr inbounds i8, i8* %.10, i64 %213
  %215 = getelementptr [3 x i8], [3 x i8]* @.str.26.1118, i32 0, i32 0
  %216 = call i32 (i8*, i8*, ...) @sprintf(i8* %214, i8* %215, i8* %209) #8
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %214, i64 %217
  %219 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %18, i32 0, i32 3
  %220 = load double, double* %219, align 8
  %221 = fcmp ogt double %220, 0.000000e+00
  br i1 %221, label %222, label %263

; <label>:222:                                    ; preds = %205
  %223 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %18, i32 0, i32 4
  %224 = load i64, i64* %223, align 8
  %225 = icmp ne i64 %224, 0
  br i1 %225, label %226, label %263

; <label>:226:                                    ; preds = %222
  store i32 0, i32* %6, align 4
  %227 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %18, i32 0, i32 4
  %228 = load i64, i64* %227, align 8
  %229 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 11
  %230 = load i64, i64* %229, align 8
  %231 = add nsw i64 %228, %230
  %232 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %18, i32 0, i32 3
  %233 = load double, double* %232, align 8
  %234 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 10
  %235 = load double, double* %234, align 8
  %236 = fsub double %1, %235
  %237 = fadd double %233, %236
  %238 = call double @calc_rate(i64 %231, double %237, i32* %6)
  %239 = fcmp oge double %238, 9.995000e+01
  br i1 %239, label %244, label %240

; <label>:240:                                    ; preds = %226
  %241 = fcmp oge double %238, 0x4023FD70A3D70A3D
  %242 = zext i1 %241 to i64
  %243 = select i1 %241, i32 1, i32 2
  br label %244

; <label>:244:                                    ; preds = %226, %240
  %245 = phi i32 [ %243, %240 ], [ 0, %226 ]
  %246 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 155
  %247 = load i8, i8* %246, align 1
  %248 = trunc i8 %247 to i1
  %249 = load i32, i32* %6, align 4
  %250 = sext i32 %249 to i64
  br i1 %248, label %254, label %251

; <label>:251:                                    ; preds = %244
  %252 = getelementptr inbounds [4 x i8*], [4 x i8*]* @create_image.short_units, i64 0, i64 %250
  %253 = load i8*, i8** %252, align 8
  br label %257

; <label>:254:                                    ; preds = %244
  %255 = getelementptr inbounds [4 x i8*], [4 x i8*]* @create_image.short_units_bits, i64 0, i64 %250
  %256 = load i8*, i8** %255, align 8
  br label %257

; <label>:257:                                    ; preds = %254, %251
  %258 = phi i8* [ %253, %251 ], [ %256, %254 ]
  %259 = getelementptr [10 x i8], [10 x i8]* @.str.35.1119, i32 0, i32 0
  %260 = call i32 (i8*, i8*, ...) @sprintf(i8* %218, i8* %259, i32 %245, double %238, i8* %258) #8
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %218, i64 %261
  br label %266

; <label>:263:                                    ; preds = %205, %222
  %264 = getelementptr [11 x i8], [11 x i8]* @.str.36.1120, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %218, i8* align 1 %264, i64 10, i1 false), !track !622
  %265 = getelementptr inbounds i8, i8* %218, i64 10
  br label %266

; <label>:266:                                    ; preds = %263, %257
  %.11 = phi i8* [ %262, %257 ], [ %265, %263 ]
  %267 = trunc i8 %7 to i1
  br i1 %267, label %321, label %268

; <label>:268:                                    ; preds = %266
  %269 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %270 = load i64, i64* %269, align 8
  %271 = icmp sgt i64 %270, 0
  br i1 %271, label %272, label %315

; <label>:272:                                    ; preds = %268
  %273 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 3
  %274 = load i64, i64* %273, align 8
  %275 = icmp sgt i64 %274, 0
  %276 = fcmp ogt double %1, 3.000000e+00
  %or.cond = and i1 %275, %276
  br i1 %or.cond, label %277, label %315

; <label>:277:                                    ; preds = %272
  %278 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %279 = load i64, i64* %278, align 8
  %280 = icmp ne i64 %279, %17
  br i1 %280, label %281, label %293

; <label>:281:                                    ; preds = %277
  %282 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 14
  %283 = load i32, i32* %282, align 8
  %284 = icmp ne i32 %283, 0
  br i1 %284, label %285, label %293

; <label>:285:                                    ; preds = %281
  %286 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 13
  %287 = load double, double* %286, align 8
  %288 = fsub double %1, %287
  %289 = fcmp olt double %288, 0x3FEFAE147AE147AE
  br i1 %289, label %290, label %293

; <label>:290:                                    ; preds = %285
  %291 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 14
  %292 = load i32, i32* %291, align 8
  br label %309

; <label>:293:                                    ; preds = %285, %281, %277
  %294 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %295 = load i64, i64* %294, align 8
  %296 = sub nsw i64 %295, %17
  %297 = sitofp i64 %296 to double
  %298 = fmul double %1, %297
  %299 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 3
  %300 = load i64, i64* %299, align 8
  %301 = sitofp i64 %300 to double
  %302 = fdiv double %298, %301
  %303 = fcmp oge double %302, 0x41DFFFFFFF800000
  br i1 %303, label %319, label %304

; <label>:304:                                    ; preds = %293
  %305 = fadd double %302, 5.000000e-01
  %306 = fptosi double %305 to i32
  %307 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 14
  store i32 %306, i32* %307, align 8
  %308 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 13
  store double %1, double* %308, align 8
  br label %309

; <label>:309:                                    ; preds = %304, %290
  %.01 = phi i32 [ %292, %290 ], [ %306, %304 ]
  %310 = call i8* @get_eta(i32* %4)
  %311 = call i8* @eta_to_human_short(i32 %.01, i1 zeroext false)
  %312 = call i32 (i8*, i8*, ...) @sprintf(i8* %.11, i8* %310, i8* %311) #8
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i8, i8* %.11, i64 %313
  br label %354

; <label>:315:                                    ; preds = %272, %268
  %316 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 2
  %317 = load i64, i64* %316, align 8
  %318 = icmp sgt i64 %317, 0
  br i1 %318, label %319, label %354

; <label>:319:                                    ; preds = %315, %293
  call void @llvm.memset.p0i8.i64(i8* align 1 %.11, i8 32, i64 15, i1 false)
  %320 = getelementptr inbounds i8, i8* %.11, i64 15
  br label %354

; <label>:321:                                    ; preds = %266
  %322 = getelementptr [8 x i8], [8 x i8]* @.str.37.1121, i32 0, i32 0
  %323 = call i8* @gettext(i8* %322) #8, !track !623
  %324 = call i8* @strcpy(i8* %.11, i8* %323) #8, !track !624
  %325 = call i64 @strlen(i8* %.11) #14
  %326 = trunc i64 %325 to i32
  %327 = call i32 @count_cols(i8* %.11)
  %328 = sub nsw i32 %326, %327
  store i32 %328, i32* %4, align 4
  %329 = fcmp oge double %1, 1.000000e+01
  %330 = sext i32 %326 to i64
  %331 = getelementptr inbounds i8, i8* %.11, i64 %330
  br i1 %329, label %332, label %339

; <label>:332:                                    ; preds = %321
  %333 = fadd double %1, 5.000000e-01
  %334 = fptosi double %333 to i32
  %335 = call i8* @eta_to_human_short(i32 %334, i1 zeroext false)
  %336 = getelementptr [3 x i8], [3 x i8]* @.str.26.1118, i32 0, i32 0
  %337 = call i32 (i8*, i8*, ...) @sprintf(i8* %331, i8* %336, i8* %335) #8
  %338 = add nsw i32 %327, %337
  br label %344

; <label>:339:                                    ; preds = %321
  %340 = call i8* @print_decimal(double %1)
  %341 = getelementptr [4 x i8], [4 x i8]* @.str.38.1122, i32 0, i32 0
  %342 = call i32 (i8*, i8*, ...) @sprintf(i8* %331, i8* %341, i8* %340) #8
  %343 = add nsw i32 %327, %342
  br label %344

; <label>:344:                                    ; preds = %339, %332
  %.0 = phi i32 [ %338, %332 ], [ %343, %339 ]
  %345 = load i32, i32* %4, align 4
  %346 = add nsw i32 %.0, %345
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds i8, i8* %.11, i64 %347
  %349 = sub nsw i32 15, %.0
  %350 = sext i32 %349 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %348, i8 32, i64 %350, i1 false)
  %351 = sub nsw i32 15, %.0
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %348, i64 %352
  br label %354

; <label>:354:                                    ; preds = %309, %319, %315, %344
  %.14 = phi i8* [ %353, %344 ], [ %314, %309 ], [ %320, %319 ], [ %.11, %315 ]
  %355 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 6
  %356 = load i32, i32* %355, align 8
  %357 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 7
  %358 = load i8*, i8** %357, align 8
  %359 = call i32 @count_cols(i8* %358)
  %360 = sub nsw i32 %356, %359
  %361 = sext i32 %360 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %.14, i8 32, i64 %361, i1 false)
  %362 = sext i32 %360 to i64
  %363 = getelementptr inbounds i8, i8* %.14, i64 %362
  store i8 0, i8* %363, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @display_image(i8*) #0 {
  %2 = call zeroext i1 @log_set_save_context(i1 zeroext false)
  %3 = zext i1 %2 to i8
  %4 = getelementptr [2 x i8], [2 x i8]* @.str.39.1115, i32 0, i32 0
  call void @logputs(i32 4, i8* %4)
  call void @logputs(i32 4, i8* %0)
  %5 = trunc i8 %3 to i1
  %6 = call zeroext i1 @log_set_save_context(i1 zeroext %5)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @count_cols(i8*) #0 {
  %2 = alloca i32, align 4
  %3 = call i64 @strlen(i8* %0) #14
  %4 = trunc i64 %3 to i32
  %5 = load i8, i8* %0, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %13
  %.018 = phi i8* [ %15, %13 ], [ %0, %.lr.ph.preheader ]
  %.027 = phi i32 [ %20, %13 ], [ 0, %.lr.ph.preheader ]
  %.036 = phi i32 [ %16, %13 ], [ %4, %.lr.ph.preheader ]
  call void @unroll_loop(i32 312)
  %8 = sext i32 %.036 to i64
  %9 = call i32 @mbtowc(i32* %2, i8* %.018, i64 %8) #8
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %.lr.ph
  %.03.lcssa5 = phi i32 [ %.036, %.lr.ph ]
  %.02.lcssa4 = phi i32 [ %.027, %.lr.ph ]
  %12 = add nsw i32 %.02.lcssa4, %.03.lcssa5
  br label %._crit_edge

; <label>:13:                                     ; preds = %.lr.ph
  %14 = sext i32 %9 to i64
  %15 = getelementptr inbounds i8, i8* %.018, i64 %14
  %16 = sub nsw i32 %.036, %9
  %17 = load i32, i32* %2, align 4
  %18 = call i32 @wcwidth(i32 %17) #8
  %19 = icmp eq i32 %18, -1
  %. = select i1 %19, i32 1, i32 %18
  %20 = add nsw i32 %.027, %.
  %21 = load i8, i8* %15, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %13
  %.0.ph = phi i32 [ %20, %13 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1, %11
  %.0 = phi i32 [ %12, %11 ], [ 0, %1 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cols_to_bytes(i8*, i32, i32*) #0 {
  %4 = alloca %struct.mbchar, align 8, !track !625
  %5 = alloca %struct.mbiter_multi, align 8, !track !626
  %6 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 4
  %7 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %6, i32 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 4
  %9 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = call i64 @strlen(i8* %0) #14
  %12 = getelementptr inbounds i8, i8* %10, i64 %11
  %13 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 0
  store i8* %12, i8** %13, align 8
  %14 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 1
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 2
  %16 = bitcast %struct.__mbstate_t* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 8, i1 false)
  %17 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 3
  store i8 0, i8* %17, align 4
  call void @unroll_loop(i32 313)
  %18 = icmp slt i32 0, %1
  br i1 %18, label %.lr.ph, label %.loopexit.loopexit

.lr.ph:                                           ; preds = %3
  br label %19

; <label>:19:                                     ; preds = %.lr.ph, %52
  %.03 = phi i32 [ 0, %.lr.ph ], [ %57, %52 ]
  %.012 = phi i32 [ 0, %.lr.ph ], [ %39, %52 ]
  %20 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 4
  %21 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %20, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ult i8* %22, %24
  br i1 %25, label %26, label %..loopexit.loopexit_crit_edge

; <label>:26:                                     ; preds = %19
  call void @mbiter_multi_next(%struct.mbiter_multi* %5)
  %27 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 4
  %28 = bitcast %struct.mbchar* %4 to i8*
  %29 = bitcast %struct.mbchar* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 48, i1 false), !track !627
  %30 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %4, i32 0, i32 2
  %31 = load i8, i8* %30, align 8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %37

; <label>:33:                                     ; preds = %26
  %34 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %4, i32 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = call i32 @mb_width_aux(i32 %35)
  br label %37

; <label>:37:                                     ; preds = %26, %33
  %38 = phi i32 [ %36, %33 ], [ 1, %26 ]
  %39 = add nsw i32 %.012, %38
  %40 = icmp sgt i32 %39, %1
  br i1 %40, label %41, label %52

; <label>:41:                                     ; preds = %37
  %.lcssa = phi i32 [ %39, %37 ]
  %.0.lcssa2 = phi i32 [ %.03, %37 ]
  %42 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %4, i32 0, i32 2
  %43 = load i8, i8* %42, align 8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %49

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %4, i32 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = call i32 @mb_width_aux(i32 %47)
  br label %49

; <label>:49:                                     ; preds = %41, %45
  %50 = phi i32 [ %48, %45 ], [ 1, %41 ]
  %51 = sub nsw i32 %.lcssa, %50
  br label %.loopexit

; <label>:52:                                     ; preds = %37
  %53 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %4, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = sext i32 %.03 to i64
  %56 = add i64 %55, %54
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 4
  %59 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %58, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 4
  %62 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 %60
  store i8* %64, i8** %62, align 8
  %65 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %5, i32 0, i32 3
  store i8 0, i8* %65, align 4
  call void @unroll_loop(i32 313)
  %66 = icmp slt i32 %39, %1
  br i1 %66, label %19, label %..loopexit.loopexit_crit_edge5

..loopexit.loopexit_crit_edge:                    ; preds = %19
  %split = phi i32 [ %.03, %19 ]
  %split4 = phi i32 [ %.012, %19 ]
  br label %.loopexit.loopexit

..loopexit.loopexit_crit_edge5:                   ; preds = %52
  %split6 = phi i32 [ %57, %52 ]
  %split7 = phi i32 [ %39, %52 ]
  br label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %..loopexit.loopexit_crit_edge5, %..loopexit.loopexit_crit_edge, %3
  %.0.lcssa.ph = phi i32 [ %split6, %..loopexit.loopexit_crit_edge5 ], [ %split, %..loopexit.loopexit_crit_edge ], [ 0, %3 ]
  %.1.ph = phi i32 [ %split7, %..loopexit.loopexit_crit_edge5 ], [ %split4, %..loopexit.loopexit_crit_edge ], [ 0, %3 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %49
  %.0.lcssa = phi i32 [ %.0.lcssa2, %49 ], [ %.0.lcssa.ph, %.loopexit.loopexit ]
  %.1 = phi i32 [ %51, %49 ], [ %.1.ph, %.loopexit.loopexit ]
  store i32 %.1, i32* %2, align 4
  ret i32 %.0.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_eta(i32*) #0 {
  %2 = load i8*, i8** @get_eta.eta_trans, align 8
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %13

; <label>:4:                                      ; preds = %1
  %5 = getelementptr [11 x i8], [11 x i8]* @get_eta.eta_str, i32 0, i32 0
  %6 = call i8* @gettext(i8* %5) #8
  store i8* %6, i8** @get_eta.eta_trans, align 8
  %7 = load i8*, i8** @get_eta.eta_trans, align 8
  %8 = call i64 @strlen(i8* %7) #14
  %9 = trunc i64 %8 to i32
  %10 = load i8*, i8** @get_eta.eta_trans, align 8
  %11 = call i32 @count_cols(i8* %10)
  %12 = sub nsw i32 %9, %11
  store i32 %12, i32* @get_eta.bytes_cols_diff, align 4
  br label %13

; <label>:13:                                     ; preds = %4, %1
  %14 = icmp ne i32* %0, null
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %13
  %16 = load i32, i32* @get_eta.bytes_cols_diff, align 4
  store i32 %16, i32* %0, align 4
  br label %17

; <label>:17:                                     ; preds = %15, %13
  %18 = load i8*, i8** @get_eta.eta_trans, align 8
  ret i8* %18
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @eta_to_human_short(i32, i1 zeroext) #0 {
  %3 = zext i1 %1 to i8
  %4 = trunc i8 %3 to i1
  %5 = zext i1 %4 to i64
  %6 = getelementptr [1 x i8], [1 x i8]* @.str.3.1123, i32 0, i32 0
  %7 = getelementptr [2 x i8], [2 x i8]* @.str.5.1124, i32 0, i32 0
  %8 = select i1 %4, i8* %6, i8* %7
  %9 = load i32, i32* @eta_to_human_short.last, align 4
  %10 = icmp eq i32 %0, %9
  br i1 %10, label %47, label %11

; <label>:11:                                     ; preds = %2
  store i32 %0, i32* @eta_to_human_short.last, align 4
  %12 = icmp slt i32 %0, 100
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %11
  %14 = getelementptr [10 x i8], [10 x i8]* @eta_to_human_short.buf, i32 0, i32 0
  %15 = getelementptr [4 x i8], [4 x i8]* @.str.13.1125, i32 0, i32 0
  %16 = call i32 (i8*, i8*, ...) @sprintf(i8* %14, i8* %15, i32 %0) #8
  br label %47

; <label>:17:                                     ; preds = %11
  %18 = icmp slt i32 %0, 6000
  br i1 %18, label %19, label %25

; <label>:19:                                     ; preds = %17
  %20 = sdiv i32 %0, 60
  %21 = srem i32 %0, 60
  %22 = getelementptr [10 x i8], [10 x i8]* @eta_to_human_short.buf, i32 0, i32 0
  %23 = getelementptr [9 x i8], [9 x i8]* @.str.14.1126, i32 0, i32 0
  %24 = call i32 (i8*, i8*, ...) @sprintf(i8* %22, i8* %23, i32 %20, i8* %8, i32 %21) #8
  br label %47

; <label>:25:                                     ; preds = %17
  %26 = icmp slt i32 %0, 172800
  br i1 %26, label %27, label %34

; <label>:27:                                     ; preds = %25
  %28 = sdiv i32 %0, 3600
  %29 = sdiv i32 %0, 60
  %30 = srem i32 %29, 60
  %31 = getelementptr [10 x i8], [10 x i8]* @eta_to_human_short.buf, i32 0, i32 0
  %32 = getelementptr [9 x i8], [9 x i8]* @.str.15.1127, i32 0, i32 0
  %33 = call i32 (i8*, i8*, ...) @sprintf(i8* %31, i8* %32, i32 %28, i8* %8, i32 %30) #8
  br label %47

; <label>:34:                                     ; preds = %25
  %35 = icmp slt i32 %0, 8640000
  %36 = sdiv i32 %0, 86400
  br i1 %35, label %37, label %43

; <label>:37:                                     ; preds = %34
  %38 = sdiv i32 %0, 3600
  %39 = srem i32 %38, 24
  %40 = getelementptr [10 x i8], [10 x i8]* @eta_to_human_short.buf, i32 0, i32 0
  %41 = getelementptr [9 x i8], [9 x i8]* @.str.16.1128, i32 0, i32 0
  %42 = call i32 (i8*, i8*, ...) @sprintf(i8* %40, i8* %41, i32 %36, i8* %8, i32 %39) #8
  br label %47

; <label>:43:                                     ; preds = %34
  %44 = getelementptr [10 x i8], [10 x i8]* @eta_to_human_short.buf, i32 0, i32 0
  %45 = getelementptr [4 x i8], [4 x i8]* @.str.17.1129, i32 0, i32 0
  %46 = call i32 (i8*, i8*, ...) @sprintf(i8* %44, i8* %45, i32 %36) #8
  br label %47

; <label>:47:                                     ; preds = %13, %27, %43, %37, %19, %2
  %48 = getelementptr [10 x i8], [10 x i8]* @eta_to_human_short.buf, i32 0, i32 0
  ret i8* %48
}

; Function Attrs: nounwind
declare dso_local i32 @mbtowc(i32*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i32 @wcwidth(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_speed_ring(%struct.bar_progress*, i64, double) #0 {
  %4 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 9
  %5 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 10
  %6 = load double, double* %5, align 8
  %7 = fsub double %2, %6
  %8 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 11
  %9 = load i64, i64* %8, align 8
  %10 = add nsw i64 %9, %1
  store i64 %10, i64* %8, align 8
  %11 = fcmp olt double %7, 1.500000e-01
  br i1 %11, label %73, label %12

; <label>:12:                                     ; preds = %3
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %12
  %15 = fcmp oge double %7, 5.000000e+00
  br i1 %15, label %16, label %73

; <label>:16:                                     ; preds = %14
  %17 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 12
  store i8 1, i8* %17, align 8
  %18 = bitcast %struct.bar_progress_hist* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 344, i1 false)
  %19 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 11
  store i64 0, i64* %19, align 8
  br label %73

; <label>:20:                                     ; preds = %12
  %21 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 12
  %22 = load i8, i8* %21, align 8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 12
  store i8 0, i8* %25, align 8
  br label %26

; <label>:26:                                     ; preds = %24, %20
  %.0 = phi double [ 1.000000e+00, %24 ], [ %7, %20 ]
  %27 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 1
  %28 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [20 x double], [20 x double]* %27, i64 0, i64 %30
  %32 = load double, double* %31, align 8
  %33 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 3
  %34 = load double, double* %33, align 8
  %35 = fsub double %34, %32
  store double %35, double* %33, align 8
  %36 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 2
  %37 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [20 x i64], [20 x i64]* %36, i64 0, i64 %39
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = sub nsw i64 %43, %41
  store i64 %44, i64* %42, align 8
  %45 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 1
  %46 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [20 x double], [20 x double]* %45, i64 0, i64 %48
  store double %.0, double* %49, align 8
  %50 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 11
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 2
  %53 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [20 x i64], [20 x i64]* %52, i64 0, i64 %55
  store i64 %51, i64* %56, align 8
  %57 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 3
  %58 = load double, double* %57, align 8
  %59 = fadd double %58, %.0
  store double %59, double* %57, align 8
  %60 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 11
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 4
  %63 = load i64, i64* %62, align 8
  %64 = add nsw i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 10
  store double %2, double* %65, align 8
  %66 = getelementptr inbounds %struct.bar_progress, %struct.bar_progress* %0, i32 0, i32 11
  store i64 0, i64* %66, align 8
  %67 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 8
  %70 = icmp eq i32 %69, 20
  br i1 %70, label %71, label %73

; <label>:71:                                     ; preds = %26
  %72 = getelementptr inbounds %struct.bar_progress_hist, %struct.bar_progress_hist* %4, i32 0, i32 0
  store i32 0, i32* %72, align 8
  br label %73

; <label>:73:                                     ; preds = %14, %16, %3, %71, %26
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_row_stats(%struct.dot_progress*, double, i1 zeroext) #0 {
  %4 = alloca i32, align 4
  %5 = zext i1 %2 to i8
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 107
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %7, %10
  %12 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = mul nsw i64 %14, %11
  %16 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %20 = load i64, i64* %19, align 8
  %21 = mul nsw i64 %18, %20
  %22 = add nsw i64 %15, %21
  %23 = trunc i8 %5 to i1
  br i1 %23, label %24, label %29

; <label>:24:                                     ; preds = %3
  %25 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = sext i32 %26 to i64
  %28 = add nsw i64 %22, %27
  br label %29

; <label>:29:                                     ; preds = %24, %3
  %.01 = phi i64 [ %28, %24 ], [ %22, %3 ]
  %30 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %42

; <label>:33:                                     ; preds = %29
  %34 = sitofp i64 %.01 to double
  %35 = fmul double 1.000000e+02, %34
  %36 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = sitofp i64 %37 to double
  %39 = fdiv double %35, %38
  %40 = fptosi double %39 to i32
  %41 = getelementptr [6 x i8], [6 x i8]* @.str.8.1117, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %41, i32 %40)
  br label %42

; <label>:42:                                     ; preds = %33, %29
  %43 = trunc i8 %5 to i1
  br i1 %43, label %44, label %55

; <label>:44:                                     ; preds = %42
  %45 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 5
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 106
  %49 = load i64, i64* %48, align 8
  %50 = mul nsw i64 %47, %49
  %51 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = sext i32 %52 to i64
  %54 = add nsw i64 %50, %53
  br label %55

; <label>:55:                                     ; preds = %42, %44
  %.0 = phi i64 [ %54, %44 ], [ %11, %42 ]
  %56 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 4
  %57 = load i32, i32* %56, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = sdiv i64 %60, %11
  %62 = icmp eq i64 %58, %61
  br i1 %62, label %63, label %68

; <label>:63:                                     ; preds = %55
  %64 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = srem i64 %65, %11
  %67 = sub nsw i64 %.0, %66
  br label %68

; <label>:68:                                     ; preds = %63, %55
  %.1 = phi i64 [ %67, %63 ], [ %.0, %55 ]
  %69 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 6
  %70 = load double, double* %69, align 8
  %71 = fsub double %1, %70
  %72 = call double @calc_rate(i64 %.1, double %71, i32* %4)
  %73 = fcmp oge double %72, 9.995000e+01
  br i1 %73, label %78, label %74

; <label>:74:                                     ; preds = %68
  %75 = fcmp oge double %72, 0x4023FD70A3D70A3D
  %76 = zext i1 %75 to i64
  %77 = select i1 %75, i32 1, i32 2
  br label %78

; <label>:78:                                     ; preds = %68, %74
  %79 = phi i32 [ %77, %74 ], [ 0, %68 ]
  %80 = load i32, i32* %4, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [4 x i8], [4 x i8]* @print_row_stats.names, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = getelementptr [9 x i8], [9 x i8]* @.str.9.1145, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %85, i32 %79, double %72, i32 %84)
  %86 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 6
  store double %1, double* %86, align 8
  %87 = trunc i8 %5 to i1
  br i1 %87, label %109, label %88

; <label>:88:                                     ; preds = %78
  %89 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp ne i64 %90, 0
  br i1 %91, label %92, label %119

; <label>:92:                                     ; preds = %88
  %93 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = sub nsw i64 %94, %.01
  %96 = getelementptr inbounds %struct.dot_progress, %struct.dot_progress* %0, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = sub nsw i64 %.01, %97
  %99 = sitofp i64 %95 to double
  %100 = fmul double %1, %99
  %101 = sitofp i64 %98 to double
  %102 = fdiv double %100, %101
  %103 = fcmp olt double %102, 0x41DFFFFFFF800000
  br i1 %103, label %104, label %119

; <label>:104:                                    ; preds = %92
  %105 = fadd double %102, 5.000000e-01
  %106 = fptosi double %105 to i32
  %107 = call i8* @eta_to_human_short(i32 %106, i1 zeroext true)
  %108 = getelementptr [4 x i8], [4 x i8]* @.str.10.1146, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %108, i8* %107)
  br label %119

; <label>:109:                                    ; preds = %78
  %110 = fcmp oge double %1, 1.000000e+01
  br i1 %110, label %111, label %116

; <label>:111:                                    ; preds = %109
  %112 = fadd double %1, 5.000000e-01
  %113 = fptosi double %112 to i32
  %114 = call i8* @eta_to_human_short(i32 %113, i1 zeroext true)
  %115 = getelementptr [4 x i8], [4 x i8]* @.str.11.1147, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %115, i8* %114)
  br label %119

; <label>:116:                                    ; preds = %109
  %117 = call i8* @print_decimal(double %1)
  %118 = getelementptr [5 x i8], [5 x i8]* @.str.12.1148, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 4, i8* %118, i8* %117)
  br label %119

; <label>:119:                                    ; preds = %111, %116, %88, %104, %92
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @progress_schedule_redirect() #0 {
  store i32 1, i32* @output_redirected, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @progress_create(i8*, i64, i64) #0 {
  %4 = load i32, i32* @output_redirected, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %12

; <label>:6:                                      ; preds = %3
  %7 = load i32, i32* @current_impl_locked, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %6
  %10 = getelementptr [4 x i8], [4 x i8]* @.str.1.1105, i32 0, i32 0
  call void @set_progress_implementation(i8* %10)
  br label %11

; <label>:11:                                     ; preds = %9, %6
  store i32 0, i32* @output_redirected, align 4
  br label %12

; <label>:12:                                     ; preds = %11, %3
  %13 = load %struct.progress_implementation*, %struct.progress_implementation** @current_impl, align 8
  %14 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %13, i32 0, i32 2
  %15 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %14, align 8
  %16 = call i8* %15(i8* %0, i64 %1, i64 %2)
  ret i8* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @progress_interactive_p(i8*) #0 {
  %2 = load %struct.progress_implementation*, %struct.progress_implementation** @current_impl, align 8
  %3 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %2, i32 0, i32 1
  %4 = load i8, i8* %3, align 8
  %5 = trunc i8 %4 to i1
  ret i1 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @progress_update(i8*, i64, double) #0 {
  %4 = load %struct.progress_implementation*, %struct.progress_implementation** @current_impl, align 8
  %5 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %4, i32 0, i32 3
  %6 = load void (i8*, i64, double)*, void (i8*, i64, double)** %5, align 8
  call void %6(i8* %0, i64 %1, double %2)
  %7 = load %struct.progress_implementation*, %struct.progress_implementation** @current_impl, align 8
  %8 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %7, i32 0, i32 4
  %9 = load void (i8*)*, void (i8*)** %8, align 8
  call void %9(i8* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @progress_finish(i8*, double) #0 {
  %3 = load %struct.progress_implementation*, %struct.progress_implementation** @current_impl, align 8
  %4 = getelementptr inbounds %struct.progress_implementation, %struct.progress_implementation* %3, i32 0, i32 5
  %5 = load void (i8*, double)*, void (i8*, double)** %4, align 8
  call void %5(i8* %0, double %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @progress_handle_sigwinch(i32) #0 {
  store volatile i32 1, i32* @received_sigwinch, align 4
  %2 = call void (i32)* @signal(i32 28, void (i32)* @progress_handle_sigwinch) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ptimer* @ptimer_new() #7 {
  %1 = call noalias i8* @xcalloc(i64 1, i64 32)
  %2 = bitcast i8* %1 to %struct.ptimer*
  %3 = load i8, i8* @ptimer_new.init_done, align 1
  %4 = trunc i8 %3 to i1
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %0
  store i8 1, i8* @ptimer_new.init_done, align 1
  call void @posix_init()
  br label %6

; <label>:6:                                      ; preds = %5, %0
  call void @ptimer_reset(%struct.ptimer* %2)
  ret %struct.ptimer* %2
}

; Function Attrs: noinline nounwind uwtable
define internal void @posix_init() #0 {
  %1 = alloca %struct.timeval, align 8
  br label %2

; <label>:2:                                      ; preds = %0, %34
  %.02 = phi i64 [ 0, %0 ], [ %35, %34 ]
  %3 = getelementptr inbounds [2 x %struct.anon.103], [2 x %struct.anon.103]* @posix_init.clocks, i64 0, i64 %.02
  %4 = getelementptr inbounds %struct.anon.103, %struct.anon.103* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp ne i32 %5, -1
  br i1 %6, label %7, label %13

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds [2 x %struct.anon.103], [2 x %struct.anon.103]* @posix_init.clocks, i64 0, i64 %.02
  %9 = getelementptr inbounds %struct.anon.103, %struct.anon.103* %8, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = call i64 @sysconf(i32 %10) #8
  %12 = icmp slt i64 %11, 0
  br i1 %12, label %34, label %13

; <label>:13:                                     ; preds = %7, %2
  %14 = getelementptr inbounds [2 x %struct.anon.103], [2 x %struct.anon.103]* @posix_init.clocks, i64 0, i64 %.02
  %15 = getelementptr inbounds %struct.anon.103, %struct.anon.103* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = call i32 @clock_getres(i32 %16, %struct.timeval* %1) #8
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %34, label %19

; <label>:19:                                     ; preds = %13
  %.0.lcssa1 = phi i64 [ %.02, %13 ]
  %20 = getelementptr inbounds [2 x %struct.anon.103], [2 x %struct.anon.103]* @posix_init.clocks, i64 0, i64 %.0.lcssa1
  %21 = getelementptr inbounds %struct.anon.103, %struct.anon.103* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  store i32 %22, i32* @posix_clock_id, align 4
  %23 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = sitofp i64 %24 to double
  %26 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+09
  %30 = fadd double %25, %29
  store double %30, double* @posix_clock_resolution, align 8
  %31 = load double, double* @posix_clock_resolution, align 8
  %32 = fcmp oeq double %31, 0.000000e+00
  br i1 %32, label %33, label %.loopexit

; <label>:33:                                     ; preds = %19
  store double 1.000000e-03, double* @posix_clock_resolution, align 8
  br label %.loopexit

; <label>:34:                                     ; preds = %13, %7
  %35 = add nuw nsw i64 %.02, 1
  %36 = icmp ult i64 %35, 2
  br i1 %36, label %2, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %34
  %.0.lcssa.ph = phi i64 [ %35, %34 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %19, %33
  %.0.lcssa = phi i64 [ %.0.lcssa1, %33 ], [ %.0.lcssa1, %19 ], [ %.0.lcssa.ph, %.loopexit.loopexit ]
  %37 = icmp eq i64 %.0.lcssa, 2
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %.loopexit
  %39 = getelementptr [41 x i8], [41 x i8]* @.str.1158, i32 0, i32 0
  %40 = call i8* @gettext(i8* %39) #8
  %41 = call i32* @__errno_location() #15
  %42 = load i32, i32* %41, align 4
  %43 = call i8* @strerror(i32 %42) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %40, i8* %43)
  store i32 0, i32* @posix_clock_id, align 4
  store double 1.000000e-03, double* @posix_clock_resolution, align 8
  br label %44

; <label>:44:                                     ; preds = %38, %.loopexit
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ptimer_reset(%struct.ptimer*) #0 {
  %2 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 0
  call void @posix_measure(%struct.timeval* %2)
  %3 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 1
  store double 0.000000e+00, double* %3, align 8
  %4 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 2
  store double 0.000000e+00, double* %4, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @posix_measure(%struct.timeval*) #0 {
  %2 = load i32, i32* @posix_clock_id, align 4
  %3 = call i32 @clock_gettime(i32 %2, %struct.timeval* %0) #8
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @clock_gettime(i32, %struct.timeval*) #2

; Function Attrs: nounwind
declare dso_local i64 @sysconf(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @clock_getres(i32, %struct.timeval*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ptimer_destroy(%struct.ptimer*) #0 {
  %2 = bitcast %struct.ptimer* %0 to i8*
  call void @free(i8* %2) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local double @ptimer_measure(%struct.ptimer*) #0 {
  %2 = alloca %struct.timeval, align 8, !track !628
  call void @posix_measure(%struct.timeval* %2)
  %3 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 2
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 0
  %6 = call double @posix_diff(%struct.timeval* %2, %struct.timeval* %5)
  %7 = fadd double %4, %6
  %8 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = fcmp olt double %7, %9
  br i1 %10, label %11, label %20

; <label>:11:                                     ; preds = %1
  %12 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 0
  %13 = bitcast %struct.timeval* %12 to i8*
  %14 = bitcast %struct.timeval* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !track !629
  %15 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 1
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 2
  store double %16, double* %17, align 8
  %18 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 1
  %19 = load double, double* %18, align 8
  br label %20

; <label>:20:                                     ; preds = %11, %1
  %.0 = phi double [ %19, %11 ], [ %7, %1 ]
  %21 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 1
  store double %.0, double* %21, align 8
  ret double %.0
}

; Function Attrs: noinline nounwind uwtable
define internal double @posix_diff(%struct.timeval*, %struct.timeval*) #0 {
  %3 = getelementptr inbounds %struct.timeval, %struct.timeval* %0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = sub nsw i64 %4, %6
  %8 = sitofp i64 %7 to double
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = sub nsw i64 %10, %12
  %14 = sitofp i64 %13 to double
  %15 = fdiv double %14, 1.000000e+09
  %16 = fadd double %8, %15
  ret double %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local double @ptimer_read(%struct.ptimer*) #0 {
  %2 = getelementptr inbounds %struct.ptimer, %struct.ptimer* %0, i32 0, i32 1
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local double @ptimer_resolution() #0 {
  %1 = call double @posix_resolution()
  ret double %1
}

; Function Attrs: noinline nounwind uwtable
define internal double @posix_resolution() #0 {
  %1 = load double, double* @posix_clock_resolution, align 8
  ret double %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @retrieve_tree(%struct.url*, %struct.iri*) #0 {
  %3 = alloca %struct.iri*, align 8, !track !630
  %4 = alloca i8*, align 8, !track !631
  %5 = alloca i8*, align 8, !track !632
  %6 = alloca i8*, align 8, !track !633
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8, !track !634
  %13 = alloca i8, align 1
  %14 = alloca i8*, align 8, !track !635
  %15 = alloca i8*, align 8, !track !636
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca %struct.iri*, align 8, !track !637
  %20 = call %struct.iri* @iri_new()
  store %struct.iri* %20, %struct.iri** %3, align 8
  %21 = icmp ne %struct.iri* %1, null
  br i1 %21, label %22, label %51

; <label>:22:                                     ; preds = %2
  %23 = getelementptr inbounds %struct.iri, %struct.iri* %1, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp ne i8* %24, null
  br i1 %25, label %26, label %30

; <label>:26:                                     ; preds = %22
  %27 = getelementptr inbounds %struct.iri, %struct.iri* %1, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = call noalias i8* @xstrdup(i8* %28)
  br label %30

; <label>:30:                                     ; preds = %22, %26
  %31 = phi i8* [ %29, %26 ], [ null, %22 ]
  %32 = load %struct.iri*, %struct.iri** %3, align 8
  %33 = getelementptr inbounds %struct.iri, %struct.iri* %32, i32 0, i32 0
  store i8* %31, i8** %33, align 8
  %34 = getelementptr inbounds %struct.iri, %struct.iri* %1, i32 0, i32 1
  %35 = load i8*, i8** %34, align 8
  %36 = icmp ne i8* %35, null
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %30
  %38 = getelementptr inbounds %struct.iri, %struct.iri* %1, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = call noalias i8* @xstrdup(i8* %39)
  br label %41

; <label>:41:                                     ; preds = %30, %37
  %42 = phi i8* [ %40, %37 ], [ null, %30 ]
  %43 = load %struct.iri*, %struct.iri** %3, align 8
  %44 = getelementptr inbounds %struct.iri, %struct.iri* %43, i32 0, i32 1
  store i8* %42, i8** %44, align 8
  %45 = getelementptr inbounds %struct.iri, %struct.iri* %1, i32 0, i32 3
  %46 = load i8, i8* %45, align 8
  %47 = trunc i8 %46 to i1
  %48 = load %struct.iri*, %struct.iri** %3, align 8
  %49 = getelementptr inbounds %struct.iri, %struct.iri* %48, i32 0, i32 3
  %50 = zext i1 %47 to i8
  store i8 %50, i8* %49, align 8
  br label %55

; <label>:51:                                     ; preds = %2
  %52 = load %struct.iri*, %struct.iri** %3, align 8
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %54 = load i8*, i8** %53, align 8
  call void @set_uri_encoding(%struct.iri* %52, i8* %54, i1 zeroext true)
  br label %55

; <label>:55:                                     ; preds = %51, %41
  %56 = call %struct.url_queue* @url_queue_new()
  %57 = call %struct.hash_table* @make_string_hash_table(i32 0)
  %58 = load %struct.iri*, %struct.iri** %3, align 8
  %59 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = call noalias i8* @xstrdup(i8* %60)
  call void @url_enqueue(%struct.url_queue* %56, %struct.iri* %58, i8* %61, i8* null, i32 0, i1 zeroext true, i1 zeroext false)
  %62 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  call void @blacklist_add(%struct.hash_table* %57, i8* %63)
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 156
  %65 = load i8*, i8** %64, align 8
  %66 = icmp ne i8* %65, null
  br i1 %66, label %67, label %80

; <label>:67:                                     ; preds = %55
  %68 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 156
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr [2 x i8], [2 x i8]* @.str.1165, i32 0, i32 0
  %71 = call %struct._IO_FILE* @fopen(i8* %69, i8* %70), !track !638
  call void @write_reject_log_header(%struct._IO_FILE* %71)
  %72 = icmp ne %struct._IO_FILE* %71, null
  br i1 %72, label %80, label %73

; <label>:73:                                     ; preds = %67
  %74 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 156
  %75 = load i8*, i8** %74, align 8
  %76 = call i32* @__errno_location() #15
  %77 = load i32, i32* %76, align 4
  %78 = call i8* @strerror(i32 %77) #8
  %79 = getelementptr [8 x i8], [8 x i8]* @.str.1.1166, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %79, i8* %75, i8* %78)
  br label %80

; <label>:80:                                     ; preds = %67, %73, %55
  %.05 = phi %struct._IO_FILE* [ null, %55 ], [ %71, %73 ], [ %71, %67 ]
  br label %81

; <label>:81:                                     ; preds = %80, %406
  %.03 = phi i32 [ 25, %80 ], [ %.2, %406 ]
  call void @unroll_loop(i32 314)
  store i8* null, i8** %6, align 8
  %82 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %83 = load i64, i64* %82, align 8
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %85, label %91

; <label>:85:                                     ; preds = %81
  %86 = load i64, i64* @total_downloaded_bytes, align 8
  %87 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %88 = load i64, i64* %87, align 8
  %89 = icmp sgt i64 %86, %88
  %90 = icmp eq i32 %.03, 21
  %or.cond8 = or i1 %89, %90
  br i1 %or.cond8, label %411, label %92

; <label>:91:                                     ; preds = %81
  %.old = icmp eq i32 %.03, 21
  br i1 %.old, label %411, label %92

; <label>:92:                                     ; preds = %85, %91
  %93 = call zeroext i1 @url_dequeue(%struct.url_queue* %56, %struct.iri** %3, i8** %4, i8** %5, i32* %7, i8* %8, i8* %9)
  br i1 %93, label %94, label %411

; <label>:94:                                     ; preds = %92
  %95 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %96 = icmp ne %struct.hash_table* %95, null
  br i1 %96, label %97, label %140

; <label>:97:                                     ; preds = %94
  %98 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %99 = load i8*, i8** %4, align 8
  %100 = call i32 @hash_table_contains(%struct.hash_table* %98, i8* %99)
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %102, label %140

; <label>:102:                                    ; preds = %97
  %103 = load %struct.hash_table*, %struct.hash_table** @dl_url_file_map, align 8
  %104 = load i8*, i8** %4, align 8
  %105 = call i8* @hash_table_get(%struct.hash_table* %103, i8* %104)
  %106 = call noalias i8* @xstrdup(i8* %105)
  store i8* %106, i8** %6, align 8
  %107 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %108 = load i8, i8* %107, align 1
  %109 = trunc i8 %108 to i1
  br i1 %109, label %110, label %114

; <label>:110:                                    ; preds = %102
  %111 = load i8*, i8** %4, align 8
  %112 = load i8*, i8** %6, align 8
  %113 = getelementptr [48 x i8], [48 x i8]* @.str.2.1167, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %113, i8* %111, i8* %112)
  br label %114

; <label>:114:                                    ; preds = %102, %110
  %115 = load i8, i8* %9, align 1
  %116 = trunc i8 %115 to i1
  %117 = load %struct.hash_table*, %struct.hash_table** @downloaded_css_set, align 8
  %118 = icmp ne %struct.hash_table* %117, null
  %or.cond = and i1 %116, %118
  br i1 %or.cond, label %119, label %124

; <label>:119:                                    ; preds = %114
  %120 = load %struct.hash_table*, %struct.hash_table** @downloaded_css_set, align 8
  %121 = load i8*, i8** %6, align 8
  %122 = call i32 @string_set_contains(%struct.hash_table* %120, i8* %121)
  %123 = icmp ne i32 %122, 0
  br label %124

; <label>:124:                                    ; preds = %119, %114
  %125 = phi i1 [ false, %114 ], [ %123, %119 ]
  %126 = zext i1 %125 to i8
  br i1 %125, label %137, label %127

; <label>:127:                                    ; preds = %124
  %128 = load i8, i8* %8, align 1
  %129 = trunc i8 %128 to i1
  %130 = load %struct.hash_table*, %struct.hash_table** @downloaded_html_set, align 8
  %131 = icmp ne %struct.hash_table* %130, null
  %or.cond3 = and i1 %129, %131
  br i1 %or.cond3, label %132, label %207

; <label>:132:                                    ; preds = %127
  %133 = load %struct.hash_table*, %struct.hash_table** @downloaded_html_set, align 8
  %134 = load i8*, i8** %6, align 8
  %135 = call i32 @string_set_contains(%struct.hash_table* %133, i8* %134)
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %137, label %207

; <label>:137:                                    ; preds = %132, %124
  %138 = trunc i8 %126 to i1
  %139 = zext i1 %138 to i8
  br label %207

; <label>:140:                                    ; preds = %97, %94
  store i32 0, i32* %10, align 4
  store i8* null, i8** %12, align 8
  %141 = load i8*, i8** %4, align 8
  %142 = load %struct.iri*, %struct.iri** %3, align 8
  %143 = call %struct.url* @url_parse(i8* %141, i32* %11, %struct.iri* %142, i1 zeroext true)
  %144 = icmp ne %struct.url* %143, null
  %145 = load i8*, i8** %4, align 8
  br i1 %144, label %151, label %146

; <label>:146:                                    ; preds = %140
  %147 = load i32, i32* %11, align 4
  %148 = call i8* @url_error(i8* %145, i32 %147)
  %149 = load i8*, i8** %4, align 8
  %150 = getelementptr [9 x i8], [9 x i8]* @.str.3.1168, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %150, i8* %149, i8* %148)
  call void @free(i8* %148) #8
  call void @inform_exit_status(i32 18)
  br label %207

; <label>:151:                                    ; preds = %140
  %152 = load i8*, i8** %5, align 8
  %153 = load %struct.iri*, %struct.iri** %3, align 8
  %154 = call i32 @retrieve_url(%struct.url* %143, i8* %145, i8** %6, i8** %12, i8* %152, i32* %10, i1 zeroext false, %struct.iri* %153, i1 zeroext true)
  %155 = load i8, i8* %8, align 1
  %156 = trunc i8 %155 to i1
  %157 = load i8*, i8** %6, align 8
  %158 = icmp ne i8* %157, null
  %or.cond5 = and i1 %156, %158
  %159 = icmp eq i32 %154, 25
  %or.cond6 = and i1 %or.cond5, %159
  br i1 %or.cond6, label %160, label %168

; <label>:160:                                    ; preds = %151
  %161 = load i32, i32* %10, align 4
  %162 = and i32 %161, 2
  %163 = icmp ne i32 %162, 0
  br i1 %163, label %164, label %168

; <label>:164:                                    ; preds = %160
  %165 = load i32, i32* %10, align 4
  %166 = and i32 %165, 1
  %167 = icmp ne i32 %166, 0
  %spec.select = select i1 %167, i8 1, i8 0
  br label %168

; <label>:168:                                    ; preds = %164, %160, %151
  %.17 = phi i8 [ 0, %160 ], [ 0, %151 ], [ %spec.select, %164 ]
  %169 = load i8*, i8** %6, align 8
  %170 = icmp ne i8* %169, null
  %171 = icmp eq i32 %154, 25
  %or.cond7 = and i1 %170, %171
  br i1 %or.cond7, label %172, label %184

; <label>:172:                                    ; preds = %168
  %173 = load i32, i32* %10, align 4
  %174 = and i32 %173, 2
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %176, label %184

; <label>:176:                                    ; preds = %172
  %177 = load i32, i32* %10, align 4
  %178 = and i32 %177, 64
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %183, label %180

; <label>:180:                                    ; preds = %176
  %181 = load i8, i8* %9, align 1
  %182 = trunc i8 %181 to i1
  br i1 %182, label %183, label %184

; <label>:183:                                    ; preds = %180, %176
  br label %184

; <label>:184:                                    ; preds = %183, %180, %172, %168
  %.211 = phi i8 [ 1, %183 ], [ 0, %180 ], [ 0, %172 ], [ 0, %168 ]
  %.28 = phi i8 [ 1, %183 ], [ %.17, %180 ], [ %.17, %172 ], [ %.17, %168 ]
  %185 = load i8*, i8** %12, align 8
  %186 = icmp ne i8* %185, null
  br i1 %186, label %187, label %201

; <label>:187:                                    ; preds = %184
  %188 = trunc i8 %.28 to i1
  br i1 %188, label %189, label %198

; <label>:189:                                    ; preds = %187
  %190 = load i8*, i8** %12, align 8
  %191 = load i32, i32* %7, align 4
  %192 = load %struct.iri*, %struct.iri** %3, align 8
  %193 = call i32 @descend_redirect(i8* %190, %struct.url* %143, i32 %191, %struct.url* %0, %struct.hash_table* %57, %struct.iri* %192)
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %197

; <label>:195:                                    ; preds = %189
  %196 = load i8*, i8** %4, align 8
  call void @blacklist_add(%struct.hash_table* %57, i8* %196)
  br label %198

; <label>:197:                                    ; preds = %189
  call void @write_reject_log_reason(%struct._IO_FILE* %.05, i32 %193, %struct.url* %143, %struct.url* %0)
  br label %198

; <label>:198:                                    ; preds = %187, %197, %195
  %.4 = phi i8 [ %.28, %187 ], [ %.28, %195 ], [ 0, %197 ]
  %199 = load i8*, i8** %4, align 8
  call void @free(i8* %199) #8
  store i8* null, i8** %4, align 8
  %200 = load i8*, i8** %12, align 8
  store i8* %200, i8** %4, align 8
  br label %206

; <label>:201:                                    ; preds = %184
  %202 = load i8*, i8** %4, align 8
  call void @free(i8* %202) #8
  store i8* null, i8** %4, align 8
  %203 = getelementptr inbounds %struct.url, %struct.url* %143, i32 0, i32 0
  %204 = load i8*, i8** %203, align 8
  %205 = call noalias i8* @xstrdup(i8* %204)
  store i8* %205, i8** %4, align 8
  br label %206

; <label>:206:                                    ; preds = %201, %198
  %.5 = phi i8 [ %.4, %198 ], [ %.28, %201 ]
  call void @url_free(%struct.url* %143)
  br label %207

; <label>:207:                                    ; preds = %146, %206, %127, %132, %137
  %.413 = phi i8 [ %139, %137 ], [ 0, %132 ], [ 0, %127 ], [ %.211, %206 ], [ 0, %146 ]
  %.7 = phi i8 [ 1, %137 ], [ 0, %132 ], [ 0, %127 ], [ %.5, %206 ], [ 0, %146 ]
  %.2 = phi i32 [ %.03, %137 ], [ %.03, %132 ], [ %.03, %127 ], [ %154, %206 ], [ %.03, %146 ]
  %208 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %209 = load i8, i8* %208, align 8
  %210 = trunc i8 %209 to i1
  %211 = trunc i8 %.7 to i1
  br i1 %211, label %212, label %245

; <label>:212:                                    ; preds = %207
  %213 = load i32, i32* %7, align 4
  %214 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %215 = load i32, i32* %214, align 4
  %216 = icmp sge i32 %213, %215
  br i1 %216, label %217, label %245

; <label>:217:                                    ; preds = %212
  %218 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %219 = load i32, i32* %218, align 4
  %220 = icmp ne i32 %219, -1
  br i1 %220, label %221, label %245

; <label>:221:                                    ; preds = %217
  %222 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %223 = load i8, i8* %222, align 2
  %224 = trunc i8 %223 to i1
  br i1 %224, label %225, label %236

; <label>:225:                                    ; preds = %221
  %226 = load i32, i32* %7, align 4
  %227 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %228 = load i32, i32* %227, align 4
  %229 = icmp eq i32 %226, %228
  br i1 %229, label %245, label %230

; <label>:230:                                    ; preds = %225
  %231 = load i32, i32* %7, align 4
  %232 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %233 = load i32, i32* %232, align 4
  %234 = add nsw i32 %233, 1
  %235 = icmp eq i32 %231, %234
  br i1 %235, label %245, label %236

; <label>:236:                                    ; preds = %221, %230
  %237 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %238 = load i8, i8* %237, align 1
  %239 = trunc i8 %238 to i1
  br i1 %239, label %240, label %245

; <label>:240:                                    ; preds = %236
  %241 = load i32, i32* %7, align 4
  %242 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %243 = load i32, i32* %242, align 4
  %244 = getelementptr [47 x i8], [47 x i8]* @.str.4.1169, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %244, i32 %241, i32 %243)
  br label %245

; <label>:245:                                    ; preds = %230, %225, %236, %240, %217, %212, %207
  %.115 = phi i8 [ 0, %217 ], [ 0, %212 ], [ 0, %207 ], [ 1, %230 ], [ 1, %225 ], [ 0, %236 ], [ 0, %240 ]
  %.9 = phi i8 [ %.7, %217 ], [ %.7, %212 ], [ %.7, %207 ], [ %.7, %230 ], [ %.7, %225 ], [ 0, %236 ], [ 0, %240 ]
  %246 = trunc i8 %.9 to i1
  br i1 %246, label %247, label %343

; <label>:247:                                    ; preds = %245
  store i8 0, i8* %13, align 1
  %248 = trunc i8 %.413 to i1
  %249 = load i8*, i8** %6, align 8
  %250 = load i8*, i8** %4, align 8
  br i1 %248, label %251, label %253

; <label>:251:                                    ; preds = %247
  %252 = call %struct.urlpos* @get_urls_css_file(i8* %249, i8* %250)
  br label %256

; <label>:253:                                    ; preds = %247
  %254 = load %struct.iri*, %struct.iri** %3, align 8
  %255 = call %struct.urlpos* @get_urls_html(i8* %249, i8* %250, i8* %13, %struct.iri* %254)
  br label %256

; <label>:256:                                    ; preds = %253, %251
  %257 = phi %struct.urlpos* [ %252, %251 ], [ %255, %253 ]
  %258 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 88
  %259 = load i8, i8* %258, align 8
  %260 = trunc i8 %259 to i1
  br i1 %260, label %261, label %265

; <label>:261:                                    ; preds = %256
  %262 = load i8, i8* %13, align 1
  %263 = trunc i8 %262 to i1
  br i1 %263, label %264, label %265

; <label>:264:                                    ; preds = %261
  call void @free_urlpos(%struct.urlpos* %257)
  br label %265

; <label>:265:                                    ; preds = %264, %261, %256
  %.04 = phi %struct.urlpos* [ null, %264 ], [ %257, %261 ], [ %257, %256 ]
  %266 = icmp ne %struct.urlpos* %.04, null
  br i1 %266, label %267, label %343

; <label>:267:                                    ; preds = %265
  %268 = load i8*, i8** %4, align 8
  %269 = load %struct.iri*, %struct.iri** %3, align 8
  %270 = call %struct.url* @url_parse(i8* %268, i32* null, %struct.iri* %269, i1 zeroext true)
  %271 = load i8*, i8** %4, align 8
  %272 = icmp ne %struct.url* %270, null
  br i1 %272, label %273, label %277

; <label>:273:                                    ; preds = %267
  %274 = getelementptr inbounds %struct.url, %struct.url* %270, i32 0, i32 10
  %275 = load i8*, i8** %274, align 8
  %276 = icmp ne i8* %275, null
  br label %277

; <label>:277:                                    ; preds = %273, %267
  %278 = phi i1 [ false, %267 ], [ %276, %273 ]
  %279 = zext i1 %278 to i8
  %280 = trunc i8 %279 to i1
  br i1 %280, label %281, label %283

; <label>:281:                                    ; preds = %277
  %282 = call i8* @url_string(%struct.url* %270, i32 2)
  br label %283

; <label>:283:                                    ; preds = %281, %277
  %.01 = phi i8* [ %282, %281 ], [ %271, %277 ]
  %284 = icmp ne %struct.urlpos* %.04, null
  br i1 %284, label %.lr.ph22.preheader, label %._crit_edge23

.lr.ph22.preheader:                               ; preds = %283
  br label %.lr.ph22

.lr.ph22:                                         ; preds = %.lr.ph22.preheader, %336
  %.0219 = phi %struct.urlpos* [ %338, %336 ], [ %.04, %.lr.ph22.preheader ]
  call void @unroll_loop(i32 315)
  %285 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 2
  %286 = load i16, i16* %285, align 8
  %287 = and i16 %286, 1
  %288 = zext i16 %287 to i32
  %289 = icmp ne i32 %288, 0
  br i1 %289, label %336, label %290

; <label>:290:                                    ; preds = %.lr.ph22
  %291 = trunc i8 %.115 to i1
  br i1 %291, label %292, label %299

; <label>:292:                                    ; preds = %290
  %293 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 2
  %294 = load i16, i16* %293, align 8
  %295 = lshr i16 %294, 4
  %296 = and i16 %295, 1
  %297 = zext i16 %296 to i32
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %299, label %336

; <label>:299:                                    ; preds = %292, %290
  %300 = load i32, i32* %7, align 4
  %301 = load %struct.iri*, %struct.iri** %3, align 8
  %302 = call i32 @download_child(%struct.urlpos* %.0219, %struct.url* %270, i32 %300, %struct.url* %0, %struct.hash_table* %57, %struct.iri* %301)
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %333

; <label>:304:                                    ; preds = %299
  %305 = call %struct.iri* @iri_new()
  %306 = load %struct.iri*, %struct.iri** %3, align 8
  %307 = getelementptr inbounds %struct.iri, %struct.iri* %306, i32 0, i32 1
  %308 = load i8*, i8** %307, align 8
  call void @set_uri_encoding(%struct.iri* %305, i8* %308, i1 zeroext false)
  %309 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 0
  %310 = load %struct.url*, %struct.url** %309, align 8
  %311 = getelementptr inbounds %struct.url, %struct.url* %310, i32 0, i32 0
  %312 = load i8*, i8** %311, align 8
  %313 = call noalias i8* @xstrdup(i8* %312)
  %314 = call noalias i8* @xstrdup(i8* %.01)
  %315 = load i32, i32* %7, align 4
  %316 = add nsw i32 %315, 1
  %317 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 2
  %318 = load i16, i16* %317, align 8
  %319 = lshr i16 %318, 6
  %320 = and i16 %319, 1
  %321 = zext i16 %320 to i32
  %322 = icmp ne i32 %321, 0
  %323 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 2
  %324 = load i16, i16* %323, align 8
  %325 = lshr i16 %324, 7
  %326 = and i16 %325, 1
  %327 = zext i16 %326 to i32
  %328 = icmp ne i32 %327, 0
  call void @url_enqueue(%struct.url_queue* %56, %struct.iri* %305, i8* %313, i8* %314, i32 %316, i1 zeroext %322, i1 zeroext %328)
  %329 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 0
  %330 = load %struct.url*, %struct.url** %329, align 8
  %331 = getelementptr inbounds %struct.url, %struct.url* %330, i32 0, i32 0
  %332 = load i8*, i8** %331, align 8
  call void @blacklist_add(%struct.hash_table* %57, i8* %332)
  br label %336

; <label>:333:                                    ; preds = %299
  %334 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 0
  %335 = load %struct.url*, %struct.url** %334, align 8
  call void @write_reject_log_reason(%struct._IO_FILE* %.05, i32 %302, %struct.url* %335, %struct.url* %270)
  br label %336

; <label>:336:                                    ; preds = %304, %333, %292, %.lr.ph22
  %337 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.0219, i32 0, i32 7
  %338 = load %struct.urlpos*, %struct.urlpos** %337, align 8
  %339 = icmp ne %struct.urlpos* %338, null
  br i1 %339, label %.lr.ph22, label %._crit_edge23.loopexit

._crit_edge23.loopexit:                           ; preds = %336
  br label %._crit_edge23

._crit_edge23:                                    ; preds = %._crit_edge23.loopexit, %283
  %340 = trunc i8 %279 to i1
  br i1 %340, label %341, label %342

; <label>:341:                                    ; preds = %._crit_edge23
  call void @free(i8* %.01) #8
  br label %342

; <label>:342:                                    ; preds = %341, %._crit_edge23
  call void @url_free(%struct.url* %270)
  call void @free_urlpos(%struct.urlpos* %.04)
  br label %343

; <label>:343:                                    ; preds = %265, %342, %245
  %344 = load i8*, i8** %6, align 8
  %345 = icmp ne i8* %344, null
  br i1 %345, label %346, label %406

; <label>:346:                                    ; preds = %343
  %347 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %348 = load i8, i8* %347, align 8
  %349 = trunc i8 %348 to i1
  br i1 %349, label %357, label %350

; <label>:350:                                    ; preds = %346
  %351 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %352 = load i8, i8* %351, align 8
  %353 = trunc i8 %352 to i1
  br i1 %353, label %357, label %354

; <label>:354:                                    ; preds = %350
  %355 = load i8*, i8** %6, align 8
  %356 = call zeroext i1 @acceptable(i8* %355)
  br i1 %356, label %406, label %357

; <label>:357:                                    ; preds = %346, %350, %354
  %358 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %359 = load i8, i8* %358, align 1
  %360 = trunc i8 %359 to i1
  br i1 %360, label %361, label %378

; <label>:361:                                    ; preds = %357
  %362 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %363 = load i8, i8* %362, align 8
  %364 = trunc i8 %363 to i1
  br i1 %364, label %365, label %367

; <label>:365:                                    ; preds = %361
  %366 = getelementptr [15 x i8], [15 x i8]* @.str.6.1172, i32 0, i32 0
  br label %375

; <label>:367:                                    ; preds = %361
  %368 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %369 = load i8, i8* %368, align 8
  %370 = trunc i8 %369 to i1
  %371 = zext i1 %370 to i64
  %372 = getelementptr [9 x i8], [9 x i8]* @.str.7.1170, i32 0, i32 0
  %373 = getelementptr [29 x i8], [29 x i8]* @.str.8.1171, i32 0, i32 0
  %374 = select i1 %370, i8* %372, i8* %373
  br label %375

; <label>:375:                                    ; preds = %367, %365
  %376 = phi i8* [ %366, %365 ], [ %374, %367 ]
  %377 = getelementptr [50 x i8], [50 x i8]* @.str.5.1173, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %377, i8* %376)
  br label %378

; <label>:378:                                    ; preds = %357, %375
  %379 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %380 = load i8, i8* %379, align 8
  %381 = trunc i8 %380 to i1
  br i1 %381, label %386, label %382

; <label>:382:                                    ; preds = %378
  %383 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %384 = load i8, i8* %383, align 8
  %385 = trunc i8 %384 to i1
  br i1 %385, label %386, label %389

; <label>:386:                                    ; preds = %382, %378
  %387 = getelementptr [14 x i8], [14 x i8]* @.str.9.1174, i32 0, i32 0
  %388 = call i8* @gettext(i8* %387) #8
  br label %392

; <label>:389:                                    ; preds = %382
  %390 = getelementptr [42 x i8], [42 x i8]* @.str.10.1175, i32 0, i32 0
  %391 = call i8* @gettext(i8* %390) #8
  br label %392

; <label>:392:                                    ; preds = %389, %386
  %393 = phi i8* [ %388, %386 ], [ %391, %389 ]
  %394 = load i8*, i8** %6, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %393, i8* %394)
  %395 = load i8*, i8** %6, align 8
  %396 = call i32 @unlink(i8* %395) #8
  %397 = icmp ne i32 %396, 0
  br i1 %397, label %398, label %403

; <label>:398:                                    ; preds = %392
  %399 = call i32* @__errno_location() #15
  %400 = load i32, i32* %399, align 4
  %401 = call i8* @strerror(i32 %400) #8
  %402 = getelementptr [12 x i8], [12 x i8]* @.str.11.1176, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %402, i8* %401)
  br label %403

; <label>:403:                                    ; preds = %398, %392
  %404 = getelementptr [2 x i8], [2 x i8]* @.str.12.1177, i32 0, i32 0
  call void @logputs(i32 0, i8* %404)
  %405 = load i8*, i8** %6, align 8
  call void @register_delete_file(i8* %405)
  br label %406

; <label>:406:                                    ; preds = %343, %354, %403
  %407 = load i8*, i8** %4, align 8
  call void @free(i8* %407) #8
  store i8* null, i8** %4, align 8
  %408 = load i8*, i8** %5, align 8
  call void @free(i8* %408) #8
  store i8* null, i8** %5, align 8
  %409 = load i8*, i8** %6, align 8
  call void @free(i8* %409) #8
  store i8* null, i8** %6, align 8
  %410 = load %struct.iri*, %struct.iri** %3, align 8
  call void @iri_free(%struct.iri* %410)
  br label %81

; <label>:411:                                    ; preds = %92, %91, %85
  %.0318 = phi i32 [ %.03, %85 ], [ %.03, %91 ], [ %.03, %92 ]
  %412 = icmp ne %struct._IO_FILE* %.05, null
  br i1 %412, label %413, label %415

; <label>:413:                                    ; preds = %411
  %414 = call i32 @fclose(%struct._IO_FILE* %.05)
  br label %415

; <label>:415:                                    ; preds = %413, %411
  %416 = call zeroext i1 @url_dequeue(%struct.url_queue* %56, %struct.iri** %19, i8** %14, i8** %15, i32* %16, i8* %17, i8* %18)
  br i1 %416, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %415
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 316)
  %417 = load %struct.iri*, %struct.iri** %19, align 8
  call void @iri_free(%struct.iri* %417)
  %418 = load i8*, i8** %14, align 8
  call void @free(i8* %418) #8
  store i8* null, i8** %14, align 8
  %419 = load i8*, i8** %15, align 8
  call void @free(i8* %419) #8
  store i8* null, i8** %15, align 8
  %420 = call zeroext i1 @url_dequeue(%struct.url_queue* %56, %struct.iri** %19, i8** %14, i8** %15, i32* %16, i8* %17, i8* %18)
  br i1 %420, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %415
  call void @url_queue_delete(%struct.url_queue* %56)
  call void @string_set_free(%struct.hash_table* %57)
  %421 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %422 = load i64, i64* %421, align 8
  %423 = icmp ne i64 %422, 0
  br i1 %423, label %424, label %429

; <label>:424:                                    ; preds = %._crit_edge
  %425 = load i64, i64* @total_downloaded_bytes, align 8
  %426 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %427 = load i64, i64* %426, align 8
  %428 = icmp sgt i64 %425, %427
  br i1 %428, label %431, label %429

; <label>:429:                                    ; preds = %424, %._crit_edge
  %430 = icmp eq i32 %.0318, 21
  %. = select i1 %430, i32 21, i32 25
  br label %431

; <label>:431:                                    ; preds = %429, %424
  %.0 = phi i32 [ 43, %424 ], [ %., %429 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.url_queue* @url_queue_new() #7 {
  %1 = call noalias i8* @xcalloc(i64 1, i64 24)
  %2 = bitcast i8* %1 to %struct.url_queue*
  ret %struct.url_queue* %2
}

; Function Attrs: noinline nounwind uwtable
define internal void @url_enqueue(%struct.url_queue*, %struct.iri*, i8*, i8*, i32, i1 zeroext, i1 zeroext) #0 {
  %8 = zext i1 %5 to i8
  %9 = zext i1 %6 to i8
  %10 = call noalias i8* @xmalloc(i64 48)
  %11 = bitcast i8* %10 to %struct.queue_element*
  %12 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %11, i32 0, i32 4
  store %struct.iri* %1, %struct.iri** %12, align 8
  %13 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %11, i32 0, i32 0
  store i8* %2, i8** %13, align 8
  %14 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %11, i32 0, i32 1
  store i8* %3, i8** %14, align 8
  %15 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %11, i32 0, i32 2
  store i32 %4, i32* %15, align 8
  %16 = trunc i8 %8 to i1
  %17 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %11, i32 0, i32 3
  %18 = zext i1 %16 to i8
  store i8 %18, i8* %17, align 4
  %19 = trunc i8 %9 to i1
  %20 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %11, i32 0, i32 5
  %21 = zext i1 %19 to i8
  store i8 %21, i8* %20, align 8
  %22 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %11, i32 0, i32 6
  store %struct.queue_element* null, %struct.queue_element** %22, align 8
  %23 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %23, align 8
  %26 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %27, %29
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %7
  %32 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 3
  store i32 %33, i32* %34, align 4
  br label %35

; <label>:35:                                     ; preds = %7, %31
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %37 = load i8, i8* %36, align 1
  %38 = trunc i8 %37 to i1
  br i1 %38, label %39, label %42

; <label>:39:                                     ; preds = %35
  %40 = call i8* @quotearg_n_style(i32 0, i32 7, i8* %2)
  %41 = getelementptr [26 x i8], [26 x i8]* @.str.13.1219, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %41, i8* %40, i32 %4)
  br label %42

; <label>:42:                                     ; preds = %39, %35
  %43 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %44 = load i8, i8* %43, align 1
  %45 = trunc i8 %44 to i1
  br i1 %45, label %46, label %52

; <label>:46:                                     ; preds = %42
  %47 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 2
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr [30 x i8], [30 x i8]* @.str.14.1217, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %51, i32 %48, i32 %50)
  br label %52

; <label>:52:                                     ; preds = %42, %46
  %53 = icmp ne %struct.iri* %1, null
  br i1 %53, label %54, label %72

; <label>:54:                                     ; preds = %52
  %55 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %56 = load i8, i8* %55, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %72

; <label>:58:                                     ; preds = %54
  %59 = call i8* @quote_n(i32 0, i8* %2)
  %60 = getelementptr inbounds %struct.iri, %struct.iri* %1, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = icmp ne i8* %61, null
  br i1 %62, label %63, label %67

; <label>:63:                                     ; preds = %58
  %64 = getelementptr inbounds %struct.iri, %struct.iri* %1, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = call i8* @quote_n(i32 1, i8* %65)
  br label %69

; <label>:67:                                     ; preds = %58
  %68 = getelementptr [5 x i8], [5 x i8]* @.str.16.1220, i32 0, i32 0
  br label %69

; <label>:69:                                     ; preds = %67, %63
  %70 = phi i8* [ %66, %63 ], [ %68, %67 ]
  %71 = getelementptr [27 x i8], [27 x i8]* @.str.15.1221, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %71, i8* %59, i8* %70)
  br label %72

; <label>:72:                                     ; preds = %69, %54, %52
  %73 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 1
  %74 = load %struct.queue_element*, %struct.queue_element** %73, align 8
  %75 = icmp ne %struct.queue_element* %74, null
  br i1 %75, label %76, label %80

; <label>:76:                                     ; preds = %72
  %77 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 1
  %78 = load %struct.queue_element*, %struct.queue_element** %77, align 8
  %79 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %78, i32 0, i32 6
  store %struct.queue_element* %11, %struct.queue_element** %79, align 8
  br label %80

; <label>:80:                                     ; preds = %76, %72
  %81 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 1
  store %struct.queue_element* %11, %struct.queue_element** %81, align 8
  %82 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 0
  %83 = load %struct.queue_element*, %struct.queue_element** %82, align 8
  %84 = icmp ne %struct.queue_element* %83, null
  br i1 %84, label %89, label %85

; <label>:85:                                     ; preds = %80
  %86 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 1
  %87 = load %struct.queue_element*, %struct.queue_element** %86, align 8
  %88 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 0
  store %struct.queue_element* %87, %struct.queue_element** %88, align 8
  br label %89

; <label>:89:                                     ; preds = %85, %80
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @blacklist_add(%struct.hash_table*, i8*) #0 {
  %3 = call noalias i8* @xstrdup(i8* %1)
  call void @url_unescape(i8* %3)
  call void @string_set_add(%struct.hash_table* %0, i8* %3)
  call void @free(i8* %3) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_reject_log_header(%struct._IO_FILE*) #0 {
  %2 = icmp ne %struct._IO_FILE* %0, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = getelementptr [136 x i8], [136 x i8]* @.str.35.1218, i32 0, i32 0
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* %4)
  br label %6

; <label>:6:                                      ; preds = %1, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @url_dequeue(%struct.url_queue*, %struct.iri**, i8**, i8**, i32*, i8*, i8*) #0 {
  %8 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 0
  %9 = load %struct.queue_element*, %struct.queue_element** %8, align 8
  %10 = icmp ne %struct.queue_element* %9, null
  br i1 %10, label %11, label %64

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 0
  %13 = load %struct.queue_element*, %struct.queue_element** %12, align 8
  %14 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %13, i32 0, i32 6
  %15 = load %struct.queue_element*, %struct.queue_element** %14, align 8
  %16 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 0
  store %struct.queue_element* %15, %struct.queue_element** %16, align 8
  %17 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 0
  %18 = load %struct.queue_element*, %struct.queue_element** %17, align 8
  %19 = icmp ne %struct.queue_element* %18, null
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %11
  %21 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 1
  store %struct.queue_element* null, %struct.queue_element** %21, align 8
  br label %22

; <label>:22:                                     ; preds = %20, %11
  %23 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 4
  %24 = load %struct.iri*, %struct.iri** %23, align 8
  store %struct.iri* %24, %struct.iri** %1, align 8
  %25 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  store i8* %26, i8** %2, align 8
  %27 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 1
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %3, align 8
  %29 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 2
  %30 = load i32, i32* %29, align 8
  store i32 %30, i32* %4, align 4
  %31 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 3
  %32 = load i8, i8* %31, align 4
  %33 = trunc i8 %32 to i1
  %34 = zext i1 %33 to i8
  store i8 %34, i8* %5, align 1
  %35 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 5
  %36 = load i8, i8* %35, align 8
  %37 = trunc i8 %36 to i1
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %6, align 1
  %39 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = add nsw i32 %40, -1
  store i32 %41, i32* %39, align 8
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %43 = load i8, i8* %42, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %52

; <label>:45:                                     ; preds = %22
  %46 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i8* @quotearg_n_style(i32 0, i32 7, i8* %47)
  %49 = getelementptr inbounds %struct.queue_element, %struct.queue_element* %9, i32 0, i32 2
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr [26 x i8], [26 x i8]* @.str.17.1216, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %51, i8* %48, i32 %50)
  br label %52

; <label>:52:                                     ; preds = %45, %22
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %54 = load i8, i8* %53, align 1
  %55 = trunc i8 %54 to i1
  br i1 %55, label %56, label %62

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 2
  %58 = load i32, i32* %57, align 8
  %59 = getelementptr inbounds %struct.url_queue, %struct.url_queue* %0, i32 0, i32 3
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr [30 x i8], [30 x i8]* @.str.14.1217, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %61, i32 %58, i32 %60)
  br label %62

; <label>:62:                                     ; preds = %56, %52
  %63 = bitcast %struct.queue_element* %9 to i8*
  call void @free(i8* %63) #8
  br label %64

; <label>:64:                                     ; preds = %7, %62
  %.0 = phi i1 [ true, %62 ], [ false, %7 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @descend_redirect(i8*, %struct.url*, i32, %struct.url*, %struct.hash_table*, %struct.iri*) #0 {
  %7 = call %struct.url* @url_parse(i8* %0, i32* null, %struct.iri* null, i1 zeroext false)
  %8 = call noalias i8* @xcalloc(i64 1, i64 48)
  %9 = bitcast i8* %8 to %struct.urlpos*
  %10 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %9, i32 0, i32 0
  store %struct.url* %7, %struct.url** %10, align 8
  %11 = call i32 @download_child(%struct.urlpos* %9, %struct.url* %1, i32 %2, %struct.url* %3, %struct.hash_table* %4, %struct.iri* %5)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %6
  %14 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %9, i32 0, i32 0
  %15 = load %struct.url*, %struct.url** %14, align 8
  %16 = getelementptr inbounds %struct.url, %struct.url* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @blacklist_add(%struct.hash_table* %4, i8* %17)
  br label %24

; <label>:18:                                     ; preds = %6
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %20 = load i8, i8* %19, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %18
  %23 = getelementptr [35 x i8], [35 x i8]* @.str.34.1215, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %23, i8* %0)
  br label %24

; <label>:24:                                     ; preds = %22, %18, %13
  call void @url_free(%struct.url* %7)
  %25 = bitcast %struct.urlpos* %9 to i8*
  call void @free(i8* %25) #8
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_reject_log_reason(%struct._IO_FILE*, i32, %struct.url*, %struct.url*) #0 {
  %5 = icmp ne %struct._IO_FILE* %0, null
  br i1 %5, label %6, label %40

; <label>:6:                                      ; preds = %4
  switch i32 %1, label %31 [
    i32 0, label %7
    i32 1, label %9
    i32 2, label %11
    i32 3, label %13
    i32 4, label %15
    i32 5, label %17
    i32 6, label %19
    i32 7, label %21
    i32 8, label %23
    i32 9, label %25
    i32 10, label %27
    i32 11, label %29
  ]

; <label>:7:                                      ; preds = %6
  %8 = getelementptr [8 x i8], [8 x i8]* @.str.36.1194, i32 0, i32 0
  br label %33

; <label>:9:                                      ; preds = %6
  %10 = getelementptr [10 x i8], [10 x i8]* @.str.37.1195, i32 0, i32 0
  br label %33

; <label>:11:                                     ; preds = %6
  %12 = getelementptr [9 x i8], [9 x i8]* @.str.38.1196, i32 0, i32 0
  br label %33

; <label>:13:                                     ; preds = %6
  %14 = getelementptr [8 x i8], [8 x i8]* @.str.39.1197, i32 0, i32 0
  br label %33

; <label>:15:                                     ; preds = %6
  %16 = getelementptr [9 x i8], [9 x i8]* @.str.40.1198, i32 0, i32 0
  br label %33

; <label>:17:                                     ; preds = %6
  %18 = getelementptr [7 x i8], [7 x i8]* @.str.41.1199, i32 0, i32 0
  br label %33

; <label>:19:                                     ; preds = %6
  %20 = getelementptr [7 x i8], [7 x i8]* @.str.42.1200, i32 0, i32 0
  br label %33

; <label>:21:                                     ; preds = %6
  %22 = getelementptr [5 x i8], [5 x i8]* @.str.43.1201, i32 0, i32 0
  br label %33

; <label>:23:                                     ; preds = %6
  %24 = getelementptr [6 x i8], [6 x i8]* @.str.44.1202, i32 0, i32 0
  br label %33

; <label>:25:                                     ; preds = %6
  %26 = getelementptr [6 x i8], [6 x i8]* @.str.45.1203, i32 0, i32 0
  br label %33

; <label>:27:                                     ; preds = %6
  %28 = getelementptr [12 x i8], [12 x i8]* @.str.46.1204, i32 0, i32 0
  br label %33

; <label>:29:                                     ; preds = %6
  %30 = getelementptr [7 x i8], [7 x i8]* @.str.47.1205, i32 0, i32 0
  br label %33

; <label>:31:                                     ; preds = %6
  %32 = getelementptr [8 x i8], [8 x i8]* @.str.48.1206, i32 0, i32 0
  br label %33

; <label>:33:                                     ; preds = %31, %29, %27, %25, %23, %21, %19, %17, %15, %13, %11, %9, %7
  %.0 = phi i8* [ %32, %31 ], [ %30, %29 ], [ %28, %27 ], [ %26, %25 ], [ %24, %23 ], [ %22, %21 ], [ %20, %19 ], [ %18, %17 ], [ %16, %15 ], [ %14, %13 ], [ %12, %11 ], [ %10, %9 ], [ %8, %7 ]
  %34 = getelementptr [4 x i8], [4 x i8]* @.str.49.1207, i32 0, i32 0
  %35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* %34, i8* %.0)
  call void @write_reject_log_url(%struct._IO_FILE* %0, %struct.url* %2)
  %36 = getelementptr [2 x i8], [2 x i8]* @.str.50.1208, i32 0, i32 0
  %37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* %36)
  call void @write_reject_log_url(%struct._IO_FILE* %0, %struct.url* %3)
  %38 = getelementptr [2 x i8], [2 x i8]* @.str.12.1177, i32 0, i32 0
  %39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* %38)
  br label %40

; <label>:40:                                     ; preds = %4, %33
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @download_child(%struct.urlpos*, %struct.url*, i32, %struct.url*, %struct.hash_table*, %struct.iri*) #0 {
  %7 = alloca i8*, align 8, !track !639
  %8 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %0, i32 0, i32 0
  %9 = load %struct.url*, %struct.url** %8, align 8
  %10 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %6
  %16 = getelementptr [35 x i8], [35 x i8]* @.str.18.1178, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %16, i8* %11)
  br label %17

; <label>:17:                                     ; preds = %6, %15
  %18 = call i32 @blacklist_contains(%struct.hash_table* %4, i8* %11)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %41

; <label>:20:                                     ; preds = %17
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %22 = load i8, i8* %21, align 8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %24, label %35

; <label>:24:                                     ; preds = %20
  %25 = call i8* @url_string(%struct.url* %1, i32 1)
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %27 = load i8, i8* %26, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %34

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i8* @quote(i8* %31)
  %33 = getelementptr [36 x i8], [36 x i8]* @.str.19.1179, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %33, i8* %32)
  br label %34

; <label>:34:                                     ; preds = %29, %24
  call void @free(i8* %25) #8
  br label %35

; <label>:35:                                     ; preds = %20, %34
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %37 = load i8, i8* %36, align 1
  %38 = trunc i8 %37 to i1
  br i1 %38, label %39, label %311

; <label>:39:                                     ; preds = %35
  %40 = getelementptr [28 x i8], [28 x i8]* @.str.20.1180, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %40)
  br label %311

; <label>:41:                                     ; preds = %17
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 124
  %43 = load i8, i8* %42, align 8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %55

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = icmp ne i32 %47, 1
  br i1 %48, label %49, label %55

; <label>:49:                                     ; preds = %45
  %50 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %51 = load i8, i8* %50, align 1
  %52 = trunc i8 %51 to i1
  br i1 %52, label %53, label %311

; <label>:53:                                     ; preds = %49
  %54 = getelementptr [32 x i8], [32 x i8]* @.str.21.1181, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %54)
  br label %311

; <label>:55:                                     ; preds = %45, %41
  %56 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = call zeroext i1 @schemes_are_similar_p(i32 %57, i32 0)
  %59 = zext i1 %58 to i8
  %60 = trunc i8 %59 to i1
  br i1 %60, label %79, label %61

; <label>:61:                                     ; preds = %55
  %62 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 2
  br i1 %64, label %69, label %65

; <label>:65:                                     ; preds = %61
  %66 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 3
  br i1 %68, label %69, label %73

; <label>:69:                                     ; preds = %65, %61
  %70 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 44
  %71 = load i8, i8* %70, align 8
  %72 = trunc i8 %71 to i1
  br i1 %72, label %79, label %73

; <label>:73:                                     ; preds = %65, %69
  %74 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %75 = load i8, i8* %74, align 1
  %76 = trunc i8 %75 to i1
  br i1 %76, label %77, label %311

; <label>:77:                                     ; preds = %73
  %78 = getelementptr [33 x i8], [33 x i8]* @.str.22.1182, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %78)
  br label %311

; <label>:79:                                     ; preds = %69, %55
  %80 = trunc i8 %59 to i1
  br i1 %80, label %81, label %98

; <label>:81:                                     ; preds = %79
  %82 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9
  %83 = load i8, i8* %82, align 8
  %84 = trunc i8 %83 to i1
  br i1 %84, label %85, label %98

; <label>:85:                                     ; preds = %81
  %86 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %0, i32 0, i32 2
  %87 = load i16, i16* %86, align 8
  %88 = lshr i16 %87, 1
  %89 = and i16 %88, 1
  %90 = zext i16 %89 to i32
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %98, label %92

; <label>:92:                                     ; preds = %85
  %93 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %94 = load i8, i8* %93, align 1
  %95 = trunc i8 %94 to i1
  br i1 %95, label %96, label %311

; <label>:96:                                     ; preds = %92
  %97 = getelementptr [46 x i8], [46 x i8]* @.str.23.1183, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %97)
  br label %311

; <label>:98:                                     ; preds = %81, %85, %79
  %99 = call zeroext i1 @accept_domain(%struct.url* %9)
  br i1 %99, label %106, label %100

; <label>:100:                                    ; preds = %98
  %101 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %102 = load i8, i8* %101, align 1
  %103 = trunc i8 %102 to i1
  br i1 %103, label %104, label %311

; <label>:104:                                    ; preds = %100
  %105 = getelementptr [30 x i8], [30 x i8]* @.str.24.1184, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %105)
  br label %311

; <label>:106:                                    ; preds = %98
  %107 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %108 = load i8, i8* %107, align 1
  %109 = trunc i8 %108 to i1
  br i1 %109, label %110, label %162

; <label>:110:                                    ; preds = %106
  %111 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 1
  %112 = load i32, i32* %111, align 8
  %113 = getelementptr inbounds %struct.url, %struct.url* %3, i32 0, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = call zeroext i1 @schemes_are_similar_p(i32 %112, i32 %114)
  br i1 %115, label %116, label %162

; <label>:116:                                    ; preds = %110
  %117 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 2
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds %struct.url, %struct.url* %3, i32 0, i32 2
  %120 = load i8*, i8** %119, align 8
  %121 = call i32 @strcasecmp(i8* %118, i8* %120) #14
  %122 = icmp eq i32 0, %121
  br i1 %122, label %123, label %162

; <label>:123:                                    ; preds = %116
  %124 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 1
  %125 = load i32, i32* %124, align 8
  %126 = getelementptr inbounds %struct.url, %struct.url* %3, i32 0, i32 1
  %127 = load i32, i32* %126, align 8
  %128 = icmp ne i32 %125, %127
  br i1 %128, label %135, label %129

; <label>:129:                                    ; preds = %123
  %130 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 3
  %131 = load i32, i32* %130, align 8
  %132 = getelementptr inbounds %struct.url, %struct.url* %3, i32 0, i32 3
  %133 = load i32, i32* %132, align 8
  %134 = icmp eq i32 %131, %133
  br i1 %134, label %135, label %162

; <label>:135:                                    ; preds = %129, %123
  %136 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %137 = load i8, i8* %136, align 2
  %138 = trunc i8 %137 to i1
  br i1 %138, label %139, label %146

; <label>:139:                                    ; preds = %135
  %140 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %0, i32 0, i32 2
  %141 = load i16, i16* %140, align 8
  %142 = lshr i16 %141, 4
  %143 = and i16 %142, 1
  %144 = zext i16 %143 to i32
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %162, label %146

; <label>:146:                                    ; preds = %139, %135
  %147 = getelementptr inbounds %struct.url, %struct.url* %3, i32 0, i32 8
  %148 = load i8*, i8** %147, align 8
  %149 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 8
  %150 = load i8*, i8** %149, align 8
  %151 = call zeroext i1 @subdir_p(i8* %148, i8* %150)
  br i1 %151, label %162, label %152

; <label>:152:                                    ; preds = %146
  %153 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %154 = load i8, i8* %153, align 1
  %155 = trunc i8 %154 to i1
  br i1 %155, label %156, label %311

; <label>:156:                                    ; preds = %152
  %157 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 8
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds %struct.url, %struct.url* %3, i32 0, i32 8
  %160 = load i8*, i8** %159, align 8
  %161 = getelementptr [52 x i8], [52 x i8]* @.str.25.1185, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %161, i8* %158, i8* %160)
  br label %311

; <label>:162:                                    ; preds = %146, %139, %129, %116, %110, %106
  %163 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 30
  %164 = load i8**, i8*** %163, align 8
  %165 = icmp ne i8** %164, null
  br i1 %165, label %170, label %166

; <label>:166:                                    ; preds = %162
  %167 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  %168 = load i8**, i8*** %167, align 8
  %169 = icmp ne i8** %168, null
  br i1 %169, label %170, label %182

; <label>:170:                                    ; preds = %166, %162
  %171 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 8
  %172 = load i8*, i8** %171, align 8
  %173 = call zeroext i1 @accdir(i8* %172)
  br i1 %173, label %182, label %174

; <label>:174:                                    ; preds = %170
  %175 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %176 = load i8, i8* %175, align 1
  %177 = trunc i8 %176 to i1
  br i1 %177, label %178, label %311

; <label>:178:                                    ; preds = %174
  %179 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 8
  %180 = load i8*, i8** %179, align 8
  %181 = getelementptr [35 x i8], [35 x i8]* @.str.26.1186, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %181, i8* %11, i8* %180)
  br label %311

; <label>:182:                                    ; preds = %170, %166
  %183 = call zeroext i1 @accept_url(i8* %11)
  br i1 %183, label %190, label %184

; <label>:184:                                    ; preds = %182
  %185 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %186 = load i8, i8* %185, align 1
  %187 = trunc i8 %186 to i1
  br i1 %187, label %188, label %311

; <label>:188:                                    ; preds = %184
  %189 = getelementptr [44 x i8], [44 x i8]* @.str.27.1187, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %189, i8* %11)
  br label %311

; <label>:190:                                    ; preds = %182
  %191 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 9
  %192 = load i8*, i8** %191, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 0
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp ne i32 %195, 0
  br i1 %196, label %197, label %226

; <label>:197:                                    ; preds = %190
  %198 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 9
  %199 = load i8*, i8** %198, align 8
  %200 = call zeroext i1 @has_html_suffix_p(i8* %199)
  br i1 %200, label %201, label %214

; <label>:201:                                    ; preds = %197
  %202 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, -1
  br i1 %204, label %226, label %205

; <label>:205:                                    ; preds = %201
  %206 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %207 = load i32, i32* %206, align 4
  %208 = sub nsw i32 %207, 1
  %209 = icmp slt i32 %2, %208
  br i1 %209, label %226, label %210

; <label>:210:                                    ; preds = %205
  %211 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %212 = load i8, i8* %211, align 2
  %213 = trunc i8 %212 to i1
  br i1 %213, label %226, label %214

; <label>:214:                                    ; preds = %210, %197
  %215 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 9
  %216 = load i8*, i8** %215, align 8
  %217 = call zeroext i1 @acceptable(i8* %216)
  br i1 %217, label %226, label %218

; <label>:218:                                    ; preds = %214
  %219 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %220 = load i8, i8* %219, align 1
  %221 = trunc i8 %220 to i1
  br i1 %221, label %222, label %311

; <label>:222:                                    ; preds = %218
  %223 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 9
  %224 = load i8*, i8** %223, align 8
  %225 = getelementptr [39 x i8], [39 x i8]* @.str.28.1188, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %225, i8* %11, i8* %224)
  br label %311

; <label>:226:                                    ; preds = %214, %210, %205, %201, %190
  %227 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 1
  %228 = load i32, i32* %227, align 8
  %229 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 1
  %230 = load i32, i32* %229, align 8
  %231 = call zeroext i1 @schemes_are_similar_p(i32 %228, i32 %230)
  br i1 %231, label %232, label %253

; <label>:232:                                    ; preds = %226
  %233 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 7
  %234 = load i8, i8* %233, align 8
  %235 = trunc i8 %234 to i1
  br i1 %235, label %253, label %236

; <label>:236:                                    ; preds = %232
  %237 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %238 = load i8*, i8** %237, align 8
  %239 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 2
  %240 = load i8*, i8** %239, align 8
  %241 = call i32 @strcasecmp(i8* %238, i8* %240) #14
  %242 = icmp ne i32 0, %241
  br i1 %242, label %243, label %253

; <label>:243:                                    ; preds = %236
  %244 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %245 = load i8, i8* %244, align 1
  %246 = trunc i8 %245 to i1
  br i1 %246, label %247, label %311

; <label>:247:                                    ; preds = %243
  %248 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 2
  %249 = load i8*, i8** %248, align 8
  %250 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %251 = load i8*, i8** %250, align 8
  %252 = getelementptr [60 x i8], [60 x i8]* @.str.29.1189, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %252, i8* %249, i8* %251)
  br label %311

; <label>:253:                                    ; preds = %232, %236, %226
  %254 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 88
  %255 = load i8, i8* %254, align 8
  %256 = trunc i8 %255 to i1
  br i1 %256, label %257, label %311

; <label>:257:                                    ; preds = %253
  %258 = trunc i8 %59 to i1
  br i1 %258, label %259, label %311

; <label>:259:                                    ; preds = %257
  %260 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 2
  %261 = load i8*, i8** %260, align 8
  %262 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 3
  %263 = load i32, i32* %262, align 8
  %264 = call %struct.robot_specs* @res_get_specs(i8* %261, i32 %263)
  %265 = icmp ne %struct.robot_specs* %264, null
  br i1 %265, label %300, label %266

; <label>:266:                                    ; preds = %259
  %267 = call zeroext i1 @res_retrieve_file(i8* %11, i8** %7, %struct.iri* %5)
  br i1 %267, label %268, label %292

; <label>:268:                                    ; preds = %266
  %269 = load i8*, i8** %7, align 8
  %270 = call %struct.robot_specs* @res_parse_from_file(i8* %269)
  %271 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %272 = load i8, i8* %271, align 8
  %273 = trunc i8 %272 to i1
  br i1 %273, label %278, label %274

; <label>:274:                                    ; preds = %268
  %275 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %276 = load i8, i8* %275, align 8
  %277 = trunc i8 %276 to i1
  br i1 %277, label %278, label %290

; <label>:278:                                    ; preds = %274, %268
  %279 = getelementptr [14 x i8], [14 x i8]* @.str.9.1174, i32 0, i32 0
  %280 = call i8* @gettext(i8* %279) #8
  %281 = load i8*, i8** %7, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %280, i8* %281)
  %282 = load i8*, i8** %7, align 8
  %283 = call i32 @unlink(i8* %282) #8
  %284 = icmp ne i32 %283, 0
  br i1 %284, label %285, label %290

; <label>:285:                                    ; preds = %278
  %286 = call i32* @__errno_location() #15
  %287 = load i32, i32* %286, align 4
  %288 = call i8* @strerror(i32 %287) #8
  %289 = getelementptr [12 x i8], [12 x i8]* @.str.11.1176, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %289, i8* %288)
  br label %290

; <label>:290:                                    ; preds = %274, %285, %278
  %291 = load i8*, i8** %7, align 8
  call void @free(i8* %291) #8
  store i8* null, i8** %7, align 8
  br label %295

; <label>:292:                                    ; preds = %266
  %293 = getelementptr [1 x i8], [1 x i8]* @.str.30.1190, i32 0, i32 0
  %294 = call %struct.robot_specs* @res_parse(i8* %293, i32 0)
  br label %295

; <label>:295:                                    ; preds = %292, %290
  %.0 = phi %struct.robot_specs* [ %270, %290 ], [ %294, %292 ]
  %296 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 2
  %297 = load i8*, i8** %296, align 8
  %298 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 3
  %299 = load i32, i32* %298, align 8
  call void @res_register_specs(i8* %297, i32 %299, %struct.robot_specs* %.0)
  br label %300

; <label>:300:                                    ; preds = %295, %259
  %.1 = phi %struct.robot_specs* [ %264, %259 ], [ %.0, %295 ]
  %301 = getelementptr inbounds %struct.url, %struct.url* %9, i32 0, i32 4
  %302 = load i8*, i8** %301, align 8
  %303 = call zeroext i1 @res_match_path(%struct.robot_specs* %.1, i8* %302)
  br i1 %303, label %311, label %304

; <label>:304:                                    ; preds = %300
  %305 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %306 = load i8, i8* %305, align 1
  %307 = trunc i8 %306 to i1
  br i1 %307, label %308, label %310

; <label>:308:                                    ; preds = %304
  %309 = getelementptr [49 x i8], [49 x i8]* @.str.31.1191, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %309, i8* %11)
  br label %310

; <label>:310:                                    ; preds = %304, %308
  call void @blacklist_add(%struct.hash_table* %4, i8* %11)
  br label %311

; <label>:311:                                    ; preds = %253, %257, %300, %247, %243, %222, %218, %188, %184, %178, %174, %156, %152, %104, %100, %96, %92, %77, %73, %53, %49, %39, %35, %310
  %.01 = phi i32 [ 11, %310 ], [ 1, %35 ], [ 1, %39 ], [ 2, %49 ], [ 2, %53 ], [ 3, %73 ], [ 3, %77 ], [ 4, %92 ], [ 4, %96 ], [ 5, %100 ], [ 5, %104 ], [ 6, %152 ], [ 6, %156 ], [ 7, %174 ], [ 7, %178 ], [ 8, %184 ], [ 8, %188 ], [ 9, %218 ], [ 9, %222 ], [ 10, %243 ], [ 10, %247 ], [ 0, %300 ], [ 0, %257 ], [ 0, %253 ]
  %312 = icmp eq i32 %.01, 0
  %313 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %314 = load i8, i8* %313, align 1
  %315 = trunc i8 %314 to i1
  br i1 %312, label %316, label %319

; <label>:316:                                    ; preds = %311
  br i1 %315, label %317, label %322

; <label>:317:                                    ; preds = %316
  %318 = getelementptr [21 x i8], [21 x i8]* @.str.32.1192, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %318)
  br label %322

; <label>:319:                                    ; preds = %311
  br i1 %315, label %320, label %322

; <label>:320:                                    ; preds = %319
  %321 = getelementptr [25 x i8], [25 x i8]* @.str.33.1193, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %321)
  br label %322

; <label>:322:                                    ; preds = %320, %319, %317, %316
  ret i32 %.01
}

; Function Attrs: noinline nounwind uwtable
define internal void @url_queue_delete(%struct.url_queue*) #0 {
  %2 = bitcast %struct.url_queue* %0 to i8*
  call void @free(i8* %2) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @blacklist_contains(%struct.hash_table*, i8*) #0 {
  %3 = call noalias i8* @xstrdup(i8* %1)
  call void @url_unescape(i8* %3)
  %4 = call i32 @string_set_contains(%struct.hash_table* %0, i8* %3)
  call void @free(i8* %3) #8
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_reject_log_url(%struct._IO_FILE*, %struct.url*) #0 {
  %3 = icmp ne %struct._IO_FILE* %0, null
  br i1 %3, label %4, label %59

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = call i8* @url_escape(i8* %6)
  %8 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %18 [
    i32 0, label %10
    i32 1, label %12
    i32 3, label %14
    i32 2, label %16
  ]

; <label>:10:                                     ; preds = %4
  %11 = getelementptr [12 x i8], [12 x i8]* @.str.51.1209, i32 0, i32 0
  br label %20

; <label>:12:                                     ; preds = %4
  %13 = getelementptr [13 x i8], [13 x i8]* @.str.52.1210, i32 0, i32 0
  br label %20

; <label>:14:                                     ; preds = %4
  %15 = getelementptr [12 x i8], [12 x i8]* @.str.53.1211, i32 0, i32 0
  br label %20

; <label>:16:                                     ; preds = %4
  %17 = getelementptr [11 x i8], [11 x i8]* @.str.54.1212, i32 0, i32 0
  br label %20

; <label>:18:                                     ; preds = %4
  %19 = getelementptr [15 x i8], [15 x i8]* @.str.55.1213, i32 0, i32 0
  br label %20

; <label>:20:                                     ; preds = %18, %16, %14, %12, %10
  %.0 = phi i8* [ %19, %18 ], [ %17, %16 ], [ %15, %14 ], [ %13, %12 ], [ %11, %10 ]
  %21 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 4
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 5
  %28 = load i8*, i8** %27, align 8
  %29 = icmp ne i8* %28, null
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %20
  %31 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 5
  %32 = load i8*, i8** %31, align 8
  br label %35

; <label>:33:                                     ; preds = %20
  %34 = getelementptr [1 x i8], [1 x i8]* @.str.30.1190, i32 0, i32 0
  br label %35

; <label>:35:                                     ; preds = %33, %30
  %36 = phi i8* [ %32, %30 ], [ %34, %33 ]
  %37 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 6
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %40, label %43

; <label>:40:                                     ; preds = %35
  %41 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 6
  %42 = load i8*, i8** %41, align 8
  br label %45

; <label>:43:                                     ; preds = %35
  %44 = getelementptr [1 x i8], [1 x i8]* @.str.30.1190, i32 0, i32 0
  br label %45

; <label>:45:                                     ; preds = %43, %40
  %46 = phi i8* [ %42, %40 ], [ %44, %43 ]
  %47 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 7
  %48 = load i8*, i8** %47, align 8
  %49 = icmp ne i8* %48, null
  br i1 %49, label %50, label %53

; <label>:50:                                     ; preds = %45
  %51 = getelementptr inbounds %struct.url, %struct.url* %1, i32 0, i32 7
  %52 = load i8*, i8** %51, align 8
  br label %55

; <label>:53:                                     ; preds = %45
  %54 = getelementptr [1 x i8], [1 x i8]* @.str.30.1190, i32 0, i32 0
  br label %55

; <label>:55:                                     ; preds = %53, %50
  %56 = phi i8* [ %52, %50 ], [ %54, %53 ]
  %57 = getelementptr [24 x i8], [24 x i8]* @.str.56.1214, i32 0, i32 0
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* %57, i8* %7, i8* %.0, i8* %22, i32 %24, i8* %26, i8* %36, i8* %46, i8* %56)
  call void @free(i8* %7) #8
  br label %59

; <label>:59:                                     ; preds = %2, %55
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.robot_specs* @res_parse(i8*, i32) #7 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  store i8 0, i8* %3, align 1
  store i8 0, i8* %4, align 1
  %7 = call noalias i8* @xcalloc(i64 1, i64 16)
  %8 = bitcast i8* %7 to %struct.robot_specs*
  %9 = icmp eq i8* %0, %6
  br i1 %9, label %._crit_edge, label %.lr.ph24.preheader

.lr.ph24.preheader:                               ; preds = %2
  br label %.lr.ph24

.lr.ph24:                                         ; preds = %.lr.ph24.preheader, %175
  %.0220 = phi i32 [ %176, %175 ], [ 1, %.lr.ph24.preheader ]
  %.0319 = phi i8* [ %.01, %175 ], [ %0, %.lr.ph24.preheader ]
  %.0618 = phi i8 [ %.39, %175 ], [ 0, %.lr.ph24.preheader ]
  %.01017 = phi i32 [ %.313, %175 ], [ 0, %.lr.ph24.preheader ]
  call void @unroll_loop(i32 317)
  %10 = ptrtoint i8* %6 to i64
  %11 = ptrtoint i8* %.0319 to i64
  %12 = sub i64 %10, %11
  %13 = call i8* @memchr(i8* %.0319, i32 10, i64 %12) #14, !track !640
  %14 = icmp ne i8* %13, null
  %15 = getelementptr inbounds i8, i8* %13, i32 1
  %.01 = select i1 %14, i8* %15, i8* %6
  br label %16

; <label>:16:                                     ; preds = %22, %.lr.ph24
  %.1 = phi i8* [ %.0319, %.lr.ph24 ], [ %24, %22 ]
  call void @unroll_loop(i32 318)
  %17 = icmp uge i8* %.1, %.01
  br i1 %17, label %22, label %18

; <label>:18:                                     ; preds = %16
  %19 = load i8, i8* %.1, align 1
  %20 = sext i8 %19 to i32
  %21 = call zeroext i1 @c_isspace(i32 %20)
  br label %22

; <label>:22:                                     ; preds = %18, %16
  %23 = phi i1 [ false, %16 ], [ %21, %18 ]
  %24 = getelementptr inbounds i8, i8* %.1, i32 1
  br i1 %23, label %16, label %25

; <label>:25:                                     ; preds = %22
  %.1.lcssa = phi i8* [ %.1, %22 ]
  %26 = icmp uge i8* %.1.lcssa, %.01
  br i1 %26, label %175, label %27

; <label>:27:                                     ; preds = %25
  %28 = load i8, i8* %.1.lcssa, align 1
  %29 = sext i8 %28 to i32
  %30 = icmp eq i32 %29, 35
  br i1 %30, label %175, label %31

; <label>:31:                                     ; preds = %27
  %32 = icmp ult i8* %.1.lcssa, %.01
  br i1 %32, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %31
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %43
  %.0415 = phi i8* [ %44, %43 ], [ %.1.lcssa, %.lr.ph.preheader ]
  call void @unroll_loop(i32 319)
  %33 = icmp eq i8* %.0415, %.1.lcssa
  br i1 %33, label %39, label %34

; <label>:34:                                     ; preds = %.lr.ph
  %35 = getelementptr inbounds i8, i8* %.0415, i64 -1
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = call zeroext i1 @c_isspace(i32 %37)
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %34, %.lr.ph
  %40 = load i8, i8* %.0415, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 35
  br i1 %42, label %.loopexit.loopexit, label %43

; <label>:43:                                     ; preds = %34, %39
  %44 = getelementptr inbounds i8, i8* %.0415, i32 1
  %45 = icmp ult i8* %44, %.01
  br i1 %45, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %39, %43
  %.04.lcssa.ph = phi i8* [ %44, %43 ], [ %.0415, %39 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %31
  %.04.lcssa = phi i8* [ %.1.lcssa, %31 ], [ %.04.lcssa.ph, %.loopexit.loopexit ]
  br label %46

; <label>:46:                                     ; preds = %53, %.loopexit
  %.15 = phi i8* [ %.04.lcssa, %.loopexit ], [ %55, %53 ]
  call void @unroll_loop(i32 320)
  %47 = icmp ugt i8* %.15, %.1.lcssa
  br i1 %47, label %48, label %53

; <label>:48:                                     ; preds = %46
  %49 = getelementptr inbounds i8, i8* %.15, i64 -1
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = call zeroext i1 @c_isspace(i32 %51)
  br label %53

; <label>:53:                                     ; preds = %48, %46
  %54 = phi i1 [ false, %46 ], [ %52, %48 ]
  %55 = getelementptr inbounds i8, i8* %.15, i32 -1
  br i1 %54, label %46, label %56

; <label>:56:                                     ; preds = %53
  %.15.lcssa = phi i8* [ %.15, %53 ]
  br label %57

; <label>:57:                                     ; preds = %67, %56
  %.2 = phi i8* [ %.1.lcssa, %56 ], [ %69, %67 ]
  call void @unroll_loop(i32 321)
  %58 = icmp uge i8* %.2, %.15.lcssa
  br i1 %58, label %67, label %59

; <label>:59:                                     ; preds = %57
  %60 = load i8, i8* %.2, align 1
  %61 = sext i8 %60 to i32
  %62 = call zeroext i1 @c_isalnum(i32 %61)
  br i1 %62, label %67, label %63

; <label>:63:                                     ; preds = %59
  %64 = load i8, i8* %.2, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp eq i32 %65, 45
  br label %67

; <label>:67:                                     ; preds = %59, %63, %57
  %68 = phi i1 [ false, %57 ], [ true, %59 ], [ %66, %63 ]
  %69 = getelementptr inbounds i8, i8* %.2, i32 1
  br i1 %68, label %57, label %70

; <label>:70:                                     ; preds = %67
  %.2.lcssa = phi i8* [ %.2, %67 ]
  br label %71

; <label>:71:                                     ; preds = %77, %70
  %.3 = phi i8* [ %.2.lcssa, %70 ], [ %79, %77 ]
  call void @unroll_loop(i32 322)
  %72 = icmp uge i8* %.3, %.15.lcssa
  br i1 %72, label %77, label %73

; <label>:73:                                     ; preds = %71
  %74 = load i8, i8* %.3, align 1
  %75 = sext i8 %74 to i32
  %76 = call zeroext i1 @c_isspace(i32 %75)
  br label %77

; <label>:77:                                     ; preds = %73, %71
  %78 = phi i1 [ false, %71 ], [ %76, %73 ]
  %79 = getelementptr inbounds i8, i8* %.3, i32 1
  br i1 %78, label %71, label %80

; <label>:80:                                     ; preds = %77
  %.3.lcssa = phi i8* [ %.3, %77 ]
  %81 = icmp eq i8* %.1.lcssa, %.2.lcssa
  %82 = icmp uge i8* %.3.lcssa, %.15.lcssa
  %or.cond = or i1 %81, %82
  br i1 %or.cond, label %87, label %83

; <label>:83:                                     ; preds = %80
  %84 = load i8, i8* %.3.lcssa, align 1
  %85 = sext i8 %84 to i32
  %86 = icmp ne i32 %85, 58
  br i1 %86, label %87, label %93

; <label>:87:                                     ; preds = %80, %83
  %88 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %89 = load i8, i8* %88, align 1
  %90 = trunc i8 %89 to i1
  br i1 %90, label %91, label %175

; <label>:91:                                     ; preds = %87
  %92 = getelementptr [28 x i8], [28 x i8]* @.str.1224, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %92, i32 %.0220)
  br label %175

; <label>:93:                                     ; preds = %83
  %94 = getelementptr inbounds i8, i8* %.3.lcssa, i32 1
  br label %95

; <label>:95:                                     ; preds = %101, %93
  %.4 = phi i8* [ %94, %93 ], [ %103, %101 ]
  call void @unroll_loop(i32 323)
  %96 = icmp uge i8* %.4, %.15.lcssa
  br i1 %96, label %101, label %97

; <label>:97:                                     ; preds = %95
  %98 = load i8, i8* %.4, align 1
  %99 = sext i8 %98 to i32
  %100 = call zeroext i1 @c_isspace(i32 %99)
  br label %101

; <label>:101:                                    ; preds = %97, %95
  %102 = phi i1 [ false, %95 ], [ %100, %97 ]
  %103 = getelementptr inbounds i8, i8* %.4, i32 1
  br i1 %102, label %95, label %104

; <label>:104:                                    ; preds = %101
  %.4.lcssa = phi i8* [ %.4, %101 ]
  br label %105

; <label>:105:                                    ; preds = %105, %104
  %.5 = phi i8* [ %.4.lcssa, %104 ], [ %108, %105 ]
  call void @unroll_loop(i32 324)
  %106 = icmp uge i8* %.5, %.15.lcssa
  %107 = xor i1 %106, true
  %108 = getelementptr inbounds i8, i8* %.5, i32 1
  br i1 %107, label %105, label %109

; <label>:109:                                    ; preds = %105
  %.5.lcssa = phi i8* [ %.5, %105 ]
  %110 = ptrtoint i8* %.2.lcssa to i64
  %111 = ptrtoint i8* %.1.lcssa to i64
  %112 = sub i64 %110, %111
  %113 = icmp eq i64 %112, 10
  br i1 %113, label %114, label %133

; <label>:114:                                    ; preds = %109
  %115 = getelementptr [11 x i8], [11 x i8]* @.str.1.1225, i32 0, i32 0
  %116 = call i32 @c_strncasecmp(i8* %.1.lcssa, i8* %115, i64 10) #14
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %133, label %118

; <label>:118:                                    ; preds = %114
  %119 = icmp ne i32 %.01017, 0
  br i1 %119, label %125, label %120

; <label>:120:                                    ; preds = %118
  %121 = load i8, i8* %3, align 1
  %122 = trunc i8 %121 to i1
  %123 = zext i1 %122 to i32
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %130

; <label>:125:                                    ; preds = %120, %118
  %126 = ptrtoint i8* %.5.lcssa to i64
  %127 = ptrtoint i8* %.4.lcssa to i64
  %128 = sub i64 %126, %127
  %129 = trunc i64 %128 to i32
  call void @match_user_agent(i8* %.4.lcssa, i32 %129, i8* %3, i8* %4)
  br label %130

; <label>:130:                                    ; preds = %125, %120
  %131 = load i8, i8* %4, align 1
  %132 = trunc i8 %131 to i1
  %spec.select = select i1 %132, i8 1, i8 %.0618
  br label %175

; <label>:133:                                    ; preds = %114, %109
  %134 = ptrtoint i8* %.2.lcssa to i64
  %135 = ptrtoint i8* %.1.lcssa to i64
  %136 = sub i64 %134, %135
  %137 = icmp eq i64 %136, 5
  br i1 %137, label %138, label %150

; <label>:138:                                    ; preds = %133
  %139 = getelementptr [6 x i8], [6 x i8]* @.str.2.1226, i32 0, i32 0
  %140 = call i32 @c_strncasecmp(i8* %.1.lcssa, i8* %139, i64 5) #14
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %150, label %142

; <label>:142:                                    ; preds = %138
  %143 = load i8, i8* %3, align 1
  %144 = trunc i8 %143 to i1
  br i1 %144, label %145, label %148

; <label>:145:                                    ; preds = %142
  %146 = load i8, i8* %4, align 1
  %147 = trunc i8 %146 to i1
  call void @add_path(%struct.robot_specs* %8, i8* %.4.lcssa, i8* %.5.lcssa, i1 zeroext true, i1 zeroext %147)
  br label %148

; <label>:148:                                    ; preds = %145, %142
  %149 = add nsw i32 %.01017, 1
  br label %175

; <label>:150:                                    ; preds = %138, %133
  %151 = ptrtoint i8* %.2.lcssa to i64
  %152 = ptrtoint i8* %.1.lcssa to i64
  %153 = sub i64 %151, %152
  %154 = icmp eq i64 %153, 8
  br i1 %154, label %155, label %169

; <label>:155:                                    ; preds = %150
  %156 = getelementptr [9 x i8], [9 x i8]* @.str.3.1227, i32 0, i32 0
  %157 = call i32 @c_strncasecmp(i8* %.1.lcssa, i8* %156, i64 8) #14
  %158 = icmp ne i32 %157, 0
  br i1 %158, label %169, label %159

; <label>:159:                                    ; preds = %155
  %160 = load i8, i8* %3, align 1
  %161 = trunc i8 %160 to i1
  br i1 %161, label %162, label %167

; <label>:162:                                    ; preds = %159
  %163 = icmp eq i8* %.4.lcssa, %.5.lcssa
  %spec.select1 = select i1 %163, i8 1, i8 0
  %164 = trunc i8 %spec.select1 to i1
  %165 = load i8, i8* %4, align 1
  %166 = trunc i8 %165 to i1
  call void @add_path(%struct.robot_specs* %8, i8* %.4.lcssa, i8* %.5.lcssa, i1 zeroext %164, i1 zeroext %166)
  br label %167

; <label>:167:                                    ; preds = %162, %159
  %168 = add nsw i32 %.01017, 1
  br label %175

; <label>:169:                                    ; preds = %150, %155
  %170 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %171 = load i8, i8* %170, align 1
  %172 = trunc i8 %171 to i1
  br i1 %172, label %173, label %175

; <label>:173:                                    ; preds = %169
  %174 = getelementptr [35 x i8], [35 x i8]* @.str.4.1228, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %174, i32 %.0220)
  br label %175

; <label>:175:                                    ; preds = %130, %167, %148, %173, %169, %91, %87, %25, %27
  %.313 = phi i32 [ %.01017, %27 ], [ %.01017, %25 ], [ %.01017, %87 ], [ %.01017, %91 ], [ %.01017, %169 ], [ %.01017, %173 ], [ 0, %130 ], [ %168, %167 ], [ %149, %148 ]
  %.39 = phi i8 [ %.0618, %27 ], [ %.0618, %25 ], [ %.0618, %87 ], [ %.0618, %91 ], [ %.0618, %169 ], [ %.0618, %173 ], [ %spec.select, %130 ], [ %.0618, %167 ], [ %.0618, %148 ]
  %176 = add nuw nsw i32 %.0220, 1
  %177 = icmp eq i8* %.01, %6
  br i1 %177, label %._crit_edge.loopexit, label %.lr.ph24

._crit_edge.loopexit:                             ; preds = %175
  %.06.lcssa.ph = phi i8 [ %.39, %175 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.06.lcssa = phi i8 [ 0, %2 ], [ %.06.lcssa.ph, %._crit_edge.loopexit ]
  %178 = trunc i8 %.06.lcssa to i1
  br i1 %178, label %179, label %180

; <label>:179:                                    ; preds = %._crit_edge
  call void @prune_non_exact(%struct.robot_specs* %8)
  br label %200

; <label>:180:                                    ; preds = %._crit_edge
  %181 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %8, i32 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %8, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp sgt i32 %182, %184
  br i1 %185, label %186, label %200

; <label>:186:                                    ; preds = %180
  %187 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %8, i32 0, i32 2
  %188 = load %struct.path_info*, %struct.path_info** %187, align 8
  %189 = bitcast %struct.path_info* %188 to i8*
  %190 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %8, i32 0, i32 0
  %191 = load i32, i32* %190, align 8
  %192 = sext i32 %191 to i64
  %193 = mul i64 %192, 16
  %194 = call i8* @xrealloc(i8* %189, i64 %193)
  %195 = bitcast i8* %194 to %struct.path_info*
  %196 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %8, i32 0, i32 2
  store %struct.path_info* %195, %struct.path_info** %196, align 8
  %197 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %8, i32 0, i32 0
  %198 = load i32, i32* %197, align 8
  %199 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %8, i32 0, i32 1
  store i32 %198, i32* %199, align 4
  br label %200

; <label>:200:                                    ; preds = %180, %186, %179
  ret %struct.robot_specs* %8
}

; Function Attrs: noinline nounwind uwtable
define internal void @match_user_agent(i8*, i32, i8*, i8*) #0 {
  %5 = icmp eq i32 %1, 1
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %4
  %7 = load i8, i8* %0, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp eq i32 %8, 42
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %6
  store i8 1, i8* %2, align 1
  store i8 0, i8* %3, align 1
  br label %24

; <label>:11:                                     ; preds = %6, %4
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = ptrtoint i8* %13 to i64
  %15 = ptrtoint i8* %0 to i64
  %16 = sub i64 %14, %15
  %17 = icmp eq i64 %16, 4
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %11
  %19 = getelementptr [5 x i8], [5 x i8]* @.str.12.1229, i32 0, i32 0
  %20 = call i32 @c_strncasecmp(i8* %0, i8* %19, i64 4) #14
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %23, label %22

; <label>:22:                                     ; preds = %18
  store i8 1, i8* %2, align 1
  store i8 1, i8* %3, align 1
  br label %24

; <label>:23:                                     ; preds = %18, %11
  store i8 0, i8* %2, align 1
  store i8 0, i8* %3, align 1
  br label %24

; <label>:24:                                     ; preds = %22, %23, %10
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_path(%struct.robot_specs*, i8*, i8*, i1 zeroext, i1 zeroext) #0 {
  %6 = alloca %struct.path_info, align 8, !track !641
  %7 = zext i1 %3 to i8
  %8 = zext i1 %4 to i8
  %9 = icmp ult i8* %1, %2
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %5
  %11 = load i8, i8* %1, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 47
  %14 = getelementptr inbounds i8, i8* %1, i32 1
  %spec.select = select i1 %13, i8* %14, i8* %1
  br label %15

; <label>:15:                                     ; preds = %10, %5
  %.0 = phi i8* [ %1, %5 ], [ %spec.select, %10 ]
  %16 = call i8* @strdupdelim(i8* %.0, i8* %2)
  %17 = getelementptr inbounds %struct.path_info, %struct.path_info* %6, i32 0, i32 0
  store i8* %16, i8** %17, align 8
  %18 = trunc i8 %7 to i1
  %19 = getelementptr inbounds %struct.path_info, %struct.path_info* %6, i32 0, i32 1
  %20 = zext i1 %18 to i8
  store i8 %20, i8* %19, align 8
  %21 = trunc i8 %8 to i1
  %22 = getelementptr inbounds %struct.path_info, %struct.path_info* %6, i32 0, i32 2
  %23 = zext i1 %21 to i8
  store i8 %23, i8* %22, align 1
  %24 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %24, align 8
  %27 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %28, %30
  br i1 %31, label %32, label %52

; <label>:32:                                     ; preds = %15
  %33 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 1
  br i1 %35, label %37, label %38

; <label>:37:                                     ; preds = %32
  store i32 1, i32* %36, align 4
  br label %41

; <label>:38:                                     ; preds = %32
  %39 = load i32, i32* %36, align 4
  %40 = shl i32 %39, 1
  store i32 %40, i32* %36, align 4
  br label %41

; <label>:41:                                     ; preds = %38, %37
  %42 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %43 = load %struct.path_info*, %struct.path_info** %42, align 8
  %44 = bitcast %struct.path_info* %43 to i8*
  %45 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = mul i64 %47, 16
  %49 = call i8* @xrealloc(i8* %44, i64 %48)
  %50 = bitcast i8* %49 to %struct.path_info*
  %51 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  store %struct.path_info* %50, %struct.path_info** %51, align 8
  br label %52

; <label>:52:                                     ; preds = %41, %15
  %53 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %54 = load %struct.path_info*, %struct.path_info** %53, align 8
  %55 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = sub nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.path_info, %struct.path_info* %54, i64 %58
  %60 = bitcast %struct.path_info* %59 to i8*
  %61 = bitcast %struct.path_info* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false), !track !642
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @prune_non_exact(%struct.robot_specs*) #0 {
  %2 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 0, %3
  br i1 %4, label %.lr.ph10.preheader, label %._crit_edge11

.lr.ph10.preheader:                               ; preds = %1
  br label %.lr.ph10

.lr.ph10:                                         ; preds = %.lr.ph10.preheader, %.lr.ph10
  %indvars.iv12 = phi i64 [ %indvars.iv.next13, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]
  %.08 = phi i32 [ %spec.select, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]
  call void @unroll_loop(i32 325)
  %5 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %6 = load %struct.path_info*, %struct.path_info** %5, align 8
  %7 = getelementptr inbounds %struct.path_info, %struct.path_info* %6, i64 %indvars.iv12
  %8 = getelementptr inbounds %struct.path_info, %struct.path_info* %7, i32 0, i32 2
  %9 = load i8, i8* %8, align 1
  %10 = trunc i8 %9 to i1
  %11 = add nsw i32 %.08, 1
  %spec.select = select i1 %10, i32 %11, i32 %.08
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %12 = load i32, i32* %2, align 8
  %13 = sext i32 %12 to i64
  %14 = icmp slt i64 %indvars.iv.next13, %13
  br i1 %14, label %.lr.ph10, label %._crit_edge11.loopexit

._crit_edge11.loopexit:                           ; preds = %.lr.ph10
  %.0.lcssa.ph = phi i32 [ %spec.select, %.lr.ph10 ]
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %1
  %.0.lcssa = phi i32 [ 0, %1 ], [ %.0.lcssa.ph, %._crit_edge11.loopexit ]
  %15 = sext i32 %.0.lcssa to i64
  %16 = mul i64 %15, 16
  %17 = call noalias i8* @xmalloc(i64 %16)
  %18 = bitcast i8* %17 to %struct.path_info*
  %19 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 0, %20
  br i1 %21, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge11
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %37
  %indvars.iv = phi i64 [ %indvars.iv.next, %37 ], [ 0, %.lr.ph.preheader ]
  %.016 = phi i32 [ %.12, %37 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 326)
  %22 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %23 = load %struct.path_info*, %struct.path_info** %22, align 8
  %24 = getelementptr inbounds %struct.path_info, %struct.path_info* %23, i64 %indvars.iv
  %25 = getelementptr inbounds %struct.path_info, %struct.path_info* %24, i32 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = trunc i8 %26 to i1
  br i1 %27, label %28, label %37

; <label>:28:                                     ; preds = %.lr.ph
  %29 = add nsw i32 %.016, 1
  %30 = sext i32 %.016 to i64
  %31 = getelementptr inbounds %struct.path_info, %struct.path_info* %18, i64 %30
  %32 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %33 = load %struct.path_info*, %struct.path_info** %32, align 8
  %34 = getelementptr inbounds %struct.path_info, %struct.path_info* %33, i64 %indvars.iv
  %35 = bitcast %struct.path_info* %31 to i8*
  %36 = bitcast %struct.path_info* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false), !track !643
  br label %37

; <label>:37:                                     ; preds = %.lr.ph, %28
  %.12 = phi i32 [ %29, %28 ], [ %.016, %.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %38 = load i32, i32* %19, align 8
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %indvars.iv.next, %39
  br i1 %40, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %37
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge11
  %41 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %42 = load %struct.path_info*, %struct.path_info** %41, align 8
  %43 = bitcast %struct.path_info* %42 to i8*
  call void @free(i8* %43) #8
  %44 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  store %struct.path_info* null, %struct.path_info** %44, align 8
  %45 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  store %struct.path_info* %18, %struct.path_info** %45, align 8
  %46 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  store i32 %.0.lcssa, i32* %46, align 8
  %47 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 1
  store i32 %.0.lcssa, i32* %47, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.robot_specs* @res_parse_from_file(i8*) #7 {
  %2 = call %struct.file_memory* @wget_read_file(i8* %0)
  %3 = icmp ne %struct.file_memory* %2, null
  br i1 %3, label %10, label %4

; <label>:4:                                      ; preds = %1
  %5 = getelementptr [19 x i8], [19 x i8]* @.str.5.1232, i32 0, i32 0
  %6 = call i8* @gettext(i8* %5) #8
  %7 = call i32* @__errno_location() #15
  %8 = load i32, i32* %7, align 4
  %9 = call i8* @strerror(i32 %8) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %6, i8* %0, i8* %9)
  br label %17

; <label>:10:                                     ; preds = %1
  %11 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %2, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %2, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = trunc i64 %14 to i32
  %16 = call %struct.robot_specs* @res_parse(i8* %12, i32 %15)
  call void @wget_read_file_free(%struct.file_memory* %2)
  br label %17

; <label>:17:                                     ; preds = %10, %4
  %.0 = phi %struct.robot_specs* [ %16, %10 ], [ null, %4 ]
  ret %struct.robot_specs* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @res_match_path(%struct.robot_specs*, i8*) #0 {
  %3 = icmp ne %struct.robot_specs* %0, null
  br i1 %3, label %4, label %._crit_edge

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp slt i32 0, %6
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %43
  %indvars.iv = phi i64 [ %indvars.iv.next, %43 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 327)
  %8 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %9 = load %struct.path_info*, %struct.path_info** %8, align 8
  %10 = getelementptr inbounds %struct.path_info, %struct.path_info* %9, i64 %indvars.iv
  %11 = getelementptr inbounds %struct.path_info, %struct.path_info* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = call zeroext i1 @matches(i8* %12, i8* %1)
  br i1 %13, label %14, label %43

; <label>:14:                                     ; preds = %.lr.ph
  %.01.lcssa2.wide = phi i64 [ %indvars.iv, %.lr.ph ]
  %15 = trunc i64 %.01.lcssa2.wide to i32
  %16 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %17 = load %struct.path_info*, %struct.path_info** %16, align 8
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds %struct.path_info, %struct.path_info* %17, i64 %18
  %20 = getelementptr inbounds %struct.path_info, %struct.path_info* %19, i32 0, i32 1
  %21 = load i8, i8* %20, align 8
  %22 = trunc i8 %21 to i1
  %23 = zext i1 %22 to i8
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %25 = load i8, i8* %24, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %27, label %41

; <label>:27:                                     ; preds = %14
  %28 = trunc i8 %23 to i1
  %29 = zext i1 %28 to i64
  %30 = getelementptr [9 x i8], [9 x i8]* @.str.7.1235, i32 0, i32 0
  %31 = getelementptr [10 x i8], [10 x i8]* @.str.8.1236, i32 0, i32 0
  %32 = select i1 %28, i8* %30, i8* %31
  %33 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %34 = load %struct.path_info*, %struct.path_info** %33, align 8
  %35 = sext i32 %15 to i64
  %36 = getelementptr inbounds %struct.path_info, %struct.path_info* %34, i64 %35
  %37 = getelementptr inbounds %struct.path_info, %struct.path_info* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i8* @quote(i8* %38)
  %40 = getelementptr [32 x i8], [32 x i8]* @.str.6.1237, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %40, i8* %32, i8* %1, i8* %39)
  br label %41

; <label>:41:                                     ; preds = %14, %27
  %42 = trunc i8 %23 to i1
  br label %._crit_edge

; <label>:43:                                     ; preds = %.lr.ph
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %44 = load i32, i32* %5, align 8
  %45 = sext i32 %44 to i64
  %46 = icmp slt i64 %indvars.iv.next, %45
  br i1 %46, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %43
  %.0.ph = phi i1 [ true, %43 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4, %2, %41
  %.0 = phi i1 [ %42, %41 ], [ true, %2 ], [ true, %4 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @matches(i8*, i8*) #0 {
  %3 = load i8, i8* %0, align 1
  %4 = load i8, i8* %1, align 1
  %5 = icmp ne i8 %3, 0
  br i1 %5, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %113
  %6 = phi i8 [ %117, %113 ], [ %4, %.lr.ph.preheader ]
  %7 = phi i8 [ %116, %113 ], [ %3, %.lr.ph.preheader ]
  %.0410 = phi i8* [ %114, %113 ], [ %0, %.lr.ph.preheader ]
  %.069 = phi i8* [ %115, %113 ], [ %1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 328)
  %8 = icmp ne i8 %6, 0
  br i1 %8, label %9, label %._crit_edge.loopexit

; <label>:9:                                      ; preds = %.lr.ph
  %10 = sext i8 %7 to i32
  %11 = icmp eq i32 %10, 37
  br i1 %11, label %12, label %59

; <label>:12:                                     ; preds = %9
  %13 = getelementptr inbounds i8, i8* %.0410, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = call zeroext i1 @c_isxdigit(i32 %15)
  br i1 %16, label %17, label %59

; <label>:17:                                     ; preds = %12
  %18 = getelementptr inbounds i8, i8* %.0410, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = call zeroext i1 @c_isxdigit(i32 %20)
  br i1 %21, label %22, label %59

; <label>:22:                                     ; preds = %17
  %23 = getelementptr inbounds i8, i8* %.0410, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp slt i32 %25, 65
  %27 = getelementptr inbounds i8, i8* %.0410, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  br i1 %26, label %30, label %32

; <label>:30:                                     ; preds = %22
  %31 = sub nsw i32 %29, 48
  br label %36

; <label>:32:                                     ; preds = %22
  %33 = call i32 @c_toupper(i32 %29)
  %34 = sub nsw i32 %33, 65
  %35 = add nsw i32 %34, 10
  br label %36

; <label>:36:                                     ; preds = %32, %30
  %37 = phi i32 [ %31, %30 ], [ %35, %32 ]
  %38 = shl i32 %37, 4
  %39 = getelementptr inbounds i8, i8* %.0410, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp slt i32 %41, 65
  %43 = getelementptr inbounds i8, i8* %.0410, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  br i1 %42, label %46, label %48

; <label>:46:                                     ; preds = %36
  %47 = sub nsw i32 %45, 48
  br label %52

; <label>:48:                                     ; preds = %36
  %49 = call i32 @c_toupper(i32 %45)
  %50 = sub nsw i32 %49, 65
  %51 = add nsw i32 %50, 10
  br label %52

; <label>:52:                                     ; preds = %48, %46
  %53 = phi i32 [ %47, %46 ], [ %51, %48 ]
  %54 = add nsw i32 %38, %53
  %55 = trunc i32 %54 to i8
  %56 = sext i8 %55 to i32
  %57 = icmp ne i32 %56, 47
  %58 = getelementptr inbounds i8, i8* %.0410, i64 2
  %spec.select = select i1 %57, i8* %58, i8* %.0410
  %spec.select1 = select i1 %57, i8 %55, i8 %7
  br label %59

; <label>:59:                                     ; preds = %52, %17, %12, %9
  %.2 = phi i8* [ %spec.select, %52 ], [ %.0410, %17 ], [ %.0410, %12 ], [ %.0410, %9 ]
  %.13 = phi i8 [ %spec.select1, %52 ], [ %7, %17 ], [ %7, %12 ], [ %7, %9 ]
  %60 = sext i8 %6 to i32
  %61 = icmp eq i32 %60, 37
  br i1 %61, label %62, label %109

; <label>:62:                                     ; preds = %59
  %63 = getelementptr inbounds i8, i8* %.069, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = call zeroext i1 @c_isxdigit(i32 %65)
  br i1 %66, label %67, label %109

; <label>:67:                                     ; preds = %62
  %68 = getelementptr inbounds i8, i8* %.069, i64 2
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i32
  %71 = call zeroext i1 @c_isxdigit(i32 %70)
  br i1 %71, label %72, label %109

; <label>:72:                                     ; preds = %67
  %73 = getelementptr inbounds i8, i8* %.069, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp slt i32 %75, 65
  %77 = getelementptr inbounds i8, i8* %.069, i64 1
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  br i1 %76, label %80, label %82

; <label>:80:                                     ; preds = %72
  %81 = sub nsw i32 %79, 48
  br label %86

; <label>:82:                                     ; preds = %72
  %83 = call i32 @c_toupper(i32 %79)
  %84 = sub nsw i32 %83, 65
  %85 = add nsw i32 %84, 10
  br label %86

; <label>:86:                                     ; preds = %82, %80
  %87 = phi i32 [ %81, %80 ], [ %85, %82 ]
  %88 = shl i32 %87, 4
  %89 = getelementptr inbounds i8, i8* %.069, i64 2
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp slt i32 %91, 65
  %93 = getelementptr inbounds i8, i8* %.069, i64 2
  %94 = load i8, i8* %93, align 1
  %95 = sext i8 %94 to i32
  br i1 %92, label %96, label %98

; <label>:96:                                     ; preds = %86
  %97 = sub nsw i32 %95, 48
  br label %102

; <label>:98:                                     ; preds = %86
  %99 = call i32 @c_toupper(i32 %95)
  %100 = sub nsw i32 %99, 65
  %101 = add nsw i32 %100, 10
  br label %102

; <label>:102:                                    ; preds = %98, %96
  %103 = phi i32 [ %97, %96 ], [ %101, %98 ]
  %104 = add nsw i32 %88, %103
  %105 = trunc i32 %104 to i8
  %106 = sext i8 %105 to i32
  %107 = icmp ne i32 %106, 47
  %108 = getelementptr inbounds i8, i8* %.069, i64 2
  %spec.select2 = select i1 %107, i8* %108, i8* %.069
  %spec.select3 = select i1 %107, i8 %105, i8 %6
  br label %109

; <label>:109:                                    ; preds = %59, %62, %67, %102
  %.28 = phi i8* [ %spec.select2, %102 ], [ %.069, %67 ], [ %.069, %62 ], [ %.069, %59 ]
  %.1 = phi i8 [ %spec.select3, %102 ], [ %6, %67 ], [ %6, %62 ], [ %6, %59 ]
  %110 = sext i8 %.13 to i32
  %111 = sext i8 %.1 to i32
  %112 = icmp ne i32 %110, %111
  br i1 %112, label %._crit_edge.loopexit, label %113

; <label>:113:                                    ; preds = %109
  %114 = getelementptr inbounds i8, i8* %.2, i32 1
  %115 = getelementptr inbounds i8, i8* %.28, i32 1
  %116 = load i8, i8* %114, align 1
  %117 = load i8, i8* %115, align 1
  %118 = icmp ne i8 %116, 0
  br i1 %118, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %113, %.lr.ph, %109
  %.0.ph = phi i1 [ false, %109 ], [ false, %.lr.ph ], [ true, %113 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.0 = phi i1 [ true, %2 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @res_register_specs(i8*, i32, %struct.robot_specs*) #0 {
  %4 = alloca %struct.robot_specs*, align 8, !track !644
  %5 = alloca i8*, align 8, !track !645
  %6 = call i64 @strlen(i8* %0) #14
  %7 = trunc i64 %6 to i32
  %8 = add nsw i32 %7, 1
  %9 = sext i32 %1 to i64
  %10 = call i32 @numdigit(i64 %9)
  %11 = add nsw i32 %8, %10
  %12 = add nsw i32 %11, 1
  %13 = sext i32 %12 to i64
  %14 = alloca i8, i64 %13, align 16, !track !646
  %15 = sext i32 %7 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %0, i64 %15, i1 false), !track !647
  %16 = sext i32 %7 to i64
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  store i8 58, i8* %17, align 1
  %18 = sext i32 %7 to i64
  %19 = getelementptr inbounds i8, i8* %14, i64 %18
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  %21 = sext i32 %1 to i64
  %22 = call i8* @number_to_string(i8* %20, i64 %21)
  %23 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  %24 = icmp ne %struct.hash_table* %23, null
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %3
  %26 = call %struct.hash_table* @make_nocase_string_hash_table(i32 0)
  store %struct.hash_table* %26, %struct.hash_table** @registered_specs, align 8
  br label %27

; <label>:27:                                     ; preds = %25, %3
  %28 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  %29 = bitcast i8** %5 to i8*
  %30 = bitcast %struct.robot_specs** %4 to i8*
  %31 = call i32 @hash_table_get_pair(%struct.hash_table* %28, i8* %14, i8* %29, i8* %30)
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %42

; <label>:33:                                     ; preds = %27
  %34 = load %struct.robot_specs*, %struct.robot_specs** %4, align 8
  %35 = icmp ne %struct.robot_specs* %34, null
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %33
  %37 = load %struct.robot_specs*, %struct.robot_specs** %4, align 8
  call void @free_specs(%struct.robot_specs* %37)
  br label %38

; <label>:38:                                     ; preds = %36, %33
  %39 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  %40 = load i8*, i8** %5, align 8
  %41 = bitcast %struct.robot_specs* %2 to i8*
  call void @hash_table_put(%struct.hash_table* %39, i8* %40, i8* %41)
  br label %46

; <label>:42:                                     ; preds = %27
  %43 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  %44 = call noalias i8* @xstrdup(i8* %14)
  %45 = bitcast %struct.robot_specs* %2 to i8*
  call void @hash_table_put(%struct.hash_table* %43, i8* %44, i8* %45)
  br label %46

; <label>:46:                                     ; preds = %42, %38
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_specs(%struct.robot_specs*) #0 {
  %2 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp slt i32 0, %3
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 329)
  %5 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %6 = load %struct.path_info*, %struct.path_info** %5, align 8
  %7 = getelementptr inbounds %struct.path_info, %struct.path_info* %6, i64 %indvars.iv
  %8 = getelementptr inbounds %struct.path_info, %struct.path_info* %7, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  call void @free(i8* %9) #8
  %10 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %11 = load %struct.path_info*, %struct.path_info** %10, align 8
  %12 = getelementptr inbounds %struct.path_info, %struct.path_info* %11, i64 %indvars.iv
  %13 = getelementptr inbounds %struct.path_info, %struct.path_info* %12, i32 0, i32 0
  store i8* null, i8** %13, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %14 = load i32, i32* %2, align 8
  %15 = sext i32 %14 to i64
  %16 = icmp slt i64 %indvars.iv.next, %15
  br i1 %16, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %17 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  %18 = load %struct.path_info*, %struct.path_info** %17, align 8
  %19 = bitcast %struct.path_info* %18 to i8*
  call void @free(i8* %19) #8
  %20 = getelementptr inbounds %struct.robot_specs, %struct.robot_specs* %0, i32 0, i32 2
  store %struct.path_info* null, %struct.path_info** %20, align 8
  %21 = bitcast %struct.robot_specs* %0 to i8*
  call void @free(i8* %21) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.robot_specs* @res_get_specs(i8*, i32) #7 {
  %3 = call i64 @strlen(i8* %0) #14
  %4 = trunc i64 %3 to i32
  %5 = add nsw i32 %4, 1
  %6 = sext i32 %1 to i64
  %7 = call i32 @numdigit(i64 %6)
  %8 = add nsw i32 %5, %7
  %9 = add nsw i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = alloca i8, i64 %10, align 16, !track !648
  %12 = sext i32 %4 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %0, i64 %12, i1 false), !track !649
  %13 = sext i32 %4 to i64
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8 58, i8* %14, align 1
  %15 = sext i32 %4 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  %18 = sext i32 %1 to i64
  %19 = call i8* @number_to_string(i8* %17, i64 %18)
  %20 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  %21 = icmp ne %struct.hash_table* %20, null
  br i1 %21, label %22, label %26

; <label>:22:                                     ; preds = %2
  %23 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  %24 = call i8* @hash_table_get(%struct.hash_table* %23, i8* %11)
  %25 = bitcast i8* %24 to %struct.robot_specs*
  br label %26

; <label>:26:                                     ; preds = %2, %22
  %.0 = phi %struct.robot_specs* [ %25, %22 ], [ null, %2 ]
  ret %struct.robot_specs* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @res_retrieve_file(i8*, i8**, %struct.iri*) #0 {
  %4 = alloca i32, align 4
  %5 = call %struct.iri* @iri_new()
  %6 = getelementptr [12 x i8], [12 x i8]* @.str.9.1244, i32 0, i32 0
  %7 = call i8* @uri_merge(i8* %0, i8* %6)
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %9 = load i8, i8* %8, align 4
  %10 = trunc i8 %9 to i1
  %11 = zext i1 %10 to i32
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %13 = load i8, i8* %12, align 8
  %14 = trunc i8 %13 to i1
  %15 = zext i1 %14 to i32
  %16 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @set_uri_encoding(%struct.iri* %5, i8* %17, i1 zeroext false)
  %18 = getelementptr inbounds %struct.iri, %struct.iri* %5, i32 0, i32 3
  store i8 0, i8* %18, align 8
  %19 = getelementptr [43 x i8], [43 x i8]* @.str.10.1245, i32 0, i32 0
  %20 = call i8* @gettext(i8* %19) #8, !track !650
  call void @logputs(i32 0, i8* %20)
  store i8* null, i8** %1, align 8
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  store i8 0, i8* %21, align 4
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  store i8 0, i8* %22, align 8
  %23 = call %struct.url* @url_parse(i8* %7, i32* %4, %struct.iri* %5, i1 zeroext true)
  %24 = icmp ne %struct.url* %23, null
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %3
  %26 = load i32, i32* %4, align 4
  %27 = call i8* @url_error(i8* %7, i32 %26)
  %28 = getelementptr [9 x i8], [9 x i8]* @.str.11.1246, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %28, i8* %7, i8* %27)
  call void @free(i8* %27) #8
  br label %31

; <label>:29:                                     ; preds = %3
  %30 = call i32 @retrieve_url(%struct.url* %23, i8* %7, i8** %1, i8** null, i8* null, i32* null, i1 zeroext false, %struct.iri* %5, i1 zeroext false)
  call void @url_free(%struct.url* %23)
  br label %31

; <label>:31:                                     ; preds = %29, %25
  %.0 = phi i32 [ %30, %29 ], [ 18, %25 ]
  %32 = icmp ne i32 %11, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  store i8 %33, i8* %34, align 4
  %35 = icmp ne i32 %15, 0
  %36 = zext i1 %35 to i8
  %37 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  store i8 %36, i8* %37, align 8
  call void @free(i8* %7) #8
  call void @iri_free(%struct.iri* %5)
  %38 = icmp ne i32 %.0, 25
  br i1 %38, label %39, label %44

; <label>:39:                                     ; preds = %31
  %40 = load i8*, i8** %1, align 8
  %41 = icmp ne i8* %40, null
  br i1 %41, label %42, label %44

; <label>:42:                                     ; preds = %39
  %43 = load i8*, i8** %1, align 8
  call void @free(i8* %43) #8
  store i8* null, i8** %1, align 8
  br label %44

; <label>:44:                                     ; preds = %42, %39, %31
  %45 = icmp eq i32 %.0, 25
  ret i1 %45
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @is_robots_txt_url(i8*) #0 {
  %2 = getelementptr [12 x i8], [12 x i8]* @.str.9.1244, i32 0, i32 0
  %3 = call i8* @uri_merge(i8* %0, i8* %2)
  %4 = call zeroext i1 @are_urls_equal(i8* %0, i8* %3)
  %5 = zext i1 %4 to i8
  call void @free(i8* %3) #8
  %6 = trunc i8 %5 to i1
  ret i1 %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @res_cleanup() #0 {
  %1 = alloca %struct.hash_table_iterator, align 8, !track !651
  %2 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %4, label %17

; <label>:4:                                      ; preds = %0
  %5 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  call void @hash_table_iterate(%struct.hash_table* %5, %struct.hash_table_iterator* %1)
  %6 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 330)
  %8 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  call void @free(i8* %9) #8
  %10 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 0
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.robot_specs*
  call void @free_specs(%struct.robot_specs* %13)
  %14 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %16 = load %struct.hash_table*, %struct.hash_table** @registered_specs, align 8
  call void @hash_table_destroy(%struct.hash_table* %16)
  store %struct.hash_table* null, %struct.hash_table** @registered_specs, align 8
  br label %17

; <label>:17:                                     ; preds = %._crit_edge, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fd_read_body(i8*, i32, %struct._IO_FILE*, i64, i64, i64*, i64*, double*, i32, %struct._IO_FILE*) #0 {
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8, !track !652
  %14 = sext i32 8192 to i64
  %15 = call noalias i8* @xmalloc(i64 %14)
  %16 = and i32 %8, 1
  %17 = icmp ne i32 %16, 0
  %18 = xor i1 %17, true
  %19 = xor i1 %18, true
  %20 = zext i1 %19 to i8
  %21 = and i32 %8, 4
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i8
  store i64 0, i64* %11, align 8
  store i64 0, i64* %12, align 8
  %24 = and i32 %8, 2
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %10
  store i64 %4, i64* %11, align 8
  br label %27

; <label>:27:                                     ; preds = %26, %10
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %29 = load i32, i32* %28, align 8
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %48

; <label>:31:                                     ; preds = %27
  %32 = load i64, i64* %11, align 8
  %33 = icmp ne i64 %32, 0
  %. = select i1 %33, i64 0, i64 %4
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %35 = load i8*, i8** %34, align 8
  %36 = icmp ne i8* %35, null
  br i1 %36, label %37, label %43

; <label>:37:                                     ; preds = %31
  %38 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %39 = load i8*, i8** %38, align 8
  %40 = call i64 @strlen(i8* %39) #14
  %41 = getelementptr inbounds i8, i8* %0, i64 %40
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  br label %43

; <label>:43:                                     ; preds = %31, %37
  %.02 = phi i8* [ %42, %37 ], [ %0, %31 ]
  %44 = add nsw i64 %., %3
  %45 = call i8* @progress_create(i8* %.02, i64 %., i64 %44)
  %46 = call zeroext i1 @progress_interactive_p(i8* %45)
  %47 = zext i1 %46 to i8
  br label %48

; <label>:48:                                     ; preds = %43, %27
  %.011 = phi i8* [ %45, %43 ], [ null, %27 ]
  %.010 = phi i8 [ %47, %43 ], [ 0, %27 ]
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %50 = load i64, i64* %49, align 8
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %52, label %53

; <label>:52:                                     ; preds = %48
  call void @limit_bandwidth_reset()
  br label %53

; <label>:53:                                     ; preds = %52, %48
  %54 = icmp ne i8* %.011, null
  br i1 %54, label %60, label %55

; <label>:55:                                     ; preds = %53
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %57 = load i64, i64* %56, align 8
  %58 = icmp ne i64 %57, 0
  %59 = icmp ne double* %7, null
  %or.cond = or i1 %58, %59
  br i1 %or.cond, label %60, label %62

; <label>:60:                                     ; preds = %55, %53
  %61 = call %struct.ptimer* @ptimer_new()
  br label %62

; <label>:62:                                     ; preds = %55, %60
  %.022 = phi %struct.ptimer* [ %61, %60 ], [ null, %55 ]
  %63 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %64 = load i64, i64* %63, align 8
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %75

; <label>:66:                                     ; preds = %62
  %67 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %68 = load i64, i64* %67, align 8
  %69 = sext i32 8192 to i64
  %70 = icmp slt i64 %68, %69
  br i1 %70, label %71, label %75

; <label>:71:                                     ; preds = %66
  %72 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %73 = load i64, i64* %72, align 8
  %74 = trunc i64 %73 to i32
  br label %75

; <label>:75:                                     ; preds = %71, %66, %62
  %.021 = phi i32 [ %74, %71 ], [ 8192, %66 ], [ 8192, %62 ]
  call void @unroll_loop(i32 331)
  %76 = trunc i8 %20 to i1
  %77 = icmp slt i64 0, %3
  %spec.select4 = select i1 %76, i1 %77, i1 true
  br i1 %spec.select4, label %.lr.ph, label %.loopexit.loopexit

.lr.ph:                                           ; preds = %75
  br label %78

; <label>:78:                                     ; preds = %.lr.ph, %203
  %.038 = phi i64 [ 0, %.lr.ph ], [ %.4, %203 ]
  %.066 = phi i64 [ 0, %.lr.ph ], [ %.17, %203 ]
  %.1135 = phi double [ 0.000000e+00, %.lr.ph ], [ %.315, %203 ]
  %79 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %80 = load double, double* %79, align 8
  %81 = trunc i8 %23 to i1
  br i1 %81, label %82, label %110

; <label>:82:                                     ; preds = %78
  %83 = icmp eq i64 %.038, 0
  br i1 %83, label %84, label %104

; <label>:84:                                     ; preds = %82
  %85 = call i8* @fd_read_line(i32 %1)
  %86 = icmp eq i8* %85, null
  br i1 %86, label %..loopexit.loopexit_crit_edge, label %87

; <label>:87:                                     ; preds = %84
  %88 = icmp ne %struct._IO_FILE* %9, null
  br i1 %88, label %89, label %92

; <label>:89:                                     ; preds = %87
  %90 = call i64 @strlen(i8* %85) #14
  %91 = call i64 @fwrite(i8* %85, i64 1, i64 %90, %struct._IO_FILE* %9)
  br label %92

; <label>:92:                                     ; preds = %87, %89
  %93 = call i64 @strtol(i8* %85, i8** %13, i32 16) #8, !track !653
  call void @free(i8* %85) #8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %104

; <label>:95:                                     ; preds = %92
  %.06.lcssa24 = phi i64 [ %.066, %92 ]
  %96 = call i8* @fd_read_line(i32 %1)
  %97 = icmp eq i8* %96, null
  br i1 %97, label %.loopexit, label %98

; <label>:98:                                     ; preds = %95
  %99 = icmp ne %struct._IO_FILE* %9, null
  br i1 %99, label %100, label %103

; <label>:100:                                    ; preds = %98
  %101 = call i64 @strlen(i8* %96) #14
  %102 = call i64 @fwrite(i8* %96, i64 1, i64 %101, %struct._IO_FILE* %9)
  br label %103

; <label>:103:                                    ; preds = %98, %100
  call void @free(i8* %96) #8
  br label %.loopexit

; <label>:104:                                    ; preds = %92, %82
  %.14 = phi i64 [ %.038, %82 ], [ %93, %92 ]
  %105 = sext i32 %.021 to i64
  %106 = icmp sle i64 %.14, %105
  %107 = sext i32 %.021 to i64
  %108 = select i1 %106, i64 %.14, i64 %107
  %109 = trunc i64 %108 to i32
  br label %124

; <label>:110:                                    ; preds = %78
  %111 = trunc i8 %20 to i1
  br i1 %111, label %112, label %119

; <label>:112:                                    ; preds = %110
  %113 = sub nsw i64 %3, %.066
  %114 = sext i32 %.021 to i64
  %115 = icmp sle i64 %113, %114
  %116 = sub nsw i64 %3, %.066
  %117 = sext i32 %.021 to i64
  %118 = select i1 %115, i64 %116, i64 %117
  br label %121

; <label>:119:                                    ; preds = %110
  %120 = sext i32 %.021 to i64
  br label %121

; <label>:121:                                    ; preds = %112, %119
  %122 = phi i64 [ %120, %119 ], [ %118, %112 ]
  %123 = trunc i64 %122 to i32
  br label %124

; <label>:124:                                    ; preds = %121, %104
  %.25 = phi i64 [ %.14, %104 ], [ %.038, %121 ]
  %.01 = phi i32 [ %109, %104 ], [ %123, %121 ]
  %125 = trunc i8 %.010 to i1
  br i1 %125, label %126, label %144

; <label>:126:                                    ; preds = %124
  %127 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %128 = load double, double* %127, align 8
  %129 = fcmp une double %128, 0.000000e+00
  br i1 %129, label %130, label %144

; <label>:130:                                    ; preds = %126
  %131 = call double @ptimer_read(%struct.ptimer* %.022)
  %132 = fsub double %131, %.1135
  %133 = fadd double %132, 0x3FEE666666666666
  %134 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %135 = load double, double* %134, align 8
  %136 = fcmp ogt double %133, %135
  br i1 %136, label %137, label %144

; <label>:137:                                    ; preds = %130
  %138 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %139 = load double, double* %138, align 8
  %140 = fsub double %139, %132
  %141 = fcmp olt double %140, 0.000000e+00
  br i1 %141, label %142, label %144

; <label>:142:                                    ; preds = %137
  %.06.lcssa25 = phi i64 [ %.066, %137 ]
  %143 = call i32* @__errno_location() #15
  store i32 110, i32* %143, align 4
  br label %.loopexit

; <label>:144:                                    ; preds = %126, %137, %130, %124
  %.2 = phi double [ %80, %124 ], [ 0x3FEE666666666666, %126 ], [ 0x3FEE666666666666, %130 ], [ %140, %137 ]
  %145 = call i32 @fd_read(i32 %1, i8* %15, i32 %.01, double %.2)
  %146 = trunc i8 %.010 to i1
  %147 = icmp slt i32 %145, 0
  %or.cond1 = and i1 %146, %147
  br i1 %or.cond1, label %148, label %152

; <label>:148:                                    ; preds = %144
  %149 = call i32* @__errno_location() #15
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 110
  br i1 %151, label %154, label %152

; <label>:152:                                    ; preds = %148, %144
  %153 = icmp sle i32 %145, 0
  br i1 %153, label %..loopexit.loopexit_crit_edge10, label %154

; <label>:154:                                    ; preds = %152, %148
  %.218 = phi i32 [ 0, %148 ], [ %145, %152 ]
  %155 = icmp ne i8* %.011, null
  br i1 %155, label %161, label %156

; <label>:156:                                    ; preds = %154
  %157 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %158 = load i64, i64* %157, align 8
  %159 = icmp ne i64 %158, 0
  %160 = icmp ne double* %7, null
  %or.cond2 = or i1 %159, %160
  br i1 %or.cond2, label %161, label %166

; <label>:161:                                    ; preds = %156, %154
  %162 = call double @ptimer_measure(%struct.ptimer* %.022)
  %163 = icmp sgt i32 %.218, 0
  br i1 %163, label %164, label %166

; <label>:164:                                    ; preds = %161
  %165 = call double @ptimer_read(%struct.ptimer* %.022)
  br label %166

; <label>:166:                                    ; preds = %161, %164, %156
  %.315 = phi double [ %.1135, %156 ], [ %165, %164 ], [ %.1135, %161 ]
  %167 = icmp sgt i32 %.218, 0
  br i1 %167, label %168, label %192

; <label>:168:                                    ; preds = %166
  %169 = sext i32 %.218 to i64
  %170 = add nsw i64 %.066, %169
  %171 = call i32 @write_data(%struct._IO_FILE* %2, %struct._IO_FILE* %9, i8* %15, i32 %.218, i64* %11, i64* %12)
  %172 = icmp slt i32 %171, 0
  br i1 %172, label %173, label %177

; <label>:173:                                    ; preds = %168
  %.lcssa33 = phi i64 [ %170, %168 ]
  %.lcssa31 = phi i32 [ %171, %168 ]
  %174 = icmp eq i32 %.lcssa31, -3
  %175 = zext i1 %174 to i64
  %176 = select i1 %174, i32 -3, i32 -2
  br label %206

; <label>:177:                                    ; preds = %168
  %178 = trunc i8 %23 to i1
  br i1 %178, label %179, label %192

; <label>:179:                                    ; preds = %177
  %180 = sext i32 %.218 to i64
  %181 = sub nsw i64 %.25, %180
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %192

; <label>:183:                                    ; preds = %179
  %184 = call i8* @fd_read_line(i32 %1)
  %185 = icmp eq i8* %184, null
  br i1 %185, label %..loopexit.loopexit_crit_edge13, label %186

; <label>:186:                                    ; preds = %183
  %187 = icmp ne %struct._IO_FILE* %9, null
  br i1 %187, label %188, label %191

; <label>:188:                                    ; preds = %186
  %189 = call i64 @strlen(i8* %184) #14
  %190 = call i64 @fwrite(i8* %184, i64 1, i64 %189, %struct._IO_FILE* %9)
  br label %191

; <label>:191:                                    ; preds = %186, %188
  call void @free(i8* %184) #8
  br label %192

; <label>:192:                                    ; preds = %177, %191, %179, %166
  %.17 = phi i64 [ %.066, %166 ], [ %170, %179 ], [ %170, %191 ], [ %170, %177 ]
  %.4 = phi i64 [ %.25, %166 ], [ %.25, %177 ], [ %181, %191 ], [ %181, %179 ]
  %193 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %194 = load i64, i64* %193, align 8
  %195 = icmp ne i64 %194, 0
  br i1 %195, label %196, label %198

; <label>:196:                                    ; preds = %192
  %197 = sext i32 %.218 to i64
  call void @limit_bandwidth(i64 %197, %struct.ptimer* %.022)
  br label %198

; <label>:198:                                    ; preds = %196, %192
  %199 = icmp ne i8* %.011, null
  br i1 %199, label %200, label %203

; <label>:200:                                    ; preds = %198
  %201 = sext i32 %.218 to i64
  %202 = call double @ptimer_read(%struct.ptimer* %.022)
  call void @progress_update(i8* %.011, i64 %201, double %202)
  br label %203

; <label>:203:                                    ; preds = %200, %198
  call void @unroll_loop(i32 331)
  %204 = icmp slt i64 %.17, %3
  %spec.select = select i1 %76, i1 %204, i1 true
  br i1 %spec.select, label %78, label %..loopexit.loopexit_crit_edge16

..loopexit.loopexit_crit_edge:                    ; preds = %84
  %split = phi i32 [ -1, %84 ]
  %split9 = phi i64 [ %.066, %84 ]
  br label %.loopexit.loopexit

..loopexit.loopexit_crit_edge10:                  ; preds = %152
  %split11 = phi i32 [ %145, %152 ]
  %split12 = phi i64 [ %.066, %152 ]
  br label %.loopexit.loopexit

..loopexit.loopexit_crit_edge13:                  ; preds = %183
  %split14 = phi i32 [ -1, %183 ]
  %split15 = phi i64 [ %170, %183 ]
  br label %.loopexit.loopexit

..loopexit.loopexit_crit_edge16:                  ; preds = %203
  %split17 = phi i32 [ %.218, %203 ]
  %split18 = phi i64 [ %.17, %203 ]
  br label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %..loopexit.loopexit_crit_edge16, %..loopexit.loopexit_crit_edge13, %..loopexit.loopexit_crit_edge10, %..loopexit.loopexit_crit_edge, %75
  %.319.ph = phi i32 [ %split17, %..loopexit.loopexit_crit_edge16 ], [ %split14, %..loopexit.loopexit_crit_edge13 ], [ %split11, %..loopexit.loopexit_crit_edge10 ], [ %split, %..loopexit.loopexit_crit_edge ], [ 0, %75 ]
  %.28.ph = phi i64 [ %split18, %..loopexit.loopexit_crit_edge16 ], [ %split15, %..loopexit.loopexit_crit_edge13 ], [ %split12, %..loopexit.loopexit_crit_edge10 ], [ %split9, %..loopexit.loopexit_crit_edge ], [ 0, %75 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %103, %95, %142
  %.319 = phi i32 [ -1, %142 ], [ 0, %103 ], [ -1, %95 ], [ %.319.ph, %.loopexit.loopexit ]
  %.28 = phi i64 [ %.06.lcssa25, %142 ], [ %.06.lcssa24, %95 ], [ %.06.lcssa24, %103 ], [ %.28.ph, %.loopexit.loopexit ]
  %205 = icmp slt i32 %.319, -1
  %spec.select3 = select i1 %205, i32 -1, i32 %.319
  br label %206

; <label>:206:                                    ; preds = %.loopexit, %173
  %.5 = phi i32 [ %spec.select3, %.loopexit ], [ %176, %173 ]
  %.39 = phi i64 [ %.28, %.loopexit ], [ %.lcssa33, %173 ]
  %207 = icmp ne i8* %.011, null
  br i1 %207, label %208, label %210

; <label>:208:                                    ; preds = %206
  %209 = call double @ptimer_read(%struct.ptimer* %.022)
  call void @progress_finish(i8* %.011, double %209)
  br label %210

; <label>:210:                                    ; preds = %208, %206
  %211 = icmp ne double* %7, null
  br i1 %211, label %212, label %214

; <label>:212:                                    ; preds = %210
  %213 = call double @ptimer_read(%struct.ptimer* %.022)
  store double %213, double* %7, align 8
  br label %214

; <label>:214:                                    ; preds = %212, %210
  %215 = icmp ne %struct.ptimer* %.022, null
  br i1 %215, label %216, label %217

; <label>:216:                                    ; preds = %214
  call void @ptimer_destroy(%struct.ptimer* %.022)
  br label %217

; <label>:217:                                    ; preds = %216, %214
  %218 = icmp ne i64* %5, null
  br i1 %218, label %219, label %222

; <label>:219:                                    ; preds = %217
  %220 = load i64, i64* %5, align 8
  %221 = add nsw i64 %220, %.39
  store i64 %221, i64* %5, align 8
  br label %222

; <label>:222:                                    ; preds = %219, %217
  %223 = icmp ne i64* %6, null
  br i1 %223, label %224, label %228

; <label>:224:                                    ; preds = %222
  %225 = load i64, i64* %12, align 8
  %226 = load i64, i64* %6, align 8
  %227 = add nsw i64 %226, %225
  store i64 %227, i64* %6, align 8
  br label %228

; <label>:228:                                    ; preds = %222, %224
  call void @free(i8* %15) #8
  ret i32 %.5
}

; Function Attrs: noinline nounwind uwtable
define internal void @limit_bandwidth_reset() #0 {
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.anon.123* @limit_data to i8*), i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @fd_read_line(i32) #7 {
  %2 = call i8* @fd_read_hunk(i32 %0, i8* (i8*, i8*, i32)* @line_terminator, i64 128, i64 4096)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @write_data(%struct._IO_FILE*, %struct._IO_FILE*, i8*, i32, i64*, i64*) #0 {
  %7 = icmp eq %struct._IO_FILE* %0, null
  %8 = icmp eq %struct._IO_FILE* %1, null
  %or.cond = and i1 %7, %8
  br i1 %or.cond, label %60, label %9

; <label>:9:                                      ; preds = %6
  %10 = load i64, i64* %4, align 8
  %11 = sext i32 %3 to i64
  %12 = icmp sgt i64 %10, %11
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %9
  %14 = sext i32 %3 to i64
  %15 = load i64, i64* %4, align 8
  %16 = sub nsw i64 %15, %14
  store i64 %16, i64* %4, align 8
  br label %60

; <label>:17:                                     ; preds = %9
  %18 = load i64, i64* %4, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %17
  %21 = load i64, i64* %4, align 8
  %22 = getelementptr inbounds i8, i8* %2, i64 %21
  %23 = load i64, i64* %4, align 8
  %24 = sext i32 %3 to i64
  %25 = sub nsw i64 %24, %23
  %26 = trunc i64 %25 to i32
  store i64 0, i64* %4, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %60, label %28

; <label>:28:                                     ; preds = %20, %17
  %.02 = phi i8* [ %2, %17 ], [ %22, %20 ]
  %.01 = phi i32 [ %3, %17 ], [ %26, %20 ]
  %29 = icmp ne %struct._IO_FILE* %0, null
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %28
  %31 = sext i32 %.01 to i64
  %32 = call i64 @fwrite(i8* %.02, i64 1, i64 %31, %struct._IO_FILE* %0)
  br label %33

; <label>:33:                                     ; preds = %30, %28
  %34 = icmp ne %struct._IO_FILE* %1, null
  br i1 %34, label %35, label %38

; <label>:35:                                     ; preds = %33
  %36 = sext i32 %.01 to i64
  %37 = call i64 @fwrite(i8* %.02, i64 1, i64 %36, %struct._IO_FILE* %1)
  br label %38

; <label>:38:                                     ; preds = %35, %33
  %39 = sext i32 %.01 to i64
  %40 = load i64, i64* %5, align 8
  %41 = add nsw i64 %40, %39
  store i64 %41, i64* %5, align 8
  %42 = icmp ne %struct._IO_FILE* %0, null
  br i1 %42, label %43, label %45

; <label>:43:                                     ; preds = %38
  %44 = call i32 @fflush(%struct._IO_FILE* %0)
  br label %45

; <label>:45:                                     ; preds = %43, %38
  %46 = icmp ne %struct._IO_FILE* %1, null
  br i1 %46, label %47, label %49

; <label>:47:                                     ; preds = %45
  %48 = call i32 @fflush(%struct._IO_FILE* %1)
  br label %49

; <label>:49:                                     ; preds = %47, %45
  %50 = icmp ne %struct._IO_FILE* %0, null
  br i1 %50, label %51, label %54

; <label>:51:                                     ; preds = %49
  %52 = call i32 @ferror(%struct._IO_FILE* %0) #8
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %60, label %54

; <label>:54:                                     ; preds = %51, %49
  %55 = icmp ne %struct._IO_FILE* %1, null
  br i1 %55, label %56, label %59

; <label>:56:                                     ; preds = %54
  %57 = call i32 @ferror(%struct._IO_FILE* %1) #8
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %60, label %59

; <label>:59:                                     ; preds = %56, %54
  br label %60

; <label>:60:                                     ; preds = %56, %51, %20, %6, %59, %13
  %.0 = phi i32 [ 1, %13 ], [ 0, %59 ], [ 1, %6 ], [ 1, %20 ], [ -1, %51 ], [ -2, %56 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @limit_bandwidth(i64, %struct.ptimer*) #0 {
  %3 = call double @ptimer_read(%struct.ptimer* %1)
  %4 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = fsub double %3, %5
  %7 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, %0
  %10 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = sitofp i64 %12 to double
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 89
  %15 = load i64, i64* %14, align 8
  %16 = sitofp i64 %15 to double
  %17 = fdiv double %13, %16
  %18 = fcmp ogt double %17, %6
  br i1 %18, label %19, label %60

; <label>:19:                                     ; preds = %2
  %20 = fsub double %17, %6
  %21 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 2
  %22 = load double, double* %21, align 8
  %23 = fadd double %20, %22
  %24 = fcmp olt double %23, 2.000000e-01
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %26 = load i8, i8* %25, align 1
  %27 = trunc i8 %26 to i1
  br i1 %24, label %28, label %35

; <label>:28:                                     ; preds = %19
  br i1 %27, label %29, label %64

; <label>:29:                                     ; preds = %28
  %30 = fmul double %23, 1.000000e+03
  %31 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = call i8* @number_to_static_string(i64 %32)
  %34 = getelementptr [38 x i8], [38 x i8]* @.str.24.1259, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %34, double %30, i8* %33, double %6)
  br label %64

; <label>:35:                                     ; preds = %19
  br i1 %27, label %36, label %44

; <label>:36:                                     ; preds = %35
  %37 = fmul double %23, 1.000000e+03
  %38 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = call i8* @number_to_static_string(i64 %39)
  %41 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 2
  %42 = load double, double* %41, align 8
  %43 = getelementptr [48 x i8], [48 x i8]* @.str.25.1260, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %43, double %37, i8* %40, double %42)
  br label %44

; <label>:44:                                     ; preds = %35, %36
  %45 = call double @ptimer_read(%struct.ptimer* %1)
  call void @xsleep(double %23)
  %46 = call double @ptimer_measure(%struct.ptimer* %1)
  %47 = fsub double %46, %45
  %48 = fsub double %23, %47
  %49 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 2
  store double %48, double* %49, align 8
  %50 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 2
  %51 = load double, double* %50, align 8
  %52 = fcmp ogt double %51, 5.000000e-01
  %53 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 2
  br i1 %52, label %54, label %55

; <label>:54:                                     ; preds = %44
  store double 5.000000e-01, double* %53, align 8
  br label %60

; <label>:55:                                     ; preds = %44
  %56 = load double, double* %53, align 8
  %57 = fcmp olt double %56, -5.000000e-01
  br i1 %57, label %58, label %60

; <label>:58:                                     ; preds = %55
  %59 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 2
  store double -5.000000e-01, double* %59, align 8
  br label %60

; <label>:60:                                     ; preds = %54, %58, %55, %2
  %61 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 0
  store i64 0, i64* %61, align 8
  %62 = call double @ptimer_read(%struct.ptimer* %1)
  %63 = getelementptr %struct.anon.123, %struct.anon.123* @limit_data, i32 0, i32 1
  store double %62, double* %63, align 8
  br label %64

; <label>:64:                                     ; preds = %29, %28, %60
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @line_terminator(i8*, i8*, i32) #0 {
  %4 = sext i32 %2 to i64
  %5 = call i8* @memchr(i8* %1, i32 10, i64 %4) #14
  %6 = icmp ne i8* %5, null
  %7 = getelementptr inbounds i8, i8* %5, i64 1
  %.0 = select i1 %6, i8* %7, i8* null
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @fd_read_hunk(i32, i8* (i8*, i8*, i32)*, i64, i64) #7 {
  %5 = call noalias i8* @xmalloc(i64 %2)
  %6 = sub nsw i64 %2, 1
  %7 = trunc i64 %6 to i32
  %8 = call i32 @fd_peek(i32 %0, i8* %5, i32 %7, double -1.000000e+00)
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %67
  %.03.lcssa.ph = phi i8* [ %.3, %67 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %.03.lcssa = phi i8* [ %5, %4 ], [ %.03.lcssa.ph, %._crit_edge.loopexit ]
  call void @free(i8* %.03.lcssa) #8
  br label %76

.lr.ph:                                           ; preds = %.lr.ph.preheader, %67
  %10 = phi i32 [ %74, %67 ], [ %8, %.lr.ph.preheader ]
  %.0225 = phi i32 [ %42, %67 ], [ 0, %.lr.ph.preheader ]
  %.0324 = phi i8* [ %.3, %67 ], [ %5, %.lr.ph.preheader ]
  %.0423 = phi i64 [ %.4, %67 ], [ %2, %.lr.ph.preheader ]
  call void @unroll_loop(i32 332)
  %11 = sext i32 %.0225 to i64
  %12 = getelementptr inbounds i8, i8* %.0324, i64 %11
  %13 = call i8* %1(i8* %.0324, i8* %12, i32 %10)
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %35

; <label>:15:                                     ; preds = %.lr.ph
  %16 = sext i32 %.0225 to i64
  %17 = getelementptr inbounds i8, i8* %.0324, i64 %16
  %18 = ptrtoint i8* %13 to i64
  %19 = ptrtoint i8* %17 to i64
  %20 = sub i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %15
  %.03.lcssa13 = phi i8* [ %.0324, %15 ]
  %.02.lcssa8 = phi i32 [ %.0225, %15 ]
  %24 = sext i32 %.02.lcssa8 to i64
  %25 = getelementptr inbounds i8, i8* %.03.lcssa13, i64 %24
  store i8 0, i8* %25, align 1
  br label %76

; <label>:26:                                     ; preds = %15
  %27 = sub nsw i64 %.0423, 1
  %28 = add nsw i32 %.0225, %21
  %29 = sext i32 %28 to i64
  %30 = icmp slt i64 %27, %29
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %26
  %32 = add nsw i32 %28, 1
  %33 = sext i32 %32 to i64
  %34 = call i8* @xrealloc(i8* %.0324, i64 %33)
  br label %35

; <label>:35:                                     ; preds = %.lr.ph, %26, %31
  %.26 = phi i64 [ %33, %31 ], [ %.0423, %26 ], [ %.0423, %.lr.ph ]
  %.2 = phi i8* [ %34, %31 ], [ %.0324, %26 ], [ %.0324, %.lr.ph ]
  %.01 = phi i32 [ %21, %31 ], [ %21, %26 ], [ %10, %.lr.ph ]
  %36 = sext i32 %.0225 to i64
  %37 = getelementptr inbounds i8, i8* %.2, i64 %36
  %38 = call i32 @fd_read(i32 %0, i8* %37, i32 %.01, double 0.000000e+00)
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %35
  %.2.lcssa = phi i8* [ %.2, %35 ]
  call void @free(i8* %.2.lcssa) #8
  br label %76

; <label>:41:                                     ; preds = %35
  %42 = add nsw i32 %.0225, %38
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %.2, i64 %43
  store i8 0, i8* %44, align 1
  %45 = icmp eq i32 %38, 0
  br i1 %45, label %46, label %50

; <label>:46:                                     ; preds = %41
  %.lcssa = phi i32 [ %42, %41 ]
  %.2.lcssa18 = phi i8* [ %.2, %41 ]
  %47 = icmp eq i32 %.lcssa, 0
  br i1 %47, label %48, label %76

; <label>:48:                                     ; preds = %46
  call void @free(i8* %.2.lcssa18) #8
  %49 = call i32* @__errno_location() #15
  store i32 0, i32* %49, align 4
  br label %76

; <label>:50:                                     ; preds = %41
  %51 = icmp ne i8* %13, null
  %52 = icmp eq i32 %38, %.01
  %or.cond = and i1 %51, %52
  br i1 %or.cond, label %.loopexit, label %53

; <label>:53:                                     ; preds = %50
  %54 = sext i32 %42 to i64
  %55 = sub nsw i64 %.26, 1
  %56 = icmp eq i64 %54, %55
  br i1 %56, label %57, label %67

; <label>:57:                                     ; preds = %53
  %58 = icmp ne i64 %3, 0
  %59 = icmp sge i64 %.26, %3
  %or.cond1 = and i1 %58, %59
  br i1 %or.cond1, label %60, label %62

; <label>:60:                                     ; preds = %57
  %.2.lcssa5 = phi i8* [ %.2, %57 ]
  call void @free(i8* %.2.lcssa5) #8
  %61 = call i32* @__errno_location() #15
  store i32 12, i32* %61, align 4
  br label %76

; <label>:62:                                     ; preds = %57
  %63 = shl i64 %.26, 1
  %64 = icmp ne i64 %3, 0
  %65 = icmp sgt i64 %63, %3
  %or.cond2 = and i1 %64, %65
  %.37 = select i1 %or.cond2, i64 %3, i64 %63
  %66 = call i8* @xrealloc(i8* %.2, i64 %.37)
  br label %67

; <label>:67:                                     ; preds = %62, %53
  %.4 = phi i64 [ %.37, %62 ], [ %.26, %53 ]
  %.3 = phi i8* [ %66, %62 ], [ %.2, %53 ]
  %68 = sext i32 %42 to i64
  %69 = getelementptr inbounds i8, i8* %.3, i64 %68
  %70 = sub nsw i64 %.4, 1
  %71 = sext i32 %42 to i64
  %72 = sub nsw i64 %70, %71
  %73 = trunc i64 %72 to i32
  %74 = call i32 @fd_peek(i32 %0, i8* %69, i32 %73, double -1.000000e+00)
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %._crit_edge.loopexit, label %.lr.ph

.loopexit:                                        ; preds = %50
  %.0.ph = phi i8* [ %.2, %50 ]
  br label %76

; <label>:76:                                     ; preds = %.loopexit, %46, %60, %48, %40, %23, %._crit_edge
  %.0 = phi i8* [ null, %._crit_edge ], [ %.03.lcssa13, %23 ], [ null, %40 ], [ null, %48 ], [ null, %60 ], [ %.2.lcssa18, %46 ], [ %.0.ph, %.loopexit ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @retr_rate(i64, double) #0 {
  %3 = alloca i32, align 4
  %4 = call double @calc_rate(i64 %0, double %1, i32* %3)
  %5 = fcmp oge double %4, 9.995000e+01
  br i1 %5, label %10, label %6

; <label>:6:                                      ; preds = %2
  %7 = fcmp oge double %4, 0x4023FD70A3D70A3D
  %8 = zext i1 %7 to i64
  %9 = select i1 %7, i32 1, i32 2
  br label %10

; <label>:10:                                     ; preds = %2, %6
  %11 = phi i32 [ %9, %6 ], [ 0, %2 ]
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 155
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  br i1 %14, label %20, label %17

; <label>:17:                                     ; preds = %10
  %18 = getelementptr inbounds [4 x i8*], [4 x i8*]* @retr_rate.rate_names, i64 0, i64 %16
  %19 = load i8*, i8** %18, align 8
  br label %23

; <label>:20:                                     ; preds = %10
  %21 = getelementptr inbounds [4 x i8*], [4 x i8*]* @retr_rate.rate_names_bits, i64 0, i64 %16
  %22 = load i8*, i8** %21, align 8
  br label %23

; <label>:23:                                     ; preds = %20, %17
  %24 = phi i8* [ %19, %17 ], [ %22, %20 ]
  %25 = getelementptr [20 x i8], [20 x i8]* @retr_rate.res, i32 0, i32 0
  %26 = getelementptr [8 x i8], [8 x i8]* @.str.8.1267, i32 0, i32 0
  %27 = call i32 (i8*, i8*, ...) @sprintf(i8* %25, i8* %26, i32 %11, double %4, i8* %24) #8
  %28 = getelementptr [20 x i8], [20 x i8]* @retr_rate.res, i32 0, i32 0
  ret i8* %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local double @calc_rate(i64, double, i32*) #0 {
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 155
  %5 = load i8, i8* %4, align 1
  %6 = trunc i8 %5 to i1
  %spec.select = select i1 %6, double 1.000000e+03, double 1.024000e+03
  %7 = fcmp oeq double %1, 0.000000e+00
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %3
  %9 = call double @ptimer_resolution()
  %10 = fdiv double %9, 2.000000e+00
  br label %11

; <label>:11:                                     ; preds = %8, %3
  %.01 = phi double [ %10, %8 ], [ %1, %3 ]
  %12 = call i64 @convert_to_bits(i64 %0)
  %13 = sitofp i64 %12 to double
  %14 = fdiv double %13, %.01
  %15 = fcmp olt double %14, %spec.select
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %11
  store i32 0, i32* %2, align 4
  br label %33

; <label>:17:                                     ; preds = %11
  %18 = fmul double %spec.select, %spec.select
  %19 = fcmp olt double %14, %18
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %17
  store i32 1, i32* %2, align 4
  %21 = fdiv double %14, %spec.select
  br label %33

; <label>:22:                                     ; preds = %17
  %23 = fmul double %spec.select, %spec.select
  %24 = fmul double %23, %spec.select
  %25 = fcmp olt double %14, %24
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %22
  store i32 2, i32* %2, align 4
  %27 = fmul double %spec.select, %spec.select
  %28 = fdiv double %14, %27
  br label %33

; <label>:29:                                     ; preds = %22
  store i32 3, i32* %2, align 4
  %30 = fmul double %spec.select, %spec.select
  %31 = fmul double %30, %spec.select
  %32 = fdiv double %14, %31
  br label %33

; <label>:33:                                     ; preds = %20, %29, %26, %16
  %.2 = phi double [ %14, %16 ], [ %21, %20 ], [ %28, %26 ], [ %32, %29 ]
  ret double %.2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @retrieve_url(%struct.url*, i8*, i8**, i8**, i8*, i32*, i1 zeroext, %struct.iri*, i1 zeroext) #0 {
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8, !track !654
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8, !track !655
  %14 = zext i1 %6 to i8
  %15 = zext i1 %8 to i8
  store i8* null, i8** %13, align 8
  %16 = icmp ne i32* %5, null
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %9
  store i32 0, i32* %10, align 4
  br label %18

; <label>:18:                                     ; preds = %17, %9
  %.03 = phi i32* [ %5, %9 ], [ %10, %17 ]
  %19 = call noalias i8* @xstrdup(i8* %1)
  %20 = icmp ne i8** %3, null
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %18
  store i8* null, i8** %3, align 8
  br label %22

; <label>:22:                                     ; preds = %21, %18
  %23 = icmp ne i8** %2, null
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %22
  store i8* null, i8** %2, align 8
  br label %25

; <label>:25:                                     ; preds = %24, %22
  %26 = icmp ne i8* %4, null
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 100
  %28 = load i8*, i8** %27, align 8
  %.02 = select i1 %26, i8* %4, i8* %28
  br label %.outer

.outer:                                           ; preds = %215, %25
  %.020.ph = phi i8 [ %.121, %215 ], [ 0, %25 ]
  %.019.ph = phi i32 [ %179, %215 ], [ 0, %25 ]
  %.016.ph = phi %struct.url* [ %156, %215 ], [ %0, %25 ]
  %.015.ph = phi i8 [ %.015.lcssa99, %215 ], [ 0, %25 ]
  %.013.ph = phi i8* [ %.114, %215 ], [ null, %25 ]
  %.012.ph = phi i8* [ %198, %215 ], [ %19, %25 ]
  %.07.ph = phi i8* [ %.18, %215 ], [ null, %25 ]
  %.05.ph = phi i8* [ %.16, %215 ], [ null, %25 ]
  %.04.ph = phi i8 [ %.2.lcssa, %215 ], [ %14, %25 ]
  call void @unroll_loop(i32 306)
  br label %29

; <label>:29:                                     ; preds = %.outer, %239
  %.016 = phi %struct.url* [ %230, %239 ], [ %.016.ph, %.outer ]
  %.015 = phi i8 [ 1, %239 ], [ %.015.ph, %.outer ]
  %.012 = phi i8* [ %242, %239 ], [ %.012.ph, %.outer ]
  %.04 = phi i8 [ %.2, %239 ], [ %.04.ph, %.outer ]
  call void @unroll_loop(i32 333)
  store i8* null, i8** %11, align 8
  %30 = load i8*, i8** %13, align 8
  call void @free(i8* %30) #8
  store i8* null, i8** %13, align 8
  %31 = call i8* @getproxy(%struct.url* %.016)
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %69

; <label>:33:                                     ; preds = %29
  %34 = call %struct.iri* @iri_new()
  %35 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %36 = load i8*, i8** %35, align 8
  call void @set_uri_encoding(%struct.iri* %34, i8* %36, i1 zeroext true)
  %37 = getelementptr inbounds %struct.iri, %struct.iri* %34, i32 0, i32 3
  store i8 0, i8* %37, align 8
  %38 = call %struct.url* @url_parse(i8* %31, i32* %12, %struct.iri* %34, i1 zeroext true)
  %39 = icmp ne %struct.url* %38, null
  br i1 %39, label %50, label %40

; <label>:40:                                     ; preds = %33
  %.lcssa67 = phi i8* [ %31, %33 ]
  %.020.lcssa = phi i8 [ %.020.ph, %33 ]
  %.013.lcssa = phi i8* [ %.013.ph, %33 ]
  %.012.lcssa = phi i8* [ %.012, %33 ]
  %.07.lcssa = phi i8* [ %.07.ph, %33 ]
  %.05.lcssa = phi i8* [ %.05.ph, %33 ]
  %.lcssa23 = phi %struct.iri* [ %34, %33 ]
  %41 = load i32, i32* %12, align 4
  %42 = call i8* @url_error(i8* %.lcssa67, i32 %41)
  %43 = getelementptr [33 x i8], [33 x i8]* @.str.9.1278, i32 0, i32 0
  %44 = call i8* @gettext(i8* %43) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %44, i8* %.lcssa67, i8* %42)
  call void @free(i8* %.012.lcssa) #8
  call void @free(i8* %42) #8
  call void @free(i8* %.lcssa67) #8
  call void @iri_free(%struct.iri* %.lcssa23)
  %45 = trunc i8 %.020.lcssa to i1
  br i1 %45, label %46, label %318

; <label>:46:                                     ; preds = %40
  %47 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  store i8* %.013.lcssa, i8** %47, align 8
  %48 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  store i8* %.05.lcssa, i8** %48, align 8
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  store i8* %.07.lcssa, i8** %49, align 8
  br label %318

; <label>:50:                                     ; preds = %33
  %51 = getelementptr inbounds %struct.url, %struct.url* %38, i32 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %68

; <label>:54:                                     ; preds = %50
  %55 = getelementptr inbounds %struct.url, %struct.url* %38, i32 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.url, %struct.url* %.016, i32 0, i32 1
  %58 = load i32, i32* %57, align 8
  %59 = icmp ne i32 %56, %58
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %54
  %.lcssa68 = phi i8* [ %31, %54 ]
  %.020.lcssa62 = phi i8 [ %.020.ph, %54 ]
  %.013.lcssa41 = phi i8* [ %.013.ph, %54 ]
  %.012.lcssa36 = phi i8* [ %.012, %54 ]
  %.07.lcssa31 = phi i8* [ %.07.ph, %54 ]
  %.05.lcssa26 = phi i8* [ %.05.ph, %54 ]
  %.lcssa24 = phi %struct.iri* [ %34, %54 ]
  %.lcssa22 = phi %struct.url* [ %38, %54 ]
  %61 = getelementptr [38 x i8], [38 x i8]* @.str.10.1279, i32 0, i32 0
  %62 = call i8* @gettext(i8* %61) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %62, i8* %.lcssa68)
  call void @url_free(%struct.url* %.lcssa22)
  call void @free(i8* %.012.lcssa36) #8
  call void @free(i8* %.lcssa68) #8
  call void @iri_free(%struct.iri* %.lcssa24)
  %63 = trunc i8 %.020.lcssa62 to i1
  br i1 %63, label %64, label %318

; <label>:64:                                     ; preds = %60
  %65 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  store i8* %.013.lcssa41, i8** %65, align 8
  %66 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  store i8* %.05.lcssa26, i8** %66, align 8
  %67 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  store i8* %.07.lcssa31, i8** %67, align 8
  br label %318

; <label>:68:                                     ; preds = %54, %50
  call void @iri_free(%struct.iri* %34)
  call void @free(i8* %31) #8
  br label %69

; <label>:69:                                     ; preds = %68, %29
  %.018 = phi %struct.url* [ %38, %68 ], [ null, %29 ]
  %70 = getelementptr inbounds %struct.url, %struct.url* %.016, i32 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %83, label %73

; <label>:73:                                     ; preds = %69
  %74 = getelementptr inbounds %struct.url, %struct.url* %.016, i32 0, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %83, label %77

; <label>:77:                                     ; preds = %73
  %78 = icmp ne %struct.url* %.018, null
  br i1 %78, label %79, label %96

; <label>:79:                                     ; preds = %77
  %80 = getelementptr inbounds %struct.url, %struct.url* %.018, i32 0, i32 1
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %96

; <label>:83:                                     ; preds = %79, %73, %69
  %84 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 157
  %85 = load i8, i8* %84, align 8
  %86 = trunc i8 %85 to i1
  %87 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %88 = icmp ne %struct.hsts_store* %87, null
  %or.cond = and i1 %86, %88
  br i1 %or.cond, label %89, label %94

; <label>:89:                                     ; preds = %83
  %90 = load %struct.hsts_store*, %struct.hsts_store** @hsts_store, align 8
  %91 = call zeroext i1 @hsts_match(%struct.hsts_store* %90, %struct.url* %.016)
  br i1 %91, label %92, label %94

; <label>:92:                                     ; preds = %89
  %93 = getelementptr [48 x i8], [48 x i8]* @.str.11.1280, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %93)
  br label %94

; <label>:94:                                     ; preds = %89, %92, %83
  %95 = call i32 @http_loop(%struct.url* %.016, %struct.url* %0, i8** %11, i8** %13, i8* %.02, i32* %.03, %struct.url* %.018, %struct.iri* %7)
  br label %134

; <label>:96:                                     ; preds = %79, %77
  %97 = getelementptr inbounds %struct.url, %struct.url* %.016, i32 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = icmp eq i32 %98, 2
  br i1 %99, label %104, label %100

; <label>:100:                                    ; preds = %96
  %101 = getelementptr inbounds %struct.url, %struct.url* %.016, i32 0, i32 1
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 3
  br i1 %103, label %104, label %134

; <label>:104:                                    ; preds = %100, %96
  %105 = trunc i8 %.04 to i1
  %106 = zext i1 %105 to i8
  %107 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 64
  %108 = load i8, i8* %107, align 1
  %109 = trunc i8 %108 to i1
  %110 = zext i1 %109 to i8
  %111 = icmp ne i32 %.019.ph, 0
  %spec.select = select i1 %111, i8 0, i8 %106
  %spec.select2 = select i1 %111, i8 0, i8 %110
  %112 = trunc i8 %.04 to i1
  %113 = trunc i8 %spec.select2 to i1
  %114 = call i32 @ftp_loop(%struct.url* %.016, i8** %13, i32* %.03, %struct.url* %.018, i1 zeroext %112, i1 zeroext %113)
  %115 = trunc i8 %spec.select to i1
  %116 = zext i1 %115 to i8
  %117 = icmp ne i32 %.019.ph, 0
  %118 = load i8*, i8** %13, align 8
  %119 = icmp ne i8* %118, null
  %or.cond4 = and i1 %117, %119
  br i1 %or.cond4, label %120, label %134

; <label>:120:                                    ; preds = %104
  %121 = getelementptr inbounds %struct.url, %struct.url* %.016, i32 0, i32 1
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 2
  br i1 %123, label %128, label %124

; <label>:124:                                    ; preds = %120
  %125 = getelementptr inbounds %struct.url, %struct.url* %.016, i32 0, i32 1
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 3
  br i1 %127, label %128, label %134

; <label>:128:                                    ; preds = %124, %120
  %129 = load i8*, i8** %13, align 8
  %130 = call zeroext i1 @has_html_suffix_p(i8* %129)
  br i1 %130, label %131, label %134

; <label>:131:                                    ; preds = %128
  %132 = load i32, i32* %.03, align 4
  %133 = or i32 %132, 1
  store i32 %133, i32* %.03, align 4
  br label %134

; <label>:134:                                    ; preds = %100, %128, %131, %124, %104, %94
  %.110 = phi i32 [ %95, %94 ], [ 0, %100 ], [ %114, %128 ], [ %114, %131 ], [ %114, %124 ], [ %114, %104 ]
  %.2 = phi i8 [ %.04, %94 ], [ %.04, %100 ], [ %116, %128 ], [ %116, %131 ], [ %116, %124 ], [ %116, %104 ]
  %135 = icmp ne %struct.url* %.018, null
  br i1 %135, label %136, label %137

; <label>:136:                                    ; preds = %134
  call void @url_free(%struct.url* %.018)
  br label %137

; <label>:137:                                    ; preds = %136, %134
  %138 = icmp eq i32 %.110, 6
  %139 = icmp eq i32 %.110, 48
  %spec.select5 = select i1 %138, i1 true, i1 %139
  %140 = zext i1 %spec.select5 to i8
  %141 = trunc i8 %140 to i1
  br i1 %141, label %142, label %216

; <label>:142:                                    ; preds = %137
  %.110.lcssa117 = phi i32 [ %.110, %137 ]
  %.2.lcssa = phi i8 [ %.2, %137 ]
  %.016.lcssa103 = phi %struct.url* [ %.016, %137 ]
  %.015.lcssa99 = phi i8 [ %.015, %137 ]
  %.012.lcssa90 = phi i8* [ %.012, %137 ]
  %143 = load i8*, i8** %13, align 8
  call void @free(i8* %143) #8
  store i8* null, i8** %13, align 8
  %144 = load i8*, i8** %11, align 8
  %145 = call i8* @uri_merge(i8* %.012.lcssa90, i8* %144)
  %146 = load i8*, i8** %11, align 8
  call void @free(i8* %146) #8
  store i8* null, i8** %11, align 8
  store i8* %145, i8** %11, align 8
  %147 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %148 = load i8, i8* %147, align 2
  %149 = trunc i8 %148 to i1
  %150 = getelementptr inbounds %struct.iri, %struct.iri* %7, i32 0, i32 3
  %151 = zext i1 %149 to i8
  store i8 %151, i8* %150, align 8
  call void @set_content_encoding(%struct.iri* %7, i8* null)
  %152 = getelementptr inbounds %struct.iri, %struct.iri* %7, i32 0, i32 2
  %153 = load i8*, i8** %152, align 8
  call void @free(i8* %153) #8
  %154 = getelementptr inbounds %struct.iri, %struct.iri* %7, i32 0, i32 2
  store i8* null, i8** %154, align 8
  %155 = load i8*, i8** %11, align 8
  %156 = call %struct.url* @url_parse(i8* %155, i32* %12, %struct.iri* %7, i1 zeroext true)
  %157 = icmp ne %struct.url* %156, null
  br i1 %157, label %174, label %158

; <label>:158:                                    ; preds = %142
  %.110.lcssa74 = phi i32 [ %.110.lcssa117, %142 ]
  %.020.lcssa65 = phi i8 [ %.020.ph, %142 ]
  %.016.lcssa54 = phi %struct.url* [ %.016.lcssa103, %142 ]
  %.013.lcssa44 = phi i8* [ %.013.ph, %142 ]
  %.012.lcssa39 = phi i8* [ %.012.lcssa90, %142 ]
  %.07.lcssa34 = phi i8* [ %.07.ph, %142 ]
  %.05.lcssa29 = phi i8* [ %.05.ph, %142 ]
  %159 = load i8*, i8** %11, align 8
  %160 = load i32, i32* %12, align 4
  %161 = call i8* @url_error(i8* %159, i32 %160)
  %162 = load i8*, i8** %11, align 8
  %163 = call i8* @escnonprint_uri(i8* %162)
  %164 = getelementptr [9 x i8], [9 x i8]* @.str.12.1281, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %164, i8* %163, i8* %161)
  %165 = icmp ne %struct.url* %0, %.016.lcssa54
  br i1 %165, label %166, label %167

; <label>:166:                                    ; preds = %158
  call void @url_free(%struct.url* %.016.lcssa54)
  br label %167

; <label>:167:                                    ; preds = %158, %166
  call void @free(i8* %.012.lcssa39) #8
  %168 = load i8*, i8** %11, align 8
  call void @free(i8* %168) #8
  store i8* null, i8** %11, align 8
  call void @free(i8* %161) #8
  %169 = trunc i8 %.020.lcssa65 to i1
  br i1 %169, label %170, label %318

; <label>:170:                                    ; preds = %167
  %171 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  store i8* %.013.lcssa44, i8** %171, align 8
  %172 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  store i8* %.05.lcssa29, i8** %172, align 8
  %173 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  store i8* %.07.lcssa34, i8** %173, align 8
  br label %318

; <label>:174:                                    ; preds = %142
  %175 = load i8*, i8** %11, align 8
  call void @free(i8* %175) #8
  store i8* null, i8** %11, align 8
  %176 = getelementptr inbounds %struct.url, %struct.url* %156, i32 0, i32 0
  %177 = load i8*, i8** %176, align 8
  %178 = call noalias i8* @xstrdup(i8* %177)
  store i8* %178, i8** %11, align 8
  %179 = add nuw nsw i32 %.019.ph, 1
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  %181 = load i32, i32* %180, align 4
  %182 = icmp sgt i32 %179, %181
  br i1 %182, label %183, label %197

; <label>:183:                                    ; preds = %174
  %.lcssa77 = phi %struct.url* [ %156, %174 ]
  %.020.lcssa66 = phi i8 [ %.020.ph, %174 ]
  %.016.lcssa55 = phi %struct.url* [ %.016.lcssa103, %174 ]
  %.013.lcssa45 = phi i8* [ %.013.ph, %174 ]
  %.012.lcssa40 = phi i8* [ %.012.lcssa90, %174 ]
  %.07.lcssa35 = phi i8* [ %.07.ph, %174 ]
  %.05.lcssa30 = phi i8* [ %.05.ph, %174 ]
  %184 = getelementptr [27 x i8], [27 x i8]* @.str.13.1282, i32 0, i32 0
  %185 = call i8* @gettext(i8* %184) #8
  %186 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  %187 = load i32, i32* %186, align 4
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %185, i32 %187)
  call void @url_free(%struct.url* %.lcssa77)
  %188 = icmp ne %struct.url* %0, %.016.lcssa55
  br i1 %188, label %189, label %190

; <label>:189:                                    ; preds = %183
  call void @url_free(%struct.url* %.016.lcssa55)
  br label %190

; <label>:190:                                    ; preds = %183, %189
  call void @free(i8* %.012.lcssa40) #8
  %191 = load i8*, i8** %11, align 8
  call void @free(i8* %191) #8
  store i8* null, i8** %11, align 8
  %192 = trunc i8 %.020.lcssa66 to i1
  br i1 %192, label %193, label %318

; <label>:193:                                    ; preds = %190
  %194 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  store i8* %.013.lcssa45, i8** %194, align 8
  %195 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  store i8* %.05.lcssa30, i8** %195, align 8
  %196 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  store i8* %.07.lcssa35, i8** %196, align 8
  br label %318

; <label>:197:                                    ; preds = %174
  call void @free(i8* %.012.lcssa90) #8
  %198 = load i8*, i8** %11, align 8
  %199 = icmp ne %struct.url* %0, %.016.lcssa103
  br i1 %199, label %200, label %201

; <label>:200:                                    ; preds = %197
  call void @url_free(%struct.url* %.016.lcssa103)
  br label %201

; <label>:201:                                    ; preds = %200, %197
  %202 = icmp ne i32 %.110.lcssa117, 48
  br i1 %202, label %203, label %215

; <label>:203:                                    ; preds = %201
  %204 = trunc i8 %.020.ph to i1
  br i1 %204, label %215, label %205

; <label>:205:                                    ; preds = %203
  %206 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  %209 = load i8*, i8** %208, align 8
  %210 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  %211 = load i8*, i8** %210, align 8
  %212 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  store i8* null, i8** %212, align 8
  %213 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  store i8* null, i8** %213, align 8
  %214 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  store i8* null, i8** %214, align 8
  br label %215

; <label>:215:                                    ; preds = %205, %203, %201
  %.121 = phi i8 [ %.020.ph, %203 ], [ 1, %205 ], [ %.020.ph, %201 ]
  %.114 = phi i8* [ %.013.ph, %203 ], [ %207, %205 ], [ %.013.ph, %201 ]
  %.18 = phi i8* [ %.07.ph, %203 ], [ %211, %205 ], [ %.07.ph, %201 ]
  %.16 = phi i8* [ %.05.ph, %203 ], [ %209, %205 ], [ %.05.ph, %201 ]
  br label %.outer

; <label>:216:                                    ; preds = %137
  %217 = load i8*, i8** %11, align 8
  call void @free(i8* %217) #8
  store i8* null, i8** %11, align 8
  %218 = load i32, i32* %.03, align 4
  %219 = and i32 %218, 2
  %220 = icmp ne i32 %219, 0
  br i1 %220, label %.loopexit.loopexit, label %221

; <label>:221:                                    ; preds = %216
  %222 = getelementptr inbounds %struct.iri, %struct.iri* %7, i32 0, i32 3
  %223 = load i8, i8* %222, align 8
  %224 = trunc i8 %223 to i1
  br i1 %224, label %225, label %.loopexit.loopexit

; <label>:225:                                    ; preds = %221
  %226 = getelementptr inbounds %struct.iri, %struct.iri* %7, i32 0, i32 3
  store i8 0, i8* %226, align 8
  %227 = icmp ne %struct.url* %0, %.016
  br i1 %227, label %228, label %229

; <label>:228:                                    ; preds = %225
  call void @url_free(%struct.url* %.016)
  br label %229

; <label>:229:                                    ; preds = %228, %225
  %230 = call %struct.url* @url_parse(i8* %1, i32* null, %struct.iri* %7, i1 zeroext true)
  %231 = icmp ne %struct.url* %230, null
  br i1 %231, label %232, label %243

; <label>:232:                                    ; preds = %229
  %233 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %234 = load i8, i8* %233, align 1
  %235 = trunc i8 %234 to i1
  br i1 %235, label %236, label %239

; <label>:236:                                    ; preds = %232
  %237 = call i8* @quote(i8* %.012)
  %238 = getelementptr [37 x i8], [37 x i8]* @.str.14.1283, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %238, i8* %237)
  br label %239

; <label>:239:                                    ; preds = %236, %232
  call void @free(i8* %.012) #8
  %240 = getelementptr inbounds %struct.url, %struct.url* %230, i32 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = call noalias i8* @xstrdup(i8* %241)
  br label %29

; <label>:243:                                    ; preds = %229
  %.110.lcssa73 = phi i32 [ %.110, %229 ]
  %.lcssa70 = phi i8* [ %31, %229 ]
  %.020.lcssa64 = phi i8 [ %.020.ph, %229 ]
  %.019.lcssa58 = phi i32 [ %.019.ph, %229 ]
  %.016.lcssa53 = phi %struct.url* [ %.016, %229 ]
  %.015.lcssa48 = phi i8 [ %.015, %229 ]
  %.013.lcssa43 = phi i8* [ %.013.ph, %229 ]
  %.012.lcssa38 = phi i8* [ %.012, %229 ]
  %.07.lcssa33 = phi i8* [ %.07.ph, %229 ]
  %.05.lcssa28 = phi i8* [ %.05.ph, %229 ]
  %.lcssa25 = phi %struct.url* [ %230, %229 ]
  %244 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %245 = load i8, i8* %244, align 1
  %246 = trunc i8 %245 to i1
  br i1 %246, label %247, label %.loopexit

; <label>:247:                                    ; preds = %243
  %248 = call i8* @quote(i8* %.012.lcssa38)
  %249 = getelementptr [39 x i8], [39 x i8]* @.str.15.1284, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %249, i8* %248)
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %216, %221
  %.110.lcssa.ph = phi i32 [ %.110, %221 ], [ %.110, %216 ]
  %.020.lcssa63.ph = phi i8 [ %.020.ph, %221 ], [ %.020.ph, %216 ]
  %.019.lcssa57.ph = phi i32 [ %.019.ph, %221 ], [ %.019.ph, %216 ]
  %.015.lcssa47.ph = phi i8 [ %.015, %221 ], [ %.015, %216 ]
  %.013.lcssa42.ph = phi i8* [ %.013.ph, %221 ], [ %.013.ph, %216 ]
  %.012.lcssa37.ph = phi i8* [ %.012, %221 ], [ %.012, %216 ]
  %.07.lcssa32.ph = phi i8* [ %.07.ph, %221 ], [ %.07.ph, %216 ]
  %.05.lcssa27.ph = phi i8* [ %.05.ph, %221 ], [ %.05.ph, %216 ]
  %.117.ph = phi %struct.url* [ %.016, %216 ], [ %.016, %221 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %243, %247
  %.110.lcssa = phi i32 [ %.110.lcssa73, %247 ], [ %.110.lcssa73, %243 ], [ %.110.lcssa.ph, %.loopexit.loopexit ]
  %.020.lcssa63 = phi i8 [ %.020.lcssa64, %247 ], [ %.020.lcssa64, %243 ], [ %.020.lcssa63.ph, %.loopexit.loopexit ]
  %.019.lcssa57 = phi i32 [ %.019.lcssa58, %247 ], [ %.019.lcssa58, %243 ], [ %.019.lcssa57.ph, %.loopexit.loopexit ]
  %.015.lcssa47 = phi i8 [ %.015.lcssa48, %247 ], [ %.015.lcssa48, %243 ], [ %.015.lcssa47.ph, %.loopexit.loopexit ]
  %.013.lcssa42 = phi i8* [ %.013.lcssa43, %247 ], [ %.013.lcssa43, %243 ], [ %.013.lcssa42.ph, %.loopexit.loopexit ]
  %.012.lcssa37 = phi i8* [ %.012.lcssa38, %247 ], [ %.012.lcssa38, %243 ], [ %.012.lcssa37.ph, %.loopexit.loopexit ]
  %.07.lcssa32 = phi i8* [ %.07.lcssa33, %247 ], [ %.07.lcssa33, %243 ], [ %.07.lcssa32.ph, %.loopexit.loopexit ]
  %.05.lcssa27 = phi i8* [ %.05.lcssa28, %247 ], [ %.05.lcssa28, %243 ], [ %.05.lcssa27.ph, %.loopexit.loopexit ]
  %.117 = phi %struct.url* [ %.lcssa25, %247 ], [ %.lcssa25, %243 ], [ %.117.ph, %.loopexit.loopexit ]
  %250 = load i8*, i8** %13, align 8
  %251 = icmp ne i8* %250, null
  %252 = icmp ne %struct.url* %.117, null
  %or.cond6 = and i1 %251, %252
  br i1 %or.cond6, label %253, label %289

; <label>:253:                                    ; preds = %.loopexit
  %254 = load i32, i32* %.03, align 4
  %255 = and i32 %254, 2
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %261, label %257

; <label>:257:                                    ; preds = %253
  %258 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 93
  %259 = load i8, i8* %258, align 2
  %260 = trunc i8 %259 to i1
  br i1 %260, label %261, label %289

; <label>:261:                                    ; preds = %257, %253
  %262 = getelementptr inbounds %struct.url, %struct.url* %.117, i32 0, i32 0
  %263 = load i8*, i8** %262, align 8
  %264 = load i8*, i8** %13, align 8
  call void @register_download(i8* %263, i8* %264)
  %265 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %266 = load i8, i8* %265, align 8
  %267 = trunc i8 %266 to i1
  %.not = xor i1 %267, true
  %268 = icmp ne i32 %.019.lcssa57, 0
  %or.cond7 = and i1 %.not, %268
  br i1 %or.cond7, label %269, label %277

; <label>:269:                                    ; preds = %261
  %270 = getelementptr inbounds %struct.url, %struct.url* %.117, i32 0, i32 0
  %271 = load i8*, i8** %270, align 8
  %272 = call i32 @strcmp(i8* %1, i8* %271) #14
  %273 = icmp ne i32 0, %272
  br i1 %273, label %274, label %277

; <label>:274:                                    ; preds = %269
  %275 = getelementptr inbounds %struct.url, %struct.url* %.117, i32 0, i32 0
  %276 = load i8*, i8** %275, align 8
  call void @register_redirection(i8* %1, i8* %276)
  br label %277

; <label>:277:                                    ; preds = %261, %274, %269
  %278 = load i32, i32* %.03, align 4
  %279 = and i32 %278, 1
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %283

; <label>:281:                                    ; preds = %277
  %282 = load i8*, i8** %13, align 8
  call void @register_html(i8* %282)
  br label %283

; <label>:283:                                    ; preds = %281, %277
  %284 = load i32, i32* %.03, align 4
  %285 = and i32 %284, 64
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %289

; <label>:287:                                    ; preds = %283
  %288 = load i8*, i8** %13, align 8
  call void @register_css(i8* %288)
  br label %289

; <label>:289:                                    ; preds = %283, %287, %257, %.loopexit
  %290 = icmp ne i8** %2, null
  %291 = load i8*, i8** %13, align 8
  br i1 %290, label %292, label %296

; <label>:292:                                    ; preds = %289
  %293 = icmp ne i8* %291, null
  %294 = load i8*, i8** %13, align 8
  %295 = select i1 %293, i8* %294, i8* null
  store i8* %295, i8** %2, align 8
  br label %297

; <label>:296:                                    ; preds = %289
  call void @free(i8* %291) #8
  store i8* null, i8** %13, align 8
  br label %297

; <label>:297:                                    ; preds = %296, %292
  %298 = icmp ne %struct.url* %0, %.117
  br i1 %298, label %299, label %300

; <label>:299:                                    ; preds = %297
  call void @url_free(%struct.url* %.117)
  br label %300

; <label>:300:                                    ; preds = %299, %297
  %301 = icmp ne i32 %.019.lcssa57, 0
  br i1 %301, label %304, label %302

; <label>:302:                                    ; preds = %300
  %303 = trunc i8 %.015.lcssa47 to i1
  br i1 %303, label %304, label %308

; <label>:304:                                    ; preds = %302, %300
  %305 = icmp ne i8** %3, null
  br i1 %305, label %306, label %307

; <label>:306:                                    ; preds = %304
  store i8* %.012.lcssa37, i8** %3, align 8
  br label %312

; <label>:307:                                    ; preds = %304
  call void @free(i8* %.012.lcssa37) #8
  br label %312

; <label>:308:                                    ; preds = %302
  %309 = icmp ne i8** %3, null
  br i1 %309, label %310, label %311

; <label>:310:                                    ; preds = %308
  store i8* null, i8** %3, align 8
  br label %311

; <label>:311:                                    ; preds = %308, %310
  call void @free(i8* %.012.lcssa37) #8
  br label %312

; <label>:312:                                    ; preds = %311, %307, %306
  %313 = trunc i8 %.020.lcssa63 to i1
  br i1 %313, label %314, label %318

; <label>:314:                                    ; preds = %312
  %315 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 136
  store i8* %.013.lcssa42, i8** %315, align 8
  %316 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 137
  store i8* %.05.lcssa27, i8** %316, align 8
  %317 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 135
  store i8* %.07.lcssa32, i8** %317, align 8
  br label %318

; <label>:318:                                    ; preds = %314, %312, %193, %190, %170, %167, %64, %60, %46, %40
  %.211 = phi i32 [ 41, %40 ], [ 41, %46 ], [ 41, %60 ], [ 41, %64 ], [ %.110.lcssa74, %167 ], [ %.110.lcssa74, %170 ], [ 27, %190 ], [ 27, %193 ], [ %.110.lcssa, %312 ], [ %.110.lcssa, %314 ]
  %319 = trunc i8 %15 to i1
  br i1 %319, label %320, label %321

; <label>:320:                                    ; preds = %318
  call void @inform_exit_status(i32 %.211)
  br label %321

; <label>:321:                                    ; preds = %320, %318
  ret i32 %.211
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @getproxy(%struct.url*) #7 {
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 70
  %3 = load i8, i8* %2, align 1
  %4 = trunc i8 %3 to i1
  br i1 %4, label %5, label %64

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 75
  %9 = load i8**, i8*** %8, align 8
  %10 = call zeroext i1 @no_proxy_match(i8* %7, i8** %9)
  br i1 %10, label %64, label %11

; <label>:11:                                     ; preds = %5
  %12 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  switch i32 %13, label %54 [
    i32 0, label %14
    i32 1, label %24
    i32 3, label %34
    i32 2, label %44
  ]

; <label>:14:                                     ; preds = %11
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 72
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %14
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 72
  %20 = load i8*, i8** %19, align 8
  br label %54

; <label>:21:                                     ; preds = %14
  %22 = getelementptr [11 x i8], [11 x i8]* @.str.26.1285, i32 0, i32 0
  %23 = call i8* @getenv(i8* %22) #8, !track !656
  br label %54

; <label>:24:                                     ; preds = %11
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 74
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %28, label %31

; <label>:28:                                     ; preds = %24
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 74
  %30 = load i8*, i8** %29, align 8
  br label %54

; <label>:31:                                     ; preds = %24
  %32 = getelementptr [12 x i8], [12 x i8]* @.str.27.1286, i32 0, i32 0
  %33 = call i8* @getenv(i8* %32) #8, !track !657
  br label %54

; <label>:34:                                     ; preds = %11
  %35 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 73
  %36 = load i8*, i8** %35, align 8
  %37 = icmp ne i8* %36, null
  br i1 %37, label %38, label %41

; <label>:38:                                     ; preds = %34
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 73
  %40 = load i8*, i8** %39, align 8
  br label %54

; <label>:41:                                     ; preds = %34
  %42 = getelementptr [11 x i8], [11 x i8]* @.str.28.1287, i32 0, i32 0
  %43 = call i8* @getenv(i8* %42) #8, !track !658
  br label %54

; <label>:44:                                     ; preds = %11
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 73
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ne i8* %46, null
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %44
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 73
  %50 = load i8*, i8** %49, align 8
  br label %54

; <label>:51:                                     ; preds = %44
  %52 = getelementptr [10 x i8], [10 x i8]* @.str.29.1288, i32 0, i32 0
  %53 = call i8* @getenv(i8* %52) #8, !track !659
  br label %54

; <label>:54:                                     ; preds = %48, %51, %38, %41, %28, %31, %18, %21, %11
  %.01 = phi i8* [ %20, %18 ], [ %23, %21 ], [ %30, %28 ], [ %33, %31 ], [ %40, %38 ], [ %43, %41 ], [ %50, %48 ], [ %53, %51 ], [ null, %11 ]
  %55 = icmp ne i8* %.01, null
  br i1 %55, label %56, label %64

; <label>:56:                                     ; preds = %54
  %57 = load i8, i8* %.01, align 1
  %58 = icmp ne i8 %57, 0
  br i1 %58, label %59, label %64

; <label>:59:                                     ; preds = %56
  %60 = call i8* @rewrite_shorthand_url(i8* %.01)
  %61 = icmp ne i8* %60, null
  br i1 %61, label %64, label %62

; <label>:62:                                     ; preds = %59
  %63 = call noalias i8* @strdup(i8* %.01) #8, !track !660
  br label %64

; <label>:64:                                     ; preds = %59, %54, %56, %5, %1, %62
  %.0 = phi i8* [ %63, %62 ], [ null, %1 ], [ null, %5 ], [ null, %56 ], [ null, %54 ], [ %60, %59 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @no_proxy_match(i8*, i8**) #0 {
  %3 = icmp ne i8** %1, null
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %2
  %5 = call zeroext i1 @sufmatch(i8** %1, i8* %0)
  br label %6

; <label>:6:                                      ; preds = %2, %4
  %.0 = phi i1 [ %5, %4 ], [ false, %2 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @retrieve_from_file(i8*, i1 zeroext, i32*) #0 {
  %4 = alloca i8*, align 8, !track !661
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8, !track !662
  %8 = alloca i8*, align 8, !track !663
  %9 = alloca i32, align 4
  %10 = zext i1 %1 to i8
  %11 = call %struct.iri* @iri_new()
  store i8* null, i8** %4, align 8
  store i32 0, i32* %2, align 4
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %13 = load i8*, i8** %12, align 8
  call void @set_uri_encoding(%struct.iri* %11, i8* %13, i1 zeroext true)
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %15 = load i8*, i8** %14, align 8
  call void @set_content_encoding(%struct.iri* %11, i8* %15)
  %16 = call zeroext i1 @url_valid_scheme(i8* %0)
  br i1 %16, label %17, label %58

; <label>:17:                                     ; preds = %3
  %18 = call %struct.url* @url_parse(i8* %0, i32* %6, %struct.iri* %11, i1 zeroext true)
  %19 = icmp ne %struct.url* %18, null
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %17
  %21 = load i32, i32* %6, align 4
  %22 = call i8* @url_error(i8* %0, i32 %21)
  %23 = getelementptr [9 x i8], [9 x i8]* @.str.12.1281, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %23, i8* %0, i8* %22)
  call void @free(i8* %22) #8
  call void @iri_free(%struct.iri* %11)
  br label %200

; <label>:24:                                     ; preds = %17
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 76
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %31, label %28

; <label>:28:                                     ; preds = %24
  %29 = call noalias i8* @xstrdup(i8* %0)
  %30 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 76
  store i8* %29, i8** %30, align 8
  br label %31

; <label>:31:                                     ; preds = %28, %24
  %32 = call i32 @retrieve_url(%struct.url* %18, i8* %0, i8** %4, i8** null, i8* null, i32* %5, i1 zeroext false, %struct.iri* %11, i1 zeroext true)
  call void @url_free(%struct.url* %18)
  %33 = load i8*, i8** %4, align 8
  %34 = icmp eq i8* %33, null
  %35 = icmp ne i32 %32, 25
  %or.cond = or i1 %34, %35
  br i1 %or.cond, label %200, label %36

; <label>:36:                                     ; preds = %31
  %37 = load i32, i32* %5, align 4
  %38 = and i32 %37, 1
  %39 = icmp ne i32 %38, 0
  %spec.select = select i1 %39, i8 1, i8 %10
  %40 = getelementptr inbounds %struct.iri, %struct.iri* %11, i32 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %43 = load i8*, i8** %42, align 8
  %44 = icmp ne i8* %41, %43
  br i1 %44, label %45, label %48

; <label>:45:                                     ; preds = %36
  %46 = getelementptr inbounds %struct.iri, %struct.iri* %11, i32 0, i32 1
  %47 = load i8*, i8** %46, align 8
  call void @set_uri_encoding(%struct.iri* %11, i8* %47, i1 zeroext false)
  br label %48

; <label>:48:                                     ; preds = %45, %36
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %50 = load i8, i8* %49, align 2
  %51 = trunc i8 %50 to i1
  %52 = getelementptr inbounds %struct.iri, %struct.iri* %11, i32 0, i32 3
  %53 = zext i1 %51 to i8
  store i8 %53, i8* %52, align 8
  %54 = getelementptr inbounds %struct.iri, %struct.iri* %11, i32 0, i32 2
  %55 = load i8*, i8** %54, align 8
  call void @free(i8* %55) #8
  %56 = getelementptr inbounds %struct.iri, %struct.iri* %11, i32 0, i32 2
  store i8* null, i8** %56, align 8
  %57 = load i8*, i8** %4, align 8
  br label %58

; <label>:58:                                     ; preds = %3, %48
  %.05 = phi i8* [ %57, %48 ], [ %0, %3 ]
  %.02 = phi i32 [ %32, %48 ], [ 25, %3 ]
  %.1 = phi i8 [ %spec.select, %48 ], [ %10, %3 ]
  %59 = trunc i8 %.1 to i1
  br i1 %59, label %60, label %62

; <label>:60:                                     ; preds = %58
  %61 = call %struct.urlpos* @get_urls_html(i8* %.05, i8* null, i8* null, %struct.iri* %11)
  br label %64

; <label>:62:                                     ; preds = %58
  %63 = call %struct.urlpos* @get_urls_file(i8* %.05)
  br label %64

; <label>:64:                                     ; preds = %60, %62
  %65 = phi %struct.urlpos* [ %61, %60 ], [ %63, %62 ]
  %66 = load i8*, i8** %4, align 8
  call void @free(i8* %66) #8
  store i8* null, i8** %4, align 8
  %67 = icmp ne %struct.urlpos* %65, null
  br i1 %67, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %194
  %.1310 = phi i32 [ %.3, %194 ], [ %.02, %.lr.ph.preheader ]
  %.046 = phi %struct.urlpos* [ %196, %194 ], [ %65, %.lr.ph.preheader ]
  call void @unroll_loop(i32 334)
  store i8* null, i8** %7, align 8
  store i8* null, i8** %8, align 8
  store i32 0, i32* %9, align 4
  %68 = call %struct.iri* @iri_dup(%struct.iri* %11)
  %69 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 2
  %70 = load i16, i16* %69, align 8
  %71 = and i16 %70, 1
  %72 = zext i16 %71 to i32
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %194, label %74

; <label>:74:                                     ; preds = %.lr.ph
  %75 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %76 = load i64, i64* %75, align 8
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %83

; <label>:78:                                     ; preds = %74
  %79 = load i64, i64* @total_downloaded_bytes, align 8
  %80 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 90
  %81 = load i64, i64* %80, align 8
  %82 = icmp sgt i64 %79, %81
  br i1 %82, label %.loopexit.loopexit, label %83

; <label>:83:                                     ; preds = %78, %74
  %84 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %85 = load %struct.url*, %struct.url** %84, align 8
  %86 = getelementptr inbounds %struct.url, %struct.url* %85, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = call %struct.url* @url_parse(i8* %87, i32* null, %struct.iri* %68, i1 zeroext true)
  %89 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %90 = load %struct.url*, %struct.url** %89, align 8
  %91 = call i8* @getproxy(%struct.url* %90)
  %92 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %93 = load i8, i8* %92, align 1
  %94 = trunc i8 %93 to i1
  br i1 %94, label %99, label %95

; <label>:95:                                     ; preds = %83
  %96 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 111
  %97 = load i8, i8* %96, align 2
  %98 = trunc i8 %97 to i1
  br i1 %98, label %99, label %142

; <label>:99:                                     ; preds = %95, %83
  %100 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %101 = load %struct.url*, %struct.url** %100, align 8
  %102 = getelementptr inbounds %struct.url, %struct.url* %101, i32 0, i32 1
  %103 = load i32, i32* %102, align 8
  %104 = icmp ne i32 %103, 2
  br i1 %104, label %105, label %112

; <label>:105:                                    ; preds = %99
  %106 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %107 = load %struct.url*, %struct.url** %106, align 8
  %108 = getelementptr inbounds %struct.url, %struct.url* %107, i32 0, i32 1
  %109 = load i32, i32* %108, align 8
  %110 = icmp ne i32 %109, 3
  %111 = icmp ne i8* %91, null
  %or.cond1 = or i1 %110, %111
  br i1 %or.cond1, label %113, label %142

; <label>:112:                                    ; preds = %99
  %.old = icmp ne i8* %91, null
  br i1 %.old, label %113, label %142

; <label>:113:                                    ; preds = %112, %105
  %114 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 44
  %115 = load i8, i8* %114, align 8
  %116 = trunc i8 %115 to i1
  %117 = zext i1 %116 to i32
  %118 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %119 = load %struct.url*, %struct.url** %118, align 8
  %120 = getelementptr inbounds %struct.url, %struct.url* %119, i32 0, i32 1
  %121 = load i32, i32* %120, align 8
  %122 = icmp eq i32 %121, 2
  br i1 %122, label %129, label %123

; <label>:123:                                    ; preds = %113
  %124 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %125 = load %struct.url*, %struct.url** %124, align 8
  %126 = getelementptr inbounds %struct.url, %struct.url* %125, i32 0, i32 1
  %127 = load i32, i32* %126, align 8
  %128 = icmp eq i32 %127, 3
  br i1 %128, label %129, label %131

; <label>:129:                                    ; preds = %123, %113
  %130 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 44
  store i8 1, i8* %130, align 8
  br label %131

; <label>:131:                                    ; preds = %129, %123
  %132 = icmp ne %struct.url* %88, null
  br i1 %132, label %136, label %133

; <label>:133:                                    ; preds = %131
  %134 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %135 = load %struct.url*, %struct.url** %134, align 8
  br label %136

; <label>:136:                                    ; preds = %131, %133
  %137 = phi %struct.url* [ %135, %133 ], [ %88, %131 ]
  %138 = call i32 @retrieve_tree(%struct.url* %137, %struct.iri* %68)
  %139 = icmp ne i32 %117, 0
  %140 = zext i1 %139 to i8
  %141 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 44
  store i8 %140, i8* %141, align 8
  br label %157

; <label>:142:                                    ; preds = %105, %112, %95
  %143 = icmp ne %struct.url* %88, null
  br i1 %143, label %147, label %144

; <label>:144:                                    ; preds = %142
  %145 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %146 = load %struct.url*, %struct.url** %145, align 8
  br label %147

; <label>:147:                                    ; preds = %142, %144
  %148 = phi %struct.url* [ %146, %144 ], [ %88, %142 ]
  %149 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.046, i32 0, i32 0
  %150 = load %struct.url*, %struct.url** %149, align 8
  %151 = getelementptr inbounds %struct.url, %struct.url* %150, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  %153 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %154 = load i8, i8* %153, align 1
  %155 = trunc i8 %154 to i1
  %156 = call i32 @retrieve_url(%struct.url* %148, i8* %152, i8** %7, i8** %8, i8* null, i32* %9, i1 zeroext %155, %struct.iri* %68, i1 zeroext true)
  br label %157

; <label>:157:                                    ; preds = %136, %147
  %.2 = phi i32 [ %138, %136 ], [ %156, %147 ]
  call void @free(i8* %91) #8
  %158 = icmp ne %struct.url* %88, null
  br i1 %158, label %159, label %160

; <label>:159:                                    ; preds = %157
  call void @url_free(%struct.url* %88)
  br label %160

; <label>:160:                                    ; preds = %159, %157
  %161 = load i8*, i8** %7, align 8
  %162 = icmp ne i8* %161, null
  br i1 %162, label %163, label %191

; <label>:163:                                    ; preds = %160
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 109
  %165 = load i8, i8* %164, align 8
  %166 = trunc i8 %165 to i1
  br i1 %166, label %167, label %191

; <label>:167:                                    ; preds = %163
  %168 = load i8*, i8** %7, align 8
  %169 = call zeroext i1 @file_exists_p(i8* %168)
  br i1 %169, label %170, label %191

; <label>:170:                                    ; preds = %167
  %171 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %172 = load i8, i8* %171, align 1
  %173 = trunc i8 %172 to i1
  br i1 %173, label %174, label %176

; <label>:174:                                    ; preds = %170
  %175 = getelementptr [62 x i8], [62 x i8]* @.str.16.1291, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %175)
  br label %176

; <label>:176:                                    ; preds = %170, %174
  %177 = getelementptr [14 x i8], [14 x i8]* @.str.17.1292, i32 0, i32 0
  %178 = call i8* @gettext(i8* %177) #8
  %179 = load i8*, i8** %7, align 8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %178, i8* %179)
  %180 = load i8*, i8** %7, align 8
  %181 = call i32 @unlink(i8* %180) #8
  %182 = icmp ne i32 %181, 0
  br i1 %182, label %183, label %188

; <label>:183:                                    ; preds = %176
  %184 = call i32* @__errno_location() #15
  %185 = load i32, i32* %184, align 4
  %186 = call i8* @strerror(i32 %185) #8
  %187 = getelementptr [12 x i8], [12 x i8]* @.str.18.1293, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %187, i8* %186)
  br label %188

; <label>:188:                                    ; preds = %183, %176
  %189 = load i32, i32* %9, align 4
  %190 = and i32 %189, -3
  store i32 %190, i32* %9, align 4
  br label %191

; <label>:191:                                    ; preds = %160, %163, %167, %188
  %192 = load i8*, i8** %8, align 8
  call void @free(i8* %192) #8
  store i8* null, i8** %8, align 8
  %193 = load i8*, i8** %7, align 8
  call void @free(i8* %193) #8
  store i8* null, i8** %7, align 8
  call void @iri_free(%struct.iri* %68)
  br label %194

; <label>:194:                                    ; preds = %.lr.ph, %191
  %.048 = phi %struct.urlpos* [ %.046, %191 ], [ %.046, %.lr.ph ]
  %.3 = phi i32 [ %.2, %191 ], [ %.1310, %.lr.ph ]
  %195 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.048, i32 0, i32 7
  %196 = load %struct.urlpos*, %struct.urlpos** %195, align 8
  %197 = load i32, i32* %2, align 4
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %2, align 4
  %199 = icmp ne %struct.urlpos* %196, null
  br i1 %199, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %78, %194
  %.4.ph = phi i32 [ %.3, %194 ], [ 43, %78 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %64
  %.4 = phi i32 [ %.02, %64 ], [ %.4.ph, %.loopexit.loopexit ]
  call void @free_urlpos(%struct.urlpos* %65)
  call void @iri_free(%struct.iri* %11)
  br label %200

; <label>:200:                                    ; preds = %31, %.loopexit, %20
  %.0 = phi i32 [ %.4, %.loopexit ], [ 18, %20 ], [ %32, %31 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_urlpos(%struct.urlpos*) #0 {
  %2 = icmp ne %struct.urlpos* %0, null
  br i1 %2, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %11
  %.01 = phi %struct.urlpos* [ %4, %11 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 335)
  %3 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01, i32 0, i32 7
  %4 = load %struct.urlpos*, %struct.urlpos** %3, align 8
  %5 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01, i32 0, i32 0
  %6 = load %struct.url*, %struct.url** %5, align 8
  %7 = icmp ne %struct.url* %6, null
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %.lr.ph
  %9 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01, i32 0, i32 0
  %10 = load %struct.url*, %struct.url** %9, align 8
  call void @url_free(%struct.url* %10)
  br label %11

; <label>:11:                                     ; preds = %.lr.ph, %8
  %12 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  call void @free(i8* %13) #8
  %14 = getelementptr inbounds %struct.urlpos, %struct.urlpos* %.01, i32 0, i32 1
  store i8* null, i8** %14, align 8
  %15 = bitcast %struct.urlpos* %.01 to i8*
  call void @free(i8* %15) #8
  %16 = icmp ne %struct.urlpos* %4, null
  br i1 %16, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %11
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @printwhat(i32, i32) #0 {
  %3 = icmp eq i32 %0, %1
  br i1 %3, label %4, label %7

; <label>:4:                                      ; preds = %2
  %5 = getelementptr [13 x i8], [13 x i8]* @.str.19.1298, i32 0, i32 0
  %6 = call i8* @gettext(i8* %5) #8, !track !664
  br label %10

; <label>:7:                                      ; preds = %2
  %8 = getelementptr [12 x i8], [12 x i8]* @.str.20.1299, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8, !track !665
  br label %10

; <label>:10:                                     ; preds = %7, %4
  %11 = phi i8* [ %6, %4 ], [ %9, %7 ]
  call void @logputs(i32 0, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sleep_between_retrievals(i32) #0 {
  %2 = load i8, i8* @sleep_between_retrievals.first_retrieval, align 1
  %3 = trunc i8 %2 to i1
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  store i8 0, i8* @sleep_between_retrievals.first_retrieval, align 1
  br label %47

; <label>:5:                                      ; preds = %1
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 87
  %7 = load double, double* %6, align 8
  %8 = fcmp une double %7, 0.000000e+00
  %9 = icmp sgt i32 %0, 1
  %or.cond = and i1 %8, %9
  br i1 %or.cond, label %10, label %21

; <label>:10:                                     ; preds = %5
  %11 = sitofp i32 %0 to double
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 87
  %13 = load double, double* %12, align 8
  %14 = fcmp ole double %11, %13
  br i1 %14, label %15, label %18

; <label>:15:                                     ; preds = %10
  %16 = sub nsw i32 %0, 1
  %17 = sitofp i32 %16 to double
  call void @xsleep(double %17)
  br label %47

; <label>:18:                                     ; preds = %10
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 87
  %20 = load double, double* %19, align 8
  call void @xsleep(double %20)
  br label %47

; <label>:21:                                     ; preds = %5
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 86
  %23 = load double, double* %22, align 8
  %24 = fcmp une double %23, 0.000000e+00
  br i1 %24, label %25, label %47

; <label>:25:                                     ; preds = %21
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 85
  %27 = load i8, i8* %26, align 8
  %28 = trunc i8 %27 to i1
  %.not = xor i1 %28, true
  %29 = icmp sgt i32 %0, 1
  %or.cond1 = or i1 %.not, %29
  br i1 %or.cond1, label %30, label %33

; <label>:30:                                     ; preds = %25
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 86
  %32 = load double, double* %31, align 8
  call void @xsleep(double %32)
  br label %47

; <label>:33:                                     ; preds = %25
  %34 = call double @random_float()
  %35 = fadd double 5.000000e-01, %34
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 86
  %37 = load double, double* %36, align 8
  %38 = fmul double %35, %37
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %40 = load i8, i8* %39, align 1
  %41 = trunc i8 %40 to i1
  br i1 %41, label %42, label %46

; <label>:42:                                     ; preds = %33
  %43 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 86
  %44 = load double, double* %43, align 8
  %45 = getelementptr [43 x i8], [43 x i8]* @.str.21.1302, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %45, double %44, double %38)
  br label %46

; <label>:46:                                     ; preds = %33, %42
  call void @xsleep(double %38)
  br label %47

; <label>:47:                                     ; preds = %21, %46, %30, %15, %18, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rotate_backups(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !666
  %3 = call i64 @strlen(i8* %0) #14
  %4 = add i64 %3, 2
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = call i32 @numdigit(i64 %7)
  %9 = sext i32 %8 to i64
  %10 = add i64 %4, %9
  %11 = add i64 %10, 0
  %12 = trunc i64 %11 to i32
  %13 = sext i32 %12 to i64
  %14 = alloca i8, i64 %13, align 16, !track !667
  %15 = sext i32 %12 to i64
  %16 = alloca i8, i64 %15, align 16, !track !668
  %17 = call i32 @stat(i8* %0, %struct.stat* %2) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %26

; <label>:19:                                     ; preds = %1
  %20 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 61440
  %23 = icmp eq i32 %22, 32768
  %24 = zext i1 %23 to i32
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %44, label %26

; <label>:26:                                     ; preds = %19, %1
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %28, 1
  br i1 %29, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %26
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i32 [ %38, %.lr.ph ], [ %28, %.lr.ph.preheader ]
  call void @unroll_loop(i32 336)
  %30 = getelementptr [7 x i8], [7 x i8]* @.str.22.1305, i32 0, i32 0
  %31 = getelementptr [2 x i8], [2 x i8]* @.str.23.1306, i32 0, i32 0
  %32 = call i32 (i8*, i8*, ...) @sprintf(i8* %16, i8* %30, i8* %0, i8* %31, i32 %.01) #8
  %33 = sub nsw i32 %.01, 1
  %34 = getelementptr [7 x i8], [7 x i8]* @.str.22.1305, i32 0, i32 0
  %35 = getelementptr [2 x i8], [2 x i8]* @.str.23.1306, i32 0, i32 0
  %36 = call i32 (i8*, i8*, ...) @sprintf(i8* %14, i8* %34, i8* %0, i8* %35, i32 %33) #8
  %37 = call i32 @rename(i8* %14, i8* %16) #8
  %38 = add nsw i32 %.01, -1
  %39 = icmp sgt i32 %38, 1
  br i1 %39, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %26
  %40 = getelementptr [7 x i8], [7 x i8]* @.str.22.1305, i32 0, i32 0
  %41 = getelementptr [2 x i8], [2 x i8]* @.str.23.1306, i32 0, i32 0
  %42 = call i32 (i8*, i8*, ...) @sprintf(i8* %16, i8* %40, i8* %0, i8* %41, i32 1) #8
  %43 = call i32 @rename(i8* %0, i8* %16) #8
  br label %44

; <label>:44:                                     ; preds = %19, %._crit_edge
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @url_uses_proxy(%struct.url*) #0 {
  %2 = icmp ne %struct.url* %0, null
  br i1 %2, label %3, label %8

; <label>:3:                                      ; preds = %1
  %4 = call i8* @getproxy(%struct.url* %0)
  %5 = icmp ne i8* %4, null
  %6 = zext i1 %5 to i8
  call void @free(i8* %4) #8
  %7 = trunc i8 %6 to i1
  br label %8

; <label>:8:                                      ; preds = %1, %3
  %.0 = phi i1 [ %7, %3 ], [ false, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_local_file(i8**, i8*) #0 {
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %4 = load i8*, i8** %3, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %12

; <label>:6:                                      ; preds = %2
  %7 = load i8, i8* @output_stream_regular, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %13

; <label>:9:                                      ; preds = %6
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %11 = load i8*, i8** %10, align 8
  store i8* %11, i8** %0, align 8
  br label %13

; <label>:12:                                     ; preds = %2
  store i8* %1, i8** %0, align 8
  br label %13

; <label>:13:                                     ; preds = %6, %9, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @input_file_url(i8*) #0 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %9

; <label>:3:                                      ; preds = %1
  %4 = call zeroext i1 @url_has_scheme(i8* %0)
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %3
  %6 = load i8, i8* @input_file_url.first, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %5
  store i8 0, i8* @input_file_url.first, align 1
  br label %9

; <label>:9:                                      ; preds = %1, %3, %5, %8
  %.0 = phi i1 [ true, %8 ], [ false, %5 ], [ false, %3 ], [ false, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @spider_cleanup() #0 {
  %1 = load %struct.hash_table*, %struct.hash_table** @nonexisting_urls_set, align 8
  %2 = icmp ne %struct.hash_table* %1, null
  br i1 %2, label %3, label %5

; <label>:3:                                      ; preds = %0
  %4 = load %struct.hash_table*, %struct.hash_table** @nonexisting_urls_set, align 8
  call void @string_set_free(%struct.hash_table* %4)
  br label %5

; <label>:5:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @nonexisting_url(i8*) #0 {
  %2 = call zeroext i1 @is_robots_txt_url(i8* %0)
  br i1 %2, label %10, label %3

; <label>:3:                                      ; preds = %1
  %4 = load %struct.hash_table*, %struct.hash_table** @nonexisting_urls_set, align 8
  %5 = icmp ne %struct.hash_table* %4, null
  br i1 %5, label %8, label %6

; <label>:6:                                      ; preds = %3
  %7 = call %struct.hash_table* @make_string_hash_table(i32 0)
  store %struct.hash_table* %7, %struct.hash_table** @nonexisting_urls_set, align 8
  br label %8

; <label>:8:                                      ; preds = %6, %3
  %9 = load %struct.hash_table*, %struct.hash_table** @nonexisting_urls_set, align 8
  call void @string_set_add(%struct.hash_table* %9, i8* %0)
  br label %10

; <label>:10:                                     ; preds = %1, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_broken_links() #0 {
  %1 = alloca %struct.hash_table_iterator, align 8, !track !669
  %2 = load %struct.hash_table*, %struct.hash_table** @nonexisting_urls_set, align 8
  %3 = icmp ne %struct.hash_table* %2, null
  br i1 %3, label %7, label %4

; <label>:4:                                      ; preds = %0
  %5 = getelementptr [25 x i8], [25 x i8]* @.str.1317, i32 0, i32 0
  %6 = call i8* @gettext(i8* %5) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %6)
  br label %24

; <label>:7:                                      ; preds = %0
  %8 = load %struct.hash_table*, %struct.hash_table** @nonexisting_urls_set, align 8
  %9 = call i32 @hash_table_count(%struct.hash_table* %8)
  %10 = sext i32 %9 to i64
  %11 = getelementptr [24 x i8], [24 x i8]* @.str.1.1318, i32 0, i32 0
  %12 = getelementptr [25 x i8], [25 x i8]* @.str.2.1319, i32 0, i32 0
  %13 = call i8* @ngettext(i8* %11, i8* %12, i64 %10) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %13, i32 %9)
  %14 = load %struct.hash_table*, %struct.hash_table** @nonexisting_urls_set, align 8
  call void @hash_table_iterate(%struct.hash_table* %14, %struct.hash_table_iterator* %1)
  %15 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %7
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 337)
  %17 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %1, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr [4 x i8], [4 x i8]* @.str.3.1320, i32 0, i32 0
  %20 = call i8* @gettext(i8* %19) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %20, i8* %18)
  %21 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %1)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %7
  %23 = getelementptr [2 x i8], [2 x i8]* @.str.4.1321, i32 0, i32 0
  call void @logputs(i32 1, i8* %23)
  br label %24

; <label>:24:                                     ; preds = %._crit_edge, %4
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @ngettext(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @url_unescape(i8*) #0 {
  call void @url_unescape_1(i8* %0, i8 zeroext 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @url_unescape_1(i8*, i8 zeroext) #0 {
  %3 = load i8, i8* %0, align 1
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %73
  %.05 = phi i8* [ %74, %73 ], [ %0, %.lr.ph.preheader ]
  %.012 = phi i8* [ %75, %73 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 338)
  %5 = load i8, i8* %.05, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp ne i32 %6, 37
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %58, %10, %14, %18, %23, %.lr.ph
  %9 = load i8, i8* %.05, align 1
  store i8 %9, i8* %.012, align 1
  br label %73

; <label>:10:                                     ; preds = %.lr.ph
  %11 = getelementptr inbounds i8, i8* %.05, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %14, label %8

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds i8, i8* %.05, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %18, label %8

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds i8, i8* %.05, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = call zeroext i1 @c_isxdigit(i32 %21)
  br i1 %22, label %23, label %8

; <label>:23:                                     ; preds = %18
  %24 = getelementptr inbounds i8, i8* %.05, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = call zeroext i1 @c_isxdigit(i32 %26)
  br i1 %27, label %28, label %8

; <label>:28:                                     ; preds = %23
  %29 = getelementptr inbounds i8, i8* %.05, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp slt i32 %31, 65
  %33 = getelementptr inbounds i8, i8* %.05, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  br i1 %32, label %36, label %38

; <label>:36:                                     ; preds = %28
  %37 = sub nsw i32 %35, 48
  br label %42

; <label>:38:                                     ; preds = %28
  %39 = call i32 @c_toupper(i32 %35)
  %40 = sub nsw i32 %39, 65
  %41 = add nsw i32 %40, 10
  br label %42

; <label>:42:                                     ; preds = %38, %36
  %43 = phi i32 [ %37, %36 ], [ %41, %38 ]
  %44 = shl i32 %43, 4
  %45 = getelementptr inbounds i8, i8* %.05, i64 2
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp slt i32 %47, 65
  %49 = getelementptr inbounds i8, i8* %.05, i64 2
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  br i1 %48, label %52, label %54

; <label>:52:                                     ; preds = %42
  %53 = sub nsw i32 %51, 48
  br label %58

; <label>:54:                                     ; preds = %42
  %55 = call i32 @c_toupper(i32 %51)
  %56 = sub nsw i32 %55, 65
  %57 = add nsw i32 %56, 10
  br label %58

; <label>:58:                                     ; preds = %54, %52
  %59 = phi i32 [ %53, %52 ], [ %57, %54 ]
  %60 = add nsw i32 %44, %59
  %61 = trunc i32 %60 to i8
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [256 x i8], [256 x i8]* @urlchr_table, i64 0, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = zext i8 %1 to i32
  %67 = and i32 %65, %66
  %68 = icmp ne i32 %67, 0
  %69 = sext i8 %61 to i32
  %70 = icmp eq i32 %69, 0
  %or.cond = or i1 %68, %70
  br i1 %or.cond, label %8, label %71

; <label>:71:                                     ; preds = %58
  store i8 %61, i8* %.012, align 1
  %72 = getelementptr inbounds i8, i8* %.05, i64 2
  br label %73

; <label>:73:                                     ; preds = %8, %71
  %.1 = phi i8* [ %.05, %8 ], [ %72, %71 ]
  %74 = getelementptr inbounds i8, i8* %.1, i32 1
  %75 = getelementptr inbounds i8, i8* %.012, i32 1
  %76 = load i8, i8* %74, align 1
  %77 = icmp ne i8 %76, 0
  br i1 %77, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %73
  %.01.lcssa.ph = phi i8* [ %75, %73 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.01.lcssa = phi i8* [ %0, %2 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.01.lcssa, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @url_unescape_except_reserved(i8*) #0 {
  call void @url_unescape_1(i8* %0, i8 zeroext 1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @url_escape(i8*) #0 {
  %2 = call i8* @url_escape_1(i8* %0, i8 zeroext 2, i1 zeroext false)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @url_escape_1(i8*, i8 zeroext, i1 zeroext) #7 {
  %4 = zext i1 %2 to i8
  %5 = load i8, i8* %0, align 1
  %6 = icmp ne i8 %5, 0
  br i1 %6, label %.lr.ph11.preheader, label %._crit_edge12

.lr.ph11.preheader:                               ; preds = %3
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %.lr.ph11
  %.019 = phi i32 [ %spec.select, %.lr.ph11 ], [ 0, %.lr.ph11.preheader ]
  %.048 = phi i8* [ %16, %.lr.ph11 ], [ %0, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 339)
  %7 = load i8, i8* %.048, align 1
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds [256 x i8], [256 x i8]* @urlchr_table, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = zext i8 %1 to i32
  %13 = and i32 %11, %12
  %14 = icmp ne i32 %13, 0
  %15 = add nsw i32 %.019, 2
  %spec.select = select i1 %14, i32 %15, i32 %.019
  %16 = getelementptr inbounds i8, i8* %.048, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %.lr.ph11, label %._crit_edge12.loopexit

._crit_edge12.loopexit:                           ; preds = %.lr.ph11
  %.04.lcssa.ph = phi i8* [ %16, %.lr.ph11 ]
  %.01.lcssa.ph = phi i32 [ %spec.select, %.lr.ph11 ]
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %3
  %.04.lcssa = phi i8* [ %0, %3 ], [ %.04.lcssa.ph, %._crit_edge12.loopexit ]
  %.01.lcssa = phi i32 [ 0, %3 ], [ %.01.lcssa.ph, %._crit_edge12.loopexit ]
  %19 = icmp ne i32 %.01.lcssa, 0
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %._crit_edge12
  %21 = trunc i8 %4 to i1
  br i1 %21, label %70, label %22

; <label>:22:                                     ; preds = %20
  %23 = call noalias i8* @xstrdup(i8* %0)
  br label %70

; <label>:24:                                     ; preds = %._crit_edge12
  %25 = ptrtoint i8* %.04.lcssa to i64
  %26 = ptrtoint i8* %0 to i64
  %27 = sub i64 %25, %26
  %28 = sext i32 %.01.lcssa to i64
  %29 = add nsw i64 %27, %28
  %30 = trunc i64 %29 to i32
  %31 = add nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = call noalias i8* @xmalloc(i64 %32)
  %34 = load i8, i8* %0, align 1
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %24
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %67
  %.027 = phi i8* [ %.13, %67 ], [ %33, %.lr.ph.preheader ]
  %.156 = phi i8* [ %44, %67 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 340)
  %36 = load i8, i8* %.156, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* @urlchr_table, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = zext i8 %1 to i32
  %42 = and i32 %40, %41
  %43 = icmp ne i32 %42, 0
  %44 = getelementptr inbounds i8, i8* %.156, i32 1
  %45 = load i8, i8* %.156, align 1
  %46 = getelementptr inbounds i8, i8* %.027, i32 1
  br i1 %43, label %47, label %66

; <label>:47:                                     ; preds = %.lr.ph
  store i8 37, i8* %.027, align 1
  %48 = zext i8 %45 to i32
  %49 = ashr i32 %48, 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = add nsw i32 %53, 0
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds i8, i8* %46, i32 1
  store i8 %55, i8* %46, align 1
  %57 = zext i8 %45 to i32
  %58 = and i32 %57, 15
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = add nsw i32 %62, 0
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %56, i32 1
  store i8 %64, i8* %56, align 1
  br label %67

; <label>:66:                                     ; preds = %.lr.ph
  store i8 %45, i8* %.027, align 1
  br label %67

; <label>:67:                                     ; preds = %66, %47
  %.13 = phi i8* [ %65, %47 ], [ %46, %66 ]
  %68 = load i8, i8* %44, align 1
  %69 = icmp ne i8 %68, 0
  br i1 %69, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %67
  %.02.lcssa.ph = phi i8* [ %.13, %67 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %24
  %.02.lcssa = phi i8* [ %33, %24 ], [ %.02.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.02.lcssa, align 1
  br label %70

; <label>:70:                                     ; preds = %22, %20, %._crit_edge
  %.0 = phi i8* [ %33, %._crit_edge ], [ %23, %22 ], [ %0, %20 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @url_escape_unsafe_and_reserved(i8*) #0 {
  %2 = call i8* @url_escape_1(i8* %0, i8 zeroext 3, i1 zeroext false)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @url_scheme(i8*) #0 {
  %2 = getelementptr [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %22
  %indvars.iv = phi i64 [ %indvars.iv.next, %22 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 341)
  %5 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %indvars.iv
  %6 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %5, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %indvars.iv
  %9 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %8, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = call i64 @strlen(i8* %10) #14
  %12 = call i32 @strncasecmp(i8* %0, i8* %7, i64 %11) #14
  %13 = icmp eq i32 0, %12
  br i1 %13, label %14, label %22

; <label>:14:                                     ; preds = %.lr.ph
  %.01.lcssa2.wide = phi i64 [ %indvars.iv, %.lr.ph ]
  %15 = trunc i64 %.01.lcssa2.wide to i32
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %16
  %18 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %17, i32 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 1
  %21 = icmp ne i32 %20, 0
  %. = select i1 %21, i32 4, i32 %15
  br label %._crit_edge

; <label>:22:                                     ; preds = %.lr.ph
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %23 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %indvars.iv.next
  %24 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %23, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %22
  %.0.ph = phi i32 [ 4, %22 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1, %14
  %.0 = phi i32 [ %., %14 ], [ 4, %1 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @url_has_scheme(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %4, label %41

; <label>:4:                                      ; preds = %1
  %5 = load i8, i8* %0, align 1
  %6 = sext i8 %5 to i32
  %7 = call zeroext i1 @c_isalnum(i32 %6)
  br i1 %7, label %16, label %8

; <label>:8:                                      ; preds = %4
  %9 = load i8, i8* %0, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, 45
  br i1 %11, label %16, label %12

; <label>:12:                                     ; preds = %8
  %13 = load i8, i8* %0, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %14, 43
  br i1 %15, label %16, label %41

; <label>:16:                                     ; preds = %12, %8, %4
  %17 = getelementptr inbounds i8, i8* %0, i32 1
  br label %18

; <label>:18:                                     ; preds = %34, %16
  %.01 = phi i8* [ %17, %16 ], [ %36, %34 ]
  call void @unroll_loop(i32 342)
  %19 = load i8, i8* %.01, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %34

; <label>:22:                                     ; preds = %18
  %23 = load i8, i8* %.01, align 1
  %24 = sext i8 %23 to i32
  %25 = call zeroext i1 @c_isalnum(i32 %24)
  br i1 %25, label %34, label %26

; <label>:26:                                     ; preds = %22
  %27 = load i8, i8* %.01, align 1
  %28 = sext i8 %27 to i32
  %29 = icmp eq i32 %28, 45
  br i1 %29, label %34, label %30

; <label>:30:                                     ; preds = %26
  %31 = load i8, i8* %.01, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 43
  br label %34

; <label>:34:                                     ; preds = %22, %26, %30, %18
  %35 = phi i1 [ false, %18 ], [ true, %26 ], [ true, %22 ], [ %33, %30 ]
  %36 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %35, label %18, label %37

; <label>:37:                                     ; preds = %34
  %.01.lcssa = phi i8* [ %.01, %34 ]
  %38 = load i8, i8* %.01.lcssa, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp eq i32 %39, 58
  br label %41

; <label>:41:                                     ; preds = %1, %12, %37
  %.0 = phi i1 [ %40, %37 ], [ false, %12 ], [ false, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @url_valid_scheme(i8*) #0 {
  %2 = call i32 @url_scheme(i8* %0)
  %3 = icmp ne i32 %2, 4
  ret i1 %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @scheme_default_port(i32) #0 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %2
  %4 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %3, i32 0, i32 2
  %5 = load i32, i32* %4, align 8
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @scheme_disable(i32) #0 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %2
  %4 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %3, i32 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 1
  store i32 %6, i32* %4, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @rewrite_shorthand_url(i8*) #7 {
  %2 = call i32 @url_scheme(i8* %0)
  %3 = icmp ne i32 %2, 4
  br i1 %3, label %63, label %4

; <label>:4:                                      ; preds = %1
  %5 = getelementptr [3 x i8], [3 x i8]* @.str.1349, i32 0, i32 0
  %6 = call i8* @strpbrk(i8* %0, i8* %5) #14, !track !670
  %7 = icmp eq i8* %6, %0
  br i1 %7, label %63, label %8

; <label>:8:                                      ; preds = %4
  %magicptr = ptrtoint i8* %6 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %60, label %9

; <label>:9:                                      ; preds = %8
  %10 = getelementptr inbounds i8, i8* %6, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 58
  br i1 %13, label %14, label %24

; <label>:14:                                     ; preds = %9
  %15 = getelementptr inbounds i8, i8* %6, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 47
  br i1 %18, label %19, label %24

; <label>:19:                                     ; preds = %14
  %20 = getelementptr inbounds i8, i8* %6, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp eq i32 %22, 47
  br i1 %23, label %63, label %24

; <label>:24:                                     ; preds = %19, %14, %9
  %25 = icmp ne i8* %6, null
  br i1 %25, label %26, label %60

; <label>:26:                                     ; preds = %24
  %27 = load i8, i8* %6, align 1
  %28 = sext i8 %27 to i32
  %29 = icmp eq i32 %28, 58
  br i1 %29, label %30, label %60

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds i8, i8* %6, i64 1
  %32 = getelementptr [11 x i8], [11 x i8]* @.str.1.1350, i32 0, i32 0
  %33 = call i64 @strspn(i8* %31, i8* %32) #14
  %34 = trunc i64 %33 to i32
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %50

; <label>:36:                                     ; preds = %30
  %37 = add nsw i32 1, %34
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %6, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 47
  br i1 %42, label %60, label %43

; <label>:43:                                     ; preds = %36
  %44 = add nsw i32 1, %34
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %6, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %60, label %50

; <label>:50:                                     ; preds = %43, %30
  %51 = getelementptr [9 x i8], [9 x i8]* @.str.2.1351, i32 0, i32 0
  %52 = call i8* (i8*, ...) @aprintf(i8* %51, i8* %0)
  %53 = icmp ne i8* %52, null
  br i1 %53, label %54, label %63

; <label>:54:                                     ; preds = %50
  %55 = ptrtoint i8* %6 to i64
  %56 = ptrtoint i8* %0 to i64
  %57 = sub i64 %55, %56
  %58 = add nsw i64 6, %57
  %59 = getelementptr inbounds i8, i8* %52, i64 %58
  store i8 47, i8* %59, align 1
  br label %63

; <label>:60:                                     ; preds = %8, %24, %26, %36, %43
  %61 = getelementptr [10 x i8], [10 x i8]* @.str.3.1352, i32 0, i32 0
  %62 = call i8* (i8*, ...) @aprintf(i8* %61, i8* %0)
  br label %63

; <label>:63:                                     ; preds = %60, %54, %50, %19, %4, %1
  %.0 = phi i8* [ null, %1 ], [ null, %4 ], [ null, %19 ], [ %62, %60 ], [ %52, %54 ], [ %52, %50 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.url* @url_parse(i8*, i32*, %struct.iri*, i1 zeroext) #7 {
  %5 = alloca i8*, align 8, !track !671
  %6 = alloca i8*, align 8, !track !672
  %7 = alloca i8*, align 8, !track !673
  %8 = zext i1 %3 to i8
  store i8* null, i8** %5, align 8
  store i8* null, i8** %6, align 8
  %9 = call i32 @url_scheme(i8* %0)
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %4
  %12 = call zeroext i1 @url_has_scheme(i8* %0)
  %. = select i1 %12, i32 1, i32 2
  br label %252

; <label>:13:                                     ; preds = %4
  %14 = icmp ne %struct.iri* %2, null
  br i1 %14, label %15, label %47

; <label>:15:                                     ; preds = %13
  %16 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 3
  %17 = load i8, i8* %16, align 8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %47

; <label>:19:                                     ; preds = %15
  store i8* null, i8** %7, align 8
  %20 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 2
  %25 = load i8*, i8** %24, align 8
  br label %26

; <label>:26:                                     ; preds = %19, %23
  %27 = phi i8* [ %25, %23 ], [ %0, %19 ]
  %28 = call zeroext i1 @remote_to_utf8(%struct.iri* %2, i8* %27, i8** %7)
  %29 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 3
  %30 = zext i1 %28 to i8
  store i8 %30, i8* %29, align 8
  %31 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 3
  %32 = load i8, i8* %31, align 8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %35, label %34

; <label>:34:                                     ; preds = %26
  store i8* null, i8** %7, align 8
  br label %47

; <label>:35:                                     ; preds = %26
  %36 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 2
  %37 = load i8*, i8** %36, align 8
  call void @free(i8* %37) #8
  %38 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 2
  store i8* null, i8** %38, align 8
  %39 = call noalias i8* @xstrdup(i8* %0)
  %40 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 2
  store i8* %39, i8** %40, align 8
  %41 = load i8*, i8** %7, align 8
  %42 = call i8* @reencode_escapes(i8* %41)
  %43 = load i8*, i8** %7, align 8
  %44 = icmp ne i8* %42, %43
  br i1 %44, label %45, label %47

; <label>:45:                                     ; preds = %35
  %46 = load i8*, i8** %7, align 8
  call void @free(i8* %46) #8
  store i8* null, i8** %7, align 8
  br label %47

; <label>:47:                                     ; preds = %34, %45, %35, %15, %13
  %.16 = phi i8 [ %8, %15 ], [ %8, %13 ], [ %8, %34 ], [ 0, %45 ], [ 0, %35 ]
  %.14 = phi i8* [ %0, %15 ], [ %0, %13 ], [ %0, %34 ], [ %42, %45 ], [ %42, %35 ]
  %48 = trunc i8 %.16 to i1
  br i1 %48, label %49, label %51

; <label>:49:                                     ; preds = %47
  %50 = call i8* @reencode_escapes(i8* %0)
  br label %51

; <label>:51:                                     ; preds = %49, %47
  %.2 = phi i8* [ %50, %49 ], [ %.14, %47 ]
  %52 = zext i32 %9 to i64
  %53 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %52
  %54 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %53, i32 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = call i64 @strlen(i8* %55) #14
  %57 = getelementptr inbounds i8, i8* %.2, i64 %56
  %58 = call i8* @url_skip_credentials(i8* %57)
  %59 = call i8* @init_seps(i32 %9)
  %60 = load i8, i8* %58, align 1
  %61 = sext i8 %60 to i32
  %62 = icmp eq i32 %61, 91
  br i1 %62, label %63, label %75

; <label>:63:                                     ; preds = %51
  %64 = getelementptr inbounds i8, i8* %58, i64 1
  %65 = call i8* @strchr(i8* %64, i32 93) #14, !track !674
  %66 = icmp ne i8* %65, null
  br i1 %66, label %67, label %252

; <label>:67:                                     ; preds = %63
  %68 = call zeroext i1 @is_valid_ipv6_address(i8* %64, i8* %65)
  br i1 %68, label %69, label %252

; <label>:69:                                     ; preds = %67
  %70 = getelementptr inbounds i8, i8* %65, i64 1
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = call i8* @strchr(i8* %59, i32 %72) #14
  %74 = icmp ne i8* %73, null
  br i1 %74, label %77, label %252

; <label>:75:                                     ; preds = %51
  %76 = call i8* @strpbrk_or_eos(i8* %58, i8* %59)
  br label %77

; <label>:77:                                     ; preds = %69, %75
  %.028 = phi i8* [ %76, %75 ], [ %65, %69 ]
  %.027 = phi i8* [ %58, %75 ], [ %64, %69 ]
  %.010 = phi i8* [ %76, %75 ], [ %70, %69 ]
  %78 = getelementptr inbounds i8, i8* %59, i32 1
  %79 = icmp eq i8* %.027, %.028
  br i1 %79, label %252, label %80

; <label>:80:                                     ; preds = %77
  %81 = call i32 @scheme_default_port(i32 %9)
  %82 = load i8, i8* %.010, align 1
  %83 = sext i8 %82 to i32
  %84 = icmp eq i32 %83, 58
  br i1 %84, label %85, label %._crit_edge

; <label>:85:                                     ; preds = %80
  %86 = getelementptr inbounds i8, i8* %.010, i32 1
  %87 = call i8* @strpbrk_or_eos(i8* %86, i8* %78)
  %88 = icmp ne i8* %86, %87
  br i1 %88, label %89, label %._crit_edge

; <label>:89:                                     ; preds = %85
  %90 = icmp ult i8* %86, %87
  br i1 %90, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %89
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %101
  %.0138 = phi i8* [ %102, %101 ], [ %86, %.lr.ph.preheader ]
  %.0737 = phi i32 [ %99, %101 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 343)
  %91 = load i8, i8* %.0138, align 1
  %92 = sext i8 %91 to i32
  %93 = call zeroext i1 @c_isdigit(i32 %92)
  br i1 %93, label %94, label %.loopexit

; <label>:94:                                     ; preds = %.lr.ph
  %95 = mul nsw i32 10, %.0737
  %96 = load i8, i8* %.0138, align 1
  %97 = sext i8 %96 to i32
  %98 = sub nsw i32 %97, 48
  %99 = add nsw i32 %95, %98
  %100 = icmp sgt i32 %99, 65535
  br i1 %100, label %.loopexit, label %101

; <label>:101:                                    ; preds = %94
  %102 = getelementptr inbounds i8, i8* %.0138, i32 1
  %103 = icmp ult i8* %102, %87
  br i1 %103, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %101
  %.111.ph = phi i8* [ %87, %101 ]
  %.29.ph = phi i32 [ %99, %101 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %85, %89, %80
  %.111 = phi i8* [ %.010, %80 ], [ %87, %89 ], [ %87, %85 ], [ %.111.ph, %._crit_edge.loopexit ]
  %.29 = phi i32 [ %81, %80 ], [ %81, %85 ], [ 0, %89 ], [ %.29.ph, %._crit_edge.loopexit ]
  %104 = getelementptr inbounds i8, i8* %78, i32 1
  %105 = load i8, i8* %.111, align 1
  %106 = sext i8 %105 to i32
  %107 = icmp eq i32 %106, 47
  br i1 %107, label %108, label %111

; <label>:108:                                    ; preds = %._crit_edge
  %109 = getelementptr inbounds i8, i8* %.111, i32 1
  %110 = call i8* @strpbrk_or_eos(i8* %109, i8* %104)
  br label %111

; <label>:111:                                    ; preds = %108, %._crit_edge
  %.030 = phi i8* [ %110, %108 ], [ null, %._crit_edge ]
  %.029 = phi i8* [ %109, %108 ], [ null, %._crit_edge ]
  %.212 = phi i8* [ %110, %108 ], [ %.111, %._crit_edge ]
  %112 = getelementptr inbounds i8, i8* %104, i32 1
  %113 = zext i32 %9 to i64
  %114 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %113
  %115 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %114, i32 0, i32 3
  %116 = load i32, i32* %115, align 4
  %117 = and i32 %116, 2
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %128

; <label>:119:                                    ; preds = %111
  %120 = load i8, i8* %.212, align 1
  %121 = sext i8 %120 to i32
  %122 = icmp eq i32 %121, 59
  br i1 %122, label %123, label %126

; <label>:123:                                    ; preds = %119
  %124 = getelementptr inbounds i8, i8* %.212, i32 1
  %125 = call i8* @strpbrk_or_eos(i8* %124, i8* %112)
  br label %126

; <label>:126:                                    ; preds = %123, %119
  %.033 = phi i8* [ %125, %123 ], [ null, %119 ]
  %.031 = phi i8* [ %124, %123 ], [ null, %119 ]
  %.313 = phi i8* [ %125, %123 ], [ %.212, %119 ]
  %127 = getelementptr inbounds i8, i8* %112, i32 1
  br label %128

; <label>:128:                                    ; preds = %126, %111
  %.134 = phi i8* [ %.033, %126 ], [ null, %111 ]
  %.132 = phi i8* [ %.031, %126 ], [ null, %111 ]
  %.021 = phi i8* [ %127, %126 ], [ %112, %111 ]
  %.4 = phi i8* [ %.313, %126 ], [ %.212, %111 ]
  %129 = zext i32 %9 to i64
  %130 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %129
  %131 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %130, i32 0, i32 3
  %132 = load i32, i32* %131, align 4
  %133 = and i32 %132, 4
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %135, label %144

; <label>:135:                                    ; preds = %128
  %136 = load i8, i8* %.4, align 1
  %137 = sext i8 %136 to i32
  %138 = icmp eq i32 %137, 63
  br i1 %138, label %139, label %142

; <label>:139:                                    ; preds = %135
  %140 = getelementptr inbounds i8, i8* %.4, i32 1
  %141 = call i8* @strpbrk_or_eos(i8* %140, i8* %.021)
  br label %142

; <label>:142:                                    ; preds = %139, %135
  %.025 = phi i8* [ %140, %139 ], [ null, %135 ]
  %.023 = phi i8* [ %141, %139 ], [ null, %135 ]
  %.5 = phi i8* [ %141, %139 ], [ %.4, %135 ]
  %143 = getelementptr inbounds i8, i8* %.021, i32 1
  br label %144

; <label>:144:                                    ; preds = %142, %128
  %.126 = phi i8* [ %.025, %142 ], [ null, %128 ]
  %.124 = phi i8* [ %.023, %142 ], [ null, %128 ]
  %.122 = phi i8* [ %143, %142 ], [ %.021, %128 ]
  %.6 = phi i8* [ %.5, %142 ], [ %.4, %128 ]
  %145 = zext i32 %9 to i64
  %146 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %145
  %147 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %146, i32 0, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = and i32 %148, 8
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %151, label %160

; <label>:151:                                    ; preds = %144
  %152 = load i8, i8* %.6, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp eq i32 %153, 35
  br i1 %154, label %155, label %158

; <label>:155:                                    ; preds = %151
  %156 = getelementptr inbounds i8, i8* %.6, i32 1
  %157 = call i8* @strpbrk_or_eos(i8* %156, i8* %.122)
  br label %158

; <label>:158:                                    ; preds = %155, %151
  %.019 = phi i8* [ %156, %155 ], [ null, %151 ]
  %.014 = phi i8* [ %157, %155 ], [ null, %151 ]
  %159 = getelementptr inbounds i8, i8* %.122, i32 1
  br label %160

; <label>:160:                                    ; preds = %158, %144
  %.120 = phi i8* [ %.019, %158 ], [ null, %144 ]
  %.115 = phi i8* [ %.014, %158 ], [ null, %144 ]
  %161 = icmp ne i8* %57, %58
  br i1 %161, label %162, label %165

; <label>:162:                                    ; preds = %160
  %163 = getelementptr inbounds i8, i8* %58, i64 -1
  %164 = call zeroext i1 @parse_credentials(i8* %57, i8* %163, i8** %5, i8** %6)
  br i1 %164, label %165, label %252

; <label>:165:                                    ; preds = %162, %160
  %166 = call noalias i8* @xcalloc(i64 1, i64 104)
  %167 = bitcast i8* %166 to %struct.url*
  %168 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 1
  store i32 %9, i32* %168, align 8
  %169 = call i8* @strdupdelim(i8* %.027, i8* %.028)
  %170 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  store i8* %169, i8** %170, align 8
  %171 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 3
  store i32 %.29, i32* %171, align 8
  %172 = load i8*, i8** %5, align 8
  %173 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 10
  store i8* %172, i8** %173, align 8
  %174 = load i8*, i8** %6, align 8
  %175 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 11
  store i8* %174, i8** %175, align 8
  %176 = call i8* @strdupdelim(i8* %.029, i8* %.030)
  %177 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 4
  store i8* %176, i8** %177, align 8
  %178 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 4
  %179 = load i8*, i8** %178, align 8
  %180 = call zeroext i1 @path_simplify(i32 %9, i8* %179)
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 4
  %183 = load i8*, i8** %182, align 8
  %184 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 8
  %185 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 9
  call void @split_path(i8* %183, i8** %184, i8** %185)
  %186 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  %187 = load i8*, i8** %186, align 8
  %188 = call zeroext i1 @lowercase_str(i8* %187)
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  %191 = load i8*, i8** %190, align 8
  %192 = call i8* @strchr(i8* %191, i32 37) #14, !track !675
  %193 = icmp ne i8* %192, null
  br i1 %193, label %194, label %212

; <label>:194:                                    ; preds = %165
  %195 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  %196 = load i8*, i8** %195, align 8
  call void @url_unescape(i8* %196)
  %197 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %198 = load i8, i8* %197, align 2
  %199 = trunc i8 %198 to i1
  %200 = icmp ne %struct.iri* %2, null
  %or.cond = and i1 %199, %200
  br i1 %or.cond, label %201, label %212

; <label>:201:                                    ; preds = %194
  %202 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  %203 = load i8*, i8** %202, align 8
  %204 = call i8* @idn_encode(%struct.iri* %2, i8* %203)
  %205 = icmp ne i8* %204, null
  br i1 %205, label %206, label %212

; <label>:206:                                    ; preds = %201
  %207 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  %208 = load i8*, i8** %207, align 8
  call void @free(i8* %208) #8
  %209 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  store i8* null, i8** %209, align 8
  %210 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 2
  store i8* %204, i8** %210, align 8
  %211 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 12
  store i8 1, i8* %211, align 8
  br label %212

; <label>:212:                                    ; preds = %194, %206, %201, %165
  %.218 = phi i8 [ %189, %165 ], [ 1, %201 ], [ 1, %206 ], [ 1, %194 ]
  %213 = icmp ne i8* %.132, null
  br i1 %213, label %214, label %217

; <label>:214:                                    ; preds = %212
  %215 = call i8* @strdupdelim(i8* %.132, i8* %.134)
  %216 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 5
  store i8* %215, i8** %216, align 8
  br label %217

; <label>:217:                                    ; preds = %214, %212
  %218 = icmp ne i8* %.126, null
  br i1 %218, label %219, label %222

; <label>:219:                                    ; preds = %217
  %220 = call i8* @strdupdelim(i8* %.126, i8* %.124)
  %221 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 6
  store i8* %220, i8** %221, align 8
  br label %222

; <label>:222:                                    ; preds = %219, %217
  %223 = icmp ne i8* %.120, null
  br i1 %223, label %224, label %227

; <label>:224:                                    ; preds = %222
  %225 = call i8* @strdupdelim(i8* %.120, i8* %.115)
  %226 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 7
  store i8* %225, i8** %226, align 8
  br label %227

; <label>:227:                                    ; preds = %224, %222
  %228 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %229 = load i8, i8* %228, align 2
  %230 = trunc i8 %229 to i1
  br i1 %230, label %240, label %231

; <label>:231:                                    ; preds = %227
  %232 = trunc i8 %181 to i1
  br i1 %232, label %240, label %233

; <label>:233:                                    ; preds = %231
  %234 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 7
  %235 = load i8*, i8** %234, align 8
  %236 = icmp ne i8* %235, null
  br i1 %236, label %240, label %237

; <label>:237:                                    ; preds = %233
  %238 = trunc i8 %.218 to i1
  %239 = icmp eq i8* %.029, %.030
  %or.cond1 = or i1 %238, %239
  br i1 %or.cond1, label %240, label %245

; <label>:240:                                    ; preds = %237, %233, %231, %227
  %241 = call i8* @url_string(%struct.url* %167, i32 0)
  %242 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 0
  store i8* %241, i8** %242, align 8
  %243 = icmp ne i8* %.2, %0
  br i1 %243, label %244, label %259

; <label>:244:                                    ; preds = %240
  call void @free(i8* %.2) #8
  br label %259

; <label>:245:                                    ; preds = %237
  %246 = icmp eq i8* %.2, %0
  br i1 %246, label %247, label %250

; <label>:247:                                    ; preds = %245
  %248 = call noalias i8* @xstrdup(i8* %0)
  %249 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 0
  store i8* %248, i8** %249, align 8
  br label %259

; <label>:250:                                    ; preds = %245
  %251 = getelementptr inbounds %struct.url, %struct.url* %167, i32 0, i32 0
  store i8* %.2, i8** %251, align 8
  br label %259

.loopexit:                                        ; preds = %.lr.ph, %94
  %.3.ph = phi i8* [ %.2, %94 ], [ %.2, %.lr.ph ]
  %.1.ph = phi i32 [ 4, %94 ], [ 4, %.lr.ph ]
  br label %252

; <label>:252:                                    ; preds = %.loopexit, %162, %77, %69, %67, %63, %11
  %.3 = phi i8* [ null, %11 ], [ %.2, %63 ], [ %.2, %67 ], [ %.2, %69 ], [ %.2, %77 ], [ %.2, %162 ], [ %.3.ph, %.loopexit ]
  %.1 = phi i32 [ %., %11 ], [ 6, %63 ], [ 8, %67 ], [ 3, %69 ], [ 3, %77 ], [ 5, %162 ], [ %.1.ph, %.loopexit ]
  %253 = icmp ne i8* %.3, null
  %254 = icmp ne i8* %.3, %0
  %or.cond2 = and i1 %253, %254
  br i1 %or.cond2, label %255, label %256

; <label>:255:                                    ; preds = %252
  call void @free(i8* %.3) #8
  br label %256

; <label>:256:                                    ; preds = %255, %252
  %257 = icmp ne i32* %1, null
  br i1 %257, label %258, label %259

; <label>:258:                                    ; preds = %256
  store i32 %.1, i32* %1, align 4
  br label %259

; <label>:259:                                    ; preds = %256, %258, %244, %240, %250, %247
  %.0 = phi %struct.url* [ %167, %247 ], [ %167, %250 ], [ %167, %240 ], [ %167, %244 ], [ null, %258 ], [ null, %256 ]
  ret %struct.url* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @reencode_escapes(i8*) #7 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph11.preheader, label %._crit_edge12

.lr.ph11.preheader:                               ; preds = %1
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %.lr.ph11
  %.019 = phi i32 [ %spec.select, %.lr.ph11 ], [ 0, %.lr.ph11.preheader ]
  %.028 = phi i8* [ %6, %.lr.ph11 ], [ %0, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 257)
  %4 = call zeroext i1 @char_needs_escaping(i8* %.028)
  %5 = add nsw i32 %.019, 1
  %spec.select = select i1 %4, i32 %5, i32 %.019
  %6 = getelementptr inbounds i8, i8* %.028, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %.lr.ph11, label %._crit_edge12.loopexit

._crit_edge12.loopexit:                           ; preds = %.lr.ph11
  %.02.lcssa.ph = phi i8* [ %6, %.lr.ph11 ]
  %.01.lcssa.ph = phi i32 [ %spec.select, %.lr.ph11 ]
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %1
  %.02.lcssa = phi i8* [ %0, %1 ], [ %.02.lcssa.ph, %._crit_edge12.loopexit ]
  %.01.lcssa = phi i32 [ 0, %1 ], [ %.01.lcssa.ph, %._crit_edge12.loopexit ]
  %9 = icmp ne i32 %.01.lcssa, 0
  br i1 %9, label %10, label %49

; <label>:10:                                     ; preds = %._crit_edge12
  %11 = ptrtoint i8* %.02.lcssa to i64
  %12 = ptrtoint i8* %0 to i64
  %13 = sub i64 %11, %12
  %14 = trunc i64 %13 to i32
  %15 = mul nsw i32 2, %.01.lcssa
  %16 = add nsw i32 %14, %15
  %17 = add nsw i32 %16, 1
  %18 = sext i32 %17 to i64
  %19 = call noalias i8* @xmalloc(i64 %18)
  %20 = load i8, i8* %0, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %10
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %46
  %.137 = phi i8* [ %23, %46 ], [ %0, %.lr.ph.preheader ]
  %.046 = phi i8* [ %.15, %46 ], [ %19, %.lr.ph.preheader ]
  call void @unroll_loop(i32 258)
  %22 = call zeroext i1 @char_needs_escaping(i8* %.137)
  %23 = getelementptr inbounds i8, i8* %.137, i32 1
  %24 = load i8, i8* %.137, align 1
  %25 = getelementptr inbounds i8, i8* %.046, i32 1
  br i1 %22, label %26, label %45

; <label>:26:                                     ; preds = %.lr.ph
  store i8 37, i8* %.046, align 1
  %27 = zext i8 %24 to i32
  %28 = ashr i32 %27, 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = add nsw i32 %32, 0
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %25, i32 1
  store i8 %34, i8* %25, align 1
  %36 = zext i8 %24 to i32
  %37 = and i32 %36, 15
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = add nsw i32 %41, 0
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %35, i32 1
  store i8 %43, i8* %35, align 1
  br label %46

; <label>:45:                                     ; preds = %.lr.ph
  store i8 %24, i8* %.046, align 1
  br label %46

; <label>:46:                                     ; preds = %45, %26
  %.15 = phi i8* [ %44, %26 ], [ %25, %45 ]
  %47 = load i8, i8* %23, align 1
  %48 = icmp ne i8 %47, 0
  br i1 %48, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %46
  %.04.lcssa.ph = phi i8* [ %.15, %46 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %10
  %.04.lcssa = phi i8* [ %19, %10 ], [ %.04.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.04.lcssa, align 1
  br label %49

; <label>:49:                                     ; preds = %._crit_edge12, %._crit_edge
  %.0 = phi i8* [ %19, %._crit_edge ], [ %0, %._crit_edge12 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @url_skip_credentials(i8*) #7 {
  %2 = getelementptr [6 x i8], [6 x i8]* @.str.25.1359, i32 0, i32 0
  %3 = call i8* @strpbrk(i8* %0, i8* %2) #14, !track !676
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %1
  %6 = load i8, i8* %3, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 64
  %9 = getelementptr inbounds i8, i8* %3, i64 1
  %spec.select = select i1 %8, i8* %0, i8* %9
  ret i8* %spec.select

; <label>:10:                                     ; preds = %1
  ret i8* %0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @init_seps(i32) #0 {
  %2 = zext i32 %0 to i64
  %3 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %2
  %4 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %3, i32 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 2
  %7 = icmp ne i32 %6, 0
  %8 = getelementptr [8 x i8], [8 x i8]* @init_seps.seps, i32 0, i64 2
  br i1 %7, label %9, label %13

; <label>:9:                                      ; preds = %1
  %10 = getelementptr [8 x i8], [8 x i8]* @init_seps.seps, i32 0, i64 2
  %11 = getelementptr inbounds i8, i8* %10, i32 1
  %12 = getelementptr [8 x i8], [8 x i8]* @init_seps.seps, i32 0, i64 2
  store i8 59, i8* %12, align 1
  br label %13

; <label>:13:                                     ; preds = %9, %1
  %.0 = phi i8* [ %11, %9 ], [ %8, %1 ]
  %14 = and i32 %5, 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %13
  %17 = getelementptr inbounds i8, i8* %.0, i32 1
  store i8 63, i8* %.0, align 1
  br label %18

; <label>:18:                                     ; preds = %16, %13
  %.1 = phi i8* [ %17, %16 ], [ %.0, %13 ]
  %19 = and i32 %5, 8
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %18
  %22 = getelementptr inbounds i8, i8* %.1, i32 1
  store i8 35, i8* %.1, align 1
  br label %23

; <label>:23:                                     ; preds = %21, %18
  %.2 = phi i8* [ %22, %21 ], [ %.1, %18 ]
  store i8 0, i8* %.2, align 1
  %24 = getelementptr [8 x i8], [8 x i8]* @init_seps.seps, i32 0, i32 0
  ret i8* %24
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @strpbrk_or_eos(i8*, i8*) #7 {
  %3 = call i8* @strpbrk(i8* %0, i8* %1) #14, !track !677
  %4 = icmp ne i8* %3, null
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %2
  %6 = call i8* @strchr(i8* %0, i32 0) #14, !track !678
  br label %7

; <label>:7:                                      ; preds = %5, %2
  %.0 = phi i8* [ %3, %2 ], [ %6, %5 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @parse_credentials(i8*, i8*, i8**, i8**) #0 {
  %5 = icmp eq i8* %0, %1
  br i1 %5, label %22, label %6

; <label>:6:                                      ; preds = %4
  %7 = ptrtoint i8* %1 to i64
  %8 = ptrtoint i8* %0 to i64
  %9 = sub i64 %7, %8
  %10 = call i8* @memchr(i8* %0, i32 58, i64 %9) #14, !track !679
  %11 = icmp eq i8* %10, %0
  br i1 %11, label %22, label %12

; <label>:12:                                     ; preds = %6
  %13 = icmp ne i8* %10, null
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %12
  %15 = getelementptr inbounds i8, i8* %10, i64 1
  %16 = call i8* @strdupdelim(i8* %15, i8* %1)
  store i8* %16, i8** %3, align 8
  %17 = load i8*, i8** %3, align 8
  call void @url_unescape(i8* %17)
  br label %19

; <label>:18:                                     ; preds = %12
  store i8* null, i8** %3, align 8
  br label %19

; <label>:19:                                     ; preds = %18, %14
  %.01 = phi i8* [ %10, %14 ], [ %1, %18 ]
  %20 = call i8* @strdupdelim(i8* %0, i8* %.01)
  store i8* %20, i8** %2, align 8
  %21 = load i8*, i8** %2, align 8
  call void @url_unescape(i8* %21)
  br label %22

; <label>:22:                                     ; preds = %6, %4, %19
  %.0 = phi i1 [ true, %19 ], [ false, %4 ], [ false, %6 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @path_simplify(i32, i8*) #0 {
  %3 = call i8* @strchr(i8* %1, i32 0) #14, !track !680
  %4 = icmp ult i8* %1, %3
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %85
  %.016 = phi i8* [ %.3, %85 ], [ %1, %.lr.ph.preheader ]
  %.0114 = phi i8* [ %.9, %85 ], [ %1, %.lr.ph.preheader ]
  %.0513 = phi i8* [ %.712, %85 ], [ %1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 259)
  %5 = load i8, i8* %.0513, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp eq i32 %6, 46
  br i1 %7, label %8, label %20

; <label>:8:                                      ; preds = %.lr.ph
  %9 = getelementptr inbounds i8, i8* %.0513, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %11, 47
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds i8, i8* %.0513, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %13, %8
  %19 = getelementptr inbounds i8, i8* %.0513, i64 2
  br label %85

; <label>:20:                                     ; preds = %13, %.lr.ph
  %21 = load i8, i8* %.0513, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp eq i32 %22, 46
  br i1 %23, label %24, label %56

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds i8, i8* %.0513, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp eq i32 %27, 46
  br i1 %28, label %29, label %56

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds i8, i8* %.0513, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 47
  br i1 %33, label %39, label %34

; <label>:34:                                     ; preds = %29
  %35 = getelementptr inbounds i8, i8* %.0513, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %56

; <label>:39:                                     ; preds = %34, %29
  %40 = icmp ugt i8* %.0114, %.016
  br i1 %40, label %41, label %52

; <label>:41:                                     ; preds = %39
  %42 = getelementptr inbounds i8, i8* %.0114, i32 -1
  call void @unroll_loop(i32 260)
  %43 = icmp ugt i8* %42, %.016
  br i1 %43, label %.lr.ph21, label %.critedge.loopexit

.lr.ph21:                                         ; preds = %41
  br label %44

; <label>:44:                                     ; preds = %.lr.ph21, %49
  %.1219 = phi i8* [ %42, %.lr.ph21 ], [ %50, %49 ]
  %45 = getelementptr inbounds i8, i8* %.1219, i64 -1
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp ne i32 %47, 47
  br i1 %48, label %49, label %..critedge.loopexit_crit_edge23

; <label>:49:                                     ; preds = %44
  %50 = getelementptr inbounds i8, i8* %.1219, i32 -1
  call void @unroll_loop(i32 260)
  %51 = icmp ugt i8* %50, %.016
  br i1 %51, label %44, label %..critedge.loopexit_crit_edge

; <label>:52:                                     ; preds = %39
  %.off = add i32 %0, -2
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %53, label %.critedge

; <label>:53:                                     ; preds = %52
  %54 = getelementptr inbounds i8, i8* %.0114, i64 3
  br label %56

..critedge.loopexit_crit_edge:                    ; preds = %49
  %split22 = phi i8* [ %50, %49 ]
  br label %.critedge.loopexit

..critedge.loopexit_crit_edge23:                  ; preds = %44
  %split24 = phi i8* [ %.1219, %44 ]
  br label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %..critedge.loopexit_crit_edge23, %..critedge.loopexit_crit_edge, %41
  %.23.ph = phi i8* [ %split22, %..critedge.loopexit_crit_edge ], [ %split24, %..critedge.loopexit_crit_edge23 ], [ %42, %41 ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %52
  %.23 = phi i8* [ %.0114, %52 ], [ %.23.ph, %.critedge.loopexit ]
  %55 = getelementptr inbounds i8, i8* %.0513, i64 3
  br label %85

; <label>:56:                                     ; preds = %20, %24, %34, %53
  %.1 = phi i8* [ %54, %53 ], [ %.016, %34 ], [ %.016, %24 ], [ %.016, %20 ]
  %57 = icmp eq i8* %.0114, %.0513
  br i1 %57, label %.preheader, label %.preheader3

.preheader3:                                      ; preds = %56
  call void @unroll_loop(i32 262)
  %58 = icmp ult i8* %.0513, %3
  br i1 %58, label %.lr.ph6, label %.critedge2

.lr.ph6:                                          ; preds = %.preheader3
  br label %71

.preheader:                                       ; preds = %56
  call void @unroll_loop(i32 261)
  %59 = icmp ult i8* %.0513, %3
  br i1 %59, label %.lr.ph13, label %.critedge1

.lr.ph13:                                         ; preds = %.preheader
  br label %60

; <label>:60:                                     ; preds = %.lr.ph13, %64
  %.3412 = phi i8* [ %.0114, %.lr.ph13 ], [ %65, %64 ]
  %.1611 = phi i8* [ %.0513, %.lr.ph13 ], [ %66, %64 ]
  %61 = load i8, i8* %.1611, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp ne i32 %62, 47
  br i1 %63, label %64, label %..critedge1_crit_edge16

; <label>:64:                                     ; preds = %60
  %65 = getelementptr inbounds i8, i8* %.3412, i32 1
  %66 = getelementptr inbounds i8, i8* %.1611, i32 1
  call void @unroll_loop(i32 261)
  %67 = icmp ult i8* %66, %3
  br i1 %67, label %60, label %..critedge1_crit_edge

..critedge1_crit_edge:                            ; preds = %64
  %split14 = phi i8* [ %66, %64 ]
  %split15 = phi i8* [ %65, %64 ]
  br label %.critedge1

..critedge1_crit_edge16:                          ; preds = %60
  %split17 = phi i8* [ %.1611, %60 ]
  %split18 = phi i8* [ %.3412, %60 ]
  br label %.critedge1

.critedge1:                                       ; preds = %..critedge1_crit_edge16, %..critedge1_crit_edge, %.preheader
  %.16.lcssa = phi i8* [ %split17, %..critedge1_crit_edge16 ], [ %split14, %..critedge1_crit_edge ], [ %.0513, %.preheader ]
  %.34.lcssa = phi i8* [ %split18, %..critedge1_crit_edge16 ], [ %split15, %..critedge1_crit_edge ], [ %.0114, %.preheader ]
  %68 = icmp ult i8* %.16.lcssa, %3
  %69 = getelementptr inbounds i8, i8* %.34.lcssa, i32 1
  %70 = getelementptr inbounds i8, i8* %.16.lcssa, i32 1
  %.27 = select i1 %68, i8* %70, i8* %.16.lcssa
  %.4 = select i1 %68, i8* %69, i8* %.34.lcssa
  br label %85

; <label>:71:                                     ; preds = %.lr.ph6, %75
  %.55 = phi i8* [ %.0114, %.lr.ph6 ], [ %78, %75 ]
  %.384 = phi i8* [ %.0513, %.lr.ph6 ], [ %76, %75 ]
  %72 = load i8, i8* %.384, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp ne i32 %73, 47
  br i1 %74, label %75, label %..critedge2_crit_edge8

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds i8, i8* %.384, i32 1
  %77 = load i8, i8* %.384, align 1
  %78 = getelementptr inbounds i8, i8* %.55, i32 1
  store i8 %77, i8* %.55, align 1
  call void @unroll_loop(i32 262)
  %79 = icmp ult i8* %76, %3
  br i1 %79, label %71, label %..critedge2_crit_edge

..critedge2_crit_edge:                            ; preds = %75
  %split = phi i8* [ %76, %75 ]
  %split7 = phi i8* [ %78, %75 ]
  br label %.critedge2

..critedge2_crit_edge8:                           ; preds = %71
  %split9 = phi i8* [ %.384, %71 ]
  %split10 = phi i8* [ %.55, %71 ]
  br label %.critedge2

.critedge2:                                       ; preds = %..critedge2_crit_edge8, %..critedge2_crit_edge, %.preheader3
  %.38.lcssa = phi i8* [ %split9, %..critedge2_crit_edge8 ], [ %split, %..critedge2_crit_edge ], [ %.0513, %.preheader3 ]
  %.5.lcssa = phi i8* [ %split10, %..critedge2_crit_edge8 ], [ %split7, %..critedge2_crit_edge ], [ %.0114, %.preheader3 ]
  %80 = icmp ult i8* %.38.lcssa, %3
  br i1 %80, label %81, label %85

; <label>:81:                                     ; preds = %.critedge2
  %82 = getelementptr inbounds i8, i8* %.38.lcssa, i32 1
  %83 = load i8, i8* %.38.lcssa, align 1
  %84 = getelementptr inbounds i8, i8* %.5.lcssa, i32 1
  store i8 %83, i8* %.5.lcssa, align 1
  br label %85

; <label>:85:                                     ; preds = %.critedge, %.critedge2, %81, %.critedge1, %18
  %.712 = phi i8* [ %19, %18 ], [ %55, %.critedge ], [ %.27, %.critedge1 ], [ %82, %81 ], [ %.38.lcssa, %.critedge2 ]
  %.9 = phi i8* [ %.0114, %18 ], [ %.23, %.critedge ], [ %.4, %.critedge1 ], [ %84, %81 ], [ %.5.lcssa, %.critedge2 ]
  %.3 = phi i8* [ %.016, %18 ], [ %.016, %.critedge ], [ %.1, %.critedge2 ], [ %.1, %81 ], [ %.1, %.critedge1 ]
  %86 = icmp ult i8* %.712, %3
  br i1 %86, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %85
  %.05.lcssa.ph = phi i8* [ %.712, %85 ]
  %.01.lcssa.ph = phi i8* [ %.9, %85 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.05.lcssa = phi i8* [ %1, %2 ], [ %.05.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i8* [ %1, %2 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %87 = icmp ne i8* %.01.lcssa, %.05.lcssa
  br i1 %87, label %88, label %89

; <label>:88:                                     ; preds = %._crit_edge
  store i8 0, i8* %.01.lcssa, align 1
  br label %89

; <label>:89:                                     ; preds = %88, %._crit_edge
  %90 = icmp ne i8* %.01.lcssa, %.05.lcssa
  ret i1 %90
}

; Function Attrs: noinline nounwind uwtable
define internal void @split_path(i8*, i8**, i8**) #0 {
  %4 = call i8* @strrchr(i8* %0, i32 47) #14, !track !681
  %5 = icmp ne i8* %4, null
  br i1 %5, label %10, label %6

; <label>:6:                                      ; preds = %3
  %7 = getelementptr [1 x i8], [1 x i8]* @.str.35.1358, i32 0, i32 0
  %8 = call noalias i8* @xstrdup(i8* %7)
  store i8* %8, i8** %1, align 8
  %9 = call noalias i8* @xstrdup(i8* %0)
  store i8* %9, i8** %2, align 8
  br label %14

; <label>:10:                                     ; preds = %3
  %11 = call i8* @strdupdelim(i8* %0, i8* %4)
  store i8* %11, i8** %1, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 1
  %13 = call noalias i8* @xstrdup(i8* %12)
  store i8* %13, i8** %2, align 8
  br label %14

; <label>:14:                                     ; preds = %10, %6
  %15 = load i8*, i8** %1, align 8
  call void @url_unescape(i8* %15)
  %16 = load i8*, i8** %2, align 8
  call void @url_unescape(i8* %16)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @lowercase_str(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %12
  %.03 = phi i8* [ %13, %12 ], [ %0, %.lr.ph.preheader ]
  %.012 = phi i8 [ %.1, %12 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 263)
  %4 = load i8, i8* %.03, align 1
  %5 = sext i8 %4 to i32
  %6 = call zeroext i1 @c_isupper(i32 %5)
  br i1 %6, label %7, label %12

; <label>:7:                                      ; preds = %.lr.ph
  %8 = load i8, i8* %.03, align 1
  %9 = sext i8 %8 to i32
  %10 = call i32 @c_tolower(i32 %9)
  %11 = trunc i32 %10 to i8
  store i8 %11, i8* %.03, align 1
  br label %12

; <label>:12:                                     ; preds = %.lr.ph, %7
  %.1 = phi i8 [ 1, %7 ], [ %.012, %.lr.ph ]
  %13 = getelementptr inbounds i8, i8* %.03, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %12
  %.01.lcssa.ph = phi i8 [ %.1, %12 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.01.lcssa = phi i8 [ 0, %1 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %16 = trunc i8 %.01.lcssa to i1
  ret i1 %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @url_string(%struct.url*, i32) #7 {
  %3 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %5
  %7 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %6, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %11
  %13 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %12, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = call i32 @full_path_length(%struct.url* %0)
  %16 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ne i8* %17, null
  %19 = icmp ne i32 %1, 2
  %or.cond1 = and i1 %18, %19
  br i1 %or.cond1, label %20, label %35

; <label>:20:                                     ; preds = %2
  %21 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %22 = load i8*, i8** %21, align 8
  %23 = call i8* @url_escape_allow_passthrough(i8* %22)
  %24 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 11
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %27, label %35

; <label>:27:                                     ; preds = %20
  %28 = icmp eq i32 %1, 1
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %27
  %30 = getelementptr [11 x i8], [11 x i8]* @.str.16.1357, i32 0, i32 0
  br label %35

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 11
  %33 = load i8*, i8** %32, align 8
  %34 = call i8* @url_escape_allow_passthrough(i8* %33)
  br label %35

; <label>:35:                                     ; preds = %29, %31, %20, %2
  %.12 = phi i8* [ null, %2 ], [ %23, %29 ], [ %23, %31 ], [ %23, %20 ]
  %.3 = phi i8* [ null, %2 ], [ null, %20 ], [ %30, %29 ], [ %34, %31 ]
  %36 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i8* @url_escape_allow_passthrough(i8* %37)
  %39 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = icmp ne i8* %38, %40
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %35
  call void @unescape_single_char(i8* %38, i8 signext 58)
  br label %43

; <label>:43:                                     ; preds = %42, %35
  %44 = call i8* @strchr(i8* %38, i32 58) #14, !track !682
  %45 = icmp ne i8* %44, null
  %46 = zext i1 %45 to i8
  %47 = call i64 @strlen(i8* %14) #14
  %48 = call i64 @strlen(i8* %38) #14
  %49 = add i64 %47, %48
  %50 = trunc i8 %46 to i1
  %51 = zext i1 %50 to i64
  %52 = select i1 %50, i32 2, i32 0
  %53 = sext i32 %52 to i64
  %54 = add i64 %49, %53
  %55 = sext i32 %15 to i64
  %56 = add i64 %54, %55
  %57 = add i64 %56, 1
  %58 = trunc i64 %57 to i32
  %59 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = icmp ne i32 %60, %8
  br i1 %61, label %62, label %69

; <label>:62:                                     ; preds = %43
  %63 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %64 = load i32, i32* %63, align 8
  %65 = sext i32 %64 to i64
  %66 = call i32 @numdigit(i64 %65)
  %67 = add nsw i32 1, %66
  %68 = add nsw i32 %58, %67
  br label %69

; <label>:69:                                     ; preds = %62, %43
  %.03 = phi i32 [ %68, %62 ], [ %58, %43 ]
  %70 = icmp ne i8* %.12, null
  br i1 %70, label %71, label %84

; <label>:71:                                     ; preds = %69
  %72 = call i64 @strlen(i8* %.12) #14
  %73 = add i64 1, %72
  %74 = sext i32 %.03 to i64
  %75 = add i64 %74, %73
  %76 = trunc i64 %75 to i32
  %77 = icmp ne i8* %.3, null
  br i1 %77, label %78, label %84

; <label>:78:                                     ; preds = %71
  %79 = call i64 @strlen(i8* %.3) #14
  %80 = add i64 1, %79
  %81 = sext i32 %76 to i64
  %82 = add i64 %81, %80
  %83 = trunc i64 %82 to i32
  br label %84

; <label>:84:                                     ; preds = %71, %78, %69
  %.25 = phi i32 [ %.03, %69 ], [ %83, %78 ], [ %76, %71 ]
  %85 = sext i32 %.25 to i64
  %86 = call noalias i8* @xmalloc(i64 %85)
  %87 = call i64 @strlen(i8* %14) #14
  %88 = trunc i64 %87 to i32
  %89 = sext i32 %88 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 %14, i64 %89, i1 false), !track !683
  %90 = sext i32 %88 to i64
  %91 = getelementptr inbounds i8, i8* %86, i64 %90
  %92 = icmp ne i8* %.12, null
  br i1 %92, label %93, label %109

; <label>:93:                                     ; preds = %84
  %94 = call i64 @strlen(i8* %.12) #14
  %95 = trunc i64 %94 to i32
  %96 = sext i32 %95 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 1 %.12, i64 %96, i1 false), !track !684
  %97 = sext i32 %95 to i64
  %98 = getelementptr inbounds i8, i8* %91, i64 %97
  %99 = icmp ne i8* %.3, null
  br i1 %99, label %100, label %107

; <label>:100:                                    ; preds = %93
  %101 = getelementptr inbounds i8, i8* %98, i32 1
  store i8 58, i8* %98, align 1
  %102 = call i64 @strlen(i8* %.3) #14
  %103 = trunc i64 %102 to i32
  %104 = sext i32 %103 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %101, i8* align 1 %.3, i64 %104, i1 false), !track !685
  %105 = sext i32 %103 to i64
  %106 = getelementptr inbounds i8, i8* %101, i64 %105
  br label %107

; <label>:107:                                    ; preds = %100, %93
  %.06 = phi i8* [ %106, %100 ], [ %98, %93 ]
  %108 = getelementptr inbounds i8, i8* %.06, i32 1
  store i8 64, i8* %.06, align 1
  br label %109

; <label>:109:                                    ; preds = %107, %84
  %.17 = phi i8* [ %108, %107 ], [ %91, %84 ]
  %110 = trunc i8 %46 to i1
  br i1 %110, label %111, label %113

; <label>:111:                                    ; preds = %109
  %112 = getelementptr inbounds i8, i8* %.17, i32 1
  store i8 91, i8* %.17, align 1
  br label %113

; <label>:113:                                    ; preds = %109, %111
  %.28 = phi i8* [ %112, %111 ], [ %.17, %109 ]
  %114 = call i64 @strlen(i8* %38) #14
  %115 = trunc i64 %114 to i32
  %116 = sext i32 %115 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.28, i8* align 1 %38, i64 %116, i1 false), !track !686
  %117 = sext i32 %115 to i64
  %118 = getelementptr inbounds i8, i8* %.28, i64 %117
  %119 = trunc i8 %46 to i1
  br i1 %119, label %120, label %122

; <label>:120:                                    ; preds = %113
  %121 = getelementptr inbounds i8, i8* %118, i32 1
  store i8 93, i8* %118, align 1
  br label %122

; <label>:122:                                    ; preds = %120, %113
  %.39 = phi i8* [ %121, %120 ], [ %118, %113 ]
  %123 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %124 = load i32, i32* %123, align 8
  %125 = icmp ne i32 %124, %8
  br i1 %125, label %126, label %132

; <label>:126:                                    ; preds = %122
  %127 = getelementptr inbounds i8, i8* %.39, i32 1
  store i8 58, i8* %.39, align 1
  %128 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %129 = load i32, i32* %128, align 8
  %130 = sext i32 %129 to i64
  %131 = call i8* @number_to_string(i8* %127, i64 %130)
  br label %132

; <label>:132:                                    ; preds = %126, %122
  %.4 = phi i8* [ %131, %126 ], [ %.39, %122 ]
  call void @full_path_write(%struct.url* %0, i8* %.4)
  %133 = sext i32 %15 to i64
  %134 = getelementptr inbounds i8, i8* %.4, i64 %133
  %135 = getelementptr inbounds i8, i8* %134, i32 1
  store i8 0, i8* %134, align 1
  %136 = icmp ne i8* %.12, null
  br i1 %136, label %137, label %142

; <label>:137:                                    ; preds = %132
  %138 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %139 = load i8*, i8** %138, align 8
  %140 = icmp ne i8* %.12, %139
  br i1 %140, label %141, label %142

; <label>:141:                                    ; preds = %137
  call void @free(i8* %.12) #8
  br label %142

; <label>:142:                                    ; preds = %141, %137, %132
  %143 = icmp ne i8* %.3, null
  %144 = icmp eq i32 %1, 0
  %or.cond = and i1 %143, %144
  br i1 %or.cond, label %145, label %150

; <label>:145:                                    ; preds = %142
  %146 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 11
  %147 = load i8*, i8** %146, align 8
  %148 = icmp ne i8* %.3, %147
  br i1 %148, label %149, label %150

; <label>:149:                                    ; preds = %145
  call void @free(i8* %.3) #8
  br label %150

; <label>:150:                                    ; preds = %149, %145, %142
  %151 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %152 = load i8*, i8** %151, align 8
  %153 = icmp ne i8* %38, %152
  br i1 %153, label %154, label %155

; <label>:154:                                    ; preds = %150
  call void @free(i8* %38) #8
  br label %155

; <label>:155:                                    ; preds = %154, %150
  ret i8* %86
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @full_path_length(%struct.url*) #0 {
  %2 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %13

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %7 = load i8*, i8** %6, align 8
  %8 = call i64 @strlen(i8* %7) #14
  %9 = add i64 1, %8
  %10 = sext i32 0 to i64
  %11 = add i64 %10, %9
  %12 = trunc i64 %11 to i32
  br label %13

; <label>:13:                                     ; preds = %5, %1
  %.0 = phi i32 [ %12, %5 ], [ 0, %1 ]
  %14 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 5
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %25

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 5
  %19 = load i8*, i8** %18, align 8
  %20 = call i64 @strlen(i8* %19) #14
  %21 = add i64 1, %20
  %22 = sext i32 %.0 to i64
  %23 = add i64 %22, %21
  %24 = trunc i64 %23 to i32
  br label %25

; <label>:25:                                     ; preds = %17, %13
  %.1 = phi i32 [ %24, %17 ], [ %.0, %13 ]
  %26 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 6
  %27 = load i8*, i8** %26, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %29, label %37

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 6
  %31 = load i8*, i8** %30, align 8
  %32 = call i64 @strlen(i8* %31) #14
  %33 = add i64 1, %32
  %34 = sext i32 %.1 to i64
  %35 = add i64 %34, %33
  %36 = trunc i64 %35 to i32
  br label %37

; <label>:37:                                     ; preds = %29, %25
  %.2 = phi i32 [ %36, %29 ], [ %.1, %25 ]
  ret i32 %.2
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @url_escape_allow_passthrough(i8*) #7 {
  %2 = call i8* @url_escape_1(i8* %0, i8 zeroext 2, i1 zeroext true)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define internal void @unescape_single_char(i8*, i8 signext) #0 {
  %3 = sext i8 %1 to i32
  %4 = ashr i32 %3, 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = add nsw i32 %8, 0
  %10 = trunc i32 %9 to i8
  %11 = sext i8 %1 to i32
  %12 = and i32 %11, 15
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = add nsw i32 %16, 0
  %18 = trunc i32 %17 to i8
  %19 = load i8, i8* %0, align 1
  %20 = icmp ne i8 %19, 0
  br i1 %20, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %40
  %.03 = phi i8* [ %42, %40 ], [ %0, %.lr.ph.preheader ]
  %.012 = phi i8* [ %41, %40 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 264)
  %21 = load i8, i8* %.012, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp eq i32 %22, 37
  br i1 %23, label %24, label %38

; <label>:24:                                     ; preds = %.lr.ph
  %25 = getelementptr inbounds i8, i8* %.012, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = sext i8 %10 to i32
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %38

; <label>:30:                                     ; preds = %24
  %31 = getelementptr inbounds i8, i8* %.012, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = sext i8 %18 to i32
  %35 = icmp eq i32 %33, %34
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %30
  store i8 %1, i8* %.03, align 1
  %37 = getelementptr inbounds i8, i8* %.012, i64 2
  br label %40

; <label>:38:                                     ; preds = %30, %24, %.lr.ph
  %39 = load i8, i8* %.012, align 1
  store i8 %39, i8* %.03, align 1
  br label %40

; <label>:40:                                     ; preds = %36, %38
  %.1 = phi i8* [ %37, %36 ], [ %.012, %38 ]
  %41 = getelementptr inbounds i8, i8* %.1, i32 1
  %42 = getelementptr inbounds i8, i8* %.03, i32 1
  %43 = load i8, i8* %41, align 1
  %44 = icmp ne i8 %43, 0
  br i1 %44, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %40
  %.0.lcssa.ph = phi i8* [ %42, %40 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %.0.lcssa = phi i8* [ %0, %2 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.0.lcssa, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @full_path_write(%struct.url*, i8*) #0 {
  %3 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %4 = load i8*, i8** %3, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %13

; <label>:6:                                      ; preds = %2
  %7 = call i64 @strlen(i8* %4) #14
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 47, i8* %1, align 1
  %10 = sext i32 %8 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %4, i64 %10, i1 false), !track !687
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds i8, i8* %9, i64 %11
  br label %13

; <label>:13:                                     ; preds = %6, %2
  %.0 = phi i8* [ %12, %6 ], [ %1, %2 ]
  %14 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 5
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %24

; <label>:17:                                     ; preds = %13
  %18 = call i64 @strlen(i8* %15) #14
  %19 = trunc i64 %18 to i32
  %20 = getelementptr inbounds i8, i8* %.0, i32 1
  store i8 59, i8* %.0, align 1
  %21 = sext i32 %19 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %15, i64 %21, i1 false), !track !688
  %22 = sext i32 %19 to i64
  %23 = getelementptr inbounds i8, i8* %20, i64 %22
  br label %24

; <label>:24:                                     ; preds = %17, %13
  %.1 = phi i8* [ %23, %17 ], [ %.0, %13 ]
  %25 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 6
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %24
  %29 = call i64 @strlen(i8* %26) #14
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds i8, i8* %.1, i32 1
  store i8 63, i8* %.1, align 1
  %32 = sext i32 %30 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %26, i64 %32, i1 false), !track !689
  %33 = sext i32 %30 to i64
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  br label %35

; <label>:35:                                     ; preds = %24, %28
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @char_needs_escaping(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = icmp eq i32 %3, 37
  br i1 %4, label %5, label %16

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = call zeroext i1 @c_isxdigit(i32 %8)
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds i8, i8* %0, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = call zeroext i1 @c_isxdigit(i32 %13)
  br i1 %14, label %33, label %15

; <label>:15:                                     ; preds = %10, %5
  br label %33

; <label>:16:                                     ; preds = %1
  %17 = load i8, i8* %0, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* @urlchr_table, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = and i32 %21, 2
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %32

; <label>:24:                                     ; preds = %16
  %25 = load i8, i8* %0, align 1
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds [256 x i8], [256 x i8]* @urlchr_table, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = and i32 %29, 1
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %24, %16
  br label %33

; <label>:33:                                     ; preds = %24, %10, %32, %15
  %.0 = phi i1 [ true, %15 ], [ false, %32 ], [ false, %10 ], [ true, %24 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @url_error(i8*, i32) #0 {
  %3 = icmp eq i32 %1, 1
  br i1 %3, label %4, label %25

; <label>:4:                                      ; preds = %2
  %5 = call noalias i8* @xstrdup(i8* %0)
  %6 = call i8* @strchr(i8* %5, i32 58) #14, !track !690
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %4
  store i8 0, i8* %6, align 1
  br label %9

; <label>:9:                                      ; preds = %8, %4
  %10 = getelementptr [6 x i8], [6 x i8]* @.str.4.1333, i32 0, i32 0
  %11 = call i32 @c_strcasecmp(i8* %5, i8* %10) #14
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %17, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr [30 x i8], [30 x i8]* @.str.5.1362, i32 0, i32 0
  %15 = call i8* @gettext(i8* %14) #8
  %16 = call i8* (i8*, ...) @aprintf(i8* %15)
  br label %24

; <label>:17:                                     ; preds = %9
  %18 = sext i32 %1 to i64
  %19 = getelementptr inbounds [9 x i8*], [9 x i8*]* @parse_errors, i64 0, i64 %18
  %20 = load i8*, i8** %19, align 8
  %21 = call i8* @gettext(i8* %20) #8, !track !691
  %22 = call i8* @quote(i8* %5)
  %23 = call i8* (i8*, ...) @aprintf(i8* %21, i8* %22)
  br label %24

; <label>:24:                                     ; preds = %13, %17
  %.01 = phi i8* [ %23, %17 ], [ %16, %13 ]
  call void @free(i8* %5) #8
  br label %31

; <label>:25:                                     ; preds = %2
  %26 = sext i32 %1 to i64
  %27 = getelementptr inbounds [9 x i8*], [9 x i8*]* @parse_errors, i64 0, i64 %26
  %28 = load i8*, i8** %27, align 8
  %29 = call i8* @gettext(i8* %28) #8, !track !692
  %30 = call noalias i8* @xstrdup(i8* %29)
  br label %31

; <label>:31:                                     ; preds = %25, %24
  %.0 = phi i8* [ %.01, %24 ], [ %30, %25 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @url_full_path(%struct.url*) #7 {
  %2 = call i32 @full_path_length(%struct.url* %0)
  %3 = add nsw i32 %2, 1
  %4 = sext i32 %3 to i64
  %5 = call noalias i8* @xmalloc(i64 %4)
  call void @full_path_write(%struct.url* %0, i8* %5)
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds i8, i8* %5, i64 %6
  store i8 0, i8* %7, align 1
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @url_set_dir(%struct.url*, i8*) #0 {
  %3 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %4 = load i8*, i8** %3, align 8
  call void @free(i8* %4) #8
  %5 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  store i8* null, i8** %5, align 8
  %6 = call noalias i8* @xstrdup(i8* %1)
  %7 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  store i8* %6, i8** %7, align 8
  call void @sync_path(%struct.url* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sync_path(%struct.url*) #0 {
  %2 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %3 = load i8*, i8** %2, align 8
  call void @free(i8* %3) #8
  %4 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %6 = load i8*, i8** %5, align 8
  %7 = call i8* @url_escape_dir(i8* %6)
  %8 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %9 = load i8*, i8** %8, align 8
  %10 = call i8* @url_escape_1(i8* %9, i8 zeroext 3, i1 zeroext true)
  %11 = load i8, i8* %7, align 1
  %12 = icmp ne i8 %11, 0
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %1
  %14 = call noalias i8* @xstrdup(i8* %10)
  br label %32

; <label>:15:                                     ; preds = %1
  %16 = call i64 @strlen(i8* %7) #14
  %17 = trunc i64 %16 to i32
  %18 = call i64 @strlen(i8* %10) #14
  %19 = trunc i64 %18 to i32
  %20 = add nsw i32 %17, 1
  %21 = add nsw i32 %20, %19
  %22 = add nsw i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = call noalias i8* @xmalloc(i64 %23)
  %25 = sext i32 %17 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %7, i64 %25, i1 false), !track !693
  %26 = sext i32 %17 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = getelementptr inbounds i8, i8* %27, i32 1
  store i8 47, i8* %27, align 1
  %29 = sext i32 %19 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %10, i64 %29, i1 false), !track !694
  %30 = sext i32 %19 to i64
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  store i8 0, i8* %31, align 1
  br label %32

; <label>:32:                                     ; preds = %15, %13
  %.0 = phi i8* [ %24, %15 ], [ %14, %13 ]
  %33 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  store i8* %.0, i8** %33, align 8
  %34 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %35 = load i8*, i8** %34, align 8
  %36 = icmp ne i8* %7, %35
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %32
  call void @free(i8* %7) #8
  br label %38

; <label>:38:                                     ; preds = %37, %32
  %39 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %40 = load i8*, i8** %39, align 8
  %41 = icmp ne i8* %10, %40
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %38
  call void @free(i8* %10) #8
  br label %43

; <label>:43:                                     ; preds = %38, %42
  %44 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  call void @free(i8* %45) #8
  %46 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  store i8* null, i8** %46, align 8
  %47 = call i8* @url_string(%struct.url* %0, i32 0)
  %48 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  store i8* %47, i8** %48, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @url_escape_dir(i8*) #7 {
  %2 = call i8* @url_escape_1(i8* %0, i8 zeroext 3, i1 zeroext true)
  %3 = icmp eq i8* %2, %0
  br i1 %3, label %5, label %4

; <label>:4:                                      ; preds = %1
  call void @unescape_single_char(i8* %2, i8 signext 47)
  br label %5

; <label>:5:                                      ; preds = %1, %4
  %.0 = phi i8* [ %2, %4 ], [ %0, %1 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @url_set_file(%struct.url*, i8*) #0 {
  %3 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %4 = load i8*, i8** %3, align 8
  call void @free(i8* %4) #8
  %5 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  store i8* null, i8** %5, align 8
  %6 = call noalias i8* @xstrdup(i8* %1)
  %7 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  store i8* %6, i8** %7, align 8
  call void @sync_path(%struct.url* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @url_free(%struct.url*) #0 {
  %2 = icmp ne %struct.url* %0, null
  br i1 %2, label %3, label %42

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 12
  %5 = load i8, i8* %4, align 8
  %6 = trunc i8 %5 to i1
  %7 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %8 = load i8*, i8** %7, align 8
  br i1 %6, label %9, label %11

; <label>:9:                                      ; preds = %3
  call void @idn_free(i8* %8)
  %10 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  store i8* null, i8** %10, align 8
  br label %13

; <label>:11:                                     ; preds = %3
  call void @free(i8* %8) #8
  %12 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  store i8* null, i8** %12, align 8
  br label %13

; <label>:13:                                     ; preds = %9, %11
  %14 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %15 = load i8*, i8** %14, align 8
  call void @free(i8* %15) #8
  %16 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  store i8* null, i8** %16, align 8
  %17 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @free(i8* %18) #8
  %19 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 0
  store i8* null, i8** %19, align 8
  %20 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 5
  %21 = load i8*, i8** %20, align 8
  call void @free(i8* %21) #8
  %22 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 5
  store i8* null, i8** %22, align 8
  %23 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 6
  %24 = load i8*, i8** %23, align 8
  call void @free(i8* %24) #8
  %25 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 6
  store i8* null, i8** %25, align 8
  %26 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 7
  %27 = load i8*, i8** %26, align 8
  call void @free(i8* %27) #8
  %28 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 7
  store i8* null, i8** %28, align 8
  %29 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  %30 = load i8*, i8** %29, align 8
  call void @free(i8* %30) #8
  %31 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 10
  store i8* null, i8** %31, align 8
  %32 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 11
  %33 = load i8*, i8** %32, align 8
  call void @free(i8* %33) #8
  %34 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 11
  store i8* null, i8** %34, align 8
  %35 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  %36 = load i8*, i8** %35, align 8
  call void @free(i8* %36) #8
  %37 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 8
  store i8* null, i8** %37, align 8
  %38 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %39 = load i8*, i8** %38, align 8
  call void @free(i8* %39) #8
  %40 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  store i8* null, i8** %40, align 8
  %41 = bitcast %struct.url* %0 to i8*
  call void @free(i8* %41) #8
  br label %42

; <label>:42:                                     ; preds = %13, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mkalldirs(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !695
  %3 = call i64 @strlen(i8* %0) #14
  %4 = getelementptr inbounds i8, i8* %0, i64 %3
  br label %5

; <label>:5:                                      ; preds = %5, %1
  %.01 = phi i8* [ %4, %1 ], [ %10, %5 ]
  call void @unroll_loop(i32 265)
  %6 = load i8, i8* %.01, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 47
  %9 = icmp ne i8* %.01, %0
  %spec.select = select i1 %8, i1 %9, i1 false
  %10 = getelementptr inbounds i8, i8* %.01, i32 -1
  br i1 %spec.select, label %5, label %11

; <label>:11:                                     ; preds = %5
  %.01.lcssa = phi i8* [ %.01, %5 ]
  %12 = icmp eq i8* %.01.lcssa, %0
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %11
  %14 = load i8, i8* %.01.lcssa, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp ne i32 %15, 47
  br i1 %16, label %44, label %17

; <label>:17:                                     ; preds = %13, %11
  %18 = call i8* @strdupdelim(i8* %0, i8* %.01.lcssa)
  %19 = call i32 @stat(i8* %18, %struct.stat* %2) #8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %35

; <label>:21:                                     ; preds = %17
  %22 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 61440
  %25 = icmp eq i32 %24, 16384
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %21
  call void @free(i8* %18) #8
  br label %44

; <label>:27:                                     ; preds = %21
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %29 = load i8, i8* %28, align 1
  %30 = trunc i8 %29 to i1
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %27
  %32 = getelementptr [42 x i8], [42 x i8]* @.str.6.1382, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %32, i8* %18)
  br label %33

; <label>:33:                                     ; preds = %27, %31
  %34 = call i32 @unlink(i8* %18) #8
  br label %35

; <label>:35:                                     ; preds = %33, %17
  %36 = call i32 @make_directory(i8* %18)
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %43

; <label>:38:                                     ; preds = %35
  %39 = call i32* @__errno_location() #15
  %40 = load i32, i32* %39, align 4
  %41 = call i8* @strerror(i32 %40) #8
  %42 = getelementptr [7 x i8], [7 x i8]* @.str.7.1383, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %42, i8* %18, i8* %41)
  br label %43

; <label>:43:                                     ; preds = %35, %38
  call void @free(i8* %18) #8
  br label %44

; <label>:44:                                     ; preds = %13, %43, %26
  %.0 = phi i32 [ 0, %26 ], [ %36, %43 ], [ 0, %13 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @url_file_name(%struct.url*, i8*) #7 {
  %3 = alloca %struct.logvprintf_state, align 8, !track !696
  %4 = alloca %struct.logvprintf_state, align 8, !track !697
  %5 = alloca [24 x i8], align 16, !track !698
  %6 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  store i8* null, i8** %6, align 8
  %7 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 1
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 1
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 2
  store i32 0, i32* %11, align 4
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 25
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ne i8* %13, null
  %15 = getelementptr [11 x i8], [11 x i8]* @.str.8.1386, i32 0, i32 0
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 25
  %17 = load i8*, i8** %16, align 8
  %.0 = select i1 %14, i8* %17, i8* %15
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %21, label %24

; <label>:21:                                     ; preds = %2
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %23 = load i8*, i8** %22, align 8
  call void @append_string(i8* %23, %struct.logvprintf_state* %3)
  br label %24

; <label>:24:                                     ; preds = %21, %2
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %26 = load i8, i8* %25, align 8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %28, label %85

; <label>:28:                                     ; preds = %24
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 16
  %30 = load i8, i8* %29, align 1
  %31 = trunc i8 %30 to i1
  br i1 %31, label %32, label %44

; <label>:32:                                     ; preds = %28
  %33 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %32
  call void @append_char(i8 signext 47, %struct.logvprintf_state* %3)
  br label %37

; <label>:37:                                     ; preds = %36, %32
  %38 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [5 x %struct.scheme_data], [5 x %struct.scheme_data]* @supported_schemes, i64 0, i64 %40
  %42 = getelementptr inbounds %struct.scheme_data, %struct.scheme_data* %41, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @append_string(i8* %43, %struct.logvprintf_state* %3)
  br label %44

; <label>:44:                                     ; preds = %37, %28
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 15
  %46 = load i8, i8* %45, align 8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %48, label %84

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %53

; <label>:52:                                     ; preds = %48
  call void @append_char(i8 signext 47, %struct.logvprintf_state* %3)
  br label %53

; <label>:53:                                     ; preds = %52, %48
  %54 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr [3 x i8], [3 x i8]* @.str.9.1387, i32 0, i32 0
  %57 = call i32 @strcmp(i8* %55, i8* %56) #14
  %58 = icmp ne i32 0, %57
  br i1 %58, label %59, label %62

; <label>:59:                                     ; preds = %53
  %60 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 2
  %61 = load i8*, i8** %60, align 8
  call void @append_string(i8* %61, %struct.logvprintf_state* %3)
  br label %64

; <label>:62:                                     ; preds = %53
  %63 = getelementptr [7 x i8], [7 x i8]* @.str.10.1388, i32 0, i32 0
  call void @append_string(i8* %63, %struct.logvprintf_state* %3)
  br label %64

; <label>:64:                                     ; preds = %62, %59
  %65 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 1
  %68 = load i32, i32* %67, align 8
  %69 = call i32 @scheme_default_port(i32 %68)
  %70 = icmp ne i32 %66, %69
  br i1 %70, label %71, label %84

; <label>:71:                                     ; preds = %64
  %72 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i32 0, i32 0
  %73 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 3
  %74 = load i32, i32* %73, align 8
  %75 = sext i32 %74 to i64
  %76 = call i8* @number_to_string(i8* %72, i64 %75)
  %77 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  %78 = load i32, i32* %77, align 8
  %79 = icmp ne i32 %78, 2
  %80 = zext i1 %79 to i64
  %81 = select i1 %79, i32 58, i32 43
  %82 = trunc i32 %81 to i8
  call void @append_char(i8 signext %82, %struct.logvprintf_state* %3)
  %83 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i32 0, i32 0
  call void @append_string(i8* %83, %struct.logvprintf_state* %3)
  br label %84

; <label>:84:                                     ; preds = %64, %71, %44
  call void @append_dir_structure(%struct.url* %0, %struct.logvprintf_state* %3)
  br label %85

; <label>:85:                                     ; preds = %84, %24
  %86 = icmp ne i8* %1, null
  br i1 %86, label %120, label %87

; <label>:87:                                     ; preds = %85
  %88 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %89 = load i8*, i8** %88, align 8
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %93, label %96

; <label>:93:                                     ; preds = %87
  %94 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 9
  %95 = load i8*, i8** %94, align 8
  br label %96

; <label>:96:                                     ; preds = %87, %93
  %97 = phi i8* [ %95, %93 ], [ %.0, %87 ]
  %98 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 6
  %99 = load i8*, i8** %98, align 8
  %100 = icmp ne i8* %99, null
  br i1 %100, label %101, label %116

; <label>:101:                                    ; preds = %96
  %102 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  %103 = load i32, i32* %102, align 8
  %104 = icmp ne i32 %103, 1
  %105 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  %106 = load i32, i32* %105, align 8
  %107 = icmp ne i32 %106, 2
  %108 = select i1 %104, i1 %107, i1 false
  %109 = zext i1 %108 to i64
  %110 = getelementptr [2 x i8], [2 x i8]* @.str.11.1389, i32 0, i32 0
  %111 = getelementptr [2 x i8], [2 x i8]* @.str.12.1390, i32 0, i32 0
  %112 = select i1 %108, i8* %110, i8* %111
  %113 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 6
  %114 = load i8*, i8** %113, align 8
  %115 = call i8* (i8*, ...) @concat_strings(i8* %97, i8* %112, i8* %114, i8* null)
  br label %124

; <label>:116:                                    ; preds = %96
  %117 = call i64 @strlen(i8* %97) #14
  %118 = getelementptr inbounds i8, i8* %97, i64 %117
  %119 = call i8* @strdupdelim(i8* %97, i8* %118)
  br label %124

; <label>:120:                                    ; preds = %85
  %121 = call i64 @strlen(i8* %1) #14
  %122 = getelementptr inbounds i8, i8* %1, i64 %121
  %123 = call i8* @strdupdelim(i8* %1, i8* %122)
  br label %124

; <label>:124:                                    ; preds = %101, %116, %120
  %.1 = phi i8* [ %123, %120 ], [ %115, %101 ], [ %119, %116 ]
  %125 = call i64 @strlen(i8* %.1) #14
  %126 = getelementptr inbounds i8, i8* %.1, i64 %125
  call void @append_uri_pathel(i8* %.1, i8* %126, i1 zeroext false, %struct.logvprintf_state* %4)
  call void @append_char(i8 signext 0, %struct.logvprintf_state* %4)
  %127 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %130 = load i32, i32* %129, align 4
  %131 = call i64 @get_max_length(i8* %128, i32 %130, i32 3)
  %132 = sub nsw i64 %131, 19
  %133 = icmp ugt i64 %132, 0
  br i1 %133, label %134, label %151

; <label>:134:                                    ; preds = %124
  %135 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  %136 = load i8*, i8** %135, align 8
  %137 = call i64 @strlen(i8* %136) #14
  %138 = icmp ugt i64 %137, %132
  br i1 %138, label %139, label %151

; <label>:139:                                    ; preds = %134
  %140 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = call i64 @strlen(i8* %141) #14
  %143 = getelementptr [40 x i8], [40 x i8]* @.str.13.1391, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %143, i64 %142)
  %144 = getelementptr [22 x i8], [22 x i8]* @.str.14.1392, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %144)
  %145 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 %132
  store i8 0, i8* %147, align 1
  %148 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr [17 x i8], [17 x i8]* @.str.15.1393, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %150, i8* %149)
  br label %151

; <label>:151:                                    ; preds = %124, %134, %139
  call void @free(i8* %.1) #8
  %152 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %153 = load i32, i32* %152, align 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %156

; <label>:155:                                    ; preds = %151
  call void @append_char(i8 signext 47, %struct.logvprintf_state* %3)
  br label %156

; <label>:156:                                    ; preds = %155, %151
  %157 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  call void @append_string(i8* %158, %struct.logvprintf_state* %3)
  %159 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  %160 = load i8*, i8** %159, align 8
  %161 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  call void @free(i8* %162) #8
  %163 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %4, i32 0, i32 0
  store i8* null, i8** %163, align 8
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %165 = load i8, i8* %164, align 2
  %166 = trunc i8 %165 to i1
  br i1 %166, label %187, label %167

; <label>:167:                                    ; preds = %156
  %168 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 59
  %169 = load i8, i8* %168, align 1
  %170 = trunc i8 %169 to i1
  br i1 %170, label %187, label %171

; <label>:171:                                    ; preds = %167
  %172 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 95
  %173 = load i8, i8* %172, align 4
  %174 = trunc i8 %173 to i1
  br i1 %174, label %187, label %175

; <label>:175:                                    ; preds = %171
  %176 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %177 = load i8, i8* %176, align 8
  %178 = trunc i8 %177 to i1
  br i1 %178, label %187, label %179

; <label>:179:                                    ; preds = %175
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %181 = load i8*, i8** %180, align 8
  %182 = icmp ne i8* %181, null
  br i1 %182, label %187, label %183

; <label>:183:                                    ; preds = %179
  %184 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 98
  %185 = load i32, i32* %184, align 8
  %186 = icmp sgt i32 %185, 0
  br i1 %186, label %187, label %191

; <label>:187:                                    ; preds = %183, %179, %175, %171, %167, %156
  %188 = call zeroext i1 @file_exists_p(i8* %160)
  br i1 %188, label %189, label %195

; <label>:189:                                    ; preds = %187
  %190 = call zeroext i1 @file_non_directory_p(i8* %160)
  br i1 %190, label %195, label %191

; <label>:191:                                    ; preds = %189, %183
  %192 = call i8* @unique_name(i8* %160, i1 zeroext true)
  %193 = icmp ne i8* %192, %160
  br i1 %193, label %194, label %195

; <label>:194:                                    ; preds = %191
  call void @free(i8* %160) #8
  br label %195

; <label>:195:                                    ; preds = %191, %194, %187, %189
  %.02 = phi i8* [ %160, %189 ], [ %160, %187 ], [ %192, %194 ], [ %192, %191 ]
  ret i8* %.02
}

; Function Attrs: noinline nounwind uwtable
define internal void @append_string(i8*, %struct.logvprintf_state*) #0 {
  %3 = call i64 @strlen(i8* %0) #14
  %4 = trunc i64 %3 to i32
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %43

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, %4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = icmp slt i64 %13, %10
  br i1 %14, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 354)
  %15 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = shl i32 %16, 1
  %18 = sext i32 %17 to i64
  %19 = icmp slt i64 %18, 16
  %spec.select = select i1 %19, i64 16, i64 %18
  %20 = trunc i64 %spec.select to i32
  %21 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 1
  store i32 %20, i32* %21, align 8
  %22 = load i32, i32* %11, align 8
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %23, %10
  br i1 %24, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i64 [ %spec.select, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %6
  %.0.lcssa = phi i64 [ 0, %6 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %25 = icmp ne i64 %.0.lcssa, 0
  br i1 %25, label %26, label %32

; <label>:26:                                     ; preds = %._crit_edge
  %27 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = mul i64 %.0.lcssa, 1
  %30 = call i8* @xrealloc(i8* %28, i64 %29)
  %31 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 0
  store i8* %30, i8** %31, align 8
  br label %32

; <label>:32:                                     ; preds = %26, %._crit_edge
  %33 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %34, i64 %37
  %39 = sext i32 %4 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %0, i64 %39, i1 false), !track !699
  %40 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %41, %4
  store i32 %42, i32* %40, align 4
  br label %43

; <label>:43:                                     ; preds = %32, %2
  call void @append_null(%struct.logvprintf_state* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @append_char(i8 signext, %struct.logvprintf_state*) #0 {
  %3 = icmp ne i8 %0, 0
  br i1 %3, label %4, label %40

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, 1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = icmp slt i64 %11, %8
  br i1 %12, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 355)
  %13 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = shl i32 %14, 1
  %16 = sext i32 %15 to i64
  %17 = icmp slt i64 %16, 16
  %spec.select = select i1 %17, i64 16, i64 %16
  %18 = trunc i64 %spec.select to i32
  %19 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 1
  store i32 %18, i32* %19, align 8
  %20 = load i32, i32* %9, align 8
  %21 = sext i32 %20 to i64
  %22 = icmp slt i64 %21, %8
  br i1 %22, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i64 [ %spec.select, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %.0.lcssa = phi i64 [ 0, %4 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %23 = icmp ne i64 %.0.lcssa, 0
  br i1 %23, label %24, label %30

; <label>:24:                                     ; preds = %._crit_edge
  %25 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = mul i64 %.0.lcssa, 1
  %28 = call i8* @xrealloc(i8* %26, i64 %27)
  %29 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 0
  store i8* %28, i8** %29, align 8
  br label %30

; <label>:30:                                     ; preds = %24, %._crit_edge
  %31 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  store i8 %0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %37, align 4
  br label %40

; <label>:40:                                     ; preds = %30, %2
  call void @append_null(%struct.logvprintf_state* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @append_dir_structure(%struct.url*, %struct.logvprintf_state*) #0 {
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 14
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.url, %struct.url* %0, i32 0, i32 4
  %6 = load i8*, i8** %5, align 8
  %7 = call i8* @strchr(i8* %6, i32 47) #14, !track !700
  %8 = icmp ne i8* %7, null
  br i1 %8, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %19
  %9 = phi i8* [ %21, %19 ], [ %7, %.lr.ph.preheader ]
  %.03 = phi i32 [ %10, %19 ], [ %4, %.lr.ph.preheader ]
  %.012 = phi i8* [ %20, %19 ], [ %6, %.lr.ph.preheader ]
  call void @unroll_loop(i32 356)
  %10 = add nsw i32 %.03, -1
  %11 = icmp sgt i32 %.03, 0
  %12 = icmp eq i8* %.012, %9
  %or.cond = or i1 %11, %12
  br i1 %or.cond, label %19, label %13

; <label>:13:                                     ; preds = %.lr.ph
  %14 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %1, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %13
  call void @append_char(i8 signext 47, %struct.logvprintf_state* %1)
  br label %18

; <label>:18:                                     ; preds = %17, %13
  call void @append_uri_pathel(i8* %.012, i8* %9, i1 zeroext true, %struct.logvprintf_state* %1)
  br label %19

; <label>:19:                                     ; preds = %.lr.ph, %18
  %20 = getelementptr inbounds i8, i8* %9, i64 1
  %21 = call i8* @strchr(i8* %20, i32 47) #14, !track !701
  %22 = icmp ne i8* %21, null
  br i1 %22, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %19
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @append_uri_pathel(i8*, i8*, i1 zeroext, %struct.logvprintf_state*) #0 {
  %5 = zext i1 %2 to i8
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

; <label>:9:                                      ; preds = %4
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 138
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 1
  %. = select i1 %12, i32 2, i32 4
  br label %13

; <label>:13:                                     ; preds = %4, %9
  %.113 = phi i32 [ %., %9 ], [ 1, %4 ]
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 139
  %15 = load i8, i8* %14, align 4
  %16 = trunc i8 %15 to i1
  %17 = or i32 %.113, 8
  %spec.select = select i1 %16, i32 %17, i32 %.113
  %18 = trunc i8 %5 to i1
  br i1 %18, label %19, label %32

; <label>:19:                                     ; preds = %13
  %20 = ptrtoint i8* %1 to i64
  %21 = ptrtoint i8* %0 to i64
  %22 = sub i64 %20, %21
  %23 = trunc i64 %22 to i32
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = alloca i8, i64 %25, align 16, !track !702
  %27 = sext i32 %23 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %0, i64 %27, i1 false), !track !703
  %28 = sext i32 %23 to i64
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  store i8 0, i8* %29, align 1
  call void @url_unescape(i8* %26)
  %30 = call i64 @strlen(i8* %26) #14
  %31 = getelementptr inbounds i8, i8* %26, i64 %30
  br label %32

; <label>:32:                                     ; preds = %19, %13
  %.01 = phi i8* [ %31, %19 ], [ %1, %13 ]
  %.0 = phi i8* [ %26, %19 ], [ %0, %13 ]
  %33 = ptrtoint i8* %.01 to i64
  %34 = ptrtoint i8* %.0 to i64
  %35 = sub i64 %33, %34
  %36 = icmp eq i64 %35, 2
  br i1 %36, label %37, label %51

; <label>:37:                                     ; preds = %32
  %38 = getelementptr inbounds i8, i8* %.0, i64 0
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 46
  br i1 %41, label %42, label %51

; <label>:42:                                     ; preds = %37
  %43 = getelementptr inbounds i8, i8* %.0, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp eq i32 %45, 46
  br i1 %46, label %47, label %51

; <label>:47:                                     ; preds = %42
  %48 = getelementptr [7 x i8], [7 x i8]* @.str.10.1388, i32 0, i32 0
  %49 = getelementptr inbounds i8, i8* %48, i64 6
  %50 = getelementptr [7 x i8], [7 x i8]* @.str.10.1388, i32 0, i32 0
  br label %51

; <label>:51:                                     ; preds = %47, %42, %37, %32
  %.12 = phi i8* [ %49, %47 ], [ %.01, %42 ], [ %.01, %37 ], [ %.01, %32 ]
  %.1 = phi i8* [ %50, %47 ], [ %.0, %42 ], [ %.0, %37 ], [ %.0, %32 ]
  %52 = icmp ult i8* %.1, %.12
  br i1 %52, label %.lr.ph30.preheader, label %._crit_edge31

.lr.ph30.preheader:                               ; preds = %51
  br label %.lr.ph30

.lr.ph30:                                         ; preds = %.lr.ph30.preheader, %70
  %.0628 = phi i8* [ %71, %70 ], [ %.1, %.lr.ph30.preheader ]
  %.0826 = phi i32 [ %.19, %70 ], [ 0, %.lr.ph30.preheader ]
  call void @unroll_loop(i32 357)
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 140
  %54 = load i8, i8* %53, align 1
  %55 = trunc i8 %54 to i1
  br i1 %55, label %56, label %60

; <label>:56:                                     ; preds = %.lr.ph30
  %57 = load i8, i8* %.0628, align 1
  %58 = zext i8 %57 to i32
  %59 = call zeroext i1 @c_isascii(i32 %58)
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %56, %.lr.ph30
  %61 = load i8, i8* %.0628, align 1
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [160 x i8], [96 x i8] }>* @filechr_table to [256 x i8]*), i64 0, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = and i32 %65, %spec.select
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %70

; <label>:68:                                     ; preds = %60, %56
  %69 = add nsw i32 %.0826, 1
  br label %70

; <label>:70:                                     ; preds = %60, %68
  %.19 = phi i32 [ %69, %68 ], [ %.0826, %60 ]
  %71 = getelementptr inbounds i8, i8* %.0628, i32 1
  %exitcond = icmp ne i8* %71, %.12
  br i1 %exitcond, label %.lr.ph30, label %._crit_edge31.loopexit

._crit_edge31.loopexit:                           ; preds = %70
  %.08.lcssa.ph = phi i32 [ %.19, %70 ]
  br label %._crit_edge31

._crit_edge31:                                    ; preds = %._crit_edge31.loopexit, %51
  %.08.lcssa = phi i32 [ 0, %51 ], [ %.08.lcssa.ph, %._crit_edge31.loopexit ]
  %72 = ptrtoint i8* %.12 to i64
  %73 = ptrtoint i8* %.1 to i64
  %74 = sub i64 %72, %73
  %75 = mul nsw i32 2, %.08.lcssa
  %76 = sext i32 %75 to i64
  %77 = add nsw i64 %74, %76
  %78 = trunc i64 %77 to i32
  %79 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, %78
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 1
  %84 = load i32, i32* %83, align 8
  %85 = sext i32 %84 to i64
  %86 = icmp slt i64 %85, %82
  br i1 %86, label %.lr.ph24.preheader, label %._crit_edge25

.lr.ph24.preheader:                               ; preds = %._crit_edge31
  br label %.lr.ph24

.lr.ph24:                                         ; preds = %.lr.ph24.preheader, %.lr.ph24
  call void @unroll_loop(i32 358)
  %87 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 1
  %88 = load i32, i32* %87, align 8
  %89 = shl i32 %88, 1
  %90 = sext i32 %89 to i64
  %91 = icmp slt i64 %90, 16
  %spec.select1 = select i1 %91, i64 16, i64 %90
  %92 = trunc i64 %spec.select1 to i32
  %93 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 1
  store i32 %92, i32* %93, align 8
  %94 = load i32, i32* %83, align 8
  %95 = sext i32 %94 to i64
  %96 = icmp slt i64 %95, %82
  br i1 %96, label %.lr.ph24, label %._crit_edge25.loopexit

._crit_edge25.loopexit:                           ; preds = %.lr.ph24
  %.010.lcssa.ph = phi i64 [ %spec.select1, %.lr.ph24 ]
  br label %._crit_edge25

._crit_edge25:                                    ; preds = %._crit_edge25.loopexit, %._crit_edge31
  %.010.lcssa = phi i64 [ 0, %._crit_edge31 ], [ %.010.lcssa.ph, %._crit_edge25.loopexit ]
  %97 = icmp ne i64 %.010.lcssa, 0
  br i1 %97, label %98, label %104

; <label>:98:                                     ; preds = %._crit_edge25
  %99 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = mul i64 %.010.lcssa, 1
  %102 = call i8* @xrealloc(i8* %100, i64 %101)
  %103 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  store i8* %102, i8** %103, align 8
  br label %104

; <label>:104:                                    ; preds = %98, %._crit_edge25
  %105 = icmp ne i32 %.08.lcssa, 0
  %106 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %109 = load i32, i32* %108, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %107, i64 %110
  br i1 %105, label %114, label %112

; <label>:112:                                    ; preds = %104
  %113 = sext i32 %78 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %.1, i64 %113, i1 false), !track !704
  br label %._crit_edge22

; <label>:114:                                    ; preds = %104
  %115 = icmp ult i8* %.1, %.12
  br i1 %115, label %.lr.ph21.preheader, label %._crit_edge22

.lr.ph21.preheader:                               ; preds = %114
  br label %.lr.ph21

.lr.ph21:                                         ; preds = %.lr.ph21.preheader, %155
  %.0418 = phi i8* [ %.15, %155 ], [ %111, %.lr.ph21.preheader ]
  %.1715 = phi i8* [ %156, %155 ], [ %.1, %.lr.ph21.preheader ]
  call void @unroll_loop(i32 359)
  %116 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 140
  %117 = load i8, i8* %116, align 1
  %118 = trunc i8 %117 to i1
  br i1 %118, label %119, label %123

; <label>:119:                                    ; preds = %.lr.ph21
  %120 = load i8, i8* %.1715, align 1
  %121 = zext i8 %120 to i32
  %122 = call zeroext i1 @c_isascii(i32 %121)
  br i1 %122, label %123, label %134

; <label>:123:                                    ; preds = %119, %.lr.ph21
  %124 = load i8, i8* %.1715, align 1
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [160 x i8], [96 x i8] }>* @filechr_table to [256 x i8]*), i64 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = and i32 %128, %spec.select
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %134, label %131

; <label>:131:                                    ; preds = %123
  %132 = load i8, i8* %.1715, align 1
  %133 = getelementptr inbounds i8, i8* %.0418, i32 1
  store i8 %132, i8* %.0418, align 1
  br label %155

; <label>:134:                                    ; preds = %123, %119
  %135 = load i8, i8* %.1715, align 1
  %136 = getelementptr inbounds i8, i8* %.0418, i32 1
  store i8 37, i8* %.0418, align 1
  %137 = zext i8 %135 to i32
  %138 = ashr i32 %137, 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = add nsw i32 %142, 0
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds i8, i8* %136, i32 1
  store i8 %144, i8* %136, align 1
  %146 = zext i8 %135 to i32
  %147 = and i32 %146, 15
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.17.1326, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = add nsw i32 %151, 0
  %153 = trunc i32 %152 to i8
  %154 = getelementptr inbounds i8, i8* %145, i32 1
  store i8 %153, i8* %145, align 1
  br label %155

; <label>:155:                                    ; preds = %131, %134
  %.15 = phi i8* [ %154, %134 ], [ %133, %131 ]
  %156 = getelementptr inbounds i8, i8* %.1715, i32 1
  %exitcond2 = icmp ne i8* %156, %.12
  br i1 %exitcond2, label %.lr.ph21, label %._crit_edge22.loopexit

._crit_edge22.loopexit:                           ; preds = %155
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %._crit_edge22.loopexit, %114, %112
  %157 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 141
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, 1
  br i1 %159, label %164, label %160

; <label>:160:                                    ; preds = %._crit_edge22
  %161 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 141
  %162 = load i32, i32* %161, align 8
  %163 = icmp eq i32 %162, 2
  br i1 %163, label %164, label %._crit_edge

; <label>:164:                                    ; preds = %160, %._crit_edge22
  %165 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  %166 = load i8*, i8** %165, align 8
  %167 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %168 = load i32, i32* %167, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %166, i64 %169
  %171 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 0
  %172 = load i8*, i8** %171, align 8
  %173 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %174 = load i32, i32* %173, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %172, i64 %175
  %177 = sext i32 %78 to i64
  %178 = getelementptr inbounds i8, i8* %176, i64 %177
  %179 = icmp ult i8* %170, %178
  br i1 %179, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %164
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %191
  %.0314 = phi i8* [ %192, %191 ], [ %170, %.lr.ph.preheader ]
  call void @unroll_loop(i32 360)
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 141
  %181 = load i32, i32* %180, align 8
  %182 = icmp eq i32 %181, 1
  %183 = load i8, i8* %.0314, align 1
  %184 = sext i8 %183 to i32
  br i1 %182, label %185, label %188

; <label>:185:                                    ; preds = %.lr.ph
  %186 = call i32 @c_tolower(i32 %184)
  %187 = trunc i32 %186 to i8
  store i8 %187, i8* %.0314, align 1
  br label %191

; <label>:188:                                    ; preds = %.lr.ph
  %189 = call i32 @c_toupper(i32 %184)
  %190 = trunc i32 %189 to i8
  store i8 %190, i8* %.0314, align 1
  br label %191

; <label>:191:                                    ; preds = %185, %188
  %192 = getelementptr inbounds i8, i8* %.0314, i32 1
  %193 = load i8*, i8** %171, align 8
  %194 = load i32, i32* %173, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %193, i64 %195
  %197 = getelementptr inbounds i8, i8* %196, i64 %177
  %198 = icmp ult i8* %192, %197
  br i1 %198, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %191
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %164, %160
  %199 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %3, i32 0, i32 2
  %200 = load i32, i32* %199, align 4
  %201 = add nsw i32 %200, %78
  store i32 %201, i32* %199, align 4
  call void @append_null(%struct.logvprintf_state* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @append_null(%struct.logvprintf_state*) #0 {
  %2 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = add nsw i32 %3, 1
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = icmp slt i64 %8, %5
  br i1 %9, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 361)
  %10 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = shl i32 %11, 1
  %13 = sext i32 %12 to i64
  %14 = icmp slt i64 %13, 16
  %spec.select = select i1 %14, i64 16, i64 %13
  %15 = trunc i64 %spec.select to i32
  %16 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 1
  store i32 %15, i32* %16, align 8
  %17 = load i32, i32* %6, align 8
  %18 = sext i32 %17 to i64
  %19 = icmp slt i64 %18, %5
  br i1 %19, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i64 [ %spec.select, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.0.lcssa = phi i64 [ 0, %1 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %20 = icmp ne i64 %.0.lcssa, 0
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %._crit_edge
  %22 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = mul i64 %.0.lcssa, 1
  %25 = call i8* @xrealloc(i8* %23, i64 %24)
  %26 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  store i8* %25, i8** %26, align 8
  br label %27

; <label>:27:                                     ; preds = %21, %._crit_edge
  %28 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.logvprintf_state, %struct.logvprintf_state* %0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %29, i64 %32
  store i8 0, i8* %33, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @uri_merge(i8*, i8*) #7 {
  %3 = call zeroext i1 @url_has_scheme(i8* %1)
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %2
  %5 = call noalias i8* @xstrdup(i8* %1)
  br label %199

; <label>:6:                                      ; preds = %2
  %7 = call i8* @path_end(i8* %0)
  %8 = call i64 @strlen(i8* %1) #14
  %9 = trunc i64 %8 to i32
  %10 = load i8, i8* %1, align 1
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %14, label %12

; <label>:12:                                     ; preds = %6
  %13 = call noalias i8* @xstrdup(i8* %0)
  br label %199

; <label>:14:                                     ; preds = %6
  %15 = load i8, i8* %1, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 63
  br i1 %17, label %18, label %34

; <label>:18:                                     ; preds = %14
  %19 = ptrtoint i8* %7 to i64
  %20 = ptrtoint i8* %0 to i64
  %21 = sub i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = add nsw i32 %22, %9
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = call noalias i8* @xmalloc(i64 %25)
  %27 = sext i32 %22 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %0, i64 %27, i1 false), !track !705
  %28 = sext i32 %22 to i64
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = sext i32 %9 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %1, i64 %30, i1 false), !track !706
  %31 = add nsw i32 %22, %9
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %26, i64 %32
  store i8 0, i8* %33, align 1
  br label %199

; <label>:34:                                     ; preds = %14
  %35 = load i8, i8* %1, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 35
  br i1 %37, label %38, label %60

; <label>:38:                                     ; preds = %34
  %39 = call i8* @strchr(i8* %0, i32 35) #14, !track !707
  %40 = icmp ne i8* %39, null
  br i1 %40, label %44, label %41

; <label>:41:                                     ; preds = %38
  %42 = call i64 @strlen(i8* %0) #14
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  br label %44

; <label>:44:                                     ; preds = %41, %38
  %.013 = phi i8* [ %39, %38 ], [ %43, %41 ]
  %45 = ptrtoint i8* %.013 to i64
  %46 = ptrtoint i8* %0 to i64
  %47 = sub i64 %45, %46
  %48 = trunc i64 %47 to i32
  %49 = add nsw i32 %48, %9
  %50 = add nsw i32 %49, 1
  %51 = sext i32 %50 to i64
  %52 = call noalias i8* @xmalloc(i64 %51)
  %53 = sext i32 %48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %0, i64 %53, i1 false), !track !708
  %54 = sext i32 %48 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = sext i32 %9 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %1, i64 %56, i1 false), !track !709
  %57 = add nsw i32 %48, %9
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %52, i64 %58
  store i8 0, i8* %59, align 1
  br label %199

; <label>:60:                                     ; preds = %34
  %61 = load i8, i8* %1, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp eq i32 %62, 47
  br i1 %63, label %64, label %100

; <label>:64:                                     ; preds = %60
  %65 = getelementptr inbounds i8, i8* %1, i64 1
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp eq i32 %67, 47
  br i1 %68, label %69, label %100

; <label>:69:                                     ; preds = %64
  %70 = ptrtoint i8* %7 to i64
  %71 = ptrtoint i8* %0 to i64
  %72 = sub i64 %70, %71
  %73 = call i8* @memchr(i8* %0, i32 47, i64 %72) #14, !track !710
  %74 = icmp ne i8* %73, null
  br i1 %74, label %75, label %80

; <label>:75:                                     ; preds = %69
  %76 = getelementptr inbounds i8, i8* %73, i64 1
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = icmp eq i32 %78, 47
  br i1 %79, label %81, label %80

; <label>:80:                                     ; preds = %75, %69
  br label %81

; <label>:81:                                     ; preds = %75, %80
  %.012 = phi i8* [ %0, %80 ], [ %73, %75 ]
  %82 = ptrtoint i8* %.012 to i64
  %83 = ptrtoint i8* %0 to i64
  %84 = sub i64 %82, %83
  %85 = trunc i64 %84 to i32
  %86 = add nsw i32 %85, %9
  %87 = add nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = call noalias i8* @xmalloc(i64 %88)
  %90 = icmp ne i32 %85, 0
  br i1 %90, label %91, label %93

; <label>:91:                                     ; preds = %81
  %92 = sext i32 %85 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %0, i64 %92, i1 false), !track !711
  br label %93

; <label>:93:                                     ; preds = %91, %81
  %94 = sext i32 %85 to i64
  %95 = getelementptr inbounds i8, i8* %89, i64 %94
  %96 = sext i32 %9 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %95, i8* align 1 %1, i64 %96, i1 false), !track !712
  %97 = add nsw i32 %85, %9
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %89, i64 %98
  store i8 0, i8* %99, align 1
  br label %199

; <label>:100:                                    ; preds = %64, %60
  %101 = load i8, i8* %1, align 1
  %102 = sext i8 %101 to i32
  %103 = icmp eq i32 %102, 47
  %104 = ptrtoint i8* %7 to i64
  %105 = ptrtoint i8* %0 to i64
  %106 = sub i64 %104, %105
  br i1 %103, label %107, label %154

; <label>:107:                                    ; preds = %100
  %108 = call i8* @memchr(i8* %0, i32 47, i64 %106) #14, !track !713
  %109 = icmp ne i8* %108, null
  br i1 %109, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %107
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %117
  %110 = phi i8* [ %121, %117 ], [ %108, %.lr.ph.preheader ]
  %.0416 = phi i8 [ 1, %117 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 362)
  %111 = trunc i8 %.0416 to i1
  br i1 %111, label %.loopexit.loopexit, label %112

; <label>:112:                                    ; preds = %.lr.ph
  %113 = getelementptr inbounds i8, i8* %110, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = icmp eq i32 %115, 47
  br i1 %116, label %117, label %.loopexit.loopexit

; <label>:117:                                    ; preds = %112
  %118 = getelementptr inbounds i8, i8* %110, i64 2
  %119 = ptrtoint i8* %118 to i64
  %120 = sub i64 %104, %119
  %121 = call i8* @memchr(i8* %118, i32 47, i64 %120) #14, !track !714
  %122 = icmp ne i8* %121, null
  br i1 %122, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %112, %.lr.ph, %117
  %.04.lcssa.ph = phi i8 [ %.0416, %.lr.ph ], [ 1, %117 ], [ %.0416, %112 ]
  %.lcssa.ph = phi i8* [ %110, %.lr.ph ], [ %121, %117 ], [ %110, %112 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %107
  %.04.lcssa = phi i8 [ 0, %107 ], [ %.04.lcssa.ph, %.loopexit.loopexit ]
  %.lcssa = phi i8* [ %108, %107 ], [ %.lcssa.ph, %.loopexit.loopexit ]
  %magicptr2 = ptrtoint i8* %.lcssa to i64
  %cond = icmp eq i64 %magicptr2, 0
  br i1 %cond, label %123, label %129

; <label>:123:                                    ; preds = %.loopexit
  %124 = trunc i8 %.04.lcssa to i1
  br i1 %124, label %125, label %135

; <label>:125:                                    ; preds = %123
  %magicptr1 = ptrtoint i8* %.lcssa to i64
  %cond3 = icmp eq i64 %magicptr1, 0
  br i1 %cond3, label %126, label %129

; <label>:126:                                    ; preds = %125
  %127 = trunc i8 %.04.lcssa to i1
  br i1 %127, label %135, label %128

; <label>:128:                                    ; preds = %126
  %magicptr = ptrtoint i8* %.lcssa to i64
  %cond4 = icmp eq i64 %magicptr, 0
  br i1 %cond4, label %135, label %129

; <label>:129:                                    ; preds = %128, %125, %.loopexit
  %130 = trunc i8 %.04.lcssa to i1
  br i1 %130, label %131, label %135

; <label>:131:                                    ; preds = %129
  %132 = icmp ne i8* %.lcssa, null
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %131
  %134 = trunc i8 %.04.lcssa to i1
  %spec.select = select i1 %134, i8* %.lcssa, i8* null
  br label %135

; <label>:135:                                    ; preds = %133, %128, %126, %131, %129, %123
  %.311 = phi i8* [ %0, %123 ], [ %7, %126 ], [ %0, %129 ], [ null, %131 ], [ null, %128 ], [ %spec.select, %133 ]
  %136 = ptrtoint i8* %.311 to i64
  %137 = ptrtoint i8* %0 to i64
  %138 = sub i64 %136, %137
  %139 = trunc i64 %138 to i32
  %140 = add nsw i32 %139, %9
  %141 = add nsw i32 %140, 1
  %142 = sext i32 %141 to i64
  %143 = call noalias i8* @xmalloc(i64 %142)
  %144 = icmp ne i32 %139, 0
  br i1 %144, label %145, label %147

; <label>:145:                                    ; preds = %135
  %146 = sext i32 %139 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %143, i8* align 1 %0, i64 %146, i1 false), !track !715
  br label %147

; <label>:147:                                    ; preds = %145, %135
  %148 = sext i32 %139 to i64
  %149 = getelementptr inbounds i8, i8* %143, i64 %148
  %150 = sext i32 %9 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* align 1 %1, i64 %150, i1 false), !track !716
  %151 = add nsw i32 %139, %9
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %143, i64 %152
  store i8 0, i8* %153, align 1
  br label %199

; <label>:154:                                    ; preds = %100
  %155 = call i8* @memrchr(i8* %0, i32 47, i64 %106) #14
  %156 = icmp ne i8* %155, null
  br i1 %156, label %157, label %174

; <label>:157:                                    ; preds = %154
  %158 = getelementptr inbounds i8, i8* %0, i64 2
  %159 = icmp uge i8* %155, %158
  br i1 %159, label %160, label %172

; <label>:160:                                    ; preds = %157
  %161 = getelementptr inbounds i8, i8* %155, i64 -2
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = icmp eq i32 %163, 58
  br i1 %164, label %165, label %172

; <label>:165:                                    ; preds = %160
  %166 = getelementptr inbounds i8, i8* %155, i64 -1
  %167 = load i8, i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = icmp eq i32 %168, 47
  br i1 %169, label %170, label %172

; <label>:170:                                    ; preds = %165
  %171 = getelementptr inbounds i8, i8* %7, i64 1
  br label %174

; <label>:172:                                    ; preds = %165, %160, %157
  %173 = getelementptr inbounds i8, i8* %155, i64 1
  br label %174

; <label>:174:                                    ; preds = %170, %172, %154
  %.13 = phi i8 [ 0, %154 ], [ 1, %170 ], [ 0, %172 ]
  %.1 = phi i8* [ %0, %154 ], [ %171, %170 ], [ %173, %172 ]
  %175 = ptrtoint i8* %.1 to i64
  %176 = ptrtoint i8* %0 to i64
  %177 = sub i64 %175, %176
  %178 = trunc i64 %177 to i32
  %179 = add nsw i32 %178, %9
  %180 = add nsw i32 %179, 1
  %181 = sext i32 %180 to i64
  %182 = call noalias i8* @xmalloc(i64 %181)
  %183 = icmp ne i32 %178, 0
  br i1 %183, label %184, label %186

; <label>:184:                                    ; preds = %174
  %185 = sext i32 %178 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %182, i8* align 1 %0, i64 %185, i1 false), !track !717
  br label %186

; <label>:186:                                    ; preds = %184, %174
  %187 = trunc i8 %.13 to i1
  br i1 %187, label %188, label %192

; <label>:188:                                    ; preds = %186
  %189 = sub nsw i32 %178, 1
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %182, i64 %190
  store i8 47, i8* %191, align 1
  br label %192

; <label>:192:                                    ; preds = %188, %186
  %193 = sext i32 %178 to i64
  %194 = getelementptr inbounds i8, i8* %182, i64 %193
  %195 = sext i32 %9 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %194, i8* align 1 %1, i64 %195, i1 false), !track !718
  %196 = add nsw i32 %178, %9
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %182, i64 %197
  store i8 0, i8* %198, align 1
  br label %199

; <label>:199:                                    ; preds = %44, %147, %192, %93, %18, %12, %4
  %.0 = phi i8* [ %5, %4 ], [ %13, %12 ], [ %26, %18 ], [ %52, %44 ], [ %89, %93 ], [ %143, %147 ], [ %182, %192 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @path_end(i8*) #0 {
  %2 = call i32 @url_scheme(i8* %0)
  %3 = icmp eq i32 %2, 4
  %spec.select = select i1 %3, i32 0, i32 %2
  %4 = call i8* @init_seps(i32 %spec.select)
  %5 = getelementptr inbounds i8, i8* %4, i64 2
  %6 = call i8* @strpbrk_or_eos(i8* %0, i8* %5)
  ret i8* %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @schemes_are_similar_p(i32, i32) #0 {
  %3 = icmp eq i32 %0, %1
  br i1 %3, label %10, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp eq i32 %0, 0
  %6 = icmp eq i32 %1, 1
  %or.cond = and i1 %5, %6
  br i1 %or.cond, label %10, label %7

; <label>:7:                                      ; preds = %4
  %8 = icmp eq i32 %0, 1
  %9 = icmp eq i32 %1, 0
  %or.cond1 = and i1 %8, %9
  %spec.select = select i1 %or.cond1, i1 true, i1 false
  ret i1 %spec.select

; <label>:10:                                     ; preds = %4, %2
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @are_urls_equal(i8*, i8*) #0 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  br label %5

; <label>:5:                                      ; preds = %29, %2
  %.04 = phi i8* [ %1, %2 ], [ %33, %29 ]
  %.03 = phi i8* [ %0, %2 ], [ %31, %29 ]
  %.01 = phi i32 [ undef, %2 ], [ %.12, %29 ]
  %.0 = phi i32 [ undef, %2 ], [ %.1, %29 ]
  call void @unroll_loop(i32 363)
  %6 = load i8, i8* %.03, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %27

; <label>:9:                                      ; preds = %5
  %10 = load i8, i8* %.04, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %27

; <label>:13:                                     ; preds = %9
  %14 = call i32 @getchar_from_escaped_string(i8* %.03, i8* %3)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %13
  %17 = call i32 @getchar_from_escaped_string(i8* %.04, i8* %4)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %27

; <label>:19:                                     ; preds = %16
  %20 = load i8, i8* %3, align 1
  %21 = sext i8 %20 to i32
  %22 = call i32 @c_tolower(i32 %21)
  %23 = load i8, i8* %4, align 1
  %24 = sext i8 %23 to i32
  %25 = call i32 @c_tolower(i32 %24)
  %26 = icmp eq i32 %22, %25
  br label %27

; <label>:27:                                     ; preds = %19, %16, %13, %9, %5
  %.12 = phi i32 [ %14, %19 ], [ %14, %16 ], [ %14, %13 ], [ %.01, %9 ], [ %.01, %5 ]
  %.1 = phi i32 [ %17, %19 ], [ %17, %16 ], [ %.0, %13 ], [ %.0, %9 ], [ %.0, %5 ]
  %28 = phi i1 [ false, %16 ], [ false, %13 ], [ false, %9 ], [ false, %5 ], [ %26, %19 ]
  br i1 %28, label %29, label %34

; <label>:29:                                     ; preds = %27
  %30 = sext i32 %.12 to i64
  %31 = getelementptr inbounds i8, i8* %.03, i64 %30
  %32 = sext i32 %.1 to i64
  %33 = getelementptr inbounds i8, i8* %.04, i64 %32
  br label %5

; <label>:34:                                     ; preds = %27
  %.04.lcssa = phi i8* [ %.04, %27 ]
  %.03.lcssa = phi i8* [ %.03, %27 ]
  %35 = load i8, i8* %.03.lcssa, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

; <label>:38:                                     ; preds = %34
  %39 = load i8, i8* %.04.lcssa, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 0
  br label %42

; <label>:42:                                     ; preds = %38, %34
  %43 = phi i1 [ false, %34 ], [ %41, %38 ]
  %44 = zext i1 %43 to i64
  %45 = select i1 %43, i32 1, i32 0
  %46 = icmp ne i32 %45, 0
  ret i1 %46
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @getchar_from_escaped_string(i8*, i8*) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 0
  %4 = load i8, i8* %3, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %64

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds i8, i8* %0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = call zeroext i1 @c_isxdigit(i32 %10)
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %7
  %13 = getelementptr inbounds i8, i8* %0, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = call zeroext i1 @c_isxdigit(i32 %15)
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %12, %7
  store i8 37, i8* %1, align 1
  br label %67

; <label>:18:                                     ; preds = %12
  %19 = getelementptr inbounds i8, i8* %0, i64 2
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %67, label %23

; <label>:23:                                     ; preds = %18
  %24 = getelementptr inbounds i8, i8* %0, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp slt i32 %26, 65
  %28 = getelementptr inbounds i8, i8* %0, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  br i1 %27, label %31, label %33

; <label>:31:                                     ; preds = %23
  %32 = sub nsw i32 %30, 48
  br label %37

; <label>:33:                                     ; preds = %23
  %34 = call i32 @c_toupper(i32 %30)
  %35 = sub nsw i32 %34, 65
  %36 = add nsw i32 %35, 10
  br label %37

; <label>:37:                                     ; preds = %33, %31
  %38 = phi i32 [ %32, %31 ], [ %36, %33 ]
  %39 = shl i32 %38, 4
  %40 = getelementptr inbounds i8, i8* %0, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp slt i32 %42, 65
  %44 = getelementptr inbounds i8, i8* %0, i64 2
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  br i1 %43, label %47, label %49

; <label>:47:                                     ; preds = %37
  %48 = sub nsw i32 %46, 48
  br label %53

; <label>:49:                                     ; preds = %37
  %50 = call i32 @c_toupper(i32 %46)
  %51 = sub nsw i32 %50, 65
  %52 = add nsw i32 %51, 10
  br label %53

; <label>:53:                                     ; preds = %49, %47
  %54 = phi i32 [ %48, %47 ], [ %52, %49 ]
  %55 = add nsw i32 %39, %54
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %1, align 1
  %57 = load i8, i8* %1, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [256 x i8], [256 x i8]* @urlchr_table, i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = and i32 %61, 1
  %63 = icmp ne i32 %62, 0
  %spec.store.select = select i1 %63, i8 37, i8 %56
  store i8 %spec.store.select, i8* %1, align 1
  %spec.select = select i1 %63, i32 1, i32 3
  ret i32 %spec.select

; <label>:64:                                     ; preds = %2
  %65 = getelementptr inbounds i8, i8* %0, i64 0
  %66 = load i8, i8* %65, align 1
  store i8 %66, i8* %1, align 1
  br label %67

; <label>:67:                                     ; preds = %18, %64, %17
  %.0 = phi i32 [ 1, %17 ], [ 1, %64 ], [ 0, %18 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @warc_timestamp(i8*, i64) #0 {
  %3 = alloca i64, align 8
  %4 = call i64 @time(i64* null) #8
  store i64 %4, i64* %3, align 8
  %5 = call %struct.tm* @gmtime(i64* %3) #8, !track !719
  %6 = getelementptr [19 x i8], [19 x i8]* @.str.1402, i32 0, i32 0
  %7 = call i64 @strftime(i8* %0, i64 %1, i8* %6, %struct.tm* %5) #8
  %8 = icmp eq i64 %7, 0
  %9 = icmp ugt i64 %1, 0
  %or.cond = and i1 %8, %9
  br i1 %or.cond, label %10, label %11

; <label>:10:                                     ; preds = %2
  store i8 0, i8* %0, align 1
  br label %11

; <label>:11:                                     ; preds = %10, %2
  ret i8* %0
}

; Function Attrs: nounwind
declare dso_local i64 @strftime(i8*, i64, i8*, %struct.tm*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @warc_uuid_str(i8*) #0 {
  %2 = alloca [37 x i8], align 16, !track !720
  %3 = alloca [16 x i8], align 16, !track !721
  %4 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i32 0, i32 0
  call void @uuid_generate(i8* %4)
  %5 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i32 0, i32 0
  %6 = getelementptr inbounds [37 x i8], [37 x i8]* %2, i32 0, i32 0
  call void @uuid_unparse(i8* %5, i8* %6)
  %7 = getelementptr inbounds [37 x i8], [37 x i8]* %2, i32 0, i32 0
  %8 = getelementptr [14 x i8], [14 x i8]* @.str.1.1405, i32 0, i32 0
  %9 = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* %8, i8* %7) #8
  ret void
}

declare dso_local void @uuid_generate(i8*) #3

declare dso_local void @uuid_unparse(i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @warc_init() #0 {
  store i8 1, i8* @warc_write_ok, align 1
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %2 = load i8*, i8** %1, align 8
  %3 = icmp ne i8* %2, null
  br i1 %3, label %4, label %50

; <label>:4:                                      ; preds = %0
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 49
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %16

; <label>:8:                                      ; preds = %4
  %9 = call zeroext i1 @warc_load_cdx_dedup_file()
  br i1 %9, label %16, label %10

; <label>:10:                                     ; preds = %8
  %11 = getelementptr [47 x i8], [47 x i8]* @.str.2.1408, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 49
  %14 = load i8*, i8** %13, align 8
  %15 = call i8* @quote(i8* %14)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %12, i8* %15)
  call void @exit(i32 1) #16
  unreachable

; <label>:16:                                     ; preds = %8, %4
  %17 = call %struct._IO_FILE* @warc_tempfile()
  store %struct._IO_FILE* %17, %struct._IO_FILE** @warc_manifest_fp, align 8
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_manifest_fp, align 8
  %19 = icmp eq %struct._IO_FILE* %18, null
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %16
  %21 = getelementptr [46 x i8], [46 x i8]* @.str.3.1411, i32 0, i32 0
  %22 = call i8* @gettext(i8* %21) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %22)
  call void @exit(i32 1) #16
  unreachable

; <label>:23:                                     ; preds = %16
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 54
  %25 = load i8, i8* %24, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %27, label %36

; <label>:27:                                     ; preds = %23
  %28 = call %struct._IO_FILE* @warc_tempfile()
  store %struct._IO_FILE* %28, %struct._IO_FILE** @warc_log_fp, align 8
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_log_fp, align 8
  %30 = icmp eq %struct._IO_FILE* %29, null
  br i1 %30, label %31, label %34

; <label>:31:                                     ; preds = %27
  %32 = getelementptr [41 x i8], [41 x i8]* @.str.4.1412, i32 0, i32 0
  %33 = call i8* @gettext(i8* %32) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %33)
  call void @exit(i32 1) #16
  unreachable

; <label>:34:                                     ; preds = %27
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_log_fp, align 8
  call void @log_set_warc_log_fp(%struct._IO_FILE* %35)
  br label %36

; <label>:36:                                     ; preds = %34, %23
  store i32 -1, i32* @warc_current_file_number, align 4
  %37 = call zeroext i1 @warc_start_new_file(i1 zeroext false)
  br i1 %37, label %41, label %38

; <label>:38:                                     ; preds = %36
  %39 = getelementptr [27 x i8], [27 x i8]* @.str.5.1413, i32 0, i32 0
  %40 = call i8* @gettext(i8* %39) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %40)
  call void @exit(i32 1) #16
  unreachable

; <label>:41:                                     ; preds = %36
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 53
  %43 = load i8, i8* %42, align 2
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %50

; <label>:45:                                     ; preds = %41
  %46 = call zeroext i1 @warc_start_cdx_file()
  br i1 %46, label %50, label %47

; <label>:47:                                     ; preds = %45
  %48 = getelementptr [37 x i8], [37 x i8]* @.str.6.1414, i32 0, i32 0
  %49 = call i8* @gettext(i8* %48) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %49)
  call void @exit(i32 1) #16
  unreachable

; <label>:50:                                     ; preds = %41, %45, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_load_cdx_dedup_file() #0 {
  %1 = alloca i8*, align 8, !track !722
  %2 = alloca i64, align 8, !track !723
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* null, i8** %1, align 8
  store i64 0, i64* %2, align 8
  store i32 -1, i32* %3, align 4
  store i32 -1, i32* %4, align 4
  store i32 -1, i32* %5, align 4
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 49
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr [2 x i8], [2 x i8]* @.str.24.1455, i32 0, i32 0
  %9 = call %struct._IO_FILE* @fopen(i8* %7, i8* %8), !track !724
  %10 = icmp eq %struct._IO_FILE* %9, null
  br i1 %10, label %61, label %11

; <label>:11:                                     ; preds = %0
  %12 = call i64 @getline(i8** %1, i64* %2, %struct._IO_FILE* %9)
  %13 = icmp ne i64 %12, -1
  br i1 %13, label %14, label %17

; <label>:14:                                     ; preds = %11
  %15 = load i8*, i8** %1, align 8
  %16 = call zeroext i1 @warc_parse_cdx_header(i8* %15, i32* %3, i32* %4, i32* %5)
  br label %17

; <label>:17:                                     ; preds = %14, %11
  %18 = load i32, i32* %3, align 4
  %19 = icmp eq i32 %18, -1
  %20 = load i32, i32* %4, align 4
  %21 = icmp eq i32 %20, -1
  %or.cond = or i1 %19, %21
  %22 = load i32, i32* %5, align 4
  %23 = icmp eq i32 %22, -1
  %or.cond3 = or i1 %or.cond, %23
  br i1 %or.cond3, label %24, label %42

; <label>:24:                                     ; preds = %17
  %25 = load i32, i32* %3, align 4
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %24
  %28 = getelementptr [61 x i8], [61 x i8]* @.str.25.1456, i32 0, i32 0
  %29 = call i8* @gettext(i8* %28) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %29)
  br label %30

; <label>:30:                                     ; preds = %27, %24
  %31 = load i32, i32* %4, align 4
  %32 = icmp eq i32 %31, -1
  br i1 %32, label %33, label %36

; <label>:33:                                     ; preds = %30
  %34 = getelementptr [57 x i8], [57 x i8]* @.str.26.1457, i32 0, i32 0
  %35 = call i8* @gettext(i8* %34) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %35)
  br label %36

; <label>:36:                                     ; preds = %33, %30
  %37 = load i32, i32* %5, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %58

; <label>:39:                                     ; preds = %36
  %40 = getelementptr [58 x i8], [58 x i8]* @.str.27.1458, i32 0, i32 0
  %41 = call i8* @gettext(i8* %40) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %41)
  br label %58

; <label>:42:                                     ; preds = %17
  %43 = call %struct.hash_table* @hash_table_new(i32 1000, i64 (i8*)* @warc_hash_sha1_digest, i32 (i8*, i8*)* @warc_cmp_sha1_digest)
  store %struct.hash_table* %43, %struct.hash_table** @warc_cdx_dedup_table, align 8
  call void @unroll_loop(i32 364)
  %44 = call i64 @getline(i8** %1, i64* %2, %struct._IO_FILE* %9)
  %cond4 = icmp eq i64 %44, -1
  br i1 %cond4, label %51, label %.lr.ph

.lr.ph:                                           ; preds = %42
  br label %45

; <label>:45:                                     ; preds = %.lr.ph, %45
  %46 = load i8*, i8** %1, align 8
  %47 = load i32, i32* %3, align 4
  %48 = load i32, i32* %4, align 4
  %49 = load i32, i32* %5, align 4
  call void @warc_process_cdx_line(i8* %46, i32 %47, i32 %48, i32 %49)
  call void @unroll_loop(i32 364)
  %50 = call i64 @getline(i8** %1, i64* %2, %struct._IO_FILE* %9)
  %cond = icmp eq i64 %50, -1
  br i1 %cond, label %._crit_edge, label %45

._crit_edge:                                      ; preds = %45
  br label %51

; <label>:51:                                     ; preds = %._crit_edge, %42
  %52 = load %struct.hash_table*, %struct.hash_table** @warc_cdx_dedup_table, align 8
  %53 = call i32 @hash_table_count(%struct.hash_table* %52)
  %54 = sext i32 %53 to i64
  %55 = getelementptr [29 x i8], [29 x i8]* @.str.28.1459, i32 0, i32 0
  %56 = getelementptr [30 x i8], [30 x i8]* @.str.29.1460, i32 0, i32 0
  %57 = call i8* @ngettext(i8* %55, i8* %56, i64 %54) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %57, i32 %53)
  br label %58

; <label>:58:                                     ; preds = %51, %39, %36
  %59 = load i8*, i8** %1, align 8
  call void @free(i8* %59) #8
  store i8* null, i8** %1, align 8
  %60 = call i32 @fclose(%struct._IO_FILE* %9)
  br label %61

; <label>:61:                                     ; preds = %0, %58
  %.0 = phi i1 [ true, %58 ], [ false, %0 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._IO_FILE* @warc_tempfile() #7 {
  %1 = alloca [100 x i8], align 16, !track !725
  %2 = getelementptr inbounds [100 x i8], [100 x i8]* %1, i32 0, i32 0
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 48
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.7.1454, i32 0, i32 0
  %6 = call i32 @path_search(i8* %2, i64 100, i8* %4, i8* %5, i1 zeroext true)
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %21, label %8

; <label>:8:                                      ; preds = %0
  %9 = getelementptr inbounds [100 x i8], [100 x i8]* %1, i32 0, i32 0
  %10 = call i32 @mkostemp(i8* %9, i32 0)
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %21, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds [100 x i8], [100 x i8]* %1, i32 0, i32 0
  %14 = call i32 @unlink(i8* %13) #8
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %12
  %17 = call i32 @close(i32 %10)
  br label %21

; <label>:18:                                     ; preds = %12
  %19 = getelementptr [4 x i8], [4 x i8]* @.str.8.1424, i32 0, i32 0
  %20 = call %struct._IO_FILE* @fdopen(i32 %10, i8* %19) #8, !track !726
  br label %21

; <label>:21:                                     ; preds = %8, %0, %18, %16
  %.0 = phi %struct._IO_FILE* [ null, %16 ], [ %20, %18 ], [ null, %0 ], [ null, %8 ]
  ret %struct._IO_FILE* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_start_new_file(i1 zeroext) #0 {
  %2 = zext i1 %0 to i8
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 51
  %4 = load i8, i8* %3, align 8
  %5 = trunc i8 %4 to i1
  %6 = zext i1 %5 to i64
  %7 = getelementptr [8 x i8], [8 x i8]* @.str.32.1418, i32 0, i32 0
  %8 = getelementptr [5 x i8], [5 x i8]* @.str.33.1419, i32 0, i32 0
  %9 = select i1 %5, i8* %7, i8* %8
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %75, label %13

; <label>:13:                                     ; preds = %1
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %15 = icmp ne %struct._IO_FILE* %14, null
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %13
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %18 = call i32 @fclose(%struct._IO_FILE* %17)
  br label %19

; <label>:19:                                     ; preds = %16, %13
  %20 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  store i8 0, i8* %20, align 16
  %21 = load i8*, i8** @warc_current_filename, align 8
  call void @free(i8* %21) #8
  store i8* null, i8** @warc_current_filename, align 8
  %22 = load i32, i32* @warc_current_file_number, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* @warc_current_file_number, align 4
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %25 = load i8*, i8** %24, align 8
  %26 = call i64 @strlen(i8* %25) #14
  %27 = trunc i64 %26 to i32
  %28 = add nsw i32 %27, 1
  %29 = add nsw i32 %28, 5
  %30 = add nsw i32 %29, 8
  %31 = add nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = call noalias i8* @xmalloc(i64 %32)
  store i8* %33, i8** @warc_current_filename, align 8
  %34 = trunc i8 %2 to i1
  br i1 %34, label %35, label %40

; <label>:35:                                     ; preds = %19
  %36 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr [11 x i8], [11 x i8]* @.str.34.1420, i32 0, i32 0
  %39 = call i32 (i8*, i8*, ...) @sprintf(i8* %33, i8* %38, i8* %37, i8* %9) #8
  br label %53

; <label>:40:                                     ; preds = %19
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 50
  %42 = load i64, i64* %41, align 8
  %43 = icmp sgt i64 %42, 0
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %45 = load i8*, i8** %44, align 8
  br i1 %43, label %46, label %50

; <label>:46:                                     ; preds = %40
  %47 = load i32, i32* @warc_current_file_number, align 4
  %48 = getelementptr [11 x i8], [11 x i8]* @.str.35.1421, i32 0, i32 0
  %49 = call i32 (i8*, i8*, ...) @sprintf(i8* %33, i8* %48, i8* %45, i32 %47, i8* %9) #8
  br label %53

; <label>:50:                                     ; preds = %40
  %51 = getelementptr [6 x i8], [6 x i8]* @.str.36.1422, i32 0, i32 0
  %52 = call i32 (i8*, i8*, ...) @sprintf(i8* %33, i8* %51, i8* %45, i8* %9) #8
  br label %53

; <label>:53:                                     ; preds = %46, %50, %35
  %54 = getelementptr [24 x i8], [24 x i8]* @.str.37.1423, i32 0, i32 0
  %55 = call i8* @gettext(i8* %54) #8
  %56 = call i8* @quote(i8* %33)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %55, i8* %56)
  %57 = getelementptr [4 x i8], [4 x i8]* @.str.8.1424, i32 0, i32 0
  %58 = call %struct._IO_FILE* @fopen(i8* %33, i8* %57), !track !727
  store %struct._IO_FILE* %58, %struct._IO_FILE** @warc_current_file, align 8
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %60 = icmp eq %struct._IO_FILE* %59, null
  br i1 %60, label %61, label %65

; <label>:61:                                     ; preds = %53
  %62 = getelementptr [29 x i8], [29 x i8]* @.str.38.1425, i32 0, i32 0
  %63 = call i8* @gettext(i8* %62) #8
  %64 = call i8* @quote(i8* %33)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %63, i8* %64)
  br label %75

; <label>:65:                                     ; preds = %53
  %66 = call zeroext i1 @warc_write_warcinfo_record(i8* %33)
  br i1 %66, label %67, label %75

; <label>:67:                                     ; preds = %65
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_manifest_fp, align 8
  %69 = icmp ne %struct._IO_FILE* %68, null
  br i1 %69, label %70, label %75

; <label>:70:                                     ; preds = %67
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_manifest_fp, align 8
  %72 = getelementptr [4 x i8], [4 x i8]* @.str.39.1426, i32 0, i32 0
  %73 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  %74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* %72, i8* %73)
  br label %75

; <label>:75:                                     ; preds = %67, %70, %65, %1, %61
  %.0 = phi i1 [ false, %61 ], [ false, %1 ], [ false, %65 ], [ true, %70 ], [ true, %67 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_start_cdx_file() #0 {
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %2 = load i8*, i8** %1, align 8
  %3 = call i64 @strlen(i8* %2) #14
  %4 = trunc i64 %3 to i32
  %5 = add nsw i32 %4, 4
  %6 = add nsw i32 %5, 1
  %7 = sext i32 %6 to i64
  %8 = alloca i8, i64 %7, align 16, !track !728
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 47
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %4 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %10, i64 %11, i1 false), !track !729
  %12 = sext i32 %4 to i64
  %13 = getelementptr inbounds i8, i8* %8, i64 %12
  %14 = getelementptr [5 x i8], [5 x i8]* @.str.55.1415, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %14, i64 5, i1 false), !track !730
  %15 = getelementptr [3 x i8], [3 x i8]* @.str.56.1416, i32 0, i32 0
  %16 = call %struct._IO_FILE* @fopen(i8* %8, i8* %15), !track !731
  store %struct._IO_FILE* %16, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %18 = icmp eq %struct._IO_FILE* %17, null
  br i1 %18, label %25, label %19

; <label>:19:                                     ; preds = %0
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %21 = getelementptr [28 x i8], [28 x i8]* @.str.57.1417, i32 0, i32 0
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* %21)
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %24 = call i32 @fflush(%struct._IO_FILE* %23)
  br label %25

; <label>:25:                                     ; preds = %0, %19
  %.0 = phi i1 [ true, %19 ], [ false, %0 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_warcinfo_record(i8*) #0 {
  %2 = alloca [22 x i8], align 16
  %3 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  call void @warc_uuid_str(i8* %3)
  %4 = getelementptr inbounds [22 x i8], [22 x i8]* %2, i32 0, i32 0
  %5 = call i8* @warc_timestamp(i8* %4, i64 22)
  %6 = call i8* @base_name(i8* %0)
  %7 = call zeroext i1 @warc_write_start_record()
  %8 = getelementptr [10 x i8], [10 x i8]* @.str.9.1427, i32 0, i32 0
  %9 = getelementptr [9 x i8], [9 x i8]* @.str.40.1428, i32 0, i32 0
  %10 = call zeroext i1 @warc_write_header(i8* %8, i8* %9)
  %11 = getelementptr [13 x i8], [13 x i8]* @.str.12.1429, i32 0, i32 0
  %12 = getelementptr [24 x i8], [24 x i8]* @.str.41.1430, i32 0, i32 0
  %13 = call zeroext i1 @warc_write_header(i8* %11, i8* %12)
  %14 = getelementptr inbounds [22 x i8], [22 x i8]* %2, i32 0, i32 0
  %15 = getelementptr [10 x i8], [10 x i8]* @.str.42.1431, i32 0, i32 0
  %16 = call zeroext i1 @warc_write_header(i8* %15, i8* %14)
  %17 = getelementptr [15 x i8], [15 x i8]* @.str.14.1432, i32 0, i32 0
  %18 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  %19 = call zeroext i1 @warc_write_header(i8* %17, i8* %18)
  %20 = getelementptr [14 x i8], [14 x i8]* @.str.43.1433, i32 0, i32 0
  %21 = call zeroext i1 @warc_write_header(i8* %20, i8* %6)
  call void @free(i8* %6) #8
  %22 = call %struct._IO_FILE* @warc_tempfile()
  %23 = icmp eq %struct._IO_FILE* %22, null
  br i1 %23, label %77, label %24

; <label>:24:                                     ; preds = %1
  %25 = load i8*, i8** @version_string, align 8
  %26 = getelementptr [25 x i8], [25 x i8]* @.str.44.1434, i32 0, i32 0
  %27 = getelementptr [10 x i8], [10 x i8]* @.str.45.1435, i32 0, i32 0
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* %26, i8* %25, i8* %27)
  %29 = getelementptr [31 x i8], [31 x i8]* @.str.46.1436, i32 0, i32 0
  %30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* %29)
  %31 = getelementptr [80 x i8], [80 x i8]* @.str.47.1437, i32 0, i32 0
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* %31)
  %33 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 88
  %34 = load i8, i8* %33, align 8
  %35 = trunc i8 %34 to i1
  %36 = zext i1 %35 to i64
  %37 = getelementptr [8 x i8], [8 x i8]* @.str.49.1438, i32 0, i32 0
  %38 = getelementptr [4 x i8], [4 x i8]* @.str.50.1439, i32 0, i32 0
  %39 = select i1 %35, i8* %37, i8* %38
  %40 = getelementptr [13 x i8], [13 x i8]* @.str.48.1440, i32 0, i32 0
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* %40, i8* %39)
  %42 = load i8*, i8** @program_argstring, align 8
  %43 = getelementptr [21 x i8], [21 x i8]* @.str.51.1441, i32 0, i32 0
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* %43, i8* %42)
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  %46 = load i8**, i8*** %45, align 8
  %47 = icmp ne i8** %46, null
  br i1 %47, label %48, label %._crit_edge

; <label>:48:                                     ; preds = %24
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  %50 = load i8**, i8*** %49, align 8
  %51 = load i8*, i8** %50, align 8
  %52 = icmp ne i8* %51, null
  br i1 %52, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %48
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 365)
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  %54 = load i8**, i8*** %53, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 %indvars.iv
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr [5 x i8], [5 x i8]* @.str.52.1442, i32 0, i32 0
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* %57, i8* %56)
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %59 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 55
  %60 = load i8**, i8*** %59, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 %indvars.iv.next
  %62 = load i8*, i8** %61, align 8
  %63 = icmp ne i8* %62, null
  br i1 %63, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %48, %24
  %64 = getelementptr [3 x i8], [3 x i8]* @.str.53.1443, i32 0, i32 0
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* %64)
  call void @warc_write_digest_headers(%struct._IO_FILE* %22, i64 -1)
  %66 = call zeroext i1 @warc_write_block_from_file(%struct._IO_FILE* %22)
  %67 = call zeroext i1 @warc_write_end_record()
  %68 = load i8, i8* @warc_write_ok, align 1
  %69 = trunc i8 %68 to i1
  br i1 %69, label %73, label %70

; <label>:70:                                     ; preds = %._crit_edge
  %71 = getelementptr [45 x i8], [45 x i8]* @.str.54.1444, i32 0, i32 0
  %72 = call i8* @gettext(i8* %71) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %72)
  br label %73

; <label>:73:                                     ; preds = %70, %._crit_edge
  %74 = call i32 @fclose(%struct._IO_FILE* %22)
  %75 = load i8, i8* @warc_write_ok, align 1
  %76 = trunc i8 %75 to i1
  br label %77

; <label>:77:                                     ; preds = %1, %73
  %.0 = phi i1 [ %76, %73 ], [ false, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_start_record() #0 {
  %1 = load i8, i8* @warc_write_ok, align 1
  %2 = trunc i8 %1 to i1
  br i1 %2, label %3, label %43

; <label>:3:                                      ; preds = %0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %5 = call i32 @fflush(%struct._IO_FILE* %4)
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 50
  %7 = load i64, i64* %6, align 8
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %9, label %17

; <label>:9:                                      ; preds = %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %11 = call i64 @ftello(%struct._IO_FILE* %10)
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 50
  %13 = load i64, i64* %12, align 8
  %14 = icmp sge i64 %11, %13
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %9
  %16 = call zeroext i1 @warc_start_new_file(i1 zeroext false)
  br label %17

; <label>:17:                                     ; preds = %15, %9, %3
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 51
  %19 = load i8, i8* %18, align 8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %21, label %38

; <label>:21:                                     ; preds = %17
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %23 = call i64 @ftello(%struct._IO_FILE* %22)
  store i64 %23, i64* @warc_current_gzfile_offset, align 8
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %25 = call i32 @fseek(%struct._IO_FILE* %24, i64 14, i32 1)
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %27 = call i32 @fflush(%struct._IO_FILE* %26)
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %29 = call i32 @fileno(%struct._IO_FILE* %28) #8
  %30 = call i32 @dup(i32 %29) #8
  %31 = getelementptr [4 x i8], [4 x i8]* @.str.63.1451, i32 0, i32 0
  %32 = call %struct.gzFile_s* @gzdopen(i32 %30, i8* %31), !track !732
  store %struct.gzFile_s* %32, %struct.gzFile_s** @warc_current_gzfile, align 8
  store i64 0, i64* @warc_current_gzfile_uncompressed_size, align 8
  %33 = load %struct.gzFile_s*, %struct.gzFile_s** @warc_current_gzfile, align 8
  %34 = icmp eq %struct.gzFile_s* %33, null
  br i1 %34, label %35, label %38

; <label>:35:                                     ; preds = %21
  %36 = getelementptr [41 x i8], [41 x i8]* @.str.64.1452, i32 0, i32 0
  %37 = call i8* @gettext(i8* %36) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %37)
  store i8 0, i8* @warc_write_ok, align 1
  br label %43

; <label>:38:                                     ; preds = %21, %17
  %39 = getelementptr [11 x i8], [11 x i8]* @.str.65.1453, i32 0, i32 0
  %40 = call zeroext i1 @warc_write_string(i8* %39)
  %41 = load i8, i8* @warc_write_ok, align 1
  %42 = trunc i8 %41 to i1
  br label %43

; <label>:43:                                     ; preds = %0, %38, %35
  %.0 = phi i1 [ false, %35 ], [ %42, %38 ], [ false, %0 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_header(i8*, i8*) #0 {
  %3 = icmp ne i8* %1, null
  br i1 %3, label %4, label %11

; <label>:4:                                      ; preds = %2
  %5 = call zeroext i1 @warc_write_string(i8* %0)
  %6 = getelementptr [3 x i8], [3 x i8]* @.str.66.1450, i32 0, i32 0
  %7 = call zeroext i1 @warc_write_string(i8* %6)
  %8 = call zeroext i1 @warc_write_string(i8* %1)
  %9 = getelementptr [3 x i8], [3 x i8]* @.str.53.1443, i32 0, i32 0
  %10 = call zeroext i1 @warc_write_string(i8* %9)
  br label %11

; <label>:11:                                     ; preds = %4, %2
  %12 = load i8, i8* @warc_write_ok, align 1
  %13 = trunc i8 %12 to i1
  ret i1 %13
}

; Function Attrs: noinline nounwind uwtable
define internal void @warc_write_digest_headers(%struct._IO_FILE*, i64) #0 {
  %3 = alloca [20 x i8], align 16
  %4 = alloca [20 x i8], align 16
  %5 = alloca [38 x i8], align 16
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 52
  %7 = load i8, i8* %6, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %27

; <label>:9:                                      ; preds = %2
  call void @rewind(%struct._IO_FILE* %0)
  %10 = getelementptr inbounds [20 x i8], [20 x i8]* %3, i32 0, i32 0
  %11 = getelementptr inbounds [20 x i8], [20 x i8]* %4, i32 0, i32 0
  %12 = call i32 @warc_sha1_stream_with_payload(%struct._IO_FILE* %0, i8* %10, i8* %11, i64 %1)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %27

; <label>:14:                                     ; preds = %9
  %15 = getelementptr inbounds [20 x i8], [20 x i8]* %3, i32 0, i32 0
  %16 = getelementptr inbounds [38 x i8], [38 x i8]* %5, i32 0, i32 0
  %17 = call i8* @warc_base32_sha1_digest(i8* %15, i8* %16, i64 38)
  %18 = getelementptr [18 x i8], [18 x i8]* @.str.19.1447, i32 0, i32 0
  %19 = call zeroext i1 @warc_write_header(i8* %18, i8* %17)
  %20 = icmp sge i64 %1, 0
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %14
  %22 = getelementptr inbounds [20 x i8], [20 x i8]* %4, i32 0, i32 0
  %23 = getelementptr inbounds [38 x i8], [38 x i8]* %5, i32 0, i32 0
  %24 = call i8* @warc_base32_sha1_digest(i8* %22, i8* %23, i64 38)
  %25 = getelementptr [20 x i8], [20 x i8]* @.str.20.1448, i32 0, i32 0
  %26 = call zeroext i1 @warc_write_header(i8* %25, i8* %24)
  br label %27

; <label>:27:                                     ; preds = %9, %21, %14, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_block_from_file(%struct._IO_FILE*) #0 {
  %2 = alloca [21 x i8], align 16, !track !733
  %3 = alloca [8192 x i8], align 16, !track !734
  %4 = call i32 @fseeko(%struct._IO_FILE* %0, i64 0, i32 2)
  %5 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i32 0, i32 0
  %6 = call i64 @ftello(%struct._IO_FILE* %0)
  %7 = call i8* @number_to_string(i8* %5, i64 %6)
  %8 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i32 0, i32 0
  %9 = getelementptr [15 x i8], [15 x i8]* @.str.68.1446, i32 0, i32 0
  %10 = call zeroext i1 @warc_write_header(i8* %9, i8* %8)
  %11 = getelementptr [3 x i8], [3 x i8]* @.str.53.1443, i32 0, i32 0
  %12 = call zeroext i1 @warc_write_string(i8* %11)
  %13 = call i32 @fseeko(%struct._IO_FILE* %0, i64 0, i32 0)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %1
  store i8 0, i8* @warc_write_ok, align 1
  br label %16

; <label>:16:                                     ; preds = %15, %1
  br label %17

; <label>:17:                                     ; preds = %31, %16
  %.0 = phi i64 [ undef, %16 ], [ %.1, %31 ]
  call void @unroll_loop(i32 366)
  %18 = load i8, i8* @warc_write_ok, align 1
  %19 = trunc i8 %18 to i1
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %17
  %21 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i32 0, i32 0
  %22 = call i64 @fread(i8* %21, i64 1, i64 8192, %struct._IO_FILE* %0)
  %23 = icmp ugt i64 %22, 0
  br label %24

; <label>:24:                                     ; preds = %20, %17
  %.1 = phi i64 [ %22, %20 ], [ %.0, %17 ]
  %25 = phi i1 [ false, %17 ], [ %23, %20 ]
  br i1 %25, label %26, label %32

; <label>:26:                                     ; preds = %24
  %27 = getelementptr inbounds [8192 x i8], [8192 x i8]* %3, i32 0, i32 0
  %28 = call i64 @warc_write_buffer(i8* %27, i64 %.1)
  %29 = icmp ult i64 %28, %.1
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %26
  store i8 0, i8* @warc_write_ok, align 1
  br label %31

; <label>:31:                                     ; preds = %30, %26
  br label %17

; <label>:32:                                     ; preds = %24
  %33 = load i8, i8* @warc_write_ok, align 1
  %34 = trunc i8 %33 to i1
  ret i1 %34
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_end_record() #0 {
  %1 = alloca [14 x i8], align 1, !track !735
  %2 = alloca [10 x i8], align 1, !track !736
  %3 = getelementptr [5 x i8], [5 x i8]* @.str.69.1445, i32 0, i32 0
  %4 = call i64 @warc_write_buffer(i8* %3, i64 4)
  %5 = load i8, i8* @warc_write_ok, align 1
  %6 = trunc i8 %5 to i1
  %7 = load %struct.gzFile_s*, %struct.gzFile_s** @warc_current_gzfile, align 8
  %8 = icmp ne %struct.gzFile_s* %7, null
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %9, label %93

; <label>:9:                                      ; preds = %0
  %10 = load %struct.gzFile_s*, %struct.gzFile_s** @warc_current_gzfile, align 8
  %11 = call i32 @gzclose(%struct.gzFile_s* %10)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  store i8 0, i8* @warc_write_ok, align 1
  br label %96

; <label>:14:                                     ; preds = %9
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %16 = call i32 @fflush(%struct._IO_FILE* %15)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %18 = call i32 @fseeko(%struct._IO_FILE* %17, i64 0, i32 2)
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %20 = call i64 @ftello(%struct._IO_FILE* %19)
  %21 = load i64, i64* @warc_current_gzfile_offset, align 8
  %22 = sub nsw i64 %20, %21
  %23 = load i64, i64* @warc_current_gzfile_uncompressed_size, align 8
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %25 = load i64, i64* @warc_current_gzfile_offset, align 8
  %26 = add nsw i64 %25, 14
  %27 = call i32 @fseeko(%struct._IO_FILE* %24, i64 %26, i32 0)
  %28 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i32 0, i32 0
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %30 = call i64 @fread(i8* %28, i64 1, i64 10, %struct._IO_FILE* %29)
  %31 = icmp ne i64 %30, 10
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %14
  store i8 0, i8* @warc_write_ok, align 1
  br label %96

; <label>:33:                                     ; preds = %14
  %34 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = or i32 %36, 4
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 3
  store i8 %38, i8* %39, align 1
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %41 = load i64, i64* @warc_current_gzfile_offset, align 8
  %42 = call i32 @fseeko(%struct._IO_FILE* %40, i64 %41, i32 0)
  %43 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i32 0, i32 0
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %45 = call i64 @fwrite(i8* %43, i64 1, i64 10, %struct._IO_FILE* %44)
  %46 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 0
  store i8 12, i8* %46, align 1
  %47 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 1
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 2
  store i8 115, i8* %48, align 1
  %49 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 3
  store i8 108, i8* %49, align 1
  %50 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 4
  store i8 8, i8* %50, align 1
  %51 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 5
  store i8 0, i8* %51, align 1
  %52 = and i64 %22, 255
  %53 = trunc i64 %52 to i8
  %54 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 6
  store i8 %53, i8* %54, align 1
  %55 = ashr i64 %22, 8
  %56 = and i64 %55, 255
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 7
  store i8 %57, i8* %58, align 1
  %59 = ashr i64 %22, 16
  %60 = and i64 %59, 255
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 8
  store i8 %61, i8* %62, align 1
  %63 = ashr i64 %22, 24
  %64 = and i64 %63, 255
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 9
  store i8 %65, i8* %66, align 1
  %67 = and i64 %23, 255
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 10
  store i8 %68, i8* %69, align 1
  %70 = ashr i64 %23, 8
  %71 = and i64 %70, 255
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 11
  store i8 %72, i8* %73, align 1
  %74 = ashr i64 %23, 16
  %75 = and i64 %74, 255
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 12
  store i8 %76, i8* %77, align 1
  %78 = ashr i64 %23, 24
  %79 = and i64 %78, 255
  %80 = trunc i64 %79 to i8
  %81 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i64 0, i64 13
  store i8 %80, i8* %81, align 1
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %83 = load i64, i64* @warc_current_gzfile_offset, align 8
  %84 = add nsw i64 %83, 10
  %85 = call i32 @fseeko(%struct._IO_FILE* %82, i64 %84, i32 0)
  %86 = getelementptr inbounds [14 x i8], [14 x i8]* %1, i32 0, i32 0
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %88 = call i64 @fwrite(i8* %86, i64 1, i64 14, %struct._IO_FILE* %87)
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %90 = call i32 @fflush(%struct._IO_FILE* %89)
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %92 = call i32 @fseeko(%struct._IO_FILE* %91, i64 0, i32 2)
  br label %93

; <label>:93:                                     ; preds = %33, %0
  %94 = load i8, i8* @warc_write_ok, align 1
  %95 = trunc i8 %94 to i1
  br label %96

; <label>:96:                                     ; preds = %93, %32, %13
  %.0 = phi i1 [ false, %13 ], [ false, %32 ], [ %95, %93 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @warc_write_buffer(i8*, i64) #0 {
  %3 = load %struct.gzFile_s*, %struct.gzFile_s** @warc_current_gzfile, align 8
  %4 = icmp ne %struct.gzFile_s* %3, null
  br i1 %4, label %5, label %12

; <label>:5:                                      ; preds = %2
  %6 = load i64, i64* @warc_current_gzfile_uncompressed_size, align 8
  %7 = add i64 %6, %1
  store i64 %7, i64* @warc_current_gzfile_uncompressed_size, align 8
  %8 = load %struct.gzFile_s*, %struct.gzFile_s** @warc_current_gzfile, align 8
  %9 = trunc i64 %1 to i32
  %10 = call i32 @gzwrite(%struct.gzFile_s* %8, i8* %0, i32 %9)
  %11 = sext i32 %10 to i64
  br label %15

; <label>:12:                                     ; preds = %2
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %14 = call i64 @fwrite(i8* %0, i64 1, i64 %1, %struct._IO_FILE* %13)
  br label %15

; <label>:15:                                     ; preds = %12, %5
  %.0 = phi i64 [ %11, %5 ], [ %14, %12 ]
  ret i64 %.0
}

declare dso_local i32 @gzclose(%struct.gzFile_s*) #3

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

declare dso_local i32 @gzwrite(%struct.gzFile_s*, i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_string(i8*) #0 {
  %2 = load i8, i8* @warc_write_ok, align 1
  %3 = trunc i8 %2 to i1
  br i1 %3, label %4, label %12

; <label>:4:                                      ; preds = %1
  %5 = call i64 @strlen(i8* %0) #14
  %6 = call i64 @warc_write_buffer(i8* %0, i64 %5)
  %7 = icmp ne i64 %5, %6
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %4
  store i8 0, i8* @warc_write_ok, align 1
  br label %9

; <label>:9:                                      ; preds = %8, %4
  %10 = load i8, i8* @warc_write_ok, align 1
  %11 = trunc i8 %10 to i1
  br label %12

; <label>:12:                                     ; preds = %1, %9
  %.0 = phi i1 [ %11, %9 ], [ false, %1 ]
  ret i1 %.0
}

declare dso_local void @rewind(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @warc_sha1_stream_with_payload(%struct._IO_FILE*, i8*, i8*, i64) #0 {
  %5 = alloca %struct.sha1_ctx, align 4, !track !737
  %6 = alloca %struct.sha1_ctx, align 4, !track !738
  %7 = call noalias i8* @xmalloc(i64 32840)
  call void @sha1_init_ctx(%struct.sha1_ctx* %5)
  %8 = icmp sge i64 %3, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %4
  call void @sha1_init_ctx(%struct.sha1_ctx* %6)
  br label %10

; <label>:10:                                     ; preds = %9, %4
  br label %11

; <label>:11:                                     ; preds = %10, %42
  %.04 = phi i64 [ 0, %10 ], [ %.lcssa, %42 ]
  call void @unroll_loop(i32 367)
  %12 = call i64 @fread(i8* %7, i64 1, i64 32768, %struct._IO_FILE* %0)
  %13 = add nsw i64 0, %12
  %14 = add nsw i64 %.04, %12
  %15 = icmp eq i64 %13, 32768
  br i1 %15, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %11
  br label %.lr.ph

; <label>:16:                                     ; preds = %31
  %17 = getelementptr inbounds i8, i8* %7, i64 %24
  %18 = sub nsw i64 32768, %24
  %19 = call i64 @fread(i8* %17, i64 1, i64 %18, %struct._IO_FILE* %0)
  %20 = add nsw i64 %24, %19
  %21 = add nsw i64 %23, %19
  %22 = icmp eq i64 %20, 32768
  br i1 %22, label %._crit_edge.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %16
  %23 = phi i64 [ %21, %16 ], [ %14, %.lr.ph.preheader ]
  %24 = phi i64 [ %20, %16 ], [ %13, %.lr.ph.preheader ]
  %25 = phi i64 [ %19, %16 ], [ %12, %.lr.ph.preheader ]
  call void @unroll_loop(i32 368)
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %.lr.ph
  %.lcssa8 = phi i64 [ %24, %.lr.ph ]
  %.lcssa5 = phi i64 [ %23, %.lr.ph ]
  %28 = call i32 @ferror(%struct._IO_FILE* %0) #8
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %43

; <label>:30:                                     ; preds = %27
  call void @free(i8* %7) #8
  br label %62

; <label>:31:                                     ; preds = %.lr.ph
  %32 = call i32 @feof(%struct._IO_FILE* %0) #8
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %.loopexit, label %16

._crit_edge.loopexit:                             ; preds = %16
  %.lcssa.ph = phi i64 [ %21, %16 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %11
  %.lcssa = phi i64 [ %14, %11 ], [ %.lcssa.ph, %._crit_edge.loopexit ]
  call void @sha1_process_block(i8* %7, i64 32768, %struct.sha1_ctx* %5)
  %34 = icmp sge i64 %3, 0
  %35 = icmp slt i64 %3, %.lcssa
  %or.cond = and i1 %34, %35
  br i1 %or.cond, label %36, label %42

; <label>:36:                                     ; preds = %._crit_edge
  %37 = sub nsw i64 %.lcssa, 32768
  %38 = sub nsw i64 %3, %37
  %39 = icmp sle i64 %38, 0
  %spec.select = select i1 %39, i64 0, i64 %38
  %40 = getelementptr inbounds i8, i8* %7, i64 %spec.select
  %41 = sub nsw i64 32768, %spec.select
  call void @sha1_process_bytes(i8* %40, i64 %41, %struct.sha1_ctx* %6)
  br label %42

; <label>:42:                                     ; preds = %36, %._crit_edge
  br label %11

.loopexit:                                        ; preds = %31
  %.ph = phi i64 [ %24, %31 ]
  %.ph3 = phi i64 [ %23, %31 ]
  br label %43

; <label>:43:                                     ; preds = %.loopexit, %27
  %44 = phi i64 [ %.lcssa8, %27 ], [ %.ph, %.loopexit ]
  %45 = phi i64 [ %.lcssa5, %27 ], [ %.ph3, %.loopexit ]
  %46 = icmp sgt i64 %44, 0
  br i1 %46, label %47, label %56

; <label>:47:                                     ; preds = %43
  call void @sha1_process_bytes(i8* %7, i64 %44, %struct.sha1_ctx* %5)
  %48 = icmp sge i64 %3, 0
  %49 = icmp slt i64 %3, %45
  %or.cond1 = and i1 %48, %49
  br i1 %or.cond1, label %50, label %56

; <label>:50:                                     ; preds = %47
  %51 = sub nsw i64 %45, %44
  %52 = sub nsw i64 %3, %51
  %53 = icmp sle i64 %52, 0
  %spec.select2 = select i1 %53, i64 0, i64 %52
  %54 = getelementptr inbounds i8, i8* %7, i64 %spec.select2
  %55 = sub nsw i64 %44, %spec.select2
  call void @sha1_process_bytes(i8* %54, i64 %55, %struct.sha1_ctx* %6)
  br label %56

; <label>:56:                                     ; preds = %47, %50, %43
  %57 = call i8* @sha1_finish_ctx(%struct.sha1_ctx* %5, i8* %1)
  %58 = icmp sge i64 %3, 0
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %56
  %60 = call i8* @sha1_finish_ctx(%struct.sha1_ctx* %6, i8* %2)
  br label %61

; <label>:61:                                     ; preds = %56, %59
  call void @free(i8* %7) #8
  br label %62

; <label>:62:                                     ; preds = %61, %30
  %.0 = phi i32 [ 1, %30 ], [ 0, %61 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @warc_base32_sha1_digest(i8*, i8*, i64) #0 {
  %4 = icmp uge i64 %2, 38
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %3
  %6 = getelementptr [6 x i8], [6 x i8]* @.str.70.1449, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %6, i64 5, i1 false)
  %7 = getelementptr inbounds i8, i8* %1, i64 5
  %8 = sub i64 %2, 5
  call void @base32_encode(i8* %0, i64 20, i8* %7, i64 %8)
  br label %10

; <label>:9:                                      ; preds = %3
  store i8 0, i8* %1, align 1
  br label %10

; <label>:10:                                     ; preds = %9, %5
  ret i8* %1
}

; Function Attrs: nounwind
declare dso_local i32 @dup(i32) #2

declare dso_local %struct.gzFile_s* @gzdopen(i32, i8*) #3

declare dso_local i32 @mkostemp(i8*, i32) #3

; Function Attrs: nounwind
declare dso_local %struct._IO_FILE* @fdopen(i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_parse_cdx_header(i8*, i32*, i32*, i32*) #0 {
  %5 = alloca i8*, align 8, !track !739
  store i32 -1, i32* %1, align 4
  store i32 -1, i32* %2, align 4
  store i32 -1, i32* %3, align 4
  %6 = getelementptr [5 x i8], [5 x i8]* @.str.30.1461, i32 0, i32 0
  %7 = call i8* @strtok_r(i8* %0, i8* %6, i8** %5) #8, !track !740
  %8 = icmp ne i8* %7, null
  br i1 %8, label %9, label %._crit_edge

; <label>:9:                                      ; preds = %4
  %10 = getelementptr [4 x i8], [4 x i8]* @.str.31.1462, i32 0, i32 0
  %11 = call i32 @strcmp(i8* %7, i8* %10) #14
  %12 = icmp eq i32 %11, 0
  %13 = icmp ne i8* %7, null
  %or.cond = and i1 %12, %13
  br i1 %or.cond, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %9
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %24
  %.02 = phi i32 [ %25, %24 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 369)
  %14 = getelementptr [5 x i8], [5 x i8]* @.str.30.1461, i32 0, i32 0
  %15 = call i8* @strtok_r(i8* null, i8* %14, i8** %5) #8, !track !741
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %24

; <label>:17:                                     ; preds = %.lr.ph
  %18 = getelementptr inbounds i8, i8* %15, i64 0
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  switch i32 %20, label %24 [
    i32 97, label %21
    i32 107, label %22
    i32 117, label %23
  ]

; <label>:21:                                     ; preds = %17
  store i32 %.02, i32* %1, align 4
  br label %24

; <label>:22:                                     ; preds = %17
  store i32 %.02, i32* %2, align 4
  br label %24

; <label>:23:                                     ; preds = %17
  store i32 %.02, i32* %3, align 4
  br label %24

; <label>:24:                                     ; preds = %21, %22, %23, %17, %.lr.ph
  %25 = add nuw nsw i32 %.02, 1
  %26 = icmp ne i8* %15, null
  br i1 %26, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %24
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9, %4
  %27 = load i32, i32* %1, align 4
  %28 = icmp ne i32 %27, -1
  br i1 %28, label %29, label %35

; <label>:29:                                     ; preds = %._crit_edge
  %30 = load i32, i32* %2, align 4
  %31 = icmp ne i32 %30, -1
  br i1 %31, label %32, label %35

; <label>:32:                                     ; preds = %29
  %33 = load i32, i32* %3, align 4
  %34 = icmp ne i32 %33, -1
  br label %35

; <label>:35:                                     ; preds = %32, %29, %._crit_edge
  %36 = phi i1 [ false, %29 ], [ false, %._crit_edge ], [ %34, %32 ]
  ret i1 %36
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @warc_hash_sha1_digest(i8*) #0 {
  %2 = alloca i64, align 8
  store i64 0, i64* %2, align 8
  %3 = bitcast i64* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 1 %0, i64 8, i1 false)
  %4 = load i64, i64* %2, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @warc_cmp_sha1_digest(i8*, i8*) #0 {
  %3 = call i32 @memcmp(i8* %0, i8* %1, i64 20) #14
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define internal void @warc_process_cdx_line(i8*, i32, i32, i32) #0 {
  %5 = alloca i8*, align 8, !track !742
  %6 = alloca i8*, align 8, !track !743
  %7 = alloca i8*, align 8, !track !744
  %8 = alloca i8*, align 8, !track !745
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8, !track !746
  store i8* null, i8** %5, align 8
  store i8* null, i8** %6, align 8
  store i8* null, i8** %7, align 8
  %11 = getelementptr [5 x i8], [5 x i8]* @.str.30.1461, i32 0, i32 0
  %12 = call i8* @strtok_r(i8* %0, i8* %11, i8** %8) #8, !track !747
  %13 = icmp ne i8* %12, null
  br i1 %13, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %22
  %.014 = phi i32 [ %25, %22 ], [ 0, %.lr.ph.preheader ]
  %.023 = phi i8* [ %24, %22 ], [ %12, %.lr.ph.preheader ]
  call void @unroll_loop(i32 370)
  %14 = icmp eq i32 %.014, %1
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %.lr.ph
  %16 = icmp eq i32 %.014, %2
  %17 = icmp eq i32 %.014, %3
  %. = select i1 %17, i8** %7, i8** null
  %.1 = select i1 %16, i8** %6, i8** %.
  br label %18

; <label>:18:                                     ; preds = %15, %.lr.ph
  %.2 = phi i8** [ %5, %.lr.ph ], [ %.1, %15 ]
  %19 = icmp ne i8** %.2, null
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %18
  %21 = call noalias i8* @strdup(i8* %.023) #8, !track !748
  store i8* %21, i8** %.2, align 8
  br label %22

; <label>:22:                                     ; preds = %20, %18
  %23 = getelementptr [5 x i8], [5 x i8]* @.str.30.1461, i32 0, i32 0
  %24 = call i8* @strtok_r(i8* null, i8* %23, i8** %8) #8, !track !749
  %25 = add nuw nsw i32 %.014, 1
  %26 = icmp ne i8* %24, null
  br i1 %26, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %22
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %27 = load i8*, i8** %5, align 8
  %28 = icmp ne i8* %27, null
  %29 = load i8*, i8** %6, align 8
  %30 = icmp ne i8* %29, null
  %or.cond = and i1 %28, %30
  %31 = load i8*, i8** %7, align 8
  %32 = icmp ne i8* %31, null
  %or.cond3 = and i1 %or.cond, %32
  %33 = load i8*, i8** %6, align 8
  br i1 %or.cond3, label %34, label %62

; <label>:34:                                     ; preds = %._crit_edge
  %35 = load i8*, i8** %6, align 8
  %36 = call i64 @strlen(i8* %35) #14
  %37 = call zeroext i1 @base32_decode_alloc_ctx(%struct.ntlmdata* null, i8* %33, i64 %36, i8** %10, i64* %9)
  %38 = load i8*, i8** %6, align 8
  call void @free(i8* %38) #8
  store i8* null, i8** %6, align 8
  %39 = load i8*, i8** %10, align 8
  %40 = icmp ne i8* %39, null
  %41 = load i64, i64* %9, align 8
  %42 = icmp eq i64 %41, 20
  %or.cond5 = and i1 %40, %42
  br i1 %or.cond5, label %43, label %58

; <label>:43:                                     ; preds = %34
  %44 = call noalias i8* @xmalloc(i64 40)
  %45 = bitcast i8* %44 to %struct.warc_cdx_record*
  %46 = load i8*, i8** %5, align 8
  %47 = getelementptr inbounds %struct.warc_cdx_record, %struct.warc_cdx_record* %45, i32 0, i32 0
  store i8* %46, i8** %47, align 8
  %48 = load i8*, i8** %7, align 8
  %49 = getelementptr inbounds %struct.warc_cdx_record, %struct.warc_cdx_record* %45, i32 0, i32 1
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %struct.warc_cdx_record, %struct.warc_cdx_record* %45, i32 0, i32 2
  %51 = getelementptr inbounds [20 x i8], [20 x i8]* %50, i32 0, i32 0
  %52 = load i8*, i8** %10, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 1 %52, i64 20, i1 false), !track !750
  %53 = load %struct.hash_table*, %struct.hash_table** @warc_cdx_dedup_table, align 8
  %54 = getelementptr inbounds %struct.warc_cdx_record, %struct.warc_cdx_record* %45, i32 0, i32 2
  %55 = getelementptr inbounds [20 x i8], [20 x i8]* %54, i32 0, i32 0
  %56 = bitcast %struct.warc_cdx_record* %45 to i8*
  call void @hash_table_put(%struct.hash_table* %53, i8* %55, i8* %56)
  %57 = load i8*, i8** %10, align 8
  call void @free(i8* %57) #8
  store i8* null, i8** %10, align 8
  br label %65

; <label>:58:                                     ; preds = %34
  %59 = load i8*, i8** %5, align 8
  call void @free(i8* %59) #8
  store i8* null, i8** %5, align 8
  %60 = load i8*, i8** %10, align 8
  call void @free(i8* %60) #8
  store i8* null, i8** %10, align 8
  %61 = load i8*, i8** %7, align 8
  call void @free(i8* %61) #8
  store i8* null, i8** %7, align 8
  br label %65

; <label>:62:                                     ; preds = %._crit_edge
  call void @free(i8* %33) #8
  store i8* null, i8** %6, align 8
  %63 = load i8*, i8** %5, align 8
  call void @free(i8* %63) #8
  store i8* null, i8** %5, align 8
  %64 = load i8*, i8** %7, align 8
  call void @free(i8* %64) #8
  store i8* null, i8** %7, align 8
  br label %65

; <label>:65:                                     ; preds = %43, %58, %62
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @strtok_r(i8*, i8*, i8**) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @warc_close() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %2 = icmp ne %struct._IO_FILE* %1, null
  br i1 %2, label %3, label %7

; <label>:3:                                      ; preds = %0
  call void @warc_write_metadata()
  %4 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  store i8 0, i8* %4, align 16
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %6 = call i32 @fclose(%struct._IO_FILE* %5)
  br label %7

; <label>:7:                                      ; preds = %3, %0
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %9 = icmp ne %struct._IO_FILE* %8, null
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %7
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %12 = call i32 @fclose(%struct._IO_FILE* %11)
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_log_fp, align 8
  %15 = icmp ne %struct._IO_FILE* %14, null
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %13
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_log_fp, align 8
  %18 = call i32 @fclose(%struct._IO_FILE* %17)
  call void @log_set_warc_log_fp(%struct._IO_FILE* null)
  br label %19

; <label>:19:                                     ; preds = %16, %13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @warc_write_metadata() #0 {
  %1 = alloca [48 x i8], align 16
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 50
  %3 = load i64, i64* %2, align 8
  %4 = icmp sgt i64 %3, 0
  br i1 %4, label %5, label %7

; <label>:5:                                      ; preds = %0
  %6 = call zeroext i1 @warc_start_new_file(i1 zeroext true)
  br label %7

; <label>:7:                                      ; preds = %5, %0
  %8 = getelementptr inbounds [48 x i8], [48 x i8]* %1, i32 0, i32 0
  call void @warc_uuid_str(i8* %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_manifest_fp, align 8
  %10 = call i32 @fflush(%struct._IO_FILE* %9)
  %11 = getelementptr inbounds [48 x i8], [48 x i8]* %1, i32 0, i32 0
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_manifest_fp, align 8
  %13 = getelementptr [51 x i8], [51 x i8]* @.str.58.1465, i32 0, i32 0
  %14 = getelementptr [11 x i8], [11 x i8]* @.str.59.1466, i32 0, i32 0
  %15 = call zeroext i1 @warc_write_metadata_record(i8* %11, i8* %13, i8* null, i8* null, %struct.ip_address* null, i8* %14, %struct._IO_FILE* %12, i64 -1)
  %16 = call %struct._IO_FILE* @warc_tempfile()
  %17 = icmp eq %struct._IO_FILE* %16, null
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %7
  %19 = getelementptr [37 x i8], [37 x i8]* @.str.60.1467, i32 0, i32 0
  %20 = call i8* @gettext(i8* %19) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %20)
  call void @exit(i32 1) #16
  unreachable

; <label>:21:                                     ; preds = %7
  %22 = call i32 @fflush(%struct._IO_FILE* %16)
  %23 = load i8*, i8** @program_argstring, align 8
  %24 = getelementptr [4 x i8], [4 x i8]* @.str.39.1426, i32 0, i32 0
  %25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* %24, i8* %23)
  %26 = getelementptr inbounds [48 x i8], [48 x i8]* %1, i32 0, i32 0
  %27 = getelementptr [57 x i8], [57 x i8]* @.str.61.1468, i32 0, i32 0
  %28 = getelementptr [11 x i8], [11 x i8]* @.str.59.1466, i32 0, i32 0
  %29 = call zeroext i1 @warc_write_resource_record(i8* null, i8* %27, i8* null, i8* %26, %struct.ip_address* null, i8* %28, %struct._IO_FILE* %16, i64 -1)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_log_fp, align 8
  %31 = icmp ne %struct._IO_FILE* %30, null
  br i1 %31, label %32, label %38

; <label>:32:                                     ; preds = %21
  %33 = getelementptr inbounds [48 x i8], [48 x i8]* %1, i32 0, i32 0
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_log_fp, align 8
  %35 = getelementptr [47 x i8], [47 x i8]* @.str.62.1471, i32 0, i32 0
  %36 = getelementptr [11 x i8], [11 x i8]* @.str.59.1466, i32 0, i32 0
  %37 = call zeroext i1 @warc_write_resource_record(i8* null, i8* %35, i8* null, i8* %33, %struct.ip_address* null, i8* %36, %struct._IO_FILE* %34, i64 -1)
  store %struct._IO_FILE* null, %struct._IO_FILE** @warc_log_fp, align 8
  call void @log_set_warc_log_fp(%struct._IO_FILE* null)
  br label %38

; <label>:38:                                     ; preds = %32, %21
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @warc_write_metadata_record(i8*, i8*, i8*, i8*, %struct.ip_address*, i8*, %struct._IO_FILE*, i64) #0 {
  %9 = getelementptr [9 x i8], [9 x i8]* @.str.23.1478, i32 0, i32 0
  %10 = call zeroext i1 @warc_write_record(i8* %9, i8* %0, i8* %1, i8* %2, i8* %3, %struct.ip_address* %4, i8* %5, %struct._IO_FILE* %6, i64 %7)
  ret i1 %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @warc_write_resource_record(i8*, i8*, i8*, i8*, %struct.ip_address*, i8*, %struct._IO_FILE*, i64) #0 {
  %9 = getelementptr [9 x i8], [9 x i8]* @.str.22.1472, i32 0, i32 0
  %10 = call zeroext i1 @warc_write_record(i8* %9, i8* %0, i8* %1, i8* %2, i8* %3, %struct.ip_address* %4, i8* %5, %struct._IO_FILE* %6, i64 %7)
  ret i1 %10
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_record(i8*, i8*, i8*, i8*, i8*, %struct.ip_address*, i8*, %struct._IO_FILE*, i64) #0 {
  %10 = icmp eq i8* %1, null
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %9
  %12 = alloca i8, i64 48, align 16
  call void @warc_uuid_str(i8* %12)
  br label %13

; <label>:13:                                     ; preds = %11, %9
  %.01 = phi i8* [ %12, %11 ], [ %1, %9 ]
  %14 = icmp eq i8* %6, null
  %15 = getelementptr [25 x i8], [25 x i8]* @.str.79.1473, i32 0, i32 0
  %spec.select = select i1 %14, i8* %15, i8* %6
  %16 = call zeroext i1 @warc_write_start_record()
  %17 = getelementptr [10 x i8], [10 x i8]* @.str.9.1427, i32 0, i32 0
  %18 = call zeroext i1 @warc_write_header(i8* %17, i8* %0)
  %19 = getelementptr [15 x i8], [15 x i8]* @.str.14.1432, i32 0, i32 0
  %20 = call zeroext i1 @warc_write_header(i8* %19, i8* %.01)
  %21 = getelementptr [17 x i8], [17 x i8]* @.str.15.1474, i32 0, i32 0
  %22 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  %23 = call zeroext i1 @warc_write_header(i8* %21, i8* %22)
  %24 = getelementptr [19 x i8], [19 x i8]* @.str.18.1475, i32 0, i32 0
  %25 = call zeroext i1 @warc_write_header(i8* %24, i8* %4)
  %26 = getelementptr [16 x i8], [16 x i8]* @.str.11.1476, i32 0, i32 0
  %27 = call zeroext i1 @warc_write_header(i8* %26, i8* %2)
  %28 = call zeroext i1 @warc_write_date_header(i8* %3)
  %29 = call zeroext i1 @warc_write_ip_header(%struct.ip_address* %5)
  call void @warc_write_digest_headers(%struct._IO_FILE* %7, i64 %8)
  %30 = getelementptr [13 x i8], [13 x i8]* @.str.12.1429, i32 0, i32 0
  %31 = call zeroext i1 @warc_write_header(i8* %30, i8* %spec.select)
  %32 = call zeroext i1 @warc_write_block_from_file(%struct._IO_FILE* %7)
  %33 = call zeroext i1 @warc_write_end_record()
  %34 = call i32 @fclose(%struct._IO_FILE* %7)
  %35 = load i8, i8* @warc_write_ok, align 1
  %36 = trunc i8 %35 to i1
  ret i1 %36
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_date_header(i8*) #0 {
  %2 = alloca [21 x i8], align 16
  %3 = icmp ne i8* %0, null
  br i1 %3, label %7, label %4

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i32 0, i32 0
  %6 = call i8* @warc_timestamp(i8* %5, i64 21)
  br label %7

; <label>:7:                                      ; preds = %1, %4
  %8 = phi i8* [ %6, %4 ], [ %0, %1 ]
  %9 = getelementptr [10 x i8], [10 x i8]* @.str.42.1431, i32 0, i32 0
  %10 = call zeroext i1 @warc_write_header(i8* %9, i8* %8)
  ret i1 %10
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_ip_header(%struct.ip_address*) #0 {
  %2 = icmp ne %struct.ip_address* %0, null
  br i1 %2, label %3, label %7

; <label>:3:                                      ; preds = %1
  %4 = call i8* @print_address(%struct.ip_address* %0)
  %5 = getelementptr [16 x i8], [16 x i8]* @.str.67.1477, i32 0, i32 0
  %6 = call zeroext i1 @warc_write_header(i8* %5, i8* %4)
  br label %10

; <label>:7:                                      ; preds = %1
  %8 = load i8, i8* @warc_write_ok, align 1
  %9 = trunc i8 %8 to i1
  br label %10

; <label>:10:                                     ; preds = %7, %3
  %.0 = phi i1 [ %6, %3 ], [ %9, %7 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @warc_write_request_record(i8*, i8*, i8*, %struct.ip_address*, %struct._IO_FILE*, i64) #0 {
  %7 = call zeroext i1 @warc_write_start_record()
  %8 = getelementptr [10 x i8], [10 x i8]* @.str.9.1427, i32 0, i32 0
  %9 = getelementptr [8 x i8], [8 x i8]* @.str.10.1481, i32 0, i32 0
  %10 = call zeroext i1 @warc_write_header(i8* %8, i8* %9)
  %11 = getelementptr [16 x i8], [16 x i8]* @.str.11.1476, i32 0, i32 0
  %12 = call zeroext i1 @warc_write_header(i8* %11, i8* %0)
  %13 = getelementptr [13 x i8], [13 x i8]* @.str.12.1429, i32 0, i32 0
  %14 = getelementptr [33 x i8], [33 x i8]* @.str.13.1482, i32 0, i32 0
  %15 = call zeroext i1 @warc_write_header(i8* %13, i8* %14)
  %16 = call zeroext i1 @warc_write_date_header(i8* %1)
  %17 = getelementptr [15 x i8], [15 x i8]* @.str.14.1432, i32 0, i32 0
  %18 = call zeroext i1 @warc_write_header(i8* %17, i8* %2)
  %19 = call zeroext i1 @warc_write_ip_header(%struct.ip_address* %3)
  %20 = getelementptr [17 x i8], [17 x i8]* @.str.15.1474, i32 0, i32 0
  %21 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  %22 = call zeroext i1 @warc_write_header(i8* %20, i8* %21)
  call void @warc_write_digest_headers(%struct._IO_FILE* %4, i64 %5)
  %23 = call zeroext i1 @warc_write_block_from_file(%struct._IO_FILE* %4)
  %24 = call zeroext i1 @warc_write_end_record()
  %25 = call i32 @fclose(%struct._IO_FILE* %4)
  %26 = load i8, i8* @warc_write_ok, align 1
  %27 = trunc i8 %26 to i1
  ret i1 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @warc_write_response_record(i8*, i8*, i8*, %struct.ip_address*, %struct._IO_FILE*, i64, i8*, i32, i8*) #0 {
  %10 = alloca [38 x i8], align 16
  %11 = alloca [38 x i8], align 16
  %12 = alloca [20 x i8], align 16
  %13 = alloca [20 x i8], align 16
  %14 = alloca [48 x i8], align 16
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 52
  %16 = load i8, i8* %15, align 1
  %17 = trunc i8 %16 to i1
  br i1 %17, label %18, label %52

; <label>:18:                                     ; preds = %9
  call void @rewind(%struct._IO_FILE* %4)
  %19 = getelementptr inbounds [20 x i8], [20 x i8]* %12, i32 0, i32 0
  %20 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i32 0, i32 0
  %21 = call i32 @warc_sha1_stream_with_payload(%struct._IO_FILE* %4, i8* %19, i8* %20, i64 %5)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %52

; <label>:23:                                     ; preds = %18
  %24 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i32 0, i32 0
  %25 = call %struct.warc_cdx_record* @warc_find_duplicate_cdx_record(i8* %0, i8* %24)
  %26 = icmp ne %struct.warc_cdx_record* %25, null
  br i1 %26, label %27, label %45

; <label>:27:                                     ; preds = %23
  %28 = getelementptr [63 x i8], [63 x i8]* @.str.16.1485, i32 0, i32 0
  %29 = call i8* @gettext(i8* %28) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %29)
  %30 = icmp sgt i64 %5, 0
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %27
  %32 = call i32 @fileno(%struct._IO_FILE* %4) #8
  %33 = call i32 @ftruncate(i32 %32, i64 %5) #8
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %100, label %35

; <label>:35:                                     ; preds = %31, %27
  %36 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i32 0, i32 0
  %37 = getelementptr inbounds [38 x i8], [38 x i8]* %11, i32 0, i32 0
  %38 = call i8* @warc_base32_sha1_digest(i8* %36, i8* %37, i64 38)
  %39 = getelementptr inbounds [38 x i8], [38 x i8]* %11, i32 0, i32 0
  %40 = getelementptr inbounds %struct.warc_cdx_record, %struct.warc_cdx_record* %25, i32 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = call zeroext i1 @warc_write_revisit_record(i8* %0, i8* %1, i8* %2, i8* %39, i8* %41, %struct.ip_address* %3, %struct._IO_FILE* %4)
  %43 = zext i1 %42 to i8
  %44 = trunc i8 %43 to i1
  br label %100

; <label>:45:                                     ; preds = %23
  %46 = getelementptr inbounds [20 x i8], [20 x i8]* %12, i32 0, i32 0
  %47 = getelementptr inbounds [38 x i8], [38 x i8]* %10, i32 0, i32 0
  %48 = call i8* @warc_base32_sha1_digest(i8* %46, i8* %47, i64 38)
  %49 = getelementptr inbounds [20 x i8], [20 x i8]* %13, i32 0, i32 0
  %50 = getelementptr inbounds [38 x i8], [38 x i8]* %11, i32 0, i32 0
  %51 = call i8* @warc_base32_sha1_digest(i8* %49, i8* %50, i64 38)
  br label %52

; <label>:52:                                     ; preds = %18, %45, %9
  %53 = getelementptr inbounds [48 x i8], [48 x i8]* %14, i32 0, i32 0
  call void @warc_uuid_str(i8* %53)
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %55 = call i32 @fseeko(%struct._IO_FILE* %54, i64 0, i32 2)
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_file, align 8
  %57 = call i64 @ftello(%struct._IO_FILE* %56)
  %58 = call zeroext i1 @warc_write_start_record()
  %59 = getelementptr [10 x i8], [10 x i8]* @.str.9.1427, i32 0, i32 0
  %60 = getelementptr [9 x i8], [9 x i8]* @.str.17.1486, i32 0, i32 0
  %61 = call zeroext i1 @warc_write_header(i8* %59, i8* %60)
  %62 = getelementptr inbounds [48 x i8], [48 x i8]* %14, i32 0, i32 0
  %63 = getelementptr [15 x i8], [15 x i8]* @.str.14.1432, i32 0, i32 0
  %64 = call zeroext i1 @warc_write_header(i8* %63, i8* %62)
  %65 = getelementptr [17 x i8], [17 x i8]* @.str.15.1474, i32 0, i32 0
  %66 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  %67 = call zeroext i1 @warc_write_header(i8* %65, i8* %66)
  %68 = getelementptr [19 x i8], [19 x i8]* @.str.18.1475, i32 0, i32 0
  %69 = call zeroext i1 @warc_write_header(i8* %68, i8* %2)
  %70 = getelementptr [16 x i8], [16 x i8]* @.str.11.1476, i32 0, i32 0
  %71 = call zeroext i1 @warc_write_header(i8* %70, i8* %0)
  %72 = call zeroext i1 @warc_write_date_header(i8* %1)
  %73 = call zeroext i1 @warc_write_ip_header(%struct.ip_address* %3)
  %74 = getelementptr inbounds [38 x i8], [38 x i8]* %10, i32 0, i32 0
  %75 = getelementptr [18 x i8], [18 x i8]* @.str.19.1447, i32 0, i32 0
  %76 = call zeroext i1 @warc_write_header(i8* %75, i8* %74)
  %77 = getelementptr inbounds [38 x i8], [38 x i8]* %11, i32 0, i32 0
  %78 = getelementptr [20 x i8], [20 x i8]* @.str.20.1448, i32 0, i32 0
  %79 = call zeroext i1 @warc_write_header(i8* %78, i8* %77)
  %80 = getelementptr [13 x i8], [13 x i8]* @.str.12.1429, i32 0, i32 0
  %81 = getelementptr [34 x i8], [34 x i8]* @.str.21.1487, i32 0, i32 0
  %82 = call zeroext i1 @warc_write_header(i8* %80, i8* %81)
  %83 = call zeroext i1 @warc_write_block_from_file(%struct._IO_FILE* %4)
  %84 = call zeroext i1 @warc_write_end_record()
  %85 = call i32 @fclose(%struct._IO_FILE* %4)
  %86 = load i8, i8* @warc_write_ok, align 1
  %87 = trunc i8 %86 to i1
  br i1 %87, label %88, label %97

; <label>:88:                                     ; preds = %52
  %89 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 53
  %90 = load i8, i8* %89, align 2
  %91 = trunc i8 %90 to i1
  br i1 %91, label %92, label %97

; <label>:92:                                     ; preds = %88
  %93 = getelementptr inbounds [38 x i8], [38 x i8]* %11, i32 0, i32 0
  %94 = load i8*, i8** @warc_current_filename, align 8
  %95 = getelementptr inbounds [48 x i8], [48 x i8]* %14, i32 0, i32 0
  %96 = call zeroext i1 @warc_write_cdx_record(i8* %0, i8* %1, i8* %6, i32 %7, i8* %93, i8* %8, i64 %57, i8* %94, i8* %95)
  br label %97

; <label>:97:                                     ; preds = %92, %88, %52
  %98 = load i8, i8* @warc_write_ok, align 1
  %99 = trunc i8 %98 to i1
  br label %100

; <label>:100:                                    ; preds = %31, %97, %35
  %.0 = phi i1 [ %44, %35 ], [ %99, %97 ], [ false, %31 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.warc_cdx_record* @warc_find_duplicate_cdx_record(i8*, i8*) #0 {
  %3 = load %struct.hash_table*, %struct.hash_table** @warc_cdx_dedup_table, align 8
  %4 = icmp eq %struct.hash_table* %3, null
  br i1 %4, label %16, label %5

; <label>:5:                                      ; preds = %2
  %6 = load %struct.hash_table*, %struct.hash_table** @warc_cdx_dedup_table, align 8
  %7 = call i8* @hash_table_get(%struct.hash_table* %6, i8* %1)
  %8 = bitcast i8* %7 to %struct.warc_cdx_record*
  %9 = icmp ne %struct.warc_cdx_record* %8, null
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.warc_cdx_record, %struct.warc_cdx_record* %8, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = call i32 @strcmp(i8* %12, i8* %0) #14
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

; <label>:15:                                     ; preds = %10, %5
  br label %16

; <label>:16:                                     ; preds = %10, %2, %15
  %.0 = phi %struct.warc_cdx_record* [ null, %15 ], [ null, %2 ], [ %8, %10 ]
  ret %struct.warc_cdx_record* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_revisit_record(i8*, i8*, i8*, i8*, i8*, %struct.ip_address*, %struct._IO_FILE*) #0 {
  %8 = alloca [48 x i8], align 16
  %9 = alloca [38 x i8], align 16
  %10 = alloca [20 x i8], align 16
  %11 = getelementptr inbounds [48 x i8], [48 x i8]* %8, i32 0, i32 0
  call void @warc_uuid_str(i8* %11)
  %12 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i32 0, i32 0
  %13 = call i32 @sha1_stream(%struct._IO_FILE* %6, i8* %12)
  %14 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i32 0, i32 0
  %15 = getelementptr inbounds [38 x i8], [38 x i8]* %9, i32 0, i32 0
  %16 = call i8* @warc_base32_sha1_digest(i8* %14, i8* %15, i64 38)
  %17 = call zeroext i1 @warc_write_start_record()
  %18 = getelementptr [10 x i8], [10 x i8]* @.str.9.1427, i32 0, i32 0
  %19 = getelementptr [8 x i8], [8 x i8]* @.str.71.1490, i32 0, i32 0
  %20 = call zeroext i1 @warc_write_header(i8* %18, i8* %19)
  %21 = getelementptr inbounds [48 x i8], [48 x i8]* %8, i32 0, i32 0
  %22 = getelementptr [15 x i8], [15 x i8]* @.str.14.1432, i32 0, i32 0
  %23 = call zeroext i1 @warc_write_header(i8* %22, i8* %21)
  %24 = getelementptr [17 x i8], [17 x i8]* @.str.15.1474, i32 0, i32 0
  %25 = getelementptr [48 x i8], [48 x i8]* @warc_current_warcinfo_uuid_str, i32 0, i32 0
  %26 = call zeroext i1 @warc_write_header(i8* %24, i8* %25)
  %27 = getelementptr [19 x i8], [19 x i8]* @.str.18.1475, i32 0, i32 0
  %28 = call zeroext i1 @warc_write_header(i8* %27, i8* %2)
  %29 = getelementptr [15 x i8], [15 x i8]* @.str.72.1491, i32 0, i32 0
  %30 = call zeroext i1 @warc_write_header(i8* %29, i8* %4)
  %31 = getelementptr [13 x i8], [13 x i8]* @.str.73.1492, i32 0, i32 0
  %32 = getelementptr [65 x i8], [65 x i8]* @.str.74.1493, i32 0, i32 0
  %33 = call zeroext i1 @warc_write_header(i8* %31, i8* %32)
  %34 = getelementptr [15 x i8], [15 x i8]* @.str.75.1494, i32 0, i32 0
  %35 = getelementptr [7 x i8], [7 x i8]* @.str.76.1495, i32 0, i32 0
  %36 = call zeroext i1 @warc_write_header(i8* %34, i8* %35)
  %37 = getelementptr [16 x i8], [16 x i8]* @.str.11.1476, i32 0, i32 0
  %38 = call zeroext i1 @warc_write_header(i8* %37, i8* %0)
  %39 = call zeroext i1 @warc_write_date_header(i8* %1)
  %40 = call zeroext i1 @warc_write_ip_header(%struct.ip_address* %5)
  %41 = getelementptr [13 x i8], [13 x i8]* @.str.12.1429, i32 0, i32 0
  %42 = getelementptr [34 x i8], [34 x i8]* @.str.21.1487, i32 0, i32 0
  %43 = call zeroext i1 @warc_write_header(i8* %41, i8* %42)
  %44 = getelementptr inbounds [38 x i8], [38 x i8]* %9, i32 0, i32 0
  %45 = getelementptr [18 x i8], [18 x i8]* @.str.19.1447, i32 0, i32 0
  %46 = call zeroext i1 @warc_write_header(i8* %45, i8* %44)
  %47 = getelementptr [20 x i8], [20 x i8]* @.str.20.1448, i32 0, i32 0
  %48 = call zeroext i1 @warc_write_header(i8* %47, i8* %3)
  %49 = call zeroext i1 @warc_write_block_from_file(%struct._IO_FILE* %6)
  %50 = call zeroext i1 @warc_write_end_record()
  %51 = call i32 @fclose(%struct._IO_FILE* %6)
  %52 = load i8, i8* @warc_write_ok, align 1
  %53 = trunc i8 %52 to i1
  ret i1 %53
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @warc_write_cdx_record(i8*, i8*, i8*, i32, i8*, i8*, i64, i8*, i8*) #0 {
  %10 = alloca [15 x i8], align 1, !track !751
  %11 = alloca [21 x i8], align 16, !track !752
  %12 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %1, i64 4, i1 false), !track !753
  %13 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i32 0, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 4
  %15 = getelementptr inbounds i8, i8* %1, i64 5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 2, i1 false), !track !754
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i32 0, i32 0
  %17 = getelementptr inbounds i8, i8* %16, i64 6
  %18 = getelementptr inbounds i8, i8* %1, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %18, i64 2, i1 false), !track !755
  %19 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i32 0, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 8
  %21 = getelementptr inbounds i8, i8* %1, i64 11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 2, i1 false), !track !756
  %22 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i32 0, i32 0
  %23 = getelementptr inbounds i8, i8* %22, i64 10
  %24 = getelementptr inbounds i8, i8* %1, i64 14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 2, i1 false), !track !757
  %25 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i32 0, i32 0
  %26 = getelementptr inbounds i8, i8* %25, i64 12
  %27 = getelementptr inbounds i8, i8* %1, i64 17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %27, i64 2, i1 false), !track !758
  %28 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i64 0, i64 14
  store i8 0, i8* %28, align 1
  %29 = icmp ne i8* %4, null
  %30 = getelementptr inbounds i8, i8* %4, i64 5
  %31 = getelementptr [2 x i8], [2 x i8]* @.str.77.1488, i32 0, i32 0
  %.0 = select i1 %29, i8* %30, i8* %31
  %32 = icmp eq i8* %2, null
  br i1 %32, label %36, label %33

; <label>:33:                                     ; preds = %9
  %34 = call i64 @strlen(i8* %2) #14
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %33, %9
  %37 = getelementptr [2 x i8], [2 x i8]* @.str.77.1488, i32 0, i32 0
  br label %38

; <label>:38:                                     ; preds = %36, %33
  %.02 = phi i8* [ %37, %36 ], [ %2, %33 ]
  %39 = icmp eq i8* %5, null
  br i1 %39, label %43, label %40

; <label>:40:                                     ; preds = %38
  %41 = call i64 @strlen(i8* %5) #14
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %45

; <label>:43:                                     ; preds = %40, %38
  %44 = getelementptr [2 x i8], [2 x i8]* @.str.77.1488, i32 0, i32 0
  br label %45

; <label>:45:                                     ; preds = %43, %40
  %.01 = phi i8* [ %44, %43 ], [ %5, %40 ]
  %46 = getelementptr inbounds [21 x i8], [21 x i8]* %11, i32 0, i32 0
  %47 = call i8* @number_to_string(i8* %46, i64 %6)
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %49 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i32 0, i32 0
  %50 = getelementptr inbounds [21 x i8], [21 x i8]* %11, i32 0, i32 0
  %51 = load i8*, i8** @warc_current_filename, align 8
  %52 = getelementptr [33 x i8], [33 x i8]* @.str.78.1489, i32 0, i32 0
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %52, i8* %0, i8* %49, i8* %0, i8* %.02, i32 %3, i8* %.0, i8* %.01, i8* %50, i8* %51, i8* %8)
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @warc_current_cdx_file, align 8
  %55 = call i32 @fflush(%struct._IO_FILE* %54)
  ret i1 true
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @xstrdup_lower(i8*) #7 {
  %2 = call noalias i8* @xstrdup(i8* %0)
  %3 = load i8, i8* %2, align 1
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i8* [ %9, %.lr.ph ], [ %2, %.lr.ph.preheader ]
  call void @unroll_loop(i32 371)
  %5 = load i8, i8* %.01, align 1
  %6 = sext i8 %5 to i32
  %7 = call i32 @c_tolower(i32 %6)
  %8 = trunc i32 %7 to i8
  store i8 %8, i8* %.01, align 1
  %9 = getelementptr inbounds i8, i8* %.01, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @strdupdelim(i8*, i8*) #7 {
  %3 = ptrtoint i8* %1 to i64
  %4 = ptrtoint i8* %0 to i64
  %5 = sub i64 %3, %4
  %6 = add nsw i64 %5, 1
  %7 = call noalias i8* @xmalloc(i64 %6)
  %8 = ptrtoint i8* %1 to i64
  %9 = ptrtoint i8* %0 to i64
  %10 = sub i64 %8, %9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %0, i64 %10, i1 false), !track !759
  %11 = ptrtoint i8* %1 to i64
  %12 = ptrtoint i8* %0 to i64
  %13 = sub i64 %11, %12
  %14 = getelementptr inbounds i8, i8* %7, i64 %13
  store i8 0, i8* %14, align 1
  ret i8* %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8** @sepstring(i8*) #7 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %48

; <label>:3:                                      ; preds = %1
  %4 = load i8, i8* %0, align 1
  %5 = icmp ne i8 %4, 0
  br i1 %5, label %6, label %48

; <label>:6:                                      ; preds = %3
  %7 = load i8, i8* %0, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %33
  %.0111 = phi i8* [ %.2, %33 ], [ %0, %.lr.ph.preheader ]
  %.0210 = phi i8** [ %.13, %33 ], [ null, %.lr.ph.preheader ]
  %.049 = phi i8* [ %.15, %33 ], [ %0, %.lr.ph.preheader ]
  %.068 = phi i32 [ %.17, %33 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 372)
  %9 = load i8, i8* %.0111, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, 44
  br i1 %11, label %12, label %31

; <label>:12:                                     ; preds = %.lr.ph
  %13 = bitcast i8** %.0210 to i8*
  %14 = add nsw i32 %.068, 2
  %15 = sext i32 %14 to i64
  %16 = mul i64 %15, 8
  %17 = call i8* @xrealloc(i8* %13, i64 %16)
  %18 = bitcast i8* %17 to i8**
  %19 = call i8* @strdupdelim(i8* %.049, i8* %.0111)
  %20 = sext i32 %.068 to i64
  %21 = getelementptr inbounds i8*, i8** %18, i64 %20
  store i8* %19, i8** %21, align 8
  %22 = add nsw i32 %.068, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8*, i8** %18, i64 %23
  store i8* null, i8** %24, align 8
  %25 = getelementptr inbounds i8, i8* %.0111, i32 1
  br label %26

; <label>:26:                                     ; preds = %26, %12
  %.1 = phi i8* [ %25, %12 ], [ %30, %26 ]
  call void @unroll_loop(i32 373)
  %27 = load i8, i8* %.1, align 1
  %28 = sext i8 %27 to i32
  %29 = call zeroext i1 @c_isspace(i32 %28)
  %30 = getelementptr inbounds i8, i8* %.1, i32 1
  br i1 %29, label %26, label %.loopexit

; <label>:31:                                     ; preds = %.lr.ph
  %32 = getelementptr inbounds i8, i8* %.0111, i32 1
  br label %33

.loopexit:                                        ; preds = %26
  %.17.ph = phi i32 [ %22, %26 ]
  %.15.ph = phi i8* [ %.1, %26 ]
  %.13.ph = phi i8** [ %18, %26 ]
  %.2.ph = phi i8* [ %.1, %26 ]
  br label %33

; <label>:33:                                     ; preds = %.loopexit, %31
  %.17 = phi i32 [ %.068, %31 ], [ %.17.ph, %.loopexit ]
  %.15 = phi i8* [ %.049, %31 ], [ %.15.ph, %.loopexit ]
  %.13 = phi i8** [ %.0210, %31 ], [ %.13.ph, %.loopexit ]
  %.2 = phi i8* [ %32, %31 ], [ %.2.ph, %.loopexit ]
  %34 = load i8, i8* %.2, align 1
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %33
  %.06.lcssa.ph = phi i32 [ %.17, %33 ]
  %.04.lcssa.ph = phi i8* [ %.15, %33 ]
  %.02.lcssa.ph = phi i8** [ %.13, %33 ]
  %.01.lcssa.ph = phi i8* [ %.2, %33 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %6
  %.06.lcssa = phi i32 [ 0, %6 ], [ %.06.lcssa.ph, %._crit_edge.loopexit ]
  %.04.lcssa = phi i8* [ %0, %6 ], [ %.04.lcssa.ph, %._crit_edge.loopexit ]
  %.02.lcssa = phi i8** [ null, %6 ], [ %.02.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i8* [ %0, %6 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %36 = bitcast i8** %.02.lcssa to i8*
  %37 = add nsw i32 %.06.lcssa, 2
  %38 = sext i32 %37 to i64
  %39 = mul i64 %38, 8
  %40 = call i8* @xrealloc(i8* %36, i64 %39)
  %41 = bitcast i8* %40 to i8**
  %42 = call i8* @strdupdelim(i8* %.04.lcssa, i8* %.01.lcssa)
  %43 = sext i32 %.06.lcssa to i64
  %44 = getelementptr inbounds i8*, i8** %41, i64 %43
  store i8* %42, i8** %44, align 8
  %45 = add nsw i32 %.06.lcssa, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8*, i8** %41, i64 %46
  store i8* null, i8** %47, align 8
  br label %48

; <label>:48:                                     ; preds = %1, %3, %._crit_edge
  %.0 = phi i8** [ %41, %._crit_edge ], [ null, %3 ], [ null, %1 ]
  ret i8** %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @aprintf(i8*, ...) #7 {
  %2 = alloca [1 x %struct.__va_list_tag], align 16, !track !760
  %3 = alloca i8*, align 8, !track !761
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %5 = bitcast %struct.__va_list_tag* %4 to i8*
  call void @llvm.va_start(i8* %5)
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %7 = call i32 @vasprintf(i8** %3, i8* %0, %struct.__va_list_tag* %6) #8
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %9 = bitcast %struct.__va_list_tag* %8 to i8*
  call void @llvm.va_end(i8* %9)
  %10 = icmp slt i32 %7, 0
  br i1 %10, label %11, label %17

; <label>:11:                                     ; preds = %1
  %12 = call i32* @__errno_location() #15
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 12
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %11
  %16 = getelementptr [8 x i8], [8 x i8]* @.str.1506, i32 0, i32 0
  call void @memfatal(i8* %16, i64 -3) #17
  unreachable

; <label>:17:                                     ; preds = %11, %1
  %18 = icmp slt i32 %7, 0
  %19 = load i8*, i8** %3, align 8
  %.0 = select i1 %18, i8* null, i8* %19
  ret i8* %.0
}

; Function Attrs: nounwind
declare dso_local i32 @vasprintf(i8**, i8*, %struct.__va_list_tag*) #2

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @memfatal(i8*, i64) #9 {
  %3 = call zeroext i1 @log_set_save_context(i1 zeroext false)
  %4 = icmp eq i64 %1, -3
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %2
  %6 = getelementptr [61 x i8], [61 x i8]* @.str.36.1507, i32 0, i32 0
  %7 = call i8* @gettext(i8* %6) #8
  %8 = load i8*, i8** @exec_name, align 8
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %7, i8* %8, i8* %0)
  br label %13

; <label>:9:                                      ; preds = %2
  %10 = getelementptr [57 x i8], [57 x i8]* @.str.37.1508, i32 0, i32 0
  %11 = call i8* @gettext(i8* %10) #8
  %12 = load i8*, i8** @exec_name, align 8
  call void (i32, i8*, ...) @logprintf(i32 3, i8* %11, i8* %12, i8* %0, i64 %1)
  br label %13

; <label>:13:                                     ; preds = %9, %5
  call void @exit(i32 1) #16
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @strlcpy(i8*, i8*, i64) #0 {
  %4 = icmp ne i64 %2, 0
  br i1 %4, label %5, label %21

; <label>:5:                                      ; preds = %3
  %6 = add i64 %2, -1
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %5
  br label %.lr.ph

; <label>:8:                                      ; preds = %.lr.ph
  %9 = add i64 %11, -1
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %.lr.ph, label %._crit_edge.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %8
  %11 = phi i64 [ %9, %8 ], [ %6, %.lr.ph.preheader ]
  %.018 = phi i8* [ %14, %8 ], [ %0, %.lr.ph.preheader ]
  %.027 = phi i8* [ %12, %8 ], [ %1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 374)
  %12 = getelementptr inbounds i8, i8* %.027, i32 1
  %13 = load i8, i8* %.027, align 1
  %14 = getelementptr inbounds i8, i8* %.018, i32 1
  store i8 %13, i8* %.018, align 1
  %15 = icmp ne i8 %13, 0
  br i1 %15, label %8, label %16

; <label>:16:                                     ; preds = %.lr.ph
  %.lcssa6 = phi i8* [ %12, %.lr.ph ]
  %17 = ptrtoint i8* %.lcssa6 to i64
  %18 = ptrtoint i8* %1 to i64
  %19 = sub i64 %17, %18
  %20 = sub nsw i64 %19, 1
  br label %31

._crit_edge.loopexit:                             ; preds = %8
  %.02.lcssa.ph = phi i8* [ %12, %8 ]
  %.01.lcssa.ph = phi i8* [ %14, %8 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %5
  %.02.lcssa = phi i8* [ %1, %5 ], [ %.02.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i8* [ %0, %5 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  store i8 0, i8* %.01.lcssa, align 1
  br label %21

; <label>:21:                                     ; preds = %._crit_edge, %3
  %.1 = phi i8* [ %.02.lcssa, %._crit_edge ], [ %1, %3 ]
  br label %22

; <label>:22:                                     ; preds = %22, %21
  %.2 = phi i8* [ %.1, %21 ], [ %23, %22 ]
  call void @unroll_loop(i32 375)
  %23 = getelementptr inbounds i8, i8* %.2, i32 1
  %24 = load i8, i8* %.2, align 1
  %25 = icmp ne i8 %24, 0
  br i1 %25, label %22, label %26

; <label>:26:                                     ; preds = %22
  %.lcssa = phi i8* [ %23, %22 ]
  %27 = ptrtoint i8* %.lcssa to i64
  %28 = ptrtoint i8* %1 to i64
  %29 = sub i64 %27, %28
  %30 = sub nsw i64 %29, 1
  br label %31

; <label>:31:                                     ; preds = %26, %16
  %.0 = phi i64 [ %20, %16 ], [ %30, %26 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @concat_strings(i8*, ...) #7 {
  %2 = alloca [1 x %struct.__va_list_tag], align 16
  %3 = icmp ne i8* %0, null
  br i1 %3, label %.lr.ph9, label %61

.lr.ph9:                                          ; preds = %1
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %5 = bitcast %struct.__va_list_tag* %4 to i8*
  call void @llvm.va_start(i8* %5)
  br label %6

; <label>:6:                                      ; preds = %.lr.ph9, %24
  %.027 = phi i8* [ %0, %.lr.ph9 ], [ %26, %24 ]
  %.036 = phi i64 [ 0, %.lr.ph9 ], [ %8, %24 ]
  call void @unroll_loop(i32 376)
  %7 = call i64 @strlen(i8* %.027) #14
  %8 = add i64 %.036, %7
  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 16
  %12 = icmp ule i32 %11, 40
  br i1 %12, label %13, label %19

; <label>:13:                                     ; preds = %6
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %9, i32 0, i32 3
  %15 = load i8*, i8** %14, align 16
  %16 = getelementptr i8, i8* %15, i32 %11
  %17 = bitcast i8* %16 to i8**
  %18 = add i32 %11, 8
  store i32 %18, i32* %10, align 16
  br label %24

; <label>:19:                                     ; preds = %6
  %20 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %9, i32 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = bitcast i8* %21 to i8**
  %23 = getelementptr i8, i8* %21, i32 8
  store i8* %23, i8** %20, align 8
  br label %24

; <label>:24:                                     ; preds = %19, %13
  %25 = phi i8** [ %17, %13 ], [ %22, %19 ]
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %6, label %._crit_edge10

._crit_edge10:                                    ; preds = %24
  %split = phi i64 [ %8, %24 ]
  %28 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %29 = bitcast %struct.__va_list_tag* %28 to i8*
  call void @llvm.va_end(i8* %29)
  %30 = add i64 %split, 1
  %31 = call noalias i8* @xmalloc(i64 %30)
  %32 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %33 = bitcast %struct.__va_list_tag* %32 to i8*
  call void @llvm.va_start(i8* %33)
  %34 = icmp ne i8* %0, null
  br i1 %34, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge10
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %55
  %.015 = phi i64 [ %39, %55 ], [ 0, %.lr.ph.preheader ]
  %.14 = phi i8* [ %57, %55 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 377)
  %35 = getelementptr inbounds i8, i8* %31, i64 %.015
  %36 = sub i64 %split, %.015
  %37 = add i64 %36, 1
  %38 = call i64 @strlcpy(i8* %35, i8* %.14, i64 %37)
  %39 = add i64 %.015, %38
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %41 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %40, i32 0, i32 0
  %42 = load i32, i32* %41, align 16
  %43 = icmp ule i32 %42, 40
  br i1 %43, label %44, label %50

; <label>:44:                                     ; preds = %.lr.ph
  %45 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %40, i32 0, i32 3
  %46 = load i8*, i8** %45, align 16
  %47 = getelementptr i8, i8* %46, i32 %42
  %48 = bitcast i8* %47 to i8**
  %49 = add i32 %42, 8
  store i32 %49, i32* %41, align 16
  br label %55

; <label>:50:                                     ; preds = %.lr.ph
  %51 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %40, i32 0, i32 2
  %52 = load i8*, i8** %51, align 8
  %53 = bitcast i8* %52 to i8**
  %54 = getelementptr i8, i8* %52, i32 8
  store i8* %54, i8** %51, align 8
  br label %55

; <label>:55:                                     ; preds = %50, %44
  %56 = phi i8** [ %48, %44 ], [ %53, %50 ]
  %57 = load i8*, i8** %56, align 8
  %58 = icmp ne i8* %57, null
  br i1 %58, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %55
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge10
  %59 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %2, i32 0, i32 0
  %60 = bitcast %struct.__va_list_tag* %59 to i8*
  call void @llvm.va_end(i8* %60)
  br label %61

; <label>:61:                                     ; preds = %1, %._crit_edge
  %.0 = phi i8* [ %31, %._crit_edge ], [ null, %1 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @time_str(i64) #0 {
  %2 = getelementptr [9 x i8], [9 x i8]* @.str.1.1511, i32 0, i32 0
  %3 = call i8* @fmttime(i64 %0, i8* %2)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @fmttime(i64, i8*) #0 {
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = call %struct.tm* @localtime(i64* %3) #8
  %5 = icmp ne %struct.tm* %4, null
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %2
  call void @abort() #16
  unreachable

; <label>:7:                                      ; preds = %2
  %8 = getelementptr [32 x i8], [32 x i8]* @fmttime.output, i32 0, i32 0
  %9 = call i64 @strftime(i8* %8, i64 32, i8* %1, %struct.tm* %4) #8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %7
  call void @abort() #16
  unreachable

; <label>:12:                                     ; preds = %7
  %13 = getelementptr [32 x i8], [32 x i8]* @fmttime.output, i32 0, i32 0
  ret i8* %13
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @datetime_str(i64) #0 {
  %2 = getelementptr [18 x i8], [18 x i8]* @.str.2.1514, i32 0, i32 0
  %3 = call i8* @fmttime(i64 %0, i8* %2)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @fork_to_background() #0 {
  %1 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %2 = load i8*, i8** %1, align 8
  %3 = icmp ne i8* %2, null
  br i1 %3, label %19, label %4

; <label>:4:                                      ; preds = %0
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %6 = load i8, i8* %5, align 4
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %12

; <label>:8:                                      ; preds = %4
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 91
  %10 = load i8, i8* %9, align 8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %12, label %19

; <label>:12:                                     ; preds = %8, %4
  %13 = getelementptr [9 x i8], [9 x i8]* @.str.3.1517, i32 0, i32 0
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %15 = call %struct._IO_FILE* @unique_create(i8* %13, i1 zeroext false, i8** %14)
  %16 = icmp ne %struct._IO_FILE* %15, null
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %12
  %18 = call i32 @fclose(%struct._IO_FILE* %15)
  br label %19

; <label>:19:                                     ; preds = %12, %17, %8, %0
  %.1 = phi i8 [ 0, %0 ], [ 0, %8 ], [ 1, %17 ], [ 0, %12 ]
  %20 = call i32 @fork() #8
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %19
  %23 = getelementptr [5 x i8], [5 x i8]* @.str.4.1520, i32 0, i32 0
  call void @perror(i8* %23)
  call void @exit(i32 1) #16
  unreachable

; <label>:24:                                     ; preds = %19
  %25 = icmp ne i32 %20, 0
  br i1 %25, label %26, label %39

; <label>:26:                                     ; preds = %24
  %27 = getelementptr [35 x i8], [35 x i8]* @.str.5.1521, i32 0, i32 0
  %28 = call i8* @gettext(i8* %27) #8
  %29 = call i32 (i8*, ...) @printf(i8* %28, i32 %20)
  %30 = trunc i8 %.1 to i1
  br i1 %30, label %31, label %38

; <label>:31:                                     ; preds = %26
  %32 = getelementptr [31 x i8], [31 x i8]* @.str.6.1522, i32 0, i32 0
  %33 = call i8* @gettext(i8* %32) #8, !track !762
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %35 = load i8*, i8** %34, align 8
  %36 = call i8* @quote(i8* %35)
  %37 = call i32 (i8*, ...) @printf(i8* %33, i8* %36)
  br label %38

; <label>:38:                                     ; preds = %31, %26
  call void @exit(i32 0) #16
  unreachable

; <label>:39:                                     ; preds = %24
  %40 = call i32 @setsid() #8
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %42 = getelementptr [10 x i8], [10 x i8]* @.str.7.1523, i32 0, i32 0
  %43 = getelementptr [2 x i8], [2 x i8]* @.str.8.1524, i32 0, i32 0
  %44 = call %struct._IO_FILE* @freopen(i8* %42, i8* %43, %struct._IO_FILE* %41), !track !763
  %45 = icmp eq %struct._IO_FILE* %44, null
  br i1 %45, label %46, label %52

; <label>:46:                                     ; preds = %39
  %47 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %48 = load i8, i8* %47, align 1
  %49 = trunc i8 %48 to i1
  br i1 %49, label %50, label %52

; <label>:50:                                     ; preds = %46
  %51 = getelementptr [40 x i8], [40 x i8]* @.str.9.1525, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %51)
  br label %52

; <label>:52:                                     ; preds = %50, %46, %39
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %54 = getelementptr [10 x i8], [10 x i8]* @.str.7.1523, i32 0, i32 0
  %55 = getelementptr [2 x i8], [2 x i8]* @.str.10.1526, i32 0, i32 0
  %56 = call %struct._IO_FILE* @freopen(i8* %54, i8* %55, %struct._IO_FILE* %53), !track !764
  %57 = icmp eq %struct._IO_FILE* %56, null
  br i1 %57, label %58, label %64

; <label>:58:                                     ; preds = %52
  %59 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %60 = load i8, i8* %59, align 1
  %61 = trunc i8 %60 to i1
  br i1 %61, label %62, label %64

; <label>:62:                                     ; preds = %58
  %63 = getelementptr [41 x i8], [41 x i8]* @.str.11.1527, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %63)
  br label %64

; <label>:64:                                     ; preds = %62, %58, %52
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %66 = getelementptr [10 x i8], [10 x i8]* @.str.7.1523, i32 0, i32 0
  %67 = getelementptr [2 x i8], [2 x i8]* @.str.10.1526, i32 0, i32 0
  %68 = call %struct._IO_FILE* @freopen(i8* %66, i8* %67, %struct._IO_FILE* %65), !track !765
  %69 = icmp eq %struct._IO_FILE* %68, null
  br i1 %69, label %70, label %76

; <label>:70:                                     ; preds = %64
  %71 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %72 = load i8, i8* %71, align 1
  %73 = trunc i8 %72 to i1
  br i1 %73, label %74, label %76

; <label>:74:                                     ; preds = %70
  %75 = getelementptr [41 x i8], [41 x i8]* @.str.12.1528, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %75)
  br label %76

; <label>:76:                                     ; preds = %74, %70, %64
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._IO_FILE* @unique_create(i8*, i1 zeroext, i8**) #7 {
  %4 = zext i1 %1 to i8
  %5 = call i8* @unique_name(i8* %0, i1 zeroext false)
  call void @unroll_loop(i32 378)
  %6 = trunc i8 %4 to i1
  %7 = zext i1 %6 to i32
  %8 = call %struct._IO_FILE* @fopen_excl(i8* %5, i32 %7)
  %9 = icmp eq %struct._IO_FILE* %8, null
  br i1 %9, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %3
  br label %10

; <label>:10:                                     ; preds = %.lr.ph, %15
  %11 = phi %struct._IO_FILE* [ %8, %.lr.ph ], [ %17, %15 ]
  %.01 = phi i8* [ %5, %.lr.ph ], [ %16, %15 ]
  %12 = call i32* @__errno_location() #15
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 17
  br i1 %14, label %15, label %..critedge_crit_edge3

; <label>:15:                                     ; preds = %10
  call void @free(i8* %.01) #8
  %16 = call i8* @unique_name(i8* %0, i1 zeroext false)
  call void @unroll_loop(i32 378)
  %17 = call %struct._IO_FILE* @fopen_excl(i8* %16, i32 %7)
  %18 = icmp eq %struct._IO_FILE* %17, null
  br i1 %18, label %10, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %15
  %split = phi i8* [ %16, %15 ]
  %split2 = phi %struct._IO_FILE* [ %17, %15 ]
  br label %.critedge

..critedge_crit_edge3:                            ; preds = %10
  %split4 = phi i8* [ %.01, %10 ]
  %split5 = phi %struct._IO_FILE* [ %11, %10 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge3, %..critedge_crit_edge, %3
  %.0.lcssa = phi i8* [ %split4, %..critedge_crit_edge3 ], [ %split, %..critedge_crit_edge ], [ %5, %3 ]
  %.lcssa = phi %struct._IO_FILE* [ %split5, %..critedge_crit_edge3 ], [ %split2, %..critedge_crit_edge ], [ %8, %3 ]
  %19 = icmp ne i8** %2, null
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %.critedge
  %21 = icmp ne %struct._IO_FILE* %.lcssa, null
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %20
  store i8* %.0.lcssa, i8** %2, align 8
  br label %25

; <label>:23:                                     ; preds = %20
  store i8* null, i8** %2, align 8
  call void @free(i8* %.0.lcssa) #8
  br label %25

; <label>:24:                                     ; preds = %.critedge
  call void @free(i8* %.0.lcssa) #8
  br label %25

; <label>:25:                                     ; preds = %22, %23, %24
  ret %struct._IO_FILE* %.lcssa
}

; Function Attrs: nounwind
declare dso_local i32 @fork() #2

; Function Attrs: nounwind
declare dso_local i32 @setsid() #2

declare dso_local %struct._IO_FILE* @freopen(i8*, i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @unique_name(i8*, i1 zeroext) #7 {
  %3 = zext i1 %1 to i8
  %4 = call zeroext i1 @file_exists_p(i8* %0)
  br i1 %4, label %9, label %5

; <label>:5:                                      ; preds = %2
  %6 = trunc i8 %3 to i1
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %5
  %8 = call noalias i8* @xstrdup(i8* %0)
  br label %11

; <label>:9:                                      ; preds = %2
  %10 = call i8* @unique_name_1(i8* %0)
  br label %11

; <label>:11:                                     ; preds = %7, %5, %9
  %.0 = phi i8* [ %10, %9 ], [ %8, %7 ], [ %0, %5 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._IO_FILE* @fopen_excl(i8*, i32) #7 {
  %3 = icmp ne i32 %1, 0
  %4 = call i32 (i8*, i32, ...) @open(i8* %0, i32 193, i32 438)
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %13, label %6

; <label>:6:                                      ; preds = %2
  %7 = icmp ne i32 %1, 0
  %8 = zext i1 %7 to i64
  %9 = getelementptr [3 x i8], [3 x i8]* @.str.17.1533, i32 0, i32 0
  %10 = getelementptr [2 x i8], [2 x i8]* @.str.10.1526, i32 0, i32 0
  %11 = select i1 %7, i8* %9, i8* %10
  %12 = call %struct._IO_FILE* @fdopen(i32 %4, i8* %11) #8, !track !766
  br label %13

; <label>:13:                                     ; preds = %2, %6
  %.0 = phi %struct._IO_FILE* [ %12, %6 ], [ null, %2 ]
  ret %struct._IO_FILE* %.0
}

declare dso_local i32 @open(i8*, i32, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @file_exists_p(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !767
  %3 = call i32 @stat(i8* %0, %struct.stat* %2) #8
  %4 = icmp sge i32 %3, 0
  ret i1 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @unique_name_1(i8*) #7 {
  %2 = call i64 @strlen(i8* %0) #14
  %3 = trunc i64 %2 to i32
  %4 = add nsw i32 %3, 1
  %5 = add nsw i32 %4, 24
  %6 = sext i32 %5 to i64
  %7 = alloca i8, i64 %6, align 16, !track !768
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds i8, i8* %7, i64 %8
  %10 = sext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %0, i64 %10, i1 false), !track !769
  %11 = getelementptr inbounds i8, i8* %9, i32 1
  store i8 46, i8* %9, align 1
  br label %12

; <label>:12:                                     ; preds = %12, %1
  %indvars.iv = phi i64 [ %indvars.iv.next, %12 ], [ 1, %1 ]
  call void @unroll_loop(i32 379)
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %13 = call i8* @number_to_string(i8* %11, i64 %indvars.iv)
  %14 = call zeroext i1 @file_exists_p(i8* %7)
  br i1 %14, label %12, label %15

; <label>:15:                                     ; preds = %12
  %16 = call noalias i8* @xstrdup(i8* %7)
  ret i8* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @number_to_string(i8*, i64) #7 {
  %3 = icmp slt i64 %1, 0
  br i1 %3, label %4, label %16

; <label>:4:                                      ; preds = %2
  %5 = icmp slt i64 %1, -9223372036854775807
  br i1 %5, label %6, label %13

; <label>:6:                                      ; preds = %4
  %7 = srem i64 %1, 10
  %8 = trunc i64 %7 to i32
  %9 = icmp slt i32 %8, 0
  %10 = sub nsw i32 48, %8
  %11 = add nsw i32 48, %8
  %.0 = select i1 %9, i32 %10, i32 %11
  %12 = sdiv i64 %1, 10
  br label %13

; <label>:13:                                     ; preds = %6, %4
  %.01 = phi i64 [ %12, %6 ], [ %1, %4 ]
  %.1 = phi i32 [ %.0, %6 ], [ 0, %4 ]
  %14 = getelementptr inbounds i8, i8* %0, i32 1
  store i8 45, i8* %0, align 1
  %15 = sub nsw i64 0, %.01
  br label %16

; <label>:16:                                     ; preds = %13, %2
  %.03 = phi i8* [ %14, %13 ], [ %0, %2 ]
  %.12 = phi i64 [ %15, %13 ], [ %1, %2 ]
  %.2 = phi i32 [ %.1, %13 ], [ 0, %2 ]
  %17 = icmp slt i64 %.12, 10
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %16
  %19 = sdiv i64 %.12, 1
  %20 = add nsw i64 %19, 48
  %21 = trunc i64 %20 to i8
  %22 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %21, i8* %.03, align 1
  br label %1002

; <label>:23:                                     ; preds = %16
  %24 = icmp slt i64 %.12, 100
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %23
  %26 = sdiv i64 %.12, 10
  %27 = add nsw i64 %26, 48
  %28 = trunc i64 %27 to i8
  %29 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %28, i8* %.03, align 1
  %30 = srem i64 %.12, 10
  %31 = sdiv i64 %30, 1
  %32 = add nsw i64 %31, 48
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds i8, i8* %29, i32 1
  store i8 %33, i8* %29, align 1
  br label %1002

; <label>:35:                                     ; preds = %23
  %36 = icmp slt i64 %.12, 1000
  br i1 %36, label %37, label %52

; <label>:37:                                     ; preds = %35
  %38 = sdiv i64 %.12, 100
  %39 = add nsw i64 %38, 48
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %40, i8* %.03, align 1
  %42 = srem i64 %.12, 100
  %43 = sdiv i64 %42, 10
  %44 = add nsw i64 %43, 48
  %45 = trunc i64 %44 to i8
  %46 = getelementptr inbounds i8, i8* %41, i32 1
  store i8 %45, i8* %41, align 1
  %47 = srem i64 %42, 10
  %48 = sdiv i64 %47, 1
  %49 = add nsw i64 %48, 48
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds i8, i8* %46, i32 1
  store i8 %50, i8* %46, align 1
  br label %1002

; <label>:52:                                     ; preds = %35
  %53 = icmp slt i64 %.12, 10000
  br i1 %53, label %54, label %74

; <label>:54:                                     ; preds = %52
  %55 = sdiv i64 %.12, 1000
  %56 = add nsw i64 %55, 48
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %57, i8* %.03, align 1
  %59 = srem i64 %.12, 1000
  %60 = sdiv i64 %59, 100
  %61 = add nsw i64 %60, 48
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds i8, i8* %58, i32 1
  store i8 %62, i8* %58, align 1
  %64 = srem i64 %59, 100
  %65 = sdiv i64 %64, 10
  %66 = add nsw i64 %65, 48
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds i8, i8* %63, i32 1
  store i8 %67, i8* %63, align 1
  %69 = srem i64 %64, 10
  %70 = sdiv i64 %69, 1
  %71 = add nsw i64 %70, 48
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds i8, i8* %68, i32 1
  store i8 %72, i8* %68, align 1
  br label %1002

; <label>:74:                                     ; preds = %52
  %75 = icmp slt i64 %.12, 100000
  br i1 %75, label %76, label %101

; <label>:76:                                     ; preds = %74
  %77 = sdiv i64 %.12, 10000
  %78 = add nsw i64 %77, 48
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %79, i8* %.03, align 1
  %81 = srem i64 %.12, 10000
  %82 = sdiv i64 %81, 1000
  %83 = add nsw i64 %82, 48
  %84 = trunc i64 %83 to i8
  %85 = getelementptr inbounds i8, i8* %80, i32 1
  store i8 %84, i8* %80, align 1
  %86 = srem i64 %81, 1000
  %87 = sdiv i64 %86, 100
  %88 = add nsw i64 %87, 48
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds i8, i8* %85, i32 1
  store i8 %89, i8* %85, align 1
  %91 = srem i64 %86, 100
  %92 = sdiv i64 %91, 10
  %93 = add nsw i64 %92, 48
  %94 = trunc i64 %93 to i8
  %95 = getelementptr inbounds i8, i8* %90, i32 1
  store i8 %94, i8* %90, align 1
  %96 = srem i64 %91, 10
  %97 = sdiv i64 %96, 1
  %98 = add nsw i64 %97, 48
  %99 = trunc i64 %98 to i8
  %100 = getelementptr inbounds i8, i8* %95, i32 1
  store i8 %99, i8* %95, align 1
  br label %1002

; <label>:101:                                    ; preds = %74
  %102 = icmp slt i64 %.12, 1000000
  br i1 %102, label %103, label %133

; <label>:103:                                    ; preds = %101
  %104 = sdiv i64 %.12, 100000
  %105 = add nsw i64 %104, 48
  %106 = trunc i64 %105 to i8
  %107 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %106, i8* %.03, align 1
  %108 = srem i64 %.12, 100000
  %109 = sdiv i64 %108, 10000
  %110 = add nsw i64 %109, 48
  %111 = trunc i64 %110 to i8
  %112 = getelementptr inbounds i8, i8* %107, i32 1
  store i8 %111, i8* %107, align 1
  %113 = srem i64 %108, 10000
  %114 = sdiv i64 %113, 1000
  %115 = add nsw i64 %114, 48
  %116 = trunc i64 %115 to i8
  %117 = getelementptr inbounds i8, i8* %112, i32 1
  store i8 %116, i8* %112, align 1
  %118 = srem i64 %113, 1000
  %119 = sdiv i64 %118, 100
  %120 = add nsw i64 %119, 48
  %121 = trunc i64 %120 to i8
  %122 = getelementptr inbounds i8, i8* %117, i32 1
  store i8 %121, i8* %117, align 1
  %123 = srem i64 %118, 100
  %124 = sdiv i64 %123, 10
  %125 = add nsw i64 %124, 48
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds i8, i8* %122, i32 1
  store i8 %126, i8* %122, align 1
  %128 = srem i64 %123, 10
  %129 = sdiv i64 %128, 1
  %130 = add nsw i64 %129, 48
  %131 = trunc i64 %130 to i8
  %132 = getelementptr inbounds i8, i8* %127, i32 1
  store i8 %131, i8* %127, align 1
  br label %1002

; <label>:133:                                    ; preds = %101
  %134 = icmp slt i64 %.12, 10000000
  br i1 %134, label %135, label %170

; <label>:135:                                    ; preds = %133
  %136 = sdiv i64 %.12, 1000000
  %137 = add nsw i64 %136, 48
  %138 = trunc i64 %137 to i8
  %139 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %138, i8* %.03, align 1
  %140 = srem i64 %.12, 1000000
  %141 = sdiv i64 %140, 100000
  %142 = add nsw i64 %141, 48
  %143 = trunc i64 %142 to i8
  %144 = getelementptr inbounds i8, i8* %139, i32 1
  store i8 %143, i8* %139, align 1
  %145 = srem i64 %140, 100000
  %146 = sdiv i64 %145, 10000
  %147 = add nsw i64 %146, 48
  %148 = trunc i64 %147 to i8
  %149 = getelementptr inbounds i8, i8* %144, i32 1
  store i8 %148, i8* %144, align 1
  %150 = srem i64 %145, 10000
  %151 = sdiv i64 %150, 1000
  %152 = add nsw i64 %151, 48
  %153 = trunc i64 %152 to i8
  %154 = getelementptr inbounds i8, i8* %149, i32 1
  store i8 %153, i8* %149, align 1
  %155 = srem i64 %150, 1000
  %156 = sdiv i64 %155, 100
  %157 = add nsw i64 %156, 48
  %158 = trunc i64 %157 to i8
  %159 = getelementptr inbounds i8, i8* %154, i32 1
  store i8 %158, i8* %154, align 1
  %160 = srem i64 %155, 100
  %161 = sdiv i64 %160, 10
  %162 = add nsw i64 %161, 48
  %163 = trunc i64 %162 to i8
  %164 = getelementptr inbounds i8, i8* %159, i32 1
  store i8 %163, i8* %159, align 1
  %165 = srem i64 %160, 10
  %166 = sdiv i64 %165, 1
  %167 = add nsw i64 %166, 48
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds i8, i8* %164, i32 1
  store i8 %168, i8* %164, align 1
  br label %1002

; <label>:170:                                    ; preds = %133
  %171 = icmp slt i64 %.12, 100000000
  br i1 %171, label %172, label %212

; <label>:172:                                    ; preds = %170
  %173 = sdiv i64 %.12, 10000000
  %174 = add nsw i64 %173, 48
  %175 = trunc i64 %174 to i8
  %176 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %175, i8* %.03, align 1
  %177 = srem i64 %.12, 10000000
  %178 = sdiv i64 %177, 1000000
  %179 = add nsw i64 %178, 48
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds i8, i8* %176, i32 1
  store i8 %180, i8* %176, align 1
  %182 = srem i64 %177, 1000000
  %183 = sdiv i64 %182, 100000
  %184 = add nsw i64 %183, 48
  %185 = trunc i64 %184 to i8
  %186 = getelementptr inbounds i8, i8* %181, i32 1
  store i8 %185, i8* %181, align 1
  %187 = srem i64 %182, 100000
  %188 = sdiv i64 %187, 10000
  %189 = add nsw i64 %188, 48
  %190 = trunc i64 %189 to i8
  %191 = getelementptr inbounds i8, i8* %186, i32 1
  store i8 %190, i8* %186, align 1
  %192 = srem i64 %187, 10000
  %193 = sdiv i64 %192, 1000
  %194 = add nsw i64 %193, 48
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds i8, i8* %191, i32 1
  store i8 %195, i8* %191, align 1
  %197 = srem i64 %192, 1000
  %198 = sdiv i64 %197, 100
  %199 = add nsw i64 %198, 48
  %200 = trunc i64 %199 to i8
  %201 = getelementptr inbounds i8, i8* %196, i32 1
  store i8 %200, i8* %196, align 1
  %202 = srem i64 %197, 100
  %203 = sdiv i64 %202, 10
  %204 = add nsw i64 %203, 48
  %205 = trunc i64 %204 to i8
  %206 = getelementptr inbounds i8, i8* %201, i32 1
  store i8 %205, i8* %201, align 1
  %207 = srem i64 %202, 10
  %208 = sdiv i64 %207, 1
  %209 = add nsw i64 %208, 48
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds i8, i8* %206, i32 1
  store i8 %210, i8* %206, align 1
  br label %1002

; <label>:212:                                    ; preds = %170
  %213 = icmp slt i64 %.12, 1000000000
  br i1 %213, label %214, label %259

; <label>:214:                                    ; preds = %212
  %215 = sdiv i64 %.12, 100000000
  %216 = add nsw i64 %215, 48
  %217 = trunc i64 %216 to i8
  %218 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %217, i8* %.03, align 1
  %219 = srem i64 %.12, 100000000
  %220 = sdiv i64 %219, 10000000
  %221 = add nsw i64 %220, 48
  %222 = trunc i64 %221 to i8
  %223 = getelementptr inbounds i8, i8* %218, i32 1
  store i8 %222, i8* %218, align 1
  %224 = srem i64 %219, 10000000
  %225 = sdiv i64 %224, 1000000
  %226 = add nsw i64 %225, 48
  %227 = trunc i64 %226 to i8
  %228 = getelementptr inbounds i8, i8* %223, i32 1
  store i8 %227, i8* %223, align 1
  %229 = srem i64 %224, 1000000
  %230 = sdiv i64 %229, 100000
  %231 = add nsw i64 %230, 48
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds i8, i8* %228, i32 1
  store i8 %232, i8* %228, align 1
  %234 = srem i64 %229, 100000
  %235 = sdiv i64 %234, 10000
  %236 = add nsw i64 %235, 48
  %237 = trunc i64 %236 to i8
  %238 = getelementptr inbounds i8, i8* %233, i32 1
  store i8 %237, i8* %233, align 1
  %239 = srem i64 %234, 10000
  %240 = sdiv i64 %239, 1000
  %241 = add nsw i64 %240, 48
  %242 = trunc i64 %241 to i8
  %243 = getelementptr inbounds i8, i8* %238, i32 1
  store i8 %242, i8* %238, align 1
  %244 = srem i64 %239, 1000
  %245 = sdiv i64 %244, 100
  %246 = add nsw i64 %245, 48
  %247 = trunc i64 %246 to i8
  %248 = getelementptr inbounds i8, i8* %243, i32 1
  store i8 %247, i8* %243, align 1
  %249 = srem i64 %244, 100
  %250 = sdiv i64 %249, 10
  %251 = add nsw i64 %250, 48
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds i8, i8* %248, i32 1
  store i8 %252, i8* %248, align 1
  %254 = srem i64 %249, 10
  %255 = sdiv i64 %254, 1
  %256 = add nsw i64 %255, 48
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds i8, i8* %253, i32 1
  store i8 %257, i8* %253, align 1
  br label %1002

; <label>:259:                                    ; preds = %212
  %260 = icmp slt i64 %.12, 10000000000
  br i1 %260, label %261, label %311

; <label>:261:                                    ; preds = %259
  %262 = sdiv i64 %.12, 1000000000
  %263 = add nsw i64 %262, 48
  %264 = trunc i64 %263 to i8
  %265 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %264, i8* %.03, align 1
  %266 = srem i64 %.12, 1000000000
  %267 = sdiv i64 %266, 100000000
  %268 = add nsw i64 %267, 48
  %269 = trunc i64 %268 to i8
  %270 = getelementptr inbounds i8, i8* %265, i32 1
  store i8 %269, i8* %265, align 1
  %271 = srem i64 %266, 100000000
  %272 = sdiv i64 %271, 10000000
  %273 = add nsw i64 %272, 48
  %274 = trunc i64 %273 to i8
  %275 = getelementptr inbounds i8, i8* %270, i32 1
  store i8 %274, i8* %270, align 1
  %276 = srem i64 %271, 10000000
  %277 = sdiv i64 %276, 1000000
  %278 = add nsw i64 %277, 48
  %279 = trunc i64 %278 to i8
  %280 = getelementptr inbounds i8, i8* %275, i32 1
  store i8 %279, i8* %275, align 1
  %281 = srem i64 %276, 1000000
  %282 = sdiv i64 %281, 100000
  %283 = add nsw i64 %282, 48
  %284 = trunc i64 %283 to i8
  %285 = getelementptr inbounds i8, i8* %280, i32 1
  store i8 %284, i8* %280, align 1
  %286 = srem i64 %281, 100000
  %287 = sdiv i64 %286, 10000
  %288 = add nsw i64 %287, 48
  %289 = trunc i64 %288 to i8
  %290 = getelementptr inbounds i8, i8* %285, i32 1
  store i8 %289, i8* %285, align 1
  %291 = srem i64 %286, 10000
  %292 = sdiv i64 %291, 1000
  %293 = add nsw i64 %292, 48
  %294 = trunc i64 %293 to i8
  %295 = getelementptr inbounds i8, i8* %290, i32 1
  store i8 %294, i8* %290, align 1
  %296 = srem i64 %291, 1000
  %297 = sdiv i64 %296, 100
  %298 = add nsw i64 %297, 48
  %299 = trunc i64 %298 to i8
  %300 = getelementptr inbounds i8, i8* %295, i32 1
  store i8 %299, i8* %295, align 1
  %301 = srem i64 %296, 100
  %302 = sdiv i64 %301, 10
  %303 = add nsw i64 %302, 48
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds i8, i8* %300, i32 1
  store i8 %304, i8* %300, align 1
  %306 = srem i64 %301, 10
  %307 = sdiv i64 %306, 1
  %308 = add nsw i64 %307, 48
  %309 = trunc i64 %308 to i8
  %310 = getelementptr inbounds i8, i8* %305, i32 1
  store i8 %309, i8* %305, align 1
  br label %1002

; <label>:311:                                    ; preds = %259
  %312 = icmp slt i64 %.12, 100000000000
  br i1 %312, label %313, label %368

; <label>:313:                                    ; preds = %311
  %314 = sdiv i64 %.12, 10000000000
  %315 = add nsw i64 %314, 48
  %316 = trunc i64 %315 to i8
  %317 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %316, i8* %.03, align 1
  %318 = srem i64 %.12, 10000000000
  %319 = sdiv i64 %318, 1000000000
  %320 = add nsw i64 %319, 48
  %321 = trunc i64 %320 to i8
  %322 = getelementptr inbounds i8, i8* %317, i32 1
  store i8 %321, i8* %317, align 1
  %323 = srem i64 %318, 1000000000
  %324 = sdiv i64 %323, 100000000
  %325 = add nsw i64 %324, 48
  %326 = trunc i64 %325 to i8
  %327 = getelementptr inbounds i8, i8* %322, i32 1
  store i8 %326, i8* %322, align 1
  %328 = srem i64 %323, 100000000
  %329 = sdiv i64 %328, 10000000
  %330 = add nsw i64 %329, 48
  %331 = trunc i64 %330 to i8
  %332 = getelementptr inbounds i8, i8* %327, i32 1
  store i8 %331, i8* %327, align 1
  %333 = srem i64 %328, 10000000
  %334 = sdiv i64 %333, 1000000
  %335 = add nsw i64 %334, 48
  %336 = trunc i64 %335 to i8
  %337 = getelementptr inbounds i8, i8* %332, i32 1
  store i8 %336, i8* %332, align 1
  %338 = srem i64 %333, 1000000
  %339 = sdiv i64 %338, 100000
  %340 = add nsw i64 %339, 48
  %341 = trunc i64 %340 to i8
  %342 = getelementptr inbounds i8, i8* %337, i32 1
  store i8 %341, i8* %337, align 1
  %343 = srem i64 %338, 100000
  %344 = sdiv i64 %343, 10000
  %345 = add nsw i64 %344, 48
  %346 = trunc i64 %345 to i8
  %347 = getelementptr inbounds i8, i8* %342, i32 1
  store i8 %346, i8* %342, align 1
  %348 = srem i64 %343, 10000
  %349 = sdiv i64 %348, 1000
  %350 = add nsw i64 %349, 48
  %351 = trunc i64 %350 to i8
  %352 = getelementptr inbounds i8, i8* %347, i32 1
  store i8 %351, i8* %347, align 1
  %353 = srem i64 %348, 1000
  %354 = sdiv i64 %353, 100
  %355 = add nsw i64 %354, 48
  %356 = trunc i64 %355 to i8
  %357 = getelementptr inbounds i8, i8* %352, i32 1
  store i8 %356, i8* %352, align 1
  %358 = srem i64 %353, 100
  %359 = sdiv i64 %358, 10
  %360 = add nsw i64 %359, 48
  %361 = trunc i64 %360 to i8
  %362 = getelementptr inbounds i8, i8* %357, i32 1
  store i8 %361, i8* %357, align 1
  %363 = srem i64 %358, 10
  %364 = sdiv i64 %363, 1
  %365 = add nsw i64 %364, 48
  %366 = trunc i64 %365 to i8
  %367 = getelementptr inbounds i8, i8* %362, i32 1
  store i8 %366, i8* %362, align 1
  br label %1002

; <label>:368:                                    ; preds = %311
  %369 = icmp slt i64 %.12, 1000000000000
  br i1 %369, label %370, label %430

; <label>:370:                                    ; preds = %368
  %371 = sdiv i64 %.12, 100000000000
  %372 = add nsw i64 %371, 48
  %373 = trunc i64 %372 to i8
  %374 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %373, i8* %.03, align 1
  %375 = srem i64 %.12, 100000000000
  %376 = sdiv i64 %375, 10000000000
  %377 = add nsw i64 %376, 48
  %378 = trunc i64 %377 to i8
  %379 = getelementptr inbounds i8, i8* %374, i32 1
  store i8 %378, i8* %374, align 1
  %380 = srem i64 %375, 10000000000
  %381 = sdiv i64 %380, 1000000000
  %382 = add nsw i64 %381, 48
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds i8, i8* %379, i32 1
  store i8 %383, i8* %379, align 1
  %385 = srem i64 %380, 1000000000
  %386 = sdiv i64 %385, 100000000
  %387 = add nsw i64 %386, 48
  %388 = trunc i64 %387 to i8
  %389 = getelementptr inbounds i8, i8* %384, i32 1
  store i8 %388, i8* %384, align 1
  %390 = srem i64 %385, 100000000
  %391 = sdiv i64 %390, 10000000
  %392 = add nsw i64 %391, 48
  %393 = trunc i64 %392 to i8
  %394 = getelementptr inbounds i8, i8* %389, i32 1
  store i8 %393, i8* %389, align 1
  %395 = srem i64 %390, 10000000
  %396 = sdiv i64 %395, 1000000
  %397 = add nsw i64 %396, 48
  %398 = trunc i64 %397 to i8
  %399 = getelementptr inbounds i8, i8* %394, i32 1
  store i8 %398, i8* %394, align 1
  %400 = srem i64 %395, 1000000
  %401 = sdiv i64 %400, 100000
  %402 = add nsw i64 %401, 48
  %403 = trunc i64 %402 to i8
  %404 = getelementptr inbounds i8, i8* %399, i32 1
  store i8 %403, i8* %399, align 1
  %405 = srem i64 %400, 100000
  %406 = sdiv i64 %405, 10000
  %407 = add nsw i64 %406, 48
  %408 = trunc i64 %407 to i8
  %409 = getelementptr inbounds i8, i8* %404, i32 1
  store i8 %408, i8* %404, align 1
  %410 = srem i64 %405, 10000
  %411 = sdiv i64 %410, 1000
  %412 = add nsw i64 %411, 48
  %413 = trunc i64 %412 to i8
  %414 = getelementptr inbounds i8, i8* %409, i32 1
  store i8 %413, i8* %409, align 1
  %415 = srem i64 %410, 1000
  %416 = sdiv i64 %415, 100
  %417 = add nsw i64 %416, 48
  %418 = trunc i64 %417 to i8
  %419 = getelementptr inbounds i8, i8* %414, i32 1
  store i8 %418, i8* %414, align 1
  %420 = srem i64 %415, 100
  %421 = sdiv i64 %420, 10
  %422 = add nsw i64 %421, 48
  %423 = trunc i64 %422 to i8
  %424 = getelementptr inbounds i8, i8* %419, i32 1
  store i8 %423, i8* %419, align 1
  %425 = srem i64 %420, 10
  %426 = sdiv i64 %425, 1
  %427 = add nsw i64 %426, 48
  %428 = trunc i64 %427 to i8
  %429 = getelementptr inbounds i8, i8* %424, i32 1
  store i8 %428, i8* %424, align 1
  br label %1002

; <label>:430:                                    ; preds = %368
  %431 = icmp slt i64 %.12, 10000000000000
  br i1 %431, label %432, label %497

; <label>:432:                                    ; preds = %430
  %433 = sdiv i64 %.12, 1000000000000
  %434 = add nsw i64 %433, 48
  %435 = trunc i64 %434 to i8
  %436 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %435, i8* %.03, align 1
  %437 = srem i64 %.12, 1000000000000
  %438 = sdiv i64 %437, 100000000000
  %439 = add nsw i64 %438, 48
  %440 = trunc i64 %439 to i8
  %441 = getelementptr inbounds i8, i8* %436, i32 1
  store i8 %440, i8* %436, align 1
  %442 = srem i64 %437, 100000000000
  %443 = sdiv i64 %442, 10000000000
  %444 = add nsw i64 %443, 48
  %445 = trunc i64 %444 to i8
  %446 = getelementptr inbounds i8, i8* %441, i32 1
  store i8 %445, i8* %441, align 1
  %447 = srem i64 %442, 10000000000
  %448 = sdiv i64 %447, 1000000000
  %449 = add nsw i64 %448, 48
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds i8, i8* %446, i32 1
  store i8 %450, i8* %446, align 1
  %452 = srem i64 %447, 1000000000
  %453 = sdiv i64 %452, 100000000
  %454 = add nsw i64 %453, 48
  %455 = trunc i64 %454 to i8
  %456 = getelementptr inbounds i8, i8* %451, i32 1
  store i8 %455, i8* %451, align 1
  %457 = srem i64 %452, 100000000
  %458 = sdiv i64 %457, 10000000
  %459 = add nsw i64 %458, 48
  %460 = trunc i64 %459 to i8
  %461 = getelementptr inbounds i8, i8* %456, i32 1
  store i8 %460, i8* %456, align 1
  %462 = srem i64 %457, 10000000
  %463 = sdiv i64 %462, 1000000
  %464 = add nsw i64 %463, 48
  %465 = trunc i64 %464 to i8
  %466 = getelementptr inbounds i8, i8* %461, i32 1
  store i8 %465, i8* %461, align 1
  %467 = srem i64 %462, 1000000
  %468 = sdiv i64 %467, 100000
  %469 = add nsw i64 %468, 48
  %470 = trunc i64 %469 to i8
  %471 = getelementptr inbounds i8, i8* %466, i32 1
  store i8 %470, i8* %466, align 1
  %472 = srem i64 %467, 100000
  %473 = sdiv i64 %472, 10000
  %474 = add nsw i64 %473, 48
  %475 = trunc i64 %474 to i8
  %476 = getelementptr inbounds i8, i8* %471, i32 1
  store i8 %475, i8* %471, align 1
  %477 = srem i64 %472, 10000
  %478 = sdiv i64 %477, 1000
  %479 = add nsw i64 %478, 48
  %480 = trunc i64 %479 to i8
  %481 = getelementptr inbounds i8, i8* %476, i32 1
  store i8 %480, i8* %476, align 1
  %482 = srem i64 %477, 1000
  %483 = sdiv i64 %482, 100
  %484 = add nsw i64 %483, 48
  %485 = trunc i64 %484 to i8
  %486 = getelementptr inbounds i8, i8* %481, i32 1
  store i8 %485, i8* %481, align 1
  %487 = srem i64 %482, 100
  %488 = sdiv i64 %487, 10
  %489 = add nsw i64 %488, 48
  %490 = trunc i64 %489 to i8
  %491 = getelementptr inbounds i8, i8* %486, i32 1
  store i8 %490, i8* %486, align 1
  %492 = srem i64 %487, 10
  %493 = sdiv i64 %492, 1
  %494 = add nsw i64 %493, 48
  %495 = trunc i64 %494 to i8
  %496 = getelementptr inbounds i8, i8* %491, i32 1
  store i8 %495, i8* %491, align 1
  br label %1002

; <label>:497:                                    ; preds = %430
  %498 = icmp slt i64 %.12, 100000000000000
  br i1 %498, label %499, label %569

; <label>:499:                                    ; preds = %497
  %500 = sdiv i64 %.12, 10000000000000
  %501 = add nsw i64 %500, 48
  %502 = trunc i64 %501 to i8
  %503 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %502, i8* %.03, align 1
  %504 = srem i64 %.12, 10000000000000
  %505 = sdiv i64 %504, 1000000000000
  %506 = add nsw i64 %505, 48
  %507 = trunc i64 %506 to i8
  %508 = getelementptr inbounds i8, i8* %503, i32 1
  store i8 %507, i8* %503, align 1
  %509 = srem i64 %504, 1000000000000
  %510 = sdiv i64 %509, 100000000000
  %511 = add nsw i64 %510, 48
  %512 = trunc i64 %511 to i8
  %513 = getelementptr inbounds i8, i8* %508, i32 1
  store i8 %512, i8* %508, align 1
  %514 = srem i64 %509, 100000000000
  %515 = sdiv i64 %514, 10000000000
  %516 = add nsw i64 %515, 48
  %517 = trunc i64 %516 to i8
  %518 = getelementptr inbounds i8, i8* %513, i32 1
  store i8 %517, i8* %513, align 1
  %519 = srem i64 %514, 10000000000
  %520 = sdiv i64 %519, 1000000000
  %521 = add nsw i64 %520, 48
  %522 = trunc i64 %521 to i8
  %523 = getelementptr inbounds i8, i8* %518, i32 1
  store i8 %522, i8* %518, align 1
  %524 = srem i64 %519, 1000000000
  %525 = sdiv i64 %524, 100000000
  %526 = add nsw i64 %525, 48
  %527 = trunc i64 %526 to i8
  %528 = getelementptr inbounds i8, i8* %523, i32 1
  store i8 %527, i8* %523, align 1
  %529 = srem i64 %524, 100000000
  %530 = sdiv i64 %529, 10000000
  %531 = add nsw i64 %530, 48
  %532 = trunc i64 %531 to i8
  %533 = getelementptr inbounds i8, i8* %528, i32 1
  store i8 %532, i8* %528, align 1
  %534 = srem i64 %529, 10000000
  %535 = sdiv i64 %534, 1000000
  %536 = add nsw i64 %535, 48
  %537 = trunc i64 %536 to i8
  %538 = getelementptr inbounds i8, i8* %533, i32 1
  store i8 %537, i8* %533, align 1
  %539 = srem i64 %534, 1000000
  %540 = sdiv i64 %539, 100000
  %541 = add nsw i64 %540, 48
  %542 = trunc i64 %541 to i8
  %543 = getelementptr inbounds i8, i8* %538, i32 1
  store i8 %542, i8* %538, align 1
  %544 = srem i64 %539, 100000
  %545 = sdiv i64 %544, 10000
  %546 = add nsw i64 %545, 48
  %547 = trunc i64 %546 to i8
  %548 = getelementptr inbounds i8, i8* %543, i32 1
  store i8 %547, i8* %543, align 1
  %549 = srem i64 %544, 10000
  %550 = sdiv i64 %549, 1000
  %551 = add nsw i64 %550, 48
  %552 = trunc i64 %551 to i8
  %553 = getelementptr inbounds i8, i8* %548, i32 1
  store i8 %552, i8* %548, align 1
  %554 = srem i64 %549, 1000
  %555 = sdiv i64 %554, 100
  %556 = add nsw i64 %555, 48
  %557 = trunc i64 %556 to i8
  %558 = getelementptr inbounds i8, i8* %553, i32 1
  store i8 %557, i8* %553, align 1
  %559 = srem i64 %554, 100
  %560 = sdiv i64 %559, 10
  %561 = add nsw i64 %560, 48
  %562 = trunc i64 %561 to i8
  %563 = getelementptr inbounds i8, i8* %558, i32 1
  store i8 %562, i8* %558, align 1
  %564 = srem i64 %559, 10
  %565 = sdiv i64 %564, 1
  %566 = add nsw i64 %565, 48
  %567 = trunc i64 %566 to i8
  %568 = getelementptr inbounds i8, i8* %563, i32 1
  store i8 %567, i8* %563, align 1
  br label %1002

; <label>:569:                                    ; preds = %497
  %570 = icmp slt i64 %.12, 1000000000000000
  br i1 %570, label %571, label %646

; <label>:571:                                    ; preds = %569
  %572 = sdiv i64 %.12, 100000000000000
  %573 = add nsw i64 %572, 48
  %574 = trunc i64 %573 to i8
  %575 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %574, i8* %.03, align 1
  %576 = srem i64 %.12, 100000000000000
  %577 = sdiv i64 %576, 10000000000000
  %578 = add nsw i64 %577, 48
  %579 = trunc i64 %578 to i8
  %580 = getelementptr inbounds i8, i8* %575, i32 1
  store i8 %579, i8* %575, align 1
  %581 = srem i64 %576, 10000000000000
  %582 = sdiv i64 %581, 1000000000000
  %583 = add nsw i64 %582, 48
  %584 = trunc i64 %583 to i8
  %585 = getelementptr inbounds i8, i8* %580, i32 1
  store i8 %584, i8* %580, align 1
  %586 = srem i64 %581, 1000000000000
  %587 = sdiv i64 %586, 100000000000
  %588 = add nsw i64 %587, 48
  %589 = trunc i64 %588 to i8
  %590 = getelementptr inbounds i8, i8* %585, i32 1
  store i8 %589, i8* %585, align 1
  %591 = srem i64 %586, 100000000000
  %592 = sdiv i64 %591, 10000000000
  %593 = add nsw i64 %592, 48
  %594 = trunc i64 %593 to i8
  %595 = getelementptr inbounds i8, i8* %590, i32 1
  store i8 %594, i8* %590, align 1
  %596 = srem i64 %591, 10000000000
  %597 = sdiv i64 %596, 1000000000
  %598 = add nsw i64 %597, 48
  %599 = trunc i64 %598 to i8
  %600 = getelementptr inbounds i8, i8* %595, i32 1
  store i8 %599, i8* %595, align 1
  %601 = srem i64 %596, 1000000000
  %602 = sdiv i64 %601, 100000000
  %603 = add nsw i64 %602, 48
  %604 = trunc i64 %603 to i8
  %605 = getelementptr inbounds i8, i8* %600, i32 1
  store i8 %604, i8* %600, align 1
  %606 = srem i64 %601, 100000000
  %607 = sdiv i64 %606, 10000000
  %608 = add nsw i64 %607, 48
  %609 = trunc i64 %608 to i8
  %610 = getelementptr inbounds i8, i8* %605, i32 1
  store i8 %609, i8* %605, align 1
  %611 = srem i64 %606, 10000000
  %612 = sdiv i64 %611, 1000000
  %613 = add nsw i64 %612, 48
  %614 = trunc i64 %613 to i8
  %615 = getelementptr inbounds i8, i8* %610, i32 1
  store i8 %614, i8* %610, align 1
  %616 = srem i64 %611, 1000000
  %617 = sdiv i64 %616, 100000
  %618 = add nsw i64 %617, 48
  %619 = trunc i64 %618 to i8
  %620 = getelementptr inbounds i8, i8* %615, i32 1
  store i8 %619, i8* %615, align 1
  %621 = srem i64 %616, 100000
  %622 = sdiv i64 %621, 10000
  %623 = add nsw i64 %622, 48
  %624 = trunc i64 %623 to i8
  %625 = getelementptr inbounds i8, i8* %620, i32 1
  store i8 %624, i8* %620, align 1
  %626 = srem i64 %621, 10000
  %627 = sdiv i64 %626, 1000
  %628 = add nsw i64 %627, 48
  %629 = trunc i64 %628 to i8
  %630 = getelementptr inbounds i8, i8* %625, i32 1
  store i8 %629, i8* %625, align 1
  %631 = srem i64 %626, 1000
  %632 = sdiv i64 %631, 100
  %633 = add nsw i64 %632, 48
  %634 = trunc i64 %633 to i8
  %635 = getelementptr inbounds i8, i8* %630, i32 1
  store i8 %634, i8* %630, align 1
  %636 = srem i64 %631, 100
  %637 = sdiv i64 %636, 10
  %638 = add nsw i64 %637, 48
  %639 = trunc i64 %638 to i8
  %640 = getelementptr inbounds i8, i8* %635, i32 1
  store i8 %639, i8* %635, align 1
  %641 = srem i64 %636, 10
  %642 = sdiv i64 %641, 1
  %643 = add nsw i64 %642, 48
  %644 = trunc i64 %643 to i8
  %645 = getelementptr inbounds i8, i8* %640, i32 1
  store i8 %644, i8* %640, align 1
  br label %1002

; <label>:646:                                    ; preds = %569
  %647 = icmp slt i64 %.12, 10000000000000000
  br i1 %647, label %648, label %728

; <label>:648:                                    ; preds = %646
  %649 = sdiv i64 %.12, 1000000000000000
  %650 = add nsw i64 %649, 48
  %651 = trunc i64 %650 to i8
  %652 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %651, i8* %.03, align 1
  %653 = srem i64 %.12, 1000000000000000
  %654 = sdiv i64 %653, 100000000000000
  %655 = add nsw i64 %654, 48
  %656 = trunc i64 %655 to i8
  %657 = getelementptr inbounds i8, i8* %652, i32 1
  store i8 %656, i8* %652, align 1
  %658 = srem i64 %653, 100000000000000
  %659 = sdiv i64 %658, 10000000000000
  %660 = add nsw i64 %659, 48
  %661 = trunc i64 %660 to i8
  %662 = getelementptr inbounds i8, i8* %657, i32 1
  store i8 %661, i8* %657, align 1
  %663 = srem i64 %658, 10000000000000
  %664 = sdiv i64 %663, 1000000000000
  %665 = add nsw i64 %664, 48
  %666 = trunc i64 %665 to i8
  %667 = getelementptr inbounds i8, i8* %662, i32 1
  store i8 %666, i8* %662, align 1
  %668 = srem i64 %663, 1000000000000
  %669 = sdiv i64 %668, 100000000000
  %670 = add nsw i64 %669, 48
  %671 = trunc i64 %670 to i8
  %672 = getelementptr inbounds i8, i8* %667, i32 1
  store i8 %671, i8* %667, align 1
  %673 = srem i64 %668, 100000000000
  %674 = sdiv i64 %673, 10000000000
  %675 = add nsw i64 %674, 48
  %676 = trunc i64 %675 to i8
  %677 = getelementptr inbounds i8, i8* %672, i32 1
  store i8 %676, i8* %672, align 1
  %678 = srem i64 %673, 10000000000
  %679 = sdiv i64 %678, 1000000000
  %680 = add nsw i64 %679, 48
  %681 = trunc i64 %680 to i8
  %682 = getelementptr inbounds i8, i8* %677, i32 1
  store i8 %681, i8* %677, align 1
  %683 = srem i64 %678, 1000000000
  %684 = sdiv i64 %683, 100000000
  %685 = add nsw i64 %684, 48
  %686 = trunc i64 %685 to i8
  %687 = getelementptr inbounds i8, i8* %682, i32 1
  store i8 %686, i8* %682, align 1
  %688 = srem i64 %683, 100000000
  %689 = sdiv i64 %688, 10000000
  %690 = add nsw i64 %689, 48
  %691 = trunc i64 %690 to i8
  %692 = getelementptr inbounds i8, i8* %687, i32 1
  store i8 %691, i8* %687, align 1
  %693 = srem i64 %688, 10000000
  %694 = sdiv i64 %693, 1000000
  %695 = add nsw i64 %694, 48
  %696 = trunc i64 %695 to i8
  %697 = getelementptr inbounds i8, i8* %692, i32 1
  store i8 %696, i8* %692, align 1
  %698 = srem i64 %693, 1000000
  %699 = sdiv i64 %698, 100000
  %700 = add nsw i64 %699, 48
  %701 = trunc i64 %700 to i8
  %702 = getelementptr inbounds i8, i8* %697, i32 1
  store i8 %701, i8* %697, align 1
  %703 = srem i64 %698, 100000
  %704 = sdiv i64 %703, 10000
  %705 = add nsw i64 %704, 48
  %706 = trunc i64 %705 to i8
  %707 = getelementptr inbounds i8, i8* %702, i32 1
  store i8 %706, i8* %702, align 1
  %708 = srem i64 %703, 10000
  %709 = sdiv i64 %708, 1000
  %710 = add nsw i64 %709, 48
  %711 = trunc i64 %710 to i8
  %712 = getelementptr inbounds i8, i8* %707, i32 1
  store i8 %711, i8* %707, align 1
  %713 = srem i64 %708, 1000
  %714 = sdiv i64 %713, 100
  %715 = add nsw i64 %714, 48
  %716 = trunc i64 %715 to i8
  %717 = getelementptr inbounds i8, i8* %712, i32 1
  store i8 %716, i8* %712, align 1
  %718 = srem i64 %713, 100
  %719 = sdiv i64 %718, 10
  %720 = add nsw i64 %719, 48
  %721 = trunc i64 %720 to i8
  %722 = getelementptr inbounds i8, i8* %717, i32 1
  store i8 %721, i8* %717, align 1
  %723 = srem i64 %718, 10
  %724 = sdiv i64 %723, 1
  %725 = add nsw i64 %724, 48
  %726 = trunc i64 %725 to i8
  %727 = getelementptr inbounds i8, i8* %722, i32 1
  store i8 %726, i8* %722, align 1
  br label %1002

; <label>:728:                                    ; preds = %646
  %729 = icmp slt i64 %.12, 100000000000000000
  br i1 %729, label %730, label %815

; <label>:730:                                    ; preds = %728
  %731 = sdiv i64 %.12, 10000000000000000
  %732 = add nsw i64 %731, 48
  %733 = trunc i64 %732 to i8
  %734 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %733, i8* %.03, align 1
  %735 = srem i64 %.12, 10000000000000000
  %736 = sdiv i64 %735, 1000000000000000
  %737 = add nsw i64 %736, 48
  %738 = trunc i64 %737 to i8
  %739 = getelementptr inbounds i8, i8* %734, i32 1
  store i8 %738, i8* %734, align 1
  %740 = srem i64 %735, 1000000000000000
  %741 = sdiv i64 %740, 100000000000000
  %742 = add nsw i64 %741, 48
  %743 = trunc i64 %742 to i8
  %744 = getelementptr inbounds i8, i8* %739, i32 1
  store i8 %743, i8* %739, align 1
  %745 = srem i64 %740, 100000000000000
  %746 = sdiv i64 %745, 10000000000000
  %747 = add nsw i64 %746, 48
  %748 = trunc i64 %747 to i8
  %749 = getelementptr inbounds i8, i8* %744, i32 1
  store i8 %748, i8* %744, align 1
  %750 = srem i64 %745, 10000000000000
  %751 = sdiv i64 %750, 1000000000000
  %752 = add nsw i64 %751, 48
  %753 = trunc i64 %752 to i8
  %754 = getelementptr inbounds i8, i8* %749, i32 1
  store i8 %753, i8* %749, align 1
  %755 = srem i64 %750, 1000000000000
  %756 = sdiv i64 %755, 100000000000
  %757 = add nsw i64 %756, 48
  %758 = trunc i64 %757 to i8
  %759 = getelementptr inbounds i8, i8* %754, i32 1
  store i8 %758, i8* %754, align 1
  %760 = srem i64 %755, 100000000000
  %761 = sdiv i64 %760, 10000000000
  %762 = add nsw i64 %761, 48
  %763 = trunc i64 %762 to i8
  %764 = getelementptr inbounds i8, i8* %759, i32 1
  store i8 %763, i8* %759, align 1
  %765 = srem i64 %760, 10000000000
  %766 = sdiv i64 %765, 1000000000
  %767 = add nsw i64 %766, 48
  %768 = trunc i64 %767 to i8
  %769 = getelementptr inbounds i8, i8* %764, i32 1
  store i8 %768, i8* %764, align 1
  %770 = srem i64 %765, 1000000000
  %771 = sdiv i64 %770, 100000000
  %772 = add nsw i64 %771, 48
  %773 = trunc i64 %772 to i8
  %774 = getelementptr inbounds i8, i8* %769, i32 1
  store i8 %773, i8* %769, align 1
  %775 = srem i64 %770, 100000000
  %776 = sdiv i64 %775, 10000000
  %777 = add nsw i64 %776, 48
  %778 = trunc i64 %777 to i8
  %779 = getelementptr inbounds i8, i8* %774, i32 1
  store i8 %778, i8* %774, align 1
  %780 = srem i64 %775, 10000000
  %781 = sdiv i64 %780, 1000000
  %782 = add nsw i64 %781, 48
  %783 = trunc i64 %782 to i8
  %784 = getelementptr inbounds i8, i8* %779, i32 1
  store i8 %783, i8* %779, align 1
  %785 = srem i64 %780, 1000000
  %786 = sdiv i64 %785, 100000
  %787 = add nsw i64 %786, 48
  %788 = trunc i64 %787 to i8
  %789 = getelementptr inbounds i8, i8* %784, i32 1
  store i8 %788, i8* %784, align 1
  %790 = srem i64 %785, 100000
  %791 = sdiv i64 %790, 10000
  %792 = add nsw i64 %791, 48
  %793 = trunc i64 %792 to i8
  %794 = getelementptr inbounds i8, i8* %789, i32 1
  store i8 %793, i8* %789, align 1
  %795 = srem i64 %790, 10000
  %796 = sdiv i64 %795, 1000
  %797 = add nsw i64 %796, 48
  %798 = trunc i64 %797 to i8
  %799 = getelementptr inbounds i8, i8* %794, i32 1
  store i8 %798, i8* %794, align 1
  %800 = srem i64 %795, 1000
  %801 = sdiv i64 %800, 100
  %802 = add nsw i64 %801, 48
  %803 = trunc i64 %802 to i8
  %804 = getelementptr inbounds i8, i8* %799, i32 1
  store i8 %803, i8* %799, align 1
  %805 = srem i64 %800, 100
  %806 = sdiv i64 %805, 10
  %807 = add nsw i64 %806, 48
  %808 = trunc i64 %807 to i8
  %809 = getelementptr inbounds i8, i8* %804, i32 1
  store i8 %808, i8* %804, align 1
  %810 = srem i64 %805, 10
  %811 = sdiv i64 %810, 1
  %812 = add nsw i64 %811, 48
  %813 = trunc i64 %812 to i8
  %814 = getelementptr inbounds i8, i8* %809, i32 1
  store i8 %813, i8* %809, align 1
  br label %1002

; <label>:815:                                    ; preds = %728
  %816 = icmp slt i64 %.12, 1000000000000000000
  br i1 %816, label %817, label %907

; <label>:817:                                    ; preds = %815
  %818 = sdiv i64 %.12, 100000000000000000
  %819 = add nsw i64 %818, 48
  %820 = trunc i64 %819 to i8
  %821 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %820, i8* %.03, align 1
  %822 = srem i64 %.12, 100000000000000000
  %823 = sdiv i64 %822, 10000000000000000
  %824 = add nsw i64 %823, 48
  %825 = trunc i64 %824 to i8
  %826 = getelementptr inbounds i8, i8* %821, i32 1
  store i8 %825, i8* %821, align 1
  %827 = srem i64 %822, 10000000000000000
  %828 = sdiv i64 %827, 1000000000000000
  %829 = add nsw i64 %828, 48
  %830 = trunc i64 %829 to i8
  %831 = getelementptr inbounds i8, i8* %826, i32 1
  store i8 %830, i8* %826, align 1
  %832 = srem i64 %827, 1000000000000000
  %833 = sdiv i64 %832, 100000000000000
  %834 = add nsw i64 %833, 48
  %835 = trunc i64 %834 to i8
  %836 = getelementptr inbounds i8, i8* %831, i32 1
  store i8 %835, i8* %831, align 1
  %837 = srem i64 %832, 100000000000000
  %838 = sdiv i64 %837, 10000000000000
  %839 = add nsw i64 %838, 48
  %840 = trunc i64 %839 to i8
  %841 = getelementptr inbounds i8, i8* %836, i32 1
  store i8 %840, i8* %836, align 1
  %842 = srem i64 %837, 10000000000000
  %843 = sdiv i64 %842, 1000000000000
  %844 = add nsw i64 %843, 48
  %845 = trunc i64 %844 to i8
  %846 = getelementptr inbounds i8, i8* %841, i32 1
  store i8 %845, i8* %841, align 1
  %847 = srem i64 %842, 1000000000000
  %848 = sdiv i64 %847, 100000000000
  %849 = add nsw i64 %848, 48
  %850 = trunc i64 %849 to i8
  %851 = getelementptr inbounds i8, i8* %846, i32 1
  store i8 %850, i8* %846, align 1
  %852 = srem i64 %847, 100000000000
  %853 = sdiv i64 %852, 10000000000
  %854 = add nsw i64 %853, 48
  %855 = trunc i64 %854 to i8
  %856 = getelementptr inbounds i8, i8* %851, i32 1
  store i8 %855, i8* %851, align 1
  %857 = srem i64 %852, 10000000000
  %858 = sdiv i64 %857, 1000000000
  %859 = add nsw i64 %858, 48
  %860 = trunc i64 %859 to i8
  %861 = getelementptr inbounds i8, i8* %856, i32 1
  store i8 %860, i8* %856, align 1
  %862 = srem i64 %857, 1000000000
  %863 = sdiv i64 %862, 100000000
  %864 = add nsw i64 %863, 48
  %865 = trunc i64 %864 to i8
  %866 = getelementptr inbounds i8, i8* %861, i32 1
  store i8 %865, i8* %861, align 1
  %867 = srem i64 %862, 100000000
  %868 = sdiv i64 %867, 10000000
  %869 = add nsw i64 %868, 48
  %870 = trunc i64 %869 to i8
  %871 = getelementptr inbounds i8, i8* %866, i32 1
  store i8 %870, i8* %866, align 1
  %872 = srem i64 %867, 10000000
  %873 = sdiv i64 %872, 1000000
  %874 = add nsw i64 %873, 48
  %875 = trunc i64 %874 to i8
  %876 = getelementptr inbounds i8, i8* %871, i32 1
  store i8 %875, i8* %871, align 1
  %877 = srem i64 %872, 1000000
  %878 = sdiv i64 %877, 100000
  %879 = add nsw i64 %878, 48
  %880 = trunc i64 %879 to i8
  %881 = getelementptr inbounds i8, i8* %876, i32 1
  store i8 %880, i8* %876, align 1
  %882 = srem i64 %877, 100000
  %883 = sdiv i64 %882, 10000
  %884 = add nsw i64 %883, 48
  %885 = trunc i64 %884 to i8
  %886 = getelementptr inbounds i8, i8* %881, i32 1
  store i8 %885, i8* %881, align 1
  %887 = srem i64 %882, 10000
  %888 = sdiv i64 %887, 1000
  %889 = add nsw i64 %888, 48
  %890 = trunc i64 %889 to i8
  %891 = getelementptr inbounds i8, i8* %886, i32 1
  store i8 %890, i8* %886, align 1
  %892 = srem i64 %887, 1000
  %893 = sdiv i64 %892, 100
  %894 = add nsw i64 %893, 48
  %895 = trunc i64 %894 to i8
  %896 = getelementptr inbounds i8, i8* %891, i32 1
  store i8 %895, i8* %891, align 1
  %897 = srem i64 %892, 100
  %898 = sdiv i64 %897, 10
  %899 = add nsw i64 %898, 48
  %900 = trunc i64 %899 to i8
  %901 = getelementptr inbounds i8, i8* %896, i32 1
  store i8 %900, i8* %896, align 1
  %902 = srem i64 %897, 10
  %903 = sdiv i64 %902, 1
  %904 = add nsw i64 %903, 48
  %905 = trunc i64 %904 to i8
  %906 = getelementptr inbounds i8, i8* %901, i32 1
  store i8 %905, i8* %901, align 1
  br label %1002

; <label>:907:                                    ; preds = %815
  %908 = sdiv i64 %.12, 1000000000000000000
  %909 = add nsw i64 %908, 48
  %910 = trunc i64 %909 to i8
  %911 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %910, i8* %.03, align 1
  %912 = srem i64 %.12, 1000000000000000000
  %913 = sdiv i64 %912, 100000000000000000
  %914 = add nsw i64 %913, 48
  %915 = trunc i64 %914 to i8
  %916 = getelementptr inbounds i8, i8* %911, i32 1
  store i8 %915, i8* %911, align 1
  %917 = srem i64 %912, 100000000000000000
  %918 = sdiv i64 %917, 10000000000000000
  %919 = add nsw i64 %918, 48
  %920 = trunc i64 %919 to i8
  %921 = getelementptr inbounds i8, i8* %916, i32 1
  store i8 %920, i8* %916, align 1
  %922 = srem i64 %917, 10000000000000000
  %923 = sdiv i64 %922, 1000000000000000
  %924 = add nsw i64 %923, 48
  %925 = trunc i64 %924 to i8
  %926 = getelementptr inbounds i8, i8* %921, i32 1
  store i8 %925, i8* %921, align 1
  %927 = srem i64 %922, 1000000000000000
  %928 = sdiv i64 %927, 100000000000000
  %929 = add nsw i64 %928, 48
  %930 = trunc i64 %929 to i8
  %931 = getelementptr inbounds i8, i8* %926, i32 1
  store i8 %930, i8* %926, align 1
  %932 = srem i64 %927, 100000000000000
  %933 = sdiv i64 %932, 10000000000000
  %934 = add nsw i64 %933, 48
  %935 = trunc i64 %934 to i8
  %936 = getelementptr inbounds i8, i8* %931, i32 1
  store i8 %935, i8* %931, align 1
  %937 = srem i64 %932, 10000000000000
  %938 = sdiv i64 %937, 1000000000000
  %939 = add nsw i64 %938, 48
  %940 = trunc i64 %939 to i8
  %941 = getelementptr inbounds i8, i8* %936, i32 1
  store i8 %940, i8* %936, align 1
  %942 = srem i64 %937, 1000000000000
  %943 = sdiv i64 %942, 100000000000
  %944 = add nsw i64 %943, 48
  %945 = trunc i64 %944 to i8
  %946 = getelementptr inbounds i8, i8* %941, i32 1
  store i8 %945, i8* %941, align 1
  %947 = srem i64 %942, 100000000000
  %948 = sdiv i64 %947, 10000000000
  %949 = add nsw i64 %948, 48
  %950 = trunc i64 %949 to i8
  %951 = getelementptr inbounds i8, i8* %946, i32 1
  store i8 %950, i8* %946, align 1
  %952 = srem i64 %947, 10000000000
  %953 = sdiv i64 %952, 1000000000
  %954 = add nsw i64 %953, 48
  %955 = trunc i64 %954 to i8
  %956 = getelementptr inbounds i8, i8* %951, i32 1
  store i8 %955, i8* %951, align 1
  %957 = srem i64 %952, 1000000000
  %958 = sdiv i64 %957, 100000000
  %959 = add nsw i64 %958, 48
  %960 = trunc i64 %959 to i8
  %961 = getelementptr inbounds i8, i8* %956, i32 1
  store i8 %960, i8* %956, align 1
  %962 = srem i64 %957, 100000000
  %963 = sdiv i64 %962, 10000000
  %964 = add nsw i64 %963, 48
  %965 = trunc i64 %964 to i8
  %966 = getelementptr inbounds i8, i8* %961, i32 1
  store i8 %965, i8* %961, align 1
  %967 = srem i64 %962, 10000000
  %968 = sdiv i64 %967, 1000000
  %969 = add nsw i64 %968, 48
  %970 = trunc i64 %969 to i8
  %971 = getelementptr inbounds i8, i8* %966, i32 1
  store i8 %970, i8* %966, align 1
  %972 = srem i64 %967, 1000000
  %973 = sdiv i64 %972, 100000
  %974 = add nsw i64 %973, 48
  %975 = trunc i64 %974 to i8
  %976 = getelementptr inbounds i8, i8* %971, i32 1
  store i8 %975, i8* %971, align 1
  %977 = srem i64 %972, 100000
  %978 = sdiv i64 %977, 10000
  %979 = add nsw i64 %978, 48
  %980 = trunc i64 %979 to i8
  %981 = getelementptr inbounds i8, i8* %976, i32 1
  store i8 %980, i8* %976, align 1
  %982 = srem i64 %977, 10000
  %983 = sdiv i64 %982, 1000
  %984 = add nsw i64 %983, 48
  %985 = trunc i64 %984 to i8
  %986 = getelementptr inbounds i8, i8* %981, i32 1
  store i8 %985, i8* %981, align 1
  %987 = srem i64 %982, 1000
  %988 = sdiv i64 %987, 100
  %989 = add nsw i64 %988, 48
  %990 = trunc i64 %989 to i8
  %991 = getelementptr inbounds i8, i8* %986, i32 1
  store i8 %990, i8* %986, align 1
  %992 = srem i64 %987, 100
  %993 = sdiv i64 %992, 10
  %994 = add nsw i64 %993, 48
  %995 = trunc i64 %994 to i8
  %996 = getelementptr inbounds i8, i8* %991, i32 1
  store i8 %995, i8* %991, align 1
  %997 = srem i64 %992, 10
  %998 = sdiv i64 %997, 1
  %999 = add nsw i64 %998, 48
  %1000 = trunc i64 %999 to i8
  %1001 = getelementptr inbounds i8, i8* %996, i32 1
  store i8 %1000, i8* %996, align 1
  br label %1002

; <label>:1002:                                   ; preds = %25, %54, %103, %172, %261, %370, %499, %648, %817, %907, %730, %571, %432, %313, %214, %135, %76, %37, %18
  %.18 = phi i8* [ %22, %18 ], [ %34, %25 ], [ %51, %37 ], [ %73, %54 ], [ %100, %76 ], [ %132, %103 ], [ %169, %135 ], [ %211, %172 ], [ %258, %214 ], [ %310, %261 ], [ %367, %313 ], [ %429, %370 ], [ %496, %432 ], [ %568, %499 ], [ %645, %571 ], [ %727, %648 ], [ %814, %730 ], [ %906, %817 ], [ %1001, %907 ]
  %1003 = icmp ne i32 %.2, 0
  br i1 %1003, label %1004, label %1007

; <label>:1004:                                   ; preds = %1002
  %1005 = trunc i32 %.2 to i8
  %1006 = getelementptr inbounds i8, i8* %.18, i32 1
  store i8 %1005, i8* %.18, align 1
  br label %1007

; <label>:1007:                                   ; preds = %1004, %1002
  %.19 = phi i8* [ %1006, %1004 ], [ %.18, %1002 ]
  store i8 0, i8* %.19, align 1
  ret i8* %.19
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @touch(i8*, i64) #0 {
  %3 = alloca %struct.timeval, align 8, !track !770
  %4 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 1
  store i64 %1, i64* %4, align 8
  %5 = call i64 @time(i64* null) #8
  %6 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 0
  store i64 %5, i64* %6, align 8
  %7 = call i32 @utime(i8* %0, %struct.timeval* %3) #8
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %2
  %10 = call i32* @__errno_location() #15
  %11 = load i32, i32* %10, align 4
  %12 = call i8* @strerror(i32 %11) #8
  %13 = getelementptr [15 x i8], [15 x i8]* @.str.13.1540, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %13, i8* %0, i8* %12)
  br label %14

; <label>:14:                                     ; preds = %9, %2
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @utime(i8*, %struct.timeval*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @remove_link(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !771
  %3 = call i32 @lstat(i8* %0, %struct.stat* %2) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %26

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 61440
  %9 = icmp eq i32 %8, 40960
  br i1 %9, label %10, label %26

; <label>:10:                                     ; preds = %5
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %12 = load i8, i8* %11, align 1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %10
  %15 = getelementptr [25 x i8], [25 x i8]* @.str.14.1543, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %15, i8* %0)
  br label %16

; <label>:16:                                     ; preds = %10, %14
  %17 = call i32 @unlink(i8* %0) #8
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %26

; <label>:19:                                     ; preds = %16
  %20 = getelementptr [33 x i8], [33 x i8]* @.str.15.1544, i32 0, i32 0
  %21 = call i8* @gettext(i8* %20) #8
  %22 = call i8* @quote(i8* %0)
  %23 = call i32* @__errno_location() #15
  %24 = load i32, i32* %23, align 4
  %25 = call i8* @strerror(i32 %24) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %21, i8* %22, i8* %25)
  br label %26

; <label>:26:                                     ; preds = %16, %19, %5, %1
  %.0 = phi i32 [ 0, %5 ], [ 0, %1 ], [ %17, %19 ], [ %17, %16 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @file_non_directory_p(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !772
  %3 = call i32 @lstat(i8* %0, %struct.stat* %2) #8
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %13, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 61440
  %9 = icmp eq i32 %8, 16384
  %10 = zext i1 %9 to i64
  %11 = select i1 %9, i32 0, i32 1
  %12 = icmp ne i32 %11, 0
  br label %13

; <label>:13:                                     ; preds = %1, %5
  %.0 = phi i1 [ %12, %5 ], [ false, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @file_size(i8*) #0 {
  %2 = getelementptr [3 x i8], [3 x i8]* @.str.16.1549, i32 0, i32 0
  %3 = call %struct._IO_FILE* @fopen(i8* %0, i8* %2), !track !773
  %4 = icmp ne %struct._IO_FILE* %3, null
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %1
  %6 = call i32 @fseeko(%struct._IO_FILE* %3, i64 0, i32 2)
  %7 = call i64 @ftello(%struct._IO_FILE* %3)
  %8 = call i32 @fclose(%struct._IO_FILE* %3)
  br label %9

; <label>:9:                                      ; preds = %1, %5
  %.0 = phi i64 [ %7, %5 ], [ -1, %1 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @make_directory(i8*) #0 {
  %2 = call i64 @strlen(i8* %0) #14
  %3 = add i64 %2, 1
  %4 = alloca i8, i64 %3, align 16, !track !774
  %5 = call i8* @strcpy(i8* %4, i8* %0) #8, !track !775
  %6 = load i8, i8* %4, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp eq i32 %7, 47
  %9 = zext i1 %8 to i32
  br label %10

; <label>:10:                                     ; preds = %38, %1
  %.06 = phi i32 [ 0, %1 ], [ %spec.select, %38 ]
  %.015 = phi i32 [ %9, %1 ], [ %41, %38 ]
  call void @unroll_loop(i32 380)
  %11 = sext i32 %.015 to i64
  call void @unroll_loop(i32 381)
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %10
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %21
  %indvars.iv1 = phi i64 [ %11, %.lr.ph ], [ %indvars.iv.next, %21 ]
  %17 = getelementptr inbounds i8, i8* %4, i64 %indvars.iv1
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %19, 47
  br i1 %20, label %21, label %..critedge_crit_edge2

; <label>:21:                                     ; preds = %16
  %indvars.iv.next = add i64 %indvars.iv1, 1
  call void @unroll_loop(i32 381)
  %22 = getelementptr inbounds i8, i8* %4, i64 %indvars.iv.next
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %16, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %21
  %split = phi i64 [ %indvars.iv.next, %21 ]
  br label %.critedge

..critedge_crit_edge2:                            ; preds = %16
  %split3 = phi i64 [ %indvars.iv1, %16 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge2, %..critedge_crit_edge, %10
  %.12.lcssa.wide = phi i64 [ %split3, %..critedge_crit_edge2 ], [ %split, %..critedge_crit_edge ], [ %11, %10 ]
  %26 = trunc i64 %.12.lcssa.wide to i32
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %4, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp ne i8 %29, 0
  %spec.select = select i1 %30, i32 %.06, i32 1
  %31 = sext i32 %26 to i64
  %32 = getelementptr inbounds i8, i8* %4, i64 %31
  store i8 0, i8* %32, align 1
  %33 = call zeroext i1 @file_exists_p(i8* %4)
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %.critedge
  %35 = call i32 @mkdir(i8* %4, i32 511) #8
  br label %36

; <label>:36:                                     ; preds = %.critedge, %34
  %.14 = phi i32 [ %35, %34 ], [ 0, %.critedge ]
  %37 = icmp ne i32 %spec.select, 0
  br i1 %37, label %42, label %38

; <label>:38:                                     ; preds = %36
  %39 = sext i32 %26 to i64
  %40 = getelementptr inbounds i8, i8* %4, i64 %39
  store i8 47, i8* %40, align 1
  %41 = add nsw i32 %26, 1
  br label %10

; <label>:42:                                     ; preds = %36
  %.14.lcssa = phi i32 [ %.14, %36 ]
  ret i32 %.14.lcssa
}

; Function Attrs: nounwind
declare dso_local i32 @mkdir(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @file_merge(i8*, i8*) #7 {
  %3 = call i8* @strrchr(i8* %0, i32 47) #14, !track !776
  %4 = icmp ne i8* %3, null
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %2
  %6 = call noalias i8* @xstrdup(i8* %1)
  br label %29

; <label>:7:                                      ; preds = %2
  %8 = ptrtoint i8* %3 to i64
  %9 = ptrtoint i8* %0 to i64
  %10 = sub i64 %8, %9
  %11 = add nsw i64 %10, 1
  %12 = call i64 @strlen(i8* %1) #14
  %13 = add i64 %11, %12
  %14 = add i64 %13, 1
  %15 = call noalias i8* @xmalloc(i64 %14)
  %16 = ptrtoint i8* %3 to i64
  %17 = ptrtoint i8* %0 to i64
  %18 = sub i64 %16, %17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %0, i64 %18, i1 false), !track !777
  %19 = ptrtoint i8* %3 to i64
  %20 = ptrtoint i8* %0 to i64
  %21 = sub i64 %19, %20
  %22 = getelementptr inbounds i8, i8* %15, i64 %21
  store i8 47, i8* %22, align 1
  %23 = ptrtoint i8* %3 to i64
  %24 = ptrtoint i8* %0 to i64
  %25 = sub i64 %23, %24
  %26 = getelementptr inbounds i8, i8* %15, i64 %25
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  %28 = call i8* @strcpy(i8* %27, i8* %1) #8, !track !778
  br label %29

; <label>:29:                                     ; preds = %7, %5
  %.0 = phi i8* [ %15, %7 ], [ %6, %5 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @fnmatch_nocase(i8*, i8*, i32) #0 {
  %4 = or i32 %2, 16
  %5 = call i32 @fnmatch(i8* %0, i8* %1, i32 %4)
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @acceptable(i8*) #0 {
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %1
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 46
  %7 = load i8*, i8** %6, align 8
  %8 = call i32 @strcmp(i8* %0, i8* %7) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %35, label %10

; <label>:10:                                     ; preds = %5, %1
  %11 = call i8* @strrchr(i8* %0, i32 47) #14, !track !779
  %12 = icmp ne i8* %11, null
  %13 = getelementptr inbounds i8, i8* %11, i64 1
  %spec.select = select i1 %12, i8* %13, i8* %0
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %15 = load i8**, i8*** %14, align 8
  %16 = icmp ne i8** %15, null
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  %18 = load i8**, i8*** %17, align 8
  %19 = icmp ne i8** %18, null
  br i1 %16, label %20, label %29

; <label>:20:                                     ; preds = %10
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %22 = load i8**, i8*** %21, align 8
  %23 = call zeroext i1 @in_acclist(i8** %22, i8* %spec.select, i1 zeroext true)
  %.not = xor i1 %19, true
  %.not1 = xor i1 %23, true
  %brmerge = or i1 %.not, %.not1
  %.mux = select i1 %.not, i1 %23, i1 false
  br i1 %brmerge, label %35, label %24

; <label>:24:                                     ; preds = %20
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  %26 = load i8**, i8*** %25, align 8
  %27 = call zeroext i1 @in_acclist(i8** %26, i8* %spec.select, i1 zeroext true)
  %28 = xor i1 %27, true
  br label %35

; <label>:29:                                     ; preds = %10
  br i1 %19, label %30, label %35

; <label>:30:                                     ; preds = %29
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  %32 = load i8**, i8*** %31, align 8
  %33 = call zeroext i1 @in_acclist(i8** %32, i8* %spec.select, i1 zeroext true)
  %34 = xor i1 %33, true
  br label %35

; <label>:35:                                     ; preds = %20, %29, %24, %5, %30
  %.0 = phi i1 [ %34, %30 ], [ true, %5 ], [ %28, %24 ], [ %.mux, %20 ], [ true, %29 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @in_acclist(i8**, i8*, i1 zeroext) #0 {
  %4 = zext i1 %2 to i8
  %5 = load i8*, i8** %0, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %41
  %.012 = phi i8** [ %42, %41 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 382)
  %7 = load i8*, i8** %.012, align 8
  %8 = call zeroext i1 @has_wildcards_p(i8* %7)
  br i1 %8, label %9, label %21

; <label>:9:                                      ; preds = %.lr.ph
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %11 = load i8, i8* %10, align 8
  %12 = trunc i8 %11 to i1
  %13 = load i8*, i8** %.012, align 8
  br i1 %12, label %14, label %16

; <label>:14:                                     ; preds = %9
  %15 = call i32 @fnmatch_nocase(i8* %13, i8* %1, i32 0)
  br label %18

; <label>:16:                                     ; preds = %9
  %17 = call i32 @fnmatch(i8* %13, i8* %1, i32 0)
  br label %18

; <label>:18:                                     ; preds = %16, %14
  %19 = phi i32 [ %15, %14 ], [ %17, %16 ]
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %._crit_edge.loopexit, label %41

; <label>:21:                                     ; preds = %.lr.ph
  %22 = trunc i8 %4 to i1
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %21
  %24 = load i8*, i8** %.012, align 8
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %26 = load i8, i8* %25, align 8
  %27 = trunc i8 %26 to i1
  %28 = call zeroext i1 @match_tail(i8* %1, i8* %24, i1 zeroext %27)
  br i1 %28, label %._crit_edge.loopexit, label %41

; <label>:29:                                     ; preds = %21
  %30 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %31 = load i8, i8* %30, align 8
  %32 = trunc i8 %31 to i1
  %33 = load i8*, i8** %.012, align 8
  br i1 %32, label %34, label %36

; <label>:34:                                     ; preds = %29
  %35 = call i32 @strcasecmp(i8* %1, i8* %33) #14
  br label %38

; <label>:36:                                     ; preds = %29
  %37 = call i32 @strcmp(i8* %1, i8* %33) #14
  br label %38

; <label>:38:                                     ; preds = %36, %34
  %39 = phi i32 [ %35, %34 ], [ %37, %36 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %._crit_edge.loopexit, label %41

; <label>:41:                                     ; preds = %18, %38, %23
  %42 = getelementptr inbounds i8*, i8** %.012, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = icmp ne i8* %43, null
  br i1 %44, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %18, %23, %38, %41
  %.0.ph = phi i1 [ false, %41 ], [ true, %38 ], [ true, %23 ], [ true, %18 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.0 = phi i1 [ false, %3 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @has_wildcards_p(i8*) #0 {
  %2 = getelementptr [5 x i8], [5 x i8]* @.str.18.1562, i32 0, i32 0
  %3 = call i8* @strpbrk(i8* %0, i8* %2) #14, !track !780
  %4 = icmp ne i8* %3, null
  %5 = xor i1 %4, true
  %6 = xor i1 %5, true
  ret i1 %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @match_tail(i8*, i8*, i1 zeroext) #0 {
  %4 = zext i1 %2 to i8
  %5 = call i64 @strlen(i8* %0) #14
  %6 = call i64 @strlen(i8* %1) #14
  %7 = sub i64 %5, %6
  %8 = trunc i64 %7 to i32
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %22, label %10

; <label>:10:                                     ; preds = %3
  %11 = trunc i8 %4 to i1
  %12 = sext i32 %8 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  br i1 %11, label %18, label %14

; <label>:14:                                     ; preds = %10
  %15 = call i32 @strcmp(i8* %13, i8* %1) #14
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  br label %22

; <label>:18:                                     ; preds = %10
  %19 = call i32 @strcasecmp(i8* %13, i8* %1) #14
  %20 = icmp ne i32 %19, 0
  %21 = xor i1 %20, true
  br label %22

; <label>:22:                                     ; preds = %3, %18, %14
  %.0 = phi i1 [ %21, %18 ], [ %17, %14 ], [ false, %3 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @accept_url(i8*) #0 {
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %11

; <label>:5:                                      ; preds = %1
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  %7 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %6, align 8
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %9 = load i8*, i8** %8, align 8
  %10 = call zeroext i1 %7(i8* %9, i8* %0)
  br i1 %10, label %11, label %22

; <label>:11:                                     ; preds = %5, %1
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %21

; <label>:15:                                     ; preds = %11
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  %17 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %16, align 8
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  %19 = load i8*, i8** %18, align 8
  %20 = call zeroext i1 %17(i8* %19, i8* %0)
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %15, %11
  br label %22

; <label>:22:                                     ; preds = %15, %5, %21
  %.0 = phi i1 [ true, %21 ], [ false, %5 ], [ false, %15 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @subdir_p(i8*, i8*) #0 {
  %3 = load i8, i8* %0, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %61, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %8 = load i8, i8* %7, align 8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %.preheader, label %.preheader4

.preheader4:                                      ; preds = %6
  call void @unroll_loop(i32 383)
  %10 = load i8, i8* %0, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %.lr.ph19, label %.critedge.loopexit5

.lr.ph19:                                         ; preds = %.preheader4
  br label %16

.preheader:                                       ; preds = %6
  call void @unroll_loop(i32 384)
  %13 = load i8, i8* %0, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %.lr.ph, label %.critedge.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %32

; <label>:16:                                     ; preds = %.lr.ph19, %26
  %.0118 = phi i8* [ %0, %.lr.ph19 ], [ %27, %26 ]
  %.0217 = phi i8* [ %1, %.lr.ph19 ], [ %28, %26 ]
  %17 = load i8, i8* %.0217, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %..critedge.loopexit5_crit_edge22

; <label>:20:                                     ; preds = %16
  %21 = load i8, i8* %.0118, align 1
  %22 = sext i8 %21 to i32
  %23 = load i8, i8* %.0217, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %..critedge.loopexit5_crit_edge25

; <label>:26:                                     ; preds = %20
  %27 = getelementptr inbounds i8, i8* %.0118, i32 1
  %28 = getelementptr inbounds i8, i8* %.0217, i32 1
  call void @unroll_loop(i32 383)
  %29 = load i8, i8* %27, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %16, label %..critedge.loopexit5_crit_edge

; <label>:32:                                     ; preds = %.lr.ph, %44
  %.19 = phi i8* [ %0, %.lr.ph ], [ %45, %44 ]
  %.138 = phi i8* [ %1, %.lr.ph ], [ %46, %44 ]
  %33 = load i8, i8* %.138, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %..critedge.loopexit_crit_edge11

; <label>:36:                                     ; preds = %32
  %37 = load i8, i8* %.19, align 1
  %38 = sext i8 %37 to i32
  %39 = call i32 @c_tolower(i32 %38)
  %40 = load i8, i8* %.138, align 1
  %41 = sext i8 %40 to i32
  %42 = call i32 @c_tolower(i32 %41)
  %43 = icmp eq i32 %39, %42
  br i1 %43, label %44, label %..critedge.loopexit_crit_edge14

; <label>:44:                                     ; preds = %36
  %45 = getelementptr inbounds i8, i8* %.19, i32 1
  %46 = getelementptr inbounds i8, i8* %.138, i32 1
  call void @unroll_loop(i32 384)
  %47 = load i8, i8* %45, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %32, label %..critedge.loopexit_crit_edge

..critedge.loopexit_crit_edge:                    ; preds = %44
  %split = phi i8* [ %46, %44 ]
  %split10 = phi i8* [ %45, %44 ]
  br label %.critedge.loopexit

..critedge.loopexit_crit_edge11:                  ; preds = %32
  %split12 = phi i8* [ %.138, %32 ]
  %split13 = phi i8* [ %.19, %32 ]
  br label %.critedge.loopexit

..critedge.loopexit_crit_edge14:                  ; preds = %36
  %split15 = phi i8* [ %.138, %36 ]
  %split16 = phi i8* [ %.19, %36 ]
  br label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %..critedge.loopexit_crit_edge14, %..critedge.loopexit_crit_edge11, %..critedge.loopexit_crit_edge, %.preheader
  %.24.ph = phi i8* [ %split, %..critedge.loopexit_crit_edge ], [ %split12, %..critedge.loopexit_crit_edge11 ], [ %split15, %..critedge.loopexit_crit_edge14 ], [ %1, %.preheader ]
  %.2.ph = phi i8* [ %split10, %..critedge.loopexit_crit_edge ], [ %split13, %..critedge.loopexit_crit_edge11 ], [ %split16, %..critedge.loopexit_crit_edge14 ], [ %0, %.preheader ]
  br label %.critedge

..critedge.loopexit5_crit_edge:                   ; preds = %26
  %split20 = phi i8* [ %28, %26 ]
  %split21 = phi i8* [ %27, %26 ]
  br label %.critedge.loopexit5

..critedge.loopexit5_crit_edge22:                 ; preds = %16
  %split23 = phi i8* [ %.0217, %16 ]
  %split24 = phi i8* [ %.0118, %16 ]
  br label %.critedge.loopexit5

..critedge.loopexit5_crit_edge25:                 ; preds = %20
  %split26 = phi i8* [ %.0217, %20 ]
  %split27 = phi i8* [ %.0118, %20 ]
  br label %.critedge.loopexit5

.critedge.loopexit5:                              ; preds = %..critedge.loopexit5_crit_edge25, %..critedge.loopexit5_crit_edge22, %..critedge.loopexit5_crit_edge, %.preheader4
  %.24.ph6 = phi i8* [ %split20, %..critedge.loopexit5_crit_edge ], [ %split23, %..critedge.loopexit5_crit_edge22 ], [ %split26, %..critedge.loopexit5_crit_edge25 ], [ %1, %.preheader4 ]
  %.2.ph7 = phi i8* [ %split21, %..critedge.loopexit5_crit_edge ], [ %split24, %..critedge.loopexit5_crit_edge22 ], [ %split27, %..critedge.loopexit5_crit_edge25 ], [ %0, %.preheader4 ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit5, %.critedge.loopexit
  %.24 = phi i8* [ %.24.ph, %.critedge.loopexit ], [ %.24.ph6, %.critedge.loopexit5 ]
  %.2 = phi i8* [ %.2.ph, %.critedge.loopexit ], [ %.2.ph7, %.critedge.loopexit5 ]
  %50 = load i8, i8* %.2, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %61

; <label>:53:                                     ; preds = %.critedge
  %54 = load i8, i8* %.24, align 1
  %55 = sext i8 %54 to i32
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %61, label %57

; <label>:57:                                     ; preds = %53
  %58 = load i8, i8* %.24, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp eq i32 %59, 47
  br label %61

; <label>:61:                                     ; preds = %.critedge, %57, %53, %2
  %.0 = phi i1 [ true, %2 ], [ false, %.critedge ], [ true, %53 ], [ %60, %57 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @accdir(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = icmp eq i32 %3, 47
  %5 = getelementptr inbounds i8, i8* %0, i32 1
  %spec.select = select i1 %4, i8* %5, i8* %0
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 30
  %7 = load i8**, i8*** %6, align 8
  %8 = icmp ne i8** %7, null
  br i1 %8, label %9, label %13

; <label>:9:                                      ; preds = %1
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 30
  %11 = load i8**, i8*** %10, align 8
  %12 = call zeroext i1 @dir_matches_p(i8** %11, i8* %spec.select)
  br i1 %12, label %13, label %22

; <label>:13:                                     ; preds = %9, %1
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  %15 = load i8**, i8*** %14, align 8
  %16 = icmp ne i8** %15, null
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %13
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  %19 = load i8**, i8*** %18, align 8
  %20 = call zeroext i1 @dir_matches_p(i8** %19, i8* %spec.select)
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %17, %13
  br label %22

; <label>:22:                                     ; preds = %17, %9, %21
  %.0 = phi i1 [ true, %21 ], [ false, %9 ], [ false, %17 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @dir_matches_p(i8**, i8*) #0 {
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %4 = load i8, i8* %3, align 8
  %5 = trunc i8 %4 to i1
  %6 = zext i1 %5 to i64
  %7 = select i1 %5, i32 (i8*, i8*, i32)* @fnmatch_nocase, i32 (i8*, i8*, i32)* @fnmatch
  %8 = load i8*, i8** %0, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %24
  %.03 = phi i8** [ %25, %24 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 385)
  %10 = load i8*, i8** %.03, align 8
  %11 = load i8*, i8** %.03, align 8
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp eq i32 %13, 47
  %15 = zext i1 %14 to i32
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = call zeroext i1 @has_wildcards_p(i8* %17)
  br i1 %18, label %19, label %22

; <label>:19:                                     ; preds = %.lr.ph
  %20 = call i32 %7(i8* %17, i8* %1, i32 1)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %.loopexit.loopexit, label %24

; <label>:22:                                     ; preds = %.lr.ph
  %23 = call zeroext i1 @subdir_p(i8* %17, i8* %1)
  br i1 %23, label %.loopexit.loopexit, label %24

; <label>:24:                                     ; preds = %19, %22
  %25 = getelementptr inbounds i8*, i8** %.03, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %19, %22, %24
  %.0.lcssa.ph = phi i8** [ %25, %24 ], [ %.03, %22 ], [ %.03, %19 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %2
  %.0.lcssa = phi i8** [ %0, %2 ], [ %.0.lcssa.ph, %.loopexit.loopexit ]
  %28 = load i8*, i8** %.0.lcssa, align 8
  %29 = icmp ne i8* %28, null
  %30 = zext i1 %29 to i64
  %31 = select i1 %29, i32 1, i32 0
  %32 = icmp ne i32 %31, 0
  ret i1 %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @suffix(i8*) #0 {
  %2 = call i8* @strrchr(i8* %0, i32 46) #14, !track !781
  %3 = icmp ne i8* %2, null
  br i1 %3, label %4, label %9

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds i8, i8* %2, i64 1
  %6 = call i8* @strchr(i8* %5, i32 47) #14, !track !782
  %7 = icmp ne i8* %6, null
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  %spec.select = select i1 %7, i8* null, i8* %8
  ret i8* %spec.select

; <label>:9:                                      ; preds = %1
  ret i8* null
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @has_html_suffix_p(i8*) #0 {
  %2 = call i8* @suffix(i8* %0)
  %3 = icmp eq i8* %2, null
  br i1 %3, label %23, label %4

; <label>:4:                                      ; preds = %1
  %5 = getelementptr [5 x i8], [5 x i8]* @.str.19.1571, i32 0, i32 0
  %6 = call i32 @c_strcasecmp(i8* %2, i8* %5) #14
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %23

; <label>:8:                                      ; preds = %4
  %9 = getelementptr [4 x i8], [4 x i8]* @.str.20.1572, i32 0, i32 0
  %10 = call i32 @c_strcasecmp(i8* %2, i8* %9) #14
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %23

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds i8, i8* %2, i64 0
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %12
  %18 = getelementptr inbounds i8, i8* %2, i64 1
  %19 = getelementptr [5 x i8], [5 x i8]* @.str.19.1571, i32 0, i32 0
  %20 = call i32 @c_strcasecmp(i8* %18, i8* %19) #14
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %17, %12
  br label %23

; <label>:23:                                     ; preds = %17, %8, %4, %1, %22
  %.0 = phi i1 [ false, %22 ], [ false, %1 ], [ true, %4 ], [ true, %8 ], [ true, %17 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.file_memory* @wget_read_file(i8*) #7 {
  %2 = alloca %struct.stat, align 8
  %3 = load i8, i8* %0, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp eq i32 %4, 45
  br i1 %5, label %6, label %13

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %6
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %12 = call i32 @fileno(%struct._IO_FILE* %11) #8
  br label %15

; <label>:13:                                     ; preds = %6, %1
  %14 = call i32 (i8*, i32, ...) @open(i8* %0, i32 0)
  br label %15

; <label>:15:                                     ; preds = %13, %10
  %.02 = phi i32 [ %14, %13 ], [ %12, %10 ]
  %.01 = phi i8 [ 0, %13 ], [ 1, %10 ]
  %16 = icmp slt i32 %.02, 0
  br i1 %16, label %100, label %17

; <label>:17:                                     ; preds = %15
  %18 = call noalias i8* @xmalloc(i64 24)
  %19 = bitcast i8* %18 to %struct.file_memory*
  %20 = call i32 @fstat(i32 %.02, %struct.stat* %2) #8
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %39, label %22

; <label>:22:                                     ; preds = %17
  %23 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 8
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = call i8* @mmap(i8* null, i64 %27, i32 3, i32 2, i32 %.02, i64 0) #8, !track !783
  %29 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  store i8* %28, i8** %29, align 8
  %30 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, inttoptr (i64 -1 to i8*)
  br i1 %32, label %39, label %33

; <label>:33:                                     ; preds = %22
  %34 = trunc i8 %.01 to i1
  br i1 %34, label %37, label %35

; <label>:35:                                     ; preds = %33
  %36 = call i32 @close(i32 %.02)
  br label %37

; <label>:37:                                     ; preds = %35, %33
  %38 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 2
  store i32 1, i32* %38, align 8
  br label %100

; <label>:39:                                     ; preds = %22, %17
  %40 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  store i64 0, i64* %40, align 8
  %41 = call noalias i8* @xmalloc(i64 512)
  %42 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  store i8* %41, i8** %42, align 8
  br label %43

; <label>:43:                                     ; preds = %39, %65
  %.03 = phi i64 [ 512, %39 ], [ %.1, %65 ]
  call void @unroll_loop(i32 386)
  %44 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = sdiv i64 %.03, 2
  %47 = icmp sgt i64 %45, %46
  br i1 %47, label %48, label %54

; <label>:48:                                     ; preds = %43
  %49 = shl i64 %.03, 1
  %50 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = call i8* @xrealloc(i8* %51, i64 %49)
  %53 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  store i8* %52, i8** %53, align 8
  br label %54

; <label>:54:                                     ; preds = %48, %43
  %.1 = phi i64 [ %49, %48 ], [ %.03, %43 ]
  %55 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds i8, i8* %56, i64 %58
  %60 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = sub nsw i64 %.1, %61
  %63 = call i64 @read(i32 %.02, i8* %59, i64 %62)
  %64 = icmp sgt i64 %63, 0
  br i1 %64, label %65, label %69

; <label>:65:                                     ; preds = %54
  %66 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = add nsw i64 %67, %63
  store i64 %68, i64* %66, align 8
  br label %43

; <label>:69:                                     ; preds = %54
  %.1.lcssa = phi i64 [ %.1, %54 ]
  %.lcssa = phi i64 [ %63, %54 ]
  %70 = icmp slt i64 %.lcssa, 0
  %71 = trunc i8 %.01 to i1
  br i1 %70, label %92, label %72

; <label>:72:                                     ; preds = %69
  br i1 %71, label %75, label %73

; <label>:73:                                     ; preds = %72
  %74 = call i32 @close(i32 %.02)
  br label %75

; <label>:75:                                     ; preds = %73, %72
  %76 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp sgt i64 %.1.lcssa, %77
  br i1 %78, label %79, label %90

; <label>:79:                                     ; preds = %75
  %80 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %90

; <label>:83:                                     ; preds = %79
  %84 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = call i8* @xrealloc(i8* %85, i64 %87)
  %89 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  store i8* %88, i8** %89, align 8
  br label %90

; <label>:90:                                     ; preds = %83, %79, %75
  %91 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 2
  store i32 0, i32* %91, align 8
  br label %100

; <label>:92:                                     ; preds = %69
  br i1 %71, label %95, label %93

; <label>:93:                                     ; preds = %92
  %94 = call i32 @close(i32 %.02)
  br label %95

; <label>:95:                                     ; preds = %92, %93
  %96 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  call void @free(i8* %97) #8
  %98 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %19, i32 0, i32 0
  store i8* null, i8** %98, align 8
  %99 = bitcast %struct.file_memory* %19 to i8*
  call void @free(i8* %99) #8
  br label %100

; <label>:100:                                    ; preds = %15, %95, %90, %37
  %.0 = phi %struct.file_memory* [ null, %95 ], [ %19, %90 ], [ %19, %37 ], [ null, %15 ]
  ret %struct.file_memory* %.0
}

; Function Attrs: nounwind
declare dso_local i8* @mmap(i8*, i64, i32, i32, i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @wget_read_file_free(%struct.file_memory*) #0 {
  %2 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %0, i32 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp ne i32 %3, 0
  %5 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  br i1 %4, label %7, label %11

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = call i32 @munmap(i8* %6, i64 %9) #8
  br label %13

; <label>:11:                                     ; preds = %1
  call void @free(i8* %6) #8
  %12 = getelementptr inbounds %struct.file_memory, %struct.file_memory* %0, i32 0, i32 0
  store i8* null, i8** %12, align 8
  br label %13

; <label>:13:                                     ; preds = %7, %11
  %14 = bitcast %struct.file_memory* %0 to i8*
  call void @free(i8* %14) #8
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @munmap(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_vec(i8**) #0 {
  %2 = icmp ne i8** %0, null
  br i1 %2, label %3, label %11

; <label>:3:                                      ; preds = %1
  %4 = load i8*, i8** %0, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i8** [ %7, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 387)
  %6 = load i8*, i8** %.01, align 8
  call void @free(i8* %6) #8
  store i8* null, i8** %.01, align 8
  %7 = getelementptr inbounds i8*, i8** %.01, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %10 = bitcast i8** %0 to i8*
  call void @free(i8* %10) #8
  br label %11

; <label>:11:                                     ; preds = %._crit_edge, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8** @merge_vecs(i8**, i8**) #7 {
  %3 = icmp ne i8** %0, null
  br i1 %3, label %4, label %41

; <label>:4:                                      ; preds = %2
  %5 = icmp ne i8** %1, null
  br i1 %5, label %6, label %41

; <label>:6:                                      ; preds = %4
  %7 = load i8*, i8** %1, align 8
  %8 = icmp ne i8* %7, null
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %6
  %10 = bitcast i8** %1 to i8*
  call void @free(i8* %10) #8
  br label %41

; <label>:11:                                     ; preds = %6
  %12 = load i8*, i8** %0, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %.lr.ph6.preheader, label %18

.lr.ph6.preheader:                                ; preds = %11
  br label %.lr.ph6

.lr.ph6:                                          ; preds = %.lr.ph6.preheader, %.lr.ph6
  %indvars.iv8 = phi i64 [ %indvars.iv.next9, %.lr.ph6 ], [ 0, %.lr.ph6.preheader ]
  %indvars.iv.next9 = add nuw i64 %indvars.iv8, 1
  %14 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv.next9
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %.lr.ph6, label %._crit_edge7

._crit_edge7:                                     ; preds = %.lr.ph6
  %split.wide10 = phi i64 [ %indvars.iv.next9, %.lr.ph6 ]
  %17 = trunc i64 %split.wide10 to i32
  br label %18

; <label>:18:                                     ; preds = %._crit_edge7, %11
  %.01.lcssa = phi i32 [ %17, %._crit_edge7 ], [ 0, %11 ]
  %19 = load i8*, i8** %1, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %.lr.ph.preheader, label %25

.lr.ph.preheader:                                 ; preds = %18
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 388)
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %21 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv.next
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph
  %split.wide = phi i64 [ %indvars.iv.next, %.lr.ph ]
  %24 = trunc i64 %split.wide to i32
  br label %25

; <label>:25:                                     ; preds = %._crit_edge, %18
  %.02.lcssa = phi i32 [ %24, %._crit_edge ], [ 0, %18 ]
  %26 = bitcast i8** %0 to i8*
  %27 = add nsw i32 %.01.lcssa, %.02.lcssa
  %28 = add nsw i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = mul i64 %29, 8
  %31 = call i8* @xrealloc(i8* %26, i64 %30)
  %32 = bitcast i8* %31 to i8**
  %33 = sext i32 %.01.lcssa to i64
  %34 = getelementptr inbounds i8*, i8** %32, i64 %33
  %35 = bitcast i8** %34 to i8*
  %36 = bitcast i8** %1 to i8*
  %37 = add nsw i32 %.02.lcssa, 1
  %38 = sext i32 %37 to i64
  %39 = mul i64 %38, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 %39, i1 false), !track !784
  %40 = bitcast i8** %1 to i8*
  call void @free(i8* %40) #8
  br label %41

; <label>:41:                                     ; preds = %4, %2, %25, %9
  %.0 = phi i8** [ %32, %25 ], [ %0, %9 ], [ %1, %2 ], [ %0, %4 ]
  ret i8** %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8** @vec_append(i8**, i8*) #7 {
  %3 = icmp ne i8** %0, null
  br i1 %3, label %4, label %13

; <label>:4:                                      ; preds = %2
  %5 = load i8*, i8** %0, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %.lr.ph.preheader, label %11

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 390)
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %7 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv.next
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph
  %split.wide = phi i64 [ %indvars.iv.next, %.lr.ph ]
  %10 = trunc i64 %split.wide to i32
  br label %11

; <label>:11:                                     ; preds = %._crit_edge, %4
  %.0.lcssa = phi i32 [ %10, %._crit_edge ], [ 0, %4 ]
  %12 = add nsw i32 %.0.lcssa, 1
  br label %13

; <label>:13:                                     ; preds = %2, %11
  %.1 = phi i32 [ %12, %11 ], [ 1, %2 ]
  %14 = bitcast i8** %0 to i8*
  %15 = add nsw i32 %.1, 1
  %16 = sext i32 %15 to i64
  %17 = mul i64 %16, 8
  %18 = call i8* @xrealloc(i8* %14, i64 %17)
  %19 = bitcast i8* %18 to i8**
  %20 = call noalias i8* @xstrdup(i8* %1)
  %21 = sub nsw i32 %.1, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8*, i8** %19, i64 %22
  store i8* %20, i8** %23, align 8
  %24 = sext i32 %.1 to i64
  %25 = getelementptr inbounds i8*, i8** %19, i64 %24
  store i8* null, i8** %25, align 8
  ret i8** %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @string_set_add(%struct.hash_table*, i8*) #0 {
  %3 = call i32 @hash_table_contains(%struct.hash_table* %0, i8* %1)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %2
  %6 = call noalias i8* @xstrdup(i8* %1)
  %7 = getelementptr [2 x i8], [2 x i8]* @.str.21.1585, i32 0, i32 0
  call void @hash_table_put(%struct.hash_table* %0, i8* %6, i8* %7)
  br label %8

; <label>:8:                                      ; preds = %2, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @string_set_contains(%struct.hash_table*, i8*) #0 {
  %3 = call i32 @hash_table_contains(%struct.hash_table* %0, i8* %1)
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @string_set_to_array(%struct.hash_table*, i8**) #0 {
  %3 = alloca %struct.hash_table_iterator, align 8, !track !785
  call void @hash_table_iterate(%struct.hash_table* %0, %struct.hash_table_iterator* %3)
  %4 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %3)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %2
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i8** [ %8, %.lr.ph ], [ %1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 391)
  %6 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %3, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds i8*, i8** %.01, i32 1
  store i8* %7, i8** %.01, align 8
  %9 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %3)
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @string_set_free(%struct.hash_table*) #0 {
  %2 = alloca %struct.hash_table_iterator, align 8, !track !786
  call void @hash_table_iterate(%struct.hash_table* %0, %struct.hash_table_iterator* %2)
  %3 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 392)
  %5 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  store i8* null, i8** %7, align 8
  %8 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  call void @hash_table_destroy(%struct.hash_table* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_keys_and_values(%struct.hash_table*) #0 {
  %2 = alloca %struct.hash_table_iterator, align 8, !track !787
  call void @hash_table_iterate(%struct.hash_table* %0, %struct.hash_table_iterator* %2)
  %3 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 393)
  %5 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %7 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 0
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  call void @free(i8* %9) #8
  %10 = getelementptr inbounds %struct.hash_table_iterator, %struct.hash_table_iterator* %2, i32 0, i32 1
  store i8* null, i8** %10, align 8
  %11 = call i32 @hash_table_iter_next(%struct.hash_table_iterator* %2)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @with_thousand_seps(i64) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = icmp slt i64 %0, 0
  %5 = zext i1 %4 to i8
  call void @get_grouping_data(i8** %3, i8** %2)
  %6 = load i8*, i8** %3, align 8
  %7 = call i64 @strlen(i8* %6) #14
  %8 = trunc i64 %7 to i32
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr inbounds i8, i8* %9, i32 1
  %11 = load i8, i8* %9, align 1
  %12 = sext i8 %11 to i32
  %13 = trunc i8 %5 to i1
  %14 = sub nsw i64 0, %0
  %spec.select = select i1 %13, i64 %14, i64 %0
  %15 = getelementptr [48 x i8], [48 x i8]* @with_thousand_seps.outbuf, i32 0, i32 0
  %16 = getelementptr i8, i8* %15, i64 48
  %17 = getelementptr inbounds i8, i8* %16, i32 -1
  store i8 0, i8* %17, align 1
  %18 = srem i64 %spec.select, 10
  %19 = add nsw i64 %18, 48
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds i8, i8* %17, i32 -1
  store i8 %20, i8* %21, align 1
  %22 = sdiv i64 %spec.select, 10
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %47
  %24 = phi i64 [ %52, %47 ], [ %22, %.lr.ph.preheader ]
  %25 = phi i8* [ %51, %47 ], [ %21, %.lr.ph.preheader ]
  %.0313 = phi i8* [ %.25, %47 ], [ %10, %.lr.ph.preheader ]
  %.0612 = phi i32 [ %.17, %47 ], [ 0, %.lr.ph.preheader ]
  %.0811 = phi i32 [ %.210, %47 ], [ %12, %.lr.ph.preheader ]
  %26 = add nsw i32 %.0612, 1
  %27 = icmp eq i32 %26, %.0811
  br i1 %27, label %28, label %47

; <label>:28:                                     ; preds = %.lr.ph
  %29 = icmp eq i32 %8, 1
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %28
  %31 = load i8*, i8** %3, align 8
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds i8, i8* %25, i32 -1
  store i8 %32, i8* %33, align 1
  br label %40

; <label>:34:                                     ; preds = %28
  %35 = sext i32 %8 to i64
  %36 = sub i64 0, %35
  %37 = getelementptr inbounds i8, i8* %25, i64 %36
  %38 = load i8*, i8** %3, align 8
  %39 = sext i32 %8 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %39, i1 false)
  br label %40

; <label>:40:                                     ; preds = %34, %30
  %.12 = phi i8* [ %33, %30 ], [ %37, %34 ]
  %41 = load i8, i8* %.0313, align 1
  %42 = icmp ne i8 %41, 0
  br i1 %42, label %43, label %47

; <label>:43:                                     ; preds = %40
  %44 = getelementptr inbounds i8, i8* %.0313, i32 1
  %45 = load i8, i8* %.0313, align 1
  %46 = sext i8 %45 to i32
  br label %47

; <label>:47:                                     ; preds = %40, %43, %.lr.ph
  %.210 = phi i32 [ %.0811, %.lr.ph ], [ %46, %43 ], [ %.0811, %40 ]
  %.17 = phi i32 [ %26, %.lr.ph ], [ 0, %43 ], [ 0, %40 ]
  %.25 = phi i8* [ %.0313, %.lr.ph ], [ %44, %43 ], [ %.0313, %40 ]
  %.2 = phi i8* [ %25, %.lr.ph ], [ %.12, %43 ], [ %.12, %40 ]
  %48 = srem i64 %24, 10
  %49 = add nsw i64 %48, 48
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds i8, i8* %.2, i32 -1
  store i8 %50, i8* %51, align 1
  %52 = sdiv i64 %24, 10
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %47
  %.lcssa.ph = phi i8* [ %51, %47 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.lcssa = phi i8* [ %21, %1 ], [ %.lcssa.ph, %._crit_edge.loopexit ]
  %54 = trunc i8 %5 to i1
  br i1 %54, label %55, label %57

; <label>:55:                                     ; preds = %._crit_edge
  %56 = getelementptr inbounds i8, i8* %.lcssa, i32 -1
  store i8 45, i8* %56, align 1
  br label %57

; <label>:57:                                     ; preds = %55, %._crit_edge
  %.3 = phi i8* [ %56, %55 ], [ %.lcssa, %._crit_edge ]
  ret i8* %.3
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_grouping_data(i8**, i8**) #0 {
  %3 = load i8, i8* @get_grouping_data.initialized, align 1
  %4 = trunc i8 %3 to i1
  br i1 %4, label %27, label %5

; <label>:5:                                      ; preds = %2
  %6 = call %struct.lconv* @localeconv() #8
  %7 = getelementptr inbounds %struct.lconv, %struct.lconv* %6, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  store i8* %8, i8** @get_grouping_data.cached_sep, align 8
  %9 = getelementptr inbounds %struct.lconv, %struct.lconv* %6, i32 0, i32 2
  %10 = load i8*, i8** %9, align 8
  store i8* %10, i8** @get_grouping_data.cached_grouping, align 8
  %11 = load i8*, i8** @get_grouping_data.cached_sep, align 8
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %26, label %14

; <label>:14:                                     ; preds = %5
  %15 = getelementptr inbounds %struct.lconv, %struct.lconv* %6, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp ne i32 %18, 44
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %14
  %21 = getelementptr [2 x i8], [2 x i8]* @.str.38.1594, i32 0, i32 0
  store i8* %21, i8** @get_grouping_data.cached_sep, align 8
  br label %24

; <label>:22:                                     ; preds = %14
  %23 = getelementptr [2 x i8], [2 x i8]* @.str.32.1595, i32 0, i32 0
  store i8* %23, i8** @get_grouping_data.cached_sep, align 8
  br label %24

; <label>:24:                                     ; preds = %22, %20
  %25 = getelementptr [2 x i8], [2 x i8]* @.str.39.1596, i32 0, i32 0
  store i8* %25, i8** @get_grouping_data.cached_grouping, align 8
  br label %26

; <label>:26:                                     ; preds = %24, %5
  store i8 1, i8* @get_grouping_data.initialized, align 1
  br label %27

; <label>:27:                                     ; preds = %26, %2
  %28 = load i8*, i8** @get_grouping_data.cached_sep, align 8
  store i8* %28, i8** %0, align 8
  %29 = load i8*, i8** @get_grouping_data.cached_grouping, align 8
  store i8* %29, i8** %1, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local %struct.lconv* @localeconv() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @human_readable(i64, i32, i32) #0 {
  %4 = icmp slt i64 %0, 1024
  br i1 %4, label %5, label %.preheader

.preheader:                                       ; preds = %3
  br label %11

; <label>:5:                                      ; preds = %3
  %6 = trunc i64 %0 to i32
  %7 = getelementptr [8 x i8], [8 x i8]* @human_readable.buf, i32 0, i32 0
  %8 = getelementptr [3 x i8], [3 x i8]* @.str.22.1599, i32 0, i32 0
  %9 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %7, i64 8, i8* %8, i32 %6) #8
  %10 = getelementptr [8 x i8], [8 x i8]* @human_readable.buf, i32 0, i32 0
  br label %31

; <label>:11:                                     ; preds = %.preheader, %27
  %.016 = phi i64 [ %28, %27 ], [ %0, %.preheader ]
  %.025 = phi i64 [ %29, %27 ], [ 0, %.preheader ]
  %12 = sdiv i64 %.016, 1024
  %13 = icmp slt i64 %12, 1024
  %14 = icmp eq i64 %.025, 5
  %or.cond = or i1 %13, %14
  br i1 %or.cond, label %15, label %27

; <label>:15:                                     ; preds = %11
  %.016.lcssa = phi i64 [ %.016, %11 ]
  %.025.lcssa = phi i64 [ %.025, %11 ]
  %16 = sitofp i64 %.016.lcssa to double
  %17 = fdiv double %16, 1.024000e+03
  %18 = sitofp i32 %1 to double
  %19 = fcmp olt double %17, %18
  %. = select i1 %19, i32 %2, i32 0
  %20 = getelementptr inbounds [6 x i8], [6 x i8]* @human_readable.powers, i64 0, i64 %.025.lcssa
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = getelementptr [8 x i8], [8 x i8]* @human_readable.buf, i32 0, i32 0
  %24 = getelementptr [7 x i8], [7 x i8]* @.str.23.1600, i32 0, i32 0
  %25 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %23, i64 8, i8* %24, i32 %., double %17, i32 %22) #8
  %26 = getelementptr [8 x i8], [8 x i8]* @human_readable.buf, i32 0, i32 0
  br label %31

; <label>:27:                                     ; preds = %11
  %28 = sdiv i64 %.016, 1024
  %29 = add nuw nsw i64 %.025, 1
  %30 = icmp ult i64 %29, 6
  br i1 %30, label %11, label %.loopexit

.loopexit:                                        ; preds = %27
  %.0.ph = phi i8* [ null, %27 ]
  br label %31

; <label>:31:                                     ; preds = %.loopexit, %15, %5
  %.0 = phi i8* [ %10, %5 ], [ %26, %15 ], [ %.0.ph, %.loopexit ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @numdigit(i64) #0 {
  %2 = icmp slt i64 %0, 0
  %3 = add nsw i32 1, 1
  %spec.select = select i1 %2, i32 %3, i32 1
  br label %4

; <label>:4:                                      ; preds = %4, %1
  %.1 = phi i32 [ %spec.select, %1 ], [ %7, %4 ]
  %.0 = phi i64 [ %0, %1 ], [ %5, %4 ]
  %5 = sdiv i64 %.0, 10
  %6 = icmp ne i64 %5, 0
  %7 = add nuw nsw i32 %.1, 1
  br i1 %6, label %4, label %8

; <label>:8:                                      ; preds = %4
  %.1.lcssa = phi i32 [ %.1, %4 ]
  ret i32 %.1.lcssa
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @number_to_static_string(i64) #7 {
  %2 = load i32, i32* @number_to_static_string.ringpos, align 4
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds [3 x [24 x i8]], [3 x [24 x i8]]* @number_to_static_string.ring, i64 0, i64 %3
  %5 = getelementptr inbounds [24 x i8], [24 x i8]* %4, i32 0, i32 0
  %6 = call i8* @number_to_string(i8* %5, i64 %0)
  %7 = load i32, i32* @number_to_static_string.ringpos, align 4
  %8 = add nsw i32 %7, 1
  %9 = srem i32 %8, 3
  store i32 %9, i32* @number_to_static_string.ringpos, align 4
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @convert_to_bits(i64) #0 {
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 155
  %3 = load i8, i8* %2, align 1
  %4 = trunc i8 %3 to i1
  %5 = mul nsw i64 %0, 8
  %.0 = select i1 %4, i64 %5, i64 %0
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @determine_screen_width() #0 {
  %1 = alloca %struct.winsize, align 2
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %0
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 78
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 1
  br i1 %8, label %18, label %9

; <label>:9:                                      ; preds = %5, %0
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = call i32 @fileno(%struct._IO_FILE* %10) #8
  %12 = call i32 (i32, i32, ...) @rpl_ioctl(i32 %11, i32 21523, %struct.winsize* %1)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %9
  %15 = getelementptr inbounds %struct.winsize, %struct.winsize* %1, i32 0, i32 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  br label %18

; <label>:18:                                     ; preds = %9, %5, %14
  %.0 = phi i32 [ %17, %14 ], [ 0, %5 ], [ 0, %9 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @random_number(i32) #0 {
  %2 = load i32, i32* @rnd_seeded, align 4
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %10, label %4

; <label>:4:                                      ; preds = %1
  %5 = call i64 @time(i64* null) #8
  %6 = call i32 @getpid() #8
  %7 = sext i32 %6 to i64
  %8 = xor i64 %5, %7
  %9 = trunc i64 %8 to i32
  call void @srandom(i32 %9) #8
  store i32 1, i32* @rnd_seeded, align 4
  br label %10

; <label>:10:                                     ; preds = %4, %1
  %11 = call i64 @random() #8
  %12 = sext i32 %0 to i64
  %13 = srem i64 %11, %12
  %14 = trunc i64 %13 to i32
  ret i32 %14
}

; Function Attrs: nounwind
declare dso_local i32 @getpid() #2

; Function Attrs: nounwind
declare dso_local void @srandom(i32) #2

; Function Attrs: nounwind
declare dso_local i64 @random() #2

; Function Attrs: noinline nounwind uwtable
define dso_local double @random_float() #0 {
  %1 = call i32 @random_number(i32 2147483647)
  %2 = sitofp i32 %1 to double
  %3 = fdiv double %2, 0x41DFFFFFFFC00000
  ret double %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @run_with_timeout(double, void (i8*)*, i8*) #0 {
  %4 = fcmp oeq double %0, 0.000000e+00
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  call void %1(i8* %2)
  br label %18

; <label>:6:                                      ; preds = %3
  %7 = call void (i32)* @signal(i32 14, void (i32)* @abort_run_with_timeout) #8
  %8 = getelementptr [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* @run_with_timeout_env, i32 0, i32 0
  %9 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %8, i32 1) #18
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %6
  %12 = call void (i32)* @signal(i32 14, void (i32)* null) #8
  br label %18

; <label>:13:                                     ; preds = %6
  call void @alarm_set(double %0)
  call void %1(i8* %2)
  %14 = call i32* @__errno_location() #15
  %15 = load i32, i32* %14, align 4
  call void @alarm_cancel()
  %16 = call void (i32)* @signal(i32 14, void (i32)* null) #8
  %17 = call i32* @__errno_location() #15
  store i32 %15, i32* %17, align 4
  br label %18

; <label>:18:                                     ; preds = %13, %11, %5
  %.0 = phi i1 [ false, %5 ], [ true, %11 ], [ false, %13 ]
  ret i1 %.0
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @abort_run_with_timeout(i32) #9 {
  %2 = getelementptr [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* @run_with_timeout_env, i32 0, i32 0
  call void @siglongjmp(%struct.__jmp_buf_tag* %2, i32 -1) #16
  unreachable
}

; Function Attrs: nounwind returns_twice
declare dso_local i32 @__sigsetjmp(%struct.__jmp_buf_tag*, i32) #10

; Function Attrs: noinline nounwind uwtable
define internal void @alarm_set(double) #0 {
  %2 = alloca %struct.itimerval, align 8
  %3 = bitcast %struct.itimerval* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 32, i1 false)
  %4 = fptosi double %0 to i64
  %5 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %2, i32 0, i32 1
  %6 = getelementptr inbounds %struct.timeval, %struct.timeval* %5, i32 0, i32 0
  store i64 %4, i64* %6, align 8
  %7 = fptosi double %0 to i64
  %8 = sitofp i64 %7 to double
  %9 = fsub double %0, %8
  %10 = fmul double 1.000000e+06, %9
  %11 = fptosi double %10 to i64
  %12 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %2, i32 0, i32 1
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %2, i32 0, i32 1
  %15 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %26

; <label>:18:                                     ; preds = %1
  %19 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %2, i32 0, i32 1
  %20 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %26

; <label>:23:                                     ; preds = %18
  %24 = getelementptr inbounds %struct.itimerval, %struct.itimerval* %2, i32 0, i32 1
  %25 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 1
  store i64 1, i64* %25, align 8
  br label %26

; <label>:26:                                     ; preds = %23, %18, %1
  %27 = call i32 @setitimer(i32 0, %struct.itimerval* %2, %struct.itimerval* null) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @alarm_cancel() #0 {
  %1 = alloca %struct.itimerval, align 8
  %2 = bitcast %struct.itimerval* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  %3 = call i32 @setitimer(i32 0, %struct.itimerval* %1, %struct.itimerval* null) #8
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @setitimer(i32, %struct.itimerval*, %struct.itimerval*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @siglongjmp(%struct.__jmp_buf_tag*, i32) #5

; Function Attrs: noinline nounwind uwtable
define dso_local void @xsleep(double) #0 {
  %2 = alloca %struct.timeval, align 8
  %3 = alloca %struct.timeval, align 8
  %4 = fptosi double %0 to i64
  %5 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 0
  store i64 %4, i64* %5, align 8
  %6 = fptosi double %0 to i64
  %7 = sitofp i64 %6 to double
  %8 = fsub double %0, %7
  %9 = fmul double 1.000000e+09, %8
  %10 = fptosi double %9 to i64
  %11 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 1
  store i64 %10, i64* %11, align 8
  %12 = call i32 @nanosleep(%struct.timeval* %2, %struct.timeval* %3)
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %1
  br label %14

; <label>:14:                                     ; preds = %.lr.ph, %18
  %15 = call i32* @__errno_location() #15
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 4
  br i1 %17, label %18, label %..critedge_crit_edge1

; <label>:18:                                     ; preds = %14
  %19 = bitcast %struct.timeval* %2 to i8*
  %20 = bitcast %struct.timeval* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false)
  %21 = call i32 @nanosleep(%struct.timeval* %2, %struct.timeval* %3)
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %14, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %18
  br label %.critedge

..critedge_crit_edge1:                            ; preds = %14
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge1, %..critedge_crit_edge, %1
  ret void
}

declare dso_local i32 @nanosleep(%struct.timeval*, %struct.timeval*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @base64_encode(i8*, i64, i8*) #0 {
  %4 = getelementptr inbounds i8, i8* %0, i64 %1
  %5 = getelementptr inbounds i8, i8* %4, i64 -2
  %6 = icmp ult i8* %0, %5
  br i1 %6, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.03 = phi i8* [ %48, %.lr.ph ], [ %2, %.lr.ph.preheader ]
  %.012 = phi i8* [ %49, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 394)
  %7 = load i8, i8* %.012, align 1
  %8 = zext i8 %7 to i32
  %9 = ashr i32 %8, 2
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %12, i8* %.03, align 1
  %14 = load i8, i8* %.012, align 1
  %15 = zext i8 %14 to i32
  %16 = and i32 %15, 3
  %17 = shl i32 %16, 4
  %18 = getelementptr inbounds i8, i8* %.012, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = ashr i32 %20, 4
  %22 = add nsw i32 %17, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %13, i32 1
  store i8 %25, i8* %13, align 1
  %27 = getelementptr inbounds i8, i8* %.012, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = and i32 %29, 15
  %31 = shl i32 %30, 2
  %32 = getelementptr inbounds i8, i8* %.012, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = ashr i32 %34, 6
  %36 = add nsw i32 %31, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %26, i32 1
  store i8 %39, i8* %26, align 1
  %41 = getelementptr inbounds i8, i8* %.012, i64 2
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = and i32 %43, 63
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %40, i32 1
  store i8 %47, i8* %40, align 1
  %49 = getelementptr inbounds i8, i8* %.012, i64 3
  %50 = icmp ult i8* %49, %5
  br i1 %50, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.01.lcssa.ph = phi i8* [ %49, %.lr.ph ]
  %.0.lcssa.ph = phi i8* [ %48, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.01.lcssa = phi i8* [ %0, %3 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %.0.lcssa = phi i8* [ %2, %3 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %51 = urem i64 %1, 3
  switch i64 %51, label %105 [
    i64 1, label %52
    i64 2, label %72
  ]

; <label>:52:                                     ; preds = %._crit_edge
  %53 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = ashr i32 %55, 2
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %.0.lcssa, i32 1
  store i8 %59, i8* %.0.lcssa, align 1
  %61 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = and i32 %63, 3
  %65 = shl i32 %64, 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %60, i32 1
  store i8 %68, i8* %60, align 1
  %70 = getelementptr inbounds i8, i8* %69, i32 1
  store i8 61, i8* %69, align 1
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8 61, i8* %70, align 1
  br label %105

; <label>:72:                                     ; preds = %._crit_edge
  %73 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = ashr i32 %75, 2
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %.0.lcssa, i32 1
  store i8 %79, i8* %.0.lcssa, align 1
  %81 = getelementptr inbounds i8, i8* %.01.lcssa, i64 0
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = and i32 %83, 3
  %85 = shl i32 %84, 4
  %86 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = ashr i32 %88, 4
  %90 = add nsw i32 %85, %89
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %80, i32 1
  store i8 %93, i8* %80, align 1
  %95 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = and i32 %97, 15
  %99 = shl i32 %98, 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [64 x i8], [64 x i8]* @base64_encode.tbl, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds i8, i8* %94, i32 1
  store i8 %102, i8* %94, align 1
  %104 = getelementptr inbounds i8, i8* %103, i32 1
  store i8 61, i8* %103, align 1
  br label %105

; <label>:105:                                    ; preds = %._crit_edge, %72, %52
  %.1 = phi i8* [ %.0.lcssa, %._crit_edge ], [ %104, %72 ], [ %71, %52 ]
  store i8 0, i8* %.1, align 1
  %106 = ptrtoint i8* %.1 to i64
  %107 = ptrtoint i8* %2 to i64
  %108 = sub i64 %106, %107
  ret i64 %108
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @base64_decode(i8*, i8*) #0 {
  br label %3

; <label>:3:                                      ; preds = %.backedge, %2
  %.02 = phi i8* [ %1, %2 ], [ %.02.be, %.backedge ]
  %.01 = phi i8* [ %0, %2 ], [ %.01.be, %.backedge ]
  call void @unroll_loop(i32 395)
  br label %4

; <label>:4:                                      ; preds = %4, %3
  %.1 = phi i8* [ %.01, %3 ], [ %5, %4 ]
  call void @unroll_loop(i32 396)
  %5 = getelementptr inbounds i8, i8* %.1, i32 1
  %6 = load i8, i8* %.1, align 1
  %7 = zext i8 %6 to i32
  %8 = call zeroext i1 @c_isspace(i32 %7)
  br i1 %8, label %4, label %9

; <label>:9:                                      ; preds = %4
  %.lcssa3 = phi i8* [ %5, %4 ]
  %.lcssa = phi i8 [ %6, %4 ]
  %10 = icmp ne i8 %.lcssa, 0
  br i1 %10, label %11, label %148

; <label>:11:                                     ; preds = %9
  %12 = zext i8 %.lcssa to i32
  %13 = icmp eq i32 %12, 61
  br i1 %13, label %.loopexit, label %14

; <label>:14:                                     ; preds = %11
  %15 = zext i8 %.lcssa to i32
  %16 = and i32 %15, 128
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %26

; <label>:18:                                     ; preds = %14
  %19 = zext i8 %.lcssa to i64
  %20 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp sge i32 %22, 0
  %24 = zext i8 %.lcssa to i32
  %25 = icmp eq i32 %24, 61
  %or.cond = or i1 %23, %25
  br i1 %or.cond, label %27, label %.loopexit

; <label>:26:                                     ; preds = %14
  %.old = zext i8 %.lcssa to i32
  %.old1 = icmp eq i32 %.old, 61
  br i1 %.old1, label %27, label %.loopexit

; <label>:27:                                     ; preds = %26, %18
  %28 = phi i8 [ %.lcssa, %26 ], [ %.lcssa, %18 ]
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  br label %33

; <label>:33:                                     ; preds = %33, %27
  %.2 = phi i8* [ %.lcssa3, %27 ], [ %34, %33 ]
  call void @unroll_loop(i32 397)
  %34 = getelementptr inbounds i8, i8* %.2, i32 1
  %35 = load i8, i8* %.2, align 1
  %36 = zext i8 %35 to i32
  %37 = call zeroext i1 @c_isspace(i32 %36)
  br i1 %37, label %33, label %38

; <label>:38:                                     ; preds = %33
  %.lcssa5 = phi i8* [ %34, %33 ]
  %.lcssa4 = phi i8 [ %35, %33 ]
  %39 = shl i32 %32, 18
  %40 = sext i32 %39 to i64
  %41 = icmp eq i8 %.lcssa4, 0
  %42 = zext i8 %.lcssa4 to i32
  %43 = icmp eq i32 %42, 61
  %or.cond13 = or i1 %41, %43
  br i1 %or.cond13, label %.loopexit, label %44

; <label>:44:                                     ; preds = %38
  %45 = zext i8 %.lcssa4 to i32
  %46 = and i32 %45, 128
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %56

; <label>:48:                                     ; preds = %44
  %49 = zext i8 %.lcssa4 to i64
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp sge i32 %52, 0
  %54 = zext i8 %.lcssa4 to i32
  %55 = icmp eq i32 %54, 61
  %or.cond4 = or i1 %53, %55
  br i1 %or.cond4, label %57, label %.loopexit

; <label>:56:                                     ; preds = %44
  %.old2 = zext i8 %.lcssa4 to i32
  %.old3 = icmp eq i32 %.old2, 61
  br i1 %.old3, label %57, label %.loopexit

; <label>:57:                                     ; preds = %56, %48
  %58 = phi i8 [ %.lcssa4, %56 ], [ %.lcssa4, %48 ]
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = shl i32 %62, 12
  %64 = sext i32 %63 to i64
  %65 = or i64 %40, %64
  %66 = lshr i64 %65, 16
  %67 = trunc i64 %66 to i8
  store i8 %67, i8* %.02, align 1
  br label %68

; <label>:68:                                     ; preds = %68, %57
  %.3 = phi i8* [ %.lcssa5, %57 ], [ %69, %68 ]
  call void @unroll_loop(i32 398)
  %69 = getelementptr inbounds i8, i8* %.3, i32 1
  %70 = load i8, i8* %.3, align 1
  %71 = zext i8 %70 to i32
  %72 = call zeroext i1 @c_isspace(i32 %71)
  br i1 %72, label %68, label %73

; <label>:73:                                     ; preds = %68
  %.lcssa7 = phi i8* [ %69, %68 ]
  %.lcssa6 = phi i8 [ %70, %68 ]
  %74 = getelementptr inbounds i8, i8* %.02, i32 1
  %75 = icmp ne i8 %.lcssa6, 0
  br i1 %75, label %76, label %.loopexit

; <label>:76:                                     ; preds = %73
  %77 = zext i8 %.lcssa6 to i32
  %78 = and i32 %77, 128
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %88

; <label>:80:                                     ; preds = %76
  %81 = zext i8 %.lcssa6 to i64
  %82 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = icmp sge i32 %84, 0
  %86 = zext i8 %.lcssa6 to i32
  %87 = icmp eq i32 %86, 61
  %or.cond7 = or i1 %85, %87
  br i1 %or.cond7, label %89, label %.loopexit

; <label>:88:                                     ; preds = %76
  %.old5 = zext i8 %.lcssa6 to i32
  %.old6 = icmp eq i32 %.old5, 61
  br i1 %.old6, label %89, label %.loopexit

; <label>:89:                                     ; preds = %88, %80
  %90 = phi i8 [ %.lcssa6, %88 ], [ %.lcssa6, %80 ]
  %91 = zext i8 %.lcssa6 to i32
  %92 = icmp eq i32 %91, 61
  br i1 %92, label %.preheader, label %102

.preheader:                                       ; preds = %89
  br label %93

; <label>:93:                                     ; preds = %.preheader, %93
  %.4 = phi i8* [ %94, %93 ], [ %.lcssa7, %.preheader ]
  call void @unroll_loop(i32 399)
  %94 = getelementptr inbounds i8, i8* %.4, i32 1
  %95 = load i8, i8* %.4, align 1
  %96 = zext i8 %95 to i32
  %97 = call zeroext i1 @c_isspace(i32 %96)
  br i1 %97, label %93, label %98

; <label>:98:                                     ; preds = %93
  %.lcssa11 = phi i8* [ %94, %93 ]
  %.lcssa10 = phi i8 [ %95, %93 ]
  %99 = icmp eq i8 %.lcssa10, 0
  %100 = zext i8 %.lcssa10 to i32
  %101 = icmp ne i32 %100, 61
  %or.cond16 = or i1 %99, %101
  br i1 %or.cond16, label %.loopexit, label %.backedge

; <label>:102:                                    ; preds = %89
  %103 = zext i8 %90 to i64
  %104 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = sext i8 %105 to i32
  %107 = shl i32 %106, 6
  %108 = sext i32 %107 to i64
  %109 = or i64 %65, %108
  %110 = lshr i64 %109, 8
  %111 = and i64 255, %110
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %74, align 1
  br label %113

; <label>:113:                                    ; preds = %113, %102
  %.5 = phi i8* [ %.lcssa7, %102 ], [ %114, %113 ]
  call void @unroll_loop(i32 400)
  %114 = getelementptr inbounds i8, i8* %.5, i32 1
  %115 = load i8, i8* %.5, align 1
  %116 = zext i8 %115 to i32
  %117 = call zeroext i1 @c_isspace(i32 %116)
  br i1 %117, label %113, label %118

; <label>:118:                                    ; preds = %113
  %.lcssa9 = phi i8* [ %114, %113 ]
  %.lcssa8 = phi i8 [ %115, %113 ]
  %119 = getelementptr inbounds i8, i8* %74, i32 1
  %120 = icmp ne i8 %.lcssa8, 0
  br i1 %120, label %121, label %.loopexit

; <label>:121:                                    ; preds = %118
  %122 = zext i8 %.lcssa8 to i32
  %123 = icmp eq i32 %122, 61
  br i1 %123, label %.backedge, label %124

; <label>:124:                                    ; preds = %121
  %125 = zext i8 %.lcssa8 to i32
  %126 = and i32 %125, 128
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %136

; <label>:128:                                    ; preds = %124
  %129 = zext i8 %.lcssa8 to i64
  %130 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i32
  %133 = icmp sge i32 %132, 0
  %134 = zext i8 %.lcssa8 to i32
  %135 = icmp eq i32 %134, 61
  %or.cond10 = or i1 %133, %135
  br i1 %or.cond10, label %137, label %.loopexit

; <label>:136:                                    ; preds = %124
  %.old8 = zext i8 %.lcssa8 to i32
  %.old9 = icmp eq i32 %.old8, 61
  br i1 %.old9, label %137, label %.loopexit

; <label>:137:                                    ; preds = %136, %128
  %138 = phi i8 [ %.lcssa8, %136 ], [ %.lcssa8, %128 ]
  %139 = zext i8 %138 to i64
  %140 = getelementptr inbounds [128 x i8], [128 x i8]* @base64_decode.base64_char_to_value, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = sext i32 %142 to i64
  %144 = or i64 %109, %143
  %145 = and i64 255, %144
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds i8, i8* %119, i32 1
  store i8 %146, i8* %119, align 1
  br label %.backedge

.backedge:                                        ; preds = %98, %121, %137
  %.02.be = phi i8* [ %147, %137 ], [ %119, %121 ], [ %74, %98 ]
  %.01.be = phi i8* [ %.lcssa9, %137 ], [ %.lcssa9, %121 ], [ %.lcssa11, %98 ]
  br label %3

; <label>:148:                                    ; preds = %9
  %.02.lcssa = phi i8* [ %.02, %9 ]
  %149 = ptrtoint i8* %.02.lcssa to i64
  %150 = ptrtoint i8* %1 to i64
  %151 = sub i64 %149, %150
  br label %152

.loopexit:                                        ; preds = %18, %26, %11, %48, %56, %73, %80, %88, %118, %128, %136, %38, %98
  %.0.ph = phi i64 [ -1, %136 ], [ -1, %128 ], [ -1, %118 ], [ -1, %98 ], [ -1, %88 ], [ -1, %80 ], [ -1, %73 ], [ -1, %56 ], [ -1, %48 ], [ -1, %38 ], [ -1, %11 ], [ -1, %26 ], [ -1, %18 ]
  br label %152

; <label>:152:                                    ; preds = %.loopexit, %148
  %.0 = phi i64 [ %151, %148 ], [ %.0.ph, %.loopexit ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @compile_pcre_regex(i8*) #0 {
  %2 = alloca i8*, align 8, !track !788
  %3 = alloca i32, align 4, !track !789
  %4 = call %struct.real_pcre* @pcre_compile(i8* %0, i32 0, i8** %2, i32* %3, i8* null), !track !790
  %5 = icmp ne %struct.real_pcre* %4, null
  br i1 %5, label %13, label %6

; <label>:6:                                      ; preds = %1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = getelementptr [35 x i8], [35 x i8]* @.str.24.1621, i32 0, i32 0
  %9 = call i8* @gettext(i8* %8) #8, !track !791
  %10 = call i8* @quote(i8* %0)
  %11 = load i8*, i8** %2, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %9, i8* %10, i8* %11)
  br label %15

; <label>:13:                                     ; preds = %1
  %14 = bitcast %struct.real_pcre* %4 to i8*
  br label %15

; <label>:15:                                     ; preds = %13, %6
  %.0 = phi i8* [ %14, %13 ], [ null, %6 ]
  ret i8* %.0
}

declare dso_local %struct.real_pcre* @pcre_compile(i8*, i32, i8**, i32*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @compile_posix_regex(i8*) #0 {
  %2 = call noalias i8* @xmalloc(i64 64)
  %3 = bitcast i8* %2 to %struct.re_pattern_buffer*
  %4 = call i32 @regcomp(%struct.re_pattern_buffer* %3, i8* %0, i32 9)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %16

; <label>:6:                                      ; preds = %1
  %7 = call i64 @regerror(i32 %4, %struct.re_pattern_buffer* %3, i8* null, i64 0)
  %8 = call noalias i8* @xmalloc(i64 %7)
  %9 = call i64 @regerror(i32 %4, %struct.re_pattern_buffer* %3, i8* %8, i64 %7)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = getelementptr [35 x i8], [35 x i8]* @.str.24.1621, i32 0, i32 0
  %12 = call i8* @gettext(i8* %11) #8, !track !792
  %13 = call i8* @quote(i8* %0)
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* %12, i8* %13, i8* %8)
  call void @free(i8* %8) #8
  %15 = bitcast %struct.re_pattern_buffer* %3 to i8*
  call void @free(i8* %15) #8
  br label %18

; <label>:16:                                     ; preds = %1
  %17 = bitcast %struct.re_pattern_buffer* %3 to i8*
  br label %18

; <label>:18:                                     ; preds = %16, %6
  %.0 = phi i8* [ null, %6 ], [ %17, %16 ]
  ret i8* %.0
}

declare dso_local i32 @regcomp(%struct.re_pattern_buffer*, i8*, i32) #3

declare dso_local i64 @regerror(i32, %struct.re_pattern_buffer*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @match_pcre_regex(i8*, i8*) #0 {
  %3 = alloca [30 x i32], align 16
  %4 = call i64 @strlen(i8* %1) #14
  %5 = bitcast i8* %0 to %struct.real_pcre*
  %6 = trunc i64 %4 to i32
  %7 = getelementptr inbounds [30 x i32], [30 x i32]* %3, i32 0, i32 0
  %8 = call i32 @pcre_exec(%struct.real_pcre* %5, %struct.pcre_extra* null, i8* %1, i32 %6, i32 0, i32 0, i32* %7, i32 30)
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %16, label %10

; <label>:10:                                     ; preds = %2
  %11 = icmp slt i32 %8, 0
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %10
  %13 = getelementptr [29 x i8], [29 x i8]* @.str.25.1626, i32 0, i32 0
  %14 = call i8* @gettext(i8* %13) #8
  %15 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %14, i8* %15, i32 %8)
  br label %16

; <label>:16:                                     ; preds = %10, %2, %12
  %.0 = phi i1 [ false, %12 ], [ false, %2 ], [ true, %10 ]
  ret i1 %.0
}

declare dso_local i32 @pcre_exec(%struct.real_pcre*, %struct.pcre_extra*, i8*, i32, i32, i32, i32*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @match_posix_regex(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.re_pattern_buffer*
  %4 = call i32 @regexec(%struct.re_pattern_buffer* %3, i8* %1, i64 0, %struct.anon.103* null, i32 0)
  switch i32 %4, label %6 [
    i32 1, label %19
    i32 0, label %5
  ]

; <label>:5:                                      ; preds = %2
  br label %19

; <label>:6:                                      ; preds = %2
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.re_pattern_buffer*
  %10 = call i64 @regerror(i32 %4, %struct.re_pattern_buffer* %9, i8* null, i64 0)
  %11 = call noalias i8* @xmalloc(i64 %10)
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %13 = load i8*, i8** %12, align 8
  %14 = bitcast i8* %13 to %struct.re_pattern_buffer*
  %15 = call i64 @regerror(i32 %4, %struct.re_pattern_buffer* %14, i8* %11, i64 %10)
  %16 = getelementptr [29 x i8], [29 x i8]* @.str.25.1626, i32 0, i32 0
  %17 = call i8* @gettext(i8* %16) #8
  %18 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %17, i8* %18, i32 %4)
  call void @free(i8* %11) #8
  br label %19

; <label>:19:                                     ; preds = %2, %6, %5
  %.0 = phi i1 [ true, %5 ], [ false, %6 ], [ false, %2 ]
  ret i1 %.0
}

declare dso_local i32 @regexec(%struct.re_pattern_buffer*, i8*, i64, %struct.anon.103*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @stable_sort(i8*, i64, i64, i32 (i8*, i8*)*) #0 {
  %5 = icmp ugt i64 %2, 1
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %4
  %7 = mul i64 %1, %2
  %8 = mul i64 %7, 8
  %9 = alloca i8, i64 %8, align 16, !track !793
  %10 = sub i64 %1, 1
  call void @mergesort_internal(i8* %0, i8* %9, i64 %2, i64 0, i64 %10, i32 (i8*, i8*)* %3)
  br label %11

; <label>:11:                                     ; preds = %6, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @mergesort_internal(i8*, i8*, i64, i64, i64, i32 (i8*, i8*)*) #0 {
  %7 = icmp ult i64 %3, %4
  br i1 %7, label %8, label %._crit_edge

; <label>:8:                                      ; preds = %6
  %9 = add i64 %4, %3
  %10 = udiv i64 %9, 2
  call void @mergesort_internal(i8* %0, i8* %1, i64 %2, i64 %3, i64 %10, i32 (i8*, i8*)* %5)
  %11 = add i64 %10, 1
  call void @mergesort_internal(i8* %0, i8* %1, i64 %2, i64 %11, i64 %4, i32 (i8*, i8*)* %5)
  %12 = add i64 %10, 1
  call void @unroll_loop(i32 401)
  %13 = icmp ule i64 %3, %10
  %14 = icmp ule i64 %12, %4
  %spec.select1 = select i1 %13, i1 %14, i1 false
  br i1 %spec.select1, label %.lr.ph7, label %36

.lr.ph7:                                          ; preds = %8
  br label %15

; <label>:15:                                     ; preds = %.lr.ph7, %32
  %.05 = phi i64 [ %3, %.lr.ph7 ], [ %33, %32 ]
  %.013 = phi i64 [ %12, %.lr.ph7 ], [ %.12, %32 ]
  %.042 = phi i64 [ %3, %.lr.ph7 ], [ %.15, %32 ]
  %16 = mul i64 %.042, %2
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = mul i64 %.013, %2
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  %20 = call i32 %5(i8* %17, i8* %19)
  %21 = icmp sle i32 %20, 0
  %22 = mul i64 %.05, %2
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  br i1 %21, label %24, label %28

; <label>:24:                                     ; preds = %15
  %25 = add i64 %.042, 1
  %26 = mul i64 %.042, %2
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %27, i64 %2, i1 false), !track !794
  br label %32

; <label>:28:                                     ; preds = %15
  %29 = add i64 %.013, 1
  %30 = mul i64 %.013, %2
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %31, i64 %2, i1 false), !track !795
  br label %32

; <label>:32:                                     ; preds = %24, %28
  %.15 = phi i64 [ %25, %24 ], [ %.042, %28 ]
  %.12 = phi i64 [ %.013, %24 ], [ %29, %28 ]
  %33 = add i64 %.05, 1
  call void @unroll_loop(i32 401)
  %34 = icmp ule i64 %.15, %10
  %35 = icmp ule i64 %.12, %4
  %spec.select = select i1 %34, i1 %35, i1 false
  br i1 %spec.select, label %15, label %._crit_edge8

._crit_edge8:                                     ; preds = %32
  %split = phi i64 [ %.15, %32 ]
  %split9 = phi i64 [ %.12, %32 ]
  %split10 = phi i64 [ %33, %32 ]
  br label %36

; <label>:36:                                     ; preds = %._crit_edge8, %8
  %.04.lcssa = phi i64 [ %split, %._crit_edge8 ], [ %3, %8 ]
  %.01.lcssa = phi i64 [ %split9, %._crit_edge8 ], [ %12, %8 ]
  %.0.lcssa = phi i64 [ %split10, %._crit_edge8 ], [ %3, %8 ]
  %37 = icmp ule i64 %.04.lcssa, %10
  br i1 %37, label %.lr.ph16, label %48

.lr.ph16:                                         ; preds = %36
  %38 = add i64 %.0.lcssa, %10
  br label %39

; <label>:39:                                     ; preds = %.lr.ph16, %39
  %.114 = phi i64 [ %.0.lcssa, %.lr.ph16 ], [ %40, %39 ]
  %.2613 = phi i64 [ %.04.lcssa, %.lr.ph16 ], [ %43, %39 ]
  call void @unroll_loop(i32 402)
  %40 = add i64 %.114, 1
  %41 = mul i64 %.114, %2
  %42 = getelementptr inbounds i8, i8* %1, i64 %41
  %43 = add nuw i64 %.2613, 1
  %44 = mul i64 %.2613, %2
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %45, i64 %2, i1 false), !track !796
  %exitcond = icmp ne i64 %43, %12
  br i1 %exitcond, label %39, label %._crit_edge17

._crit_edge17:                                    ; preds = %39
  %46 = add i64 %38, 1
  %47 = sub i64 %46, %.04.lcssa
  br label %48

; <label>:48:                                     ; preds = %._crit_edge17, %36
  %.1.lcssa = phi i64 [ %47, %._crit_edge17 ], [ %.0.lcssa, %36 ]
  %49 = icmp ule i64 %.01.lcssa, %4
  br i1 %49, label %.lr.ph11.preheader, label %._crit_edge12

.lr.ph11.preheader:                               ; preds = %48
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %.lr.ph11
  %.29 = phi i64 [ %50, %.lr.ph11 ], [ %.1.lcssa, %.lr.ph11.preheader ]
  %.238 = phi i64 [ %53, %.lr.ph11 ], [ %.01.lcssa, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 403)
  %50 = add i64 %.29, 1
  %51 = mul i64 %.29, %2
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = add i64 %.238, 1
  %54 = mul i64 %.238, %2
  %55 = getelementptr inbounds i8, i8* %0, i64 %54
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %55, i64 %2, i1 false), !track !797
  %56 = icmp ule i64 %53, %4
  br i1 %56, label %.lr.ph11, label %._crit_edge12.loopexit

._crit_edge12.loopexit:                           ; preds = %.lr.ph11
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %48
  %57 = icmp ule i64 %3, %4
  br i1 %57, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge12
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.37 = phi i64 [ %62, %.lr.ph ], [ %3, %.lr.ph.preheader ]
  call void @unroll_loop(i32 404)
  %58 = mul i64 %.37, %2
  %59 = getelementptr inbounds i8, i8* %0, i64 %58
  %60 = mul i64 %.37, %2
  %61 = getelementptr inbounds i8, i8* %1, i64 %60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %61, i64 %2, i1 false), !track !798
  %62 = add i64 %.37, 1
  %63 = icmp ule i64 %62, %4
  br i1 %63, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge12, %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @print_decimal(double) #0 {
  %2 = fcmp oge double %0, 0.000000e+00
  %3 = fsub double -0.000000e+00, %0
  %4 = select i1 %2, double %0, double %3
  %5 = fcmp oge double %4, 0x4023E66666666666
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %1
  %7 = getelementptr [32 x i8], [32 x i8]* @print_decimal.buf, i32 0, i32 0
  %8 = getelementptr [5 x i8], [5 x i8]* @.str.26.1633, i32 0, i32 0
  %9 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %7, i64 32, i8* %8, double %0) #8
  br label %31

; <label>:10:                                     ; preds = %1
  %11 = fcmp oge double %4, 0x3FEE666666666666
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %10
  %13 = getelementptr [32 x i8], [32 x i8]* @print_decimal.buf, i32 0, i32 0
  %14 = getelementptr [5 x i8], [5 x i8]* @.str.27.1634, i32 0, i32 0
  %15 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %13, i64 32, i8* %14, double %0) #8
  br label %31

; <label>:16:                                     ; preds = %10
  %17 = fcmp oge double %4, 1.000000e-03
  br i1 %17, label %18, label %22

; <label>:18:                                     ; preds = %16
  %19 = getelementptr [32 x i8], [32 x i8]* @print_decimal.buf, i32 0, i32 0
  %20 = getelementptr [5 x i8], [5 x i8]* @.str.28.1635, i32 0, i32 0
  %21 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %19, i64 32, i8* %20, double %0) #8
  br label %31

; <label>:22:                                     ; preds = %16
  %23 = fcmp oge double %4, 5.000000e-04
  %24 = getelementptr [32 x i8], [32 x i8]* @print_decimal.buf, i32 0, i32 0
  br i1 %23, label %25, label %28

; <label>:25:                                     ; preds = %22
  %26 = getelementptr [5 x i8], [5 x i8]* @.str.29.1636, i32 0, i32 0
  %27 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %24, i64 32, i8* %26, double %0) #8
  br label %31

; <label>:28:                                     ; preds = %22
  %29 = getelementptr [2 x i8], [2 x i8]* @.str.30.1637, i32 0, i32 0
  %30 = call i8* @strcpy(i8* %24, i8* %29) #8
  br label %31

; <label>:31:                                     ; preds = %12, %25, %28, %18, %6
  %32 = getelementptr [32 x i8], [32 x i8]* @print_decimal.buf, i32 0, i32 0
  ret i8* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @get_max_length(i8*, i32, i32) #0 {
  %4 = icmp ne i8* %0, null
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %3
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = call i8* @strdupdelim(i8* %0, i8* %7)
  br label %12

; <label>:9:                                      ; preds = %3
  %10 = getelementptr [1 x i8], [1 x i8]* @.str.31.1640, i32 0, i32 0
  %11 = call noalias i8* @strdup(i8* %10) #8
  br label %12

; <label>:12:                                     ; preds = %9, %5
  %13 = phi i8* [ %8, %5 ], [ %11, %9 ]
  %14 = getelementptr [2 x i8], [2 x i8]* @.str.33.1641, i32 0, i32 0
  call void @unroll_loop(i32 405)
  %15 = call i32* @__errno_location() #15
  store i32 0, i32* %15, align 4
  %16 = load i8, i8* %13, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp ne i32 %17, 0
  %19 = getelementptr [2 x i8], [2 x i8]* @.str.32.1595, i32 0, i32 0
  %20 = select i1 %18, i8* %13, i8* %19
  %21 = call i64 @pathconf(i8* %20, i32 %2) #8
  %22 = icmp slt i64 %21, 0
  br i1 %22, label %.lr.ph, label %50

.lr.ph:                                           ; preds = %12
  br label %23

; <label>:23:                                     ; preds = %.lr.ph, %43
  %24 = phi i64 [ %21, %.lr.ph ], [ %48, %43 ]
  %25 = call i32* @__errno_location() #15
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %28, label %._crit_edge

; <label>:28:                                     ; preds = %23
  %29 = load i8, i8* %13, align 1
  %30 = icmp ne i8 %29, 0
  br i1 %30, label %31, label %._crit_edge5

; <label>:31:                                     ; preds = %28
  %32 = call i32 @strcmp(i8* %13, i8* %14) #14
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %._crit_edge3, label %34

; <label>:34:                                     ; preds = %31
  %35 = call i8* @strrchr(i8* %13, i32 47) #14
  %36 = icmp eq i8* %35, %13
  br i1 %36, label %37, label %39

; <label>:37:                                     ; preds = %34
  %38 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 0, i8* %38, align 1
  br label %43

; <label>:39:                                     ; preds = %34
  %40 = icmp ne i8* %35, null
  br i1 %40, label %41, label %42

; <label>:41:                                     ; preds = %39
  store i8 0, i8* %35, align 1
  br label %43

; <label>:42:                                     ; preds = %39
  store i8 0, i8* %13, align 1
  br label %43

; <label>:43:                                     ; preds = %41, %42, %37
  call void @unroll_loop(i32 405)
  store i32 0, i32* %15, align 4
  %44 = load i8, i8* %13, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp ne i32 %45, 0
  %47 = select i1 %46, i8* %13, i8* %19
  %48 = call i64 @pathconf(i8* %47, i32 %2) #8
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %23, label %._crit_edge1

._crit_edge:                                      ; preds = %23
  %split = phi i64 [ %24, %23 ]
  br label %50

._crit_edge1:                                     ; preds = %43
  %split2 = phi i64 [ %48, %43 ]
  br label %50

._crit_edge3:                                     ; preds = %31
  %split4 = phi i64 [ %24, %31 ]
  br label %50

._crit_edge5:                                     ; preds = %28
  %split6 = phi i64 [ %24, %28 ]
  br label %50

; <label>:50:                                     ; preds = %._crit_edge5, %._crit_edge3, %._crit_edge1, %._crit_edge, %12
  %51 = phi i64 [ %split, %._crit_edge ], [ %split2, %._crit_edge1 ], [ %split4, %._crit_edge3 ], [ %split6, %._crit_edge5 ], [ %21, %12 ]
  call void @free(i8* %13) #8
  %52 = icmp slt i64 %51, 0
  br i1 %52, label %53, label %59

; <label>:53:                                     ; preds = %50
  %54 = call i32* @__errno_location() #15
  %55 = load i32, i32* %54, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %59

; <label>:57:                                     ; preds = %53
  %58 = getelementptr [9 x i8], [9 x i8]* @.str.34.1642, i32 0, i32 0
  call void @perror(i8* %58)
  br label %59

; <label>:59:                                     ; preds = %50, %53, %57
  %.0 = phi i64 [ 0, %57 ], [ 0, %53 ], [ %51, %50 ]
  ret i64 %.0
}

; Function Attrs: nounwind
declare dso_local i64 @pathconf(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @wg_hex_to_string(i8*, i8*, i64) #0 {
  %4 = icmp ult i64 0, %2
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i64 [ %13, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %5 = mul i64 2, %.01
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = getelementptr inbounds i8, i8* %1, i64 %.01
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = and i32 %9, 255
  %11 = getelementptr [5 x i8], [5 x i8]* @.str.35.1643, i32 0, i32 0
  %12 = call i32 (i8*, i8*, ...) @sprintf(i8* %6, i8* %11, i32 %10) #8
  %13 = add nuw i64 %.01, 1
  %exitcond = icmp ne i64 %13, %2
  br i1 %exitcond, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.0.lcssa.ph = phi i64 [ %2, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.0.lcssa = phi i64 [ 0, %3 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %14 = mul i64 2, %.0.lcssa
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  store i8 0, i8* %15, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @inform_exit_status(i32) #0 {
  %2 = call i32 @get_status_for_err(i32 %0)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %10

; <label>:4:                                      ; preds = %1
  %5 = load i32, i32* @final_exit_status, align 4
  %6 = icmp eq i32 %5, 0
  %7 = load i32, i32* @final_exit_status, align 4
  %8 = icmp slt i32 %2, %7
  %or.cond = or i1 %6, %8
  br i1 %or.cond, label %9, label %10

; <label>:9:                                      ; preds = %4
  store i32 %2, i32* @final_exit_status, align 4
  br label %10

; <label>:10:                                     ; preds = %4, %9, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_status_for_err(i32) #0 {
  switch i32 %0, label %8 [
    i32 25, label %9
    i32 19, label %2
    i32 20, label %2
    i32 21, label %2
    i32 44, label %2
    i32 47, label %2
    i32 49, label %2
    i32 38, label %2
    i32 0, label %3
    i32 1, label %3
    i32 2, label %3
    i32 3, label %3
    i32 4, label %3
    i32 5, label %3
    i32 14, label %3
    i32 28, label %3
    i32 36, label %3
    i32 37, label %3
    i32 46, label %4
    i32 8, label %5
    i32 9, label %5
    i32 42, label %5
    i32 22, label %6
    i32 24, label %6
    i32 50, label %6
    i32 27, label %7
    i32 10, label %7
    i32 11, label %7
    i32 12, label %7
    i32 13, label %7
    i32 15, label %7
    i32 16, label %7
    i32 17, label %7
    i32 29, label %7
    i32 33, label %7
    i32 39, label %7
    i32 40, label %7
    i32 41, label %7
    i32 23, label %7
  ]

; <label>:2:                                      ; preds = %1, %1, %1, %1, %1, %1, %1
  br label %9

; <label>:3:                                      ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %9

; <label>:4:                                      ; preds = %1
  br label %9

; <label>:5:                                      ; preds = %1, %1, %1
  br label %9

; <label>:6:                                      ; preds = %1, %1, %1
  br label %9

; <label>:7:                                      ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %9

; <label>:8:                                      ; preds = %1
  br label %9

; <label>:9:                                      ; preds = %1, %8, %7, %6, %5, %4, %3, %2
  %.0 = phi i32 [ 9, %8 ], [ 8, %7 ], [ 7, %6 ], [ 6, %5 ], [ 5, %4 ], [ 4, %3 ], [ 3, %2 ], [ 0, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_exit_status() #0 {
  %1 = load i32, i32* @final_exit_status, align 4
  %2 = icmp eq i32 %1, 9
  %3 = load i32, i32* @final_exit_status, align 4
  %4 = select i1 %2, i32 1, i32 %3
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @parse_charset(i8*) #7 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %28

; <label>:3:                                      ; preds = %1
  %4 = load i8, i8* %0, align 1
  %5 = icmp ne i8 %4, 0
  br i1 %5, label %6, label %28

; <label>:6:                                      ; preds = %3
  %7 = getelementptr [9 x i8], [9 x i8]* @.str.1664, i32 0, i32 0
  %8 = call i8* @c_strcasestr(i8* %0, i8* %7)
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %28

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds i8, i8* %8, i64 8
  br label %12

; <label>:12:                                     ; preds = %21, %10
  %.01 = phi i8* [ %11, %10 ], [ %23, %21 ]
  call void @unroll_loop(i32 406)
  %13 = load i8, i8* %.01, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %21

; <label>:16:                                     ; preds = %12
  %17 = load i8, i8* %.01, align 1
  %18 = sext i8 %17 to i32
  %19 = call zeroext i1 @c_isspace(i32 %18)
  %20 = xor i1 %19, true
  br label %21

; <label>:21:                                     ; preds = %16, %12
  %22 = phi i1 [ false, %12 ], [ %20, %16 ]
  %23 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %22, label %12, label %24

; <label>:24:                                     ; preds = %21
  %.01.lcssa = phi i8* [ %.01, %21 ]
  %25 = call i8* @strdupdelim(i8* %11, i8* %.01.lcssa)
  %26 = call zeroext i1 @check_encoding_name(i8* %25)
  br i1 %26, label %28, label %27

; <label>:27:                                     ; preds = %24
  call void @free(i8* %25) #8
  br label %28

; <label>:28:                                     ; preds = %24, %6, %1, %3, %27
  %.0 = phi i8* [ null, %27 ], [ null, %3 ], [ null, %1 ], [ null, %6 ], [ %25, %24 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @check_encoding_name(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

; <label>:4:                                      ; preds = %10
  %5 = load i8, i8* %14, align 1
  %6 = icmp ne i8 %5, 0
  br i1 %6, label %.lr.ph, label %._crit_edge.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %4
  %.012 = phi i8* [ %14, %4 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 407)
  %7 = load i8, i8* %.012, align 1
  %8 = sext i8 %7 to i32
  %9 = call zeroext i1 @c_isascii(i32 %8)
  br i1 %9, label %10, label %15

; <label>:10:                                     ; preds = %.lr.ph
  %11 = load i8, i8* %.012, align 1
  %12 = sext i8 %11 to i32
  %13 = call zeroext i1 @c_isspace(i32 %12)
  %14 = getelementptr inbounds i8, i8* %.012, i32 1
  br i1 %13, label %15, label %4

; <label>:15:                                     ; preds = %10, %.lr.ph
  %16 = getelementptr [25 x i8], [25 x i8]* @.str.1.1667, i32 0, i32 0
  %17 = call i8* @gettext(i8* %16) #8
  %18 = call i8* @quote(i8* %0)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %17, i8* %18)
  br label %._crit_edge

._crit_edge.loopexit:                             ; preds = %4
  %.0.ph = phi i1 [ true, %4 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1, %15
  %.0 = phi i1 [ false, %15 ], [ true, %1 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @find_locale() #7 {
  %1 = call i8* @stringprep_locale_charset()
  ret i8* %1
}

declare dso_local i8* @stringprep_locale_charset() #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @locale_to_utf8(i8*) #0 {
  %2 = alloca i8*, align 8, !track !799
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %4 = load i8*, i8** %3, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %11, label %6

; <label>:6:                                      ; preds = %1
  %7 = getelementptr [33 x i8], [33 x i8]* @.str.2.1670, i32 0, i32 0
  %8 = call i8* @gettext(i8* %7) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %8)
  %9 = call i8* @find_locale()
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  store i8* %9, i8** %10, align 8
  br label %11

; <label>:11:                                     ; preds = %6, %1
  %12 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %29

; <label>:15:                                     ; preds = %11
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr [6 x i8], [6 x i8]* @.str.3.1671, i32 0, i32 0
  %19 = call i32 @c_strcasecmp(i8* %17, i8* %18) #14
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %29

; <label>:21:                                     ; preds = %15
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @strlen(i8* %0) #14
  %25 = getelementptr [6 x i8], [6 x i8]* @.str.4.1672, i32 0, i32 0
  %26 = call zeroext i1 @do_conversion(i8* %25, i8* %23, i8* %0, i64 %24, i8** %2)
  %27 = load i8*, i8** %2, align 8
  br i1 %26, label %29, label %28

; <label>:28:                                     ; preds = %21
  call void @free(i8* %27) #8
  store i8* null, i8** %2, align 8
  br label %29

; <label>:29:                                     ; preds = %21, %11, %15, %28
  %.0 = phi i8* [ %0, %28 ], [ %0, %15 ], [ %0, %11 ], [ %27, %21 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @do_conversion(i8*, i8*, i8*, i64, i8**) #0 {
  %6 = alloca i64, align 8, !track !800
  %7 = alloca i64, align 8, !track !801
  %8 = alloca i8*, align 8, !track !802
  store i64 %3, i64* %6, align 8
  %9 = call i8* @iconv_open(i8* %0, i8* %1), !track !803
  %10 = icmp eq i8* %9, inttoptr (i64 -1 to i8*)
  br i1 %10, label %11, label %17

; <label>:11:                                     ; preds = %5
  %12 = getelementptr [45 x i8], [45 x i8]* @.str.11.1673, i32 0, i32 0
  %13 = call i8* @gettext(i8* %12) #8
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 151
  %15 = load i8*, i8** %14, align 8
  %16 = call i8* @quote(i8* %15)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %13, i8* %16)
  store i8* null, i8** %4, align 8
  br label %117

; <label>:17:                                     ; preds = %5
  %18 = load i64, i64* %6, align 8
  %19 = call i8* @xstrndup(i8* %2, i64 %18)
  store i8* %19, i8** %8, align 8
  %20 = load i8*, i8** %8, align 8
  call void @url_unescape_except_reserved(i8* %20)
  %21 = load i8*, i8** %8, align 8
  %22 = call i64 @strlen(i8* %21) #14
  store i64 %22, i64* %6, align 8
  %23 = load i64, i64* %6, align 8
  %24 = mul i64 %23, 2
  store i64 %24, i64* %7, align 8
  %25 = load i64, i64* %7, align 8
  %26 = add i64 %25, 1
  %27 = call noalias i8* @xmalloc(i64 %26)
  store i8* %27, i8** %4, align 8
  %28 = call i64 @iconv(i8* %9, i8** %8, i64* %6, i8** %4, i64* %7), !track !804
  %29 = icmp ne i64 %28, -1
  br i1 %29, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %17
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %101
  %.08.lcssa.ph = phi i64 [ %.19, %101 ]
  %.06.lcssa.ph = phi i64 [ %.17, %101 ]
  %.01.lcssa.ph = phi i8* [ %.1, %101 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %17
  %.08.lcssa = phi i64 [ %24, %17 ], [ %.08.lcssa.ph, %._crit_edge.loopexit ]
  %.06.lcssa = phi i64 [ 0, %17 ], [ %.06.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i8* [ %27, %17 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  store i8* %.01.lcssa, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %.01.lcssa, i64 %.08.lcssa
  %31 = load i64, i64* %7, align 8
  %32 = sub i64 0, %31
  %33 = getelementptr inbounds i8, i8* %30, i64 %32
  %34 = sub i64 0, %.06.lcssa
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  store i8 0, i8* %35, align 1
  call void @free(i8* %19) #8
  %36 = call i32 @iconv_close(i8* %9)
  %37 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %38 = load i8, i8* %37, align 1
  %39 = trunc i8 %38 to i1
  br i1 %39, label %40, label %117

; <label>:40:                                     ; preds = %._crit_edge
  %41 = call i8* @strchr(i8* %2, i32 64) #14, !track !805
  %42 = icmp ne i8* %41, null
  br i1 %42, label %50, label %43

; <label>:43:                                     ; preds = %40
  %44 = load i8*, i8** %4, align 8
  %45 = call i8* @strchr(i8* %44, i32 64) #14, !track !806
  %46 = icmp ne i8* %45, null
  br i1 %46, label %50, label %47

; <label>:47:                                     ; preds = %43
  %48 = load i8*, i8** %4, align 8
  %49 = getelementptr [34 x i8], [34 x i8]* @.str.12.1674, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %49, i8* %2, i8* %1, i8* %48, i8* %0)
  br label %117

; <label>:50:                                     ; preds = %43, %40
  %51 = getelementptr [54 x i8], [54 x i8]* @.str.13.1675, i32 0, i32 0
  %52 = getelementptr [14 x i8], [14 x i8]* @__func__.do_conversion, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %51, i8* %52)
  br label %117

.lr.ph:                                           ; preds = %.lr.ph.preheader, %101
  %.0117 = phi i8* [ %.1, %101 ], [ %27, %.lr.ph.preheader ]
  %.0216 = phi i32 [ %.13, %101 ], [ 0, %.lr.ph.preheader ]
  %.0415 = phi i32 [ %.15, %101 ], [ 0, %.lr.ph.preheader ]
  %.0614 = phi i64 [ %.17, %101 ], [ 0, %.lr.ph.preheader ]
  %.0813 = phi i64 [ %.19, %101 ], [ %24, %.lr.ph.preheader ]
  call void @unroll_loop(i32 408)
  %53 = call i32* @__errno_location() #15
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 22
  br i1 %55, label %60, label %56

; <label>:56:                                     ; preds = %.lr.ph
  %57 = call i32* @__errno_location() #15
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 84
  br i1 %59, label %60, label %78

; <label>:60:                                     ; preds = %56, %.lr.ph
  %61 = icmp ne i32 %.0415, 0
  br i1 %61, label %65, label %62

; <label>:62:                                     ; preds = %60
  %63 = getelementptr [54 x i8], [54 x i8]* @.str.14.1676, i32 0, i32 0
  %64 = call i8* @gettext(i8* %63) #8
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %64)
  br label %65

; <label>:65:                                     ; preds = %62, %60
  %66 = add nsw i32 %.0415, 1
  %67 = load i8*, i8** %8, align 8
  %68 = load i8, i8* %67, align 1
  %69 = load i8*, i8** %4, align 8
  store i8 %68, i8* %69, align 1
  %70 = load i8*, i8** %8, align 8
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %71, i8** %8, align 8
  %72 = load i64, i64* %6, align 8
  %73 = add i64 %72, -1
  store i64 %73, i64* %6, align 8
  %74 = load i8*, i8** %4, align 8
  %75 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %75, i8** %4, align 8
  %76 = load i64, i64* %7, align 8
  %77 = add i64 %76, -1
  store i64 %77, i64* %7, align 8
  br label %101

; <label>:78:                                     ; preds = %56
  %79 = call i32* @__errno_location() #15
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 7
  br i1 %81, label %82, label %92

; <label>:82:                                     ; preds = %78
  %83 = add nsw i32 %.0216, 1
  %84 = load i64, i64* %6, align 8
  %85 = mul i64 %84, 2
  %86 = add i64 %.0813, %85
  store i64 %86, i64* %7, align 8
  %87 = load i64, i64* %7, align 8
  %88 = add i64 %87, 1
  %89 = call noalias i8* @xmalloc(i64 %88)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %.0117, i64 %.0813, i1 false), !track !807
  call void @free(i8* %.0117) #8
  %90 = load i64, i64* %7, align 8
  %91 = getelementptr inbounds i8, i8* %89, i64 %.0813
  store i8* %91, i8** %4, align 8
  br label %101

; <label>:92:                                     ; preds = %78
  %93 = getelementptr [20 x i8], [20 x i8]* @.str.15.1677, i32 0, i32 0
  %94 = call i8* @gettext(i8* %93) #8
  %95 = call i32* @__errno_location() #15
  %96 = load i32, i32* %95, align 4
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %94, i32 %96)
  call void @free(i8* %19) #8
  %97 = call i32 @iconv_close(i8* %9)
  %98 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %99 = load i8, i8* %98, align 1
  %100 = trunc i8 %99 to i1
  br i1 %100, label %104, label %117

; <label>:101:                                    ; preds = %82, %65
  %.19 = phi i64 [ %.0813, %65 ], [ %90, %82 ]
  %.17 = phi i64 [ %.0614, %65 ], [ %.0813, %82 ]
  %.15 = phi i32 [ %66, %65 ], [ %.0415, %82 ]
  %.13 = phi i32 [ %.0216, %65 ], [ %83, %82 ]
  %.1 = phi i8* [ %.0117, %65 ], [ %89, %82 ]
  %102 = call i64 @iconv(i8* %9, i8** %8, i64* %6, i8** %4, i64* %7), !track !808
  %103 = icmp ne i64 %102, -1
  br i1 %103, label %._crit_edge.loopexit, label %.lr.ph

; <label>:104:                                    ; preds = %92
  %105 = call i8* @strchr(i8* %2, i32 64) #14, !track !809
  %106 = icmp ne i8* %105, null
  br i1 %106, label %114, label %107

; <label>:107:                                    ; preds = %104
  %108 = load i8*, i8** %4, align 8
  %109 = call i8* @strchr(i8* %108, i32 64) #14, !track !810
  %110 = icmp ne i8* %109, null
  br i1 %110, label %114, label %111

; <label>:111:                                    ; preds = %107
  %112 = load i8*, i8** %4, align 8
  %113 = getelementptr [34 x i8], [34 x i8]* @.str.12.1674, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %113, i8* %2, i8* %1, i8* %112, i8* %0)
  br label %117

; <label>:114:                                    ; preds = %107, %104
  %115 = getelementptr [54 x i8], [54 x i8]* @.str.13.1675, i32 0, i32 0
  %116 = getelementptr [14 x i8], [14 x i8]* @__func__.do_conversion, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %115, i8* %116)
  br label %117

; <label>:117:                                    ; preds = %92, %114, %111, %._crit_edge, %50, %47, %11
  %.0 = phi i1 [ false, %11 ], [ true, %47 ], [ true, %50 ], [ true, %._crit_edge ], [ false, %111 ], [ false, %114 ], [ false, %92 ]
  ret i1 %.0
}

declare dso_local i8* @iconv_open(i8*, i8*) #3

declare dso_local i64 @iconv(i8*, i8**, i64*, i8**, i64*) #3

declare dso_local i32 @iconv_close(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @idn_encode(%struct.iri*, i8*) #7 {
  %3 = alloca i8*, align 8, !track !811
  %4 = alloca i8*, align 8, !track !812
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 3
  %6 = load i8, i8* %5, align 8
  %7 = trunc i8 %6 to i1
  br i1 %7, label %10, label %8

; <label>:8:                                      ; preds = %2
  %9 = call zeroext i1 @remote_to_utf8(%struct.iri* %0, i8* %1, i8** %4)
  br i1 %9, label %10, label %40

; <label>:10:                                     ; preds = %8, %2
  %11 = load i8*, i8** %4, align 8
  %12 = icmp ne i8* %11, null
  %13 = load i8*, i8** %4, align 8
  %14 = select i1 %12, i8* %13, i8* %1
  %15 = call zeroext i1 @_utf8_is_valid(i8* %14)
  br i1 %15, label %25, label %16

; <label>:16:                                     ; preds = %10
  %17 = getelementptr [28 x i8], [28 x i8]* @.str.5.1682, i32 0, i32 0
  %18 = call i8* @gettext(i8* %17) #8
  %19 = load i8*, i8** %4, align 8
  %20 = icmp ne i8* %19, null
  %21 = load i8*, i8** %4, align 8
  %22 = select i1 %20, i8* %21, i8* %1
  %23 = call i8* @quote(i8* %22)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %18, i8* %23)
  %24 = load i8*, i8** %4, align 8
  call void @free(i8* %24) #8
  store i8* null, i8** %4, align 8
  br label %40

; <label>:25:                                     ; preds = %10
  %26 = load i8*, i8** %4, align 8
  %27 = icmp ne i8* %26, null
  %28 = load i8*, i8** %4, align 8
  %29 = select i1 %27, i8* %28, i8* %1
  %30 = call i32 @idna_to_ascii_8z(i8* %29, i8** %3, i32 2)
  %31 = load i8*, i8** %4, align 8
  call void @free(i8* %31) #8
  store i8* null, i8** %4, align 8
  %32 = icmp ne i32 %30, 0
  br i1 %32, label %33, label %38

; <label>:33:                                     ; preds = %25
  %34 = getelementptr [28 x i8], [28 x i8]* @.str.6.1683, i32 0, i32 0
  %35 = call i8* @gettext(i8* %34) #8
  %36 = call i8* @idna_strerror(i32 %30)
  %37 = call i8* @quote(i8* %36)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %35, i32 %30, i8* %37)
  br label %40

; <label>:38:                                     ; preds = %25
  %39 = load i8*, i8** %3, align 8
  br label %40

; <label>:40:                                     ; preds = %8, %38, %33, %16
  %.0 = phi i8* [ null, %33 ], [ %39, %38 ], [ null, %16 ], [ null, %8 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @remote_to_utf8(%struct.iri*, i8*, i8**) #0 {
  %4 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %._crit_edge

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr [6 x i8], [6 x i8]* @.str.4.1672, i32 0, i32 0
  %11 = call i32 @c_strcasecmp(i8* %9, i8* %10) #14
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %25, label %13

; <label>:13:                                     ; preds = %7
  %14 = load i8, i8* %1, align 1
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %13
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %21
  %.013 = phi i8* [ %22, %21 ], [ %1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 409)
  %16 = load i8, i8* %.013, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp sgt i32 %17, 127
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %.lr.ph
  %20 = call noalias i8* @strdup(i8* %1) #8, !track !813
  store i8* %20, i8** %2, align 8
  br label %._crit_edge

; <label>:21:                                     ; preds = %.lr.ph
  %22 = getelementptr inbounds i8, i8* %.013, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %.lr.ph, label %._crit_edge.loopexit

; <label>:25:                                     ; preds = %7
  %26 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i64 @strlen(i8* %1) #14
  %29 = getelementptr [6 x i8], [6 x i8]* @.str.4.1672, i32 0, i32 0
  %30 = call zeroext i1 @do_conversion(i8* %29, i8* %27, i8* %1, i64 %28, i8** %2)
  %spec.select = select i1 %30, i8 1, i8 0
  %31 = load i8*, i8** %2, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %39

; <label>:33:                                     ; preds = %25
  %34 = load i8*, i8** %2, align 8
  %35 = call i32 @strcmp(i8* %1, i8* %34) #14
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %39, label %37

; <label>:37:                                     ; preds = %33
  %38 = load i8*, i8** %2, align 8
  call void @free(i8* %38) #8
  store i8* null, i8** %2, align 8
  br label %._crit_edge

; <label>:39:                                     ; preds = %33, %25
  %40 = trunc i8 %spec.select to i1
  br label %._crit_edge

._crit_edge.loopexit:                             ; preds = %21
  %.0.ph = phi i1 [ false, %21 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %13, %3, %39, %37, %19
  %.0 = phi i1 [ %40, %39 ], [ false, %37 ], [ true, %19 ], [ false, %3 ], [ false, %13 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @_utf8_is_valid(i8*) #0 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %67
  %.012 = phi i8* [ %.3, %67 ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 410)
  %4 = load i8, i8* %.012, align 1
  %5 = zext i8 %4 to i32
  %6 = and i32 %5, 128
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %.lr.ph
  %9 = getelementptr inbounds i8, i8* %.012, i32 1
  br label %67

; <label>:10:                                     ; preds = %.lr.ph
  %11 = load i8, i8* %.012, align 1
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 224
  %14 = icmp eq i32 %13, 192
  br i1 %14, label %15, label %23

; <label>:15:                                     ; preds = %10
  %16 = getelementptr inbounds i8, i8* %.012, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 %18, 192
  %20 = icmp ne i32 %19, 128
  br i1 %20, label %._crit_edge.loopexit, label %21

; <label>:21:                                     ; preds = %15
  %22 = getelementptr inbounds i8, i8* %.012, i64 2
  br label %67

; <label>:23:                                     ; preds = %10
  %24 = load i8, i8* %.012, align 1
  %25 = zext i8 %24 to i32
  %26 = and i32 %25, 240
  %27 = icmp eq i32 %26, 224
  br i1 %27, label %28, label %42

; <label>:28:                                     ; preds = %23
  %29 = getelementptr inbounds i8, i8* %.012, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = and i32 %31, 192
  %33 = icmp ne i32 %32, 128
  br i1 %33, label %._crit_edge.loopexit, label %34

; <label>:34:                                     ; preds = %28
  %35 = getelementptr inbounds i8, i8* %.012, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = and i32 %37, 192
  %39 = icmp ne i32 %38, 128
  br i1 %39, label %._crit_edge.loopexit, label %40

; <label>:40:                                     ; preds = %34
  %41 = getelementptr inbounds i8, i8* %.012, i64 3
  br label %67

; <label>:42:                                     ; preds = %23
  %43 = load i8, i8* %.012, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %44, 248
  %46 = icmp eq i32 %45, 240
  br i1 %46, label %47, label %._crit_edge.loopexit

; <label>:47:                                     ; preds = %42
  %48 = getelementptr inbounds i8, i8* %.012, i64 1
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = and i32 %50, 192
  %52 = icmp ne i32 %51, 128
  br i1 %52, label %._crit_edge.loopexit, label %53

; <label>:53:                                     ; preds = %47
  %54 = getelementptr inbounds i8, i8* %.012, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = and i32 %56, 192
  %58 = icmp ne i32 %57, 128
  br i1 %58, label %._crit_edge.loopexit, label %59

; <label>:59:                                     ; preds = %53
  %60 = getelementptr inbounds i8, i8* %.012, i64 3
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = and i32 %62, 192
  %64 = icmp ne i32 %63, 128
  br i1 %64, label %._crit_edge.loopexit, label %65

; <label>:65:                                     ; preds = %59
  %66 = getelementptr inbounds i8, i8* %.012, i64 4
  br label %67

; <label>:67:                                     ; preds = %21, %65, %40, %8
  %.3 = phi i8* [ %9, %8 ], [ %22, %21 ], [ %41, %40 ], [ %66, %65 ]
  %68 = load i8, i8* %.3, align 1
  %69 = icmp ne i8 %68, 0
  br i1 %69, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %15, %34, %28, %59, %53, %47, %42, %67
  %.0.ph = phi i1 [ true, %67 ], [ false, %42 ], [ false, %47 ], [ false, %53 ], [ false, %59 ], [ false, %28 ], [ false, %34 ], [ false, %15 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.0 = phi i1 [ true, %1 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i1 %.0
}

declare dso_local i32 @idna_to_ascii_8z(i8*, i8**, i32) #3

declare dso_local i8* @idna_strerror(i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @idn_decode(i8*) #0 {
  %2 = alloca i8*, align 8, !track !814
  %3 = call i32 @idna_to_unicode_8zlz(i8* %0, i8** %2, i32 2)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %1
  %6 = getelementptr [28 x i8], [28 x i8]* @.str.7.1686, i32 0, i32 0
  %7 = call i8* @gettext(i8* %6) #8
  %8 = call i8* @idna_strerror(i32 %3)
  %9 = call i8* @quote(i8* %8)
  call void (i32, i8*, ...) @logprintf(i32 0, i8* %7, i32 %3, i8* %9)
  br label %12

; <label>:10:                                     ; preds = %1
  %11 = load i8*, i8** %2, align 8
  br label %12

; <label>:12:                                     ; preds = %10, %5
  %.0 = phi i8* [ null, %5 ], [ %11, %10 ]
  ret i8* %.0
}

declare dso_local i32 @idna_to_unicode_8zlz(i8*, i8**, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.iri* @iri_new() #7 {
  %1 = call noalias i8* @xmalloc(i64 32)
  %2 = bitcast i8* %1 to %struct.iri*
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  %4 = load i8*, i8** %3, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %0
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  %8 = load i8*, i8** %7, align 8
  %9 = call noalias i8* @xstrdup(i8* %8)
  br label %10

; <label>:10:                                     ; preds = %0, %6
  %11 = phi i8* [ %9, %6 ], [ null, %0 ]
  %12 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 0
  store i8* %11, i8** %12, align 8
  %13 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 1
  store i8* null, i8** %13, align 8
  %14 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 2
  store i8* null, i8** %14, align 8
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 149
  %16 = load i8, i8* %15, align 2
  %17 = trunc i8 %16 to i1
  %18 = getelementptr inbounds %struct.iri, %struct.iri* %2, i32 0, i32 3
  %19 = zext i1 %17 to i8
  store i8 %19, i8* %18, align 8
  ret %struct.iri* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.iri* @iri_dup(%struct.iri*) #7 {
  %2 = call noalias i8* @xmalloc(i64 32)
  %3 = bitcast i8* %2 to %struct.iri*
  %4 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = call noalias i8* @xstrdup(i8* %9)
  br label %11

; <label>:11:                                     ; preds = %1, %7
  %12 = phi i8* [ %10, %7 ], [ null, %1 ]
  %13 = getelementptr inbounds %struct.iri, %struct.iri* %3, i32 0, i32 0
  store i8* %12, i8** %13, align 8
  %14 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = call noalias i8* @xstrdup(i8* %19)
  br label %21

; <label>:21:                                     ; preds = %11, %17
  %22 = phi i8* [ %20, %17 ], [ null, %11 ]
  %23 = getelementptr inbounds %struct.iri, %struct.iri* %3, i32 0, i32 1
  store i8* %22, i8** %23, align 8
  %24 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 2
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %21
  %28 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = call noalias i8* @xstrdup(i8* %29)
  br label %31

; <label>:31:                                     ; preds = %21, %27
  %32 = phi i8* [ %30, %27 ], [ null, %21 ]
  %33 = getelementptr inbounds %struct.iri, %struct.iri* %3, i32 0, i32 2
  store i8* %32, i8** %33, align 8
  %34 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 3
  %35 = load i8, i8* %34, align 8
  %36 = trunc i8 %35 to i1
  %37 = getelementptr inbounds %struct.iri, %struct.iri* %3, i32 0, i32 3
  %38 = zext i1 %36 to i8
  store i8 %38, i8* %37, align 8
  ret %struct.iri* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @iri_free(%struct.iri*) #0 {
  %2 = icmp ne %struct.iri* %0, null
  br i1 %2, label %3, label %14

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void @free(i8* %5) #8
  %6 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  store i8* null, i8** %6, align 8
  %7 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  call void @free(i8* %8) #8
  %9 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  call void @free(i8* %11) #8
  %12 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 2
  store i8* null, i8** %12, align 8
  %13 = bitcast %struct.iri* %0 to i8*
  call void @free(i8* %13) #8
  br label %14

; <label>:14:                                     ; preds = %3, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_uri_encoding(%struct.iri*, i8*, i1 zeroext) #0 {
  %4 = zext i1 %2 to i8
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %6 = load i8, i8* %5, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %17

; <label>:8:                                      ; preds = %3
  %9 = icmp ne i8* %1, null
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %8
  %11 = call i8* @quote(i8* %1)
  br label %14

; <label>:12:                                     ; preds = %8
  %13 = getelementptr [5 x i8], [5 x i8]* @.str.9.1695, i32 0, i32 0
  br label %14

; <label>:14:                                     ; preds = %12, %10
  %15 = phi i8* [ %11, %10 ], [ %13, %12 ]
  %16 = getelementptr [19 x i8], [19 x i8]* @.str.8.1696, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %16, i8* %15)
  br label %17

; <label>:17:                                     ; preds = %3, %14
  %18 = trunc i8 %4 to i1
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %17
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  %21 = load i8*, i8** %20, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %45, label %23

; <label>:23:                                     ; preds = %19, %17
  %24 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %27, label %38

; <label>:27:                                     ; preds = %23
  %28 = icmp ne i8* %1, null
  br i1 %28, label %29, label %34

; <label>:29:                                     ; preds = %27
  %30 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @c_strcasecmp(i8* %31, i8* %1) #14
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %45

; <label>:34:                                     ; preds = %27, %29
  %35 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  call void @free(i8* %36) #8
  %37 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  store i8* null, i8** %37, align 8
  br label %38

; <label>:38:                                     ; preds = %34, %23
  %39 = icmp ne i8* %1, null
  br i1 %39, label %40, label %42

; <label>:40:                                     ; preds = %38
  %41 = call noalias i8* @xstrdup(i8* %1)
  br label %42

; <label>:42:                                     ; preds = %38, %40
  %43 = phi i8* [ %41, %40 ], [ null, %38 ]
  %44 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 0
  store i8* %43, i8** %44, align 8
  br label %45

; <label>:45:                                     ; preds = %29, %19, %42
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_content_encoding(%struct.iri*, i8*) #0 {
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %4 = load i8, i8* %3, align 1
  %5 = trunc i8 %4 to i1
  br i1 %5, label %6, label %15

; <label>:6:                                      ; preds = %2
  %7 = icmp ne i8* %1, null
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %6
  %9 = call i8* @quote(i8* %1)
  br label %12

; <label>:10:                                     ; preds = %6
  %11 = getelementptr [5 x i8], [5 x i8]* @.str.9.1695, i32 0, i32 0
  br label %12

; <label>:12:                                     ; preds = %10, %8
  %13 = phi i8* [ %9, %8 ], [ %11, %10 ]
  %14 = getelementptr [27 x i8], [27 x i8]* @.str.10.1699, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %14, i8* %13)
  br label %15

; <label>:15:                                     ; preds = %2, %12
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 150
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ne i8* %17, null
  br i1 %18, label %41, label %19

; <label>:19:                                     ; preds = %15
  %20 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %34

; <label>:23:                                     ; preds = %19
  %24 = icmp ne i8* %1, null
  br i1 %24, label %25, label %30

; <label>:25:                                     ; preds = %23
  %26 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @c_strcasecmp(i8* %27, i8* %1) #14
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %41

; <label>:30:                                     ; preds = %23, %25
  %31 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  call void @free(i8* %32) #8
  %33 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  store i8* null, i8** %33, align 8
  br label %34

; <label>:34:                                     ; preds = %30, %19
  %35 = icmp ne i8* %1, null
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %34
  %37 = call noalias i8* @xstrdup(i8* %1)
  br label %38

; <label>:38:                                     ; preds = %34, %36
  %39 = phi i8* [ %37, %36 ], [ null, %34 ]
  %40 = getelementptr inbounds %struct.iri, %struct.iri* %0, i32 0, i32 1
  store i8* %39, i8** %40, align 8
  br label %41

; <label>:41:                                     ; preds = %25, %15, %38
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @skey_response(i32, i8*, i8*) #7 {
  %4 = alloca [8 x i8], align 1, !track !815
  %5 = alloca %struct.md5_ctx, align 4, !track !816
  %6 = alloca [4 x i32], align 16, !track !817
  call void @md5_init_ctx(%struct.md5_ctx* %5) #8
  %7 = call i64 @strlen(i8* %1) #14
  call void @md5_process_bytes(i8* %1, i64 %7, %struct.md5_ctx* %5) #8
  %8 = call i64 @strlen(i8* %2) #14
  call void @md5_process_bytes(i8* %2, i64 %8, %struct.md5_ctx* %5) #8
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i32 0, i32 0
  %10 = bitcast i32* %9 to i8*
  %11 = call i8* @md5_finish_ctx(%struct.md5_ctx* %5, i8* %10) #8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %15 = load i32, i32* %14, align 16
  %16 = xor i32 %15, %13
  store i32 %16, i32* %14, align 16
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = xor i32 %20, %18
  store i32 %21, i32* %19, align 4
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i32 0, i32 0
  %24 = bitcast i32* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 16 %24, i64 8, i1 false), !track !818
  %25 = add nsw i32 %0, -1
  %26 = icmp sgt i32 %0, 0
  br i1 %26, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %27 = phi i32 [ %45, %.lr.ph ], [ %25, %.lr.ph.preheader ]
  call void @unroll_loop(i32 411)
  call void @md5_init_ctx(%struct.md5_ctx* %5) #8
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  call void @md5_process_bytes(i8* %28, i64 8, %struct.md5_ctx* %5) #8
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i32 0, i32 0
  %30 = bitcast i32* %29 to i8*
  %31 = call i8* @md5_finish_ctx(%struct.md5_ctx* %5, i8* %30) #8
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %35 = load i32, i32* %34, align 16
  %36 = xor i32 %35, %33
  store i32 %36, i32* %34, align 16
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %40 = load i32, i32* %39, align 4
  %41 = xor i32 %40, %38
  store i32 %41, i32* %39, align 4
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i32 0, i32 0
  %44 = bitcast i32* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 16 %44, i64 8, i1 false), !track !819
  %45 = add nsw i32 %27, -1
  %46 = icmp sgt i32 %27, 0
  br i1 %46, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  %48 = getelementptr [30 x i8], [30 x i8]* @skey_response.english, i32 0, i32 0
  %49 = call i8* @btoe(i8* %48, i8* %47)
  ret i8* %49
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @btoe(i8*, i8*) #7 {
  %3 = alloca [10 x i8], align 1, !track !820
  store i8 0, i8* %0, align 1
  %4 = bitcast [10 x i8]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 10, i1 false)
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %1, i64 8, i1 false), !track !821
  br label %6

; <label>:6:                                      ; preds = %2, %6
  %.03 = phi i32 [ 0, %2 ], [ %10, %6 ]
  %.012 = phi i32 [ 0, %2 ], [ %9, %6 ]
  call void @unroll_loop(i32 412)
  %7 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %8 = call i32 @extract(i8* %7, i32 %.03, i32 2)
  %9 = add i32 %.012, %8
  %10 = add nuw nsw i32 %.03, 2
  %11 = icmp ult i32 %10, 64
  br i1 %11, label %6, label %12

; <label>:12:                                     ; preds = %6
  %.01.lcssa = phi i32 [ %9, %6 ]
  %13 = trunc i32 %.01.lcssa to i8
  %14 = sext i8 %13 to i32
  %15 = shl i32 %14, 6
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 8
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %19 = call i32 @extract(i8* %18, i32 0, i32 11)
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [2048 x [4 x i8]], [2048 x [4 x i8]]* @Wp, i64 0, i64 %20
  %22 = getelementptr inbounds [4 x i8], [4 x i8]* %21, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 4 %22, i64 4, i1 false), !track !822
  %23 = getelementptr inbounds i8, i8* %0, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = icmp ne i8 %24, 0
  br i1 %25, label %26, label %37

; <label>:26:                                     ; preds = %12
  %27 = getelementptr inbounds i8, i8* %0, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds i8, i8* %0, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = icmp ne i8 %32, 0
  %34 = xor i1 %33, true
  %35 = zext i1 %34 to i64
  %36 = select i1 %34, i32 3, i32 4
  br label %37

; <label>:37:                                     ; preds = %30, %26, %12
  %38 = phi i32 [ 1, %12 ], [ %36, %30 ], [ 2, %26 ]
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %0, i64 %39
  %41 = getelementptr inbounds i8, i8* %40, i32 1
  store i8 32, i8* %40, align 1
  %42 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %43 = call i32 @extract(i8* %42, i32 11, i32 11)
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [2048 x [4 x i8]], [2048 x [4 x i8]]* @Wp, i64 0, i64 %44
  %46 = getelementptr inbounds [4 x i8], [4 x i8]* %45, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 4 %46, i64 4, i1 false), !track !823
  %47 = getelementptr inbounds i8, i8* %41, i64 1
  %48 = load i8, i8* %47, align 1
  %49 = icmp ne i8 %48, 0
  br i1 %49, label %50, label %61

; <label>:50:                                     ; preds = %37
  %51 = getelementptr inbounds i8, i8* %41, i64 2
  %52 = load i8, i8* %51, align 1
  %53 = icmp ne i8 %52, 0
  br i1 %53, label %54, label %61

; <label>:54:                                     ; preds = %50
  %55 = getelementptr inbounds i8, i8* %41, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = icmp ne i8 %56, 0
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i64
  %60 = select i1 %58, i32 3, i32 4
  br label %61

; <label>:61:                                     ; preds = %54, %50, %37
  %62 = phi i32 [ 1, %37 ], [ %60, %54 ], [ 2, %50 ]
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %41, i64 %63
  %65 = getelementptr inbounds i8, i8* %64, i32 1
  store i8 32, i8* %64, align 1
  %66 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %67 = call i32 @extract(i8* %66, i32 22, i32 11)
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [2048 x [4 x i8]], [2048 x [4 x i8]]* @Wp, i64 0, i64 %68
  %70 = getelementptr inbounds [4 x i8], [4 x i8]* %69, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 4 %70, i64 4, i1 false), !track !824
  %71 = getelementptr inbounds i8, i8* %65, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = icmp ne i8 %72, 0
  br i1 %73, label %74, label %85

; <label>:74:                                     ; preds = %61
  %75 = getelementptr inbounds i8, i8* %65, i64 2
  %76 = load i8, i8* %75, align 1
  %77 = icmp ne i8 %76, 0
  br i1 %77, label %78, label %85

; <label>:78:                                     ; preds = %74
  %79 = getelementptr inbounds i8, i8* %65, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = icmp ne i8 %80, 0
  %82 = xor i1 %81, true
  %83 = zext i1 %82 to i64
  %84 = select i1 %82, i32 3, i32 4
  br label %85

; <label>:85:                                     ; preds = %78, %74, %61
  %86 = phi i32 [ 1, %61 ], [ %84, %78 ], [ 2, %74 ]
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %65, i64 %87
  %89 = getelementptr inbounds i8, i8* %88, i32 1
  store i8 32, i8* %88, align 1
  %90 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %91 = call i32 @extract(i8* %90, i32 33, i32 11)
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [2048 x [4 x i8]], [2048 x [4 x i8]]* @Wp, i64 0, i64 %92
  %94 = getelementptr inbounds [4 x i8], [4 x i8]* %93, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 4 %94, i64 4, i1 false), !track !825
  %95 = getelementptr inbounds i8, i8* %89, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = icmp ne i8 %96, 0
  br i1 %97, label %98, label %109

; <label>:98:                                     ; preds = %85
  %99 = getelementptr inbounds i8, i8* %89, i64 2
  %100 = load i8, i8* %99, align 1
  %101 = icmp ne i8 %100, 0
  br i1 %101, label %102, label %109

; <label>:102:                                    ; preds = %98
  %103 = getelementptr inbounds i8, i8* %89, i64 3
  %104 = load i8, i8* %103, align 1
  %105 = icmp ne i8 %104, 0
  %106 = xor i1 %105, true
  %107 = zext i1 %106 to i64
  %108 = select i1 %106, i32 3, i32 4
  br label %109

; <label>:109:                                    ; preds = %102, %98, %85
  %110 = phi i32 [ 1, %85 ], [ %108, %102 ], [ 2, %98 ]
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %89, i64 %111
  %113 = getelementptr inbounds i8, i8* %112, i32 1
  store i8 32, i8* %112, align 1
  %114 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %115 = call i32 @extract(i8* %114, i32 44, i32 11)
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [2048 x [4 x i8]], [2048 x [4 x i8]]* @Wp, i64 0, i64 %116
  %118 = getelementptr inbounds [4 x i8], [4 x i8]* %117, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 4 %118, i64 4, i1 false), !track !826
  %119 = getelementptr inbounds i8, i8* %113, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = icmp ne i8 %120, 0
  br i1 %121, label %122, label %133

; <label>:122:                                    ; preds = %109
  %123 = getelementptr inbounds i8, i8* %113, i64 2
  %124 = load i8, i8* %123, align 1
  %125 = icmp ne i8 %124, 0
  br i1 %125, label %126, label %133

; <label>:126:                                    ; preds = %122
  %127 = getelementptr inbounds i8, i8* %113, i64 3
  %128 = load i8, i8* %127, align 1
  %129 = icmp ne i8 %128, 0
  %130 = xor i1 %129, true
  %131 = zext i1 %130 to i64
  %132 = select i1 %130, i32 3, i32 4
  br label %133

; <label>:133:                                    ; preds = %126, %122, %109
  %134 = phi i32 [ 1, %109 ], [ %132, %126 ], [ 2, %122 ]
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %113, i64 %135
  %137 = getelementptr inbounds i8, i8* %136, i32 1
  store i8 32, i8* %136, align 1
  %138 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %139 = call i32 @extract(i8* %138, i32 55, i32 11)
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds [2048 x [4 x i8]], [2048 x [4 x i8]]* @Wp, i64 0, i64 %140
  %142 = getelementptr inbounds [4 x i8], [4 x i8]* %141, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 4 %142, i64 4, i1 false), !track !827
  %143 = getelementptr inbounds i8, i8* %137, i64 4
  store i8 0, i8* %143, align 1
  %144 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %145 = load i8, i8* %144, align 1
  %146 = trunc i8 %145 to i1
  br i1 %146, label %147, label %150

; <label>:147:                                    ; preds = %133
  %148 = call i8* @quote(i8* %0)
  %149 = getelementptr [19 x i8], [19 x i8]* @.str.1711, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %149, i8* %148)
  br label %150

; <label>:150:                                    ; preds = %133, %147
  ret i8* %0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @extract(i8*, i32, i32) #0 {
  %4 = sdiv i32 %1, 8
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = sdiv i32 %1, 8
  %9 = add nsw i32 %8, 1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = sdiv i32 %1, 8
  %14 = add nsw i32 %13, 2
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %7 to i32
  %19 = shl i32 %18, 8
  %20 = zext i8 %12 to i32
  %21 = or i32 %19, %20
  %22 = shl i32 %21, 8
  %23 = zext i8 %17 to i32
  %24 = or i32 %22, %23
  %25 = srem i32 %1, 8
  %26 = add nsw i32 %2, %25
  %27 = sub nsw i32 24, %26
  %28 = lshr i32 %24, %27
  %29 = sub nsw i32 16, %2
  %30 = ashr i32 65535, %29
  %31 = and i32 %28, %30
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @ssl_init() #0 {
  %1 = alloca %struct.stat, align 8
  %2 = load i8, i8* @ssl_init.ssl_initialized, align 1
  %3 = trunc i8 %2 to i1
  br i1 %3, label %199, label %4

; <label>:4:                                      ; preds = %0
  %5 = call i32 @gnutls_global_init()
  %6 = call i32 @gnutls_certificate_allocate_credentials(%struct.gnutls_certificate_credentials_st** @credentials)
  %7 = load %struct.gnutls_certificate_credentials_st*, %struct.gnutls_certificate_credentials_st** @credentials, align 8
  call void @gnutls_certificate_set_verify_flags(%struct.gnutls_certificate_credentials_st* %7, i32 0)
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 119
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %14, label %11

; <label>:11:                                     ; preds = %4
  %12 = load %struct.gnutls_certificate_credentials_st*, %struct.gnutls_certificate_credentials_st** @credentials, align 8
  %13 = call i32 @gnutls_certificate_set_x509_system_trust(%struct.gnutls_certificate_credentials_st* %12)
  br label %14

; <label>:14:                                     ; preds = %11, %4
  %.01 = phi i32 [ -1, %4 ], [ %13, %11 ]
  %15 = icmp sle i32 %.01, 0
  br i1 %15, label %16, label %92

; <label>:16:                                     ; preds = %14
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 119
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ne i8* %18, null
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 119
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr [15 x i8], [15 x i8]* @.str.1714, i32 0, i32 0
  %23 = select i1 %19, i8* %21, i8* %22
  %24 = call %struct.__dirstream* @opendir(i8* %23)
  %25 = icmp eq %struct.__dirstream* %24, null
  br i1 %25, label %26, label %41

; <label>:26:                                     ; preds = %16
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 119
  %28 = load i8*, i8** %27, align 8
  %29 = icmp ne i8* %28, null
  br i1 %29, label %30, label %92

; <label>:30:                                     ; preds = %26
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 119
  %32 = load i8*, i8** %31, align 8
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %92

; <label>:36:                                     ; preds = %30
  %37 = getelementptr [34 x i8], [34 x i8]* @.str.1.1715, i32 0, i32 0
  %38 = call i8* @gettext(i8* %37) #8
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 119
  %40 = load i8*, i8** %39, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %38, i8* %40)
  br label %92

; <label>:41:                                     ; preds = %16
  %42 = call %struct.hash_table* @hash_table_new(i32 196, i64 (i8*)* null, i32 (i8*, i8*)* null)
  %43 = call i64 @strlen(i8* %23) #14
  %44 = call %struct.dirent* @readdir(%struct.__dirstream* %24)
  %45 = icmp ne %struct.dirent* %44, null
  br i1 %45, label %.lr.ph.preheader, label %.outer._crit_edge

.lr.ph.preheader:                                 ; preds = %41
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.outer
  %46 = phi %struct.dirent* [ %89, %.outer ], [ %44, %.lr.ph.preheader ]
  %.1.ph5 = phi i32 [ %.2, %.outer ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 389)
  br label %47

; <label>:47:                                     ; preds = %.lr.ph, %.backedge
  %48 = phi %struct.dirent* [ %46, %.lr.ph ], [ %61, %.backedge ]
  call void @unroll_loop(i32 413)
  %49 = getelementptr inbounds %struct.dirent, %struct.dirent* %48, i32 0, i32 4
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* %49, i32 0, i32 0
  %51 = call i64 @strlen(i8* %50) #14
  %52 = add i64 %43, %51
  %53 = add i64 %52, 2
  %54 = alloca i8, i64 %53, align 16
  %55 = getelementptr inbounds %struct.dirent, %struct.dirent* %48, i32 0, i32 4
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %55, i32 0, i32 0
  %57 = getelementptr [6 x i8], [6 x i8]* @.str.2.1716, i32 0, i32 0
  %58 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %54, i64 %53, i8* %57, i8* %23, i8* %56) #8
  %59 = call i32 @stat(i8* %54, %struct.stat* %1) #8
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %.backedge, label %63

.backedge:                                        ; preds = %68, %63, %47
  %61 = call %struct.dirent* @readdir(%struct.__dirstream* %24)
  %62 = icmp ne %struct.dirent* %61, null
  br i1 %62, label %47, label %.outer._crit_edge.loopexit

; <label>:63:                                     ; preds = %47
  %64 = getelementptr inbounds %struct.stat, %struct.stat* %1, i32 0, i32 3
  %65 = load i32, i32* %64, align 8
  %66 = and i32 %65, 61440
  %67 = icmp eq i32 %66, 32768
  br i1 %67, label %68, label %.backedge

; <label>:68:                                     ; preds = %63
  %69 = getelementptr inbounds %struct.stat, %struct.stat* %1, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = inttoptr i64 %70 to i8*
  %72 = call i32 @hash_table_contains(%struct.hash_table* %42, i8* %71)
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %.backedge, label %74

; <label>:74:                                     ; preds = %68
  %.lcssa = phi i8* [ %54, %68 ]
  %75 = getelementptr inbounds %struct.stat, %struct.stat* %1, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = inttoptr i64 %76 to i8*
  call void @hash_table_put(%struct.hash_table* %42, i8* %77, i8* null)
  %78 = load %struct.gnutls_certificate_credentials_st*, %struct.gnutls_certificate_credentials_st** @credentials, align 8
  %79 = call i32 @gnutls_certificate_set_x509_trust_file(%struct.gnutls_certificate_credentials_st* %78, i8* %.lcssa, i32 1)
  %80 = icmp sle i32 %79, 0
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %74
  %82 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %83 = load i8, i8* %82, align 1
  %84 = trunc i8 %83 to i1
  br i1 %84, label %85, label %.outer

; <label>:85:                                     ; preds = %81
  %86 = getelementptr [40 x i8], [40 x i8]* @.str.3.1717, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %86, i8* %.lcssa, i32 %79)
  br label %.outer

; <label>:87:                                     ; preds = %74
  %88 = add nsw i32 %.1.ph5, %79
  br label %.outer

.outer:                                           ; preds = %85, %81, %87
  %.2 = phi i32 [ %88, %87 ], [ %.1.ph5, %81 ], [ %.1.ph5, %85 ]
  %89 = call %struct.dirent* @readdir(%struct.__dirstream* %24)
  %90 = icmp ne %struct.dirent* %89, null
  br i1 %90, label %.lr.ph, label %.outer._crit_edge.loopexit1

.outer._crit_edge.loopexit:                       ; preds = %.backedge
  %.1.lcssa.ph = phi i32 [ %.1.ph5, %.backedge ]
  br label %.outer._crit_edge

.outer._crit_edge.loopexit1:                      ; preds = %.outer
  %.1.lcssa.ph2 = phi i32 [ %.2, %.outer ]
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer._crit_edge.loopexit1, %.outer._crit_edge.loopexit, %41
  %.1.lcssa = phi i32 [ 0, %41 ], [ %.1.lcssa.ph, %.outer._crit_edge.loopexit ], [ %.1.lcssa.ph2, %.outer._crit_edge.loopexit1 ]
  call void @hash_table_destroy(%struct.hash_table* %42)
  %91 = call i32 @closedir(%struct.__dirstream* %24)
  br label %92

; <label>:92:                                     ; preds = %.outer._crit_edge, %36, %30, %26, %14
  %.4 = phi i32 [ %.01, %14 ], [ %.1.lcssa, %.outer._crit_edge ], [ %.01, %36 ], [ %.01, %30 ], [ %.01, %26 ]
  %93 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 120
  %94 = load i8*, i8** %93, align 8
  %95 = icmp ne i8* %94, null
  br i1 %95, label %96, label %113

; <label>:96:                                     ; preds = %92
  %97 = load %struct.gnutls_certificate_credentials_st*, %struct.gnutls_certificate_credentials_st** @credentials, align 8
  %98 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 120
  %99 = load i8*, i8** %98, align 8
  %100 = call i32 @gnutls_certificate_set_x509_trust_file(%struct.gnutls_certificate_credentials_st* %97, i8* %99, i32 1)
  %101 = icmp sle i32 %100, 0
  br i1 %101, label %102, label %107

; <label>:102:                                    ; preds = %96
  %103 = getelementptr [38 x i8], [38 x i8]* @.str.4.1718, i32 0, i32 0
  %104 = call i8* @gettext(i8* %103) #8
  %105 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 120
  %106 = load i8*, i8** %105, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %104, i8* %106, i32 %100)
  br label %113

; <label>:107:                                    ; preds = %96
  %108 = add nsw i32 0, %100
  %109 = getelementptr [28 x i8], [28 x i8]* @.str.5.1719, i32 0, i32 0
  %110 = call i8* @gettext(i8* %109) #8
  %111 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 120
  %112 = load i8*, i8** %111, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %110, i8* %112)
  br label %113

; <label>:113:                                    ; preds = %102, %107, %92
  %.6 = phi i32 [ %.4, %92 ], [ 0, %102 ], [ %108, %107 ]
  %114 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 121
  %115 = load i8*, i8** %114, align 8
  %116 = icmp ne i8* %115, null
  br i1 %116, label %117, label %133

; <label>:117:                                    ; preds = %113
  %118 = load %struct.gnutls_certificate_credentials_st*, %struct.gnutls_certificate_credentials_st** @credentials, align 8
  %119 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 121
  %120 = load i8*, i8** %119, align 8
  %121 = call i32 @gnutls_certificate_set_x509_crl_file(%struct.gnutls_certificate_credentials_st* %118, i8* %120, i32 1)
  %122 = icmp sle i32 %121, 0
  br i1 %122, label %123, label %128

; <label>:123:                                    ; preds = %117
  %124 = getelementptr [43 x i8], [43 x i8]* @.str.6.1720, i32 0, i32 0
  %125 = call i8* @gettext(i8* %124) #8
  %126 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 121
  %127 = load i8*, i8** %126, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %125, i8* %127, i32 %121)
  br label %199

; <label>:128:                                    ; preds = %117
  %129 = getelementptr [22 x i8], [22 x i8]* @.str.7.1721, i32 0, i32 0
  %130 = call i8* @gettext(i8* %129) #8
  %131 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 121
  %132 = load i8*, i8** %131, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %130, i8* %132)
  br label %133

; <label>:133:                                    ; preds = %113, %128
  %134 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %135 = load i8, i8* %134, align 1
  %136 = trunc i8 %135 to i1
  br i1 %136, label %137, label %139

; <label>:137:                                    ; preds = %133
  %138 = getelementptr [25 x i8], [25 x i8]* @.str.8.1722, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %138, i32 %.6)
  br label %139

; <label>:139:                                    ; preds = %133, %137
  %140 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 115
  %141 = load i8*, i8** %140, align 8
  %142 = icmp ne i8* %141, null
  br i1 %142, label %143, label %155

; <label>:143:                                    ; preds = %139
  %144 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 116
  %145 = load i8*, i8** %144, align 8
  %146 = icmp ne i8* %145, null
  br i1 %146, label %155, label %147

; <label>:147:                                    ; preds = %143
  %148 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 115
  %149 = load i8*, i8** %148, align 8
  %150 = call noalias i8* @xstrdup(i8* %149)
  %151 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 116
  store i8* %150, i8** %151, align 8
  %152 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 117
  %153 = load i32, i32* %152, align 8
  %154 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 118
  store i32 %153, i32* %154, align 4
  br label %155

; <label>:155:                                    ; preds = %147, %143, %139
  %156 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 115
  %157 = load i8*, i8** %156, align 8
  %158 = icmp ne i8* %157, null
  br i1 %158, label %171, label %159

; <label>:159:                                    ; preds = %155
  %160 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 116
  %161 = load i8*, i8** %160, align 8
  %162 = icmp ne i8* %161, null
  br i1 %162, label %163, label %171

; <label>:163:                                    ; preds = %159
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 116
  %165 = load i8*, i8** %164, align 8
  %166 = call noalias i8* @xstrdup(i8* %165)
  %167 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 115
  store i8* %166, i8** %167, align 8
  %168 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 118
  %169 = load i32, i32* %168, align 4
  %170 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 117
  store i32 %169, i32* %170, align 8
  br label %171

; <label>:171:                                    ; preds = %163, %159, %155
  %172 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 115
  %173 = load i8*, i8** %172, align 8
  %174 = icmp ne i8* %173, null
  br i1 %174, label %175, label %198

; <label>:175:                                    ; preds = %171
  %176 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 116
  %177 = load i8*, i8** %176, align 8
  %178 = icmp ne i8* %177, null
  br i1 %178, label %179, label %198

; <label>:179:                                    ; preds = %175
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 118
  %181 = load i32, i32* %180, align 4
  %182 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 117
  %183 = load i32, i32* %182, align 8
  %184 = icmp ne i32 %181, %183
  br i1 %184, label %185, label %188

; <label>:185:                                    ; preds = %179
  %186 = getelementptr [69 x i8], [69 x i8]* @.str.9.1723, i32 0, i32 0
  %187 = call i8* @gettext(i8* %186) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %187)
  br label %188

; <label>:188:                                    ; preds = %185, %179
  %189 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 118
  %190 = load i32, i32* %189, align 4
  %191 = call i32 @key_type_to_gnutls_type(i32 %190)
  %192 = load %struct.gnutls_certificate_credentials_st*, %struct.gnutls_certificate_credentials_st** @credentials, align 8
  %193 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 115
  %194 = load i8*, i8** %193, align 8
  %195 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 116
  %196 = load i8*, i8** %195, align 8
  %197 = call i32 @gnutls_certificate_set_x509_key_file(%struct.gnutls_certificate_credentials_st* %192, i8* %194, i8* %196, i32 %191)
  br label %198

; <label>:198:                                    ; preds = %188, %175, %171
  store i8 1, i8* @ssl_init.ssl_initialized, align 1
  br label %199

; <label>:199:                                    ; preds = %0, %198, %123
  %.0 = phi i1 [ false, %123 ], [ true, %198 ], [ true, %0 ]
  ret i1 %.0
}

declare dso_local i32 @gnutls_global_init() #3

declare dso_local i32 @gnutls_certificate_allocate_credentials(%struct.gnutls_certificate_credentials_st**) #3

declare dso_local void @gnutls_certificate_set_verify_flags(%struct.gnutls_certificate_credentials_st*, i32) #3

declare dso_local i32 @gnutls_certificate_set_x509_system_trust(%struct.gnutls_certificate_credentials_st*) #3

declare dso_local %struct.__dirstream* @opendir(i8*) #3

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

declare dso_local i32 @gnutls_certificate_set_x509_trust_file(%struct.gnutls_certificate_credentials_st*, i8*, i32) #3

declare dso_local i32 @closedir(%struct.__dirstream*) #3

declare dso_local i32 @gnutls_certificate_set_x509_crl_file(%struct.gnutls_certificate_credentials_st*, i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @key_type_to_gnutls_type(i32) #0 {
  switch i32 %0, label %3 [
    i32 0, label %4
    i32 1, label %2
  ]

; <label>:2:                                      ; preds = %1
  br label %4

; <label>:3:                                      ; preds = %1
  call void @abort() #16
  unreachable

; <label>:4:                                      ; preds = %1, %2
  %.0 = phi i32 [ 0, %2 ], [ 1, %1 ]
  ret i32 %.0
}

declare dso_local i32 @gnutls_certificate_set_x509_key_file(%struct.gnutls_certificate_credentials_st*, i8*, i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @ssl_connect_wget(i32, i8*, i32*) #0 {
  %4 = alloca %struct.gnutls_session_int*, align 8, !track !828
  %5 = call i32 @gnutls_init(%struct.gnutls_session_int** %4, i32 2)
  %6 = call zeroext i1 @is_valid_ip_address(i8* %1)
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %3
  %8 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %9 = call i64 @strlen(i8* %1) #14
  %10 = call i32 @gnutls_server_name_set(%struct.gnutls_session_int* %8, i32 1, i8* %1, i64 %9)
  br label %11

; <label>:11:                                     ; preds = %7, %3
  %12 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %13 = call i32 @gnutls_set_default_priority(%struct.gnutls_session_int* %12)
  %14 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %15 = load %struct.gnutls_certificate_credentials_st*, %struct.gnutls_certificate_credentials_st** @credentials, align 8
  %16 = bitcast %struct.gnutls_certificate_credentials_st* %15 to i8*
  %17 = call i32 @gnutls_credentials_set(%struct.gnutls_session_int* %14, i32 1, i8* %16)
  %18 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %19 = sext i32 %0 to i64
  %20 = inttoptr i64 %19 to i8*
  call void @gnutls_transport_set_ptr(%struct.gnutls_session_int* %18, i8* %20)
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 113
  %22 = load i32, i32* %21, align 8
  switch i32 %22, label %52 [
    i32 0, label %23
    i32 1, label %27
    i32 2, label %27
    i32 3, label %31
    i32 4, label %35
    i32 5, label %39
    i32 6, label %43
  ]

; <label>:23:                                     ; preds = %11
  %24 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %25 = getelementptr [28 x i8], [28 x i8]* @.str.10.1726, i32 0, i32 0
  %26 = call i32 @gnutls_priority_set_direct(%struct.gnutls_session_int* %24, i8* %25, i8** null)
  br label %59

; <label>:27:                                     ; preds = %11, %11
  %28 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %29 = getelementptr [34 x i8], [34 x i8]* @.str.11.1727, i32 0, i32 0
  %30 = call i32 @gnutls_priority_set_direct(%struct.gnutls_session_int* %28, i8* %29, i8** null)
  br label %59

; <label>:31:                                     ; preds = %11
  %32 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %33 = getelementptr [20 x i8], [20 x i8]* @.str.12.1728, i32 0, i32 0
  %34 = call i32 @gnutls_priority_set_direct(%struct.gnutls_session_int* %32, i8* %33, i8** null)
  br label %59

; <label>:35:                                     ; preds = %11
  %36 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %37 = getelementptr [33 x i8], [33 x i8]* @.str.13.1729, i32 0, i32 0
  %38 = call i32 @gnutls_priority_set_direct(%struct.gnutls_session_int* %36, i8* %37, i8** null)
  br label %59

; <label>:39:                                     ; preds = %11
  %40 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %41 = getelementptr [46 x i8], [46 x i8]* @.str.14.1730, i32 0, i32 0
  %42 = call i32 @gnutls_priority_set_direct(%struct.gnutls_session_int* %40, i8* %41, i8** null)
  br label %59

; <label>:43:                                     ; preds = %11
  %44 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %45 = getelementptr [17 x i8], [17 x i8]* @.str.15.1731, i32 0, i32 0
  %46 = call i32 @gnutls_priority_set_direct(%struct.gnutls_session_int* %44, i8* %45, i8** null)
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %59

; <label>:48:                                     ; preds = %43
  %49 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %50 = getelementptr [25 x i8], [25 x i8]* @.str.16.1732, i32 0, i32 0
  %51 = call i32 @gnutls_priority_set_direct(%struct.gnutls_session_int* %49, i8* %50, i8** null)
  br label %59

; <label>:52:                                     ; preds = %11
  %53 = getelementptr [57 x i8], [57 x i8]* @.str.17.1733, i32 0, i32 0
  %54 = call i8* @gettext(i8* %53) #8
  %55 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 113
  %56 = load i32, i32* %55, align 8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %54, i32 %56)
  %57 = getelementptr [46 x i8], [46 x i8]* @.str.18.1734, i32 0, i32 0
  %58 = call i8* @gettext(i8* %57) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %58)
  call void @abort() #16
  unreachable

; <label>:59:                                     ; preds = %43, %48, %39, %35, %31, %27, %23
  %.1 = phi i32 [ %42, %39 ], [ %38, %35 ], [ %34, %31 ], [ %30, %27 ], [ %26, %23 ], [ %51, %48 ], [ %46, %43 ]
  %60 = icmp slt i32 %.1, 0
  br i1 %60, label %61, label %65

; <label>:61:                                     ; preds = %59
  %62 = call i8* @gnutls_strerror(i32 %.1) #15
  %63 = getelementptr [12 x i8], [12 x i8]* @.str.19.1735, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %63, i8* %62)
  %64 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  call void @gnutls_deinit(%struct.gnutls_session_int* %64)
  br label %148

; <label>:65:                                     ; preds = %59
  %66 = icmp ne i32* %2, null
  br i1 %66, label %67, label %119

; <label>:67:                                     ; preds = %65
  %68 = load i32, i32* %2, align 4
  %69 = call i8* @fd_transport_context(i32 %68)
  %70 = bitcast i8* %69 to %struct.wgnutls_transport_context*
  %71 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %72 = call i32 @gnutls_session_is_resumed(%struct.gnutls_session_int* %71)
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %117, label %74

; <label>:74:                                     ; preds = %67
  %magicptr = ptrtoint %struct.wgnutls_transport_context* %70 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %115, label %75

; <label>:75:                                     ; preds = %74
  %76 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %70, i32 0, i32 1
  %77 = load %struct.hsts_kh*, %struct.hsts_kh** %76, align 8
  %78 = icmp ne %struct.hsts_kh* %77, null
  br i1 %78, label %79, label %92

; <label>:79:                                     ; preds = %75
  %80 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %81 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %70, i32 0, i32 1
  %82 = load %struct.hsts_kh*, %struct.hsts_kh** %81, align 8
  %83 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %82, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %70, i32 0, i32 1
  %86 = load %struct.hsts_kh*, %struct.hsts_kh** %85, align 8
  %87 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %86, i32 0, i32 1
  %88 = load i32, i32* %87, align 8
  %89 = zext i32 %88 to i64
  %90 = call i32 @gnutls_session_set_data(%struct.gnutls_session_int* %80, i8* %84, i64 %89)
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %119

; <label>:92:                                     ; preds = %79, %75
  %93 = icmp ne %struct.wgnutls_transport_context* %70, null
  br i1 %93, label %94, label %115

; <label>:94:                                     ; preds = %92
  %95 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %70, i32 0, i32 1
  %96 = load %struct.hsts_kh*, %struct.hsts_kh** %95, align 8
  %97 = icmp ne %struct.hsts_kh* %96, null
  br i1 %97, label %98, label %115

; <label>:98:                                     ; preds = %94
  %99 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %70, i32 0, i32 1
  %100 = load %struct.hsts_kh*, %struct.hsts_kh** %99, align 8
  %101 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %100, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = icmp ne i8* %102, null
  br i1 %103, label %104, label %110

; <label>:104:                                    ; preds = %98
  %105 = load void (i8*)*, void (i8*)** @gnutls_free, align 8
  %106 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %70, i32 0, i32 1
  %107 = load %struct.hsts_kh*, %struct.hsts_kh** %106, align 8
  %108 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %107, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  call void %105(i8* %109)
  br label %110

; <label>:110:                                    ; preds = %104, %98
  %111 = load void (i8*)*, void (i8*)** @gnutls_free, align 8
  %112 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %70, i32 0, i32 1
  %113 = load %struct.hsts_kh*, %struct.hsts_kh** %112, align 8
  %114 = bitcast %struct.hsts_kh* %113 to i8*
  call void %111(i8* %114)
  br label %115

; <label>:115:                                    ; preds = %74, %110, %94, %92
  %116 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  call void @gnutls_deinit(%struct.gnutls_session_int* %116)
  br label %148

; <label>:117:                                    ; preds = %67
  %118 = getelementptr [51 x i8], [51 x i8]* @.str.20.1736, i32 0, i32 0
  call void @logputs(i32 3, i8* %118)
  br label %119

; <label>:119:                                    ; preds = %117, %79, %65
  %120 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %121 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 84
  %122 = load double, double* %121, align 8
  %123 = call i32 @_do_handshake(%struct.gnutls_session_int* %120, i32 %0, double %122)
  %124 = icmp slt i32 %123, 0
  br i1 %124, label %125, label %127

; <label>:125:                                    ; preds = %119
  %126 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  call void @gnutls_deinit(%struct.gnutls_session_int* %126)
  br label %148

; <label>:127:                                    ; preds = %119
  %128 = call noalias i8* @xcalloc(i64 1, i64 536)
  %129 = bitcast i8* %128 to %struct.wgnutls_transport_context*
  %130 = call noalias i8* @xcalloc(i64 1, i64 16)
  %131 = bitcast i8* %130 to %struct.hsts_kh*
  %132 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %129, i32 0, i32 1
  store %struct.hsts_kh* %131, %struct.hsts_kh** %132, align 8
  %133 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %134 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %129, i32 0, i32 0
  store %struct.gnutls_session_int* %133, %struct.gnutls_session_int** %134, align 8
  %135 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %4, align 8
  %136 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %129, i32 0, i32 1
  %137 = load %struct.hsts_kh*, %struct.hsts_kh** %136, align 8
  %138 = call i32 @gnutls_session_get_data2(%struct.gnutls_session_int* %135, %struct.hsts_kh* %137)
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %146

; <label>:140:                                    ; preds = %127
  %141 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %129, i32 0, i32 1
  %142 = load %struct.hsts_kh*, %struct.hsts_kh** %141, align 8
  %143 = bitcast %struct.hsts_kh* %142 to i8*
  call void @free(i8* %143) #8
  %144 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %129, i32 0, i32 1
  store %struct.hsts_kh* null, %struct.hsts_kh** %144, align 8
  %145 = getelementptr [56 x i8], [56 x i8]* @.str.21.1737, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %145, i32 %0)
  br label %146

; <label>:146:                                    ; preds = %140, %127
  %147 = bitcast %struct.wgnutls_transport_context* %129 to i8*
  call void @fd_register_transport(i32 %0, %struct.transport_implementation* @wgnutls_transport, i8* %147)
  br label %148

; <label>:148:                                    ; preds = %146, %125, %115, %61
  %.0 = phi i1 [ false, %61 ], [ false, %125 ], [ true, %146 ], [ false, %115 ]
  ret i1 %.0
}

declare dso_local i32 @gnutls_init(%struct.gnutls_session_int**, i32) #3

declare dso_local i32 @gnutls_server_name_set(%struct.gnutls_session_int*, i32, i8*, i64) #3

declare dso_local i32 @gnutls_set_default_priority(%struct.gnutls_session_int*) #3

declare dso_local i32 @gnutls_credentials_set(%struct.gnutls_session_int*, i32, i8*) #3

declare dso_local void @gnutls_transport_set_ptr(%struct.gnutls_session_int*, i8*) #3

declare dso_local i32 @gnutls_priority_set_direct(%struct.gnutls_session_int*, i8*, i8**) #3

; Function Attrs: nounwind readnone
declare dso_local i8* @gnutls_strerror(i32) #4

declare dso_local void @gnutls_deinit(%struct.gnutls_session_int*) #3

declare dso_local i32 @gnutls_session_is_resumed(%struct.gnutls_session_int*) #3

declare dso_local i32 @gnutls_session_set_data(%struct.gnutls_session_int*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @_do_handshake(%struct.gnutls_session_int*, i32, double) #0 {
  %4 = fcmp une double %2, 0.000000e+00
  br i1 %4, label %5, label %12

; <label>:5:                                      ; preds = %3
  %6 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %1, i32 3, i32 0)
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %52, label %8

; <label>:8:                                      ; preds = %5
  %9 = or i32 %6, 2048
  %10 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %1, i32 4, i32 %9)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %52, label %12

; <label>:12:                                     ; preds = %8, %3
  %.02 = phi i32 [ 0, %3 ], [ %6, %8 ]
  br label %13

; <label>:13:                                     ; preds = %44, %12
  call void @unroll_loop(i32 414)
  %14 = call i32 @gnutls_handshake(%struct.gnutls_session_int* %0)
  %15 = fcmp une double %2, 0.000000e+00
  %16 = icmp eq i32 %14, -28
  %or.cond = and i1 %15, %16
  br i1 %or.cond, label %17, label %30

; <label>:17:                                     ; preds = %13
  %18 = call i32 @gnutls_record_get_direction(%struct.gnutls_session_int* %0)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %17
  %21 = call i32 @select_fd(i32 %1, double %2, i32 2)
  br label %24

; <label>:22:                                     ; preds = %17
  %23 = call i32 @select_fd(i32 %1, double %2, i32 1)
  br label %24

; <label>:24:                                     ; preds = %22, %20
  %.01 = phi i32 [ %21, %20 ], [ %23, %22 ]
  %25 = icmp sle i32 %.01, 0
  br i1 %25, label %26, label %42

; <label>:26:                                     ; preds = %24
  %.01.lcssa = phi i32 [ %.01, %24 ]
  %27 = icmp eq i32 %.01.lcssa, 0
  br i1 %27, label %28, label %.loopexit

; <label>:28:                                     ; preds = %26
  %29 = call i32* @__errno_location() #15
  store i32 110, i32* %29, align 4
  br label %.loopexit

; <label>:30:                                     ; preds = %13
  %31 = icmp slt i32 %14, 0
  br i1 %31, label %32, label %42

; <label>:32:                                     ; preds = %30
  %33 = call i8* @gnutls_strerror(i32 %14) #15
  %34 = getelementptr [12 x i8], [12 x i8]* @.str.19.1735, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %34, i8* %33)
  switch i32 %14, label %42 [
    i32 -16, label %35
    i32 -12, label %35
  ]

; <label>:35:                                     ; preds = %32, %32
  %36 = call i32 @gnutls_alert_get(%struct.gnutls_session_int* %0)
  %37 = call i8* @gnutls_alert_get_name(i32 %36)
  %38 = icmp ne i8* %37, null
  %39 = getelementptr [10 x i8], [10 x i8]* @.str.40.1739, i32 0, i32 0
  %40 = select i1 %38, i8* %37, i8* %39
  %41 = getelementptr [33 x i8], [33 x i8]* @.str.39.1740, i32 0, i32 0
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %41, i32 %36, i8* %40)
  br label %42

; <label>:42:                                     ; preds = %24, %35, %32, %30
  %.2 = phi i32 [ -28, %24 ], [ %14, %35 ], [ %14, %32 ], [ %14, %30 ]
  %43 = icmp ne i32 %.2, 0
  br i1 %43, label %44, label %.loopexit.loopexit

; <label>:44:                                     ; preds = %42
  %45 = call i32 @gnutls_error_is_fatal(i32 %.2) #15
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %13, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %44, %42
  %.3.ph = phi i32 [ %.2, %42 ], [ %.2, %44 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %26, %28
  %.3 = phi i32 [ -1, %28 ], [ %.01.lcssa, %26 ], [ %.3.ph, %.loopexit.loopexit ]
  %47 = fcmp une double %2, 0.000000e+00
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %.loopexit
  %49 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %1, i32 4, i32 %.02)
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %52, label %51

; <label>:51:                                     ; preds = %48, %.loopexit
  br label %52

; <label>:52:                                     ; preds = %48, %8, %5, %51
  %.0 = phi i32 [ %.3, %51 ], [ %6, %5 ], [ -1, %8 ], [ -1, %48 ]
  ret i32 %.0
}

declare dso_local i32 @gnutls_session_get_data2(%struct.gnutls_session_int*, %struct.hsts_kh*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @wgnutls_read(i32, i8*, i32, i8*) #0 {
  %5 = bitcast i8* %3 to %struct.wgnutls_transport_context*
  %6 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %37

; <label>:9:                                      ; preds = %4
  %10 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = icmp sle i32 %2, %11
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %15 = load i32, i32* %14, align 4
  br label %16

; <label>:16:                                     ; preds = %9, %13
  %17 = phi i32 [ %15, %13 ], [ %2, %9 ]
  %18 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 3
  %19 = getelementptr inbounds [512 x i8], [512 x i8]* %18, i32 0, i32 0
  %20 = sext i32 %17 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 4 %19, i64 %20, i1 false)
  %21 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %22 = load i32, i32* %21, align 4
  %23 = sub nsw i32 %22, %17
  store i32 %23, i32* %21, align 4
  %24 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %44

; <label>:27:                                     ; preds = %16
  %28 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 3
  %29 = getelementptr inbounds [512 x i8], [512 x i8]* %28, i32 0, i32 0
  %30 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 3
  %31 = getelementptr inbounds [512 x i8], [512 x i8]* %30, i32 0, i32 0
  %32 = sext i32 %17 to i64
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  %34 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %29, i8* align 1 %33, i64 %36, i1 false)
  br label %44

; <label>:37:                                     ; preds = %4
  %38 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %39 = load double, double* %38, align 8
  %40 = call i32 @wgnutls_read_timeout(i32 %0, i8* %1, i32 %2, i8* %3, double %39)
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %44

; <label>:42:                                     ; preds = %37
  %43 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 2
  store i32 %40, i32* %43, align 8
  br label %44

; <label>:44:                                     ; preds = %37, %42, %16, %27
  %.0 = phi i32 [ %17, %27 ], [ %17, %16 ], [ %40, %42 ], [ %40, %37 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @wgnutls_write(i32, i8*, i32, i8*) #0 {
  %5 = bitcast i8* %3 to %struct.wgnutls_transport_context*
  br label %6

; <label>:6:                                      ; preds = %6, %4
  %7 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 0
  %8 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %7, align 8
  %9 = sext i32 %2 to i64
  %10 = call i64 @gnutls_record_send(%struct.gnutls_session_int* %8, i8* %1, i64 %9)
  %11 = trunc i64 %10 to i32
  %12 = icmp eq i32 %11, -52
  %13 = icmp eq i32 %11, -28
  %14 = select i1 %12, i1 true, i1 %13
  br i1 %14, label %6, label %15

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i32 [ %11, %6 ]
  %16 = icmp slt i32 %.lcssa, 0
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %15
  %18 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 2
  store i32 %.lcssa, i32* %18, align 8
  br label %19

; <label>:19:                                     ; preds = %17, %15
  ret i32 %.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @wgnutls_poll(i32, double, i32, i8*) #0 {
  %5 = bitcast i8* %3 to %struct.wgnutls_transport_context*
  %6 = fcmp une double %1, 0.000000e+00
  %7 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %6, label %10, label %22

; <label>:10:                                     ; preds = %4
  br i1 %9, label %19, label %11

; <label>:11:                                     ; preds = %10
  %12 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 0
  %13 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %12, align 8
  %14 = call i64 @gnutls_record_check_pending(%struct.gnutls_session_int* %13)
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %19, label %16

; <label>:16:                                     ; preds = %11
  %17 = call i32 @select_fd(i32 %0, double %1, i32 %2)
  %18 = icmp ne i32 %17, 0
  br label %19

; <label>:19:                                     ; preds = %16, %11, %10
  %20 = phi i1 [ true, %11 ], [ true, %10 ], [ %18, %16 ]
  %21 = zext i1 %20 to i32
  br label %31

; <label>:22:                                     ; preds = %4
  br i1 %9, label %28, label %23

; <label>:23:                                     ; preds = %22
  %24 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 0
  %25 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %24, align 8
  %26 = call i64 @gnutls_record_check_pending(%struct.gnutls_session_int* %25)
  %27 = icmp ne i64 %26, 0
  br label %28

; <label>:28:                                     ; preds = %23, %22
  %29 = phi i1 [ true, %22 ], [ %27, %23 ]
  %30 = zext i1 %29 to i32
  br label %31

; <label>:31:                                     ; preds = %28, %19
  %.0 = phi i32 [ %21, %19 ], [ %30, %28 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @wgnutls_peek(i32, i8*, i32, i8*) #0 {
  %5 = bitcast i8* %3 to %struct.wgnutls_transport_context*
  %6 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp sle i32 %2, %7
  br i1 %8, label %12, label %9

; <label>:9:                                      ; preds = %4
  %10 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %11 = load i32, i32* %10, align 4
  br label %12

; <label>:12:                                     ; preds = %4, %9
  %13 = phi i32 [ %11, %9 ], [ %2, %4 ]
  %14 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %12
  %18 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 3
  %19 = getelementptr inbounds [512 x i8], [512 x i8]* %18, i32 0, i32 0
  %20 = sext i32 %13 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 4 %19, i64 %20, i1 false), !track !829
  br label %63

; <label>:21:                                     ; preds = %12
  %22 = icmp sgt i32 %2, 512
  %spec.select = select i1 %22, i32 512, i32 %2
  %23 = icmp sgt i32 %spec.select, %13
  br i1 %23, label %24, label %61

; <label>:24:                                     ; preds = %21
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %26 = load double, double* %25, align 8
  %27 = fcmp une double %26, 0.000000e+00
  br i1 %27, label %28, label %36

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 0
  %30 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %29, align 8
  %31 = call i64 @gnutls_record_check_pending(%struct.gnutls_session_int* %30)
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %36

; <label>:33:                                     ; preds = %28
  %34 = call i32 @select_fd(i32 %0, double 0.000000e+00, i32 1)
  %35 = icmp sle i32 %34, 0
  br i1 %35, label %44, label %36

; <label>:36:                                     ; preds = %33, %28, %24
  %37 = sext i32 %13 to i64
  %38 = getelementptr inbounds i8, i8* %1, i64 %37
  %39 = sub nsw i32 %spec.select, %13
  %40 = bitcast %struct.wgnutls_transport_context* %5 to i8*
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 82
  %42 = load double, double* %41, align 8
  %43 = call i32 @wgnutls_read_timeout(i32 %0, i8* %38, i32 %39, i8* %40, double %42)
  br label %44

; <label>:44:                                     ; preds = %33, %36
  %.01 = phi i32 [ %43, %36 ], [ 0, %33 ]
  %45 = icmp slt i32 %.01, 0
  br i1 %45, label %46, label %48

; <label>:46:                                     ; preds = %44
  %47 = icmp ne i32 %13, 0
  br i1 %47, label %48, label %63

; <label>:48:                                     ; preds = %46, %44
  %.1 = phi i32 [ %.01, %44 ], [ 0, %46 ]
  %49 = icmp sgt i32 %.1, 0
  br i1 %49, label %50, label %61

; <label>:50:                                     ; preds = %48
  %51 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 3
  %52 = getelementptr inbounds [512 x i8], [512 x i8]* %51, i32 0, i32 0
  %53 = sext i32 %13 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  %55 = sext i32 %13 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = sext i32 %.1 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %56, i64 %57, i1 false), !track !830
  %58 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %5, i32 0, i32 4
  %59 = load i32, i32* %58, align 4
  %60 = add nsw i32 %59, %.1
  store i32 %60, i32* %58, align 4
  br label %61

; <label>:61:                                     ; preds = %48, %50, %21
  %.2 = phi i32 [ 0, %21 ], [ %.1, %50 ], [ %.1, %48 ]
  %62 = add nsw i32 %13, %.2
  br label %63

; <label>:63:                                     ; preds = %46, %61, %17
  %.0 = phi i32 [ %13, %17 ], [ %62, %61 ], [ %.01, %46 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @wgnutls_errstr(i32, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.wgnutls_transport_context*
  %4 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %3, i32 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = call i8* @gnutls_strerror(i32 %5) #15
  ret i8* %6
}

; Function Attrs: noinline nounwind uwtable
define internal void @wgnutls_close(i32, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.wgnutls_transport_context*
  %4 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %3, i32 0, i32 1
  %5 = load %struct.hsts_kh*, %struct.hsts_kh** %4, align 8
  %6 = icmp ne %struct.hsts_kh* %5, null
  br i1 %6, label %7, label %17

; <label>:7:                                      ; preds = %2
  %8 = load void (i8*)*, void (i8*)** @gnutls_free, align 8
  %9 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %3, i32 0, i32 1
  %10 = load %struct.hsts_kh*, %struct.hsts_kh** %9, align 8
  %11 = getelementptr inbounds %struct.hsts_kh, %struct.hsts_kh* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  call void %8(i8* %12)
  %13 = load void (i8*)*, void (i8*)** @gnutls_free, align 8
  %14 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %3, i32 0, i32 1
  %15 = load %struct.hsts_kh*, %struct.hsts_kh** %14, align 8
  %16 = bitcast %struct.hsts_kh* %15 to i8*
  call void %13(i8* %16)
  br label %17

; <label>:17:                                     ; preds = %7, %2
  %18 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %3, i32 0, i32 0
  %19 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %18, align 8
  call void @gnutls_deinit(%struct.gnutls_session_int* %19)
  %20 = bitcast %struct.wgnutls_transport_context* %3 to i8*
  call void @free(i8* %20) #8
  %21 = call i32 @close(i32 %0)
  ret void
}

declare dso_local i64 @gnutls_record_check_pending(%struct.gnutls_session_int*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @wgnutls_read_timeout(i32, i8*, i32, i8*, double) #0 {
  %6 = bitcast i8* %3 to %struct.wgnutls_transport_context*
  %7 = fcmp une double %4, 0.000000e+00
  br i1 %7, label %8, label %18

; <label>:8:                                      ; preds = %5
  %9 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 3, i32 0)
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %73, label %11

; <label>:11:                                     ; preds = %8
  %12 = or i32 %9, 2048
  %13 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 4, i32 %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %73, label %15

; <label>:15:                                     ; preds = %11
  %16 = call %struct.ptimer* @ptimer_new()
  %17 = icmp eq %struct.ptimer* %16, null
  br i1 %17, label %73, label %18

; <label>:18:                                     ; preds = %15, %5
  %.07 = phi i32 [ 0, %5 ], [ %9, %15 ]
  %.03 = phi %struct.ptimer* [ null, %5 ], [ %16, %15 ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.backedge, %18
  %.04 = phi i32 [ 0, %18 ], [ %.3, %.critedge.backedge ]
  %.02 = phi i32 [ 0, %18 ], [ %.1, %.critedge.backedge ]
  call void @unroll_loop(i32 415)
  %19 = fcmp une double %4, 0.000000e+00
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %.critedge
  %21 = call double @ptimer_measure(%struct.ptimer* %.03)
  %22 = fsub double %4, %21
  %23 = fcmp olt double %22, 0.000000e+00
  br i1 %23, label %.loopexit, label %24

; <label>:24:                                     ; preds = %20, %.critedge
  %.01 = phi double [ 0.000000e+00, %.critedge ], [ %22, %20 ]
  %25 = fcmp oeq double %4, 0.000000e+00
  br i1 %25, label %34, label %26

; <label>:26:                                     ; preds = %24
  %27 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %6, i32 0, i32 0
  %28 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %27, align 8
  %29 = call i64 @gnutls_record_check_pending(%struct.gnutls_session_int* %28)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %26
  %32 = call i32 @select_fd(i32 %0, double %.01, i32 1)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %60

; <label>:34:                                     ; preds = %31, %26, %24
  %35 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %6, i32 0, i32 0
  %36 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %35, align 8
  %37 = sext i32 %2 to i64
  %38 = call i64 @gnutls_record_recv(%struct.gnutls_session_int* %36, i8* %1, i64 %37)
  %39 = trunc i64 %38 to i32
  %40 = fcmp une double %4, 0.000000e+00
  br i1 %40, label %41, label %44

; <label>:41:                                     ; preds = %34
  %42 = call double @ptimer_measure(%struct.ptimer* %.03)
  %43 = fcmp oge double %42, %4
  br label %44

; <label>:44:                                     ; preds = %41, %34
  %45 = phi i1 [ false, %34 ], [ %43, %41 ]
  %46 = zext i1 %45 to i32
  %47 = icmp eq i32 %46, 0
  %48 = icmp eq i32 %39, -37
  %or.cond = and i1 %47, %48
  br i1 %or.cond, label %49, label %60

; <label>:49:                                     ; preds = %44
  %50 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %51 = load i8, i8* %50, align 1
  %52 = trunc i8 %51 to i1
  br i1 %52, label %53, label %55

; <label>:53:                                     ; preds = %49
  %54 = getelementptr [39 x i8], [39 x i8]* @.str.41.1738, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %54)
  br label %55

; <label>:55:                                     ; preds = %49, %53
  %56 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %6, i32 0, i32 0
  %57 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %56, align 8
  %58 = call i32 @_do_handshake(%struct.gnutls_session_int* %57, i32 %0, double %4)
  %59 = icmp eq i32 %58, 0
  %spec.select = select i1 %59, i32 -28, i32 %58
  br label %60

; <label>:60:                                     ; preds = %31, %44, %55
  %.3 = phi i32 [ -28, %31 ], [ %39, %44 ], [ %spec.select, %55 ]
  %.1 = phi i32 [ %.02, %31 ], [ %46, %44 ], [ %46, %55 ]
  switch i32 %.3, label %.loopexit [
    i32 -52, label %.critedge.backedge
    i32 -28, label %61
  ]

; <label>:61:                                     ; preds = %60
  %62 = icmp ne i32 %.1, 0
  %63 = xor i1 %62, true
  br i1 %63, label %.critedge.backedge, label %.loopexit

.critedge.backedge:                               ; preds = %61, %60
  br label %.critedge

.loopexit:                                        ; preds = %60, %61, %20
  %.4 = phi i32 [ %.04, %20 ], [ %.3, %61 ], [ %.3, %60 ]
  %.2 = phi i32 [ %.02, %20 ], [ %.1, %61 ], [ %.1, %60 ]
  %64 = fcmp une double %4, 0.000000e+00
  br i1 %64, label %65, label %73

; <label>:65:                                     ; preds = %.loopexit
  call void @ptimer_destroy(%struct.ptimer* %.03)
  %66 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 4, i32 %.07)
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %73, label %68

; <label>:68:                                     ; preds = %65
  %69 = icmp ne i32 %.2, 0
  %70 = icmp eq i32 %.4, -28
  %or.cond1 = and i1 %69, %70
  br i1 %or.cond1, label %71, label %73

; <label>:71:                                     ; preds = %68
  %72 = call i32* @__errno_location() #15
  store i32 110, i32* %72, align 4
  br label %73

; <label>:73:                                     ; preds = %.loopexit, %71, %68, %65, %15, %11, %8
  %.0 = phi i32 [ %9, %8 ], [ -1, %11 ], [ -1, %15 ], [ -1, %65 ], [ %.4, %68 ], [ %.4, %71 ], [ %.4, %.loopexit ]
  ret i32 %.0
}

declare dso_local i64 @gnutls_record_recv(%struct.gnutls_session_int*, i8*, i64) #3

declare dso_local i64 @gnutls_record_send(%struct.gnutls_session_int*, i8*, i64) #3

declare dso_local i32 @gnutls_handshake(%struct.gnutls_session_int*) #3

declare dso_local i32 @gnutls_record_get_direction(%struct.gnutls_session_int*) #3

declare dso_local i32 @gnutls_alert_get(%struct.gnutls_session_int*) #3

declare dso_local i8* @gnutls_alert_get_name(i32) #3

; Function Attrs: nounwind readnone
declare dso_local i32 @gnutls_error_is_fatal(i32) #4

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @ssl_check_certificate(i32, i8*) #0 {
  %3 = alloca i32, align 4, !track !831
  %4 = alloca %struct.gnutls_x509_crt_int*, align 8, !track !832
  %5 = alloca i32, align 4, !track !833
  %6 = call i8* @fd_transport_context(i32 %0)
  %7 = bitcast i8* %6 to %struct.wgnutls_transport_context*
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 114
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %2
  %12 = getelementptr [6 x i8], [6 x i8]* @.str.22.1743, i32 0, i32 0
  %13 = call i8* @gettext(i8* %12) #8
  br label %17

; <label>:14:                                     ; preds = %2
  %15 = getelementptr [8 x i8], [8 x i8]* @.str.23.1744, i32 0, i32 0
  %16 = call i8* @gettext(i8* %15) #8
  br label %17

; <label>:17:                                     ; preds = %14, %11
  %18 = phi i8* [ %13, %11 ], [ %16, %14 ]
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 114
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %17
  %23 = trunc i8 1 to i1
  br label %153

; <label>:24:                                     ; preds = %17
  %25 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %7, i32 0, i32 0
  %26 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %25, align 8
  %27 = call i32 @gnutls_certificate_verify_peers2(%struct.gnutls_session_int* %26, i32* %3)
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %24
  %30 = getelementptr [37 x i8], [37 x i8]* @.str.24.1745, i32 0, i32 0
  %31 = call i8* @gettext(i8* %30) #8
  %32 = call i8* @quotearg_style(i32 7, i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %31, i8* %18, i8* %32)
  br label %145

; <label>:33:                                     ; preds = %24
  %34 = load i32, i32* %3, align 4
  %35 = and i32 %34, 2
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %33
  %38 = getelementptr [43 x i8], [43 x i8]* @.str.25.1746, i32 0, i32 0
  %39 = call i8* @gettext(i8* %38) #8
  %40 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %39, i8* %18, i8* %40)
  br label %41

; <label>:41:                                     ; preds = %37, %33
  %.01 = phi i8 [ 0, %37 ], [ 1, %33 ]
  %42 = load i32, i32* %3, align 4
  %43 = and i32 %42, 64
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %49

; <label>:45:                                     ; preds = %41
  %46 = getelementptr [54 x i8], [54 x i8]* @.str.26.1747, i32 0, i32 0
  %47 = call i8* @gettext(i8* %46) #8
  %48 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %47, i8* %18, i8* %48)
  br label %49

; <label>:49:                                     ; preds = %45, %41
  %.1 = phi i8 [ 0, %45 ], [ %.01, %41 ]
  %50 = load i32, i32* %3, align 4
  %51 = and i32 %50, 32
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %57

; <label>:53:                                     ; preds = %49
  %54 = getelementptr [45 x i8], [45 x i8]* @.str.27.1748, i32 0, i32 0
  %55 = call i8* @gettext(i8* %54) #8
  %56 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %55, i8* %18, i8* %56)
  br label %57

; <label>:57:                                     ; preds = %53, %49
  %.2 = phi i8 [ 0, %53 ], [ %.1, %49 ]
  %58 = load i32, i32* %3, align 4
  %59 = and i32 %58, 128
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %65

; <label>:61:                                     ; preds = %57
  %62 = getelementptr [48 x i8], [48 x i8]* @.str.28.1749, i32 0, i32 0
  %63 = call i8* @gettext(i8* %62) #8
  %64 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %63, i8* %18, i8* %64)
  br label %65

; <label>:65:                                     ; preds = %61, %57
  %.3 = phi i8 [ 0, %61 ], [ %.2, %57 ]
  %66 = load i32, i32* %3, align 4
  %67 = and i32 %66, 256
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %73

; <label>:69:                                     ; preds = %65
  %70 = getelementptr [67 x i8], [67 x i8]* @.str.29.1750, i32 0, i32 0
  %71 = call i8* @gettext(i8* %70) #8
  %72 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %71, i8* %18, i8* %72)
  br label %73

; <label>:73:                                     ; preds = %69, %65
  %.4 = phi i8 [ 0, %69 ], [ %.3, %65 ]
  %74 = load i32, i32* %3, align 4
  %75 = and i32 %74, 512
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %81

; <label>:77:                                     ; preds = %73
  %78 = getelementptr [49 x i8], [49 x i8]* @.str.30.1751, i32 0, i32 0
  %79 = call i8* @gettext(i8* %78) #8
  %80 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %79, i8* %18, i8* %80)
  br label %81

; <label>:81:                                     ; preds = %77, %73
  %.5 = phi i8 [ 0, %77 ], [ %.4, %73 ]
  %82 = load i32, i32* %3, align 4
  %83 = and i32 %82, 1024
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %89

; <label>:85:                                     ; preds = %81
  %86 = getelementptr [40 x i8], [40 x i8]* @.str.31.1752, i32 0, i32 0
  %87 = call i8* @gettext(i8* %86) #8
  %88 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %87, i8* %18, i8* %88)
  br label %89

; <label>:89:                                     ; preds = %85, %81
  %.6 = phi i8 [ 0, %85 ], [ %.5, %81 ]
  %90 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %7, i32 0, i32 0
  %91 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %90, align 8
  %92 = call i32 @gnutls_certificate_type_get(%struct.gnutls_session_int* %91)
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %142

; <label>:94:                                     ; preds = %89
  %95 = call i64 @time(i64* null) #8
  %96 = call i32 @gnutls_x509_crt_init(%struct.gnutls_x509_crt_int** %4), !track !834
  %97 = icmp slt i32 %96, 0
  br i1 %97, label %98, label %102

; <label>:98:                                     ; preds = %94
  %99 = getelementptr [41 x i8], [41 x i8]* @.str.32.1753, i32 0, i32 0
  %100 = call i8* @gettext(i8* %99) #8
  %101 = call i8* @gnutls_strerror(i32 %96) #15
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %100, i8* %101)
  br label %145

; <label>:102:                                    ; preds = %94
  %103 = getelementptr inbounds %struct.wgnutls_transport_context, %struct.wgnutls_transport_context* %7, i32 0, i32 0
  %104 = load %struct.gnutls_session_int*, %struct.gnutls_session_int** %103, align 8
  %105 = call %struct.hsts_kh* @gnutls_certificate_get_peers(%struct.gnutls_session_int* %104, i32* %5)
  %106 = icmp ne %struct.hsts_kh* %105, null
  br i1 %106, label %110, label %107

; <label>:107:                                    ; preds = %102
  %108 = getelementptr [22 x i8], [22 x i8]* @.str.33.1754, i32 0, i32 0
  %109 = call i8* @gettext(i8* %108) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %109)
  br label %140

; <label>:110:                                    ; preds = %102
  %111 = load %struct.gnutls_x509_crt_int*, %struct.gnutls_x509_crt_int** %4, align 8
  %112 = call i32 @gnutls_x509_crt_import(%struct.gnutls_x509_crt_int* %111, %struct.hsts_kh* %105, i32 0)
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %114, label %118

; <label>:114:                                    ; preds = %110
  %115 = getelementptr [31 x i8], [31 x i8]* @.str.34.1755, i32 0, i32 0
  %116 = call i8* @gettext(i8* %115) #8
  %117 = call i8* @gnutls_strerror(i32 %112) #15
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %116, i8* %117)
  br label %140

; <label>:118:                                    ; preds = %110
  %119 = load %struct.gnutls_x509_crt_int*, %struct.gnutls_x509_crt_int** %4, align 8
  %120 = call i64 @gnutls_x509_crt_get_activation_time(%struct.gnutls_x509_crt_int* %119)
  %121 = icmp slt i64 %95, %120
  br i1 %121, label %122, label %125

; <label>:122:                                    ; preds = %118
  %123 = getelementptr [44 x i8], [44 x i8]* @.str.35.1756, i32 0, i32 0
  %124 = call i8* @gettext(i8* %123) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %124)
  br label %125

; <label>:125:                                    ; preds = %122, %118
  %.7 = phi i8 [ 0, %122 ], [ %.6, %118 ]
  %126 = load %struct.gnutls_x509_crt_int*, %struct.gnutls_x509_crt_int** %4, align 8
  %127 = call i64 @gnutls_x509_crt_get_expiration_time(%struct.gnutls_x509_crt_int* %126)
  %128 = icmp sge i64 %95, %127
  br i1 %128, label %129, label %132

; <label>:129:                                    ; preds = %125
  %130 = getelementptr [29 x i8], [29 x i8]* @.str.36.1757, i32 0, i32 0
  %131 = call i8* @gettext(i8* %130) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %131)
  br label %132

; <label>:132:                                    ; preds = %129, %125
  %.8 = phi i8 [ 0, %129 ], [ %.7, %125 ]
  %133 = load %struct.gnutls_x509_crt_int*, %struct.gnutls_x509_crt_int** %4, align 8
  %134 = call i32 @gnutls_x509_crt_check_hostname(%struct.gnutls_x509_crt_int* %133, i8* %1)
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %140, label %136

; <label>:136:                                    ; preds = %132
  %137 = getelementptr [52 x i8], [52 x i8]* @.str.37.1758, i32 0, i32 0
  %138 = call i8* @gettext(i8* %137) #8
  %139 = call i8* @quote(i8* %1)
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %138, i8* %139)
  br label %140

; <label>:140:                                    ; preds = %132, %136, %114, %107
  %.10 = phi i8 [ 0, %114 ], [ 0, %107 ], [ %.8, %132 ], [ 0, %136 ]
  %141 = load %struct.gnutls_x509_crt_int*, %struct.gnutls_x509_crt_int** %4, align 8
  call void @gnutls_x509_crt_deinit(%struct.gnutls_x509_crt_int* %141)
  br label %145

; <label>:142:                                    ; preds = %89
  %143 = getelementptr [27 x i8], [27 x i8]* @.str.38.1759, i32 0, i32 0
  %144 = call i8* @gettext(i8* %143) #8
  call void (i32, i8*, ...) @logprintf(i32 1, i8* %144)
  br label %145

; <label>:145:                                    ; preds = %140, %142, %98, %29
  %.12 = phi i8 [ 0, %29 ], [ 0, %98 ], [ %.10, %140 ], [ 0, %142 ]
  %146 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 114
  %147 = load i32, i32* %146, align 4
  %148 = icmp eq i32 %147, 1
  %149 = trunc i8 %.12 to i1
  %150 = zext i1 %149 to i32
  %151 = select i1 %148, i32 %150, i32 1
  %152 = icmp ne i32 %151, 0
  br label %153

; <label>:153:                                    ; preds = %145, %22
  %.0 = phi i1 [ %23, %22 ], [ %152, %145 ]
  ret i1 %.0
}

declare dso_local i32 @gnutls_certificate_verify_peers2(%struct.gnutls_session_int*, i32*) #3

declare dso_local i32 @gnutls_certificate_type_get(%struct.gnutls_session_int*) #3

declare dso_local i32 @gnutls_x509_crt_init(%struct.gnutls_x509_crt_int**) #3

declare dso_local %struct.hsts_kh* @gnutls_certificate_get_peers(%struct.gnutls_session_int*, i32*) #3

declare dso_local i32 @gnutls_x509_crt_import(%struct.gnutls_x509_crt_int*, %struct.hsts_kh*, i32) #3

declare dso_local i64 @gnutls_x509_crt_get_activation_time(%struct.gnutls_x509_crt_int*) #3

declare dso_local i64 @gnutls_x509_crt_get_expiration_time(%struct.gnutls_x509_crt_int*) #3

declare dso_local i32 @gnutls_x509_crt_check_hostname(%struct.gnutls_x509_crt_int*, i8*) #3

declare dso_local void @gnutls_x509_crt_deinit(%struct.gnutls_x509_crt_int*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @ntlm_input(%struct.ntlmdata*, i8*) #0 {
  %3 = getelementptr [5 x i8], [5 x i8]* @.str.1762, i32 0, i32 0
  %4 = call i32 @strncmp(i8* %1, i8* %3, i64 4) #14
  %5 = icmp ne i32 0, %4
  br i1 %5, label %55, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds i8, i8* %1, i64 4
  br label %8

; <label>:8:                                      ; preds = %16, %6
  %.01 = phi i8* [ %7, %6 ], [ %18, %16 ]
  call void @unroll_loop(i32 416)
  %9 = load i8, i8* %.01, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %8
  %13 = load i8, i8* %.01, align 1
  %14 = sext i8 %13 to i32
  %15 = call zeroext i1 @c_isspace(i32 %14)
  br label %16

; <label>:16:                                     ; preds = %12, %8
  %17 = phi i1 [ false, %8 ], [ %15, %12 ]
  %18 = getelementptr inbounds i8, i8* %.01, i32 1
  br i1 %17, label %8, label %19

; <label>:19:                                     ; preds = %16
  %.01.lcssa = phi i8* [ %.01, %16 ]
  %20 = load i8, i8* %.01.lcssa, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %22, label %40

; <label>:22:                                     ; preds = %19
  %23 = call i64 @strlen(i8* %.01.lcssa) #14
  %24 = alloca i8, i64 %23, align 16, !track !835
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %26 = load i8, i8* %25, align 1
  %27 = trunc i8 %26 to i1
  br i1 %27, label %28, label %30

; <label>:28:                                     ; preds = %22
  %29 = getelementptr [33 x i8], [33 x i8]* @.str.1.1763, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %29)
  br label %30

; <label>:30:                                     ; preds = %22, %28
  %31 = call i64 @base64_decode(i8* %.01.lcssa, i8* %24)
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %55, label %33

; <label>:33:                                     ; preds = %30
  %34 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  store i32 2, i32* %34, align 4
  %35 = icmp sge i64 %31, 48
  br i1 %35, label %36, label %55

; <label>:36:                                     ; preds = %33
  %37 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 1
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %37, i32 0, i32 0
  %39 = getelementptr inbounds i8, i8* %24, i64 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %38, i8* align 1 %39, i64 8, i1 false), !track !836
  br label %55

; <label>:40:                                     ; preds = %19
  %41 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp uge i32 %42, 1
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %45 = load i8, i8* %44, align 1
  %46 = trunc i8 %45 to i1
  br i1 %43, label %47, label %50

; <label>:47:                                     ; preds = %40
  br i1 %46, label %48, label %55

; <label>:48:                                     ; preds = %47
  %49 = getelementptr [32 x i8], [32 x i8]* @.str.2.1764, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %49)
  br label %55

; <label>:50:                                     ; preds = %40
  br i1 %46, label %51, label %53

; <label>:51:                                     ; preds = %50
  %52 = getelementptr [43 x i8], [43 x i8]* @.str.3.1765, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %52)
  br label %53

; <label>:53:                                     ; preds = %50, %51
  %54 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  store i32 1, i32* %54, align 4
  br label %55

; <label>:55:                                     ; preds = %53, %36, %33, %48, %47, %30, %2
  %.0 = phi i1 [ false, %2 ], [ false, %30 ], [ false, %47 ], [ false, %48 ], [ true, %33 ], [ true, %36 ], [ true, %53 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @ntlm_output(%struct.ntlmdata*, i8*, i8*, i8*) #7 {
  %5 = alloca [256 x i8], align 16, !track !837
  %6 = alloca [24 x i8], align 16, !track !838
  %7 = alloca [24 x i8], align 16, !track !839
  %8 = getelementptr [1 x i8], [1 x i8]* @.str.4.1768, i32 0, i32 0
  %9 = call i64 @strlen(i8* %8) #14
  %10 = getelementptr [1 x i8], [1 x i8]* @.str.4.1768, i32 0, i32 0
  %11 = call i64 @strlen(i8* %10) #14
  store i8 0, i8* %3, align 1
  %12 = icmp ne i8* %1, null
  %13 = getelementptr [1 x i8], [1 x i8]* @.str.4.1768, i32 0, i32 0
  %spec.select = select i1 %12, i8* %1, i8* %13
  %14 = icmp ne i8* %2, null
  %15 = getelementptr [1 x i8], [1 x i8]* @.str.4.1768, i32 0, i32 0
  %.03 = select i1 %14, i8* %2, i8* %15
  %16 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  switch i32 %17, label %212 [
    i32 1, label %18
    i32 0, label %18
    i32 4, label %18
    i32 2, label %77
    i32 3, label %211
  ]

; <label>:18:                                     ; preds = %4, %4, %4
  %19 = add i64 32, %11
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %21 = load i8, i8* %20, align 1
  %22 = trunc i8 %21 to i1
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %18
  %24 = getelementptr [33 x i8], [33 x i8]* @.str.5.1769, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %24)
  br label %25

; <label>:25:                                     ; preds = %18, %23
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i32 0, i32 0
  %27 = and i64 %9, 255
  %28 = trunc i64 %27 to i8
  %29 = sext i8 %28 to i32
  %30 = lshr i64 %9, 8
  %31 = trunc i64 %30 to i8
  %32 = sext i8 %31 to i32
  %33 = and i64 %9, 255
  %34 = trunc i64 %33 to i8
  %35 = sext i8 %34 to i32
  %36 = lshr i64 %9, 8
  %37 = trunc i64 %36 to i8
  %38 = sext i8 %37 to i32
  %39 = and i64 %19, 255
  %40 = trunc i64 %39 to i8
  %41 = sext i8 %40 to i32
  %42 = lshr i64 %19, 8
  %43 = trunc i64 %42 to i8
  %44 = sext i8 %43 to i32
  %45 = and i64 %11, 255
  %46 = trunc i64 %45 to i8
  %47 = sext i8 %46 to i32
  %48 = lshr i64 %11, 8
  %49 = trunc i64 %48 to i8
  %50 = sext i8 %49 to i32
  %51 = and i64 %11, 255
  %52 = trunc i64 %51 to i8
  %53 = sext i8 %52 to i32
  %54 = lshr i64 %11, 8
  %55 = trunc i64 %54 to i8
  %56 = sext i8 %55 to i32
  %57 = and i64 32, 255
  %58 = trunc i64 %57 to i8
  %59 = sext i8 %58 to i32
  %60 = lshr i64 32, 8
  %61 = trunc i64 %60 to i8
  %62 = sext i8 %61 to i32
  %63 = getelementptr [61 x i8], [61 x i8]* @.str.6.1770, i32 0, i32 0
  %64 = getelementptr [1 x i8], [1 x i8]* @.str.4.1768, i32 0, i32 0
  %65 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %26, i64 256, i8* %63, i32 0, i32 0, i32 0, i32 0, i32 2, i32 2, i32 0, i32 0, i32 %29, i32 %32, i32 %35, i32 %38, i32 %41, i32 %44, i32 0, i32 0, i32 %47, i32 %50, i32 %53, i32 %56, i32 %59, i32 %62, i32 0, i32 0, i8* %64, i8* %64) #8
  %66 = add i64 32, %11
  %67 = add i64 %66, %9
  %68 = add i64 %67, 2
  %69 = udiv i64 %68, 3
  %70 = mul i64 4, %69
  %71 = add i64 %70, 1
  %72 = alloca i8, i64 %71, align 16, !track !840
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i32 0, i32 0
  %74 = call i64 @base64_encode(i8* %73, i64 %67, i8* %72)
  %75 = getelementptr [6 x i8], [6 x i8]* @.str.7.1771, i32 0, i32 0
  %76 = call i8* (i8*, ...) @concat_strings(i8* %75, i8* %72, i8* null)
  br label %212

; <label>:77:                                     ; preds = %4
  %78 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 94
  %79 = load i8, i8* %78, align 1
  %80 = trunc i8 %79 to i1
  br i1 %80, label %81, label %83

; <label>:81:                                     ; preds = %77
  %82 = getelementptr [33 x i8], [33 x i8]* @.str.8.1772, i32 0, i32 0
  call void (i8*, ...) @debug_logprintf(i8* %82)
  br label %83

; <label>:83:                                     ; preds = %77, %81
  %84 = call i8* @strchr(i8* %spec.select, i32 92) #14, !track !841
  %85 = icmp ne i8* %84, null
  br i1 %85, label %88, label %86

; <label>:86:                                     ; preds = %83
  %87 = call i8* @strchr(i8* %spec.select, i32 47) #14, !track !842
  br label %88

; <label>:88:                                     ; preds = %86, %83
  %.01 = phi i8* [ %84, %83 ], [ %87, %86 ]
  %89 = icmp ne i8* %.01, null
  %90 = ptrtoint i8* %.01 to i64
  %91 = ptrtoint i8* %spec.select to i64
  %92 = sub i64 %90, %91
  %93 = getelementptr inbounds i8, i8* %.01, i32 1
  %94 = getelementptr [1 x i8], [1 x i8]* @.str.4.1768, i32 0, i32 0
  %.06 = select i1 %89, i64 %92, i64 %9
  %.05 = select i1 %89, i8* %spec.select, i8* %94
  %.1 = select i1 %89, i8* %93, i8* %spec.select
  %95 = call i64 @strlen(i8* %.1) #14
  %96 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 1
  %97 = getelementptr inbounds [8 x i8], [8 x i8]* %96, i64 0, i64 0
  %98 = getelementptr inbounds [24 x i8], [24 x i8]* %6, i32 0, i32 0
  %99 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i32 0, i32 0
  call void @mkhash(i8* %.03, i8* %97, i8* %98, i8* %99)
  %100 = add i64 64, %.06
  %101 = add i64 %100, %95
  %102 = add i64 %101, %11
  %103 = add i64 %102, 24
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i32 0, i32 0
  %105 = and i64 %102, 255
  %106 = trunc i64 %105 to i8
  %107 = sext i8 %106 to i32
  %108 = lshr i64 %102, 8
  %109 = trunc i64 %108 to i8
  %110 = sext i8 %109 to i32
  %111 = and i64 %103, 255
  %112 = trunc i64 %111 to i8
  %113 = sext i8 %112 to i32
  %114 = lshr i64 %103, 8
  %115 = trunc i64 %114 to i8
  %116 = sext i8 %115 to i32
  %117 = and i64 %.06, 255
  %118 = trunc i64 %117 to i8
  %119 = sext i8 %118 to i32
  %120 = lshr i64 %.06, 8
  %121 = trunc i64 %120 to i8
  %122 = sext i8 %121 to i32
  %123 = and i64 %.06, 255
  %124 = trunc i64 %123 to i8
  %125 = sext i8 %124 to i32
  %126 = lshr i64 %.06, 8
  %127 = trunc i64 %126 to i8
  %128 = sext i8 %127 to i32
  %129 = and i64 64, 255
  %130 = trunc i64 %129 to i8
  %131 = sext i8 %130 to i32
  %132 = lshr i64 64, 8
  %133 = trunc i64 %132 to i8
  %134 = sext i8 %133 to i32
  %135 = and i64 %95, 255
  %136 = trunc i64 %135 to i8
  %137 = sext i8 %136 to i32
  %138 = lshr i64 %95, 8
  %139 = trunc i64 %138 to i8
  %140 = sext i8 %139 to i32
  %141 = and i64 %95, 255
  %142 = trunc i64 %141 to i8
  %143 = sext i8 %142 to i32
  %144 = lshr i64 %95, 8
  %145 = trunc i64 %144 to i8
  %146 = sext i8 %145 to i32
  %147 = and i64 %100, 255
  %148 = trunc i64 %147 to i8
  %149 = sext i8 %148 to i32
  %150 = lshr i64 %100, 8
  %151 = trunc i64 %150 to i8
  %152 = sext i8 %151 to i32
  %153 = and i64 %11, 255
  %154 = trunc i64 %153 to i8
  %155 = sext i8 %154 to i32
  %156 = lshr i64 %11, 8
  %157 = trunc i64 %156 to i8
  %158 = sext i8 %157 to i32
  %159 = and i64 %11, 255
  %160 = trunc i64 %159 to i8
  %161 = sext i8 %160 to i32
  %162 = lshr i64 %11, 8
  %163 = trunc i64 %162 to i8
  %164 = sext i8 %163 to i32
  %165 = and i64 %101, 255
  %166 = trunc i64 %165 to i8
  %167 = sext i8 %166 to i32
  %168 = lshr i64 %101, 8
  %169 = trunc i64 %168 to i8
  %170 = sext i8 %169 to i32
  %171 = getelementptr [117 x i8], [117 x i8]* @.str.9.1773, i32 0, i32 0
  %172 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %104, i64 256, i8* %171, i32 0, i32 0, i32 0, i32 0, i32 24, i32 0, i32 24, i32 0, i32 %107, i32 %110, i32 0, i32 0, i32 24, i32 0, i32 24, i32 0, i32 %113, i32 %116, i32 0, i32 0, i32 %119, i32 %122, i32 %125, i32 %128, i32 %131, i32 %134, i32 0, i32 0, i32 %137, i32 %140, i32 %143, i32 %146, i32 %149, i32 %152, i32 0, i32 0, i32 %155, i32 %158, i32 %161, i32 %164, i32 %167, i32 %170, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) #8
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 63
  store i8 0, i8* %173, align 1
  %174 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 62
  store i8 0, i8* %174, align 2
  %175 = add i64 64, %95
  %176 = add i64 %175, %.06
  %177 = icmp uge i64 %176, 256
  br i1 %177, label %212, label %178

; <label>:178:                                    ; preds = %88
  %179 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 1 %.05, i64 %.06, i1 false), !track !843
  %180 = add i64 64, %.06
  %181 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %180
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %.1, i64 %95, i1 false), !track !844
  %182 = add i64 %180, %95
  %183 = icmp ult i64 %182, 232
  br i1 %183, label %184, label %188

; <label>:184:                                    ; preds = %178
  %185 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %182
  %186 = getelementptr inbounds [24 x i8], [24 x i8]* %6, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %185, i8* align 16 %186, i64 24, i1 false), !track !845
  %187 = add i64 %182, 24
  br label %188

; <label>:188:                                    ; preds = %184, %178
  %.07 = phi i64 [ %187, %184 ], [ %182, %178 ]
  %189 = icmp ult i64 %.07, 232
  br i1 %189, label %190, label %194

; <label>:190:                                    ; preds = %188
  %191 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %.07
  %192 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 16 %192, i64 24, i1 false), !track !846
  %193 = add i64 %.07, 24
  br label %194

; <label>:194:                                    ; preds = %190, %188
  %.18 = phi i64 [ %193, %190 ], [ %.07, %188 ]
  %195 = and i64 %.18, 255
  %196 = trunc i64 %195 to i8
  %197 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 56
  store i8 %196, i8* %197, align 8
  %198 = lshr i64 %.18, 8
  %199 = trunc i64 %198 to i8
  %200 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 57
  store i8 %199, i8* %200, align 1
  %201 = add i64 %.18, 2
  %202 = udiv i64 %201, 3
  %203 = mul i64 4, %202
  %204 = add i64 %203, 1
  %205 = alloca i8, i64 %204, align 16, !track !847
  %206 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i32 0, i32 0
  %207 = call i64 @base64_encode(i8* %206, i64 %.18, i8* %205)
  %208 = getelementptr [6 x i8], [6 x i8]* @.str.7.1771, i32 0, i32 0
  %209 = call i8* (i8*, ...) @concat_strings(i8* %208, i8* %205, i8* null)
  %210 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  store i32 3, i32* %210, align 4
  store i8 1, i8* %3, align 1
  br label %212

; <label>:211:                                    ; preds = %4
  store i8 1, i8* %3, align 1
  br label %212

; <label>:212:                                    ; preds = %25, %194, %211, %4, %88
  %.0 = phi i8* [ null, %88 ], [ null, %4 ], [ null, %211 ], [ %209, %194 ], [ %76, %25 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @mkhash(i8*, i8*, i8*, i8*) #0 {
  %5 = alloca [21 x i8], align 16
  %6 = alloca [21 x i8], align 16, !track !848
  %7 = alloca %struct.des_ctx, align 4
  %8 = alloca %struct.md4_ctx, align 8, !track !849
  %9 = call i64 @strlen(i8* %0) #14
  %10 = icmp ult i64 %9, 7
  %11 = mul i64 %9, 2
  %12 = select i1 %10, i64 14, i64 %11
  %13 = alloca i8, i64 %12, align 16, !track !850
  %14 = icmp ugt i64 %9, 14
  %spec.select = select i1 %14, i64 14, i64 %9
  %15 = icmp ult i64 0, %spec.select
  br i1 %15, label %.lr.ph10.preheader, label %._crit_edge11

.lr.ph10.preheader:                               ; preds = %4
  br label %.lr.ph10

.lr.ph10:                                         ; preds = %.lr.ph10.preheader, %.lr.ph10
  %.018 = phi i64 [ %22, %.lr.ph10 ], [ 0, %.lr.ph10.preheader ]
  call void @unroll_loop(i32 417)
  %16 = getelementptr inbounds i8, i8* %0, i64 %.018
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = call i32 @c_toupper(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds i8, i8* %13, i64 %.018
  store i8 %20, i8* %21, align 1
  %22 = add nuw nsw i64 %.018, 1
  %23 = icmp ult i64 %22, %spec.select
  br i1 %23, label %.lr.ph10, label %._crit_edge11.loopexit

._crit_edge11.loopexit:                           ; preds = %.lr.ph10
  %.01.lcssa.ph = phi i64 [ %spec.select, %.lr.ph10 ]
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %4
  %.01.lcssa = phi i64 [ 0, %4 ], [ %.01.lcssa.ph, %._crit_edge11.loopexit ]
  %24 = icmp ult i64 %.01.lcssa, 14
  br i1 %24, label %.lr.ph5.preheader, label %._crit_edge6

.lr.ph5.preheader:                                ; preds = %._crit_edge11
  br label %.lr.ph5

.lr.ph5:                                          ; preds = %.lr.ph5.preheader, %.lr.ph5
  %.13 = phi i64 [ %26, %.lr.ph5 ], [ %.01.lcssa, %.lr.ph5.preheader ]
  call void @unroll_loop(i32 418)
  %25 = getelementptr inbounds i8, i8* %13, i64 %.13
  store i8 0, i8* %25, align 1
  %26 = add nuw nsw i64 %.13, 1
  %exitcond7 = icmp ne i64 %26, 14
  br i1 %exitcond7, label %.lr.ph5, label %._crit_edge6.loopexit

._crit_edge6.loopexit:                            ; preds = %.lr.ph5
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %._crit_edge6.loopexit, %._crit_edge11
  call void @setup_des_key(i8* %13, %struct.des_ctx* %7)
  %27 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i32 0, i32 0
  %28 = getelementptr [8 x i8], [8 x i8]* @mkhash.magic, i32 0, i32 0
  call void @nettle_des_encrypt(%struct.des_ctx* %7, i64 8, i8* %27, i8* %28)
  %29 = getelementptr inbounds i8, i8* %13, i64 7
  call void @setup_des_key(i8* %29, %struct.des_ctx* %7)
  %30 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i32 0, i32 0
  %31 = getelementptr inbounds i8, i8* %30, i64 8
  %32 = getelementptr [8 x i8], [8 x i8]* @mkhash.magic, i32 0, i32 0
  call void @nettle_des_encrypt(%struct.des_ctx* %7, i64 8, i8* %31, i8* %32)
  %33 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i32 0, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 16
  call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 0, i64 5, i1 false)
  %35 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i32 0, i32 0
  call void @calc_resp(i8* %35, i8* %1, i8* %2)
  %36 = call i64 @strlen(i8* %0) #14
  %37 = icmp ult i64 0, %36
  br i1 %37, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.22 = phi i64 [ %45, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 419)
  %38 = getelementptr inbounds i8, i8* %0, i64 %.22
  %39 = load i8, i8* %38, align 1
  %40 = mul i64 2, %.22
  %41 = getelementptr inbounds i8, i8* %13, i64 %40
  store i8 %39, i8* %41, align 1
  %42 = mul i64 2, %.22
  %43 = add nuw nsw i64 %42, 1
  %44 = getelementptr inbounds i8, i8* %13, i64 %43
  store i8 0, i8* %44, align 1
  %45 = add nuw i64 %.22, 1
  %exitcond = icmp ne i64 %45, %36
  br i1 %exitcond, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge6
  call void @nettle_md4_init(%struct.md4_ctx* %8)
  %46 = mul i64 2, %36
  %47 = trunc i64 %46 to i32
  %48 = zext i32 %47 to i64
  call void @nettle_md4_update(%struct.md4_ctx* %8, i64 %48, i8* %13)
  %49 = getelementptr inbounds [21 x i8], [21 x i8]* %6, i32 0, i32 0
  call void @nettle_md4_digest(%struct.md4_ctx* %8, i64 16, i8* %49)
  %50 = getelementptr inbounds [21 x i8], [21 x i8]* %6, i32 0, i32 0
  %51 = getelementptr inbounds i8, i8* %50, i64 16
  call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 0, i64 5, i1 false)
  %52 = getelementptr inbounds [21 x i8], [21 x i8]* %6, i32 0, i32 0
  call void @calc_resp(i8* %52, i8* %1, i8* %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_des_key(i8*, %struct.des_ctx*) #0 {
  %3 = alloca [8 x i8], align 1, !track !851
  %4 = getelementptr inbounds i8, i8* %0, i64 0
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 0
  store i8 %5, i8* %6, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 0
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl i32 %9, 7
  %11 = and i32 %10, 255
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = ashr i32 %14, 1
  %16 = or i32 %11, %15
  %17 = trunc i32 %16 to i8
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl i32 %21, 6
  %23 = and i32 %22, 255
  %24 = getelementptr inbounds i8, i8* %0, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = ashr i32 %26, 2
  %28 = or i32 %23, %27
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl i32 %33, 5
  %35 = and i32 %34, 255
  %36 = getelementptr inbounds i8, i8* %0, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = ashr i32 %38, 3
  %40 = or i32 %35, %39
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %0, i64 3
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, 4
  %47 = and i32 %46, 255
  %48 = getelementptr inbounds i8, i8* %0, i64 4
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = ashr i32 %50, 4
  %52 = or i32 %47, %51
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  store i8 %53, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %0, i64 4
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = shl i32 %57, 3
  %59 = and i32 %58, 255
  %60 = getelementptr inbounds i8, i8* %0, i64 5
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = ashr i32 %62, 5
  %64 = or i32 %59, %63
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  store i8 %65, i8* %66, align 1
  %67 = getelementptr inbounds i8, i8* %0, i64 5
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl i32 %69, 2
  %71 = and i32 %70, 255
  %72 = getelementptr inbounds i8, i8* %0, i64 6
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = ashr i32 %74, 6
  %76 = or i32 %71, %75
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  store i8 %77, i8* %78, align 1
  %79 = getelementptr inbounds i8, i8* %0, i64 6
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = shl i32 %81, 1
  %83 = and i32 %82, 255
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  %87 = call i32 @nettle_des_set_key(%struct.des_ctx* %1, i8* %86)
  ret void
}

declare dso_local void @nettle_des_encrypt(%struct.des_ctx*, i64, i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @calc_resp(i8*, i8*, i8*) #0 {
  %4 = alloca %struct.des_ctx, align 4, !track !852
  call void @setup_des_key(i8* %0, %struct.des_ctx* %4)
  call void @nettle_des_encrypt(%struct.des_ctx* %4, i64 8, i8* %2, i8* %1)
  %5 = getelementptr inbounds i8, i8* %0, i64 7
  call void @setup_des_key(i8* %5, %struct.des_ctx* %4)
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  call void @nettle_des_encrypt(%struct.des_ctx* %4, i64 8, i8* %6, i8* %1)
  %7 = getelementptr inbounds i8, i8* %0, i64 14
  call void @setup_des_key(i8* %7, %struct.des_ctx* %4)
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  call void @nettle_des_encrypt(%struct.des_ctx* %4, i64 8, i8* %8, i8* %1)
  ret void
}

declare dso_local void @nettle_md4_init(%struct.md4_ctx*) #3

declare dso_local void @nettle_md4_update(%struct.md4_ctx*, i64, i8*) #3

declare dso_local void @nettle_md4_digest(%struct.md4_ctx*, i64, i8*) #3

declare dso_local i32 @nettle_des_set_key(%struct.des_ctx*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @base32_encode(i8* noalias, i64, i8* noalias, i64) #0 {
  %5 = icmp ne i64 %1, 0
  %6 = icmp ne i64 %3, 0
  %spec.select2 = select i1 %5, i1 %6, i1 false
  br i1 %spec.select2, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %4
  br label %7

; <label>:7:                                      ; preds = %.lr.ph, %188
  %.06 = phi i8* [ %0, %.lr.ph ], [ %.1, %188 ]
  %.015 = phi i64 [ %1, %.lr.ph ], [ %spec.select1, %188 ]
  %.034 = phi i8* [ %2, %.lr.ph ], [ %185, %188 ]
  %.053 = phi i64 [ %3, %.lr.ph ], [ %186, %188 ]
  %8 = load i8, i8* %.06, align 1
  %9 = call zeroext i8 @to_uchar(i8 signext %8)
  %10 = zext i8 %9 to i32
  %11 = ashr i32 %10, 3
  %12 = and i32 %11, 31
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %.034, i32 1
  store i8 %15, i8* %.034, align 1
  %17 = add i64 %.053, -1
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %..loopexit_crit_edge29

; <label>:19:                                     ; preds = %7
  %20 = load i8, i8* %.06, align 1
  %21 = call zeroext i8 @to_uchar(i8 signext %20)
  %22 = zext i8 %21 to i32
  %23 = shl i32 %22, 2
  %24 = add i64 %.015, -1
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %32

; <label>:26:                                     ; preds = %19
  %27 = getelementptr inbounds i8, i8* %.06, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = call zeroext i8 @to_uchar(i8 signext %28)
  %30 = zext i8 %29 to i32
  %31 = ashr i32 %30, 6
  br label %32

; <label>:32:                                     ; preds = %19, %26
  %33 = phi i32 [ %31, %26 ], [ 0, %19 ]
  %34 = add nsw i32 %23, %33
  %35 = and i32 %34, 31
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %16, i32 1
  store i8 %38, i8* %16, align 1
  %40 = add i64 %17, -1
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %..loopexit_crit_edge26

; <label>:42:                                     ; preds = %32
  %43 = icmp ne i64 %24, 0
  br i1 %43, label %44, label %55

; <label>:44:                                     ; preds = %42
  %45 = getelementptr inbounds i8, i8* %.06, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = call zeroext i8 @to_uchar(i8 signext %46)
  %48 = zext i8 %47 to i32
  %49 = ashr i32 %48, 1
  %50 = and i32 %49, 31
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = sext i8 %53 to i32
  br label %55

; <label>:55:                                     ; preds = %42, %44
  %56 = phi i32 [ %54, %44 ], [ 61, %42 ]
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %39, i32 1
  store i8 %57, i8* %39, align 1
  %59 = add i64 %40, -1
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %61, label %..loopexit_crit_edge23

; <label>:61:                                     ; preds = %55
  %62 = icmp ne i64 %24, 0
  br i1 %62, label %63, label %85

; <label>:63:                                     ; preds = %61
  %64 = getelementptr inbounds i8, i8* %.06, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = call zeroext i8 @to_uchar(i8 signext %65)
  %67 = zext i8 %66 to i32
  %68 = shl i32 %67, 4
  %69 = add i64 %24, -1
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %77

; <label>:71:                                     ; preds = %63
  %72 = getelementptr inbounds i8, i8* %.06, i64 2
  %73 = load i8, i8* %72, align 1
  %74 = call zeroext i8 @to_uchar(i8 signext %73)
  %75 = zext i8 %74 to i32
  %76 = ashr i32 %75, 4
  br label %77

; <label>:77:                                     ; preds = %63, %71
  %78 = phi i32 [ %76, %71 ], [ 0, %63 ]
  %79 = add nsw i32 %68, %78
  %80 = and i32 %79, 31
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  br label %85

; <label>:85:                                     ; preds = %61, %77
  %.12 = phi i64 [ %69, %77 ], [ %24, %61 ]
  %86 = phi i32 [ %84, %77 ], [ 61, %61 ]
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %58, i32 1
  store i8 %87, i8* %58, align 1
  %89 = add i64 %59, -1
  %90 = icmp ne i64 %89, 0
  br i1 %90, label %91, label %..loopexit_crit_edge20

; <label>:91:                                     ; preds = %85
  %92 = icmp ne i64 %.12, 0
  br i1 %92, label %93, label %115

; <label>:93:                                     ; preds = %91
  %94 = getelementptr inbounds i8, i8* %.06, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = call zeroext i8 @to_uchar(i8 signext %95)
  %97 = zext i8 %96 to i32
  %98 = shl i32 %97, 1
  %99 = add i64 %.12, -1
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %107

; <label>:101:                                    ; preds = %93
  %102 = getelementptr inbounds i8, i8* %.06, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = call zeroext i8 @to_uchar(i8 signext %103)
  %105 = zext i8 %104 to i32
  %106 = ashr i32 %105, 7
  br label %107

; <label>:107:                                    ; preds = %93, %101
  %108 = phi i32 [ %106, %101 ], [ 0, %93 ]
  %109 = add nsw i32 %98, %108
  %110 = and i32 %109, 31
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = sext i8 %113 to i32
  br label %115

; <label>:115:                                    ; preds = %91, %107
  %.2 = phi i64 [ %99, %107 ], [ %.12, %91 ]
  %116 = phi i32 [ %114, %107 ], [ 61, %91 ]
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %88, i32 1
  store i8 %117, i8* %88, align 1
  %119 = add i64 %89, -1
  %120 = icmp ne i64 %119, 0
  br i1 %120, label %121, label %..loopexit_crit_edge17

; <label>:121:                                    ; preds = %115
  %122 = icmp ne i64 %.2, 0
  br i1 %122, label %123, label %134

; <label>:123:                                    ; preds = %121
  %124 = getelementptr inbounds i8, i8* %.06, i64 3
  %125 = load i8, i8* %124, align 1
  %126 = call zeroext i8 @to_uchar(i8 signext %125)
  %127 = zext i8 %126 to i32
  %128 = ashr i32 %127, 2
  %129 = and i32 %128, 31
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = sext i8 %132 to i32
  br label %134

; <label>:134:                                    ; preds = %121, %123
  %135 = phi i32 [ %133, %123 ], [ 61, %121 ]
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %118, i32 1
  store i8 %136, i8* %118, align 1
  %138 = add i64 %119, -1
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %..loopexit_crit_edge14

; <label>:140:                                    ; preds = %134
  %141 = icmp ne i64 %.2, 0
  br i1 %141, label %142, label %164

; <label>:142:                                    ; preds = %140
  %143 = getelementptr inbounds i8, i8* %.06, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = call zeroext i8 @to_uchar(i8 signext %144)
  %146 = zext i8 %145 to i32
  %147 = shl i32 %146, 3
  %148 = add i64 %.2, -1
  %149 = icmp ne i64 %148, 0
  br i1 %149, label %150, label %156

; <label>:150:                                    ; preds = %142
  %151 = getelementptr inbounds i8, i8* %.06, i64 4
  %152 = load i8, i8* %151, align 1
  %153 = call zeroext i8 @to_uchar(i8 signext %152)
  %154 = zext i8 %153 to i32
  %155 = ashr i32 %154, 5
  br label %156

; <label>:156:                                    ; preds = %142, %150
  %157 = phi i32 [ %155, %150 ], [ 0, %142 ]
  %158 = add nsw i32 %147, %157
  %159 = and i32 %158, 31
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  br label %164

; <label>:164:                                    ; preds = %140, %156
  %.3 = phi i64 [ %148, %156 ], [ %.2, %140 ]
  %165 = phi i32 [ %163, %156 ], [ 61, %140 ]
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds i8, i8* %137, i32 1
  store i8 %166, i8* %137, align 1
  %168 = add i64 %138, -1
  %169 = icmp ne i64 %168, 0
  br i1 %169, label %170, label %..loopexit_crit_edge11

; <label>:170:                                    ; preds = %164
  %171 = icmp ne i64 %.3, 0
  br i1 %171, label %172, label %182

; <label>:172:                                    ; preds = %170
  %173 = getelementptr inbounds i8, i8* %.06, i64 4
  %174 = load i8, i8* %173, align 1
  %175 = call zeroext i8 @to_uchar(i8 signext %174)
  %176 = zext i8 %175 to i32
  %177 = and i32 %176, 31
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds [32 x i8], [32 x i8]* @base32_encode.b32str, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = sext i8 %180 to i32
  br label %182

; <label>:182:                                    ; preds = %170, %172
  %183 = phi i32 [ %181, %172 ], [ 61, %170 ]
  %184 = trunc i32 %183 to i8
  %185 = getelementptr inbounds i8, i8* %167, i32 1
  store i8 %184, i8* %167, align 1
  %186 = add i64 %168, -1
  %187 = icmp ne i64 %186, 0
  br i1 %187, label %188, label %..loopexit_crit_edge8

; <label>:188:                                    ; preds = %182
  %189 = icmp ne i64 %.3, 0
  %190 = add i64 %.3, -1
  %spec.select1 = select i1 %189, i64 %190, i64 %.3
  %191 = icmp ne i64 %spec.select1, 0
  %192 = getelementptr inbounds i8, i8* %.06, i64 5
  %.1 = select i1 %191, i8* %192, i8* %.06
  %193 = icmp ne i64 %spec.select1, 0
  %194 = icmp ne i64 %186, 0
  %spec.select = select i1 %193, i1 %194, i1 false
  br i1 %spec.select, label %7, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %188
  %split = phi i64 [ %186, %188 ]
  %split7 = phi i8* [ %185, %188 ]
  br label %.loopexit

..loopexit_crit_edge8:                            ; preds = %182
  %split9 = phi i64 [ %186, %182 ]
  %split10 = phi i8* [ %185, %182 ]
  br label %.loopexit

..loopexit_crit_edge11:                           ; preds = %164
  %split12 = phi i64 [ %168, %164 ]
  %split13 = phi i8* [ %167, %164 ]
  br label %.loopexit

..loopexit_crit_edge14:                           ; preds = %134
  %split15 = phi i64 [ %138, %134 ]
  %split16 = phi i8* [ %137, %134 ]
  br label %.loopexit

..loopexit_crit_edge17:                           ; preds = %115
  %split18 = phi i64 [ %119, %115 ]
  %split19 = phi i8* [ %118, %115 ]
  br label %.loopexit

..loopexit_crit_edge20:                           ; preds = %85
  %split21 = phi i64 [ %89, %85 ]
  %split22 = phi i8* [ %88, %85 ]
  br label %.loopexit

..loopexit_crit_edge23:                           ; preds = %55
  %split24 = phi i64 [ %59, %55 ]
  %split25 = phi i8* [ %58, %55 ]
  br label %.loopexit

..loopexit_crit_edge26:                           ; preds = %32
  %split27 = phi i64 [ %40, %32 ]
  %split28 = phi i8* [ %39, %32 ]
  br label %.loopexit

..loopexit_crit_edge29:                           ; preds = %7
  %split30 = phi i64 [ %17, %7 ]
  %split31 = phi i8* [ %16, %7 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge29, %..loopexit_crit_edge26, %..loopexit_crit_edge23, %..loopexit_crit_edge20, %..loopexit_crit_edge17, %..loopexit_crit_edge14, %..loopexit_crit_edge11, %..loopexit_crit_edge8, %..loopexit_crit_edge, %4
  %.16 = phi i64 [ %split30, %..loopexit_crit_edge29 ], [ %split27, %..loopexit_crit_edge26 ], [ %split24, %..loopexit_crit_edge23 ], [ %split21, %..loopexit_crit_edge20 ], [ %split18, %..loopexit_crit_edge17 ], [ %split15, %..loopexit_crit_edge14 ], [ %split12, %..loopexit_crit_edge11 ], [ %split9, %..loopexit_crit_edge8 ], [ %split, %..loopexit_crit_edge ], [ %3, %4 ]
  %.14 = phi i8* [ %split31, %..loopexit_crit_edge29 ], [ %split28, %..loopexit_crit_edge26 ], [ %split25, %..loopexit_crit_edge23 ], [ %split22, %..loopexit_crit_edge20 ], [ %split19, %..loopexit_crit_edge17 ], [ %split16, %..loopexit_crit_edge14 ], [ %split13, %..loopexit_crit_edge11 ], [ %split10, %..loopexit_crit_edge8 ], [ %split7, %..loopexit_crit_edge ], [ %2, %4 ]
  %195 = icmp ne i64 %.16, 0
  br i1 %195, label %196, label %197

; <label>:196:                                    ; preds = %.loopexit
  store i8 0, i8* %.14, align 1
  br label %197

; <label>:197:                                    ; preds = %196, %.loopexit
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @to_uchar(i8 signext) #0 {
  ret i8 %0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @base32_encode_alloc(i8*, i64, i8**) #0 {
  %4 = add i64 %1, 4
  %5 = udiv i64 %4, 5
  %6 = mul i64 %5, 8
  %7 = add i64 1, %6
  %8 = icmp ugt i64 %1, %7
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  store i8* null, i8** %2, align 8
  br label %17

; <label>:10:                                     ; preds = %3
  %11 = call noalias i8* @malloc(i64 %7) #8
  store i8* %11, i8** %2, align 8
  %12 = load i8*, i8** %2, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %17

; <label>:14:                                     ; preds = %10
  %15 = load i8*, i8** %2, align 8
  call void @base32_encode(i8* %0, i64 %1, i8* %15, i64 %7)
  %16 = sub i64 %7, 1
  br label %17

; <label>:17:                                     ; preds = %10, %14, %9
  %.0 = phi i64 [ 0, %9 ], [ %16, %14 ], [ %7, %10 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind readnone uwtable
define dso_local zeroext i1 @isbase32(i8 signext) #11 {
  %2 = call zeroext i8 @to_uchar(i8 signext %0)
  %3 = zext i8 %2 to i64
  %4 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp sle i32 0, %6
  ret i1 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @base32_decode_ctx_init(%struct.ntlmdata*) #0 {
  %2 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @base32_decode_ctx(%struct.ntlmdata*, i8* noalias, i64, i8* noalias, i64*) #0 {
  %6 = alloca i8*, align 8, !track !853
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8, !track !854
  %9 = alloca i64, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  store i8* %3, i8** %8, align 8
  %10 = load i64, i64* %4, align 8
  store i64 %10, i64* %9, align 8
  %11 = icmp ne %struct.ntlmdata* %0, null
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %5
  %15 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = load i64, i64* %7, align 8
  %18 = icmp eq i64 %17, 0
  %19 = zext i1 %18 to i8
  br label %20

; <label>:20:                                     ; preds = %14, %5
  %.03 = phi i8 [ %19, %14 ], [ 0, %5 ]
  %.02 = phi i32 [ %16, %14 ], [ 0, %5 ]
  br label %21

; <label>:21:                                     ; preds = %.backedge, %20
  call void @unroll_loop(i32 420)
  %22 = load i64, i64* %9, align 8
  %23 = icmp eq i32 %.02, 0
  br i1 %23, label %24, label %._crit_edge

; <label>:24:                                     ; preds = %21
  %25 = trunc i8 %.03 to i1
  br i1 %25, label %._crit_edge, label %26

; <label>:26:                                     ; preds = %24
  %27 = load i64, i64* %9, align 8
  %28 = load i8*, i8** %6, align 8
  %29 = load i64, i64* %7, align 8
  %30 = call zeroext i1 @decode_8(i8* %28, i64 %29, i8** %8, i64* %9)
  br i1 %30, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %26
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 421)
  %31 = load i8*, i8** %6, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 8
  store i8* %32, i8** %6, align 8
  %33 = load i64, i64* %7, align 8
  %34 = sub i64 %33, 8
  store i64 %34, i64* %7, align 8
  %35 = load i64, i64* %9, align 8
  %36 = load i8*, i8** %6, align 8
  %37 = load i64, i64* %7, align 8
  %38 = call zeroext i1 @decode_8(i8* %36, i64 %37, i8** %8, i64* %9)
  br i1 %38, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.01.ph = phi i64 [ %35, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %26, %24, %21
  %.01 = phi i64 [ %22, %24 ], [ %22, %21 ], [ %27, %26 ], [ %.01.ph, %._crit_edge.loopexit ]
  %39 = load i64, i64* %7, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %43

; <label>:41:                                     ; preds = %._crit_edge
  %42 = trunc i8 %.03 to i1
  br i1 %42, label %43, label %.loopexit

; <label>:43:                                     ; preds = %41, %._crit_edge
  %44 = load i64, i64* %7, align 8
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %58

; <label>:46:                                     ; preds = %43
  %47 = load i8*, i8** %6, align 8
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp eq i32 %49, 10
  br i1 %50, label %51, label %58

; <label>:51:                                     ; preds = %46
  %52 = trunc i8 %12 to i1
  br i1 %52, label %53, label %58

; <label>:53:                                     ; preds = %51
  %54 = load i8*, i8** %6, align 8
  %55 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %55, i8** %6, align 8
  %56 = load i64, i64* %7, align 8
  %57 = add i64 %56, -1
  store i64 %57, i64* %7, align 8
  br label %.backedge

; <label>:58:                                     ; preds = %51, %46, %43
  %59 = load i64, i64* %9, align 8
  %60 = sub i64 %.01, %59
  %61 = load i8*, i8** %8, align 8
  %62 = sub i64 0, %60
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  store i8* %63, i8** %8, align 8
  store i64 %.01, i64* %9, align 8
  %64 = load i8*, i8** %6, align 8
  %65 = load i64, i64* %7, align 8
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = trunc i8 %12 to i1
  br i1 %67, label %68, label %70

; <label>:68:                                     ; preds = %58
  %69 = call i8* @get_8(%struct.ntlmdata* %0, i8** %6, i8* %66, i64* %7)
  br label %72

; <label>:70:                                     ; preds = %58
  %71 = load i8*, i8** %6, align 8
  br label %72

; <label>:72:                                     ; preds = %70, %68
  %.0 = phi i8* [ %69, %68 ], [ %71, %70 ]
  %73 = load i64, i64* %7, align 8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %82, label %75

; <label>:75:                                     ; preds = %72
  %76 = load i64, i64* %7, align 8
  %77 = icmp ult i64 %76, 8
  br i1 %77, label %78, label %83

; <label>:78:                                     ; preds = %75
  %79 = trunc i8 %.03 to i1
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %78
  %81 = trunc i8 %12 to i1
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %80, %72
  store i64 0, i64* %7, align 8
  br label %91

; <label>:83:                                     ; preds = %80, %78, %75
  %84 = load i64, i64* %7, align 8
  %85 = call zeroext i1 @decode_8(i8* %.0, i64 %84, i8** %8, i64* %9)
  br i1 %85, label %86, label %.loopexit

; <label>:86:                                     ; preds = %83
  %87 = load i8*, i8** %6, align 8
  %88 = ptrtoint i8* %66 to i64
  %89 = ptrtoint i8* %87 to i64
  %90 = sub i64 %88, %89
  store i64 %90, i64* %7, align 8
  br label %.backedge

.backedge:                                        ; preds = %86, %53
  br label %21

.loopexit:                                        ; preds = %41, %83
  br label %91

; <label>:91:                                     ; preds = %.loopexit, %82
  %92 = load i64, i64* %9, align 8
  %93 = load i64, i64* %4, align 8
  %94 = sub i64 %93, %92
  store i64 %94, i64* %4, align 8
  %95 = load i64, i64* %7, align 8
  %96 = icmp eq i64 %95, 0
  ret i1 %96
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @decode_8(i8* noalias, i64, i8**, i64*) #0 {
  %5 = load i8*, i8** %2, align 8
  %6 = icmp ult i64 %1, 8
  br i1 %6, label %259, label %7

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds i8, i8* %0, i64 0
  %9 = load i8, i8* %8, align 1
  %10 = call zeroext i1 @isbase32(i8 signext %9) #15
  br i1 %10, label %11, label %259

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = call zeroext i1 @isbase32(i8 signext %13) #15
  br i1 %14, label %15, label %259

; <label>:15:                                     ; preds = %11
  %16 = load i64, i64* %3, align 8
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %40

; <label>:18:                                     ; preds = %15
  %19 = getelementptr inbounds i8, i8* %0, i64 0
  %20 = load i8, i8* %19, align 1
  %21 = call zeroext i8 @to_uchar(i8 signext %20)
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = shl i32 %25, 3
  %27 = getelementptr inbounds i8, i8* %0, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = call zeroext i8 @to_uchar(i8 signext %28)
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = ashr i32 %33, 2
  %35 = or i32 %26, %34
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds i8, i8* %5, i32 1
  store i8 %36, i8* %5, align 1
  %38 = load i64, i64* %3, align 8
  %39 = add i64 %38, -1
  store i64 %39, i64* %3, align 8
  br label %40

; <label>:40:                                     ; preds = %18, %15
  %.01 = phi i8* [ %37, %18 ], [ %5, %15 ]
  %41 = getelementptr inbounds i8, i8* %0, i64 2
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp eq i32 %43, 61
  br i1 %44, label %45, label %71

; <label>:45:                                     ; preds = %40
  %46 = getelementptr inbounds i8, i8* %0, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp ne i32 %48, 61
  br i1 %49, label %70, label %50

; <label>:50:                                     ; preds = %45
  %51 = getelementptr inbounds i8, i8* %0, i64 4
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp ne i32 %53, 61
  br i1 %54, label %70, label %55

; <label>:55:                                     ; preds = %50
  %56 = getelementptr inbounds i8, i8* %0, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp ne i32 %58, 61
  br i1 %59, label %70, label %60

; <label>:60:                                     ; preds = %55
  %61 = getelementptr inbounds i8, i8* %0, i64 6
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp ne i32 %63, 61
  br i1 %64, label %70, label %65

; <label>:65:                                     ; preds = %60
  %66 = getelementptr inbounds i8, i8* %0, i64 7
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp ne i32 %68, 61
  br i1 %69, label %70, label %258

; <label>:70:                                     ; preds = %45, %50, %55, %60, %65
  store i8* %.01, i8** %2, align 8
  br label %259

; <label>:71:                                     ; preds = %40
  %72 = getelementptr inbounds i8, i8* %0, i64 2
  %73 = load i8, i8* %72, align 1
  %74 = call zeroext i1 @isbase32(i8 signext %73) #15
  br i1 %74, label %75, label %79

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds i8, i8* %0, i64 3
  %77 = load i8, i8* %76, align 1
  %78 = call zeroext i1 @isbase32(i8 signext %77) #15
  br i1 %78, label %80, label %79

; <label>:79:                                     ; preds = %71, %75
  store i8* %.01, i8** %2, align 8
  br label %259

; <label>:80:                                     ; preds = %75
  %81 = load i64, i64* %3, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %114

; <label>:83:                                     ; preds = %80
  %84 = getelementptr inbounds i8, i8* %0, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = call zeroext i8 @to_uchar(i8 signext %85)
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = shl i32 %90, 6
  %92 = getelementptr inbounds i8, i8* %0, i64 2
  %93 = load i8, i8* %92, align 1
  %94 = call zeroext i8 @to_uchar(i8 signext %93)
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = sext i8 %97 to i32
  %99 = shl i32 %98, 1
  %100 = or i32 %91, %99
  %101 = getelementptr inbounds i8, i8* %0, i64 3
  %102 = load i8, i8* %101, align 1
  %103 = call zeroext i8 @to_uchar(i8 signext %102)
  %104 = zext i8 %103 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = ashr i32 %107, 4
  %109 = or i32 %100, %108
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds i8, i8* %.01, i32 1
  store i8 %110, i8* %.01, align 1
  %112 = load i64, i64* %3, align 8
  %113 = add i64 %112, -1
  store i64 %113, i64* %3, align 8
  br label %114

; <label>:114:                                    ; preds = %83, %80
  %.1 = phi i8* [ %111, %83 ], [ %.01, %80 ]
  %115 = getelementptr inbounds i8, i8* %0, i64 4
  %116 = load i8, i8* %115, align 1
  %117 = sext i8 %116 to i32
  %118 = icmp eq i32 %117, 61
  br i1 %118, label %119, label %135

; <label>:119:                                    ; preds = %114
  %120 = getelementptr inbounds i8, i8* %0, i64 5
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = icmp ne i32 %122, 61
  br i1 %123, label %134, label %124

; <label>:124:                                    ; preds = %119
  %125 = getelementptr inbounds i8, i8* %0, i64 6
  %126 = load i8, i8* %125, align 1
  %127 = sext i8 %126 to i32
  %128 = icmp ne i32 %127, 61
  br i1 %128, label %134, label %129

; <label>:129:                                    ; preds = %124
  %130 = getelementptr inbounds i8, i8* %0, i64 7
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i32
  %133 = icmp ne i32 %132, 61
  br i1 %133, label %134, label %258

; <label>:134:                                    ; preds = %119, %124, %129
  store i8* %.1, i8** %2, align 8
  br label %259

; <label>:135:                                    ; preds = %114
  %136 = getelementptr inbounds i8, i8* %0, i64 4
  %137 = load i8, i8* %136, align 1
  %138 = call zeroext i1 @isbase32(i8 signext %137) #15
  br i1 %138, label %140, label %139

; <label>:139:                                    ; preds = %135
  store i8* %.1, i8** %2, align 8
  br label %259

; <label>:140:                                    ; preds = %135
  %141 = load i64, i64* %3, align 8
  %142 = icmp ne i64 %141, 0
  br i1 %142, label %143, label %165

; <label>:143:                                    ; preds = %140
  %144 = getelementptr inbounds i8, i8* %0, i64 3
  %145 = load i8, i8* %144, align 1
  %146 = call zeroext i8 @to_uchar(i8 signext %145)
  %147 = zext i8 %146 to i64
  %148 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = shl i32 %150, 4
  %152 = getelementptr inbounds i8, i8* %0, i64 4
  %153 = load i8, i8* %152, align 1
  %154 = call zeroext i8 @to_uchar(i8 signext %153)
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = sext i8 %157 to i32
  %159 = ashr i32 %158, 1
  %160 = or i32 %151, %159
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds i8, i8* %.1, i32 1
  store i8 %161, i8* %.1, align 1
  %163 = load i64, i64* %3, align 8
  %164 = add i64 %163, -1
  store i64 %164, i64* %3, align 8
  br label %165

; <label>:165:                                    ; preds = %143, %140
  %.2 = phi i8* [ %162, %143 ], [ %.1, %140 ]
  %166 = getelementptr inbounds i8, i8* %0, i64 5
  %167 = load i8, i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = icmp eq i32 %168, 61
  br i1 %169, label %170, label %181

; <label>:170:                                    ; preds = %165
  %171 = getelementptr inbounds i8, i8* %0, i64 6
  %172 = load i8, i8* %171, align 1
  %173 = sext i8 %172 to i32
  %174 = icmp ne i32 %173, 61
  br i1 %174, label %180, label %175

; <label>:175:                                    ; preds = %170
  %176 = getelementptr inbounds i8, i8* %0, i64 7
  %177 = load i8, i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = icmp ne i32 %178, 61
  br i1 %179, label %180, label %258

; <label>:180:                                    ; preds = %170, %175
  store i8* %.2, i8** %2, align 8
  br label %259

; <label>:181:                                    ; preds = %165
  %182 = getelementptr inbounds i8, i8* %0, i64 5
  %183 = load i8, i8* %182, align 1
  %184 = call zeroext i1 @isbase32(i8 signext %183) #15
  br i1 %184, label %185, label %189

; <label>:185:                                    ; preds = %181
  %186 = getelementptr inbounds i8, i8* %0, i64 6
  %187 = load i8, i8* %186, align 1
  %188 = call zeroext i1 @isbase32(i8 signext %187) #15
  br i1 %188, label %190, label %189

; <label>:189:                                    ; preds = %181, %185
  store i8* %.2, i8** %2, align 8
  br label %259

; <label>:190:                                    ; preds = %185
  %191 = load i64, i64* %3, align 8
  %192 = icmp ne i64 %191, 0
  br i1 %192, label %193, label %224

; <label>:193:                                    ; preds = %190
  %194 = getelementptr inbounds i8, i8* %0, i64 4
  %195 = load i8, i8* %194, align 1
  %196 = call zeroext i8 @to_uchar(i8 signext %195)
  %197 = zext i8 %196 to i64
  %198 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = sext i8 %199 to i32
  %201 = shl i32 %200, 7
  %202 = getelementptr inbounds i8, i8* %0, i64 5
  %203 = load i8, i8* %202, align 1
  %204 = call zeroext i8 @to_uchar(i8 signext %203)
  %205 = zext i8 %204 to i64
  %206 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = sext i8 %207 to i32
  %209 = shl i32 %208, 2
  %210 = or i32 %201, %209
  %211 = getelementptr inbounds i8, i8* %0, i64 6
  %212 = load i8, i8* %211, align 1
  %213 = call zeroext i8 @to_uchar(i8 signext %212)
  %214 = zext i8 %213 to i64
  %215 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %214
  %216 = load i8, i8* %215, align 1
  %217 = sext i8 %216 to i32
  %218 = ashr i32 %217, 3
  %219 = or i32 %210, %218
  %220 = trunc i32 %219 to i8
  %221 = getelementptr inbounds i8, i8* %.2, i32 1
  store i8 %220, i8* %.2, align 1
  %222 = load i64, i64* %3, align 8
  %223 = add i64 %222, -1
  store i64 %223, i64* %3, align 8
  br label %224

; <label>:224:                                    ; preds = %193, %190
  %.3 = phi i8* [ %221, %193 ], [ %.2, %190 ]
  %225 = getelementptr inbounds i8, i8* %0, i64 7
  %226 = load i8, i8* %225, align 1
  %227 = sext i8 %226 to i32
  %228 = icmp ne i32 %227, 61
  br i1 %228, label %229, label %258

; <label>:229:                                    ; preds = %224
  %230 = getelementptr inbounds i8, i8* %0, i64 7
  %231 = load i8, i8* %230, align 1
  %232 = call zeroext i1 @isbase32(i8 signext %231) #15
  br i1 %232, label %234, label %233

; <label>:233:                                    ; preds = %229
  store i8* %.3, i8** %2, align 8
  br label %259

; <label>:234:                                    ; preds = %229
  %235 = load i64, i64* %3, align 8
  %236 = icmp ne i64 %235, 0
  br i1 %236, label %237, label %258

; <label>:237:                                    ; preds = %234
  %238 = getelementptr inbounds i8, i8* %0, i64 6
  %239 = load i8, i8* %238, align 1
  %240 = call zeroext i8 @to_uchar(i8 signext %239)
  %241 = zext i8 %240 to i64
  %242 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = sext i8 %243 to i32
  %245 = shl i32 %244, 5
  %246 = getelementptr inbounds i8, i8* %0, i64 7
  %247 = load i8, i8* %246, align 1
  %248 = call zeroext i8 @to_uchar(i8 signext %247)
  %249 = zext i8 %248 to i64
  %250 = getelementptr inbounds [256 x i8], [256 x i8]* @b32, i64 0, i64 %249
  %251 = load i8, i8* %250, align 1
  %252 = sext i8 %251 to i32
  %253 = or i32 %245, %252
  %254 = trunc i32 %253 to i8
  %255 = getelementptr inbounds i8, i8* %.3, i32 1
  store i8 %254, i8* %.3, align 1
  %256 = load i64, i64* %3, align 8
  %257 = add i64 %256, -1
  store i64 %257, i64* %3, align 8
  br label %258

; <label>:258:                                    ; preds = %129, %224, %237, %234, %175, %65
  %.8 = phi i8* [ %.01, %65 ], [ %.1, %129 ], [ %.2, %175 ], [ %.3, %224 ], [ %255, %237 ], [ %.3, %234 ]
  store i8* %.8, i8** %2, align 8
  br label %259

; <label>:259:                                    ; preds = %7, %11, %4, %258, %233, %189, %180, %139, %134, %79, %70
  %.0 = phi i1 [ false, %70 ], [ true, %258 ], [ false, %134 ], [ false, %180 ], [ false, %233 ], [ false, %189 ], [ false, %139 ], [ false, %79 ], [ false, %4 ], [ false, %11 ], [ false, %7 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_8(%struct.ntlmdata*, i8**, i8* noalias, i64*) #0 {
  %5 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 8
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  store i32 0, i32* %9, align 4
  br label %10

; <label>:10:                                     ; preds = %8, %4
  %11 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %27

; <label>:14:                                     ; preds = %10
  %15 = load i8*, i8** %1, align 8
  %16 = load i8*, i8** %1, align 8
  %17 = ptrtoint i8* %2 to i64
  %18 = ptrtoint i8* %16 to i64
  %19 = sub i64 %17, %18
  %20 = icmp sle i64 8, %19
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %14
  %22 = call i8* @memchr(i8* %15, i32 10, i64 8) #14, !track !855
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %21
  %25 = load i8*, i8** %1, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 8
  store i8* %26, i8** %1, align 8
  store i64 8, i64* %3, align 8
  br label %51

; <label>:27:                                     ; preds = %14, %21, %10
  %28 = load i8*, i8** %1, align 8
  %29 = icmp ult i8* %28, %2
  br i1 %29, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %27
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.backedge, %.lr.ph.preheader
  %.012 = phi i8* [ %28, %.lr.ph.preheader ], [ %30, %.lr.ph.backedge ]
  call void @unroll_loop(i32 422)
  %30 = getelementptr inbounds i8, i8* %.012, i32 1
  %31 = load i8, i8* %.012, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp ne i32 %32, 10
  br i1 %33, label %34, label %45

; <label>:34:                                     ; preds = %.lr.ph
  %35 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 1
  %36 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %37, 1
  store i32 %38, i32* %36, align 4
  %39 = zext i32 %37 to i64
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %35, i64 0, i64 %39
  store i8 %31, i8* %40, align 1
  %41 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp ne i32 %42, 8
  %44 = icmp ult i8* %30, %2
  %or.cond = and i1 %43, %44
  br i1 %or.cond, label %.lr.ph.backedge, label %.loopexit.loopexit

; <label>:45:                                     ; preds = %.lr.ph
  %.old = icmp ult i8* %30, %2
  br i1 %.old, label %.lr.ph.backedge, label %.loopexit.loopexit

.lr.ph.backedge:                                  ; preds = %45, %34
  br label %.lr.ph

.loopexit.loopexit:                               ; preds = %45, %34
  %.1.ph = phi i8* [ %30, %45 ], [ %30, %34 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %27
  %.1 = phi i8* [ %28, %27 ], [ %.1.ph, %.loopexit.loopexit ]
  store i8* %.1, i8** %1, align 8
  %46 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i64
  store i64 %48, i64* %3, align 8
  %49 = getelementptr inbounds %struct.ntlmdata, %struct.ntlmdata* %0, i32 0, i32 1
  %50 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i32 0, i32 0
  br label %51

; <label>:51:                                     ; preds = %.loopexit, %24
  %.0 = phi i8* [ %15, %24 ], [ %50, %.loopexit ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @base32_decode_alloc_ctx(%struct.ntlmdata*, i8*, i64, i8**, i64*) #0 {
  %6 = alloca i64, align 8
  %7 = udiv i64 %2, 8
  %8 = mul i64 5, %7
  %9 = add i64 %8, 5
  store i64 %9, i64* %6, align 8
  %10 = load i64, i64* %6, align 8
  %11 = call noalias i8* @malloc(i64 %10) #8, !track !856
  store i8* %11, i8** %3, align 8
  %12 = load i8*, i8** %3, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %5
  %15 = load i8*, i8** %3, align 8
  %16 = call zeroext i1 @base32_decode_ctx(%struct.ntlmdata* %0, i8* %1, i64 %2, i8* %15, i64* %6)
  br i1 %16, label %19, label %17

; <label>:17:                                     ; preds = %14
  %18 = load i8*, i8** %3, align 8
  call void @free(i8* %18) #8
  store i8* null, i8** %3, align 8
  br label %23

; <label>:19:                                     ; preds = %14
  %20 = icmp ne i64* %4, null
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %19
  %22 = load i64, i64* %6, align 8
  store i64 %22, i64* %4, align 8
  br label %23

; <label>:23:                                     ; preds = %19, %21, %5, %17
  %.0 = phi i1 [ false, %17 ], [ true, %5 ], [ true, %21 ], [ true, %19 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isalnum(i32) #0 {
  switch i32 %0, label %2 [
    i32 48, label %3
    i32 49, label %3
    i32 50, label %3
    i32 51, label %3
    i32 52, label %3
    i32 53, label %3
    i32 54, label %3
    i32 55, label %3
    i32 56, label %3
    i32 57, label %3
    i32 97, label %3
    i32 98, label %3
    i32 99, label %3
    i32 100, label %3
    i32 101, label %3
    i32 102, label %3
    i32 103, label %3
    i32 104, label %3
    i32 105, label %3
    i32 106, label %3
    i32 107, label %3
    i32 108, label %3
    i32 109, label %3
    i32 110, label %3
    i32 111, label %3
    i32 112, label %3
    i32 113, label %3
    i32 114, label %3
    i32 115, label %3
    i32 116, label %3
    i32 117, label %3
    i32 118, label %3
    i32 119, label %3
    i32 120, label %3
    i32 121, label %3
    i32 122, label %3
    i32 65, label %3
    i32 66, label %3
    i32 67, label %3
    i32 68, label %3
    i32 69, label %3
    i32 70, label %3
    i32 71, label %3
    i32 72, label %3
    i32 73, label %3
    i32 74, label %3
    i32 75, label %3
    i32 76, label %3
    i32 77, label %3
    i32 78, label %3
    i32 79, label %3
    i32 80, label %3
    i32 81, label %3
    i32 82, label %3
    i32 83, label %3
    i32 84, label %3
    i32 85, label %3
    i32 86, label %3
    i32 87, label %3
    i32 88, label %3
    i32 89, label %3
    i32 90, label %3
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %.0 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isalpha(i32) #0 {
  switch i32 %0, label %2 [
    i32 97, label %3
    i32 98, label %3
    i32 99, label %3
    i32 100, label %3
    i32 101, label %3
    i32 102, label %3
    i32 103, label %3
    i32 104, label %3
    i32 105, label %3
    i32 106, label %3
    i32 107, label %3
    i32 108, label %3
    i32 109, label %3
    i32 110, label %3
    i32 111, label %3
    i32 112, label %3
    i32 113, label %3
    i32 114, label %3
    i32 115, label %3
    i32 116, label %3
    i32 117, label %3
    i32 118, label %3
    i32 119, label %3
    i32 120, label %3
    i32 121, label %3
    i32 122, label %3
    i32 65, label %3
    i32 66, label %3
    i32 67, label %3
    i32 68, label %3
    i32 69, label %3
    i32 70, label %3
    i32 71, label %3
    i32 72, label %3
    i32 73, label %3
    i32 74, label %3
    i32 75, label %3
    i32 76, label %3
    i32 77, label %3
    i32 78, label %3
    i32 79, label %3
    i32 80, label %3
    i32 81, label %3
    i32 82, label %3
    i32 83, label %3
    i32 84, label %3
    i32 85, label %3
    i32 86, label %3
    i32 87, label %3
    i32 88, label %3
    i32 89, label %3
    i32 90, label %3
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %.0 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isascii(i32) #0 {
  %switch = icmp ult i32 %0, 128
  %. = select i1 %switch, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isblank(i32) #0 {
  %2 = icmp eq i32 %0, 32
  %3 = icmp eq i32 %0, 9
  %spec.select = select i1 %2, i1 true, i1 %3
  ret i1 %spec.select
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_iscntrl(i32) #0 {
  switch i32 %0, label %2 [
    i32 7, label %3
    i32 8, label %3
    i32 12, label %3
    i32 10, label %3
    i32 13, label %3
    i32 9, label %3
    i32 11, label %3
    i32 0, label %3
    i32 1, label %3
    i32 2, label %3
    i32 3, label %3
    i32 4, label %3
    i32 5, label %3
    i32 6, label %3
    i32 14, label %3
    i32 15, label %3
    i32 16, label %3
    i32 17, label %3
    i32 18, label %3
    i32 19, label %3
    i32 20, label %3
    i32 21, label %3
    i32 22, label %3
    i32 23, label %3
    i32 24, label %3
    i32 25, label %3
    i32 26, label %3
    i32 27, label %3
    i32 28, label %3
    i32 29, label %3
    i32 30, label %3
    i32 31, label %3
    i32 127, label %3
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %.0 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isdigit(i32) #0 {
  %.off = add i32 %0, -48
  %switch = icmp ult i32 %.off, 10
  %. = select i1 %switch, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isgraph(i32) #0 {
  %.off = add i32 %0, -33
  %switch = icmp ult i32 %.off, 94
  %. = select i1 %switch, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_islower(i32) #0 {
  %.off = add i32 %0, -97
  %switch = icmp ult i32 %.off, 26
  %. = select i1 %switch, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isprint(i32) #0 {
  %.off = add i32 %0, -32
  %switch = icmp ult i32 %.off, 95
  %. = select i1 %switch, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_ispunct(i32) #0 {
  switch i32 %0, label %2 [
    i32 33, label %3
    i32 34, label %3
    i32 35, label %3
    i32 36, label %3
    i32 37, label %3
    i32 38, label %3
    i32 39, label %3
    i32 40, label %3
    i32 41, label %3
    i32 42, label %3
    i32 43, label %3
    i32 44, label %3
    i32 45, label %3
    i32 46, label %3
    i32 47, label %3
    i32 58, label %3
    i32 59, label %3
    i32 60, label %3
    i32 61, label %3
    i32 62, label %3
    i32 63, label %3
    i32 64, label %3
    i32 91, label %3
    i32 92, label %3
    i32 93, label %3
    i32 94, label %3
    i32 95, label %3
    i32 96, label %3
    i32 123, label %3
    i32 124, label %3
    i32 125, label %3
    i32 126, label %3
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %.0 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isspace(i32) #0 {
  switch i32 %0, label %2 [
    i32 32, label %3
    i32 9, label %3
    i32 10, label %3
    i32 11, label %3
    i32 12, label %3
    i32 13, label %3
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %1, %1, %1, %1, %1, %2
  %.0 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isupper(i32) #0 {
  %.off = add i32 %0, -65
  %switch = icmp ult i32 %.off, 26
  %. = select i1 %switch, i1 true, i1 false
  ret i1 %.
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @c_isxdigit(i32) #0 {
  switch i32 %0, label %2 [
    i32 48, label %3
    i32 49, label %3
    i32 50, label %3
    i32 51, label %3
    i32 52, label %3
    i32 53, label %3
    i32 54, label %3
    i32 55, label %3
    i32 56, label %3
    i32 57, label %3
    i32 97, label %3
    i32 98, label %3
    i32 99, label %3
    i32 100, label %3
    i32 101, label %3
    i32 102, label %3
    i32 65, label %3
    i32 66, label %3
    i32 67, label %3
    i32 68, label %3
    i32 69, label %3
    i32 70, label %3
  ]

; <label>:2:                                      ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %.0 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @c_tolower(i32) #0 {
  %.off = add i32 %0, -65
  %switch = icmp ult i32 %.off, 26
  %2 = sub nsw i32 %0, 65
  %3 = add nsw i32 %2, 97
  %.0 = select i1 %switch, i32 %3, i32 %0
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @c_toupper(i32) #0 {
  %.off = add i32 %0, -97
  %switch = icmp ult i32 %.off, 26
  %2 = sub nsw i32 %0, 97
  %3 = add nsw i32 %2, 65
  %.0 = select i1 %switch, i32 %3, i32 %0
  ret i32 %.0
}

; Function Attrs: noinline nounwind readonly uwtable
define dso_local i32 @c_strcasecmp(i8*, i8*) #12 {
  %3 = icmp eq i8* %0, %1
  br i1 %3, label %24, label %.preheader

.preheader:                                       ; preds = %2
  br label %4

; <label>:4:                                      ; preds = %.preheader, %15
  %.02 = phi i8* [ %16, %15 ], [ %0, %.preheader ]
  %.01 = phi i8* [ %17, %15 ], [ %1, %.preheader ]
  call void @unroll_loop(i32 423)
  %5 = load i8, i8* %.02, align 1
  %6 = zext i8 %5 to i32
  %7 = call i32 @c_tolower(i32 %6)
  %8 = trunc i32 %7 to i8
  %9 = load i8, i8* %.01, align 1
  %10 = zext i8 %9 to i32
  %11 = call i32 @c_tolower(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = zext i8 %8 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %.loopexit, label %15

; <label>:15:                                     ; preds = %4
  %16 = getelementptr inbounds i8, i8* %.02, i32 1
  %17 = getelementptr inbounds i8, i8* %.01, i32 1
  %18 = zext i8 %8 to i32
  %19 = zext i8 %12 to i32
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %4, label %.loopexit

.loopexit:                                        ; preds = %15, %4
  %.lcssa5 = phi i8 [ %8, %4 ], [ %8, %15 ]
  %.lcssa3 = phi i8 [ %12, %4 ], [ %12, %15 ]
  %21 = zext i8 %.lcssa5 to i32
  %22 = zext i8 %.lcssa3 to i32
  %23 = sub nsw i32 %21, %22
  br label %24

; <label>:24:                                     ; preds = %2, %.loopexit
  %.0 = phi i32 [ %23, %.loopexit ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind readonly uwtable
define dso_local i32 @c_strncasecmp(i8*, i8*, i64) #12 {
  %4 = icmp eq i8* %0, %1
  %5 = icmp eq i64 %2, 0
  %or.cond = or i1 %4, %5
  br i1 %or.cond, label %28, label %.preheader

.preheader:                                       ; preds = %3
  br label %6

; <label>:6:                                      ; preds = %.preheader, %19
  %.03 = phi i64 [ %15, %19 ], [ %2, %.preheader ]
  %.02 = phi i8* [ %20, %19 ], [ %0, %.preheader ]
  %.01 = phi i8* [ %21, %19 ], [ %1, %.preheader ]
  call void @unroll_loop(i32 424)
  %7 = load i8, i8* %.02, align 1
  %8 = zext i8 %7 to i32
  %9 = call i32 @c_tolower(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = load i8, i8* %.01, align 1
  %12 = zext i8 %11 to i32
  %13 = call i32 @c_tolower(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = add i64 %.03, -1
  %16 = icmp eq i64 %15, 0
  %17 = zext i8 %10 to i32
  %18 = icmp eq i32 %17, 0
  %or.cond2 = or i1 %16, %18
  br i1 %or.cond2, label %.loopexit, label %19

; <label>:19:                                     ; preds = %6
  %20 = getelementptr inbounds i8, i8* %.02, i32 1
  %21 = getelementptr inbounds i8, i8* %.01, i32 1
  %22 = zext i8 %10 to i32
  %23 = zext i8 %14 to i32
  %24 = icmp eq i32 %22, %23
  br i1 %24, label %6, label %.loopexit

.loopexit:                                        ; preds = %19, %6
  %.lcssa6 = phi i8 [ %10, %6 ], [ %10, %19 ]
  %.lcssa4 = phi i8 [ %14, %6 ], [ %14, %19 ]
  %25 = zext i8 %.lcssa6 to i32
  %26 = zext i8 %.lcssa4 to i32
  %27 = sub nsw i32 %25, %26
  br label %28

; <label>:28:                                     ; preds = %3, %.loopexit
  %.0 = phi i32 [ %27, %.loopexit ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @c_strcasestr(i8*, i8*) #7 {
  call void @unroll_loop(i32 425)
  %3 = load i8, i8* %0, align 1
  %4 = sext i8 %3 to i32
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %2
  br label %6

; <label>:6:                                      ; preds = %.lr.ph, %10
  %.013 = phi i8 [ 1, %.lr.ph ], [ %25, %10 ]
  %.022 = phi i8* [ %1, %.lr.ph ], [ %15, %10 ]
  %.031 = phi i8* [ %0, %.lr.ph ], [ %11, %10 ]
  %7 = load i8, i8* %.022, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %..critedge_crit_edge5

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds i8, i8* %.031, i32 1
  %12 = load i8, i8* %.031, align 1
  %13 = zext i8 %12 to i32
  %14 = call i32 @c_tolower(i32 %13)
  %15 = getelementptr inbounds i8, i8* %.022, i32 1
  %16 = load i8, i8* %.022, align 1
  %17 = zext i8 %16 to i32
  %18 = call i32 @c_tolower(i32 %17)
  %19 = icmp eq i32 %14, %18
  %20 = zext i1 %19 to i32
  %21 = trunc i8 %.013 to i1
  %22 = zext i1 %21 to i32
  %23 = and i32 %22, %20
  %24 = icmp ne i32 %23, 0
  %25 = zext i1 %24 to i8
  call void @unroll_loop(i32 425)
  %26 = load i8, i8* %11, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %6, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %10
  %split = phi i8* [ %15, %10 ]
  %split4 = phi i8 [ %25, %10 ]
  br label %.critedge

..critedge_crit_edge5:                            ; preds = %6
  %split6 = phi i8* [ %.022, %6 ]
  %split7 = phi i8 [ %.013, %6 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge5, %..critedge_crit_edge, %2
  %.02.lcssa = phi i8* [ %split6, %..critedge_crit_edge5 ], [ %split, %..critedge_crit_edge ], [ %1, %2 ]
  %.01.lcssa = phi i8 [ %split7, %..critedge_crit_edge5 ], [ %split4, %..critedge_crit_edge ], [ 1, %2 ]
  %29 = load i8, i8* %.02.lcssa, align 1
  %30 = icmp ne i8 %29, 0
  br i1 %30, label %44, label %31

; <label>:31:                                     ; preds = %.critedge
  %32 = trunc i8 %.01.lcssa to i1
  br i1 %32, label %44, label %33

; <label>:33:                                     ; preds = %31
  %34 = ptrtoint i8* %.02.lcssa to i64
  %35 = ptrtoint i8* %1 to i64
  %36 = sub i64 %34, %35
  %37 = getelementptr inbounds i8, i8* %0, i64 1
  %38 = sub i64 %36, 1
  %39 = icmp ult i64 %36, 32
  br i1 %39, label %40, label %42

; <label>:40:                                     ; preds = %33
  %41 = call i8* @two_way_short_needle(i8* %37, i64 %38, i8* %1, i64 %36)
  br label %44

; <label>:42:                                     ; preds = %33
  %43 = call i8* @two_way_long_needle(i8* %37, i64 %38, i8* %1, i64 %36)
  br label %44

; <label>:44:                                     ; preds = %31, %.critedge, %42, %40
  %.0 = phi i8* [ %41, %40 ], [ %43, %42 ], [ null, %.critedge ], [ %0, %31 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @two_way_short_needle(i8*, i64, i8*, i64) #7 {
  %5 = alloca i64, align 8
  %6 = call i64 @critical_factorization(i8* %2, i64 %3, i64* %5)
  %7 = load i64, i64* %5, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = call i32 @c_strncasecmp(i8* %2, i8* %8, i64 %6) #14
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %.preheader, label %79

.preheader:                                       ; preds = %4
  call void @unroll_loop(i32 426)
  %11 = getelementptr inbounds i8, i8* %0, i64 %1
  %12 = sub i64 %3, %1
  %13 = call i8* @memchr(i8* %11, i32 0, i64 %12) #14, !track !857
  %14 = icmp ne i8* %13, null
  %15 = icmp ne i64 %3, 0
  %.134 = select i1 %14, i64 %1, i64 %3
  %16 = select i1 %14, i1 false, i1 %15
  br i1 %16, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %17

; <label>:17:                                     ; preds = %.lr.ph, %71
  %.137 = phi i64 [ %.134, %.lr.ph ], [ %.13, %71 ]
  %.016 = phi i64 [ 0, %.lr.ph ], [ %.1, %71 ]
  %.045 = phi i64 [ 0, %.lr.ph ], [ %.15, %71 ]
  %18 = icmp ult i64 %6, %.016
  %.01. = select i1 %18, i64 %.016, i64 %6
  br label %19

; <label>:19:                                     ; preds = %32, %17
  %.08 = phi i64 [ %.01., %17 ], [ %34, %32 ]
  call void @unroll_loop(i32 427)
  %20 = icmp ult i64 %.08, %3
  br i1 %20, label %21, label %32

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds i8, i8* %2, i64 %.08
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = call i32 @c_tolower(i32 %24)
  %26 = add i64 %.08, %.045
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = call i32 @c_tolower(i32 %29)
  %31 = icmp eq i32 %25, %30
  br label %32

; <label>:32:                                     ; preds = %21, %19
  %33 = phi i1 [ false, %19 ], [ %31, %21 ]
  %34 = add i64 %.08, 1
  br i1 %33, label %19, label %35

; <label>:35:                                     ; preds = %32
  %.08.lcssa = phi i64 [ %.08, %32 ]
  %36 = icmp ule i64 %3, %.08.lcssa
  br i1 %36, label %37, label %67

; <label>:37:                                     ; preds = %35
  %38 = sub i64 %6, 1
  br label %39

; <label>:39:                                     ; preds = %53, %37
  %.19 = phi i64 [ %38, %37 ], [ %55, %53 ]
  call void @unroll_loop(i32 428)
  %40 = add i64 %.19, 1
  %41 = icmp ult i64 %.016, %40
  br i1 %41, label %42, label %53

; <label>:42:                                     ; preds = %39
  %43 = getelementptr inbounds i8, i8* %2, i64 %.19
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = call i32 @c_tolower(i32 %45)
  %47 = add i64 %.19, %.045
  %48 = getelementptr inbounds i8, i8* %0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = call i32 @c_tolower(i32 %50)
  %52 = icmp eq i32 %46, %51
  br label %53

; <label>:53:                                     ; preds = %42, %39
  %54 = phi i1 [ false, %39 ], [ %52, %42 ]
  %55 = add i64 %.19, -1
  br i1 %54, label %39, label %56

; <label>:56:                                     ; preds = %53
  %.19.lcssa = phi i64 [ %.19, %53 ]
  %57 = add i64 %.19.lcssa, 1
  %58 = add i64 %.016, 1
  %59 = icmp ult i64 %57, %58
  br i1 %59, label %60, label %62

; <label>:60:                                     ; preds = %56
  %.04.lcssa12 = phi i64 [ %.045, %56 ]
  %61 = getelementptr inbounds i8, i8* %0, i64 %.04.lcssa12
  br label %146

; <label>:62:                                     ; preds = %56
  %63 = load i64, i64* %5, align 8
  %64 = add i64 %.045, %63
  %65 = load i64, i64* %5, align 8
  %66 = sub i64 %3, %65
  br label %71

; <label>:67:                                     ; preds = %35
  %68 = sub i64 %.08.lcssa, %6
  %69 = add i64 %68, 1
  %70 = add i64 %.045, %69
  br label %71

; <label>:71:                                     ; preds = %67, %62
  %.15 = phi i64 [ %64, %62 ], [ %70, %67 ]
  %.1 = phi i64 [ %66, %62 ], [ 0, %67 ]
  call void @unroll_loop(i32 426)
  %72 = getelementptr inbounds i8, i8* %0, i64 %.137
  %73 = add i64 %.15, %3
  %74 = sub i64 %73, %.137
  %75 = call i8* @memchr(i8* %72, i32 0, i64 %74) #14, !track !857
  %76 = icmp ne i8* %75, null
  %77 = icmp ne i64 %73, 0
  %.13 = select i1 %76, i64 %.137, i64 %73
  %78 = select i1 %76, i1 false, i1 %77
  br i1 %78, label %17, label %..loopexit_crit_edge

; <label>:79:                                     ; preds = %4
  %80 = sub i64 %3, %6
  %81 = icmp ult i64 %6, %80
  %82 = sub i64 %3, %6
  %83 = select i1 %81, i64 %82, i64 %6
  %84 = add i64 %83, 1
  store i64 %84, i64* %5, align 8
  call void @unroll_loop(i32 429)
  %85 = getelementptr inbounds i8, i8* %0, i64 %1
  %86 = sub i64 %3, %1
  %87 = call i8* @memchr(i8* %85, i32 0, i64 %86) #14, !track !858
  %88 = icmp ne i8* %87, null
  %89 = icmp ne i64 %3, 0
  %.38 = select i1 %88, i64 %1, i64 %3
  %90 = select i1 %88, i1 false, i1 %89
  br i1 %90, label %.preheader1.lr.ph, label %.loopexit2

.preheader1.lr.ph:                                ; preds = %79
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1.lr.ph, %138
  %.310 = phi i64 [ %.38, %.preheader1.lr.ph ], [ %.3, %138 ]
  %.269 = phi i64 [ 0, %.preheader1.lr.ph ], [ %.37, %138 ]
  br label %91

; <label>:91:                                     ; preds = %.preheader1, %104
  %.210 = phi i64 [ %106, %104 ], [ %6, %.preheader1 ]
  call void @unroll_loop(i32 430)
  %92 = icmp ult i64 %.210, %3
  br i1 %92, label %93, label %104

; <label>:93:                                     ; preds = %91
  %94 = getelementptr inbounds i8, i8* %2, i64 %.210
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = call i32 @c_tolower(i32 %96)
  %98 = add i64 %.210, %.269
  %99 = getelementptr inbounds i8, i8* %0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = call i32 @c_tolower(i32 %101)
  %103 = icmp eq i32 %97, %102
  br label %104

; <label>:104:                                    ; preds = %93, %91
  %105 = phi i1 [ false, %91 ], [ %103, %93 ]
  %106 = add i64 %.210, 1
  br i1 %105, label %91, label %107

; <label>:107:                                    ; preds = %104
  %.210.lcssa = phi i64 [ %.210, %104 ]
  %108 = icmp ule i64 %3, %.210.lcssa
  br i1 %108, label %109, label %134

; <label>:109:                                    ; preds = %107
  %110 = sub i64 %6, 1
  br label %111

; <label>:111:                                    ; preds = %124, %109
  %.311 = phi i64 [ %110, %109 ], [ %126, %124 ]
  call void @unroll_loop(i32 431)
  %112 = icmp ne i64 %.311, -1
  br i1 %112, label %113, label %124

; <label>:113:                                    ; preds = %111
  %114 = getelementptr inbounds i8, i8* %2, i64 %.311
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = call i32 @c_tolower(i32 %116)
  %118 = add i64 %.311, %.269
  %119 = getelementptr inbounds i8, i8* %0, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = call i32 @c_tolower(i32 %121)
  %123 = icmp eq i32 %117, %122
  br label %124

; <label>:124:                                    ; preds = %113, %111
  %125 = phi i1 [ false, %111 ], [ %123, %113 ]
  %126 = add i64 %.311, -1
  br i1 %125, label %111, label %127

; <label>:127:                                    ; preds = %124
  %.311.lcssa = phi i64 [ %.311, %124 ]
  %128 = icmp eq i64 %.311.lcssa, -1
  br i1 %128, label %129, label %131

; <label>:129:                                    ; preds = %127
  %.26.lcssa13 = phi i64 [ %.269, %127 ]
  %130 = getelementptr inbounds i8, i8* %0, i64 %.26.lcssa13
  br label %146

; <label>:131:                                    ; preds = %127
  %132 = load i64, i64* %5, align 8
  %133 = add i64 %.269, %132
  br label %138

; <label>:134:                                    ; preds = %107
  %135 = sub i64 %.210.lcssa, %6
  %136 = add i64 %135, 1
  %137 = add i64 %.269, %136
  br label %138

; <label>:138:                                    ; preds = %134, %131
  %.37 = phi i64 [ %133, %131 ], [ %137, %134 ]
  call void @unroll_loop(i32 429)
  %139 = getelementptr inbounds i8, i8* %0, i64 %.310
  %140 = add i64 %.37, %3
  %141 = sub i64 %140, %.310
  %142 = call i8* @memchr(i8* %139, i32 0, i64 %141) #14, !track !858
  %143 = icmp ne i8* %142, null
  %144 = icmp ne i64 %140, 0
  %.3 = select i1 %143, i64 %.310, i64 %140
  %145 = select i1 %143, i1 false, i1 %144
  br i1 %145, label %.preheader1, label %..loopexit2_crit_edge

..loopexit_crit_edge:                             ; preds = %71
  %split = phi i8* [ null, %71 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  %.0.ph = phi i8* [ %split, %..loopexit_crit_edge ], [ null, %.preheader ]
  br label %146

..loopexit2_crit_edge:                            ; preds = %138
  %split11 = phi i8* [ null, %138 ]
  br label %.loopexit2

.loopexit2:                                       ; preds = %..loopexit2_crit_edge, %79
  %.0.ph3 = phi i8* [ %split11, %..loopexit2_crit_edge ], [ null, %79 ]
  br label %146

; <label>:146:                                    ; preds = %.loopexit2, %.loopexit, %129, %60
  %.0 = phi i8* [ %61, %60 ], [ %130, %129 ], [ %.0.ph, %.loopexit ], [ %.0.ph3, %.loopexit2 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @two_way_long_needle(i8*, i64, i8*, i64) #7 {
  %5 = alloca i64, align 8
  %6 = alloca [256 x i64], align 16
  %7 = call i64 @critical_factorization(i8* %2, i64 %3, i64* %5)
  br label %8

; <label>:8:                                      ; preds = %4, %8
  %.0917 = phi i64 [ 0, %4 ], [ %10, %8 ]
  %9 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %.0917
  store i64 %3, i64* %9, align 8
  %10 = add nuw nsw i64 %.0917, 1
  %exitcond18 = icmp ne i64 %10, 256
  br i1 %exitcond18, label %8, label %11

; <label>:11:                                     ; preds = %8
  %12 = icmp ult i64 0, %3
  br i1 %12, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %11
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.11016 = phi i64 [ %21, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %13 = sub i64 %3, %.11016
  %14 = sub i64 %13, 1
  %15 = getelementptr inbounds i8, i8* %2, i64 %.11016
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = call i32 @c_tolower(i32 %17)
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %19
  store i64 %14, i64* %20, align 8
  %21 = add nuw i64 %.11016, 1
  %exitcond = icmp ne i64 %21, %3
  br i1 %exitcond, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %11
  %22 = load i64, i64* %5, align 8
  %23 = getelementptr inbounds i8, i8* %2, i64 %22
  %24 = call i32 @c_strncasecmp(i8* %2, i8* %23, i64 %7) #14
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %.preheader, label %113

.preheader:                                       ; preds = %._crit_edge
  call void @unroll_loop(i32 344)
  %26 = getelementptr inbounds i8, i8* %0, i64 %1
  %27 = sub i64 %3, %1
  %28 = call i8* @memchr(i8* %26, i32 0, i64 %27) #14, !track !859
  %29 = icmp ne i8* %28, null
  %30 = icmp ne i64 %3, 0
  %.15 = select i1 %29, i64 %1, i64 %3
  %31 = select i1 %29, i1 false, i1 %30
  br i1 %31, label %.lr.ph9, label %.loopexit

.lr.ph9:                                          ; preds = %.preheader
  br label %32

; <label>:32:                                     ; preds = %.lr.ph9, %.backedge
  %.18 = phi i64 [ %.15, %.lr.ph9 ], [ %.1, %.backedge ]
  %.037 = phi i64 [ 0, %.lr.ph9 ], [ %.03.be, %.backedge ]
  %.056 = phi i64 [ 0, %.lr.ph9 ], [ %.05.be, %.backedge ]
  %33 = add i64 %.056, %3
  %34 = sub i64 %33, 1
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = call i32 @c_tolower(i32 %37)
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %39
  %41 = load i64, i64* %40, align 8
  %42 = icmp ult i64 0, %41
  br i1 %42, label %43, label %57

; <label>:43:                                     ; preds = %32
  %44 = icmp ne i64 %.037, 0
  %45 = load i64, i64* %5, align 8
  %46 = icmp ult i64 %41, %45
  %or.cond = and i1 %44, %46
  %47 = load i64, i64* %5, align 8
  %48 = sub i64 %3, %47
  %.01 = select i1 %or.cond, i64 %48, i64 %41
  %49 = add i64 %.056, %.01
  br label %.backedge

.backedge:                                        ; preds = %104, %109, %43
  %.05.be = phi i64 [ %49, %43 ], [ %106, %104 ], [ %112, %109 ]
  %.03.be = phi i64 [ 0, %43 ], [ %108, %104 ], [ 0, %109 ]
  call void @unroll_loop(i32 344)
  %50 = getelementptr inbounds i8, i8* %0, i64 %.18
  %51 = add i64 %.05.be, %3
  %52 = sub i64 %51, %.18
  %53 = call i8* @memchr(i8* %50, i32 0, i64 %52) #14, !track !859
  %54 = icmp ne i8* %53, null
  %55 = icmp ne i64 %51, 0
  %.1 = select i1 %54, i64 %.18, i64 %51
  %56 = select i1 %54, i1 false, i1 %55
  br i1 %56, label %32, label %..loopexit_crit_edge

; <label>:57:                                     ; preds = %32
  %58 = icmp ult i64 %7, %.037
  %.03. = select i1 %58, i64 %.037, i64 %7
  br label %59

; <label>:59:                                     ; preds = %73, %57
  %.211 = phi i64 [ %.03., %57 ], [ %75, %73 ]
  call void @unroll_loop(i32 345)
  %60 = sub i64 %3, 1
  %61 = icmp ult i64 %.211, %60
  br i1 %61, label %62, label %73

; <label>:62:                                     ; preds = %59
  %63 = getelementptr inbounds i8, i8* %2, i64 %.211
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = call i32 @c_tolower(i32 %65)
  %67 = add i64 %.211, %.056
  %68 = getelementptr inbounds i8, i8* %0, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = call i32 @c_tolower(i32 %70)
  %72 = icmp eq i32 %66, %71
  br label %73

; <label>:73:                                     ; preds = %62, %59
  %74 = phi i1 [ false, %59 ], [ %72, %62 ]
  %75 = add i64 %.211, 1
  br i1 %74, label %59, label %76

; <label>:76:                                     ; preds = %73
  %.211.lcssa = phi i64 [ %.211, %73 ]
  %77 = sub i64 %3, 1
  %78 = icmp ule i64 %77, %.211.lcssa
  br i1 %78, label %79, label %109

; <label>:79:                                     ; preds = %76
  %80 = sub i64 %7, 1
  br label %81

; <label>:81:                                     ; preds = %95, %79
  %.312 = phi i64 [ %80, %79 ], [ %97, %95 ]
  call void @unroll_loop(i32 346)
  %82 = add i64 %.312, 1
  %83 = icmp ult i64 %.037, %82
  br i1 %83, label %84, label %95

; <label>:84:                                     ; preds = %81
  %85 = getelementptr inbounds i8, i8* %2, i64 %.312
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = call i32 @c_tolower(i32 %87)
  %89 = add i64 %.312, %.056
  %90 = getelementptr inbounds i8, i8* %0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = call i32 @c_tolower(i32 %92)
  %94 = icmp eq i32 %88, %93
  br label %95

; <label>:95:                                     ; preds = %84, %81
  %96 = phi i1 [ false, %81 ], [ %94, %84 ]
  %97 = add i64 %.312, -1
  br i1 %96, label %81, label %98

; <label>:98:                                     ; preds = %95
  %.312.lcssa = phi i64 [ %.312, %95 ]
  %99 = add i64 %.312.lcssa, 1
  %100 = add i64 %.037, 1
  %101 = icmp ult i64 %99, %100
  br i1 %101, label %102, label %104

; <label>:102:                                    ; preds = %98
  %.05.lcssa13 = phi i64 [ %.056, %98 ]
  %103 = getelementptr inbounds i8, i8* %0, i64 %.05.lcssa13
  br label %194

; <label>:104:                                    ; preds = %98
  %105 = load i64, i64* %5, align 8
  %106 = add i64 %.056, %105
  %107 = load i64, i64* %5, align 8
  %108 = sub i64 %3, %107
  br label %.backedge

; <label>:109:                                    ; preds = %76
  %110 = sub i64 %.211.lcssa, %7
  %111 = add i64 %110, 1
  %112 = add i64 %.056, %111
  br label %.backedge

; <label>:113:                                    ; preds = %._crit_edge
  %114 = sub i64 %3, %7
  %115 = icmp ult i64 %7, %114
  %116 = sub i64 %3, %7
  %117 = select i1 %115, i64 %116, i64 %7
  %118 = add i64 %117, 1
  store i64 %118, i64* %5, align 8
  call void @unroll_loop(i32 347)
  %119 = getelementptr inbounds i8, i8* %0, i64 %1
  %120 = sub i64 %3, %1
  %121 = call i8* @memchr(i8* %119, i32 0, i64 %120) #14, !track !860
  %122 = icmp ne i8* %121, null
  %123 = icmp ne i64 %3, 0
  %.310 = select i1 %122, i64 %1, i64 %3
  %124 = select i1 %122, i1 false, i1 %123
  br i1 %124, label %.lr.ph15, label %.loopexit3

.lr.ph15:                                         ; preds = %113
  br label %125

; <label>:125:                                    ; preds = %.lr.ph15, %.backedge15
  %.313 = phi i64 [ %.310, %.lr.ph15 ], [ %.3, %.backedge15 ]
  %.2711 = phi i64 [ 0, %.lr.ph15 ], [ %.27.be, %.backedge15 ]
  %126 = add i64 %.2711, %3
  %127 = sub i64 %126, 1
  %128 = getelementptr inbounds i8, i8* %0, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = call i32 @c_tolower(i32 %130)
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %132
  %134 = load i64, i64* %133, align 8
  %135 = icmp ult i64 0, %134
  br i1 %135, label %136, label %.preheader2

.preheader2:                                      ; preds = %125
  br label %145

; <label>:136:                                    ; preds = %125
  %137 = add i64 %.2711, %134
  br label %.backedge15

.backedge15:                                      ; preds = %187, %190, %136
  %.27.be = phi i64 [ %137, %136 ], [ %189, %187 ], [ %193, %190 ]
  call void @unroll_loop(i32 347)
  %138 = getelementptr inbounds i8, i8* %0, i64 %.313
  %139 = add i64 %.27.be, %3
  %140 = sub i64 %139, %.313
  %141 = call i8* @memchr(i8* %138, i32 0, i64 %140) #14, !track !860
  %142 = icmp ne i8* %141, null
  %143 = icmp ne i64 %139, 0
  %.3 = select i1 %142, i64 %.313, i64 %139
  %144 = select i1 %142, i1 false, i1 %143
  br i1 %144, label %125, label %..loopexit3_crit_edge

; <label>:145:                                    ; preds = %.preheader2, %159
  %.4 = phi i64 [ %161, %159 ], [ %7, %.preheader2 ]
  call void @unroll_loop(i32 348)
  %146 = sub i64 %3, 1
  %147 = icmp ult i64 %.4, %146
  br i1 %147, label %148, label %159

; <label>:148:                                    ; preds = %145
  %149 = getelementptr inbounds i8, i8* %2, i64 %.4
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = call i32 @c_tolower(i32 %151)
  %153 = add i64 %.4, %.2711
  %154 = getelementptr inbounds i8, i8* %0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = call i32 @c_tolower(i32 %156)
  %158 = icmp eq i32 %152, %157
  br label %159

; <label>:159:                                    ; preds = %148, %145
  %160 = phi i1 [ false, %145 ], [ %158, %148 ]
  %161 = add i64 %.4, 1
  br i1 %160, label %145, label %162

; <label>:162:                                    ; preds = %159
  %.4.lcssa = phi i64 [ %.4, %159 ]
  %163 = sub i64 %3, 1
  %164 = icmp ule i64 %163, %.4.lcssa
  br i1 %164, label %165, label %190

; <label>:165:                                    ; preds = %162
  %166 = sub i64 %7, 1
  br label %167

; <label>:167:                                    ; preds = %180, %165
  %.5 = phi i64 [ %166, %165 ], [ %182, %180 ]
  call void @unroll_loop(i32 349)
  %168 = icmp ne i64 %.5, -1
  br i1 %168, label %169, label %180

; <label>:169:                                    ; preds = %167
  %170 = getelementptr inbounds i8, i8* %2, i64 %.5
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = call i32 @c_tolower(i32 %172)
  %174 = add i64 %.5, %.2711
  %175 = getelementptr inbounds i8, i8* %0, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = call i32 @c_tolower(i32 %177)
  %179 = icmp eq i32 %173, %178
  br label %180

; <label>:180:                                    ; preds = %169, %167
  %181 = phi i1 [ false, %167 ], [ %179, %169 ]
  %182 = add i64 %.5, -1
  br i1 %181, label %167, label %183

; <label>:183:                                    ; preds = %180
  %.5.lcssa = phi i64 [ %.5, %180 ]
  %184 = icmp eq i64 %.5.lcssa, -1
  br i1 %184, label %185, label %187

; <label>:185:                                    ; preds = %183
  %.27.lcssa14 = phi i64 [ %.2711, %183 ]
  %186 = getelementptr inbounds i8, i8* %0, i64 %.27.lcssa14
  br label %194

; <label>:187:                                    ; preds = %183
  %188 = load i64, i64* %5, align 8
  %189 = add i64 %.2711, %188
  br label %.backedge15

; <label>:190:                                    ; preds = %162
  %191 = sub i64 %.4.lcssa, %7
  %192 = add i64 %191, 1
  %193 = add i64 %.2711, %192
  br label %.backedge15

..loopexit_crit_edge:                             ; preds = %.backedge
  %split = phi i8* [ null, %.backedge ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  %.0.ph = phi i8* [ %split, %..loopexit_crit_edge ], [ null, %.preheader ]
  br label %194

..loopexit3_crit_edge:                            ; preds = %.backedge15
  %split16 = phi i8* [ null, %.backedge15 ]
  br label %.loopexit3

.loopexit3:                                       ; preds = %..loopexit3_crit_edge, %113
  %.0.ph4 = phi i8* [ %split16, %..loopexit3_crit_edge ], [ null, %113 ]
  br label %194

; <label>:194:                                    ; preds = %.loopexit3, %.loopexit, %185, %102
  %.0 = phi i8* [ %103, %102 ], [ %186, %185 ], [ %.0.ph, %.loopexit ], [ %.0.ph4, %.loopexit3 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @critical_factorization(i8*, i64, i64*) #0 {
  %4 = icmp ult i64 %1, 3
  br i1 %4, label %5, label %7

; <label>:5:                                      ; preds = %3
  store i64 1, i64* %2, align 8
  %6 = sub i64 %1, 1
  br label %79

; <label>:7:                                      ; preds = %3
  %8 = icmp ult i64 1, %1
  br i1 %8, label %.lr.ph32.preheader, label %._crit_edge33

.lr.ph32.preheader:                               ; preds = %7
  br label %.lr.ph32

.lr.ph32:                                         ; preds = %.lr.ph32.preheader, %37
  %.0130 = phi i64 [ %.2, %37 ], [ 1, %.lr.ph32.preheader ]
  %.0229 = phi i64 [ %.24, %37 ], [ -1, %.lr.ph32.preheader ]
  %.0828 = phi i64 [ %.311, %37 ], [ 0, %.lr.ph32.preheader ]
  %.01427 = phi i64 [ %.317, %37 ], [ 1, %.lr.ph32.preheader ]
  %9 = add i64 %.0828, %.01427
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = call i32 @c_tolower(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = add i64 %.0229, %.01427
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = call i32 @c_tolower(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = zext i8 %14 to i32
  %22 = zext i8 %20 to i32
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %.lr.ph32
  %25 = add i64 %.0828, %.01427
  %26 = sub i64 %25, %.0229
  br label %37

; <label>:27:                                     ; preds = %.lr.ph32
  %28 = zext i8 %14 to i32
  %29 = zext i8 %20 to i32
  %30 = icmp eq i32 %28, %29
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %27
  %32 = icmp ne i64 %.01427, %.0130
  %33 = add i64 %.01427, 1
  %34 = add i64 %.0828, %.0130
  %.115 = select i1 %32, i64 %33, i64 1
  %.19 = select i1 %32, i64 %.0828, i64 %34
  br label %37

; <label>:35:                                     ; preds = %27
  %36 = add i64 %.0828, 1
  br label %37

; <label>:37:                                     ; preds = %35, %31, %24
  %.317 = phi i64 [ 1, %24 ], [ 1, %35 ], [ %.115, %31 ]
  %.311 = phi i64 [ %25, %24 ], [ %36, %35 ], [ %.19, %31 ]
  %.24 = phi i64 [ %.0229, %24 ], [ %.0828, %35 ], [ %.0229, %31 ]
  %.2 = phi i64 [ %26, %24 ], [ 1, %35 ], [ %.0130, %31 ]
  %38 = add i64 %.311, %.317
  %39 = icmp ult i64 %38, %1
  br i1 %39, label %.lr.ph32, label %._crit_edge33.loopexit

._crit_edge33.loopexit:                           ; preds = %37
  %.02.lcssa.ph = phi i64 [ %.24, %37 ]
  %.01.lcssa.ph = phi i64 [ %.2, %37 ]
  br label %._crit_edge33

._crit_edge33:                                    ; preds = %._crit_edge33.loopexit, %7
  %.02.lcssa = phi i64 [ -1, %7 ], [ %.02.lcssa.ph, %._crit_edge33.loopexit ]
  %.01.lcssa = phi i64 [ 1, %7 ], [ %.01.lcssa.ph, %._crit_edge33.loopexit ]
  store i64 %.01.lcssa, i64* %2, align 8
  %40 = icmp ult i64 1, %1
  br i1 %40, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge33
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %69
  %.325 = phi i64 [ %.5, %69 ], [ 1, %.lr.ph.preheader ]
  %.0524 = phi i64 [ %.27, %69 ], [ -1, %.lr.ph.preheader ]
  %.41223 = phi i64 [ %.7, %69 ], [ 0, %.lr.ph.preheader ]
  %.41822 = phi i64 [ %.721, %69 ], [ 1, %.lr.ph.preheader ]
  %41 = add i64 %.41223, %.41822
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = call i32 @c_tolower(i32 %44)
  %46 = trunc i32 %45 to i8
  %47 = add i64 %.0524, %.41822
  %48 = getelementptr inbounds i8, i8* %0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = call i32 @c_tolower(i32 %50)
  %52 = trunc i32 %51 to i8
  %53 = zext i8 %52 to i32
  %54 = zext i8 %46 to i32
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %59

; <label>:56:                                     ; preds = %.lr.ph
  %57 = add i64 %.41223, %.41822
  %58 = sub i64 %57, %.0524
  br label %69

; <label>:59:                                     ; preds = %.lr.ph
  %60 = zext i8 %46 to i32
  %61 = zext i8 %52 to i32
  %62 = icmp eq i32 %60, %61
  br i1 %62, label %63, label %67

; <label>:63:                                     ; preds = %59
  %64 = icmp ne i64 %.41822, %.325
  %65 = add i64 %.41822, 1
  %66 = add i64 %.41223, %.325
  %.519 = select i1 %64, i64 %65, i64 1
  %.513 = select i1 %64, i64 %.41223, i64 %66
  br label %69

; <label>:67:                                     ; preds = %59
  %68 = add i64 %.41223, 1
  br label %69

; <label>:69:                                     ; preds = %67, %63, %56
  %.721 = phi i64 [ 1, %56 ], [ 1, %67 ], [ %.519, %63 ]
  %.7 = phi i64 [ %57, %56 ], [ %68, %67 ], [ %.513, %63 ]
  %.27 = phi i64 [ %.0524, %56 ], [ %.41223, %67 ], [ %.0524, %63 ]
  %.5 = phi i64 [ %58, %56 ], [ 1, %67 ], [ %.325, %63 ]
  %70 = add i64 %.7, %.721
  %71 = icmp ult i64 %70, %1
  br i1 %71, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %69
  %.05.lcssa.ph = phi i64 [ %.27, %69 ]
  %.3.lcssa.ph = phi i64 [ %.5, %69 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge33
  %.05.lcssa = phi i64 [ -1, %._crit_edge33 ], [ %.05.lcssa.ph, %._crit_edge.loopexit ]
  %.3.lcssa = phi i64 [ 1, %._crit_edge33 ], [ %.3.lcssa.ph, %._crit_edge.loopexit ]
  %72 = add i64 %.05.lcssa, 1
  %73 = add i64 %.02.lcssa, 1
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %75, label %77

; <label>:75:                                     ; preds = %._crit_edge
  %76 = add i64 %.02.lcssa, 1
  br label %79

; <label>:77:                                     ; preds = %._crit_edge
  store i64 %.3.lcssa, i64* %2, align 8
  %78 = add i64 %.05.lcssa, 1
  br label %79

; <label>:79:                                     ; preds = %77, %75, %5
  %.0 = phi i64 [ %6, %5 ], [ %76, %75 ], [ %78, %77 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @md5_init_ctx(%struct.md5_ctx*) #0 {
  %2 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 0
  store i32 1732584193, i32* %2, align 4
  %3 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 1
  store i32 -271733879, i32* %3, align 4
  %4 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 2
  store i32 -1732584194, i32* %4, align 4
  %5 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 3
  store i32 271733878, i32* %5, align 4
  %6 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 0
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 5
  store i32 0, i32* %10, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @md5_read_ctx(%struct.md5_ctx*, i8*) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 0
  %4 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  call void @set_uint32(i8* %3, i32 %5)
  %6 = getelementptr inbounds i8, i8* %1, i64 4
  %7 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  call void @set_uint32(i8* %6, i32 %8)
  %9 = getelementptr inbounds i8, i8* %1, i64 8
  %10 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  call void @set_uint32(i8* %9, i32 %11)
  %12 = getelementptr inbounds i8, i8* %1, i64 12
  %13 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  call void @set_uint32(i8* %12, i32 %14)
  ret i8* %1
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_uint32(i8*, i32) #0 {
  %3 = alloca i32, align 4, !track !861
  store i32 %1, i32* %3, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 4 %4, i64 4, i1 false), !track !862
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @md5_finish_ctx(%struct.md5_ctx*, i8*) #0 {
  %3 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 56
  %6 = zext i1 %5 to i64
  %7 = select i1 %5, i32 16, i32 32
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %4
  store i32 %12, i32* %10, align 4
  %13 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %15, %4
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %2
  %18 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %19, align 4
  br label %22

; <label>:22:                                     ; preds = %17, %2
  %23 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %23, i64 0, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 3
  %27 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 6
  %28 = sub i64 %8, 2
  %29 = getelementptr inbounds [32 x i32], [32 x i32]* %27, i64 0, i64 %28
  store i32 %26, i32* %29, align 4
  %30 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %31 = getelementptr inbounds [2 x i32], [2 x i32]* %30, i64 0, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = shl i32 %32, 3
  %34 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 4
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* %34, i64 0, i64 0
  %36 = load i32, i32* %35, align 4
  %37 = lshr i32 %36, 29
  %38 = or i32 %33, %37
  %39 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 6
  %40 = sub i64 %8, 1
  %41 = getelementptr inbounds [32 x i32], [32 x i32]* %39, i64 0, i64 %40
  store i32 %38, i32* %41, align 4
  %42 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 6
  %43 = getelementptr inbounds [32 x i32], [32 x i32]* %42, i32 0, i32 0
  %44 = bitcast i32* %43 to i8*
  %45 = zext i32 %4 to i64
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  %47 = sub i64 %8, 2
  %48 = mul i64 %47, 4
  %49 = zext i32 %4 to i64
  %50 = sub i64 %48, %49
  %51 = getelementptr [64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @fillbuf to [64 x i8]*), i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 16 %51, i64 %50, i1 false), !track !863
  %52 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 6
  %53 = getelementptr inbounds [32 x i32], [32 x i32]* %52, i32 0, i32 0
  %54 = bitcast i32* %53 to i8*
  %55 = mul i64 %8, 4
  call void @md5_process_block(i8* %54, i64 %55, %struct.md5_ctx* %0) #8
  %56 = call i8* @md5_read_ctx(%struct.md5_ctx* %0, i8* %1) #8
  ret i8* %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @md5_process_block(i8*, i64, %struct.md5_ctx*) #0 {
  %4 = alloca [16 x i32], align 16, !track !864
  %5 = bitcast i8* %0 to i32*
  %6 = udiv i64 %1, 4
  %7 = getelementptr inbounds i32, i32* %5, i64 %6
  %8 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = trunc i64 %1 to i32
  %17 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 4
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i64 0, i64 0
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, %16
  store i32 %20, i32* %18, align 4
  %21 = lshr i64 %1, 31
  %22 = lshr i64 %21, 1
  %23 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 4
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %23, i64 0, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp ult i32 %25, %16
  %27 = zext i1 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = add i64 %22, %28
  %30 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 4
  %31 = getelementptr inbounds [2 x i32], [2 x i32]* %30, i64 0, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i64
  %34 = add i64 %33, %29
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %31, align 4
  %36 = icmp ult i32* %5, %7
  br i1 %36, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.09 = phi i32 [ %809, %.lr.ph ], [ %15, %.lr.ph.preheader ]
  %.018 = phi i32 [ %808, %.lr.ph ], [ %13, %.lr.ph.preheader ]
  %.027 = phi i32* [ %241, %.lr.ph ], [ %5, %.lr.ph.preheader ]
  %.036 = phi i32 [ %807, %.lr.ph ], [ %11, %.lr.ph.preheader ]
  %.045 = phi i32 [ %806, %.lr.ph ], [ %9, %.lr.ph.preheader ]
  call void @unroll_loop(i32 352)
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i32 0, i32 0
  %38 = xor i32 %.018, %.09
  %39 = and i32 %.036, %38
  %40 = xor i32 %.09, %39
  %41 = load i32, i32* %.027, align 4
  %42 = getelementptr inbounds i32, i32* %37, i32 1
  store i32 %41, i32* %37, align 4
  %43 = add i32 %40, %41
  %44 = add i32 %43, -680876936
  %45 = add i32 %.045, %44
  %46 = getelementptr inbounds i32, i32* %.027, i32 1
  %47 = shl i32 %45, 7
  %48 = lshr i32 %45, 25
  %49 = or i32 %47, %48
  %50 = add i32 %49, %.036
  %51 = xor i32 %.036, %.018
  %52 = and i32 %50, %51
  %53 = xor i32 %.018, %52
  %54 = load i32, i32* %46, align 4
  %55 = getelementptr inbounds i32, i32* %42, i32 1
  store i32 %54, i32* %42, align 4
  %56 = add i32 %53, %54
  %57 = add i32 %56, -389564586
  %58 = add i32 %.09, %57
  %59 = getelementptr inbounds i32, i32* %46, i32 1
  %60 = shl i32 %58, 12
  %61 = lshr i32 %58, 20
  %62 = or i32 %60, %61
  %63 = add i32 %62, %50
  %64 = xor i32 %50, %.036
  %65 = and i32 %63, %64
  %66 = xor i32 %.036, %65
  %67 = load i32, i32* %59, align 4
  %68 = getelementptr inbounds i32, i32* %55, i32 1
  store i32 %67, i32* %55, align 4
  %69 = add i32 %66, %67
  %70 = add i32 %69, 606105819
  %71 = add i32 %.018, %70
  %72 = getelementptr inbounds i32, i32* %59, i32 1
  %73 = shl i32 %71, 17
  %74 = lshr i32 %71, 15
  %75 = or i32 %73, %74
  %76 = add i32 %75, %63
  %77 = xor i32 %63, %50
  %78 = and i32 %76, %77
  %79 = xor i32 %50, %78
  %80 = load i32, i32* %72, align 4
  %81 = getelementptr inbounds i32, i32* %68, i32 1
  store i32 %80, i32* %68, align 4
  %82 = add i32 %79, %80
  %83 = add i32 %82, -1044525330
  %84 = add i32 %.036, %83
  %85 = getelementptr inbounds i32, i32* %72, i32 1
  %86 = shl i32 %84, 22
  %87 = lshr i32 %84, 10
  %88 = or i32 %86, %87
  %89 = add i32 %88, %76
  %90 = xor i32 %76, %63
  %91 = and i32 %89, %90
  %92 = xor i32 %63, %91
  %93 = load i32, i32* %85, align 4
  %94 = getelementptr inbounds i32, i32* %81, i32 1
  store i32 %93, i32* %81, align 4
  %95 = add i32 %92, %93
  %96 = add i32 %95, -176418897
  %97 = add i32 %50, %96
  %98 = getelementptr inbounds i32, i32* %85, i32 1
  %99 = shl i32 %97, 7
  %100 = lshr i32 %97, 25
  %101 = or i32 %99, %100
  %102 = add i32 %101, %89
  %103 = xor i32 %89, %76
  %104 = and i32 %102, %103
  %105 = xor i32 %76, %104
  %106 = load i32, i32* %98, align 4
  %107 = getelementptr inbounds i32, i32* %94, i32 1
  store i32 %106, i32* %94, align 4
  %108 = add i32 %105, %106
  %109 = add i32 %108, 1200080426
  %110 = add i32 %63, %109
  %111 = getelementptr inbounds i32, i32* %98, i32 1
  %112 = shl i32 %110, 12
  %113 = lshr i32 %110, 20
  %114 = or i32 %112, %113
  %115 = add i32 %114, %102
  %116 = xor i32 %102, %89
  %117 = and i32 %115, %116
  %118 = xor i32 %89, %117
  %119 = load i32, i32* %111, align 4
  %120 = getelementptr inbounds i32, i32* %107, i32 1
  store i32 %119, i32* %107, align 4
  %121 = add i32 %118, %119
  %122 = add i32 %121, -1473231341
  %123 = add i32 %76, %122
  %124 = getelementptr inbounds i32, i32* %111, i32 1
  %125 = shl i32 %123, 17
  %126 = lshr i32 %123, 15
  %127 = or i32 %125, %126
  %128 = add i32 %127, %115
  %129 = xor i32 %115, %102
  %130 = and i32 %128, %129
  %131 = xor i32 %102, %130
  %132 = load i32, i32* %124, align 4
  %133 = getelementptr inbounds i32, i32* %120, i32 1
  store i32 %132, i32* %120, align 4
  %134 = add i32 %131, %132
  %135 = add i32 %134, -45705983
  %136 = add i32 %89, %135
  %137 = getelementptr inbounds i32, i32* %124, i32 1
  %138 = shl i32 %136, 22
  %139 = lshr i32 %136, 10
  %140 = or i32 %138, %139
  %141 = add i32 %140, %128
  %142 = xor i32 %128, %115
  %143 = and i32 %141, %142
  %144 = xor i32 %115, %143
  %145 = load i32, i32* %137, align 4
  %146 = getelementptr inbounds i32, i32* %133, i32 1
  store i32 %145, i32* %133, align 4
  %147 = add i32 %144, %145
  %148 = add i32 %147, 1770035416
  %149 = add i32 %102, %148
  %150 = getelementptr inbounds i32, i32* %137, i32 1
  %151 = shl i32 %149, 7
  %152 = lshr i32 %149, 25
  %153 = or i32 %151, %152
  %154 = add i32 %153, %141
  %155 = xor i32 %141, %128
  %156 = and i32 %154, %155
  %157 = xor i32 %128, %156
  %158 = load i32, i32* %150, align 4
  %159 = getelementptr inbounds i32, i32* %146, i32 1
  store i32 %158, i32* %146, align 4
  %160 = add i32 %157, %158
  %161 = add i32 %160, -1958414417
  %162 = add i32 %115, %161
  %163 = getelementptr inbounds i32, i32* %150, i32 1
  %164 = shl i32 %162, 12
  %165 = lshr i32 %162, 20
  %166 = or i32 %164, %165
  %167 = add i32 %166, %154
  %168 = xor i32 %154, %141
  %169 = and i32 %167, %168
  %170 = xor i32 %141, %169
  %171 = load i32, i32* %163, align 4
  %172 = getelementptr inbounds i32, i32* %159, i32 1
  store i32 %171, i32* %159, align 4
  %173 = add i32 %170, %171
  %174 = add i32 %173, -42063
  %175 = add i32 %128, %174
  %176 = getelementptr inbounds i32, i32* %163, i32 1
  %177 = shl i32 %175, 17
  %178 = lshr i32 %175, 15
  %179 = or i32 %177, %178
  %180 = add i32 %179, %167
  %181 = xor i32 %167, %154
  %182 = and i32 %180, %181
  %183 = xor i32 %154, %182
  %184 = load i32, i32* %176, align 4
  %185 = getelementptr inbounds i32, i32* %172, i32 1
  store i32 %184, i32* %172, align 4
  %186 = add i32 %183, %184
  %187 = add i32 %186, -1990404162
  %188 = add i32 %141, %187
  %189 = getelementptr inbounds i32, i32* %176, i32 1
  %190 = shl i32 %188, 22
  %191 = lshr i32 %188, 10
  %192 = or i32 %190, %191
  %193 = add i32 %192, %180
  %194 = xor i32 %180, %167
  %195 = and i32 %193, %194
  %196 = xor i32 %167, %195
  %197 = load i32, i32* %189, align 4
  %198 = getelementptr inbounds i32, i32* %185, i32 1
  store i32 %197, i32* %185, align 4
  %199 = add i32 %196, %197
  %200 = add i32 %199, 1804603682
  %201 = add i32 %154, %200
  %202 = getelementptr inbounds i32, i32* %189, i32 1
  %203 = shl i32 %201, 7
  %204 = lshr i32 %201, 25
  %205 = or i32 %203, %204
  %206 = add i32 %205, %193
  %207 = xor i32 %193, %180
  %208 = and i32 %206, %207
  %209 = xor i32 %180, %208
  %210 = load i32, i32* %202, align 4
  %211 = getelementptr inbounds i32, i32* %198, i32 1
  store i32 %210, i32* %198, align 4
  %212 = add i32 %209, %210
  %213 = add i32 %212, -40341101
  %214 = add i32 %167, %213
  %215 = getelementptr inbounds i32, i32* %202, i32 1
  %216 = shl i32 %214, 12
  %217 = lshr i32 %214, 20
  %218 = or i32 %216, %217
  %219 = add i32 %218, %206
  %220 = xor i32 %206, %193
  %221 = and i32 %219, %220
  %222 = xor i32 %193, %221
  %223 = load i32, i32* %215, align 4
  %224 = getelementptr inbounds i32, i32* %211, i32 1
  store i32 %223, i32* %211, align 4
  %225 = add i32 %222, %223
  %226 = add i32 %225, -1502002290
  %227 = add i32 %180, %226
  %228 = getelementptr inbounds i32, i32* %215, i32 1
  %229 = shl i32 %227, 17
  %230 = lshr i32 %227, 15
  %231 = or i32 %229, %230
  %232 = add i32 %231, %219
  %233 = xor i32 %219, %206
  %234 = and i32 %232, %233
  %235 = xor i32 %206, %234
  %236 = load i32, i32* %228, align 4
  %237 = getelementptr inbounds i32, i32* %224, i32 1
  store i32 %236, i32* %224, align 4
  %238 = add i32 %235, %236
  %239 = add i32 %238, 1236535329
  %240 = add i32 %193, %239
  %241 = getelementptr inbounds i32, i32* %228, i32 1
  %242 = shl i32 %240, 22
  %243 = lshr i32 %240, 10
  %244 = or i32 %242, %243
  %245 = add i32 %244, %232
  %246 = xor i32 %245, %232
  %247 = and i32 %219, %246
  %248 = xor i32 %232, %247
  %249 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %250 = load i32, i32* %249, align 4
  %251 = add i32 %248, %250
  %252 = add i32 %251, -165796510
  %253 = add i32 %206, %252
  %254 = shl i32 %253, 5
  %255 = lshr i32 %253, 27
  %256 = or i32 %254, %255
  %257 = add i32 %256, %245
  %258 = xor i32 %257, %245
  %259 = and i32 %232, %258
  %260 = xor i32 %245, %259
  %261 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %262 = load i32, i32* %261, align 8
  %263 = add i32 %260, %262
  %264 = add i32 %263, -1069501632
  %265 = add i32 %219, %264
  %266 = shl i32 %265, 9
  %267 = lshr i32 %265, 23
  %268 = or i32 %266, %267
  %269 = add i32 %268, %257
  %270 = xor i32 %269, %257
  %271 = and i32 %245, %270
  %272 = xor i32 %257, %271
  %273 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %274 = load i32, i32* %273, align 4
  %275 = add i32 %272, %274
  %276 = add i32 %275, 643717713
  %277 = add i32 %232, %276
  %278 = shl i32 %277, 14
  %279 = lshr i32 %277, 18
  %280 = or i32 %278, %279
  %281 = add i32 %280, %269
  %282 = xor i32 %281, %269
  %283 = and i32 %257, %282
  %284 = xor i32 %269, %283
  %285 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %286 = load i32, i32* %285, align 16
  %287 = add i32 %284, %286
  %288 = add i32 %287, -373897302
  %289 = add i32 %245, %288
  %290 = shl i32 %289, 20
  %291 = lshr i32 %289, 12
  %292 = or i32 %290, %291
  %293 = add i32 %292, %281
  %294 = xor i32 %293, %281
  %295 = and i32 %269, %294
  %296 = xor i32 %281, %295
  %297 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %298 = load i32, i32* %297, align 4
  %299 = add i32 %296, %298
  %300 = add i32 %299, -701558691
  %301 = add i32 %257, %300
  %302 = shl i32 %301, 5
  %303 = lshr i32 %301, 27
  %304 = or i32 %302, %303
  %305 = add i32 %304, %293
  %306 = xor i32 %305, %293
  %307 = and i32 %281, %306
  %308 = xor i32 %293, %307
  %309 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %310 = load i32, i32* %309, align 8
  %311 = add i32 %308, %310
  %312 = add i32 %311, 38016083
  %313 = add i32 %269, %312
  %314 = shl i32 %313, 9
  %315 = lshr i32 %313, 23
  %316 = or i32 %314, %315
  %317 = add i32 %316, %305
  %318 = xor i32 %317, %305
  %319 = and i32 %293, %318
  %320 = xor i32 %305, %319
  %321 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %322 = load i32, i32* %321, align 4
  %323 = add i32 %320, %322
  %324 = add i32 %323, -660478335
  %325 = add i32 %281, %324
  %326 = shl i32 %325, 14
  %327 = lshr i32 %325, 18
  %328 = or i32 %326, %327
  %329 = add i32 %328, %317
  %330 = xor i32 %329, %317
  %331 = and i32 %305, %330
  %332 = xor i32 %317, %331
  %333 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %334 = load i32, i32* %333, align 16
  %335 = add i32 %332, %334
  %336 = add i32 %335, -405537848
  %337 = add i32 %293, %336
  %338 = shl i32 %337, 20
  %339 = lshr i32 %337, 12
  %340 = or i32 %338, %339
  %341 = add i32 %340, %329
  %342 = xor i32 %341, %329
  %343 = and i32 %317, %342
  %344 = xor i32 %329, %343
  %345 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %346 = load i32, i32* %345, align 4
  %347 = add i32 %344, %346
  %348 = add i32 %347, 568446438
  %349 = add i32 %305, %348
  %350 = shl i32 %349, 5
  %351 = lshr i32 %349, 27
  %352 = or i32 %350, %351
  %353 = add i32 %352, %341
  %354 = xor i32 %353, %341
  %355 = and i32 %329, %354
  %356 = xor i32 %341, %355
  %357 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %358 = load i32, i32* %357, align 8
  %359 = add i32 %356, %358
  %360 = add i32 %359, -1019803690
  %361 = add i32 %317, %360
  %362 = shl i32 %361, 9
  %363 = lshr i32 %361, 23
  %364 = or i32 %362, %363
  %365 = add i32 %364, %353
  %366 = xor i32 %365, %353
  %367 = and i32 %341, %366
  %368 = xor i32 %353, %367
  %369 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %370 = load i32, i32* %369, align 4
  %371 = add i32 %368, %370
  %372 = add i32 %371, -187363961
  %373 = add i32 %329, %372
  %374 = shl i32 %373, 14
  %375 = lshr i32 %373, 18
  %376 = or i32 %374, %375
  %377 = add i32 %376, %365
  %378 = xor i32 %377, %365
  %379 = and i32 %353, %378
  %380 = xor i32 %365, %379
  %381 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %382 = load i32, i32* %381, align 16
  %383 = add i32 %380, %382
  %384 = add i32 %383, 1163531501
  %385 = add i32 %341, %384
  %386 = shl i32 %385, 20
  %387 = lshr i32 %385, 12
  %388 = or i32 %386, %387
  %389 = add i32 %388, %377
  %390 = xor i32 %389, %377
  %391 = and i32 %365, %390
  %392 = xor i32 %377, %391
  %393 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %394 = load i32, i32* %393, align 4
  %395 = add i32 %392, %394
  %396 = add i32 %395, -1444681467
  %397 = add i32 %353, %396
  %398 = shl i32 %397, 5
  %399 = lshr i32 %397, 27
  %400 = or i32 %398, %399
  %401 = add i32 %400, %389
  %402 = xor i32 %401, %389
  %403 = and i32 %377, %402
  %404 = xor i32 %389, %403
  %405 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %406 = load i32, i32* %405, align 8
  %407 = add i32 %404, %406
  %408 = add i32 %407, -51403784
  %409 = add i32 %365, %408
  %410 = shl i32 %409, 9
  %411 = lshr i32 %409, 23
  %412 = or i32 %410, %411
  %413 = add i32 %412, %401
  %414 = xor i32 %413, %401
  %415 = and i32 %389, %414
  %416 = xor i32 %401, %415
  %417 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %418 = load i32, i32* %417, align 4
  %419 = add i32 %416, %418
  %420 = add i32 %419, 1735328473
  %421 = add i32 %377, %420
  %422 = shl i32 %421, 14
  %423 = lshr i32 %421, 18
  %424 = or i32 %422, %423
  %425 = add i32 %424, %413
  %426 = xor i32 %425, %413
  %427 = and i32 %401, %426
  %428 = xor i32 %413, %427
  %429 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %430 = load i32, i32* %429, align 16
  %431 = add i32 %428, %430
  %432 = add i32 %431, -1926607734
  %433 = add i32 %389, %432
  %434 = shl i32 %433, 20
  %435 = lshr i32 %433, 12
  %436 = or i32 %434, %435
  %437 = add i32 %436, %425
  %438 = xor i32 %437, %425
  %439 = xor i32 %438, %413
  %440 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %441 = load i32, i32* %440, align 4
  %442 = add i32 %439, %441
  %443 = add i32 %442, -378558
  %444 = add i32 %401, %443
  %445 = shl i32 %444, 4
  %446 = lshr i32 %444, 28
  %447 = or i32 %445, %446
  %448 = add i32 %447, %437
  %449 = xor i32 %448, %437
  %450 = xor i32 %449, %425
  %451 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %452 = load i32, i32* %451, align 16
  %453 = add i32 %450, %452
  %454 = add i32 %453, -2022574463
  %455 = add i32 %413, %454
  %456 = shl i32 %455, 11
  %457 = lshr i32 %455, 21
  %458 = or i32 %456, %457
  %459 = add i32 %458, %448
  %460 = xor i32 %459, %448
  %461 = xor i32 %460, %437
  %462 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %463 = load i32, i32* %462, align 4
  %464 = add i32 %461, %463
  %465 = add i32 %464, 1839030562
  %466 = add i32 %425, %465
  %467 = shl i32 %466, 16
  %468 = lshr i32 %466, 16
  %469 = or i32 %467, %468
  %470 = add i32 %469, %459
  %471 = xor i32 %470, %459
  %472 = xor i32 %471, %448
  %473 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %474 = load i32, i32* %473, align 8
  %475 = add i32 %472, %474
  %476 = add i32 %475, -35309556
  %477 = add i32 %437, %476
  %478 = shl i32 %477, 23
  %479 = lshr i32 %477, 9
  %480 = or i32 %478, %479
  %481 = add i32 %480, %470
  %482 = xor i32 %481, %470
  %483 = xor i32 %482, %459
  %484 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %485 = load i32, i32* %484, align 4
  %486 = add i32 %483, %485
  %487 = add i32 %486, -1530992060
  %488 = add i32 %448, %487
  %489 = shl i32 %488, 4
  %490 = lshr i32 %488, 28
  %491 = or i32 %489, %490
  %492 = add i32 %491, %481
  %493 = xor i32 %492, %481
  %494 = xor i32 %493, %470
  %495 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %496 = load i32, i32* %495, align 16
  %497 = add i32 %494, %496
  %498 = add i32 %497, 1272893353
  %499 = add i32 %459, %498
  %500 = shl i32 %499, 11
  %501 = lshr i32 %499, 21
  %502 = or i32 %500, %501
  %503 = add i32 %502, %492
  %504 = xor i32 %503, %492
  %505 = xor i32 %504, %481
  %506 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %507 = load i32, i32* %506, align 4
  %508 = add i32 %505, %507
  %509 = add i32 %508, -155497632
  %510 = add i32 %470, %509
  %511 = shl i32 %510, 16
  %512 = lshr i32 %510, 16
  %513 = or i32 %511, %512
  %514 = add i32 %513, %503
  %515 = xor i32 %514, %503
  %516 = xor i32 %515, %492
  %517 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %518 = load i32, i32* %517, align 8
  %519 = add i32 %516, %518
  %520 = add i32 %519, -1094730640
  %521 = add i32 %481, %520
  %522 = shl i32 %521, 23
  %523 = lshr i32 %521, 9
  %524 = or i32 %522, %523
  %525 = add i32 %524, %514
  %526 = xor i32 %525, %514
  %527 = xor i32 %526, %503
  %528 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %529 = load i32, i32* %528, align 4
  %530 = add i32 %527, %529
  %531 = add i32 %530, 681279174
  %532 = add i32 %492, %531
  %533 = shl i32 %532, 4
  %534 = lshr i32 %532, 28
  %535 = or i32 %533, %534
  %536 = add i32 %535, %525
  %537 = xor i32 %536, %525
  %538 = xor i32 %537, %514
  %539 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %540 = load i32, i32* %539, align 16
  %541 = add i32 %538, %540
  %542 = add i32 %541, -358537222
  %543 = add i32 %503, %542
  %544 = shl i32 %543, 11
  %545 = lshr i32 %543, 21
  %546 = or i32 %544, %545
  %547 = add i32 %546, %536
  %548 = xor i32 %547, %536
  %549 = xor i32 %548, %525
  %550 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %551 = load i32, i32* %550, align 4
  %552 = add i32 %549, %551
  %553 = add i32 %552, -722521979
  %554 = add i32 %514, %553
  %555 = shl i32 %554, 16
  %556 = lshr i32 %554, 16
  %557 = or i32 %555, %556
  %558 = add i32 %557, %547
  %559 = xor i32 %558, %547
  %560 = xor i32 %559, %536
  %561 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %562 = load i32, i32* %561, align 8
  %563 = add i32 %560, %562
  %564 = add i32 %563, 76029189
  %565 = add i32 %525, %564
  %566 = shl i32 %565, 23
  %567 = lshr i32 %565, 9
  %568 = or i32 %566, %567
  %569 = add i32 %568, %558
  %570 = xor i32 %569, %558
  %571 = xor i32 %570, %547
  %572 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %573 = load i32, i32* %572, align 4
  %574 = add i32 %571, %573
  %575 = add i32 %574, -640364487
  %576 = add i32 %536, %575
  %577 = shl i32 %576, 4
  %578 = lshr i32 %576, 28
  %579 = or i32 %577, %578
  %580 = add i32 %579, %569
  %581 = xor i32 %580, %569
  %582 = xor i32 %581, %558
  %583 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %584 = load i32, i32* %583, align 16
  %585 = add i32 %582, %584
  %586 = add i32 %585, -421815835
  %587 = add i32 %547, %586
  %588 = shl i32 %587, 11
  %589 = lshr i32 %587, 21
  %590 = or i32 %588, %589
  %591 = add i32 %590, %580
  %592 = xor i32 %591, %580
  %593 = xor i32 %592, %569
  %594 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %595 = load i32, i32* %594, align 4
  %596 = add i32 %593, %595
  %597 = add i32 %596, 530742520
  %598 = add i32 %558, %597
  %599 = shl i32 %598, 16
  %600 = lshr i32 %598, 16
  %601 = or i32 %599, %600
  %602 = add i32 %601, %591
  %603 = xor i32 %602, %591
  %604 = xor i32 %603, %580
  %605 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %606 = load i32, i32* %605, align 8
  %607 = add i32 %604, %606
  %608 = add i32 %607, -995338651
  %609 = add i32 %569, %608
  %610 = shl i32 %609, 23
  %611 = lshr i32 %609, 9
  %612 = or i32 %610, %611
  %613 = add i32 %612, %602
  %614 = xor i32 %591, -1
  %615 = or i32 %613, %614
  %616 = xor i32 %602, %615
  %617 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %618 = load i32, i32* %617, align 16
  %619 = add i32 %616, %618
  %620 = add i32 %619, -198630844
  %621 = add i32 %580, %620
  %622 = shl i32 %621, 6
  %623 = lshr i32 %621, 26
  %624 = or i32 %622, %623
  %625 = add i32 %624, %613
  %626 = xor i32 %602, -1
  %627 = or i32 %625, %626
  %628 = xor i32 %613, %627
  %629 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %630 = load i32, i32* %629, align 4
  %631 = add i32 %628, %630
  %632 = add i32 %631, 1126891415
  %633 = add i32 %591, %632
  %634 = shl i32 %633, 10
  %635 = lshr i32 %633, 22
  %636 = or i32 %634, %635
  %637 = add i32 %636, %625
  %638 = xor i32 %613, -1
  %639 = or i32 %637, %638
  %640 = xor i32 %625, %639
  %641 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %642 = load i32, i32* %641, align 8
  %643 = add i32 %640, %642
  %644 = add i32 %643, -1416354905
  %645 = add i32 %602, %644
  %646 = shl i32 %645, 15
  %647 = lshr i32 %645, 17
  %648 = or i32 %646, %647
  %649 = add i32 %648, %637
  %650 = xor i32 %625, -1
  %651 = or i32 %649, %650
  %652 = xor i32 %637, %651
  %653 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %654 = load i32, i32* %653, align 4
  %655 = add i32 %652, %654
  %656 = add i32 %655, -57434055
  %657 = add i32 %613, %656
  %658 = shl i32 %657, 21
  %659 = lshr i32 %657, 11
  %660 = or i32 %658, %659
  %661 = add i32 %660, %649
  %662 = xor i32 %637, -1
  %663 = or i32 %661, %662
  %664 = xor i32 %649, %663
  %665 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %666 = load i32, i32* %665, align 16
  %667 = add i32 %664, %666
  %668 = add i32 %667, 1700485571
  %669 = add i32 %625, %668
  %670 = shl i32 %669, 6
  %671 = lshr i32 %669, 26
  %672 = or i32 %670, %671
  %673 = add i32 %672, %661
  %674 = xor i32 %649, -1
  %675 = or i32 %673, %674
  %676 = xor i32 %661, %675
  %677 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %678 = load i32, i32* %677, align 4
  %679 = add i32 %676, %678
  %680 = add i32 %679, -1894986606
  %681 = add i32 %637, %680
  %682 = shl i32 %681, 10
  %683 = lshr i32 %681, 22
  %684 = or i32 %682, %683
  %685 = add i32 %684, %673
  %686 = xor i32 %661, -1
  %687 = or i32 %685, %686
  %688 = xor i32 %673, %687
  %689 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %690 = load i32, i32* %689, align 8
  %691 = add i32 %688, %690
  %692 = add i32 %691, -1051523
  %693 = add i32 %649, %692
  %694 = shl i32 %693, 15
  %695 = lshr i32 %693, 17
  %696 = or i32 %694, %695
  %697 = add i32 %696, %685
  %698 = xor i32 %673, -1
  %699 = or i32 %697, %698
  %700 = xor i32 %685, %699
  %701 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %702 = load i32, i32* %701, align 4
  %703 = add i32 %700, %702
  %704 = add i32 %703, -2054922799
  %705 = add i32 %661, %704
  %706 = shl i32 %705, 21
  %707 = lshr i32 %705, 11
  %708 = or i32 %706, %707
  %709 = add i32 %708, %697
  %710 = xor i32 %685, -1
  %711 = or i32 %709, %710
  %712 = xor i32 %697, %711
  %713 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %714 = load i32, i32* %713, align 16
  %715 = add i32 %712, %714
  %716 = add i32 %715, 1873313359
  %717 = add i32 %673, %716
  %718 = shl i32 %717, 6
  %719 = lshr i32 %717, 26
  %720 = or i32 %718, %719
  %721 = add i32 %720, %709
  %722 = xor i32 %697, -1
  %723 = or i32 %721, %722
  %724 = xor i32 %709, %723
  %725 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %726 = load i32, i32* %725, align 4
  %727 = add i32 %724, %726
  %728 = add i32 %727, -30611744
  %729 = add i32 %685, %728
  %730 = shl i32 %729, 10
  %731 = lshr i32 %729, 22
  %732 = or i32 %730, %731
  %733 = add i32 %732, %721
  %734 = xor i32 %709, -1
  %735 = or i32 %733, %734
  %736 = xor i32 %721, %735
  %737 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %738 = load i32, i32* %737, align 8
  %739 = add i32 %736, %738
  %740 = add i32 %739, -1560198380
  %741 = add i32 %697, %740
  %742 = shl i32 %741, 15
  %743 = lshr i32 %741, 17
  %744 = or i32 %742, %743
  %745 = add i32 %744, %733
  %746 = xor i32 %721, -1
  %747 = or i32 %745, %746
  %748 = xor i32 %733, %747
  %749 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %750 = load i32, i32* %749, align 4
  %751 = add i32 %748, %750
  %752 = add i32 %751, 1309151649
  %753 = add i32 %709, %752
  %754 = shl i32 %753, 21
  %755 = lshr i32 %753, 11
  %756 = or i32 %754, %755
  %757 = add i32 %756, %745
  %758 = xor i32 %733, -1
  %759 = or i32 %757, %758
  %760 = xor i32 %745, %759
  %761 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %762 = load i32, i32* %761, align 16
  %763 = add i32 %760, %762
  %764 = add i32 %763, -145523070
  %765 = add i32 %721, %764
  %766 = shl i32 %765, 6
  %767 = lshr i32 %765, 26
  %768 = or i32 %766, %767
  %769 = add i32 %768, %757
  %770 = xor i32 %745, -1
  %771 = or i32 %769, %770
  %772 = xor i32 %757, %771
  %773 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %774 = load i32, i32* %773, align 4
  %775 = add i32 %772, %774
  %776 = add i32 %775, -1120210379
  %777 = add i32 %733, %776
  %778 = shl i32 %777, 10
  %779 = lshr i32 %777, 22
  %780 = or i32 %778, %779
  %781 = add i32 %780, %769
  %782 = xor i32 %757, -1
  %783 = or i32 %781, %782
  %784 = xor i32 %769, %783
  %785 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %786 = load i32, i32* %785, align 8
  %787 = add i32 %784, %786
  %788 = add i32 %787, 718787259
  %789 = add i32 %745, %788
  %790 = shl i32 %789, 15
  %791 = lshr i32 %789, 17
  %792 = or i32 %790, %791
  %793 = add i32 %792, %781
  %794 = xor i32 %769, -1
  %795 = or i32 %793, %794
  %796 = xor i32 %781, %795
  %797 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %798 = load i32, i32* %797, align 4
  %799 = add i32 %796, %798
  %800 = add i32 %799, -343485551
  %801 = add i32 %757, %800
  %802 = shl i32 %801, 21
  %803 = lshr i32 %801, 11
  %804 = or i32 %802, %803
  %805 = add i32 %804, %793
  %806 = add i32 %769, %.045
  %807 = add i32 %805, %.036
  %808 = add i32 %793, %.018
  %809 = add i32 %781, %.09
  %810 = icmp ult i32* %241, %7
  br i1 %810, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.04.lcssa.ph = phi i32 [ %806, %.lr.ph ]
  %.03.lcssa.ph = phi i32 [ %807, %.lr.ph ]
  %.01.lcssa.ph = phi i32 [ %808, %.lr.ph ]
  %.0.lcssa.ph = phi i32 [ %809, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.04.lcssa = phi i32 [ %9, %3 ], [ %.04.lcssa.ph, %._crit_edge.loopexit ]
  %.03.lcssa = phi i32 [ %11, %3 ], [ %.03.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i32 [ %13, %3 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %.0.lcssa = phi i32 [ %15, %3 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %811 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 0
  store i32 %.04.lcssa, i32* %811, align 4
  %812 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 1
  store i32 %.03.lcssa, i32* %812, align 4
  %813 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 2
  store i32 %.01.lcssa, i32* %813, align 4
  %814 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 3
  store i32 %.0.lcssa, i32* %814, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @md5_stream(%struct._IO_FILE*, i8*) #0 {
  %3 = alloca %struct.md5_ctx, align 4, !track !865
  %4 = call noalias i8* @malloc(i64 32840) #8, !track !866
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %33

; <label>:6:                                      ; preds = %2
  call void @md5_init_ctx(%struct.md5_ctx* %3) #8
  br label %7

; <label>:7:                                      ; preds = %6, %._crit_edge
  call void @unroll_loop(i32 350)
  %8 = call i64 @fread_unlocked(i8* %4, i64 1, i64 32768, %struct._IO_FILE* %0)
  %9 = add i64 0, %8
  %10 = icmp eq i64 %9, 32768
  br i1 %10, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %7
  br label %.lr.ph

; <label>:11:                                     ; preds = %24
  %12 = getelementptr inbounds i8, i8* %4, i64 %17
  %13 = sub i64 32768, %17
  %14 = call i64 @fread_unlocked(i8* %12, i64 1, i64 %13, %struct._IO_FILE* %0)
  %15 = add i64 %17, %14
  %16 = icmp eq i64 %15, 32768
  br i1 %16, label %._crit_edge.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %11
  %17 = phi i64 [ %15, %11 ], [ %9, %.lr.ph.preheader ]
  %18 = phi i64 [ %14, %11 ], [ %8, %.lr.ph.preheader ]
  call void @unroll_loop(i32 351)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %.lr.ph
  %.lcssa2 = phi i64 [ %17, %.lr.ph ]
  %21 = call i32 @ferror_unlocked(%struct._IO_FILE* %0) #8
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %27

; <label>:23:                                     ; preds = %20
  call void @free(i8* %4) #8
  br label %33

; <label>:24:                                     ; preds = %.lr.ph
  %25 = call i32 @feof_unlocked(%struct._IO_FILE* %0) #8
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %.loopexit, label %11

._crit_edge.loopexit:                             ; preds = %11
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %7
  call void @md5_process_block(i8* %4, i64 32768, %struct.md5_ctx* %3) #8
  br label %7

.loopexit:                                        ; preds = %24
  %.ph = phi i64 [ %17, %24 ]
  br label %27

; <label>:27:                                     ; preds = %.loopexit, %20
  %28 = phi i64 [ %.lcssa2, %20 ], [ %.ph, %.loopexit ]
  %29 = icmp ugt i64 %28, 0
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %27
  call void @md5_process_bytes(i8* %4, i64 %28, %struct.md5_ctx* %3) #8
  br label %31

; <label>:31:                                     ; preds = %30, %27
  %32 = call i8* @md5_finish_ctx(%struct.md5_ctx* %3, i8* %1) #8
  call void @free(i8* %4) #8
  br label %33

; <label>:33:                                     ; preds = %2, %31, %23
  %.0 = phi i32 [ 1, %23 ], [ 0, %31 ], [ 1, %2 ]
  ret i32 %.0
}

declare dso_local i64 @fread_unlocked(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @feof_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @md5_process_bytes(i8*, i64, %struct.md5_ctx*) #0 {
  %4 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %52

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = sub i64 128, %10
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %1, i64 %11
  %14 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %15 = getelementptr inbounds [32 x i32], [32 x i32]* %14, i32 0, i32 0
  %16 = bitcast i32* %15 to i8*
  %17 = getelementptr inbounds i8, i8* %16, i64 %10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %0, i64 %13, i1 false), !track !867
  %18 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = add i64 %20, %13
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %18, align 4
  %23 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %24 = load i32, i32* %23, align 4
  %25 = icmp ugt i32 %24, 64
  br i1 %25, label %26, label %49

; <label>:26:                                     ; preds = %7
  %27 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %28 = getelementptr inbounds [32 x i32], [32 x i32]* %27, i32 0, i32 0
  %29 = bitcast i32* %28 to i8*
  %30 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %31, -64
  %33 = zext i32 %32 to i64
  call void @md5_process_block(i8* %29, i64 %33, %struct.md5_ctx* %2) #8
  %34 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 63
  store i32 %36, i32* %34, align 4
  %37 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %38 = getelementptr inbounds [32 x i32], [32 x i32]* %37, i32 0, i32 0
  %39 = bitcast i32* %38 to i8*
  %40 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %41 = getelementptr inbounds [32 x i32], [32 x i32]* %40, i32 0, i32 0
  %42 = bitcast i32* %41 to i8*
  %43 = add i64 %10, %13
  %44 = and i64 %43, -64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 1 %45, i64 %48, i1 false), !track !868
  br label %49

; <label>:49:                                     ; preds = %26, %7
  %50 = getelementptr inbounds i8, i8* %0, i64 %13
  %51 = sub i64 %1, %13
  br label %52

; <label>:52:                                     ; preds = %49, %3
  %.01 = phi i64 [ %51, %49 ], [ %1, %3 ]
  %.0 = phi i8* [ %50, %49 ], [ %0, %3 ]
  %53 = icmp uge i64 %.01, 64
  br i1 %53, label %54, label %78

; <label>:54:                                     ; preds = %52
  %55 = ptrtoint i8* %.0 to i64
  %56 = urem i64 %55, 4
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %73

; <label>:58:                                     ; preds = %54
  %59 = icmp ugt i64 %.01, 64
  br i1 %59, label %.lr.ph, label %78

.lr.ph:                                           ; preds = %58
  %60 = add i64 %.01, -65
  %61 = lshr i64 %60, 6
  %62 = shl i64 %61, 6
  br label %63

; <label>:63:                                     ; preds = %.lr.ph, %63
  %.17 = phi i8* [ %.0, %.lr.ph ], [ %67, %63 ]
  %.126 = phi i64 [ %.01, %.lr.ph ], [ %68, %63 ]
  call void @unroll_loop(i32 432)
  %64 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %65 = getelementptr inbounds [32 x i32], [32 x i32]* %64, i32 0, i32 0
  %66 = bitcast i32* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 1 %.17, i64 64, i1 false), !track !869
  call void @md5_process_block(i8* %66, i64 64, %struct.md5_ctx* %2) #8
  %67 = getelementptr inbounds i8, i8* %.17, i64 64
  %68 = sub i64 %.126, 64
  %69 = icmp ugt i64 %68, 64
  br i1 %69, label %63, label %._crit_edge

._crit_edge:                                      ; preds = %63
  %70 = add i64 %62, 64
  %71 = add i64 %.01, -64
  %72 = sub i64 %71, %62
  %scevgep = getelementptr i8, i8* %.0, i64 %70
  br label %78

; <label>:73:                                     ; preds = %54
  %74 = and i64 %.01, -64
  call void @md5_process_block(i8* %.0, i64 %74, %struct.md5_ctx* %2) #8
  %75 = and i64 %.01, -64
  %76 = getelementptr inbounds i8, i8* %.0, i64 %75
  %77 = and i64 %.01, 63
  br label %78

; <label>:78:                                     ; preds = %73, %._crit_edge, %58, %52
  %.34 = phi i64 [ %.01, %52 ], [ %77, %73 ], [ %72, %._crit_edge ], [ %.01, %58 ]
  %.3 = phi i8* [ %.0, %52 ], [ %76, %73 ], [ %scevgep, %._crit_edge ], [ %.0, %58 ]
  %79 = icmp ugt i64 %.34, 0
  br i1 %79, label %80, label %104

; <label>:80:                                     ; preds = %78
  %81 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %85 = getelementptr inbounds [32 x i32], [32 x i32]* %84, i32 0, i32 0
  %86 = bitcast i32* %85 to i8*
  %87 = getelementptr inbounds i8, i8* %86, i64 %83
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %.3, i64 %.34, i1 false), !track !870
  %88 = add i64 %83, %.34
  %89 = icmp uge i64 %88, 64
  br i1 %89, label %90, label %101

; <label>:90:                                     ; preds = %80
  %91 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %92 = getelementptr inbounds [32 x i32], [32 x i32]* %91, i32 0, i32 0
  %93 = bitcast i32* %92 to i8*
  call void @md5_process_block(i8* %93, i64 64, %struct.md5_ctx* %2) #8
  %94 = sub i64 %88, 64
  %95 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %96 = getelementptr inbounds [32 x i32], [32 x i32]* %95, i32 0, i32 0
  %97 = bitcast i32* %96 to i8*
  %98 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 6
  %99 = getelementptr inbounds [32 x i32], [32 x i32]* %98, i64 0, i64 16
  %100 = bitcast i32* %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %100, i64 %94, i1 false), !track !871
  br label %101

; <label>:101:                                    ; preds = %90, %80
  %.05 = phi i64 [ %94, %90 ], [ %88, %80 ]
  %102 = trunc i64 %.05 to i32
  %103 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5
  store i32 %102, i32* %103, align 4
  br label %104

; <label>:104:                                    ; preds = %101, %78
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @md5_buffer(i8*, i64, i8*) #0 {
  %4 = alloca %struct.md5_ctx, align 4, !track !872
  call void @md5_init_ctx(%struct.md5_ctx* %4) #8
  call void @md5_process_bytes(i8* %0, i64 %1, %struct.md5_ctx* %4) #8
  %5 = call i8* @md5_finish_ctx(%struct.md5_ctx* %4, i8* %2) #8
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sha1_init_ctx(%struct.sha1_ctx*) #0 {
  %2 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 0
  store i32 1732584193, i32* %2, align 4
  %3 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 1
  store i32 -271733879, i32* %3, align 4
  %4 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 2
  store i32 -1732584194, i32* %4, align 4
  %5 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 3
  store i32 271733878, i32* %5, align 4
  %6 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 4
  store i32 -1009589776, i32* %6, align 4
  %7 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 6
  store i32 0, i32* %11, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @sha1_read_ctx(%struct.sha1_ctx*, i8*) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 0
  %4 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = shl i32 %5, 24
  %7 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 65280
  %10 = shl i32 %9, 8
  %11 = or i32 %6, %10
  %12 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = lshr i32 %13, 8
  %15 = and i32 %14, 65280
  %16 = or i32 %11, %15
  %17 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %18, 24
  %20 = or i32 %16, %19
  call void @set_uint32.1812(i8* %3, i32 %20)
  %21 = getelementptr inbounds i8, i8* %1, i64 4
  %22 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = shl i32 %23, 24
  %25 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 65280
  %28 = shl i32 %27, 8
  %29 = or i32 %24, %28
  %30 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = lshr i32 %31, 8
  %33 = and i32 %32, 65280
  %34 = or i32 %29, %33
  %35 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = lshr i32 %36, 24
  %38 = or i32 %34, %37
  call void @set_uint32.1812(i8* %21, i32 %38)
  %39 = getelementptr inbounds i8, i8* %1, i64 8
  %40 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = shl i32 %41, 24
  %43 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = and i32 %44, 65280
  %46 = shl i32 %45, 8
  %47 = or i32 %42, %46
  %48 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = lshr i32 %49, 8
  %51 = and i32 %50, 65280
  %52 = or i32 %47, %51
  %53 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = lshr i32 %54, 24
  %56 = or i32 %52, %55
  call void @set_uint32.1812(i8* %39, i32 %56)
  %57 = getelementptr inbounds i8, i8* %1, i64 12
  %58 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = shl i32 %59, 24
  %61 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, 65280
  %64 = shl i32 %63, 8
  %65 = or i32 %60, %64
  %66 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = lshr i32 %67, 8
  %69 = and i32 %68, 65280
  %70 = or i32 %65, %69
  %71 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = lshr i32 %72, 24
  %74 = or i32 %70, %73
  call void @set_uint32.1812(i8* %57, i32 %74)
  %75 = getelementptr inbounds i8, i8* %1, i64 16
  %76 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 4
  %77 = load i32, i32* %76, align 4
  %78 = shl i32 %77, 24
  %79 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 4
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, 65280
  %82 = shl i32 %81, 8
  %83 = or i32 %78, %82
  %84 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 4
  %85 = load i32, i32* %84, align 4
  %86 = lshr i32 %85, 8
  %87 = and i32 %86, 65280
  %88 = or i32 %83, %87
  %89 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 4
  %90 = load i32, i32* %89, align 4
  %91 = lshr i32 %90, 24
  %92 = or i32 %88, %91
  call void @set_uint32.1812(i8* %75, i32 %92)
  ret i8* %1
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_uint32.1812(i8*, i32) #0 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 4 %4, i64 4, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @sha1_finish_ctx(%struct.sha1_ctx*, i8*) #0 {
  %3 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 6
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 56
  %6 = zext i1 %5 to i64
  %7 = select i1 %5, i32 16, i32 32
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %4
  store i32 %12, i32* %10, align 4
  %13 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %15, %4
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %2
  %18 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %19, align 4
  br label %22

; <label>:22:                                     ; preds = %17, %2
  %23 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %23, i64 0, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 3
  %27 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i64 0, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = lshr i32 %29, 29
  %31 = or i32 %26, %30
  %32 = shl i32 %31, 24
  %33 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %33, i64 0, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = shl i32 %35, 3
  %37 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %38 = getelementptr inbounds [2 x i32], [2 x i32]* %37, i64 0, i64 0
  %39 = load i32, i32* %38, align 4
  %40 = lshr i32 %39, 29
  %41 = or i32 %36, %40
  %42 = and i32 %41, 65280
  %43 = shl i32 %42, 8
  %44 = or i32 %32, %43
  %45 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %46 = getelementptr inbounds [2 x i32], [2 x i32]* %45, i64 0, i64 1
  %47 = load i32, i32* %46, align 4
  %48 = shl i32 %47, 3
  %49 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %50 = getelementptr inbounds [2 x i32], [2 x i32]* %49, i64 0, i64 0
  %51 = load i32, i32* %50, align 4
  %52 = lshr i32 %51, 29
  %53 = or i32 %48, %52
  %54 = lshr i32 %53, 8
  %55 = and i32 %54, 65280
  %56 = or i32 %44, %55
  %57 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %58 = getelementptr inbounds [2 x i32], [2 x i32]* %57, i64 0, i64 1
  %59 = load i32, i32* %58, align 4
  %60 = shl i32 %59, 3
  %61 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %62 = getelementptr inbounds [2 x i32], [2 x i32]* %61, i64 0, i64 0
  %63 = load i32, i32* %62, align 4
  %64 = lshr i32 %63, 29
  %65 = or i32 %60, %64
  %66 = lshr i32 %65, 24
  %67 = or i32 %56, %66
  %68 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 7
  %69 = sub i64 %8, 2
  %70 = getelementptr inbounds [32 x i32], [32 x i32]* %68, i64 0, i64 %69
  store i32 %67, i32* %70, align 4
  %71 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %72 = getelementptr inbounds [2 x i32], [2 x i32]* %71, i64 0, i64 0
  %73 = load i32, i32* %72, align 4
  %74 = shl i32 %73, 3
  %75 = shl i32 %74, 24
  %76 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %77 = getelementptr inbounds [2 x i32], [2 x i32]* %76, i64 0, i64 0
  %78 = load i32, i32* %77, align 4
  %79 = shl i32 %78, 3
  %80 = and i32 %79, 65280
  %81 = shl i32 %80, 8
  %82 = or i32 %75, %81
  %83 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %84 = getelementptr inbounds [2 x i32], [2 x i32]* %83, i64 0, i64 0
  %85 = load i32, i32* %84, align 4
  %86 = shl i32 %85, 3
  %87 = lshr i32 %86, 8
  %88 = and i32 %87, 65280
  %89 = or i32 %82, %88
  %90 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 5
  %91 = getelementptr inbounds [2 x i32], [2 x i32]* %90, i64 0, i64 0
  %92 = load i32, i32* %91, align 4
  %93 = shl i32 %92, 3
  %94 = lshr i32 %93, 24
  %95 = or i32 %89, %94
  %96 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 7
  %97 = sub i64 %8, 1
  %98 = getelementptr inbounds [32 x i32], [32 x i32]* %96, i64 0, i64 %97
  store i32 %95, i32* %98, align 4
  %99 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 7
  %100 = getelementptr inbounds [32 x i32], [32 x i32]* %99, i32 0, i32 0
  %101 = bitcast i32* %100 to i8*
  %102 = zext i32 %4 to i64
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  %104 = sub i64 %8, 2
  %105 = mul i64 %104, 4
  %106 = zext i32 %4 to i64
  %107 = sub i64 %105, %106
  %108 = getelementptr [64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @fillbuf.1815 to [64 x i8]*), i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 16 %108, i64 %107, i1 false), !track !873
  %109 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %0, i32 0, i32 7
  %110 = getelementptr inbounds [32 x i32], [32 x i32]* %109, i32 0, i32 0
  %111 = bitcast i32* %110 to i8*
  %112 = mul i64 %8, 4
  call void @sha1_process_block(i8* %111, i64 %112, %struct.sha1_ctx* %0)
  %113 = call i8* @sha1_read_ctx(%struct.sha1_ctx* %0, i8* %1)
  ret i8* %113
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sha1_process_block(i8*, i64, %struct.sha1_ctx*) #0 {
  %4 = alloca [16 x i32], align 16, !track !874
  %5 = bitcast i8* %0 to i32*
  %6 = udiv i64 %1, 4
  %7 = getelementptr inbounds i32, i32* %5, i64 %6
  %8 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = trunc i64 %1 to i32
  %19 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 5
  %20 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 0
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %18
  store i32 %22, i32* %20, align 4
  %23 = lshr i64 %1, 31
  %24 = lshr i64 %23, 1
  %25 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 5
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %25, i64 0, i64 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp ult i32 %27, %18
  %29 = zext i1 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = add i64 %24, %30
  %32 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 5
  %33 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i64 0, i64 1
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i64
  %36 = add i64 %35, %31
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %33, align 4
  %38 = icmp ult i32* %5, %7
  br i1 %38, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %55
  %.0114 = phi i32 [ %2082, %55 ], [ %17, %.lr.ph.preheader ]
  %.0213 = phi i32* [ %scevgep, %55 ], [ %5, %.lr.ph.preheader ]
  %.0312 = phi i32 [ %2079, %55 ], [ %15, %.lr.ph.preheader ]
  %.0411 = phi i32 [ %2076, %55 ], [ %13, %.lr.ph.preheader ]
  %.0510 = phi i32 [ %2070, %55 ], [ %9, %.lr.ph.preheader ]
  %.069 = phi i32 [ %2073, %55 ], [ %11, %.lr.ph.preheader ]
  call void @unroll_loop(i32 435)
  br label %39

; <label>:39:                                     ; preds = %.lr.ph, %39
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %39 ]
  %.17 = phi i32* [ %.0213, %.lr.ph ], [ %54, %39 ]
  call void @unroll_loop(i32 436)
  %40 = load i32, i32* %.17, align 4
  %41 = shl i32 %40, 24
  %42 = load i32, i32* %.17, align 4
  %43 = and i32 %42, 65280
  %44 = shl i32 %43, 8
  %45 = or i32 %41, %44
  %46 = load i32, i32* %.17, align 4
  %47 = lshr i32 %46, 8
  %48 = and i32 %47, 65280
  %49 = or i32 %45, %48
  %50 = load i32, i32* %.17, align 4
  %51 = lshr i32 %50, 24
  %52 = or i32 %49, %51
  %53 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 %indvars.iv
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds i32, i32* %.17, i32 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 16
  br i1 %exitcond, label %39, label %55

; <label>:55:                                     ; preds = %39
  %scevgep = getelementptr i32, i32* %.0213, i64 16
  %56 = shl i32 %.0510, 5
  %57 = lshr i32 %.0510, 27
  %58 = or i32 %56, %57
  %59 = xor i32 %.0411, %.0312
  %60 = and i32 %.069, %59
  %61 = xor i32 %.0312, %60
  %62 = add i32 %58, %61
  %63 = add i32 %62, 1518500249
  %64 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %65 = load i32, i32* %64, align 16
  %66 = add i32 %63, %65
  %67 = add i32 %.0114, %66
  %68 = shl i32 %.069, 30
  %69 = lshr i32 %.069, 2
  %70 = or i32 %68, %69
  %71 = shl i32 %67, 5
  %72 = lshr i32 %67, 27
  %73 = or i32 %71, %72
  %74 = xor i32 %70, %.0411
  %75 = and i32 %.0510, %74
  %76 = xor i32 %.0411, %75
  %77 = add i32 %73, %76
  %78 = add i32 %77, 1518500249
  %79 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %80 = load i32, i32* %79, align 4
  %81 = add i32 %78, %80
  %82 = add i32 %.0312, %81
  %83 = shl i32 %.0510, 30
  %84 = lshr i32 %.0510, 2
  %85 = or i32 %83, %84
  %86 = shl i32 %82, 5
  %87 = lshr i32 %82, 27
  %88 = or i32 %86, %87
  %89 = xor i32 %85, %70
  %90 = and i32 %67, %89
  %91 = xor i32 %70, %90
  %92 = add i32 %88, %91
  %93 = add i32 %92, 1518500249
  %94 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %95 = load i32, i32* %94, align 8
  %96 = add i32 %93, %95
  %97 = add i32 %.0411, %96
  %98 = shl i32 %67, 30
  %99 = lshr i32 %67, 2
  %100 = or i32 %98, %99
  %101 = shl i32 %97, 5
  %102 = lshr i32 %97, 27
  %103 = or i32 %101, %102
  %104 = xor i32 %100, %85
  %105 = and i32 %82, %104
  %106 = xor i32 %85, %105
  %107 = add i32 %103, %106
  %108 = add i32 %107, 1518500249
  %109 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %110 = load i32, i32* %109, align 4
  %111 = add i32 %108, %110
  %112 = add i32 %70, %111
  %113 = shl i32 %82, 30
  %114 = lshr i32 %82, 2
  %115 = or i32 %113, %114
  %116 = shl i32 %112, 5
  %117 = lshr i32 %112, 27
  %118 = or i32 %116, %117
  %119 = xor i32 %115, %100
  %120 = and i32 %97, %119
  %121 = xor i32 %100, %120
  %122 = add i32 %118, %121
  %123 = add i32 %122, 1518500249
  %124 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %125 = load i32, i32* %124, align 16
  %126 = add i32 %123, %125
  %127 = add i32 %85, %126
  %128 = shl i32 %97, 30
  %129 = lshr i32 %97, 2
  %130 = or i32 %128, %129
  %131 = shl i32 %127, 5
  %132 = lshr i32 %127, 27
  %133 = or i32 %131, %132
  %134 = xor i32 %130, %115
  %135 = and i32 %112, %134
  %136 = xor i32 %115, %135
  %137 = add i32 %133, %136
  %138 = add i32 %137, 1518500249
  %139 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %140 = load i32, i32* %139, align 4
  %141 = add i32 %138, %140
  %142 = add i32 %100, %141
  %143 = shl i32 %112, 30
  %144 = lshr i32 %112, 2
  %145 = or i32 %143, %144
  %146 = shl i32 %142, 5
  %147 = lshr i32 %142, 27
  %148 = or i32 %146, %147
  %149 = xor i32 %145, %130
  %150 = and i32 %127, %149
  %151 = xor i32 %130, %150
  %152 = add i32 %148, %151
  %153 = add i32 %152, 1518500249
  %154 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %155 = load i32, i32* %154, align 8
  %156 = add i32 %153, %155
  %157 = add i32 %115, %156
  %158 = shl i32 %127, 30
  %159 = lshr i32 %127, 2
  %160 = or i32 %158, %159
  %161 = shl i32 %157, 5
  %162 = lshr i32 %157, 27
  %163 = or i32 %161, %162
  %164 = xor i32 %160, %145
  %165 = and i32 %142, %164
  %166 = xor i32 %145, %165
  %167 = add i32 %163, %166
  %168 = add i32 %167, 1518500249
  %169 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %170 = load i32, i32* %169, align 4
  %171 = add i32 %168, %170
  %172 = add i32 %130, %171
  %173 = shl i32 %142, 30
  %174 = lshr i32 %142, 2
  %175 = or i32 %173, %174
  %176 = shl i32 %172, 5
  %177 = lshr i32 %172, 27
  %178 = or i32 %176, %177
  %179 = xor i32 %175, %160
  %180 = and i32 %157, %179
  %181 = xor i32 %160, %180
  %182 = add i32 %178, %181
  %183 = add i32 %182, 1518500249
  %184 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %185 = load i32, i32* %184, align 16
  %186 = add i32 %183, %185
  %187 = add i32 %145, %186
  %188 = shl i32 %157, 30
  %189 = lshr i32 %157, 2
  %190 = or i32 %188, %189
  %191 = shl i32 %187, 5
  %192 = lshr i32 %187, 27
  %193 = or i32 %191, %192
  %194 = xor i32 %190, %175
  %195 = and i32 %172, %194
  %196 = xor i32 %175, %195
  %197 = add i32 %193, %196
  %198 = add i32 %197, 1518500249
  %199 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %200 = load i32, i32* %199, align 4
  %201 = add i32 %198, %200
  %202 = add i32 %160, %201
  %203 = shl i32 %172, 30
  %204 = lshr i32 %172, 2
  %205 = or i32 %203, %204
  %206 = shl i32 %202, 5
  %207 = lshr i32 %202, 27
  %208 = or i32 %206, %207
  %209 = xor i32 %205, %190
  %210 = and i32 %187, %209
  %211 = xor i32 %190, %210
  %212 = add i32 %208, %211
  %213 = add i32 %212, 1518500249
  %214 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %215 = load i32, i32* %214, align 8
  %216 = add i32 %213, %215
  %217 = add i32 %175, %216
  %218 = shl i32 %187, 30
  %219 = lshr i32 %187, 2
  %220 = or i32 %218, %219
  %221 = shl i32 %217, 5
  %222 = lshr i32 %217, 27
  %223 = or i32 %221, %222
  %224 = xor i32 %220, %205
  %225 = and i32 %202, %224
  %226 = xor i32 %205, %225
  %227 = add i32 %223, %226
  %228 = add i32 %227, 1518500249
  %229 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %230 = load i32, i32* %229, align 4
  %231 = add i32 %228, %230
  %232 = add i32 %190, %231
  %233 = shl i32 %202, 30
  %234 = lshr i32 %202, 2
  %235 = or i32 %233, %234
  %236 = shl i32 %232, 5
  %237 = lshr i32 %232, 27
  %238 = or i32 %236, %237
  %239 = xor i32 %235, %220
  %240 = and i32 %217, %239
  %241 = xor i32 %220, %240
  %242 = add i32 %238, %241
  %243 = add i32 %242, 1518500249
  %244 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %245 = load i32, i32* %244, align 16
  %246 = add i32 %243, %245
  %247 = add i32 %205, %246
  %248 = shl i32 %217, 30
  %249 = lshr i32 %217, 2
  %250 = or i32 %248, %249
  %251 = shl i32 %247, 5
  %252 = lshr i32 %247, 27
  %253 = or i32 %251, %252
  %254 = xor i32 %250, %235
  %255 = and i32 %232, %254
  %256 = xor i32 %235, %255
  %257 = add i32 %253, %256
  %258 = add i32 %257, 1518500249
  %259 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %260 = load i32, i32* %259, align 4
  %261 = add i32 %258, %260
  %262 = add i32 %220, %261
  %263 = shl i32 %232, 30
  %264 = lshr i32 %232, 2
  %265 = or i32 %263, %264
  %266 = shl i32 %262, 5
  %267 = lshr i32 %262, 27
  %268 = or i32 %266, %267
  %269 = xor i32 %265, %250
  %270 = and i32 %247, %269
  %271 = xor i32 %250, %270
  %272 = add i32 %268, %271
  %273 = add i32 %272, 1518500249
  %274 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %275 = load i32, i32* %274, align 8
  %276 = add i32 %273, %275
  %277 = add i32 %235, %276
  %278 = shl i32 %247, 30
  %279 = lshr i32 %247, 2
  %280 = or i32 %278, %279
  %281 = shl i32 %277, 5
  %282 = lshr i32 %277, 27
  %283 = or i32 %281, %282
  %284 = xor i32 %280, %265
  %285 = and i32 %262, %284
  %286 = xor i32 %265, %285
  %287 = add i32 %283, %286
  %288 = add i32 %287, 1518500249
  %289 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %290 = load i32, i32* %289, align 4
  %291 = add i32 %288, %290
  %292 = add i32 %250, %291
  %293 = shl i32 %262, 30
  %294 = lshr i32 %262, 2
  %295 = or i32 %293, %294
  %296 = shl i32 %292, 5
  %297 = lshr i32 %292, 27
  %298 = or i32 %296, %297
  %299 = xor i32 %295, %280
  %300 = and i32 %277, %299
  %301 = xor i32 %280, %300
  %302 = add i32 %298, %301
  %303 = add i32 %302, 1518500249
  %304 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %305 = load i32, i32* %304, align 16
  %306 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %307 = load i32, i32* %306, align 8
  %308 = xor i32 %305, %307
  %309 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %310 = load i32, i32* %309, align 16
  %311 = xor i32 %308, %310
  %312 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %313 = load i32, i32* %312, align 4
  %314 = xor i32 %311, %313
  %315 = shl i32 %314, 1
  %316 = lshr i32 %314, 31
  %317 = or i32 %315, %316
  %318 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  store i32 %317, i32* %318, align 16
  %319 = add i32 %303, %317
  %320 = add i32 %265, %319
  %321 = shl i32 %277, 30
  %322 = lshr i32 %277, 2
  %323 = or i32 %321, %322
  %324 = shl i32 %320, 5
  %325 = lshr i32 %320, 27
  %326 = or i32 %324, %325
  %327 = xor i32 %323, %295
  %328 = and i32 %292, %327
  %329 = xor i32 %295, %328
  %330 = add i32 %326, %329
  %331 = add i32 %330, 1518500249
  %332 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %333 = load i32, i32* %332, align 4
  %334 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %335 = load i32, i32* %334, align 4
  %336 = xor i32 %333, %335
  %337 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %338 = load i32, i32* %337, align 4
  %339 = xor i32 %336, %338
  %340 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %341 = load i32, i32* %340, align 8
  %342 = xor i32 %339, %341
  %343 = shl i32 %342, 1
  %344 = lshr i32 %342, 31
  %345 = or i32 %343, %344
  %346 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  store i32 %345, i32* %346, align 4
  %347 = add i32 %331, %345
  %348 = add i32 %280, %347
  %349 = shl i32 %292, 30
  %350 = lshr i32 %292, 2
  %351 = or i32 %349, %350
  %352 = shl i32 %348, 5
  %353 = lshr i32 %348, 27
  %354 = or i32 %352, %353
  %355 = xor i32 %351, %323
  %356 = and i32 %320, %355
  %357 = xor i32 %323, %356
  %358 = add i32 %354, %357
  %359 = add i32 %358, 1518500249
  %360 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %361 = load i32, i32* %360, align 8
  %362 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %363 = load i32, i32* %362, align 16
  %364 = xor i32 %361, %363
  %365 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %366 = load i32, i32* %365, align 8
  %367 = xor i32 %364, %366
  %368 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %369 = load i32, i32* %368, align 4
  %370 = xor i32 %367, %369
  %371 = shl i32 %370, 1
  %372 = lshr i32 %370, 31
  %373 = or i32 %371, %372
  %374 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  store i32 %373, i32* %374, align 8
  %375 = add i32 %359, %373
  %376 = add i32 %295, %375
  %377 = shl i32 %320, 30
  %378 = lshr i32 %320, 2
  %379 = or i32 %377, %378
  %380 = shl i32 %376, 5
  %381 = lshr i32 %376, 27
  %382 = or i32 %380, %381
  %383 = xor i32 %379, %351
  %384 = and i32 %348, %383
  %385 = xor i32 %351, %384
  %386 = add i32 %382, %385
  %387 = add i32 %386, 1518500249
  %388 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %389 = load i32, i32* %388, align 4
  %390 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %391 = load i32, i32* %390, align 4
  %392 = xor i32 %389, %391
  %393 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %394 = load i32, i32* %393, align 4
  %395 = xor i32 %392, %394
  %396 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %397 = load i32, i32* %396, align 16
  %398 = xor i32 %395, %397
  %399 = shl i32 %398, 1
  %400 = lshr i32 %398, 31
  %401 = or i32 %399, %400
  %402 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  store i32 %401, i32* %402, align 4
  %403 = add i32 %387, %401
  %404 = add i32 %323, %403
  %405 = shl i32 %348, 30
  %406 = lshr i32 %348, 2
  %407 = or i32 %405, %406
  %408 = shl i32 %404, 5
  %409 = lshr i32 %404, 27
  %410 = or i32 %408, %409
  %411 = xor i32 %376, %407
  %412 = xor i32 %411, %379
  %413 = add i32 %410, %412
  %414 = add i32 %413, 1859775393
  %415 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %416 = load i32, i32* %415, align 16
  %417 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %418 = load i32, i32* %417, align 8
  %419 = xor i32 %416, %418
  %420 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %421 = load i32, i32* %420, align 16
  %422 = xor i32 %419, %421
  %423 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %424 = load i32, i32* %423, align 4
  %425 = xor i32 %422, %424
  %426 = shl i32 %425, 1
  %427 = lshr i32 %425, 31
  %428 = or i32 %426, %427
  %429 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  store i32 %428, i32* %429, align 16
  %430 = add i32 %414, %428
  %431 = add i32 %351, %430
  %432 = shl i32 %376, 30
  %433 = lshr i32 %376, 2
  %434 = or i32 %432, %433
  %435 = shl i32 %431, 5
  %436 = lshr i32 %431, 27
  %437 = or i32 %435, %436
  %438 = xor i32 %404, %434
  %439 = xor i32 %438, %407
  %440 = add i32 %437, %439
  %441 = add i32 %440, 1859775393
  %442 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %443 = load i32, i32* %442, align 4
  %444 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %445 = load i32, i32* %444, align 4
  %446 = xor i32 %443, %445
  %447 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %448 = load i32, i32* %447, align 4
  %449 = xor i32 %446, %448
  %450 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %451 = load i32, i32* %450, align 8
  %452 = xor i32 %449, %451
  %453 = shl i32 %452, 1
  %454 = lshr i32 %452, 31
  %455 = or i32 %453, %454
  %456 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  store i32 %455, i32* %456, align 4
  %457 = add i32 %441, %455
  %458 = add i32 %379, %457
  %459 = shl i32 %404, 30
  %460 = lshr i32 %404, 2
  %461 = or i32 %459, %460
  %462 = shl i32 %458, 5
  %463 = lshr i32 %458, 27
  %464 = or i32 %462, %463
  %465 = xor i32 %431, %461
  %466 = xor i32 %465, %434
  %467 = add i32 %464, %466
  %468 = add i32 %467, 1859775393
  %469 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %470 = load i32, i32* %469, align 8
  %471 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %472 = load i32, i32* %471, align 16
  %473 = xor i32 %470, %472
  %474 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %475 = load i32, i32* %474, align 8
  %476 = xor i32 %473, %475
  %477 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %478 = load i32, i32* %477, align 4
  %479 = xor i32 %476, %478
  %480 = shl i32 %479, 1
  %481 = lshr i32 %479, 31
  %482 = or i32 %480, %481
  %483 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  store i32 %482, i32* %483, align 8
  %484 = add i32 %468, %482
  %485 = add i32 %407, %484
  %486 = shl i32 %431, 30
  %487 = lshr i32 %431, 2
  %488 = or i32 %486, %487
  %489 = shl i32 %485, 5
  %490 = lshr i32 %485, 27
  %491 = or i32 %489, %490
  %492 = xor i32 %458, %488
  %493 = xor i32 %492, %461
  %494 = add i32 %491, %493
  %495 = add i32 %494, 1859775393
  %496 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %497 = load i32, i32* %496, align 4
  %498 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %499 = load i32, i32* %498, align 4
  %500 = xor i32 %497, %499
  %501 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %502 = load i32, i32* %501, align 4
  %503 = xor i32 %500, %502
  %504 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %505 = load i32, i32* %504, align 16
  %506 = xor i32 %503, %505
  %507 = shl i32 %506, 1
  %508 = lshr i32 %506, 31
  %509 = or i32 %507, %508
  %510 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  store i32 %509, i32* %510, align 4
  %511 = add i32 %495, %509
  %512 = add i32 %434, %511
  %513 = shl i32 %458, 30
  %514 = lshr i32 %458, 2
  %515 = or i32 %513, %514
  %516 = shl i32 %512, 5
  %517 = lshr i32 %512, 27
  %518 = or i32 %516, %517
  %519 = xor i32 %485, %515
  %520 = xor i32 %519, %488
  %521 = add i32 %518, %520
  %522 = add i32 %521, 1859775393
  %523 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %524 = load i32, i32* %523, align 16
  %525 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %526 = load i32, i32* %525, align 8
  %527 = xor i32 %524, %526
  %528 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %529 = load i32, i32* %528, align 16
  %530 = xor i32 %527, %529
  %531 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %532 = load i32, i32* %531, align 4
  %533 = xor i32 %530, %532
  %534 = shl i32 %533, 1
  %535 = lshr i32 %533, 31
  %536 = or i32 %534, %535
  %537 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  store i32 %536, i32* %537, align 16
  %538 = add i32 %522, %536
  %539 = add i32 %461, %538
  %540 = shl i32 %485, 30
  %541 = lshr i32 %485, 2
  %542 = or i32 %540, %541
  %543 = shl i32 %539, 5
  %544 = lshr i32 %539, 27
  %545 = or i32 %543, %544
  %546 = xor i32 %512, %542
  %547 = xor i32 %546, %515
  %548 = add i32 %545, %547
  %549 = add i32 %548, 1859775393
  %550 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %551 = load i32, i32* %550, align 4
  %552 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %553 = load i32, i32* %552, align 4
  %554 = xor i32 %551, %553
  %555 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %556 = load i32, i32* %555, align 4
  %557 = xor i32 %554, %556
  %558 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %559 = load i32, i32* %558, align 8
  %560 = xor i32 %557, %559
  %561 = shl i32 %560, 1
  %562 = lshr i32 %560, 31
  %563 = or i32 %561, %562
  %564 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  store i32 %563, i32* %564, align 4
  %565 = add i32 %549, %563
  %566 = add i32 %488, %565
  %567 = shl i32 %512, 30
  %568 = lshr i32 %512, 2
  %569 = or i32 %567, %568
  %570 = shl i32 %566, 5
  %571 = lshr i32 %566, 27
  %572 = or i32 %570, %571
  %573 = xor i32 %539, %569
  %574 = xor i32 %573, %542
  %575 = add i32 %572, %574
  %576 = add i32 %575, 1859775393
  %577 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %578 = load i32, i32* %577, align 8
  %579 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %580 = load i32, i32* %579, align 16
  %581 = xor i32 %578, %580
  %582 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %583 = load i32, i32* %582, align 8
  %584 = xor i32 %581, %583
  %585 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %586 = load i32, i32* %585, align 4
  %587 = xor i32 %584, %586
  %588 = shl i32 %587, 1
  %589 = lshr i32 %587, 31
  %590 = or i32 %588, %589
  %591 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  store i32 %590, i32* %591, align 8
  %592 = add i32 %576, %590
  %593 = add i32 %515, %592
  %594 = shl i32 %539, 30
  %595 = lshr i32 %539, 2
  %596 = or i32 %594, %595
  %597 = shl i32 %593, 5
  %598 = lshr i32 %593, 27
  %599 = or i32 %597, %598
  %600 = xor i32 %566, %596
  %601 = xor i32 %600, %569
  %602 = add i32 %599, %601
  %603 = add i32 %602, 1859775393
  %604 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %605 = load i32, i32* %604, align 4
  %606 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %607 = load i32, i32* %606, align 4
  %608 = xor i32 %605, %607
  %609 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %610 = load i32, i32* %609, align 4
  %611 = xor i32 %608, %610
  %612 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %613 = load i32, i32* %612, align 16
  %614 = xor i32 %611, %613
  %615 = shl i32 %614, 1
  %616 = lshr i32 %614, 31
  %617 = or i32 %615, %616
  %618 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  store i32 %617, i32* %618, align 4
  %619 = add i32 %603, %617
  %620 = add i32 %542, %619
  %621 = shl i32 %566, 30
  %622 = lshr i32 %566, 2
  %623 = or i32 %621, %622
  %624 = shl i32 %620, 5
  %625 = lshr i32 %620, 27
  %626 = or i32 %624, %625
  %627 = xor i32 %593, %623
  %628 = xor i32 %627, %596
  %629 = add i32 %626, %628
  %630 = add i32 %629, 1859775393
  %631 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %632 = load i32, i32* %631, align 16
  %633 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %634 = load i32, i32* %633, align 8
  %635 = xor i32 %632, %634
  %636 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %637 = load i32, i32* %636, align 16
  %638 = xor i32 %635, %637
  %639 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %640 = load i32, i32* %639, align 4
  %641 = xor i32 %638, %640
  %642 = shl i32 %641, 1
  %643 = lshr i32 %641, 31
  %644 = or i32 %642, %643
  %645 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  store i32 %644, i32* %645, align 16
  %646 = add i32 %630, %644
  %647 = add i32 %569, %646
  %648 = shl i32 %593, 30
  %649 = lshr i32 %593, 2
  %650 = or i32 %648, %649
  %651 = shl i32 %647, 5
  %652 = lshr i32 %647, 27
  %653 = or i32 %651, %652
  %654 = xor i32 %620, %650
  %655 = xor i32 %654, %623
  %656 = add i32 %653, %655
  %657 = add i32 %656, 1859775393
  %658 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %659 = load i32, i32* %658, align 4
  %660 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %661 = load i32, i32* %660, align 4
  %662 = xor i32 %659, %661
  %663 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %664 = load i32, i32* %663, align 4
  %665 = xor i32 %662, %664
  %666 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %667 = load i32, i32* %666, align 8
  %668 = xor i32 %665, %667
  %669 = shl i32 %668, 1
  %670 = lshr i32 %668, 31
  %671 = or i32 %669, %670
  %672 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  store i32 %671, i32* %672, align 4
  %673 = add i32 %657, %671
  %674 = add i32 %596, %673
  %675 = shl i32 %620, 30
  %676 = lshr i32 %620, 2
  %677 = or i32 %675, %676
  %678 = shl i32 %674, 5
  %679 = lshr i32 %674, 27
  %680 = or i32 %678, %679
  %681 = xor i32 %647, %677
  %682 = xor i32 %681, %650
  %683 = add i32 %680, %682
  %684 = add i32 %683, 1859775393
  %685 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %686 = load i32, i32* %685, align 8
  %687 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %688 = load i32, i32* %687, align 16
  %689 = xor i32 %686, %688
  %690 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %691 = load i32, i32* %690, align 8
  %692 = xor i32 %689, %691
  %693 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %694 = load i32, i32* %693, align 4
  %695 = xor i32 %692, %694
  %696 = shl i32 %695, 1
  %697 = lshr i32 %695, 31
  %698 = or i32 %696, %697
  %699 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  store i32 %698, i32* %699, align 8
  %700 = add i32 %684, %698
  %701 = add i32 %623, %700
  %702 = shl i32 %647, 30
  %703 = lshr i32 %647, 2
  %704 = or i32 %702, %703
  %705 = shl i32 %701, 5
  %706 = lshr i32 %701, 27
  %707 = or i32 %705, %706
  %708 = xor i32 %674, %704
  %709 = xor i32 %708, %677
  %710 = add i32 %707, %709
  %711 = add i32 %710, 1859775393
  %712 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %713 = load i32, i32* %712, align 4
  %714 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %715 = load i32, i32* %714, align 4
  %716 = xor i32 %713, %715
  %717 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %718 = load i32, i32* %717, align 4
  %719 = xor i32 %716, %718
  %720 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %721 = load i32, i32* %720, align 16
  %722 = xor i32 %719, %721
  %723 = shl i32 %722, 1
  %724 = lshr i32 %722, 31
  %725 = or i32 %723, %724
  %726 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  store i32 %725, i32* %726, align 4
  %727 = add i32 %711, %725
  %728 = add i32 %650, %727
  %729 = shl i32 %674, 30
  %730 = lshr i32 %674, 2
  %731 = or i32 %729, %730
  %732 = shl i32 %728, 5
  %733 = lshr i32 %728, 27
  %734 = or i32 %732, %733
  %735 = xor i32 %701, %731
  %736 = xor i32 %735, %704
  %737 = add i32 %734, %736
  %738 = add i32 %737, 1859775393
  %739 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %740 = load i32, i32* %739, align 16
  %741 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %742 = load i32, i32* %741, align 8
  %743 = xor i32 %740, %742
  %744 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %745 = load i32, i32* %744, align 16
  %746 = xor i32 %743, %745
  %747 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %748 = load i32, i32* %747, align 4
  %749 = xor i32 %746, %748
  %750 = shl i32 %749, 1
  %751 = lshr i32 %749, 31
  %752 = or i32 %750, %751
  %753 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  store i32 %752, i32* %753, align 16
  %754 = add i32 %738, %752
  %755 = add i32 %677, %754
  %756 = shl i32 %701, 30
  %757 = lshr i32 %701, 2
  %758 = or i32 %756, %757
  %759 = shl i32 %755, 5
  %760 = lshr i32 %755, 27
  %761 = or i32 %759, %760
  %762 = xor i32 %728, %758
  %763 = xor i32 %762, %731
  %764 = add i32 %761, %763
  %765 = add i32 %764, 1859775393
  %766 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %767 = load i32, i32* %766, align 4
  %768 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %769 = load i32, i32* %768, align 4
  %770 = xor i32 %767, %769
  %771 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %772 = load i32, i32* %771, align 4
  %773 = xor i32 %770, %772
  %774 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %775 = load i32, i32* %774, align 8
  %776 = xor i32 %773, %775
  %777 = shl i32 %776, 1
  %778 = lshr i32 %776, 31
  %779 = or i32 %777, %778
  %780 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  store i32 %779, i32* %780, align 4
  %781 = add i32 %765, %779
  %782 = add i32 %704, %781
  %783 = shl i32 %728, 30
  %784 = lshr i32 %728, 2
  %785 = or i32 %783, %784
  %786 = shl i32 %782, 5
  %787 = lshr i32 %782, 27
  %788 = or i32 %786, %787
  %789 = xor i32 %755, %785
  %790 = xor i32 %789, %758
  %791 = add i32 %788, %790
  %792 = add i32 %791, 1859775393
  %793 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %794 = load i32, i32* %793, align 8
  %795 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %796 = load i32, i32* %795, align 16
  %797 = xor i32 %794, %796
  %798 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %799 = load i32, i32* %798, align 8
  %800 = xor i32 %797, %799
  %801 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %802 = load i32, i32* %801, align 4
  %803 = xor i32 %800, %802
  %804 = shl i32 %803, 1
  %805 = lshr i32 %803, 31
  %806 = or i32 %804, %805
  %807 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  store i32 %806, i32* %807, align 8
  %808 = add i32 %792, %806
  %809 = add i32 %731, %808
  %810 = shl i32 %755, 30
  %811 = lshr i32 %755, 2
  %812 = or i32 %810, %811
  %813 = shl i32 %809, 5
  %814 = lshr i32 %809, 27
  %815 = or i32 %813, %814
  %816 = xor i32 %782, %812
  %817 = xor i32 %816, %785
  %818 = add i32 %815, %817
  %819 = add i32 %818, 1859775393
  %820 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %821 = load i32, i32* %820, align 4
  %822 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %823 = load i32, i32* %822, align 4
  %824 = xor i32 %821, %823
  %825 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %826 = load i32, i32* %825, align 4
  %827 = xor i32 %824, %826
  %828 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %829 = load i32, i32* %828, align 16
  %830 = xor i32 %827, %829
  %831 = shl i32 %830, 1
  %832 = lshr i32 %830, 31
  %833 = or i32 %831, %832
  %834 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  store i32 %833, i32* %834, align 4
  %835 = add i32 %819, %833
  %836 = add i32 %758, %835
  %837 = shl i32 %782, 30
  %838 = lshr i32 %782, 2
  %839 = or i32 %837, %838
  %840 = shl i32 %836, 5
  %841 = lshr i32 %836, 27
  %842 = or i32 %840, %841
  %843 = xor i32 %809, %839
  %844 = xor i32 %843, %812
  %845 = add i32 %842, %844
  %846 = add i32 %845, 1859775393
  %847 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %848 = load i32, i32* %847, align 16
  %849 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %850 = load i32, i32* %849, align 8
  %851 = xor i32 %848, %850
  %852 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %853 = load i32, i32* %852, align 16
  %854 = xor i32 %851, %853
  %855 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %856 = load i32, i32* %855, align 4
  %857 = xor i32 %854, %856
  %858 = shl i32 %857, 1
  %859 = lshr i32 %857, 31
  %860 = or i32 %858, %859
  %861 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  store i32 %860, i32* %861, align 16
  %862 = add i32 %846, %860
  %863 = add i32 %785, %862
  %864 = shl i32 %809, 30
  %865 = lshr i32 %809, 2
  %866 = or i32 %864, %865
  %867 = shl i32 %863, 5
  %868 = lshr i32 %863, 27
  %869 = or i32 %867, %868
  %870 = xor i32 %836, %866
  %871 = xor i32 %870, %839
  %872 = add i32 %869, %871
  %873 = add i32 %872, 1859775393
  %874 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %875 = load i32, i32* %874, align 4
  %876 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %877 = load i32, i32* %876, align 4
  %878 = xor i32 %875, %877
  %879 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %880 = load i32, i32* %879, align 4
  %881 = xor i32 %878, %880
  %882 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %883 = load i32, i32* %882, align 8
  %884 = xor i32 %881, %883
  %885 = shl i32 %884, 1
  %886 = lshr i32 %884, 31
  %887 = or i32 %885, %886
  %888 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  store i32 %887, i32* %888, align 4
  %889 = add i32 %873, %887
  %890 = add i32 %812, %889
  %891 = shl i32 %836, 30
  %892 = lshr i32 %836, 2
  %893 = or i32 %891, %892
  %894 = shl i32 %890, 5
  %895 = lshr i32 %890, 27
  %896 = or i32 %894, %895
  %897 = xor i32 %863, %893
  %898 = xor i32 %897, %866
  %899 = add i32 %896, %898
  %900 = add i32 %899, 1859775393
  %901 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %902 = load i32, i32* %901, align 8
  %903 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %904 = load i32, i32* %903, align 16
  %905 = xor i32 %902, %904
  %906 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %907 = load i32, i32* %906, align 8
  %908 = xor i32 %905, %907
  %909 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %910 = load i32, i32* %909, align 4
  %911 = xor i32 %908, %910
  %912 = shl i32 %911, 1
  %913 = lshr i32 %911, 31
  %914 = or i32 %912, %913
  %915 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  store i32 %914, i32* %915, align 8
  %916 = add i32 %900, %914
  %917 = add i32 %839, %916
  %918 = shl i32 %863, 30
  %919 = lshr i32 %863, 2
  %920 = or i32 %918, %919
  %921 = shl i32 %917, 5
  %922 = lshr i32 %917, 27
  %923 = or i32 %921, %922
  %924 = xor i32 %890, %920
  %925 = xor i32 %924, %893
  %926 = add i32 %923, %925
  %927 = add i32 %926, 1859775393
  %928 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %929 = load i32, i32* %928, align 4
  %930 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %931 = load i32, i32* %930, align 4
  %932 = xor i32 %929, %931
  %933 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %934 = load i32, i32* %933, align 4
  %935 = xor i32 %932, %934
  %936 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %937 = load i32, i32* %936, align 16
  %938 = xor i32 %935, %937
  %939 = shl i32 %938, 1
  %940 = lshr i32 %938, 31
  %941 = or i32 %939, %940
  %942 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  store i32 %941, i32* %942, align 4
  %943 = add i32 %927, %941
  %944 = add i32 %866, %943
  %945 = shl i32 %890, 30
  %946 = lshr i32 %890, 2
  %947 = or i32 %945, %946
  %948 = shl i32 %944, 5
  %949 = lshr i32 %944, 27
  %950 = or i32 %948, %949
  %951 = and i32 %917, %947
  %952 = or i32 %917, %947
  %953 = and i32 %920, %952
  %954 = or i32 %951, %953
  %955 = add i32 %950, %954
  %956 = add i32 %955, -1894007588
  %957 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %958 = load i32, i32* %957, align 16
  %959 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %960 = load i32, i32* %959, align 8
  %961 = xor i32 %958, %960
  %962 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %963 = load i32, i32* %962, align 16
  %964 = xor i32 %961, %963
  %965 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %966 = load i32, i32* %965, align 4
  %967 = xor i32 %964, %966
  %968 = shl i32 %967, 1
  %969 = lshr i32 %967, 31
  %970 = or i32 %968, %969
  %971 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  store i32 %970, i32* %971, align 16
  %972 = add i32 %956, %970
  %973 = add i32 %893, %972
  %974 = shl i32 %917, 30
  %975 = lshr i32 %917, 2
  %976 = or i32 %974, %975
  %977 = shl i32 %973, 5
  %978 = lshr i32 %973, 27
  %979 = or i32 %977, %978
  %980 = and i32 %944, %976
  %981 = or i32 %944, %976
  %982 = and i32 %947, %981
  %983 = or i32 %980, %982
  %984 = add i32 %979, %983
  %985 = add i32 %984, -1894007588
  %986 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %987 = load i32, i32* %986, align 4
  %988 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %989 = load i32, i32* %988, align 4
  %990 = xor i32 %987, %989
  %991 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %992 = load i32, i32* %991, align 4
  %993 = xor i32 %990, %992
  %994 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %995 = load i32, i32* %994, align 8
  %996 = xor i32 %993, %995
  %997 = shl i32 %996, 1
  %998 = lshr i32 %996, 31
  %999 = or i32 %997, %998
  %1000 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  store i32 %999, i32* %1000, align 4
  %1001 = add i32 %985, %999
  %1002 = add i32 %920, %1001
  %1003 = shl i32 %944, 30
  %1004 = lshr i32 %944, 2
  %1005 = or i32 %1003, %1004
  %1006 = shl i32 %1002, 5
  %1007 = lshr i32 %1002, 27
  %1008 = or i32 %1006, %1007
  %1009 = and i32 %973, %1005
  %1010 = or i32 %973, %1005
  %1011 = and i32 %976, %1010
  %1012 = or i32 %1009, %1011
  %1013 = add i32 %1008, %1012
  %1014 = add i32 %1013, -1894007588
  %1015 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1016 = load i32, i32* %1015, align 8
  %1017 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1018 = load i32, i32* %1017, align 16
  %1019 = xor i32 %1016, %1018
  %1020 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1021 = load i32, i32* %1020, align 8
  %1022 = xor i32 %1019, %1021
  %1023 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1024 = load i32, i32* %1023, align 4
  %1025 = xor i32 %1022, %1024
  %1026 = shl i32 %1025, 1
  %1027 = lshr i32 %1025, 31
  %1028 = or i32 %1026, %1027
  %1029 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  store i32 %1028, i32* %1029, align 8
  %1030 = add i32 %1014, %1028
  %1031 = add i32 %947, %1030
  %1032 = shl i32 %973, 30
  %1033 = lshr i32 %973, 2
  %1034 = or i32 %1032, %1033
  %1035 = shl i32 %1031, 5
  %1036 = lshr i32 %1031, 27
  %1037 = or i32 %1035, %1036
  %1038 = and i32 %1002, %1034
  %1039 = or i32 %1002, %1034
  %1040 = and i32 %1005, %1039
  %1041 = or i32 %1038, %1040
  %1042 = add i32 %1037, %1041
  %1043 = add i32 %1042, -1894007588
  %1044 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1045 = load i32, i32* %1044, align 4
  %1046 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1047 = load i32, i32* %1046, align 4
  %1048 = xor i32 %1045, %1047
  %1049 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1050 = load i32, i32* %1049, align 4
  %1051 = xor i32 %1048, %1050
  %1052 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1053 = load i32, i32* %1052, align 16
  %1054 = xor i32 %1051, %1053
  %1055 = shl i32 %1054, 1
  %1056 = lshr i32 %1054, 31
  %1057 = or i32 %1055, %1056
  %1058 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  store i32 %1057, i32* %1058, align 4
  %1059 = add i32 %1043, %1057
  %1060 = add i32 %976, %1059
  %1061 = shl i32 %1002, 30
  %1062 = lshr i32 %1002, 2
  %1063 = or i32 %1061, %1062
  %1064 = shl i32 %1060, 5
  %1065 = lshr i32 %1060, 27
  %1066 = or i32 %1064, %1065
  %1067 = and i32 %1031, %1063
  %1068 = or i32 %1031, %1063
  %1069 = and i32 %1034, %1068
  %1070 = or i32 %1067, %1069
  %1071 = add i32 %1066, %1070
  %1072 = add i32 %1071, -1894007588
  %1073 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1074 = load i32, i32* %1073, align 16
  %1075 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1076 = load i32, i32* %1075, align 8
  %1077 = xor i32 %1074, %1076
  %1078 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1079 = load i32, i32* %1078, align 16
  %1080 = xor i32 %1077, %1079
  %1081 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1082 = load i32, i32* %1081, align 4
  %1083 = xor i32 %1080, %1082
  %1084 = shl i32 %1083, 1
  %1085 = lshr i32 %1083, 31
  %1086 = or i32 %1084, %1085
  %1087 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  store i32 %1086, i32* %1087, align 16
  %1088 = add i32 %1072, %1086
  %1089 = add i32 %1005, %1088
  %1090 = shl i32 %1031, 30
  %1091 = lshr i32 %1031, 2
  %1092 = or i32 %1090, %1091
  %1093 = shl i32 %1089, 5
  %1094 = lshr i32 %1089, 27
  %1095 = or i32 %1093, %1094
  %1096 = and i32 %1060, %1092
  %1097 = or i32 %1060, %1092
  %1098 = and i32 %1063, %1097
  %1099 = or i32 %1096, %1098
  %1100 = add i32 %1095, %1099
  %1101 = add i32 %1100, -1894007588
  %1102 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1103 = load i32, i32* %1102, align 4
  %1104 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1105 = load i32, i32* %1104, align 4
  %1106 = xor i32 %1103, %1105
  %1107 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1108 = load i32, i32* %1107, align 4
  %1109 = xor i32 %1106, %1108
  %1110 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1111 = load i32, i32* %1110, align 8
  %1112 = xor i32 %1109, %1111
  %1113 = shl i32 %1112, 1
  %1114 = lshr i32 %1112, 31
  %1115 = or i32 %1113, %1114
  %1116 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  store i32 %1115, i32* %1116, align 4
  %1117 = add i32 %1101, %1115
  %1118 = add i32 %1034, %1117
  %1119 = shl i32 %1060, 30
  %1120 = lshr i32 %1060, 2
  %1121 = or i32 %1119, %1120
  %1122 = shl i32 %1118, 5
  %1123 = lshr i32 %1118, 27
  %1124 = or i32 %1122, %1123
  %1125 = and i32 %1089, %1121
  %1126 = or i32 %1089, %1121
  %1127 = and i32 %1092, %1126
  %1128 = or i32 %1125, %1127
  %1129 = add i32 %1124, %1128
  %1130 = add i32 %1129, -1894007588
  %1131 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1132 = load i32, i32* %1131, align 8
  %1133 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1134 = load i32, i32* %1133, align 16
  %1135 = xor i32 %1132, %1134
  %1136 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1137 = load i32, i32* %1136, align 8
  %1138 = xor i32 %1135, %1137
  %1139 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1140 = load i32, i32* %1139, align 4
  %1141 = xor i32 %1138, %1140
  %1142 = shl i32 %1141, 1
  %1143 = lshr i32 %1141, 31
  %1144 = or i32 %1142, %1143
  %1145 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  store i32 %1144, i32* %1145, align 8
  %1146 = add i32 %1130, %1144
  %1147 = add i32 %1063, %1146
  %1148 = shl i32 %1089, 30
  %1149 = lshr i32 %1089, 2
  %1150 = or i32 %1148, %1149
  %1151 = shl i32 %1147, 5
  %1152 = lshr i32 %1147, 27
  %1153 = or i32 %1151, %1152
  %1154 = and i32 %1118, %1150
  %1155 = or i32 %1118, %1150
  %1156 = and i32 %1121, %1155
  %1157 = or i32 %1154, %1156
  %1158 = add i32 %1153, %1157
  %1159 = add i32 %1158, -1894007588
  %1160 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1161 = load i32, i32* %1160, align 4
  %1162 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1163 = load i32, i32* %1162, align 4
  %1164 = xor i32 %1161, %1163
  %1165 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1166 = load i32, i32* %1165, align 4
  %1167 = xor i32 %1164, %1166
  %1168 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1169 = load i32, i32* %1168, align 16
  %1170 = xor i32 %1167, %1169
  %1171 = shl i32 %1170, 1
  %1172 = lshr i32 %1170, 31
  %1173 = or i32 %1171, %1172
  %1174 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  store i32 %1173, i32* %1174, align 4
  %1175 = add i32 %1159, %1173
  %1176 = add i32 %1092, %1175
  %1177 = shl i32 %1118, 30
  %1178 = lshr i32 %1118, 2
  %1179 = or i32 %1177, %1178
  %1180 = shl i32 %1176, 5
  %1181 = lshr i32 %1176, 27
  %1182 = or i32 %1180, %1181
  %1183 = and i32 %1147, %1179
  %1184 = or i32 %1147, %1179
  %1185 = and i32 %1150, %1184
  %1186 = or i32 %1183, %1185
  %1187 = add i32 %1182, %1186
  %1188 = add i32 %1187, -1894007588
  %1189 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1190 = load i32, i32* %1189, align 16
  %1191 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1192 = load i32, i32* %1191, align 8
  %1193 = xor i32 %1190, %1192
  %1194 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1195 = load i32, i32* %1194, align 16
  %1196 = xor i32 %1193, %1195
  %1197 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1198 = load i32, i32* %1197, align 4
  %1199 = xor i32 %1196, %1198
  %1200 = shl i32 %1199, 1
  %1201 = lshr i32 %1199, 31
  %1202 = or i32 %1200, %1201
  %1203 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  store i32 %1202, i32* %1203, align 16
  %1204 = add i32 %1188, %1202
  %1205 = add i32 %1121, %1204
  %1206 = shl i32 %1147, 30
  %1207 = lshr i32 %1147, 2
  %1208 = or i32 %1206, %1207
  %1209 = shl i32 %1205, 5
  %1210 = lshr i32 %1205, 27
  %1211 = or i32 %1209, %1210
  %1212 = and i32 %1176, %1208
  %1213 = or i32 %1176, %1208
  %1214 = and i32 %1179, %1213
  %1215 = or i32 %1212, %1214
  %1216 = add i32 %1211, %1215
  %1217 = add i32 %1216, -1894007588
  %1218 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1219 = load i32, i32* %1218, align 4
  %1220 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1221 = load i32, i32* %1220, align 4
  %1222 = xor i32 %1219, %1221
  %1223 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1224 = load i32, i32* %1223, align 4
  %1225 = xor i32 %1222, %1224
  %1226 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1227 = load i32, i32* %1226, align 8
  %1228 = xor i32 %1225, %1227
  %1229 = shl i32 %1228, 1
  %1230 = lshr i32 %1228, 31
  %1231 = or i32 %1229, %1230
  %1232 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  store i32 %1231, i32* %1232, align 4
  %1233 = add i32 %1217, %1231
  %1234 = add i32 %1150, %1233
  %1235 = shl i32 %1176, 30
  %1236 = lshr i32 %1176, 2
  %1237 = or i32 %1235, %1236
  %1238 = shl i32 %1234, 5
  %1239 = lshr i32 %1234, 27
  %1240 = or i32 %1238, %1239
  %1241 = and i32 %1205, %1237
  %1242 = or i32 %1205, %1237
  %1243 = and i32 %1208, %1242
  %1244 = or i32 %1241, %1243
  %1245 = add i32 %1240, %1244
  %1246 = add i32 %1245, -1894007588
  %1247 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1248 = load i32, i32* %1247, align 8
  %1249 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1250 = load i32, i32* %1249, align 16
  %1251 = xor i32 %1248, %1250
  %1252 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1253 = load i32, i32* %1252, align 8
  %1254 = xor i32 %1251, %1253
  %1255 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1256 = load i32, i32* %1255, align 4
  %1257 = xor i32 %1254, %1256
  %1258 = shl i32 %1257, 1
  %1259 = lshr i32 %1257, 31
  %1260 = or i32 %1258, %1259
  %1261 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  store i32 %1260, i32* %1261, align 8
  %1262 = add i32 %1246, %1260
  %1263 = add i32 %1179, %1262
  %1264 = shl i32 %1205, 30
  %1265 = lshr i32 %1205, 2
  %1266 = or i32 %1264, %1265
  %1267 = shl i32 %1263, 5
  %1268 = lshr i32 %1263, 27
  %1269 = or i32 %1267, %1268
  %1270 = and i32 %1234, %1266
  %1271 = or i32 %1234, %1266
  %1272 = and i32 %1237, %1271
  %1273 = or i32 %1270, %1272
  %1274 = add i32 %1269, %1273
  %1275 = add i32 %1274, -1894007588
  %1276 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1277 = load i32, i32* %1276, align 4
  %1278 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1279 = load i32, i32* %1278, align 4
  %1280 = xor i32 %1277, %1279
  %1281 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1282 = load i32, i32* %1281, align 4
  %1283 = xor i32 %1280, %1282
  %1284 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1285 = load i32, i32* %1284, align 16
  %1286 = xor i32 %1283, %1285
  %1287 = shl i32 %1286, 1
  %1288 = lshr i32 %1286, 31
  %1289 = or i32 %1287, %1288
  %1290 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  store i32 %1289, i32* %1290, align 4
  %1291 = add i32 %1275, %1289
  %1292 = add i32 %1208, %1291
  %1293 = shl i32 %1234, 30
  %1294 = lshr i32 %1234, 2
  %1295 = or i32 %1293, %1294
  %1296 = shl i32 %1292, 5
  %1297 = lshr i32 %1292, 27
  %1298 = or i32 %1296, %1297
  %1299 = and i32 %1263, %1295
  %1300 = or i32 %1263, %1295
  %1301 = and i32 %1266, %1300
  %1302 = or i32 %1299, %1301
  %1303 = add i32 %1298, %1302
  %1304 = add i32 %1303, -1894007588
  %1305 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1306 = load i32, i32* %1305, align 16
  %1307 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1308 = load i32, i32* %1307, align 8
  %1309 = xor i32 %1306, %1308
  %1310 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1311 = load i32, i32* %1310, align 16
  %1312 = xor i32 %1309, %1311
  %1313 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1314 = load i32, i32* %1313, align 4
  %1315 = xor i32 %1312, %1314
  %1316 = shl i32 %1315, 1
  %1317 = lshr i32 %1315, 31
  %1318 = or i32 %1316, %1317
  %1319 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  store i32 %1318, i32* %1319, align 16
  %1320 = add i32 %1304, %1318
  %1321 = add i32 %1237, %1320
  %1322 = shl i32 %1263, 30
  %1323 = lshr i32 %1263, 2
  %1324 = or i32 %1322, %1323
  %1325 = shl i32 %1321, 5
  %1326 = lshr i32 %1321, 27
  %1327 = or i32 %1325, %1326
  %1328 = and i32 %1292, %1324
  %1329 = or i32 %1292, %1324
  %1330 = and i32 %1295, %1329
  %1331 = or i32 %1328, %1330
  %1332 = add i32 %1327, %1331
  %1333 = add i32 %1332, -1894007588
  %1334 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1335 = load i32, i32* %1334, align 4
  %1336 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1337 = load i32, i32* %1336, align 4
  %1338 = xor i32 %1335, %1337
  %1339 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1340 = load i32, i32* %1339, align 4
  %1341 = xor i32 %1338, %1340
  %1342 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1343 = load i32, i32* %1342, align 8
  %1344 = xor i32 %1341, %1343
  %1345 = shl i32 %1344, 1
  %1346 = lshr i32 %1344, 31
  %1347 = or i32 %1345, %1346
  %1348 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  store i32 %1347, i32* %1348, align 4
  %1349 = add i32 %1333, %1347
  %1350 = add i32 %1266, %1349
  %1351 = shl i32 %1292, 30
  %1352 = lshr i32 %1292, 2
  %1353 = or i32 %1351, %1352
  %1354 = shl i32 %1350, 5
  %1355 = lshr i32 %1350, 27
  %1356 = or i32 %1354, %1355
  %1357 = and i32 %1321, %1353
  %1358 = or i32 %1321, %1353
  %1359 = and i32 %1324, %1358
  %1360 = or i32 %1357, %1359
  %1361 = add i32 %1356, %1360
  %1362 = add i32 %1361, -1894007588
  %1363 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1364 = load i32, i32* %1363, align 8
  %1365 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1366 = load i32, i32* %1365, align 16
  %1367 = xor i32 %1364, %1366
  %1368 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1369 = load i32, i32* %1368, align 8
  %1370 = xor i32 %1367, %1369
  %1371 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1372 = load i32, i32* %1371, align 4
  %1373 = xor i32 %1370, %1372
  %1374 = shl i32 %1373, 1
  %1375 = lshr i32 %1373, 31
  %1376 = or i32 %1374, %1375
  %1377 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  store i32 %1376, i32* %1377, align 8
  %1378 = add i32 %1362, %1376
  %1379 = add i32 %1295, %1378
  %1380 = shl i32 %1321, 30
  %1381 = lshr i32 %1321, 2
  %1382 = or i32 %1380, %1381
  %1383 = shl i32 %1379, 5
  %1384 = lshr i32 %1379, 27
  %1385 = or i32 %1383, %1384
  %1386 = and i32 %1350, %1382
  %1387 = or i32 %1350, %1382
  %1388 = and i32 %1353, %1387
  %1389 = or i32 %1386, %1388
  %1390 = add i32 %1385, %1389
  %1391 = add i32 %1390, -1894007588
  %1392 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1393 = load i32, i32* %1392, align 4
  %1394 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1395 = load i32, i32* %1394, align 4
  %1396 = xor i32 %1393, %1395
  %1397 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1398 = load i32, i32* %1397, align 4
  %1399 = xor i32 %1396, %1398
  %1400 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1401 = load i32, i32* %1400, align 16
  %1402 = xor i32 %1399, %1401
  %1403 = shl i32 %1402, 1
  %1404 = lshr i32 %1402, 31
  %1405 = or i32 %1403, %1404
  %1406 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  store i32 %1405, i32* %1406, align 4
  %1407 = add i32 %1391, %1405
  %1408 = add i32 %1324, %1407
  %1409 = shl i32 %1350, 30
  %1410 = lshr i32 %1350, 2
  %1411 = or i32 %1409, %1410
  %1412 = shl i32 %1408, 5
  %1413 = lshr i32 %1408, 27
  %1414 = or i32 %1412, %1413
  %1415 = and i32 %1379, %1411
  %1416 = or i32 %1379, %1411
  %1417 = and i32 %1382, %1416
  %1418 = or i32 %1415, %1417
  %1419 = add i32 %1414, %1418
  %1420 = add i32 %1419, -1894007588
  %1421 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1422 = load i32, i32* %1421, align 16
  %1423 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1424 = load i32, i32* %1423, align 8
  %1425 = xor i32 %1422, %1424
  %1426 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1427 = load i32, i32* %1426, align 16
  %1428 = xor i32 %1425, %1427
  %1429 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1430 = load i32, i32* %1429, align 4
  %1431 = xor i32 %1428, %1430
  %1432 = shl i32 %1431, 1
  %1433 = lshr i32 %1431, 31
  %1434 = or i32 %1432, %1433
  %1435 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  store i32 %1434, i32* %1435, align 16
  %1436 = add i32 %1420, %1434
  %1437 = add i32 %1353, %1436
  %1438 = shl i32 %1379, 30
  %1439 = lshr i32 %1379, 2
  %1440 = or i32 %1438, %1439
  %1441 = shl i32 %1437, 5
  %1442 = lshr i32 %1437, 27
  %1443 = or i32 %1441, %1442
  %1444 = and i32 %1408, %1440
  %1445 = or i32 %1408, %1440
  %1446 = and i32 %1411, %1445
  %1447 = or i32 %1444, %1446
  %1448 = add i32 %1443, %1447
  %1449 = add i32 %1448, -1894007588
  %1450 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1451 = load i32, i32* %1450, align 4
  %1452 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1453 = load i32, i32* %1452, align 4
  %1454 = xor i32 %1451, %1453
  %1455 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1456 = load i32, i32* %1455, align 4
  %1457 = xor i32 %1454, %1456
  %1458 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1459 = load i32, i32* %1458, align 8
  %1460 = xor i32 %1457, %1459
  %1461 = shl i32 %1460, 1
  %1462 = lshr i32 %1460, 31
  %1463 = or i32 %1461, %1462
  %1464 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  store i32 %1463, i32* %1464, align 4
  %1465 = add i32 %1449, %1463
  %1466 = add i32 %1382, %1465
  %1467 = shl i32 %1408, 30
  %1468 = lshr i32 %1408, 2
  %1469 = or i32 %1467, %1468
  %1470 = shl i32 %1466, 5
  %1471 = lshr i32 %1466, 27
  %1472 = or i32 %1470, %1471
  %1473 = and i32 %1437, %1469
  %1474 = or i32 %1437, %1469
  %1475 = and i32 %1440, %1474
  %1476 = or i32 %1473, %1475
  %1477 = add i32 %1472, %1476
  %1478 = add i32 %1477, -1894007588
  %1479 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1480 = load i32, i32* %1479, align 8
  %1481 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1482 = load i32, i32* %1481, align 16
  %1483 = xor i32 %1480, %1482
  %1484 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1485 = load i32, i32* %1484, align 8
  %1486 = xor i32 %1483, %1485
  %1487 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1488 = load i32, i32* %1487, align 4
  %1489 = xor i32 %1486, %1488
  %1490 = shl i32 %1489, 1
  %1491 = lshr i32 %1489, 31
  %1492 = or i32 %1490, %1491
  %1493 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  store i32 %1492, i32* %1493, align 8
  %1494 = add i32 %1478, %1492
  %1495 = add i32 %1411, %1494
  %1496 = shl i32 %1437, 30
  %1497 = lshr i32 %1437, 2
  %1498 = or i32 %1496, %1497
  %1499 = shl i32 %1495, 5
  %1500 = lshr i32 %1495, 27
  %1501 = or i32 %1499, %1500
  %1502 = and i32 %1466, %1498
  %1503 = or i32 %1466, %1498
  %1504 = and i32 %1469, %1503
  %1505 = or i32 %1502, %1504
  %1506 = add i32 %1501, %1505
  %1507 = add i32 %1506, -1894007588
  %1508 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1509 = load i32, i32* %1508, align 4
  %1510 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1511 = load i32, i32* %1510, align 4
  %1512 = xor i32 %1509, %1511
  %1513 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1514 = load i32, i32* %1513, align 4
  %1515 = xor i32 %1512, %1514
  %1516 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1517 = load i32, i32* %1516, align 16
  %1518 = xor i32 %1515, %1517
  %1519 = shl i32 %1518, 1
  %1520 = lshr i32 %1518, 31
  %1521 = or i32 %1519, %1520
  %1522 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  store i32 %1521, i32* %1522, align 4
  %1523 = add i32 %1507, %1521
  %1524 = add i32 %1440, %1523
  %1525 = shl i32 %1466, 30
  %1526 = lshr i32 %1466, 2
  %1527 = or i32 %1525, %1526
  %1528 = shl i32 %1524, 5
  %1529 = lshr i32 %1524, 27
  %1530 = or i32 %1528, %1529
  %1531 = xor i32 %1495, %1527
  %1532 = xor i32 %1531, %1498
  %1533 = add i32 %1530, %1532
  %1534 = add i32 %1533, -899497514
  %1535 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1536 = load i32, i32* %1535, align 16
  %1537 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1538 = load i32, i32* %1537, align 8
  %1539 = xor i32 %1536, %1538
  %1540 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1541 = load i32, i32* %1540, align 16
  %1542 = xor i32 %1539, %1541
  %1543 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1544 = load i32, i32* %1543, align 4
  %1545 = xor i32 %1542, %1544
  %1546 = shl i32 %1545, 1
  %1547 = lshr i32 %1545, 31
  %1548 = or i32 %1546, %1547
  %1549 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  store i32 %1548, i32* %1549, align 16
  %1550 = add i32 %1534, %1548
  %1551 = add i32 %1469, %1550
  %1552 = shl i32 %1495, 30
  %1553 = lshr i32 %1495, 2
  %1554 = or i32 %1552, %1553
  %1555 = shl i32 %1551, 5
  %1556 = lshr i32 %1551, 27
  %1557 = or i32 %1555, %1556
  %1558 = xor i32 %1524, %1554
  %1559 = xor i32 %1558, %1527
  %1560 = add i32 %1557, %1559
  %1561 = add i32 %1560, -899497514
  %1562 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1563 = load i32, i32* %1562, align 4
  %1564 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1565 = load i32, i32* %1564, align 4
  %1566 = xor i32 %1563, %1565
  %1567 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1568 = load i32, i32* %1567, align 4
  %1569 = xor i32 %1566, %1568
  %1570 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1571 = load i32, i32* %1570, align 8
  %1572 = xor i32 %1569, %1571
  %1573 = shl i32 %1572, 1
  %1574 = lshr i32 %1572, 31
  %1575 = or i32 %1573, %1574
  %1576 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  store i32 %1575, i32* %1576, align 4
  %1577 = add i32 %1561, %1575
  %1578 = add i32 %1498, %1577
  %1579 = shl i32 %1524, 30
  %1580 = lshr i32 %1524, 2
  %1581 = or i32 %1579, %1580
  %1582 = shl i32 %1578, 5
  %1583 = lshr i32 %1578, 27
  %1584 = or i32 %1582, %1583
  %1585 = xor i32 %1551, %1581
  %1586 = xor i32 %1585, %1554
  %1587 = add i32 %1584, %1586
  %1588 = add i32 %1587, -899497514
  %1589 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1590 = load i32, i32* %1589, align 8
  %1591 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1592 = load i32, i32* %1591, align 16
  %1593 = xor i32 %1590, %1592
  %1594 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1595 = load i32, i32* %1594, align 8
  %1596 = xor i32 %1593, %1595
  %1597 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1598 = load i32, i32* %1597, align 4
  %1599 = xor i32 %1596, %1598
  %1600 = shl i32 %1599, 1
  %1601 = lshr i32 %1599, 31
  %1602 = or i32 %1600, %1601
  %1603 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  store i32 %1602, i32* %1603, align 8
  %1604 = add i32 %1588, %1602
  %1605 = add i32 %1527, %1604
  %1606 = shl i32 %1551, 30
  %1607 = lshr i32 %1551, 2
  %1608 = or i32 %1606, %1607
  %1609 = shl i32 %1605, 5
  %1610 = lshr i32 %1605, 27
  %1611 = or i32 %1609, %1610
  %1612 = xor i32 %1578, %1608
  %1613 = xor i32 %1612, %1581
  %1614 = add i32 %1611, %1613
  %1615 = add i32 %1614, -899497514
  %1616 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1617 = load i32, i32* %1616, align 4
  %1618 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1619 = load i32, i32* %1618, align 4
  %1620 = xor i32 %1617, %1619
  %1621 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1622 = load i32, i32* %1621, align 4
  %1623 = xor i32 %1620, %1622
  %1624 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1625 = load i32, i32* %1624, align 16
  %1626 = xor i32 %1623, %1625
  %1627 = shl i32 %1626, 1
  %1628 = lshr i32 %1626, 31
  %1629 = or i32 %1627, %1628
  %1630 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  store i32 %1629, i32* %1630, align 4
  %1631 = add i32 %1615, %1629
  %1632 = add i32 %1554, %1631
  %1633 = shl i32 %1578, 30
  %1634 = lshr i32 %1578, 2
  %1635 = or i32 %1633, %1634
  %1636 = shl i32 %1632, 5
  %1637 = lshr i32 %1632, 27
  %1638 = or i32 %1636, %1637
  %1639 = xor i32 %1605, %1635
  %1640 = xor i32 %1639, %1608
  %1641 = add i32 %1638, %1640
  %1642 = add i32 %1641, -899497514
  %1643 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1644 = load i32, i32* %1643, align 16
  %1645 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1646 = load i32, i32* %1645, align 8
  %1647 = xor i32 %1644, %1646
  %1648 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1649 = load i32, i32* %1648, align 16
  %1650 = xor i32 %1647, %1649
  %1651 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1652 = load i32, i32* %1651, align 4
  %1653 = xor i32 %1650, %1652
  %1654 = shl i32 %1653, 1
  %1655 = lshr i32 %1653, 31
  %1656 = or i32 %1654, %1655
  %1657 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  store i32 %1656, i32* %1657, align 16
  %1658 = add i32 %1642, %1656
  %1659 = add i32 %1581, %1658
  %1660 = shl i32 %1605, 30
  %1661 = lshr i32 %1605, 2
  %1662 = or i32 %1660, %1661
  %1663 = shl i32 %1659, 5
  %1664 = lshr i32 %1659, 27
  %1665 = or i32 %1663, %1664
  %1666 = xor i32 %1632, %1662
  %1667 = xor i32 %1666, %1635
  %1668 = add i32 %1665, %1667
  %1669 = add i32 %1668, -899497514
  %1670 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1671 = load i32, i32* %1670, align 4
  %1672 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1673 = load i32, i32* %1672, align 4
  %1674 = xor i32 %1671, %1673
  %1675 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1676 = load i32, i32* %1675, align 4
  %1677 = xor i32 %1674, %1676
  %1678 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1679 = load i32, i32* %1678, align 8
  %1680 = xor i32 %1677, %1679
  %1681 = shl i32 %1680, 1
  %1682 = lshr i32 %1680, 31
  %1683 = or i32 %1681, %1682
  %1684 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  store i32 %1683, i32* %1684, align 4
  %1685 = add i32 %1669, %1683
  %1686 = add i32 %1608, %1685
  %1687 = shl i32 %1632, 30
  %1688 = lshr i32 %1632, 2
  %1689 = or i32 %1687, %1688
  %1690 = shl i32 %1686, 5
  %1691 = lshr i32 %1686, 27
  %1692 = or i32 %1690, %1691
  %1693 = xor i32 %1659, %1689
  %1694 = xor i32 %1693, %1662
  %1695 = add i32 %1692, %1694
  %1696 = add i32 %1695, -899497514
  %1697 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1698 = load i32, i32* %1697, align 8
  %1699 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1700 = load i32, i32* %1699, align 16
  %1701 = xor i32 %1698, %1700
  %1702 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1703 = load i32, i32* %1702, align 8
  %1704 = xor i32 %1701, %1703
  %1705 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1706 = load i32, i32* %1705, align 4
  %1707 = xor i32 %1704, %1706
  %1708 = shl i32 %1707, 1
  %1709 = lshr i32 %1707, 31
  %1710 = or i32 %1708, %1709
  %1711 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  store i32 %1710, i32* %1711, align 8
  %1712 = add i32 %1696, %1710
  %1713 = add i32 %1635, %1712
  %1714 = shl i32 %1659, 30
  %1715 = lshr i32 %1659, 2
  %1716 = or i32 %1714, %1715
  %1717 = shl i32 %1713, 5
  %1718 = lshr i32 %1713, 27
  %1719 = or i32 %1717, %1718
  %1720 = xor i32 %1686, %1716
  %1721 = xor i32 %1720, %1689
  %1722 = add i32 %1719, %1721
  %1723 = add i32 %1722, -899497514
  %1724 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1725 = load i32, i32* %1724, align 4
  %1726 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1727 = load i32, i32* %1726, align 4
  %1728 = xor i32 %1725, %1727
  %1729 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1730 = load i32, i32* %1729, align 4
  %1731 = xor i32 %1728, %1730
  %1732 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1733 = load i32, i32* %1732, align 16
  %1734 = xor i32 %1731, %1733
  %1735 = shl i32 %1734, 1
  %1736 = lshr i32 %1734, 31
  %1737 = or i32 %1735, %1736
  %1738 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  store i32 %1737, i32* %1738, align 4
  %1739 = add i32 %1723, %1737
  %1740 = add i32 %1662, %1739
  %1741 = shl i32 %1686, 30
  %1742 = lshr i32 %1686, 2
  %1743 = or i32 %1741, %1742
  %1744 = shl i32 %1740, 5
  %1745 = lshr i32 %1740, 27
  %1746 = or i32 %1744, %1745
  %1747 = xor i32 %1713, %1743
  %1748 = xor i32 %1747, %1716
  %1749 = add i32 %1746, %1748
  %1750 = add i32 %1749, -899497514
  %1751 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1752 = load i32, i32* %1751, align 16
  %1753 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1754 = load i32, i32* %1753, align 8
  %1755 = xor i32 %1752, %1754
  %1756 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1757 = load i32, i32* %1756, align 16
  %1758 = xor i32 %1755, %1757
  %1759 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1760 = load i32, i32* %1759, align 4
  %1761 = xor i32 %1758, %1760
  %1762 = shl i32 %1761, 1
  %1763 = lshr i32 %1761, 31
  %1764 = or i32 %1762, %1763
  %1765 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  store i32 %1764, i32* %1765, align 16
  %1766 = add i32 %1750, %1764
  %1767 = add i32 %1689, %1766
  %1768 = shl i32 %1713, 30
  %1769 = lshr i32 %1713, 2
  %1770 = or i32 %1768, %1769
  %1771 = shl i32 %1767, 5
  %1772 = lshr i32 %1767, 27
  %1773 = or i32 %1771, %1772
  %1774 = xor i32 %1740, %1770
  %1775 = xor i32 %1774, %1743
  %1776 = add i32 %1773, %1775
  %1777 = add i32 %1776, -899497514
  %1778 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1779 = load i32, i32* %1778, align 4
  %1780 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1781 = load i32, i32* %1780, align 4
  %1782 = xor i32 %1779, %1781
  %1783 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1784 = load i32, i32* %1783, align 4
  %1785 = xor i32 %1782, %1784
  %1786 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1787 = load i32, i32* %1786, align 8
  %1788 = xor i32 %1785, %1787
  %1789 = shl i32 %1788, 1
  %1790 = lshr i32 %1788, 31
  %1791 = or i32 %1789, %1790
  %1792 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  store i32 %1791, i32* %1792, align 4
  %1793 = add i32 %1777, %1791
  %1794 = add i32 %1716, %1793
  %1795 = shl i32 %1740, 30
  %1796 = lshr i32 %1740, 2
  %1797 = or i32 %1795, %1796
  %1798 = shl i32 %1794, 5
  %1799 = lshr i32 %1794, 27
  %1800 = or i32 %1798, %1799
  %1801 = xor i32 %1767, %1797
  %1802 = xor i32 %1801, %1770
  %1803 = add i32 %1800, %1802
  %1804 = add i32 %1803, -899497514
  %1805 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1806 = load i32, i32* %1805, align 8
  %1807 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1808 = load i32, i32* %1807, align 16
  %1809 = xor i32 %1806, %1808
  %1810 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1811 = load i32, i32* %1810, align 8
  %1812 = xor i32 %1809, %1811
  %1813 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1814 = load i32, i32* %1813, align 4
  %1815 = xor i32 %1812, %1814
  %1816 = shl i32 %1815, 1
  %1817 = lshr i32 %1815, 31
  %1818 = or i32 %1816, %1817
  %1819 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  store i32 %1818, i32* %1819, align 8
  %1820 = add i32 %1804, %1818
  %1821 = add i32 %1743, %1820
  %1822 = shl i32 %1767, 30
  %1823 = lshr i32 %1767, 2
  %1824 = or i32 %1822, %1823
  %1825 = shl i32 %1821, 5
  %1826 = lshr i32 %1821, 27
  %1827 = or i32 %1825, %1826
  %1828 = xor i32 %1794, %1824
  %1829 = xor i32 %1828, %1797
  %1830 = add i32 %1827, %1829
  %1831 = add i32 %1830, -899497514
  %1832 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1833 = load i32, i32* %1832, align 4
  %1834 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1835 = load i32, i32* %1834, align 4
  %1836 = xor i32 %1833, %1835
  %1837 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1838 = load i32, i32* %1837, align 4
  %1839 = xor i32 %1836, %1838
  %1840 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1841 = load i32, i32* %1840, align 16
  %1842 = xor i32 %1839, %1841
  %1843 = shl i32 %1842, 1
  %1844 = lshr i32 %1842, 31
  %1845 = or i32 %1843, %1844
  %1846 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  store i32 %1845, i32* %1846, align 4
  %1847 = add i32 %1831, %1845
  %1848 = add i32 %1770, %1847
  %1849 = shl i32 %1794, 30
  %1850 = lshr i32 %1794, 2
  %1851 = or i32 %1849, %1850
  %1852 = shl i32 %1848, 5
  %1853 = lshr i32 %1848, 27
  %1854 = or i32 %1852, %1853
  %1855 = xor i32 %1821, %1851
  %1856 = xor i32 %1855, %1824
  %1857 = add i32 %1854, %1856
  %1858 = add i32 %1857, -899497514
  %1859 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1860 = load i32, i32* %1859, align 16
  %1861 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1862 = load i32, i32* %1861, align 8
  %1863 = xor i32 %1860, %1862
  %1864 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %1865 = load i32, i32* %1864, align 16
  %1866 = xor i32 %1863, %1865
  %1867 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %1868 = load i32, i32* %1867, align 4
  %1869 = xor i32 %1866, %1868
  %1870 = shl i32 %1869, 1
  %1871 = lshr i32 %1869, 31
  %1872 = or i32 %1870, %1871
  %1873 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  store i32 %1872, i32* %1873, align 16
  %1874 = add i32 %1858, %1872
  %1875 = add i32 %1797, %1874
  %1876 = shl i32 %1821, 30
  %1877 = lshr i32 %1821, 2
  %1878 = or i32 %1876, %1877
  %1879 = shl i32 %1875, 5
  %1880 = lshr i32 %1875, 27
  %1881 = or i32 %1879, %1880
  %1882 = xor i32 %1848, %1878
  %1883 = xor i32 %1882, %1851
  %1884 = add i32 %1881, %1883
  %1885 = add i32 %1884, -899497514
  %1886 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1887 = load i32, i32* %1886, align 4
  %1888 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1889 = load i32, i32* %1888, align 4
  %1890 = xor i32 %1887, %1889
  %1891 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %1892 = load i32, i32* %1891, align 4
  %1893 = xor i32 %1890, %1892
  %1894 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %1895 = load i32, i32* %1894, align 8
  %1896 = xor i32 %1893, %1895
  %1897 = shl i32 %1896, 1
  %1898 = lshr i32 %1896, 31
  %1899 = or i32 %1897, %1898
  %1900 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  store i32 %1899, i32* %1900, align 4
  %1901 = add i32 %1885, %1899
  %1902 = add i32 %1824, %1901
  %1903 = shl i32 %1848, 30
  %1904 = lshr i32 %1848, 2
  %1905 = or i32 %1903, %1904
  %1906 = shl i32 %1902, 5
  %1907 = lshr i32 %1902, 27
  %1908 = or i32 %1906, %1907
  %1909 = xor i32 %1875, %1905
  %1910 = xor i32 %1909, %1878
  %1911 = add i32 %1908, %1910
  %1912 = add i32 %1911, -899497514
  %1913 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %1914 = load i32, i32* %1913, align 8
  %1915 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1916 = load i32, i32* %1915, align 16
  %1917 = xor i32 %1914, %1916
  %1918 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 2
  %1919 = load i32, i32* %1918, align 8
  %1920 = xor i32 %1917, %1919
  %1921 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %1922 = load i32, i32* %1921, align 4
  %1923 = xor i32 %1920, %1922
  %1924 = shl i32 %1923, 1
  %1925 = lshr i32 %1923, 31
  %1926 = or i32 %1924, %1925
  %1927 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  store i32 %1926, i32* %1927, align 8
  %1928 = add i32 %1912, %1926
  %1929 = add i32 %1851, %1928
  %1930 = shl i32 %1875, 30
  %1931 = lshr i32 %1875, 2
  %1932 = or i32 %1930, %1931
  %1933 = shl i32 %1929, 5
  %1934 = lshr i32 %1929, 27
  %1935 = or i32 %1933, %1934
  %1936 = xor i32 %1902, %1932
  %1937 = xor i32 %1936, %1905
  %1938 = add i32 %1935, %1937
  %1939 = add i32 %1938, -899497514
  %1940 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %1941 = load i32, i32* %1940, align 4
  %1942 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1943 = load i32, i32* %1942, align 4
  %1944 = xor i32 %1941, %1943
  %1945 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 3
  %1946 = load i32, i32* %1945, align 4
  %1947 = xor i32 %1944, %1946
  %1948 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 8
  %1949 = load i32, i32* %1948, align 16
  %1950 = xor i32 %1947, %1949
  %1951 = shl i32 %1950, 1
  %1952 = lshr i32 %1950, 31
  %1953 = or i32 %1951, %1952
  %1954 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  store i32 %1953, i32* %1954, align 4
  %1955 = add i32 %1939, %1953
  %1956 = add i32 %1878, %1955
  %1957 = shl i32 %1902, 30
  %1958 = lshr i32 %1902, 2
  %1959 = or i32 %1957, %1958
  %1960 = shl i32 %1956, 5
  %1961 = lshr i32 %1956, 27
  %1962 = or i32 %1960, %1961
  %1963 = xor i32 %1929, %1959
  %1964 = xor i32 %1963, %1932
  %1965 = add i32 %1962, %1964
  %1966 = add i32 %1965, -899497514
  %1967 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %1968 = load i32, i32* %1967, align 16
  %1969 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %1970 = load i32, i32* %1969, align 8
  %1971 = xor i32 %1968, %1970
  %1972 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 4
  %1973 = load i32, i32* %1972, align 16
  %1974 = xor i32 %1971, %1973
  %1975 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 9
  %1976 = load i32, i32* %1975, align 4
  %1977 = xor i32 %1974, %1976
  %1978 = shl i32 %1977, 1
  %1979 = lshr i32 %1977, 31
  %1980 = or i32 %1978, %1979
  %1981 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  store i32 %1980, i32* %1981, align 16
  %1982 = add i32 %1966, %1980
  %1983 = add i32 %1905, %1982
  %1984 = shl i32 %1929, 30
  %1985 = lshr i32 %1929, 2
  %1986 = or i32 %1984, %1985
  %1987 = shl i32 %1983, 5
  %1988 = lshr i32 %1983, 27
  %1989 = or i32 %1987, %1988
  %1990 = xor i32 %1956, %1986
  %1991 = xor i32 %1990, %1959
  %1992 = add i32 %1989, %1991
  %1993 = add i32 %1992, -899497514
  %1994 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  %1995 = load i32, i32* %1994, align 4
  %1996 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %1997 = load i32, i32* %1996, align 4
  %1998 = xor i32 %1995, %1997
  %1999 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 5
  %2000 = load i32, i32* %1999, align 4
  %2001 = xor i32 %1998, %2000
  %2002 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 10
  %2003 = load i32, i32* %2002, align 8
  %2004 = xor i32 %2001, %2003
  %2005 = shl i32 %2004, 1
  %2006 = lshr i32 %2004, 31
  %2007 = or i32 %2005, %2006
  %2008 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 13
  store i32 %2007, i32* %2008, align 4
  %2009 = add i32 %1993, %2007
  %2010 = add i32 %1932, %2009
  %2011 = shl i32 %1956, 30
  %2012 = lshr i32 %1956, 2
  %2013 = or i32 %2011, %2012
  %2014 = shl i32 %2010, 5
  %2015 = lshr i32 %2010, 27
  %2016 = or i32 %2014, %2015
  %2017 = xor i32 %1983, %2013
  %2018 = xor i32 %2017, %1986
  %2019 = add i32 %2016, %2018
  %2020 = add i32 %2019, -899497514
  %2021 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  %2022 = load i32, i32* %2021, align 8
  %2023 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 0
  %2024 = load i32, i32* %2023, align 16
  %2025 = xor i32 %2022, %2024
  %2026 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 6
  %2027 = load i32, i32* %2026, align 8
  %2028 = xor i32 %2025, %2027
  %2029 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 11
  %2030 = load i32, i32* %2029, align 4
  %2031 = xor i32 %2028, %2030
  %2032 = shl i32 %2031, 1
  %2033 = lshr i32 %2031, 31
  %2034 = or i32 %2032, %2033
  %2035 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 14
  store i32 %2034, i32* %2035, align 8
  %2036 = add i32 %2020, %2034
  %2037 = add i32 %1959, %2036
  %2038 = shl i32 %1983, 30
  %2039 = lshr i32 %1983, 2
  %2040 = or i32 %2038, %2039
  %2041 = shl i32 %2037, 5
  %2042 = lshr i32 %2037, 27
  %2043 = or i32 %2041, %2042
  %2044 = xor i32 %2010, %2040
  %2045 = xor i32 %2044, %2013
  %2046 = add i32 %2043, %2045
  %2047 = add i32 %2046, -899497514
  %2048 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  %2049 = load i32, i32* %2048, align 4
  %2050 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 1
  %2051 = load i32, i32* %2050, align 4
  %2052 = xor i32 %2049, %2051
  %2053 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 7
  %2054 = load i32, i32* %2053, align 4
  %2055 = xor i32 %2052, %2054
  %2056 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 12
  %2057 = load i32, i32* %2056, align 16
  %2058 = xor i32 %2055, %2057
  %2059 = shl i32 %2058, 1
  %2060 = lshr i32 %2058, 31
  %2061 = or i32 %2059, %2060
  %2062 = getelementptr inbounds [16 x i32], [16 x i32]* %4, i64 0, i64 15
  store i32 %2061, i32* %2062, align 4
  %2063 = add i32 %2047, %2061
  %2064 = add i32 %1986, %2063
  %2065 = shl i32 %2010, 30
  %2066 = lshr i32 %2010, 2
  %2067 = or i32 %2065, %2066
  %2068 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 0
  %2069 = load i32, i32* %2068, align 4
  %2070 = add i32 %2069, %2064
  store i32 %2070, i32* %2068, align 4
  %2071 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 1
  %2072 = load i32, i32* %2071, align 4
  %2073 = add i32 %2072, %2037
  store i32 %2073, i32* %2071, align 4
  %2074 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 2
  %2075 = load i32, i32* %2074, align 4
  %2076 = add i32 %2075, %2067
  store i32 %2076, i32* %2074, align 4
  %2077 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 3
  %2078 = load i32, i32* %2077, align 4
  %2079 = add i32 %2078, %2040
  store i32 %2079, i32* %2077, align 4
  %2080 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 4
  %2081 = load i32, i32* %2080, align 4
  %2082 = add i32 %2081, %2013
  store i32 %2082, i32* %2080, align 4
  %2083 = icmp ult i32* %scevgep, %7
  br i1 %2083, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %55
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sha1_stream(%struct._IO_FILE*, i8*) #0 {
  %3 = alloca %struct.sha1_ctx, align 4, !track !875
  %4 = call noalias i8* @malloc(i64 32840) #8, !track !876
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %33

; <label>:6:                                      ; preds = %2
  call void @sha1_init_ctx(%struct.sha1_ctx* %3)
  br label %7

; <label>:7:                                      ; preds = %6, %._crit_edge
  call void @unroll_loop(i32 433)
  %8 = call i64 @fread_unlocked(i8* %4, i64 1, i64 32768, %struct._IO_FILE* %0)
  %9 = add i64 0, %8
  %10 = icmp eq i64 %9, 32768
  br i1 %10, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %7
  br label %.lr.ph

; <label>:11:                                     ; preds = %24
  %12 = getelementptr inbounds i8, i8* %4, i64 %17
  %13 = sub i64 32768, %17
  %14 = call i64 @fread_unlocked(i8* %12, i64 1, i64 %13, %struct._IO_FILE* %0)
  %15 = add i64 %17, %14
  %16 = icmp eq i64 %15, 32768
  br i1 %16, label %._crit_edge.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %11
  %17 = phi i64 [ %15, %11 ], [ %9, %.lr.ph.preheader ]
  %18 = phi i64 [ %14, %11 ], [ %8, %.lr.ph.preheader ]
  call void @unroll_loop(i32 434)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %24

; <label>:20:                                     ; preds = %.lr.ph
  %.lcssa2 = phi i64 [ %17, %.lr.ph ]
  %21 = call i32 @ferror_unlocked(%struct._IO_FILE* %0) #8
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %27

; <label>:23:                                     ; preds = %20
  call void @free(i8* %4) #8
  br label %33

; <label>:24:                                     ; preds = %.lr.ph
  %25 = call i32 @feof_unlocked(%struct._IO_FILE* %0) #8
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %.loopexit, label %11

._crit_edge.loopexit:                             ; preds = %11
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %7
  call void @sha1_process_block(i8* %4, i64 32768, %struct.sha1_ctx* %3)
  br label %7

.loopexit:                                        ; preds = %24
  %.ph = phi i64 [ %17, %24 ]
  br label %27

; <label>:27:                                     ; preds = %.loopexit, %20
  %28 = phi i64 [ %.lcssa2, %20 ], [ %.ph, %.loopexit ]
  %29 = icmp ugt i64 %28, 0
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %27
  call void @sha1_process_bytes(i8* %4, i64 %28, %struct.sha1_ctx* %3)
  br label %31

; <label>:31:                                     ; preds = %30, %27
  %32 = call i8* @sha1_finish_ctx(%struct.sha1_ctx* %3, i8* %1)
  call void @free(i8* %4) #8
  br label %33

; <label>:33:                                     ; preds = %2, %31, %23
  %.0 = phi i32 [ 1, %23 ], [ 0, %31 ], [ 1, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sha1_process_bytes(i8*, i64, %struct.sha1_ctx*) #0 {
  %4 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %5 = load i32, i32* %4, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %52

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = sub i64 128, %10
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %1, i64 %11
  %14 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %15 = getelementptr inbounds [32 x i32], [32 x i32]* %14, i32 0, i32 0
  %16 = bitcast i32* %15 to i8*
  %17 = getelementptr inbounds i8, i8* %16, i64 %10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %0, i64 %13, i1 false), !track !877
  %18 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = add i64 %20, %13
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %18, align 4
  %23 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %24 = load i32, i32* %23, align 4
  %25 = icmp ugt i32 %24, 64
  br i1 %25, label %26, label %49

; <label>:26:                                     ; preds = %7
  %27 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %28 = getelementptr inbounds [32 x i32], [32 x i32]* %27, i32 0, i32 0
  %29 = bitcast i32* %28 to i8*
  %30 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %31, -64
  %33 = zext i32 %32 to i64
  call void @sha1_process_block(i8* %29, i64 %33, %struct.sha1_ctx* %2)
  %34 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 63
  store i32 %36, i32* %34, align 4
  %37 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %38 = getelementptr inbounds [32 x i32], [32 x i32]* %37, i32 0, i32 0
  %39 = bitcast i32* %38 to i8*
  %40 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %41 = getelementptr inbounds [32 x i32], [32 x i32]* %40, i32 0, i32 0
  %42 = bitcast i32* %41 to i8*
  %43 = add i64 %10, %13
  %44 = and i64 %43, -64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 1 %45, i64 %48, i1 false), !track !878
  br label %49

; <label>:49:                                     ; preds = %26, %7
  %50 = getelementptr inbounds i8, i8* %0, i64 %13
  %51 = sub i64 %1, %13
  br label %52

; <label>:52:                                     ; preds = %49, %3
  %.01 = phi i64 [ %51, %49 ], [ %1, %3 ]
  %.0 = phi i8* [ %50, %49 ], [ %0, %3 ]
  %53 = icmp uge i64 %.01, 64
  br i1 %53, label %54, label %78

; <label>:54:                                     ; preds = %52
  %55 = ptrtoint i8* %.0 to i64
  %56 = urem i64 %55, 4
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %73

; <label>:58:                                     ; preds = %54
  %59 = icmp ugt i64 %.01, 64
  br i1 %59, label %.lr.ph, label %78

.lr.ph:                                           ; preds = %58
  %60 = add i64 %.01, -65
  %61 = lshr i64 %60, 6
  %62 = shl i64 %61, 6
  br label %63

; <label>:63:                                     ; preds = %.lr.ph, %63
  %.17 = phi i8* [ %.0, %.lr.ph ], [ %67, %63 ]
  %.126 = phi i64 [ %.01, %.lr.ph ], [ %68, %63 ]
  call void @unroll_loop(i32 437)
  %64 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %65 = getelementptr inbounds [32 x i32], [32 x i32]* %64, i32 0, i32 0
  %66 = bitcast i32* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 1 %.17, i64 64, i1 false), !track !879
  call void @sha1_process_block(i8* %66, i64 64, %struct.sha1_ctx* %2)
  %67 = getelementptr inbounds i8, i8* %.17, i64 64
  %68 = sub i64 %.126, 64
  %69 = icmp ugt i64 %68, 64
  br i1 %69, label %63, label %._crit_edge

._crit_edge:                                      ; preds = %63
  %70 = add i64 %62, 64
  %71 = add i64 %.01, -64
  %72 = sub i64 %71, %62
  %scevgep = getelementptr i8, i8* %.0, i64 %70
  br label %78

; <label>:73:                                     ; preds = %54
  %74 = and i64 %.01, -64
  call void @sha1_process_block(i8* %.0, i64 %74, %struct.sha1_ctx* %2)
  %75 = and i64 %.01, -64
  %76 = getelementptr inbounds i8, i8* %.0, i64 %75
  %77 = and i64 %.01, 63
  br label %78

; <label>:78:                                     ; preds = %73, %._crit_edge, %58, %52
  %.34 = phi i64 [ %.01, %52 ], [ %77, %73 ], [ %72, %._crit_edge ], [ %.01, %58 ]
  %.3 = phi i8* [ %.0, %52 ], [ %76, %73 ], [ %scevgep, %._crit_edge ], [ %.0, %58 ]
  %79 = icmp ugt i64 %.34, 0
  br i1 %79, label %80, label %104

; <label>:80:                                     ; preds = %78
  %81 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %85 = getelementptr inbounds [32 x i32], [32 x i32]* %84, i32 0, i32 0
  %86 = bitcast i32* %85 to i8*
  %87 = getelementptr inbounds i8, i8* %86, i64 %83
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %.3, i64 %.34, i1 false), !track !880
  %88 = add i64 %83, %.34
  %89 = icmp uge i64 %88, 64
  br i1 %89, label %90, label %101

; <label>:90:                                     ; preds = %80
  %91 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %92 = getelementptr inbounds [32 x i32], [32 x i32]* %91, i32 0, i32 0
  %93 = bitcast i32* %92 to i8*
  call void @sha1_process_block(i8* %93, i64 64, %struct.sha1_ctx* %2)
  %94 = sub i64 %88, 64
  %95 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %96 = getelementptr inbounds [32 x i32], [32 x i32]* %95, i32 0, i32 0
  %97 = bitcast i32* %96 to i8*
  %98 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 7
  %99 = getelementptr inbounds [32 x i32], [32 x i32]* %98, i64 0, i64 16
  %100 = bitcast i32* %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %100, i64 %94, i1 false), !track !881
  br label %101

; <label>:101:                                    ; preds = %90, %80
  %.05 = phi i64 [ %94, %90 ], [ %88, %80 ]
  %102 = trunc i64 %.05 to i32
  %103 = getelementptr inbounds %struct.sha1_ctx, %struct.sha1_ctx* %2, i32 0, i32 6
  store i32 %102, i32* %103, align 4
  br label %104

; <label>:104:                                    ; preds = %101, %78
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @sha1_buffer(i8*, i64, i8*) #0 {
  %4 = alloca %struct.sha1_ctx, align 4, !track !882
  call void @sha1_init_ctx(%struct.sha1_ctx* %4)
  call void @sha1_process_bytes(i8* %0, i64 %1, %struct.sha1_ctx* %4)
  %5 = call i8* @sha1_finish_ctx(%struct.sha1_ctx* %4, i8* %2)
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @base_name(i8*) #7 {
  %2 = call i8* @last_component(i8* %0) #14
  %3 = load i8, i8* %2, align 1
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %1
  %6 = call i64 @base_len(i8* %0) #14
  %7 = call i8* @xstrndup(i8* %0, i64 %6)
  br label %16

; <label>:8:                                      ; preds = %1
  %9 = call i64 @base_len(i8* %2) #14
  %10 = getelementptr inbounds i8, i8* %2, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 47
  %14 = add i64 %9, 1
  %spec.select = select i1 %13, i64 %14, i64 %9
  %15 = call i8* @xstrndup(i8* %2, i64 %spec.select)
  br label %16

; <label>:16:                                     ; preds = %8, %5
  %.0 = phi i8* [ %15, %8 ], [ %7, %5 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind readonly uwtable
define dso_local i8* @last_component(i8*) #12 {
  %2 = getelementptr inbounds i8, i8* %0, i64 0
  br label %3

; <label>:3:                                      ; preds = %3, %1
  %.02 = phi i8* [ %2, %1 ], [ %7, %3 ]
  call void @unroll_loop(i32 438)
  %4 = load i8, i8* %.02, align 1
  %5 = sext i8 %4 to i32
  %6 = icmp eq i32 %5, 47
  %7 = getelementptr inbounds i8, i8* %.02, i32 1
  br i1 %6, label %3, label %8

; <label>:8:                                      ; preds = %3
  %.02.lcssa = phi i8* [ %.02, %3 ]
  %9 = call i64 @strlen(i8* %0) #14
  %10 = sub i64 %9, 1
  %11 = trunc i64 %10 to i32
  %12 = icmp sge i32 %11, 0
  br i1 %12, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %8
  %13 = sext i32 %11 to i64
  br label %14

; <label>:14:                                     ; preds = %.lr.ph, %21
  %indvars.iv = phi i64 [ %13, %.lr.ph ], [ %indvars.iv.next, %21 ]
  call void @unroll_loop(i32 439)
  %15 = getelementptr inbounds i8, i8* %.02.lcssa, i64 %indvars.iv
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 47
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %14
  %.01.lcssa3.wide = phi i64 [ %indvars.iv, %14 ]
  %20 = trunc i64 %.01.lcssa3.wide to i32
  br label %.loopexit

; <label>:21:                                     ; preds = %14
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %22 = icmp sge i64 %indvars.iv.next, 0
  br i1 %22, label %14, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %21
  %split.wide = phi i64 [ %indvars.iv.next, %21 ]
  %23 = trunc i64 %split.wide to i32
  br label %.loopexit

.loopexit:                                        ; preds = %8, %..loopexit_crit_edge, %19
  %.01.lcssa = phi i32 [ %20, %19 ], [ %23, %..loopexit_crit_edge ], [ %11, %8 ]
  %24 = icmp sge i32 %.01.lcssa, 0
  %25 = sext i32 %.01.lcssa to i64
  %26 = getelementptr inbounds i8, i8* %.02.lcssa, i64 %25
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  %.0 = select i1 %24, i8* %27, i8* %.02.lcssa
  ret i8* %.0
}

; Function Attrs: noinline nounwind readonly uwtable
define dso_local i64 @base_len(i8*) #12 {
  %2 = call i64 @strlen(i8* %0) #14
  call void @unroll_loop(i32 440)
  %3 = icmp ult i64 1, %2
  br i1 %3, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %1
  br label %4

; <label>:4:                                      ; preds = %.lr.ph, %10
  %.01 = phi i64 [ %2, %.lr.ph ], [ %11, %10 ]
  %5 = sub i64 %.01, 1
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp eq i32 %8, 47
  br i1 %9, label %10, label %..critedge_crit_edge2

; <label>:10:                                     ; preds = %4
  %11 = add i64 %.01, -1
  call void @unroll_loop(i32 440)
  %12 = icmp ult i64 1, %11
  br i1 %12, label %4, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %10
  %split = phi i64 [ %11, %10 ]
  br label %.critedge

..critedge_crit_edge2:                            ; preds = %4
  %split3 = phi i64 [ %.01, %4 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge2, %..critedge_crit_edge, %1
  %.0.lcssa = phi i64 [ %split3, %..critedge_crit_edge2 ], [ %split, %..critedge_crit_edge ], [ %2, %1 ]
  ret i64 %.0.lcssa
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mb_width_aux(i32) #0 {
  %2 = call i32 @wcwidth(i32 %0) #8
  %3 = icmp sge i32 %2, 0
  br i1 %3, label %9, label %4

; <label>:4:                                      ; preds = %1
  %5 = call i32 @iswcntrl(i32 %0) #8
  %6 = icmp ne i32 %5, 0
  %7 = zext i1 %6 to i64
  %8 = select i1 %6, i32 0, i32 1
  br label %9

; <label>:9:                                      ; preds = %1, %4
  %10 = phi i32 [ %8, %4 ], [ %2, %1 ]
  ret i32 %10
}

; Function Attrs: nounwind
declare dso_local i32 @iswcntrl(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @mb_copy(%struct.mbchar*, %struct.mbchar*) #0 {
  %3 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 4
  %6 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 0
  %7 = icmp eq i8* %4, %6
  br i1 %7, label %8, label %18

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i32 0, i32 4
  %10 = getelementptr inbounds [24 x i8], [24 x i8]* %9, i64 0, i64 0
  %11 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 4
  %12 = getelementptr inbounds [24 x i8], [24 x i8]* %11, i64 0, i64 0
  %13 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %14, i1 false)
  %15 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i32 0, i32 4
  %16 = getelementptr inbounds [24 x i8], [24 x i8]* %15, i64 0, i64 0
  %17 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i32 0, i32 0
  store i8* %16, i8** %17, align 8
  br label %22

; <label>:18:                                     ; preds = %2
  %19 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i32 0, i32 0
  store i8* %20, i8** %21, align 8
  br label %22

; <label>:22:                                     ; preds = %18, %8
  %23 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i32 0, i32 1
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 2
  %27 = load i8, i8* %26, align 8
  %28 = trunc i8 %27 to i1
  %29 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i32 0, i32 2
  %30 = zext i1 %28 to i8
  store i8 %30, i8* %29, align 8
  br i1 %28, label %31, label %35

; <label>:31:                                     ; preds = %22
  %32 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %1, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %0, i32 0, i32 3
  store i32 %33, i32* %34, align 4
  br label %35

; <label>:35:                                     ; preds = %31, %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @is_basic(i8 signext) #0 {
  %2 = zext i8 %0 to i32
  %3 = ashr i32 %2, 5
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([8 x i32]* @is_basic_table to [0 x i32]*), i64 0, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = zext i8 %0 to i32
  %8 = and i32 %7, 31
  %9 = lshr i32 %6, %8
  %10 = and i32 %9, 1
  %11 = icmp ne i32 %10, 0
  ret i1 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mbiter_multi_next(%struct.mbiter_multi*) #0 {
  %2 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 3
  %3 = load i8, i8* %2, align 4
  %4 = trunc i8 %3 to i1
  br i1 %4, label %90, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 1
  %7 = load i8, i8* %6, align 8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %29, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %11 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = call zeroext i1 @is_basic(i8 signext %13)
  br i1 %14, label %15, label %27

; <label>:15:                                     ; preds = %9
  %16 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %17 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %16, i32 0, i32 1
  store i64 1, i64* %17, align 8
  %18 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %19 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %24 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %23, i32 0, i32 3
  store i32 %22, i32* %24, align 4
  %25 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %26 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %25, i32 0, i32 2
  store i8 1, i8* %26, align 8
  br label %88

; <label>:27:                                     ; preds = %9
  %28 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 1
  store i8 1, i8* %28, align 8
  br label %29

; <label>:29:                                     ; preds = %5, %27
  %30 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %31 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %30, i32 0, i32 3
  %32 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %33 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %32, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %38 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = ptrtoint i8* %36 to i64
  %41 = ptrtoint i8* %39 to i64
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 2
  %44 = call i64 @mbrtowc(i32* %31, i8* %34, i64 %42, %struct.__mbstate_t* %43) #8
  %45 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %46 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %45, i32 0, i32 1
  store i64 %44, i64* %46, align 8
  %47 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %48 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %47, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %49, -1
  %51 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %52 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %51, i32 0, i32 1
  br i1 %50, label %53, label %56

; <label>:53:                                     ; preds = %29
  store i64 1, i64* %52, align 8
  %54 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %55 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %54, i32 0, i32 2
  store i8 0, i8* %55, align 8
  br label %88

; <label>:56:                                     ; preds = %29
  %57 = load i64, i64* %52, align 8
  %58 = icmp eq i64 %57, -2
  br i1 %58, label %59, label %72

; <label>:59:                                     ; preds = %56
  %60 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %63 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %62, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = ptrtoint i8* %61 to i64
  %66 = ptrtoint i8* %64 to i64
  %67 = sub i64 %65, %66
  %68 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %69 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %68, i32 0, i32 1
  store i64 %67, i64* %69, align 8
  %70 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %71 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %70, i32 0, i32 2
  store i8 0, i8* %71, align 8
  br label %88

; <label>:72:                                     ; preds = %56
  %73 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %74 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %73, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %80

; <label>:77:                                     ; preds = %72
  %78 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %79 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %78, i32 0, i32 1
  store i64 1, i64* %79, align 8
  br label %80

; <label>:80:                                     ; preds = %77, %72
  %81 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %82 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %81, i32 0, i32 2
  store i8 1, i8* %82, align 8
  %83 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 2
  %84 = call i32 @mbsinit(%struct.__mbstate_t* %83) #14
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %88

; <label>:86:                                     ; preds = %80
  %87 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 1
  store i8 0, i8* %87, align 8
  br label %88

; <label>:88:                                     ; preds = %53, %80, %86, %59, %15
  %89 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 3
  store i8 1, i8* %89, align 4
  br label %90

; <label>:90:                                     ; preds = %1, %88
  ret void
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @mbiter_multi_reloc(%struct.mbiter_multi*, i64) #0 {
  %3 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %4 = getelementptr inbounds %struct.mbchar, %struct.mbchar* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 %1
  store i8* %6, i8** %4, align 8
  %7 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  store i8* %9, i8** %7, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mbiter_multi_copy(%struct.mbiter_multi*, %struct.mbiter_multi*) #0 {
  %3 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 0
  store i8* %4, i8** %5, align 8
  %6 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i32 0, i32 1
  %7 = load i8, i8* %6, align 8
  %8 = trunc i8 %7 to i1
  %9 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 1
  %10 = zext i1 %8 to i8
  store i8 %10, i8* %9, align 8
  %11 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 2
  %12 = bitcast %struct.__mbstate_t* %11 to i8*
  br i1 %8, label %13, label %16

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i32 0, i32 2
  %15 = bitcast %struct.__mbstate_t* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %15, i64 8, i1 false)
  br label %17

; <label>:16:                                     ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 8, i1 false)
  br label %17

; <label>:17:                                     ; preds = %16, %13
  %18 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i32 0, i32 3
  %19 = load i8, i8* %18, align 4
  %20 = trunc i8 %19 to i1
  %21 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 3
  %22 = zext i1 %20 to i8
  store i8 %22, i8* %21, align 4
  %23 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %0, i32 0, i32 4
  %24 = getelementptr inbounds %struct.mbiter_multi, %struct.mbiter_multi* %1, i32 0, i32 4
  call void @mb_copy(%struct.mbchar* %23, %struct.mbchar* %24)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.quoting_options* @clone_quoting_options(%struct.quoting_options*) #0 {
  %2 = call i32* @__errno_location() #15
  %3 = load i32, i32* %2, align 4
  %4 = icmp ne %struct.quoting_options* %0, null
  %.default_quoting_options = select i1 %4, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %5 = bitcast %struct.quoting_options* %.default_quoting_options to i8*
  %6 = call i8* @xmemdup(i8* %5, i64 56)
  %7 = bitcast i8* %6 to %struct.quoting_options*
  %8 = call i32* @__errno_location() #15
  store i32 %3, i32* %8, align 4
  ret %struct.quoting_options* %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_quoting_style(%struct.quoting_options*) #0 {
  %2 = icmp ne %struct.quoting_options* %0, null
  %.default_quoting_options = select i1 %2, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %3 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_quoting_style(%struct.quoting_options*, i32) #0 {
  %3 = icmp ne %struct.quoting_options* %0, null
  %.default_quoting_options = select i1 %3, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %4 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 0
  store i32 %1, i32* %4, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #0 {
  %4 = icmp ne %struct.quoting_options* %0, null
  %.default_quoting_options = select i1 %4, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 2
  %6 = getelementptr inbounds [8 x i32], [8 x i32]* %5, i32 0, i32 0
  %7 = zext i8 %1 to i64
  %8 = udiv i64 %7, 32
  %9 = getelementptr inbounds i32, i32* %6, i64 %8
  %10 = zext i8 %1 to i64
  %11 = urem i64 %10, 32
  %12 = trunc i64 %11 to i32
  %13 = load i32, i32* %9, align 4
  %14 = lshr i32 %13, %12
  %15 = and i32 %14, 1
  %16 = and i32 %2, 1
  %17 = xor i32 %16, %15
  %18 = shl i32 %17, %12
  %19 = load i32, i32* %9, align 4
  %20 = xor i32 %19, %18
  store i32 %20, i32* %9, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @set_quoting_flags(%struct.quoting_options*, i32) #0 {
  %3 = icmp ne %struct.quoting_options* %0, null
  %spec.select = select i1 %3, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %4 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %spec.select, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %spec.select, i32 0, i32 1
  store i32 %1, i32* %6, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_custom_quoting(%struct.quoting_options*, i8*, i8*) #0 {
  %4 = icmp ne %struct.quoting_options* %0, null
  %spec.select = select i1 %4, %struct.quoting_options* %0, %struct.quoting_options* @default_quoting_options
  %5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %spec.select, i32 0, i32 0
  store i32 10, i32* %5, align 8
  %6 = icmp ne i8* %1, null
  %7 = icmp ne i8* %2, null
  %or.cond = and i1 %6, %7
  br i1 %or.cond, label %9, label %8

; <label>:8:                                      ; preds = %3
  call void @abort() #16
  unreachable

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %spec.select, i32 0, i32 3
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %spec.select, i32 0, i32 4
  store i8* %2, i8** %11, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @quotearg_buffer(i8*, i64, i8*, i64, %struct.quoting_options*) #0 {
  %6 = icmp ne %struct.quoting_options* %4, null
  %.default_quoting_options = select i1 %6, %struct.quoting_options* %4, %struct.quoting_options* @default_quoting_options
  %7 = call i32* @__errno_location() #15
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 2
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* %13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 4
  %18 = load i8*, i8** %17, align 8
  %19 = call i64 @quotearg_buffer_restyled(i8* %0, i64 %1, i8* %2, i64 %3, i32 %10, i32 %12, i32* %14, i8* %16, i8* %18)
  %20 = call i32* @__errno_location() #15
  store i32 %8, i32* %20, align 4
  ret i64 %19
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #0 {
  %10 = alloca %struct.__mbstate_t, align 4, !track !883
  %11 = alloca i32, align 4, !track !884
  %12 = call i64 @__ctype_get_mb_cur_max() #8
  %13 = icmp eq i64 %12, 1
  %14 = zext i1 %13 to i8
  %15 = and i32 %5, 2
  %16 = icmp ne i32 %15, 0
  %17 = zext i1 %16 to i8
  switch i32 %4, label %64 [
    i32 6, label %18
    i32 5, label %19
    i32 7, label %65
    i32 0, label %63
    i32 2, label %53
    i32 4, label %51
    i32 3, label %49
    i32 1, label %50
    i32 10, label %34
    i32 8, label %29
    i32 9, label %29
  ]

; <label>:18:                                     ; preds = %9
  br label %19

; <label>:19:                                     ; preds = %9, %18
  %.060 = phi i8 [ %17, %9 ], [ 1, %18 ]
  %.011 = phi i32 [ %4, %9 ], [ 5, %18 ]
  %20 = trunc i8 %.060 to i1
  br i1 %20, label %27, label %21

; <label>:21:                                     ; preds = %19
  %22 = icmp ult i64 0, %1
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %21
  %24 = getelementptr inbounds i8, i8* %0, i64 0
  store i8 34, i8* %24, align 1
  br label %25

; <label>:25:                                     ; preds = %23, %21
  %26 = add i64 0, 1
  br label %27

; <label>:27:                                     ; preds = %25, %19
  %.036 = phi i64 [ 0, %19 ], [ %26, %25 ]
  %28 = getelementptr [2 x i8], [2 x i8]* @.str.10.1842, i32 0, i32 0
  br label %65

; <label>:29:                                     ; preds = %9, %9
  %30 = getelementptr [2 x i8], [2 x i8]* @.str.11.1843, i32 0, i32 0
  %31 = call i8* @gettext_quote(i8* %30, i32 %4)
  %32 = getelementptr [2 x i8], [2 x i8]* @.str.12.1844, i32 0, i32 0
  %33 = call i8* @gettext_quote(i8* %32, i32 %4)
  br label %34

; <label>:34:                                     ; preds = %9, %29
  %.025 = phi i8* [ %33, %29 ], [ %8, %9 ]
  %.023 = phi i8* [ %31, %29 ], [ %7, %9 ]
  %35 = trunc i8 %17 to i1
  br i1 %35, label %._crit_edge137, label %36

; <label>:36:                                     ; preds = %34
  %37 = load i8, i8* %.023, align 1
  %38 = icmp ne i8 %37, 0
  br i1 %38, label %.lr.ph136.preheader, label %._crit_edge137

.lr.ph136.preheader:                              ; preds = %36
  br label %.lr.ph136

.lr.ph136:                                        ; preds = %.lr.ph136.preheader, %43
  %.137134 = phi i64 [ %44, %43 ], [ 0, %.lr.ph136.preheader ]
  %.049133 = phi i8* [ %45, %43 ], [ %.023, %.lr.ph136.preheader ]
  call void @unroll_loop(i32 441)
  %39 = icmp ult i64 %.137134, %1
  br i1 %39, label %40, label %43

; <label>:40:                                     ; preds = %.lr.ph136
  %41 = load i8, i8* %.049133, align 1
  %42 = getelementptr inbounds i8, i8* %0, i64 %.137134
  store i8 %41, i8* %42, align 1
  br label %43

; <label>:43:                                     ; preds = %40, %.lr.ph136
  %44 = add i64 %.137134, 1
  %45 = getelementptr inbounds i8, i8* %.049133, i32 1
  %46 = load i8, i8* %45, align 1
  %47 = icmp ne i8 %46, 0
  br i1 %47, label %.lr.ph136, label %._crit_edge137.loopexit

._crit_edge137.loopexit:                          ; preds = %43
  %.238.ph = phi i64 [ %44, %43 ]
  br label %._crit_edge137

._crit_edge137:                                   ; preds = %._crit_edge137.loopexit, %36, %34
  %.238 = phi i64 [ 0, %34 ], [ 0, %36 ], [ %.238.ph, %._crit_edge137.loopexit ]
  %48 = call i64 @strlen(i8* %.025) #14
  br label %65

; <label>:49:                                     ; preds = %9
  br label %50

; <label>:50:                                     ; preds = %9, %49
  %.053 = phi i8 [ 0, %9 ], [ 1, %49 ]
  br label %51

; <label>:51:                                     ; preds = %9, %50
  %.161 = phi i8 [ %17, %9 ], [ 1, %50 ]
  %.154 = phi i8 [ 0, %9 ], [ %.053, %50 ]
  %52 = trunc i8 %.161 to i1
  %spec.select = select i1 %52, i8 %.154, i8 1
  br label %53

; <label>:53:                                     ; preds = %9, %51
  %.262 = phi i8 [ %17, %9 ], [ %.161, %51 ]
  %.356 = phi i8 [ 0, %9 ], [ %spec.select, %51 ]
  %54 = trunc i8 %.262 to i1
  br i1 %54, label %61, label %55

; <label>:55:                                     ; preds = %53
  %56 = icmp ult i64 0, %1
  br i1 %56, label %57, label %59

; <label>:57:                                     ; preds = %55
  %58 = getelementptr inbounds i8, i8* %0, i64 0
  store i8 39, i8* %58, align 1
  br label %59

; <label>:59:                                     ; preds = %57, %55
  %60 = add i64 0, 1
  br label %61

; <label>:61:                                     ; preds = %59, %53
  %.339 = phi i64 [ 0, %53 ], [ %60, %59 ]
  %62 = getelementptr [2 x i8], [2 x i8]* @.str.12.1844, i32 0, i32 0
  br label %65

; <label>:63:                                     ; preds = %9
  br label %65

; <label>:64:                                     ; preds = %9
  call void @abort() #16
  unreachable

; <label>:65:                                     ; preds = %9, %63, %61, %._crit_edge137, %27
  %.363 = phi i8 [ 0, %63 ], [ %.262, %61 ], [ %17, %._crit_edge137 ], [ %.060, %27 ], [ 0, %9 ]
  %.457 = phi i8 [ 0, %63 ], [ %.356, %61 ], [ 1, %._crit_edge137 ], [ 1, %27 ], [ 1, %9 ]
  %.052 = phi i64 [ 0, %63 ], [ 1, %61 ], [ %48, %._crit_edge137 ], [ 1, %27 ], [ 0, %9 ]
  %.150 = phi i8* [ null, %63 ], [ %62, %61 ], [ %.025, %._crit_edge137 ], [ %28, %27 ], [ null, %9 ]
  %.440 = phi i64 [ 0, %63 ], [ %.339, %61 ], [ %.238, %._crit_edge137 ], [ %.036, %27 ], [ 0, %9 ]
  %.126 = phi i8* [ %8, %63 ], [ %8, %61 ], [ %.025, %._crit_edge137 ], [ %8, %27 ], [ %8, %9 ]
  %.124 = phi i8* [ %7, %63 ], [ %7, %61 ], [ %.023, %._crit_edge137 ], [ %7, %27 ], [ %7, %9 ]
  %.112 = phi i32 [ %4, %63 ], [ 2, %61 ], [ %4, %._crit_edge137 ], [ %.011, %27 ], [ %4, %9 ]
  br label %66

; <label>:66:                                     ; preds = %482, %65
  %.064 = phi i8 [ 0, %65 ], [ %.1377, %482 ]
  %.541 = phi i64 [ %.440, %65 ], [ %.23, %482 ]
  %.027 = phi i64 [ 0, %65 ], [ %483, %482 ]
  %.07 = phi i64 [ %3, %65 ], [ %.8, %482 ]
  call void @unroll_loop(i32 442)
  %67 = icmp eq i64 %.07, -1
  br i1 %67, label %68, label %74

; <label>:68:                                     ; preds = %66
  %69 = getelementptr inbounds i8, i8* %2, i64 %.027
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = icmp eq i32 %71, 0
  %73 = zext i1 %72 to i32
  br label %77

; <label>:74:                                     ; preds = %66
  %75 = icmp eq i64 %.027, %.07
  %76 = zext i1 %75 to i32
  br label %77

; <label>:77:                                     ; preds = %74, %68
  %78 = phi i32 [ %73, %68 ], [ %76, %74 ]
  %79 = icmp ne i32 %78, 0
  %80 = xor i1 %79, true
  br i1 %80, label %81, label %484

; <label>:81:                                     ; preds = %77
  %82 = trunc i8 %.457 to i1
  %83 = icmp ne i32 %.112, 2
  %or.cond = and i1 %82, %83
  %84 = icmp ne i64 %.052, 0
  %or.cond1 = and i1 %or.cond, %84
  br i1 %or.cond1, label %85, label %99

; <label>:85:                                     ; preds = %81
  %86 = add i64 %.027, %.052
  %87 = icmp eq i64 %.07, -1
  %88 = icmp ult i64 1, %.052
  %or.cond2 = and i1 %87, %88
  br i1 %or.cond2, label %89, label %91

; <label>:89:                                     ; preds = %85
  %90 = call i64 @strlen(i8* %2) #14
  br label %91

; <label>:91:                                     ; preds = %85, %89
  %.18 = phi i64 [ %90, %89 ], [ %.07, %85 ]
  %92 = icmp ule i64 %86, %.18
  br i1 %92, label %93, label %99

; <label>:93:                                     ; preds = %91
  %94 = getelementptr inbounds i8, i8* %2, i64 %.027
  %95 = call i32 @memcmp(i8* %94, i8* %.150, i64 %.052) #14
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %99

; <label>:97:                                     ; preds = %93
  %98 = trunc i8 %.363 to i1
  br i1 %98, label %.loopexit31, label %99

; <label>:99:                                     ; preds = %97, %93, %91, %81
  %.019 = phi i8 [ 0, %93 ], [ 0, %91 ], [ 0, %81 ], [ 1, %97 ]
  %.29 = phi i64 [ %.18, %93 ], [ %.18, %91 ], [ %.07, %81 ], [ %.18, %97 ]
  %100 = getelementptr inbounds i8, i8* %2, i64 %.027
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  switch i32 %102, label %260 [
    i32 0, label %103
    i32 63, label %162
    i32 7, label %226
    i32 8, label %208
    i32 12, label %209
    i32 10, label %222
    i32 13, label %210
    i32 9, label %211
    i32 11, label %212
    i32 92, label %213
    i32 123, label %228
    i32 125, label %228
    i32 35, label %236
    i32 126, label %236
    i32 32, label %237
    i32 33, label %237
    i32 34, label %237
    i32 36, label %237
    i32 38, label %237
    i32 40, label %237
    i32 41, label %237
    i32 42, label %237
    i32 59, label %237
    i32 60, label %237
    i32 61, label %237
    i32 62, label %237
    i32 91, label %237
    i32 94, label %237
    i32 96, label %237
    i32 124, label %237
    i32 39, label %240
    i32 37, label %413
    i32 43, label %413
    i32 44, label %413
    i32 45, label %413
    i32 46, label %413
    i32 47, label %413
    i32 48, label %413
    i32 49, label %413
    i32 50, label %413
    i32 51, label %413
    i32 52, label %413
    i32 53, label %413
    i32 54, label %413
    i32 55, label %413
    i32 56, label %413
    i32 57, label %413
    i32 58, label %413
    i32 65, label %413
    i32 66, label %413
    i32 67, label %413
    i32 68, label %413
    i32 69, label %413
    i32 70, label %413
    i32 71, label %413
    i32 72, label %413
    i32 73, label %413
    i32 74, label %413
    i32 75, label %413
    i32 76, label %413
    i32 77, label %413
    i32 78, label %413
    i32 79, label %413
    i32 80, label %413
    i32 81, label %413
    i32 82, label %413
    i32 83, label %413
    i32 84, label %413
    i32 85, label %413
    i32 86, label %413
    i32 87, label %413
    i32 88, label %413
    i32 89, label %413
    i32 90, label %413
    i32 93, label %413
    i32 95, label %413
    i32 97, label %413
    i32 98, label %413
    i32 99, label %413
    i32 100, label %413
    i32 101, label %413
    i32 102, label %413
    i32 103, label %413
    i32 104, label %413
    i32 105, label %413
    i32 106, label %413
    i32 107, label %413
    i32 108, label %413
    i32 109, label %413
    i32 110, label %413
    i32 111, label %413
    i32 112, label %413
    i32 113, label %413
    i32 114, label %413
    i32 115, label %413
    i32 116, label %413
    i32 117, label %413
    i32 118, label %413
    i32 119, label %413
    i32 120, label %413
    i32 121, label %413
    i32 122, label %413
  ]

; <label>:103:                                    ; preds = %99
  %104 = trunc i8 %.457 to i1
  br i1 %104, label %105, label %159

; <label>:105:                                    ; preds = %103
  %106 = trunc i8 %.363 to i1
  br i1 %106, label %.loopexit31, label %107

; <label>:107:                                    ; preds = %105
  %108 = icmp eq i32 %.112, 2
  br i1 %108, label %109, label %127

; <label>:109:                                    ; preds = %107
  %110 = trunc i8 %.064 to i1
  br i1 %110, label %127, label %111

; <label>:111:                                    ; preds = %109
  %112 = icmp ult i64 %.541, %1
  br i1 %112, label %113, label %115

; <label>:113:                                    ; preds = %111
  %114 = getelementptr inbounds i8, i8* %0, i64 %.541
  store i8 39, i8* %114, align 1
  br label %115

; <label>:115:                                    ; preds = %113, %111
  %116 = add i64 %.541, 1
  %117 = icmp ult i64 %116, %1
  br i1 %117, label %118, label %120

; <label>:118:                                    ; preds = %115
  %119 = getelementptr inbounds i8, i8* %0, i64 %116
  store i8 36, i8* %119, align 1
  br label %120

; <label>:120:                                    ; preds = %118, %115
  %121 = add i64 %116, 1
  %122 = icmp ult i64 %121, %1
  br i1 %122, label %123, label %125

; <label>:123:                                    ; preds = %120
  %124 = getelementptr inbounds i8, i8* %0, i64 %121
  store i8 39, i8* %124, align 1
  br label %125

; <label>:125:                                    ; preds = %123, %120
  %126 = add i64 %121, 1
  br label %127

; <label>:127:                                    ; preds = %107, %109, %125
  %.165 = phi i8 [ %.064, %109 ], [ 1, %125 ], [ %.064, %107 ]
  %.642 = phi i64 [ %.541, %109 ], [ %126, %125 ], [ %.541, %107 ]
  %128 = icmp ult i64 %.642, %1
  br i1 %128, label %129, label %131

; <label>:129:                                    ; preds = %127
  %130 = getelementptr inbounds i8, i8* %0, i64 %.642
  store i8 92, i8* %130, align 1
  br label %131

; <label>:131:                                    ; preds = %129, %127
  %132 = add i64 %.642, 1
  %133 = icmp ne i32 %.112, 2
  %134 = add i64 %.027, 1
  %135 = icmp ult i64 %134, %.29
  %or.cond4 = and i1 %133, %135
  br i1 %or.cond4, label %136, label %413

; <label>:136:                                    ; preds = %131
  %137 = add i64 %.027, 1
  %138 = getelementptr inbounds i8, i8* %2, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = sext i8 %139 to i32
  %141 = icmp sle i32 48, %140
  br i1 %141, label %142, label %413

; <label>:142:                                    ; preds = %136
  %143 = add i64 %.027, 1
  %144 = getelementptr inbounds i8, i8* %2, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = sext i8 %145 to i32
  %147 = icmp sle i32 %146, 57
  br i1 %147, label %148, label %413

; <label>:148:                                    ; preds = %142
  %149 = icmp ult i64 %132, %1
  br i1 %149, label %150, label %152

; <label>:150:                                    ; preds = %148
  %151 = getelementptr inbounds i8, i8* %0, i64 %132
  store i8 48, i8* %151, align 1
  br label %152

; <label>:152:                                    ; preds = %150, %148
  %153 = add i64 %132, 1
  %154 = icmp ult i64 %153, %1
  br i1 %154, label %155, label %157

; <label>:155:                                    ; preds = %152
  %156 = getelementptr inbounds i8, i8* %0, i64 %153
  store i8 48, i8* %156, align 1
  br label %157

; <label>:157:                                    ; preds = %155, %152
  %158 = add i64 %153, 1
  br label %413

; <label>:159:                                    ; preds = %103
  %160 = and i32 %5, 1
  %161 = icmp ne i32 %160, 0
  br i1 %161, label %482, label %413

; <label>:162:                                    ; preds = %99
  switch i32 %.112, label %413 [
    i32 2, label %163
    i32 5, label %165
  ]

; <label>:163:                                    ; preds = %162
  %164 = trunc i8 %.363 to i1
  br i1 %164, label %.loopexit31, label %413

; <label>:165:                                    ; preds = %162
  %166 = and i32 %5, 4
  %167 = icmp ne i32 %166, 0
  %168 = add i64 %.027, 2
  %169 = icmp ult i64 %168, %.29
  %or.cond6 = and i1 %167, %169
  br i1 %or.cond6, label %170, label %413

; <label>:170:                                    ; preds = %165
  %171 = add i64 %.027, 1
  %172 = getelementptr inbounds i8, i8* %2, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = sext i8 %173 to i32
  %175 = icmp eq i32 %174, 63
  br i1 %175, label %176, label %413

; <label>:176:                                    ; preds = %170
  %177 = add i64 %.027, 2
  %178 = getelementptr inbounds i8, i8* %2, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = sext i8 %179 to i32
  switch i32 %180, label %413 [
    i32 33, label %181
    i32 39, label %181
    i32 40, label %181
    i32 41, label %181
    i32 45, label %181
    i32 47, label %181
    i32 60, label %181
    i32 61, label %181
    i32 62, label %181
  ]

; <label>:181:                                    ; preds = %176, %176, %176, %176, %176, %176, %176, %176, %176
  %182 = trunc i8 %.363 to i1
  br i1 %182, label %.loopexit31, label %183

; <label>:183:                                    ; preds = %181
  %184 = add i64 %.027, 2
  %185 = getelementptr inbounds i8, i8* %2, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = add i64 %.027, 2
  %188 = icmp ult i64 %.541, %1
  br i1 %188, label %189, label %191

; <label>:189:                                    ; preds = %183
  %190 = getelementptr inbounds i8, i8* %0, i64 %.541
  store i8 63, i8* %190, align 1
  br label %191

; <label>:191:                                    ; preds = %189, %183
  %192 = add i64 %.541, 1
  %193 = icmp ult i64 %192, %1
  br i1 %193, label %194, label %196

; <label>:194:                                    ; preds = %191
  %195 = getelementptr inbounds i8, i8* %0, i64 %192
  store i8 34, i8* %195, align 1
  br label %196

; <label>:196:                                    ; preds = %194, %191
  %197 = add i64 %192, 1
  %198 = icmp ult i64 %197, %1
  br i1 %198, label %199, label %201

; <label>:199:                                    ; preds = %196
  %200 = getelementptr inbounds i8, i8* %0, i64 %197
  store i8 34, i8* %200, align 1
  br label %201

; <label>:201:                                    ; preds = %199, %196
  %202 = add i64 %197, 1
  %203 = icmp ult i64 %202, %1
  br i1 %203, label %204, label %206

; <label>:204:                                    ; preds = %201
  %205 = getelementptr inbounds i8, i8* %0, i64 %202
  store i8 63, i8* %205, align 1
  br label %206

; <label>:206:                                    ; preds = %204, %201
  %207 = add i64 %202, 1
  br label %413

; <label>:208:                                    ; preds = %99
  br label %226

; <label>:209:                                    ; preds = %99
  br label %226

; <label>:210:                                    ; preds = %99
  br label %222

; <label>:211:                                    ; preds = %99
  br label %222

; <label>:212:                                    ; preds = %99
  br label %226

; <label>:213:                                    ; preds = %99
  %214 = icmp eq i32 %.112, 2
  br i1 %214, label %215, label %217

; <label>:215:                                    ; preds = %213
  %216 = trunc i8 %.363 to i1
  br i1 %216, label %.loopexit31, label %461

; <label>:217:                                    ; preds = %213
  %218 = trunc i8 %.457 to i1
  br i1 %218, label %219, label %222

; <label>:219:                                    ; preds = %217
  %220 = trunc i8 %.363 to i1
  %221 = icmp ne i64 %.052, 0
  %or.cond7 = and i1 %220, %221
  br i1 %or.cond7, label %461, label %222

; <label>:222:                                    ; preds = %217, %219, %99, %211, %210
  %.058 = phi i8 [ 116, %211 ], [ 114, %210 ], [ 110, %99 ], [ %101, %219 ], [ %101, %217 ]
  %223 = icmp eq i32 %.112, 2
  br i1 %223, label %224, label %226

; <label>:224:                                    ; preds = %222
  %225 = trunc i8 %.363 to i1
  br i1 %225, label %.loopexit31, label %226

; <label>:226:                                    ; preds = %222, %224, %99, %212, %209, %208
  %.159 = phi i8 [ 118, %212 ], [ 102, %209 ], [ 98, %208 ], [ 97, %99 ], [ %.058, %224 ], [ %.058, %222 ]
  %227 = trunc i8 %.457 to i1
  br i1 %227, label %433, label %413

; <label>:228:                                    ; preds = %99, %99
  switch i64 %.29, label %413 [
    i64 -1, label %229
    i64 1, label %236
  ]

; <label>:229:                                    ; preds = %228
  %230 = getelementptr inbounds i8, i8* %2, i64 1
  %231 = load i8, i8* %230, align 1
  %232 = sext i8 %231 to i32
  %233 = icmp ne i32 %232, 0
  %234 = icmp ne i64 %.027, 0
  %or.cond16 = or i1 %233, %234
  %or.cond16.not = xor i1 %or.cond16, true
  %235 = icmp eq i32 %.112, 2
  %or.cond18 = and i1 %or.cond16.not, %235
  br i1 %or.cond18, label %238, label %413

; <label>:236:                                    ; preds = %228, %99, %99
  %.old15 = icmp eq i64 %.027, 0
  %.old17 = icmp eq i32 %.112, 2
  %or.cond19 = and i1 %.old15, %.old17
  br i1 %or.cond19, label %238, label %413

; <label>:237:                                    ; preds = %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99
  %.old17.old = icmp eq i32 %.112, 2
  br i1 %.old17.old, label %238, label %413

; <label>:238:                                    ; preds = %236, %229, %237
  %239 = trunc i8 %.363 to i1
  br i1 %239, label %.loopexit31, label %413

; <label>:240:                                    ; preds = %99
  %241 = icmp eq i32 %.112, 2
  br i1 %241, label %242, label %413

; <label>:242:                                    ; preds = %240
  %243 = trunc i8 %.363 to i1
  br i1 %243, label %.loopexit31, label %244

; <label>:244:                                    ; preds = %242
  %245 = icmp ult i64 %.541, %1
  br i1 %245, label %246, label %248

; <label>:246:                                    ; preds = %244
  %247 = getelementptr inbounds i8, i8* %0, i64 %.541
  store i8 39, i8* %247, align 1
  br label %248

; <label>:248:                                    ; preds = %246, %244
  %249 = add i64 %.541, 1
  %250 = icmp ult i64 %249, %1
  br i1 %250, label %251, label %253

; <label>:251:                                    ; preds = %248
  %252 = getelementptr inbounds i8, i8* %0, i64 %249
  store i8 92, i8* %252, align 1
  br label %253

; <label>:253:                                    ; preds = %251, %248
  %254 = add i64 %249, 1
  %255 = icmp ult i64 %254, %1
  br i1 %255, label %256, label %258

; <label>:256:                                    ; preds = %253
  %257 = getelementptr inbounds i8, i8* %0, i64 %254
  store i8 39, i8* %257, align 1
  br label %258

; <label>:258:                                    ; preds = %256, %253
  %259 = add i64 %254, 1
  br label %413

; <label>:260:                                    ; preds = %99
  %261 = trunc i8 %14 to i1
  br i1 %261, label %262, label %273

; <label>:262:                                    ; preds = %260
  %263 = call i16** @__ctype_b_loc() #15
  %264 = load i16*, i16** %263, align 8
  %265 = zext i8 %101 to i32
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i16, i16* %264, i64 %266
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = and i32 %269, 16384
  %271 = icmp ne i32 %270, 0
  %272 = zext i1 %271 to i8
  br label %.loopexit

; <label>:273:                                    ; preds = %260
  %274 = bitcast %struct.__mbstate_t* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %274, i8 0, i64 8, i1 false)
  %275 = icmp eq i64 %.29, -1
  br i1 %275, label %276, label %278

; <label>:276:                                    ; preds = %273
  %277 = call i64 @strlen(i8* %2) #14
  br label %278

; <label>:278:                                    ; preds = %276, %273
  %.310 = phi i64 [ %277, %276 ], [ %.29, %273 ]
  br label %279

; <label>:279:                                    ; preds = %._crit_edge132, %278
  %.03 = phi i64 [ 0, %278 ], [ %312, %._crit_edge132 ]
  %.02 = phi i8 [ 1, %278 ], [ %spec.select9, %._crit_edge132 ]
  call void @unroll_loop(i32 443)
  %280 = add i64 %.027, %.03
  %281 = getelementptr inbounds i8, i8* %2, i64 %280
  %282 = add i64 %.027, %.03
  %283 = sub i64 %.310, %282
  %284 = call i64 @mbrtowc(i32* %11, i8* %281, i64 %283, %struct.__mbstate_t* %10) #8
  switch i64 %284, label %297 [
    i64 0, label %.loopexit.loopexit27
    i64 -1, label %285
    i64 -2, label %.preheader
  ]

.preheader:                                       ; preds = %279
  %.03.lcssa22.ph = phi i64 [ %.03, %279 ]
  %.14.ph = phi i64 [ %.03, %279 ]
  br label %286

; <label>:285:                                    ; preds = %279
  %.03.lcssa = phi i64 [ %.03, %279 ]
  br label %.loopexit

; <label>:286:                                    ; preds = %.preheader, %294
  %.14 = phi i64 [ %296, %294 ], [ %.14.ph, %.preheader ]
  call void @unroll_loop(i32 444)
  %287 = add i64 %.027, %.14
  %288 = icmp ult i64 %287, %.310
  br i1 %288, label %289, label %294

; <label>:289:                                    ; preds = %286
  %290 = getelementptr inbounds i8, i8* %2, i64 %287
  %291 = load i8, i8* %290, align 1
  %292 = sext i8 %291 to i32
  %293 = icmp ne i32 %292, 0
  br label %294

; <label>:294:                                    ; preds = %289, %286
  %295 = phi i1 [ false, %286 ], [ %293, %289 ]
  %296 = add i64 %.14, 1
  br i1 %295, label %286, label %.loopexit.loopexit

; <label>:297:                                    ; preds = %279
  %298 = trunc i8 %.363 to i1
  %299 = icmp eq i32 %.112, 2
  %or.cond8 = and i1 %298, %299
  %300 = icmp ult i64 1, %284
  %or.cond21 = and i1 %or.cond8, %300
  br i1 %or.cond21, label %.lr.ph131.preheader, label %._crit_edge132

.lr.ph131.preheader:                              ; preds = %297
  br label %.lr.ph131

.lr.ph131:                                        ; preds = %.lr.ph131.preheader, %306
  %.01129 = phi i64 [ %307, %306 ], [ 1, %.lr.ph131.preheader ]
  call void @unroll_loop(i32 445)
  %301 = add i64 %.027, %.03
  %302 = add i64 %301, %.01129
  %303 = getelementptr inbounds i8, i8* %2, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = sext i8 %304 to i32
  switch i32 %305, label %306 [
    i32 91, label %.loopexit23
    i32 92, label %.loopexit23
    i32 94, label %.loopexit23
    i32 96, label %.loopexit23
    i32 124, label %.loopexit23
  ]

; <label>:306:                                    ; preds = %.lr.ph131
  %307 = add nuw i64 %.01129, 1
  %308 = icmp ult i64 %307, %284
  br i1 %308, label %.lr.ph131, label %._crit_edge132.loopexit

._crit_edge132.loopexit:                          ; preds = %306
  br label %._crit_edge132

._crit_edge132:                                   ; preds = %._crit_edge132.loopexit, %297
  %309 = load i32, i32* %11, align 4
  %310 = call i32 @iswprint(i32 %309) #8
  %311 = icmp ne i32 %310, 0
  %spec.select9 = select i1 %311, i8 %.02, i8 0
  %312 = add i64 %.03, %284
  %313 = call i32 @mbsinit(%struct.__mbstate_t* %10) #14
  %314 = icmp ne i32 %313, 0
  %315 = xor i1 %314, true
  br i1 %315, label %279, label %.loopexit.loopexit27

.loopexit.loopexit:                               ; preds = %294
  %.4.ph = phi i64 [ %.310, %294 ]
  %.36.ph = phi i64 [ %.14, %294 ]
  %.3.ph = phi i8 [ 0, %294 ]
  br label %.loopexit

.loopexit.loopexit27:                             ; preds = %._crit_edge132, %279
  %.4.ph28 = phi i64 [ %.310, %279 ], [ %.310, %._crit_edge132 ]
  %.36.ph29 = phi i64 [ %312, %._crit_edge132 ], [ %.03, %279 ]
  %.3.ph30 = phi i8 [ %spec.select9, %._crit_edge132 ], [ %.02, %279 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit27, %.loopexit.loopexit, %285, %262
  %.4 = phi i64 [ %.29, %262 ], [ %.310, %285 ], [ %.4.ph, %.loopexit.loopexit ], [ %.4.ph28, %.loopexit.loopexit27 ]
  %.36 = phi i64 [ 1, %262 ], [ %.03.lcssa, %285 ], [ %.36.ph, %.loopexit.loopexit ], [ %.36.ph29, %.loopexit.loopexit27 ]
  %.3 = phi i8 [ %272, %262 ], [ 0, %285 ], [ %.3.ph, %.loopexit.loopexit ], [ %.3.ph30, %.loopexit.loopexit27 ]
  %316 = icmp ult i64 1, %.36
  br i1 %316, label %321, label %317

; <label>:317:                                    ; preds = %.loopexit
  %318 = trunc i8 %.457 to i1
  br i1 %318, label %319, label %413

; <label>:319:                                    ; preds = %317
  %320 = trunc i8 %.3 to i1
  br i1 %320, label %413, label %321

; <label>:321:                                    ; preds = %319, %.loopexit
  %322 = add i64 %.027, %.36
  br label %323

; <label>:323:                                    ; preds = %408, %321
  %.482 = phi i8 [ %101, %321 ], [ %412, %408 ]
  %.468 = phi i8 [ %.064, %321 ], [ %.771, %408 ]
  %.13 = phi i64 [ %.541, %321 ], [ %409, %408 ]
  %.431 = phi i64 [ %.027, %321 ], [ %410, %408 ]
  %.120 = phi i8 [ %.019, %321 ], [ %.322, %408 ]
  %.115 = phi i8 [ 0, %321 ], [ %.216, %408 ]
  call void @unroll_loop(i32 446)
  %324 = trunc i8 %.457 to i1
  br i1 %324, label %325, label %378

; <label>:325:                                    ; preds = %323
  %326 = trunc i8 %.3 to i1
  br i1 %326, label %378, label %327

; <label>:327:                                    ; preds = %325
  %328 = trunc i8 %.363 to i1
  br i1 %328, label %.loopexit24, label %329

; <label>:329:                                    ; preds = %327
  %330 = icmp eq i32 %.112, 2
  br i1 %330, label %331, label %349

; <label>:331:                                    ; preds = %329
  %332 = trunc i8 %.468 to i1
  br i1 %332, label %349, label %333

; <label>:333:                                    ; preds = %331
  %334 = icmp ult i64 %.13, %1
  br i1 %334, label %335, label %337

; <label>:335:                                    ; preds = %333
  %336 = getelementptr inbounds i8, i8* %0, i64 %.13
  store i8 39, i8* %336, align 1
  br label %337

; <label>:337:                                    ; preds = %335, %333
  %338 = add i64 %.13, 1
  %339 = icmp ult i64 %338, %1
  br i1 %339, label %340, label %342

; <label>:340:                                    ; preds = %337
  %341 = getelementptr inbounds i8, i8* %0, i64 %338
  store i8 36, i8* %341, align 1
  br label %342

; <label>:342:                                    ; preds = %340, %337
  %343 = add i64 %338, 1
  %344 = icmp ult i64 %343, %1
  br i1 %344, label %345, label %347

; <label>:345:                                    ; preds = %342
  %346 = getelementptr inbounds i8, i8* %0, i64 %343
  store i8 39, i8* %346, align 1
  br label %347

; <label>:347:                                    ; preds = %345, %342
  %348 = add i64 %343, 1
  br label %349

; <label>:349:                                    ; preds = %329, %331, %347
  %.569 = phi i8 [ %.468, %331 ], [ 1, %347 ], [ %.468, %329 ]
  %.1446 = phi i64 [ %.13, %331 ], [ %348, %347 ], [ %.13, %329 ]
  %350 = icmp ult i64 %.1446, %1
  br i1 %350, label %351, label %353

; <label>:351:                                    ; preds = %349
  %352 = getelementptr inbounds i8, i8* %0, i64 %.1446
  store i8 92, i8* %352, align 1
  br label %353

; <label>:353:                                    ; preds = %351, %349
  %354 = add i64 %.1446, 1
  %355 = icmp ult i64 %354, %1
  br i1 %355, label %356, label %362

; <label>:356:                                    ; preds = %353
  %357 = zext i8 %.482 to i32
  %358 = ashr i32 %357, 6
  %359 = add nsw i32 48, %358
  %360 = trunc i32 %359 to i8
  %361 = getelementptr inbounds i8, i8* %0, i64 %354
  store i8 %360, i8* %361, align 1
  br label %362

; <label>:362:                                    ; preds = %356, %353
  %363 = add i64 %354, 1
  %364 = icmp ult i64 %363, %1
  br i1 %364, label %365, label %372

; <label>:365:                                    ; preds = %362
  %366 = zext i8 %.482 to i32
  %367 = ashr i32 %366, 3
  %368 = and i32 %367, 7
  %369 = add nsw i32 48, %368
  %370 = trunc i32 %369 to i8
  %371 = getelementptr inbounds i8, i8* %0, i64 %363
  store i8 %370, i8* %371, align 1
  br label %372

; <label>:372:                                    ; preds = %365, %362
  %373 = add i64 %363, 1
  %374 = zext i8 %.482 to i32
  %375 = and i32 %374, 7
  %376 = add nsw i32 48, %375
  %377 = trunc i32 %376 to i8
  br label %386

; <label>:378:                                    ; preds = %325, %323
  %379 = trunc i8 %.120 to i1
  br i1 %379, label %380, label %386

; <label>:380:                                    ; preds = %378
  %381 = icmp ult i64 %.13, %1
  br i1 %381, label %382, label %384

; <label>:382:                                    ; preds = %380
  %383 = getelementptr inbounds i8, i8* %0, i64 %.13
  store i8 92, i8* %383, align 1
  br label %384

; <label>:384:                                    ; preds = %382, %380
  %385 = add i64 %.13, 1
  br label %386

; <label>:386:                                    ; preds = %378, %384, %372
  %.583 = phi i8 [ %377, %372 ], [ %.482, %384 ], [ %.482, %378 ]
  %.670 = phi i8 [ %.569, %372 ], [ %.468, %384 ], [ %.468, %378 ]
  %.16 = phi i64 [ %373, %372 ], [ %385, %384 ], [ %.13, %378 ]
  %.322 = phi i8 [ %.120, %372 ], [ 0, %384 ], [ %.120, %378 ]
  %.216 = phi i8 [ 1, %372 ], [ %.115, %384 ], [ %.115, %378 ]
  %387 = add i64 %.431, 1
  %388 = icmp ule i64 %322, %387
  br i1 %388, label %.loopexit26, label %389

; <label>:389:                                    ; preds = %386
  %390 = trunc i8 %.670 to i1
  br i1 %390, label %391, label %404

; <label>:391:                                    ; preds = %389
  %392 = trunc i8 %.216 to i1
  br i1 %392, label %404, label %393

; <label>:393:                                    ; preds = %391
  %394 = icmp ult i64 %.16, %1
  br i1 %394, label %395, label %397

; <label>:395:                                    ; preds = %393
  %396 = getelementptr inbounds i8, i8* %0, i64 %.16
  store i8 39, i8* %396, align 1
  br label %397

; <label>:397:                                    ; preds = %395, %393
  %398 = add i64 %.16, 1
  %399 = icmp ult i64 %398, %1
  br i1 %399, label %400, label %402

; <label>:400:                                    ; preds = %397
  %401 = getelementptr inbounds i8, i8* %0, i64 %398
  store i8 39, i8* %401, align 1
  br label %402

; <label>:402:                                    ; preds = %400, %397
  %403 = add i64 %398, 1
  br label %404

; <label>:404:                                    ; preds = %402, %391, %389
  %.771 = phi i8 [ %.670, %391 ], [ 0, %402 ], [ %.670, %389 ]
  %.17 = phi i64 [ %.16, %391 ], [ %403, %402 ], [ %.16, %389 ]
  %405 = icmp ult i64 %.17, %1
  br i1 %405, label %406, label %408

; <label>:406:                                    ; preds = %404
  %407 = getelementptr inbounds i8, i8* %0, i64 %.17
  store i8 %.583, i8* %407, align 1
  br label %408

; <label>:408:                                    ; preds = %406, %404
  %409 = add i64 %.17, 1
  %410 = add i64 %.431, 1
  %411 = getelementptr inbounds i8, i8* %2, i64 %410
  %412 = load i8, i8* %411, align 1
  br label %323

; <label>:413:                                    ; preds = %236, %229, %317, %319, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %99, %240, %258, %237, %238, %228, %226, %163, %206, %176, %170, %165, %162, %157, %142, %136, %131, %159
  %.684 = phi i8 [ 48, %157 ], [ 48, %142 ], [ 48, %136 ], [ 48, %131 ], [ %101, %159 ], [ %101, %163 ], [ %101, %170 ], [ %101, %165 ], [ %186, %206 ], [ %101, %176 ], [ %101, %162 ], [ %101, %226 ], [ %101, %228 ], [ %101, %229 ], [ %101, %236 ], [ %101, %238 ], [ %101, %237 ], [ %101, %258 ], [ %101, %240 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %99 ], [ %101, %319 ], [ %101, %317 ]
  %.872 = phi i8 [ %.165, %157 ], [ %.165, %142 ], [ %.165, %136 ], [ %.165, %131 ], [ %.064, %159 ], [ %.064, %162 ], [ %.064, %165 ], [ %.064, %170 ], [ %.064, %176 ], [ %.064, %206 ], [ %.064, %163 ], [ %.064, %226 ], [ %.064, %228 ], [ %.064, %229 ], [ %.064, %236 ], [ %.064, %238 ], [ %.064, %237 ], [ 0, %258 ], [ %.064, %240 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %99 ], [ %.064, %319 ], [ %.064, %317 ]
  %.1847 = phi i64 [ %158, %157 ], [ %132, %142 ], [ %132, %136 ], [ %132, %131 ], [ %.541, %159 ], [ %.541, %163 ], [ %.541, %170 ], [ %.541, %165 ], [ %207, %206 ], [ %.541, %176 ], [ %.541, %162 ], [ %.541, %226 ], [ %.541, %228 ], [ %.541, %229 ], [ %.541, %236 ], [ %.541, %238 ], [ %.541, %237 ], [ %259, %258 ], [ %.541, %240 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %99 ], [ %.541, %319 ], [ %.541, %317 ]
  %.532 = phi i64 [ %.027, %159 ], [ %.027, %131 ], [ %.027, %136 ], [ %.027, %142 ], [ %.027, %157 ], [ %.027, %163 ], [ %.027, %170 ], [ %.027, %165 ], [ %187, %206 ], [ %.027, %176 ], [ %.027, %162 ], [ %.027, %226 ], [ %.027, %228 ], [ %.027, %229 ], [ %.027, %236 ], [ %.027, %238 ], [ %.027, %237 ], [ %.027, %258 ], [ %.027, %240 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %99 ], [ %.027, %319 ], [ %.027, %317 ]
  %.317 = phi i8 [ 1, %157 ], [ 1, %142 ], [ 1, %136 ], [ 1, %131 ], [ 0, %159 ], [ 0, %162 ], [ 0, %165 ], [ 0, %170 ], [ 0, %176 ], [ 0, %206 ], [ 0, %163 ], [ 0, %226 ], [ 0, %228 ], [ 0, %229 ], [ 0, %236 ], [ 0, %238 ], [ 0, %237 ], [ 0, %258 ], [ 0, %240 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %99 ], [ 0, %319 ], [ 0, %317 ]
  %.5 = phi i64 [ %.29, %159 ], [ %.29, %131 ], [ %.29, %136 ], [ %.29, %142 ], [ %.29, %157 ], [ %.29, %162 ], [ %.29, %165 ], [ %.29, %170 ], [ %.29, %176 ], [ %.29, %206 ], [ %.29, %163 ], [ %.29, %226 ], [ %.29, %228 ], [ %.29, %229 ], [ %.29, %236 ], [ %.29, %238 ], [ %.29, %237 ], [ %.29, %258 ], [ %.29, %240 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.29, %99 ], [ %.4, %319 ], [ %.4, %317 ]
  %414 = trunc i8 %.457 to i1
  %415 = icmp ne i32 %.112, 2
  %or.cond10 = and i1 %414, %415
  br i1 %or.cond10, label %419, label %416

; <label>:416:                                    ; preds = %413
  %417 = trunc i8 %.363 to i1
  %418 = icmp ne i32* %6, null
  %or.cond11 = and i1 %417, %418
  br i1 %or.cond11, label %420, label %431

; <label>:419:                                    ; preds = %413
  %.old = icmp ne i32* %6, null
  br i1 %.old, label %420, label %431

; <label>:420:                                    ; preds = %416, %419
  %421 = zext i8 %.684 to i64
  %422 = udiv i64 %421, 32
  %423 = getelementptr inbounds i32, i32* %6, i64 %422
  %424 = load i32, i32* %423, align 4
  %425 = zext i8 %.684 to i64
  %426 = urem i64 %425, 32
  %427 = trunc i64 %426 to i32
  %428 = lshr i32 %424, %427
  %429 = and i32 %428, 1
  %430 = icmp ne i32 %429, 0
  br i1 %430, label %433, label %431

; <label>:431:                                    ; preds = %420, %419, %416
  %432 = trunc i8 %.019 to i1
  br i1 %432, label %433, label %461

; <label>:433:                                    ; preds = %226, %431, %420
  %.785 = phi i8 [ %.159, %226 ], [ %.684, %431 ], [ %.684, %420 ]
  %.973 = phi i8 [ %.064, %226 ], [ %.872, %431 ], [ %.872, %420 ]
  %.19 = phi i64 [ %.541, %226 ], [ %.1847, %431 ], [ %.1847, %420 ]
  %.633 = phi i64 [ %.027, %226 ], [ %.532, %431 ], [ %.532, %420 ]
  %.6 = phi i64 [ %.29, %226 ], [ %.5, %431 ], [ %.5, %420 ]
  %434 = trunc i8 %.363 to i1
  br i1 %434, label %.loopexit31, label %435

; <label>:435:                                    ; preds = %433
  %436 = icmp eq i32 %.112, 2
  br i1 %436, label %437, label %455

; <label>:437:                                    ; preds = %435
  %438 = trunc i8 %.973 to i1
  br i1 %438, label %455, label %439

; <label>:439:                                    ; preds = %437
  %440 = icmp ult i64 %.19, %1
  br i1 %440, label %441, label %443

; <label>:441:                                    ; preds = %439
  %442 = getelementptr inbounds i8, i8* %0, i64 %.19
  store i8 39, i8* %442, align 1
  br label %443

; <label>:443:                                    ; preds = %441, %439
  %444 = add i64 %.19, 1
  %445 = icmp ult i64 %444, %1
  br i1 %445, label %446, label %448

; <label>:446:                                    ; preds = %443
  %447 = getelementptr inbounds i8, i8* %0, i64 %444
  store i8 36, i8* %447, align 1
  br label %448

; <label>:448:                                    ; preds = %446, %443
  %449 = add i64 %444, 1
  %450 = icmp ult i64 %449, %1
  br i1 %450, label %451, label %453

; <label>:451:                                    ; preds = %448
  %452 = getelementptr inbounds i8, i8* %0, i64 %449
  store i8 39, i8* %452, align 1
  br label %453

; <label>:453:                                    ; preds = %451, %448
  %454 = add i64 %449, 1
  br label %455

; <label>:455:                                    ; preds = %435, %437, %453
  %.1074 = phi i8 [ %.973, %437 ], [ 1, %453 ], [ %.973, %435 ]
  %.20 = phi i64 [ %.19, %437 ], [ %454, %453 ], [ %.19, %435 ]
  %456 = icmp ult i64 %.20, %1
  br i1 %456, label %457, label %459

; <label>:457:                                    ; preds = %455
  %458 = getelementptr inbounds i8, i8* %0, i64 %.20
  store i8 92, i8* %458, align 1
  br label %459

; <label>:459:                                    ; preds = %457, %455
  %460 = add i64 %.20, 1
  br label %461

.loopexit26:                                      ; preds = %386
  %.886.ph = phi i8 [ %.583, %386 ]
  %.1175.ph = phi i8 [ %.670, %386 ]
  %.21.ph = phi i64 [ %.16, %386 ]
  %.734.ph = phi i64 [ %.431, %386 ]
  %.418.ph = phi i8 [ %.216, %386 ]
  %.7.ph = phi i64 [ %.4, %386 ]
  br label %461

; <label>:461:                                    ; preds = %.loopexit26, %459, %215, %219, %431
  %.886 = phi i8 [ %.785, %459 ], [ %101, %215 ], [ %101, %219 ], [ %.684, %431 ], [ %.886.ph, %.loopexit26 ]
  %.1175 = phi i8 [ %.1074, %459 ], [ %.064, %215 ], [ %.064, %219 ], [ %.872, %431 ], [ %.1175.ph, %.loopexit26 ]
  %.21 = phi i64 [ %460, %459 ], [ %.541, %215 ], [ %.541, %219 ], [ %.1847, %431 ], [ %.21.ph, %.loopexit26 ]
  %.734 = phi i64 [ %.633, %459 ], [ %.027, %215 ], [ %.027, %219 ], [ %.532, %431 ], [ %.734.ph, %.loopexit26 ]
  %.418 = phi i8 [ 1, %459 ], [ 0, %215 ], [ 0, %219 ], [ %.317, %431 ], [ %.418.ph, %.loopexit26 ]
  %.7 = phi i64 [ %.6, %459 ], [ %.29, %215 ], [ %.29, %219 ], [ %.5, %431 ], [ %.7.ph, %.loopexit26 ]
  %462 = trunc i8 %.1175 to i1
  br i1 %462, label %463, label %476

; <label>:463:                                    ; preds = %461
  %464 = trunc i8 %.418 to i1
  br i1 %464, label %476, label %465

; <label>:465:                                    ; preds = %463
  %466 = icmp ult i64 %.21, %1
  br i1 %466, label %467, label %469

; <label>:467:                                    ; preds = %465
  %468 = getelementptr inbounds i8, i8* %0, i64 %.21
  store i8 39, i8* %468, align 1
  br label %469

; <label>:469:                                    ; preds = %467, %465
  %470 = add i64 %.21, 1
  %471 = icmp ult i64 %470, %1
  br i1 %471, label %472, label %474

; <label>:472:                                    ; preds = %469
  %473 = getelementptr inbounds i8, i8* %0, i64 %470
  store i8 39, i8* %473, align 1
  br label %474

; <label>:474:                                    ; preds = %472, %469
  %475 = add i64 %470, 1
  br label %476

; <label>:476:                                    ; preds = %474, %463, %461
  %.1276 = phi i8 [ %.1175, %463 ], [ 0, %474 ], [ %.1175, %461 ]
  %.22 = phi i64 [ %.21, %463 ], [ %475, %474 ], [ %.21, %461 ]
  %477 = icmp ult i64 %.22, %1
  br i1 %477, label %478, label %480

; <label>:478:                                    ; preds = %476
  %479 = getelementptr inbounds i8, i8* %0, i64 %.22
  store i8 %.886, i8* %479, align 1
  br label %480

; <label>:480:                                    ; preds = %478, %476
  %481 = add i64 %.22, 1
  br label %482

; <label>:482:                                    ; preds = %159, %480
  %.1377 = phi i8 [ %.1276, %480 ], [ %.064, %159 ]
  %.23 = phi i64 [ %481, %480 ], [ %.541, %159 ]
  %.835 = phi i64 [ %.734, %480 ], [ %.027, %159 ]
  %.8 = phi i64 [ %.7, %480 ], [ %.29, %159 ]
  %483 = add i64 %.835, 1
  br label %66

; <label>:484:                                    ; preds = %77
  %.541.lcssa = phi i64 [ %.541, %77 ]
  %.07.lcssa = phi i64 [ %.07, %77 ]
  %485 = icmp eq i64 %.541.lcssa, 0
  %486 = icmp eq i32 %.112, 2
  %or.cond13 = and i1 %485, %486
  br i1 %or.cond13, label %487, label %489

; <label>:487:                                    ; preds = %484
  %488 = trunc i8 %.363 to i1
  br i1 %488, label %508, label %489

; <label>:489:                                    ; preds = %487, %484
  %490 = icmp ne i8* %.150, null
  br i1 %490, label %491, label %._crit_edge

; <label>:491:                                    ; preds = %489
  %492 = trunc i8 %.363 to i1
  br i1 %492, label %._crit_edge, label %493

; <label>:493:                                    ; preds = %491
  %494 = load i8, i8* %.150, align 1
  %495 = icmp ne i8 %494, 0
  br i1 %495, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %493
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %500
  %.24128 = phi i64 [ %501, %500 ], [ %.541.lcssa, %.lr.ph.preheader ]
  %.251127 = phi i8* [ %502, %500 ], [ %.150, %.lr.ph.preheader ]
  call void @unroll_loop(i32 447)
  %496 = icmp ult i64 %.24128, %1
  br i1 %496, label %497, label %500

; <label>:497:                                    ; preds = %.lr.ph
  %498 = load i8, i8* %.251127, align 1
  %499 = getelementptr inbounds i8, i8* %0, i64 %.24128
  store i8 %498, i8* %499, align 1
  br label %500

; <label>:500:                                    ; preds = %497, %.lr.ph
  %501 = add i64 %.24128, 1
  %502 = getelementptr inbounds i8, i8* %.251127, i32 1
  %503 = load i8, i8* %502, align 1
  %504 = icmp ne i8 %503, 0
  br i1 %504, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %500
  %.2548.ph = phi i64 [ %501, %500 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %493, %491, %489
  %.2548 = phi i64 [ %.541.lcssa, %491 ], [ %.541.lcssa, %489 ], [ %.541.lcssa, %493 ], [ %.2548.ph, %._crit_edge.loopexit ]
  %505 = icmp ult i64 %.2548, %1
  br i1 %505, label %506, label %513

; <label>:506:                                    ; preds = %._crit_edge
  %507 = getelementptr inbounds i8, i8* %0, i64 %.2548
  store i8 0, i8* %507, align 1
  br label %513

.loopexit23:                                      ; preds = %.lr.ph131, %.lr.ph131, %.lr.ph131, %.lr.ph131, %.lr.ph131
  %.9.ph = phi i64 [ %.310, %.lr.ph131 ], [ %.310, %.lr.ph131 ], [ %.310, %.lr.ph131 ], [ %.310, %.lr.ph131 ], [ %.310, %.lr.ph131 ]
  br label %508

.loopexit24:                                      ; preds = %327
  %.9.ph25 = phi i64 [ %.4, %327 ]
  br label %508

.loopexit31:                                      ; preds = %97, %105, %163, %181, %215, %224, %238, %242, %433
  %.9.ph32 = phi i64 [ %.6, %433 ], [ %.29, %242 ], [ %.29, %238 ], [ %.29, %224 ], [ %.29, %215 ], [ %.29, %181 ], [ %.29, %163 ], [ %.29, %105 ], [ %.18, %97 ]
  br label %508

; <label>:508:                                    ; preds = %.loopexit31, %.loopexit24, %.loopexit23, %487
  %.9 = phi i64 [ %.07.lcssa, %487 ], [ %.9.ph, %.loopexit23 ], [ %.9.ph25, %.loopexit24 ], [ %.9.ph32, %.loopexit31 ]
  %509 = icmp eq i32 %.112, 2
  %510 = trunc i8 %.457 to i1
  %spec.select14 = select i1 %510, i32 4, i32 %.112
  %.213 = select i1 %509, i32 %spec.select14, i32 %.112
  %511 = and i32 %5, -3
  %512 = call i64 @quotearg_buffer_restyled(i8* %0, i64 %1, i8* %2, i64 %.9, i32 %.213, i32 %511, i32* null, i8* %.124, i8* %.126)
  br label %513

; <label>:513:                                    ; preds = %._crit_edge, %506, %508
  %.0 = phi i64 [ %512, %508 ], [ %.2548, %506 ], [ %.2548, %._crit_edge ]
  ret i64 %.0
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @gettext_quote(i8*, i32) #0 {
  %3 = call i8* @gettext(i8* %0) #8
  %4 = icmp ne i8* %3, %0
  br i1 %4, label %38, label %5

; <label>:5:                                      ; preds = %2
  %6 = call i8* @locale_charset()
  %7 = getelementptr [6 x i8], [6 x i8]* @.str.13.1845, i32 0, i32 0
  %8 = call i32 @c_strcasecmp(i8* %6, i8* %7) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %19

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds i8, i8* %0, i64 0
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp eq i32 %13, 96
  %15 = zext i1 %14 to i64
  %16 = getelementptr [4 x i8], [4 x i8]* @.str.14.1846, i32 0, i32 0
  %17 = getelementptr [4 x i8], [4 x i8]* @.str.15.1847, i32 0, i32 0
  %18 = select i1 %14, i8* %16, i8* %17
  br label %38

; <label>:19:                                     ; preds = %5
  %20 = getelementptr [8 x i8], [8 x i8]* @.str.16.1848, i32 0, i32 0
  %21 = call i32 @c_strcasecmp(i8* %6, i8* %20) #14
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %32

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds i8, i8* %0, i64 0
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 96
  %28 = zext i1 %27 to i64
  %29 = getelementptr [4 x i8], [4 x i8]* @.str.17.1849, i32 0, i32 0
  %30 = getelementptr [3 x i8], [3 x i8]* @.str.18.1850, i32 0, i32 0
  %31 = select i1 %27, i8* %29, i8* %30
  br label %38

; <label>:32:                                     ; preds = %19
  %33 = icmp eq i32 %1, 9
  %34 = zext i1 %33 to i64
  %35 = getelementptr [2 x i8], [2 x i8]* @.str.10.1842, i32 0, i32 0
  %36 = getelementptr [2 x i8], [2 x i8]* @.str.12.1844, i32 0, i32 0
  %37 = select i1 %33, i8* %35, i8* %36
  br label %38

; <label>:38:                                     ; preds = %2, %32, %23, %10
  %.0 = phi i8* [ %18, %10 ], [ %31, %23 ], [ %37, %32 ], [ %3, %2 ]
  ret i8* %.0
}

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_alloc(i8*, i64, %struct.quoting_options*) #0 {
  %4 = call i8* @quotearg_alloc_mem(i8* %0, i64 %1, i64* null, %struct.quoting_options* %2)
  ret i8* %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_alloc_mem(i8*, i64, i64*, %struct.quoting_options*) #0 {
  %5 = icmp ne %struct.quoting_options* %3, null
  %.default_quoting_options = select i1 %5, %struct.quoting_options* %3, %struct.quoting_options* @default_quoting_options
  %6 = call i32* @__errno_location() #15
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i64* %2, null
  %11 = zext i1 %10 to i64
  %12 = select i1 %10, i32 0, i32 1
  %13 = or i32 %9, %12
  %14 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 2
  %17 = getelementptr inbounds [8 x i32], [8 x i32]* %16, i32 0, i32 0
  %18 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 4
  %21 = load i8*, i8** %20, align 8
  %22 = call i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %0, i64 %1, i32 %15, i32 %13, i32* %17, i8* %19, i8* %21)
  %23 = add i64 %22, 1
  %24 = call noalias i8* @xcharalloc(i64 %23)
  %25 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 2
  %28 = getelementptr inbounds [8 x i32], [8 x i32]* %27, i32 0, i32 0
  %29 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 3
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %.default_quoting_options, i32 0, i32 4
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @quotearg_buffer_restyled(i8* %24, i64 %23, i8* %0, i64 %1, i32 %26, i32 %13, i32* %28, i8* %30, i8* %32)
  %34 = call i32* @__errno_location() #15
  store i32 %7, i32* %34, align 4
  %35 = icmp ne i64* %2, null
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %4
  %37 = sub i64 %23, 1
  store i64 %37, i64* %2, align 8
  br label %38

; <label>:38:                                     ; preds = %36, %4
  ret i8* %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @quotearg_free() #0 {
  %1 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8
  %2 = load i32, i32* @nslots, align 4
  %3 = icmp ult i32 1, %2
  br i1 %3, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 448)
  %4 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %1, i64 %indvars.iv
  %5 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %4, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  call void @free(i8* %6) #8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %7 = load i32, i32* @nslots, align 4
  %8 = zext i32 %7 to i64
  %9 = icmp ult i64 %indvars.iv.next, %8
  br i1 %9, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %10 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %1, i64 0
  %11 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr [256 x i8], [256 x i8]* @slot0, i32 0, i32 0
  %14 = icmp ne i8* %12, %13
  br i1 %14, label %15, label %22

; <label>:15:                                     ; preds = %._crit_edge
  %16 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %1, i64 0
  %17 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %16, i32 0, i32 1
  %18 = load i8*, i8** %17, align 8
  call void @free(i8* %18) #8
  %19 = getelementptr %struct.slotvec, %struct.slotvec* @slotvec0, i32 0, i32 0
  store i64 256, i64* %19, align 8
  %20 = getelementptr [256 x i8], [256 x i8]* @slot0, i32 0, i32 0
  %21 = getelementptr %struct.slotvec, %struct.slotvec* @slotvec0, i32 0, i32 1
  store i8* %20, i8** %21, align 8
  br label %22

; <label>:22:                                     ; preds = %15, %._crit_edge
  %23 = icmp ne %struct.slotvec* %1, @slotvec0
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %22
  %25 = bitcast %struct.slotvec* %1 to i8*
  call void @free(i8* %25) #8
  store %struct.slotvec* @slotvec0, %struct.slotvec** @slotvec, align 8
  br label %26

; <label>:26:                                     ; preds = %24, %22
  store i32 1, i32* @nslots, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_n(i32, i8*) #0 {
  %3 = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* @default_quoting_options)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #0 {
  %5 = call i32* @__errno_location() #15
  %6 = load i32, i32* %5, align 4
  %7 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8
  %8 = icmp slt i32 %0, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %4
  call void @abort() #16
  unreachable

; <label>:10:                                     ; preds = %4
  %11 = load i32, i32* @nslots, align 4
  %12 = icmp ule i32 %11, %0
  br i1 %12, label %13, label %43

; <label>:13:                                     ; preds = %10
  %14 = add i32 %0, 1
  %15 = zext i32 %14 to i64
  %16 = icmp eq %struct.slotvec* %7, @slotvec0
  %17 = zext i1 %16 to i8
  %18 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %15, i64 16)
  %19 = extractvalue { i64, i1 } %18, 1
  %20 = extractvalue { i64, i1 } %18, 0
  %21 = zext i1 %19 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %13
  call void @xalloc_die() #17
  unreachable

; <label>:24:                                     ; preds = %13
  %25 = trunc i8 %17 to i1
  %. = select i1 %25, %struct.slotvec* null, %struct.slotvec* %7
  %26 = bitcast %struct.slotvec* %. to i8*
  %27 = mul i64 %15, 16
  %28 = call i8* @xrealloc(i8* %26, i64 %27)
  %29 = bitcast i8* %28 to %struct.slotvec*
  store %struct.slotvec* %29, %struct.slotvec** @slotvec, align 8
  %30 = trunc i8 %17 to i1
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %24
  %32 = bitcast %struct.slotvec* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !track !885
  br label %33

; <label>:33:                                     ; preds = %31, %24
  %34 = load i32, i32* @nslots, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %29, i64 %35
  %37 = bitcast %struct.slotvec* %36 to i8*
  %38 = load i32, i32* @nslots, align 4
  %39 = zext i32 %38 to i64
  %40 = sub i64 %15, %39
  %41 = mul i64 %40, 16
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 %41, i1 false)
  %42 = trunc i64 %15 to i32
  store i32 %42, i32* @nslots, align 4
  br label %43

; <label>:43:                                     ; preds = %33, %10
  %.01 = phi %struct.slotvec* [ %29, %33 ], [ %7, %10 ]
  %44 = sext i32 %0 to i64
  %45 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %.01, i64 %44
  %46 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = sext i32 %0 to i64
  %49 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %.01, i64 %48
  %50 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %49, i32 0, i32 1
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = or i32 %53, 1
  %55 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 2
  %58 = getelementptr inbounds [8 x i32], [8 x i32]* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 3
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 4
  %62 = load i8*, i8** %61, align 8
  %63 = call i64 @quotearg_buffer_restyled(i8* %51, i64 %47, i8* %1, i64 %2, i32 %56, i32 %54, i32* %58, i8* %60, i8* %62)
  %64 = icmp ule i64 %47, %63
  br i1 %64, label %65, label %87

; <label>:65:                                     ; preds = %43
  %66 = add i64 %63, 1
  %67 = sext i32 %0 to i64
  %68 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %.01, i64 %67
  %69 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %68, i32 0, i32 0
  store i64 %66, i64* %69, align 8
  %70 = getelementptr [256 x i8], [256 x i8]* @slot0, i32 0, i32 0
  %71 = icmp ne i8* %51, %70
  br i1 %71, label %72, label %73

; <label>:72:                                     ; preds = %65
  call void @free(i8* %51) #8
  br label %73

; <label>:73:                                     ; preds = %72, %65
  %74 = call noalias i8* @xcharalloc(i64 %66)
  %75 = sext i32 %0 to i64
  %76 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %.01, i64 %75
  %77 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %76, i32 0, i32 1
  store i8* %74, i8** %77, align 8
  %78 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 2
  %81 = getelementptr inbounds [8 x i32], [8 x i32]* %80, i32 0, i32 0
  %82 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 3
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 4
  %85 = load i8*, i8** %84, align 8
  %86 = call i64 @quotearg_buffer_restyled(i8* %74, i64 %66, i8* %1, i64 %2, i32 %79, i32 %54, i32* %81, i8* %83, i8* %85)
  br label %87

; <label>:87:                                     ; preds = %73, %43
  %.0 = phi i8* [ %74, %73 ], [ %51, %43 ]
  %88 = call i32* @__errno_location() #15
  store i32 %6, i32* %88, align 4
  ret i8* %.0
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #13

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_n_mem(i32, i8*, i64) #0 {
  %4 = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @default_quoting_options)
  ret i8* %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg(i8*) #0 {
  %2 = call i8* @quotearg_n(i32 0, i8* %0)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_mem(i8*, i64) #0 {
  %3 = call i8* @quotearg_n_mem(i32 0, i8* %0, i64 %1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_n_style(i32, i32, i8*) #0 {
  %4 = alloca %struct.quoting_options, align 8, !track !886
  call void @quoting_options_from_style(%struct.quoting_options* sret %4, i32 %1)
  %5 = call i8* @quotearg_n_options(i32 %0, i8* %2, i64 -1, %struct.quoting_options* %4)
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #0 {
  %3 = bitcast %struct.quoting_options* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 56, i1 false)
  %4 = icmp eq i32 %1, 10
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %2
  call void @abort() #16
  unreachable

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0
  store i32 %1, i32* %7, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_n_style_mem(i32, i32, i8*, i64) #0 {
  %5 = alloca %struct.quoting_options, align 8, !track !887
  call void @quoting_options_from_style(%struct.quoting_options* sret %5, i32 %1)
  %6 = call i8* @quotearg_n_options(i32 %0, i8* %2, i64 %3, %struct.quoting_options* %5)
  ret i8* %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_style(i32, i8*) #0 {
  %3 = call i8* @quotearg_n_style(i32 0, i32 %0, i8* %1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_style_mem(i32, i8*, i64) #0 {
  %4 = call i8* @quotearg_n_style_mem(i32 0, i32 %0, i8* %1, i64 %2)
  ret i8* %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_char_mem(i8*, i64, i8 signext) #0 {
  %4 = alloca %struct.quoting_options, align 8, !track !888
  %5 = bitcast %struct.quoting_options* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !track !889
  %6 = call i32 @set_char_quoting(%struct.quoting_options* %4, i8 signext %2, i32 1)
  %7 = call i8* @quotearg_n_options(i32 0, i8* %0, i64 %1, %struct.quoting_options* %4)
  ret i8* %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_char(i8*, i8 signext) #0 {
  %3 = call i8* @quotearg_char_mem(i8* %0, i64 -1, i8 signext %1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_colon(i8*) #0 {
  %2 = call i8* @quotearg_char(i8* %0, i8 signext 58)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_colon_mem(i8*, i64) #0 {
  %3 = call i8* @quotearg_char_mem(i8* %0, i64 %1, i8 signext 58)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_n_style_colon(i32, i32, i8*) #0 {
  %4 = alloca %struct.quoting_options, align 8, !track !890
  %5 = alloca %struct.quoting_options, align 8, !track !891
  call void @quoting_options_from_style(%struct.quoting_options* sret %5, i32 %1)
  %6 = bitcast %struct.quoting_options* %4 to i8*
  %7 = bitcast %struct.quoting_options* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 56, i1 false), !track !892
  %8 = call i32 @set_char_quoting(%struct.quoting_options* %4, i8 signext 58, i32 1)
  %9 = call i8* @quotearg_n_options(i32 %0, i8* %2, i64 -1, %struct.quoting_options* %4)
  ret i8* %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_n_custom(i32, i8*, i8*, i8*) #0 {
  %5 = call i8* @quotearg_n_custom_mem(i32 %0, i8* %1, i8* %2, i8* %3, i64 -1)
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_n_custom_mem(i32, i8*, i8*, i8*, i64) #0 {
  %6 = alloca %struct.quoting_options, align 8, !track !893
  %7 = bitcast %struct.quoting_options* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !track !894
  call void @set_custom_quoting(%struct.quoting_options* %6, i8* %1, i8* %2)
  %8 = call i8* @quotearg_n_options(i32 %0, i8* %3, i64 %4, %struct.quoting_options* %6)
  ret i8* %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_custom(i8*, i8*, i8*) #0 {
  %4 = call i8* @quotearg_n_custom(i32 0, i8* %0, i8* %1, i8* %2)
  ret i8* %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quotearg_custom_mem(i8*, i8*, i8*, i64) #0 {
  %5 = call i8* @quotearg_n_custom_mem(i32 0, i8* %0, i8* %1, i8* %2, i64 %3)
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quote_n_mem(i32, i8*, i64) #0 {
  %4 = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @quote_quoting_options)
  ret i8* %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quote_mem(i8*, i64) #0 {
  %3 = call i8* @quote_n_mem(i32 0, i8* %0, i64 %1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quote_n(i32, i8*) #0 {
  %3 = call i8* @quote_n_mem(i32 %0, i8* %1, i64 -1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @quote(i8*) #0 {
  %2 = call i8* @quote_n(i32 0, i8* %0)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @path_search(i8*, i64, i8*, i8*, i1 zeroext) #0 {
  %6 = zext i1 %4 to i8
  %7 = icmp ne i8* %3, null
  br i1 %7, label %8, label %12

; <label>:8:                                      ; preds = %5
  %9 = getelementptr inbounds i8, i8* %3, i64 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %14, label %12

; <label>:12:                                     ; preds = %8, %5
  %13 = getelementptr [5 x i8], [5 x i8]* @.str.1861, i32 0, i32 0
  br label %17

; <label>:14:                                     ; preds = %8
  %15 = call i64 @strlen(i8* %3) #14
  %16 = icmp ugt i64 %15, 5
  %spec.select = select i1 %16, i64 5, i64 %15
  br label %17

; <label>:17:                                     ; preds = %14, %12
  %.02 = phi i8* [ %3, %14 ], [ %13, %12 ]
  %.1 = phi i64 [ %spec.select, %14 ], [ 4, %12 ]
  %18 = trunc i8 %6 to i1
  br i1 %18, label %19, label %30

; <label>:19:                                     ; preds = %17
  %20 = getelementptr [7 x i8], [7 x i8]* @.str.1.1862, i32 0, i32 0
  %21 = call i8* @secure_getenv(i8* %20) #8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %19
  %24 = call zeroext i1 @direxists(i8* %21)
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %23, %19
  %26 = icmp ne i8* %2, null
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %25
  %28 = call zeroext i1 @direxists(i8* %2)
  br i1 %28, label %30, label %29

; <label>:29:                                     ; preds = %27, %25
  br label %30

; <label>:30:                                     ; preds = %23, %27, %29, %17
  %.2 = phi i8* [ %2, %17 ], [ %21, %23 ], [ null, %29 ], [ %2, %27 ]
  %31 = icmp eq i8* %.2, null
  br i1 %31, label %32, label %39

; <label>:32:                                     ; preds = %30
  %33 = getelementptr [5 x i8], [5 x i8]* @.str.2.1863, i32 0, i32 0
  %34 = call zeroext i1 @direxists(i8* %33)
  br i1 %34, label %37, label %35

; <label>:35:                                     ; preds = %32
  %36 = call i32* @__errno_location() #15
  store i32 2, i32* %36, align 4
  br label %70

; <label>:37:                                     ; preds = %32
  %38 = getelementptr [5 x i8], [5 x i8]* @.str.2.1863, i32 0, i32 0
  br label %39

; <label>:39:                                     ; preds = %37, %30
  %.3 = phi i8* [ %38, %37 ], [ %.2, %30 ]
  %40 = call i64 @strlen(i8* %.3) #14
  %41 = icmp ne i64 %40, 0
  br i1 %41, label %42, label %49

; <label>:42:                                     ; preds = %39
  %43 = sub i64 %40, 1
  %44 = getelementptr inbounds i8, i8* %.3, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %46, 47
  %48 = xor i1 %47, true
  br label %49

; <label>:49:                                     ; preds = %42, %39
  %50 = phi i1 [ false, %39 ], [ %48, %42 ]
  %51 = zext i1 %50 to i8
  %52 = trunc i8 %51 to i1
  %53 = zext i1 %52 to i64
  %54 = add i64 %40, %53
  %55 = add i64 %54, %.1
  %56 = add i64 %55, 6
  %57 = add i64 %56, 1
  %58 = icmp ult i64 %1, %57
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %49
  %60 = call i32* @__errno_location() #15
  store i32 22, i32* %60, align 4
  br label %70

; <label>:61:                                     ; preds = %49
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %.3, i64 %40, i1 false), !track !895
  %62 = getelementptr inbounds i8, i8* %0, i64 %40
  %63 = trunc i8 %51 to i1
  %64 = xor i1 %63, true
  %65 = zext i1 %64 to i32
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [12 x i8], [12 x i8]* @.str.3.1864, i64 0, i64 %66
  %68 = trunc i64 %.1 to i32
  %69 = call i32 (i8*, i8*, ...) @sprintf(i8* %62, i8* %67, i32 %68, i8* %.02) #8
  br label %70

; <label>:70:                                     ; preds = %61, %59, %35
  %.0 = phi i32 [ -1, %59 ], [ 0, %61 ], [ -1, %35 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i8* @secure_getenv(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @direxists(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !896
  %3 = call i32 @stat(i8* %0, %struct.stat* %2) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 61440
  %9 = icmp eq i32 %8, 16384
  br label %10

; <label>:10:                                     ; preds = %5, %1
  %11 = phi i1 [ false, %1 ], [ %9, %5 ]
  ret i1 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local noalias i8* @xnmalloc(i64, i64) #0 {
  %3 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %0, i64 %1)
  %4 = extractvalue { i64, i1 } %3, 1
  %5 = extractvalue { i64, i1 } %3, 0
  %6 = zext i1 %4 to i8
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  call void @xalloc_die() #17
  unreachable

; <label>:9:                                      ; preds = %2
  %10 = mul i64 %0, %1
  %11 = call noalias i8* @xmalloc(i64 %10)
  ret i8* %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local noalias i8* @xmalloc(i64) #7 {
  %2 = call noalias i8* @malloc(i64 %0) #8, !track !897
  %3 = icmp eq i8* %2, null
  %4 = icmp ne i64 %0, 0
  %or.cond = and i1 %3, %4
  br i1 %or.cond, label %5, label %6

; <label>:5:                                      ; preds = %1
  call void @xalloc_die() #17
  unreachable

; <label>:6:                                      ; preds = %1
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @xnrealloc(i8*, i64, i64) #0 {
  %4 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1, i64 %2)
  %5 = extractvalue { i64, i1 } %4, 1
  %6 = extractvalue { i64, i1 } %4, 0
  %7 = zext i1 %5 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  call void @xalloc_die() #17
  unreachable

; <label>:10:                                     ; preds = %3
  %11 = mul i64 %1, %2
  %12 = call i8* @xrealloc(i8* %0, i64 %11)
  ret i8* %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @xrealloc(i8*, i64) #7 {
  %3 = icmp eq i64 %1, 0
  %4 = icmp ne i8* %0, null
  %or.cond = and i1 %3, %4
  br i1 %or.cond, label %5, label %6

; <label>:5:                                      ; preds = %2
  call void @free(i8* %0) #8
  br label %11

; <label>:6:                                      ; preds = %2
  %7 = call i8* @realloc(i8* %0, i64 %1) #8, !track !898
  %8 = icmp eq i8* %7, null
  %9 = icmp ne i64 %1, 0
  %or.cond1 = and i1 %8, %9
  br i1 %or.cond1, label %10, label %11

; <label>:10:                                     ; preds = %6
  call void @xalloc_die() #17
  unreachable

; <label>:11:                                     ; preds = %6, %5
  %.0 = phi i8* [ null, %5 ], [ %7, %6 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @x2nrealloc(i8*, i64*, i64) #0 {
  %4 = load i64, i64* %1, align 8
  %5 = icmp ne i8* %0, null
  br i1 %5, label %15, label %6

; <label>:6:                                      ; preds = %3
  %7 = icmp ne i64 %4, 0
  br i1 %7, label %23, label %8

; <label>:8:                                      ; preds = %6
  %9 = udiv i64 128, %2
  %10 = icmp ne i64 %9, 0
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  %13 = sext i32 %12 to i64
  %14 = add i64 %9, %13
  br label %23

; <label>:15:                                     ; preds = %3
  %16 = udiv i64 -6148914691236517206, %2
  %17 = icmp ule i64 %16, %4
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %15
  call void @xalloc_die() #17
  unreachable

; <label>:19:                                     ; preds = %15
  %20 = udiv i64 %4, 2
  %21 = add i64 %20, 1
  %22 = add i64 %4, %21
  br label %23

; <label>:23:                                     ; preds = %6, %8, %19
  %.1 = phi i64 [ %22, %19 ], [ %4, %6 ], [ %14, %8 ]
  store i64 %.1, i64* %1, align 8
  %24 = mul i64 %.1, %2
  %25 = call i8* @xrealloc(i8* %0, i64 %24)
  ret i8* %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local noalias i8* @xcharalloc(i64) #7 {
  %2 = call noalias i8* @xmalloc(i64 %0)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @x2realloc(i8*, i64*) #0 {
  %3 = call i8* @x2nrealloc(i8* %0, i64* %1, i64 1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local noalias i8* @xzalloc(i64) #0 {
  %2 = call noalias i8* @xmalloc(i64 %0)
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %0, i1 false)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local noalias i8* @xcalloc(i64, i64) #7 {
  %3 = call noalias i8* @calloc(i64 %0, i64 %1) #8, !track !899
  %4 = icmp ne i8* %3, null
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %2
  call void @xalloc_die() #17
  unreachable

; <label>:6:                                      ; preds = %2
  ret i8* %3
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @xmemdup(i8*, i64) #7 {
  %3 = call noalias i8* @xmalloc(i64 %1)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %0, i64 %1, i1 false), !track !900
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local noalias i8* @xstrdup(i8*) #7 {
  %2 = call i64 @strlen(i8* %0) #14
  %3 = add i64 %2, 1
  %4 = call i8* @xmemdup(i8* %0, i64 %3)
  ret i8* %4
}

; Function Attrs: noinline noreturn nounwind uwtable
define dso_local void @xalloc_die() #9 {
  %1 = load volatile i32, i32* @exit_failure, align 4
  %2 = getelementptr [17 x i8], [17 x i8]* @.str.1.1879, i32 0, i32 0
  %3 = call i8* @gettext(i8* %2) #8
  %4 = getelementptr [3 x i8], [3 x i8]* @.str.1880, i32 0, i32 0
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* %4, i8* %3)
  call void @abort() #16
  unreachable
}

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @xstrndup(i8*, i64) #7 {
  %3 = call noalias i8* @strndup(i8* %0, i64 %1) #8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %2
  call void @xalloc_die() #17
  unreachable

; <label>:6:                                      ; preds = %2
  ret i8* %3
}

; Function Attrs: nounwind
declare dso_local noalias i8* @strndup(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rpl_fcntl(i32, i32, ...) #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %5 = bitcast %struct.__va_list_tag* %4 to i8*
  call void @llvm.va_start(i8* %5)
  %cond = icmp eq i32 %1, 1030
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 16
  %9 = icmp ule i32 %8, 40
  br i1 %cond, label %10, label %57

; <label>:10:                                     ; preds = %2
  br i1 %9, label %11, label %17

; <label>:11:                                     ; preds = %10
  %12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 3
  %13 = load i8*, i8** %12, align 16
  %14 = getelementptr i8, i8* %13, i32 %8
  %15 = bitcast i8* %14 to i32*
  %16 = add i32 %8, 8
  store i32 %16, i32* %7, align 16
  br label %22

; <label>:17:                                     ; preds = %10
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr i8, i8* %19, i32 8
  store i8* %21, i8** %18, align 8
  br label %22

; <label>:22:                                     ; preds = %17, %11
  %23 = phi i32* [ %15, %11 ], [ %20, %17 ]
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* @rpl_fcntl.have_dupfd_cloexec, align 4
  %26 = icmp sle i32 0, %25
  br i1 %26, label %27, label %39

; <label>:27:                                     ; preds = %22
  %28 = call i32 (i32, i32, ...) @fcntl(i32 %0, i32 %1, i32 %24)
  %29 = icmp sle i32 0, %28
  br i1 %29, label %34, label %30

; <label>:30:                                     ; preds = %27
  %31 = call i32* @__errno_location() #15
  %32 = load i32, i32* %31, align 4
  %33 = icmp ne i32 %32, 22
  br i1 %33, label %34, label %35

; <label>:34:                                     ; preds = %30, %27
  store i32 1, i32* @rpl_fcntl.have_dupfd_cloexec, align 4
  br label %41

; <label>:35:                                     ; preds = %30
  %36 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 0, i32 %24)
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %73, label %38

; <label>:38:                                     ; preds = %35
  store i32 -1, i32* @rpl_fcntl.have_dupfd_cloexec, align 4
  br label %41

; <label>:39:                                     ; preds = %22
  %40 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 0, i32 %24)
  br label %41

; <label>:41:                                     ; preds = %34, %38, %39
  %.1 = phi i32 [ %40, %39 ], [ %28, %34 ], [ %36, %38 ]
  %42 = icmp sle i32 0, %.1
  %43 = load i32, i32* @rpl_fcntl.have_dupfd_cloexec, align 4
  %44 = icmp eq i32 %43, -1
  %or.cond = and i1 %42, %44
  br i1 %or.cond, label %45, label %73

; <label>:45:                                     ; preds = %41
  %46 = call i32 (i32, i32, ...) @fcntl(i32 %.1, i32 1)
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %52, label %48

; <label>:48:                                     ; preds = %45
  %49 = or i32 %46, 1
  %50 = call i32 (i32, i32, ...) @fcntl(i32 %.1, i32 2, i32 %49)
  %51 = icmp eq i32 %50, -1
  br i1 %51, label %52, label %73

; <label>:52:                                     ; preds = %48, %45
  %53 = call i32* @__errno_location() #15
  %54 = load i32, i32* %53, align 4
  %55 = call i32 @close(i32 %.1)
  %56 = call i32* @__errno_location() #15
  store i32 %54, i32* %56, align 4
  br label %73

; <label>:57:                                     ; preds = %2
  br i1 %9, label %58, label %64

; <label>:58:                                     ; preds = %57
  %59 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 3
  %60 = load i8*, i8** %59, align 16
  %61 = getelementptr i8, i8* %60, i32 %8
  %62 = bitcast i8* %61 to i8**
  %63 = add i32 %8, 8
  store i32 %63, i32* %7, align 16
  br label %69

; <label>:64:                                     ; preds = %57
  %65 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 2
  %66 = load i8*, i8** %65, align 8
  %67 = bitcast i8* %66 to i8**
  %68 = getelementptr i8, i8* %66, i32 8
  store i8* %68, i8** %65, align 8
  br label %69

; <label>:69:                                     ; preds = %64, %58
  %70 = phi i8** [ %62, %58 ], [ %67, %64 ]
  %71 = load i8*, i8** %70, align 8
  %72 = call i32 (i32, i32, ...) @fcntl(i32 %0, i32 %1, i8* %71)
  br label %73

; <label>:73:                                     ; preds = %41, %52, %48, %35, %69
  %.4 = phi i32 [ %72, %69 ], [ %36, %35 ], [ %.1, %41 ], [ -1, %52 ], [ %.1, %48 ]
  %74 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %75 = bitcast %struct.__va_list_tag* %74 to i8*
  call void @llvm.va_end(i8* %75)
  ret i32 %.4
}

declare dso_local i32 @fcntl(i32, i32, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @gnu_getpass(i8* nonnull) #7 {
  %2 = alloca %struct.termios, align 4
  %3 = alloca %struct.termios, align 4
  %4 = getelementptr [9 x i8], [9 x i8]* @.str.1887, i32 0, i32 0
  %5 = getelementptr [3 x i8], [3 x i8]* @.str.1.1888, i32 0, i32 0
  %6 = call %struct._IO_FILE* @fopen(i8* %4, i8* %5)
  %7 = icmp eq %struct._IO_FILE* %6, null
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %1
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  br label %13

; <label>:11:                                     ; preds = %1
  %12 = call i32 @__fsetlocking(%struct._IO_FILE* %6, i32 2) #8
  br label %13

; <label>:13:                                     ; preds = %11, %8
  %.02 = phi %struct._IO_FILE* [ %9, %8 ], [ %6, %11 ]
  %.01 = phi %struct._IO_FILE* [ %10, %8 ], [ %6, %11 ]
  %14 = call i32 @fileno(%struct._IO_FILE* %.02) #8
  %15 = call i32 @tcgetattr(i32 %14, %struct.termios* %3) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %27

; <label>:17:                                     ; preds = %13
  %18 = bitcast %struct.termios* %2 to i8*
  %19 = bitcast %struct.termios* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %19, i64 60, i1 false)
  %20 = getelementptr inbounds %struct.termios, %struct.termios* %3, i32 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, -10
  store i32 %22, i32* %20, align 4
  %23 = call i32 @fileno(%struct._IO_FILE* %.02) #8
  %24 = call i32 @tcsetattr(i32 %23, i32 2, %struct.termios* %3) #8
  %25 = icmp eq i32 %24, 0
  %26 = zext i1 %25 to i8
  br label %27

; <label>:27:                                     ; preds = %17, %13
  %.0 = phi i8 [ %26, %17 ], [ 0, %13 ]
  %28 = call i32 @fputs_unlocked(i8* %0, %struct._IO_FILE* %.01)
  %29 = call i32 @fflush_unlocked(%struct._IO_FILE* %.01)
  %30 = call i64 @getline(i8** @gnu_getpass.buf, i64* @gnu_getpass.bufsize, %struct._IO_FILE* %.02)
  %31 = call i32 @fseeko(%struct._IO_FILE* %.01, i64 0, i32 1)
  %32 = load i8*, i8** @gnu_getpass.buf, align 8
  %33 = icmp ne i8* %32, null
  br i1 %33, label %34, label %52

; <label>:34:                                     ; preds = %27
  %35 = icmp slt i64 %30, 0
  %36 = load i8*, i8** @gnu_getpass.buf, align 8
  br i1 %35, label %37, label %39

; <label>:37:                                     ; preds = %34
  %38 = getelementptr inbounds i8, i8* %36, i64 0
  store i8 0, i8* %38, align 1
  br label %52

; <label>:39:                                     ; preds = %34
  %40 = sub nsw i64 %30, 1
  %41 = getelementptr inbounds i8, i8* %36, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp eq i32 %43, 10
  br i1 %44, label %45, label %52

; <label>:45:                                     ; preds = %39
  %46 = load i8*, i8** @gnu_getpass.buf, align 8
  %47 = sub nsw i64 %30, 1
  %48 = getelementptr inbounds i8, i8* %46, i64 %47
  store i8 0, i8* %48, align 1
  %49 = trunc i8 %.0 to i1
  br i1 %49, label %50, label %52

; <label>:50:                                     ; preds = %45
  %51 = call i32 @putc_unlocked(i32 10, %struct._IO_FILE* %.01)
  br label %52

; <label>:52:                                     ; preds = %37, %45, %50, %39, %27
  %53 = trunc i8 %.0 to i1
  br i1 %53, label %54, label %57

; <label>:54:                                     ; preds = %52
  %55 = call i32 @fileno(%struct._IO_FILE* %.02) #8
  %56 = call i32 @tcsetattr(i32 %55, i32 2, %struct.termios* %2) #8
  br label %57

; <label>:57:                                     ; preds = %54, %52
  %58 = bitcast %struct._IO_FILE* %6 to i8*
  call void @call_fclose(i8* %58)
  %59 = load i8*, i8** @gnu_getpass.buf, align 8
  ret i8* %59
}

; Function Attrs: nounwind
declare dso_local i32 @__fsetlocking(%struct._IO_FILE*, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @tcgetattr(i32, %struct.termios*) #2

; Function Attrs: nounwind
declare dso_local i32 @tcsetattr(i32, i32, %struct.termios*) #2

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

declare dso_local i32 @fflush_unlocked(%struct._IO_FILE*) #3

declare dso_local i32 @putc_unlocked(i32, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @call_fclose(i8*) #0 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = bitcast i8* %0 to %struct._IO_FILE*
  %5 = call i32 @fclose(%struct._IO_FILE* %4)
  br label %6

; <label>:6:                                      ; preds = %3, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rpl_ioctl(i32, i32, ...) #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %5 = bitcast %struct.__va_list_tag* %4 to i8*
  call void @llvm.va_start(i8* %5)
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 16
  %9 = icmp ule i32 %8, 40
  br i1 %9, label %10, label %16

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 3
  %12 = load i8*, i8** %11, align 16
  %13 = getelementptr i8, i8* %12, i32 %8
  %14 = bitcast i8* %13 to i8**
  %15 = add i32 %8, 8
  store i32 %15, i32* %7, align 16
  br label %21

; <label>:16:                                     ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %6, i32 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast i8* %18 to i8**
  %20 = getelementptr i8, i8* %18, i32 8
  store i8* %20, i8** %17, align 8
  br label %21

; <label>:21:                                     ; preds = %16, %10
  %22 = phi i8** [ %14, %10 ], [ %19, %16 ]
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i32 0, i32 0
  %25 = bitcast %struct.__va_list_tag* %24 to i8*
  call void @llvm.va_end(i8* %25)
  %26 = zext i32 %1 to i64
  %27 = call i32 (i32, i64, ...) @ioctl(i32 %0, i64 %26, i8* %23) #8
  ret i32 %27
}

; Function Attrs: nounwind
declare dso_local i32 @ioctl(i32, i64, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @mktime_internal(%struct.tm*, %struct.tm* (i64*, %struct.tm*)*, i64*) #0 {
  %4 = alloca i64, align 8, !track !901
  %5 = alloca i64, align 8, !track !902
  %6 = alloca %struct.tm, align 8, !track !903
  %7 = alloca i64, align 8, !track !904
  %8 = alloca %struct.tm, align 8
  %9 = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 4
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 8
  %22 = load i32, i32* %21, align 8
  %23 = srem i32 %18, 12
  %24 = icmp slt i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = sdiv i32 %18, 12
  %27 = sub nsw i32 %26, %25
  %28 = sext i32 %20 to i64
  %29 = sext i32 %27 to i64
  %30 = add nsw i64 %28, %29
  %31 = call i32 @leapyear(i64 %30)
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [2 x [13 x i16]], [2 x [13 x i16]]* @__mon_yday, i64 0, i64 %32
  %34 = mul nsw i32 12, %25
  %35 = add nsw i32 %23, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [13 x i16], [13 x i16]* %33, i64 0, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = sub nsw i32 %39, 1
  %41 = sext i32 %16 to i64
  %42 = sext i32 %40 to i64
  %43 = add nsw i64 %42, %41
  %44 = load i64, i64* %2, align 8
  %45 = icmp slt i32 %10, 0
  %spec.select = select i1 %45, i32 0, i32 %10
  %46 = icmp slt i32 59, %spec.select
  %.1 = select i1 %46, i32 59, i32 %spec.select
  %47 = sub nsw i64 0, %44
  %48 = trunc i64 %47 to i32
  %49 = call i64 @ydhms_diff(i64 %30, i64 %43, i32 %14, i32 %12, i32 %.1, i32 70, i32 0, i32 0, i32 0, i32 %48)
  store i64 %49, i64* %5, align 8
  store i64 %49, i64* %4, align 8
  %50 = call %struct.tm* @ranged_convert(%struct.tm* (i64*, %struct.tm*)* %1, i64* %4, %struct.tm* %6)
  %51 = call i64 @guess_time_tm(i64 %30, i64 %43, i32 %14, i32 %12, i32 %.1, i64* %4, %struct.tm* %50)
  %52 = load i64, i64* %4, align 8
  %53 = icmp ne i64 %52, %51
  br i1 %53, label %.lr.ph15.preheader, label %._crit_edge16

.lr.ph15.preheader:                               ; preds = %3
  br label %.lr.ph15

.lr.ph15:                                         ; preds = %.lr.ph15.preheader, %84
  %54 = phi i64 [ %92, %84 ], [ %51, %.lr.ph15.preheader ]
  %.0313 = phi i32 [ %90, %84 ], [ 0, %.lr.ph15.preheader ]
  %.0512 = phi i32 [ %82, %84 ], [ 6, %.lr.ph15.preheader ]
  %.0611 = phi i64 [ %85, %84 ], [ %49, %.lr.ph15.preheader ]
  call void @unroll_loop(i32 449)
  %55 = load i64, i64* %4, align 8
  %56 = icmp eq i64 %55, %.0611
  br i1 %56, label %57, label %81

; <label>:57:                                     ; preds = %.lr.ph15
  %58 = load i64, i64* %4, align 8
  %59 = load i64, i64* %5, align 8
  %60 = icmp ne i64 %58, %59
  br i1 %60, label %61, label %81

; <label>:61:                                     ; preds = %57
  %62 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 8
  %63 = load i32, i32* %62, align 8
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %._crit_edge.loopexit1, label %65

; <label>:65:                                     ; preds = %61
  %66 = icmp slt i32 %22, 0
  br i1 %66, label %67, label %73

; <label>:67:                                     ; preds = %65
  %68 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 8
  %69 = load i32, i32* %68, align 8
  %70 = icmp ne i32 %69, 0
  %71 = zext i1 %70 to i32
  %72 = icmp ule i32 %.0313, %71
  br i1 %72, label %._crit_edge.loopexit1, label %81

; <label>:73:                                     ; preds = %65
  %74 = icmp ne i32 %22, 0
  %75 = zext i1 %74 to i32
  %76 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 8
  %77 = load i32, i32* %76, align 8
  %78 = icmp ne i32 %77, 0
  %79 = zext i1 %78 to i32
  %80 = icmp ne i32 %75, %79
  br i1 %80, label %._crit_edge.loopexit1, label %81

; <label>:81:                                     ; preds = %73, %67, %57, %.lr.ph15
  %82 = add nsw i32 %.0512, -1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %.loopexit, label %84

; <label>:84:                                     ; preds = %81
  %85 = load i64, i64* %5, align 8
  %86 = load i64, i64* %4, align 8
  store i64 %86, i64* %5, align 8
  store i64 %54, i64* %4, align 8
  %87 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 8
  %88 = load i32, i32* %87, align 8
  %89 = icmp ne i32 %88, 0
  %90 = zext i1 %89 to i32
  %91 = call %struct.tm* @ranged_convert(%struct.tm* (i64*, %struct.tm*)* %1, i64* %4, %struct.tm* %6)
  %92 = call i64 @guess_time_tm(i64 %30, i64 %43, i32 %14, i32 %12, i32 %.1, i64* %4, %struct.tm* %91)
  %93 = load i64, i64* %4, align 8
  %94 = icmp ne i64 %93, %92
  br i1 %94, label %.lr.ph15, label %._crit_edge16.loopexit

._crit_edge16.loopexit:                           ; preds = %84
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %3
  %95 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 8
  %96 = load i32, i32* %95, align 8
  %97 = call i32 @isdst_differ(i32 %22, i32 %96)
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %99, label %._crit_edge

; <label>:99:                                     ; preds = %._crit_edge16
  %100 = sdiv i32 536454000, 2
  %101 = add nsw i32 %100, 601200
  %102 = icmp slt i32 601200, %101
  br i1 %102, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %99
  %103 = sext i32 %101 to i64
  br label %104

; <label>:104:                                    ; preds = %.lr.ph, %125
  %indvars.iv9 = phi i64 [ 601200, %.lr.ph ], [ %indvars.iv.next10, %125 ]
  br label %105

; <label>:105:                                    ; preds = %104, %123
  %indvars.iv = phi i64 [ -1, %104 ], [ %indvars.iv.next, %123 ]
  call void @unroll_loop(i32 450)
  %106 = load i64, i64* %4, align 8
  %107 = mul nsw i64 %indvars.iv9, %indvars.iv
  %108 = trunc i64 %107 to i32
  %109 = call i32 @time_t_int_add_ok(i64 %106, i32 %108)
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %123

; <label>:111:                                    ; preds = %105
  %112 = load i64, i64* %4, align 8
  %113 = mul nsw i64 %indvars.iv9, %indvars.iv
  %114 = add nsw i64 %112, %113
  store i64 %114, i64* %7, align 8
  %115 = call %struct.tm* @ranged_convert(%struct.tm* (i64*, %struct.tm*)* %1, i64* %7, %struct.tm* %8)
  %116 = getelementptr inbounds %struct.tm, %struct.tm* %8, i32 0, i32 8
  %117 = load i32, i32* %116, align 8
  %118 = call i32 @isdst_differ(i32 %22, i32 %117)
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %123, label %120

; <label>:120:                                    ; preds = %111
  %121 = call i64 @guess_time_tm(i64 %30, i64 %43, i32 %14, i32 %12, i32 %.1, i64* %7, %struct.tm* %8)
  store i64 %121, i64* %4, align 8
  %122 = call %struct.tm* @ranged_convert(%struct.tm* (i64*, %struct.tm*)* %1, i64* %4, %struct.tm* %6)
  br label %._crit_edge

; <label>:123:                                    ; preds = %105, %111
  %indvars.iv.next = add nsw i64 %indvars.iv, 2
  %124 = icmp ule i64 %indvars.iv.next, 1
  br i1 %124, label %105, label %125

; <label>:125:                                    ; preds = %123
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 601200
  %126 = icmp slt i64 %indvars.iv.next10, %103
  br i1 %126, label %104, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %125
  br label %._crit_edge

._crit_edge.loopexit1:                            ; preds = %73, %67, %61
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit1, %._crit_edge.loopexit, %._crit_edge16, %99, %120
  %127 = load i64, i64* %4, align 8
  %128 = add nsw i64 %44, %127
  %129 = sub nsw i64 %128, %49
  store i64 %129, i64* %2, align 8
  %130 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 0
  %131 = load i32, i32* %130, align 8
  %132 = icmp ne i32 %10, %131
  br i1 %132, label %133, label %157

; <label>:133:                                    ; preds = %._crit_edge
  %134 = icmp eq i32 %.1, 0
  %135 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 0
  %136 = load i32, i32* %135, align 8
  %137 = icmp eq i32 %136, 60
  %138 = select i1 %134, i1 %137, i1 false
  %139 = zext i1 %138 to i32
  %140 = sub nsw i32 %139, %.1
  %141 = load i64, i64* %4, align 8
  %142 = call i32 @time_t_int_add_ok(i64 %141, i32 %10)
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %161

; <label>:144:                                    ; preds = %133
  %145 = load i64, i64* %4, align 8
  %146 = sext i32 %10 to i64
  %147 = add nsw i64 %145, %146
  %148 = call i32 @time_t_int_add_ok(i64 %147, i32 %140)
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %161

; <label>:150:                                    ; preds = %144
  %151 = sext i32 %140 to i64
  %152 = add nsw i64 %147, %151
  store i64 %152, i64* %5, align 8
  %153 = call %struct.tm* %1(i64* %5, %struct.tm* %6)
  %154 = icmp ne %struct.tm* %153, null
  br i1 %154, label %155, label %161

; <label>:155:                                    ; preds = %150
  %156 = load i64, i64* %5, align 8
  store i64 %156, i64* %4, align 8
  br label %157

; <label>:157:                                    ; preds = %155, %._crit_edge
  %158 = bitcast %struct.tm* %0 to i8*
  %159 = bitcast %struct.tm* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 %159, i64 56, i1 false), !track !905
  %160 = load i64, i64* %4, align 8
  br label %161

.loopexit:                                        ; preds = %81
  %.0.ph = phi i64 [ -1, %81 ]
  br label %161

; <label>:161:                                    ; preds = %.loopexit, %150, %144, %133, %157
  %.0 = phi i64 [ %160, %157 ], [ -1, %133 ], [ -1, %144 ], [ -1, %150 ], [ %.0.ph, %.loopexit ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @leapyear(i64) #0 {
  %2 = and i64 %0, 3
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %4, label %11

; <label>:4:                                      ; preds = %1
  %5 = srem i64 %0, 100
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %4
  %8 = sdiv i64 %0, 100
  %9 = and i64 %8, 3
  %10 = icmp eq i64 %9, 1
  br label %11

; <label>:11:                                     ; preds = %4, %7, %1
  %12 = phi i1 [ false, %1 ], [ true, %4 ], [ %10, %7 ]
  %13 = zext i1 %12 to i32
  ret i32 %13
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @ydhms_diff(i64, i64, i32, i32, i32, i32, i32, i32, i32, i32) #0 {
  %11 = ashr i64 %0, 2
  %12 = add nsw i64 %11, 475
  %13 = and i64 %0, 3
  %14 = icmp ne i64 %13, 0
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = sub nsw i64 %12, %17
  %19 = trunc i64 %18 to i32
  %20 = ashr i32 %5, 2
  %21 = add nsw i32 %20, 475
  %22 = and i32 %5, 3
  %23 = icmp ne i32 %22, 0
  %24 = xor i1 %23, true
  %25 = zext i1 %24 to i32
  %26 = sub nsw i32 %21, %25
  %27 = sdiv i32 %19, 25
  %28 = srem i32 %19, 25
  %29 = icmp slt i32 %28, 0
  %30 = zext i1 %29 to i32
  %31 = sub nsw i32 %27, %30
  %32 = sdiv i32 %26, 25
  %33 = srem i32 %26, 25
  %34 = icmp slt i32 %33, 0
  %35 = zext i1 %34 to i32
  %36 = sub nsw i32 %32, %35
  %37 = ashr i32 %31, 2
  %38 = ashr i32 %36, 2
  %39 = sub nsw i32 %19, %26
  %40 = sub nsw i32 %31, %36
  %41 = sub nsw i32 %39, %40
  %42 = sub nsw i32 %37, %38
  %43 = add nsw i32 %41, %42
  %44 = sext i32 %5 to i64
  %45 = sub nsw i64 %0, %44
  %46 = mul nsw i64 365, %45
  %47 = add nsw i64 %46, %1
  %48 = sext i32 %6 to i64
  %49 = sub nsw i64 %47, %48
  %50 = sext i32 %43 to i64
  %51 = add nsw i64 %49, %50
  %52 = mul nsw i64 24, %51
  %53 = sext i32 %2 to i64
  %54 = add nsw i64 %52, %53
  %55 = sext i32 %7 to i64
  %56 = sub nsw i64 %54, %55
  %57 = mul nsw i64 60, %56
  %58 = sext i32 %3 to i64
  %59 = add nsw i64 %57, %58
  %60 = sext i32 %8 to i64
  %61 = sub nsw i64 %59, %60
  %62 = mul nsw i64 60, %61
  %63 = sext i32 %4 to i64
  %64 = add nsw i64 %62, %63
  %65 = sext i32 %9 to i64
  %66 = sub nsw i64 %64, %65
  ret i64 %66
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.tm* @ranged_convert(%struct.tm* (i64*, %struct.tm*)*, i64*, %struct.tm*) #0 {
  %4 = call %struct.tm* %0(i64* %1, %struct.tm* %2)
  %5 = icmp ne %struct.tm* %4, null
  br i1 %5, label %29, label %6

; <label>:6:                                      ; preds = %3
  %7 = load i64, i64* %1, align 8
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %29

; <label>:9:                                      ; preds = %6
  %10 = load i64, i64* %1, align 8
  %11 = icmp slt i64 %10, 0
  %12 = zext i1 %11 to i64
  %13 = select i1 %11, i32 -1, i32 1
  %14 = sext i32 %13 to i64
  %15 = icmp ne i64 %10, %14
  br i1 %15, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %9
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.06 = phi i64 [ %..06, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %.015 = phi i64 [ %.015., %.lr.ph ], [ %10, %.lr.ph.preheader ]
  call void @unroll_loop(i32 451)
  %16 = call i64 @time_t_avg(i64 %.06, i64 %.015)
  store i64 %16, i64* %1, align 8
  %17 = call %struct.tm* %0(i64* %1, %struct.tm* %2)
  %18 = icmp ne %struct.tm* %17, null
  %.015. = select i1 %18, i64 %.015, i64 %16
  %..06 = select i1 %18, i64 %16, i64 %.06
  %19 = icmp slt i64 %.015., 0
  %20 = zext i1 %19 to i64
  %21 = select i1 %19, i32 -1, i32 1
  %22 = sext i32 %21 to i64
  %23 = add nsw i64 %..06, %22
  %24 = icmp ne i64 %.015., %23
  br i1 %24, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.03.lcssa.ph = phi %struct.tm* [ %17, %.lr.ph ]
  %.0.lcssa.ph = phi i64 [ %..06, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %.03.lcssa = phi %struct.tm* [ %4, %9 ], [ %.03.lcssa.ph, %._crit_edge.loopexit ]
  %.0.lcssa = phi i64 [ 0, %9 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %25 = icmp eq %struct.tm* %.03.lcssa, null
  %26 = icmp ne i64 %.0.lcssa, 0
  %or.cond = and i1 %25, %26
  br i1 %or.cond, label %27, label %29

; <label>:27:                                     ; preds = %._crit_edge
  store i64 %.0.lcssa, i64* %1, align 8
  %28 = call %struct.tm* %0(i64* %1, %struct.tm* %2)
  br label %29

; <label>:29:                                     ; preds = %27, %._crit_edge, %6, %3
  %.2 = phi %struct.tm* [ %4, %3 ], [ %4, %6 ], [ %.03.lcssa, %._crit_edge ], [ %28, %27 ]
  ret %struct.tm* %.2
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @guess_time_tm(i64, i64, i32, i32, i32, i64*, %struct.tm*) #0 {
  %8 = icmp ne %struct.tm* %6, null
  br i1 %8, label %9, label %27

; <label>:9:                                      ; preds = %7
  %10 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 5
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 7
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = call i64 @ydhms_diff(i64 %0, i64 %1, i32 %2, i32 %3, i32 %4, i32 %11, i32 %13, i32 %15, i32 %17, i32 %19)
  %21 = load i64, i64* %5, align 8
  %22 = call i32 @time_t_add_ok(i64 %21, i64 %20)
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %9
  %25 = load i64, i64* %5, align 8
  %26 = add nsw i64 %25, %20
  br label %41

; <label>:27:                                     ; preds = %9, %7
  %28 = load i64, i64* %5, align 8
  %29 = icmp slt i64 %28, 0
  %30 = load i64, i64* %5, align 8
  br i1 %29, label %31, label %36

; <label>:31:                                     ; preds = %27
  %32 = icmp sle i64 %30, -9223372036854775807
  br i1 %32, label %33, label %41

; <label>:33:                                     ; preds = %31
  %34 = load i64, i64* %5, align 8
  %35 = add nsw i64 %34, 1
  br label %41

; <label>:36:                                     ; preds = %27
  %37 = icmp sle i64 9223372036854775806, %30
  br i1 %37, label %38, label %41

; <label>:38:                                     ; preds = %36
  %39 = load i64, i64* %5, align 8
  %40 = sub nsw i64 %39, 1
  br label %41

; <label>:41:                                     ; preds = %31, %33, %36, %38, %24
  %.0 = phi i64 [ %26, %24 ], [ %35, %33 ], [ -9223372036854775808, %31 ], [ %40, %38 ], [ 9223372036854775807, %36 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @isdst_differ(i32, i32) #0 {
  %3 = icmp ne i32 %0, 0
  %4 = xor i1 %3, true
  %5 = zext i1 %4 to i32
  %6 = icmp ne i32 %1, 0
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = icmp ne i32 %5, %8
  %10 = icmp sle i32 0, %0
  %or.cond = and i1 %9, %10
  %11 = icmp sle i32 0, %1
  %spec.select = select i1 %or.cond, i1 %11, i1 false
  %12 = zext i1 %spec.select to i32
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @time_t_int_add_ok(i64, i32) #0 {
  %3 = and i64 %0, 1
  %4 = trunc i64 %3 to i32
  %5 = ashr i64 %0, 1
  %6 = ashr i32 %1, 1
  %7 = and i32 %4, %1
  %8 = add nsw i32 %6, %7
  %9 = sext i32 %8 to i64
  %10 = add nsw i64 %5, %9
  %11 = icmp sle i64 -4611686018427387904, %10
  %12 = icmp sle i64 %10, 4611686018427387903
  %spec.select = select i1 %11, i1 %12, i1 false
  %13 = zext i1 %spec.select to i32
  ret i32 %13
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @time_t_add_ok(i64, i64) #0 {
  %3 = call i64 @time_t_avg(i64 %0, i64 %1)
  %4 = icmp sle i64 -4611686018427387904, %3
  %5 = icmp sle i64 %3, 4611686018427387903
  %spec.select = select i1 %4, i1 %5, i1 false
  %6 = zext i1 %spec.select to i32
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @time_t_avg(i64, i64) #0 {
  %3 = ashr i64 %0, 1
  %4 = ashr i64 %1, 1
  %5 = add nsw i64 %3, %4
  %6 = and i64 %0, %1
  %7 = and i64 %6, 1
  %8 = add nsw i64 %5, %7
  ret i64 %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @rpl_mktime(%struct.tm* nonnull) #0 {
  %2 = call i64 @mktime_internal(%struct.tm* %0, %struct.tm* (i64*, %struct.tm*)* @localtime_r, i64* @localtime_offset)
  ret i64 %2
}

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime_r(i64*, %struct.tm*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @locale_charset() #0 {
  %1 = call i8* @nl_langinfo(i32 14) #8
  %2 = icmp eq i8* %1, null
  %3 = getelementptr [1 x i8], [1 x i8]* @.str.1897, i32 0, i32 0
  %spec.select = select i1 %2, i8* %3, i8* %1
  %4 = call i8* @get_charset_aliases()
  %5 = load i8, i8* %4, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %23
  %.013 = phi i8* [ %29, %23 ], [ %4, %.lr.ph.preheader ]
  call void @unroll_loop(i32 452)
  %8 = call i32 @strcmp(i8* %spec.select, i8* %.013) #14
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %19, label %10

; <label>:10:                                     ; preds = %.lr.ph
  %11 = load i8, i8* %.013, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 42
  br i1 %13, label %14, label %23

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds i8, i8* %.013, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %14, %.lr.ph
  %.01.lcssa2 = phi i8* [ %.013, %14 ], [ %.013, %.lr.ph ]
  %20 = call i64 @strlen(i8* %.01.lcssa2) #14
  %21 = getelementptr inbounds i8, i8* %.01.lcssa2, i64 %20
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  br label %.loopexit

; <label>:23:                                     ; preds = %10, %14
  %24 = call i64 @strlen(i8* %.013) #14
  %25 = add i64 %24, 1
  %26 = getelementptr inbounds i8, i8* %.013, i64 %25
  %27 = call i64 @strlen(i8* %26) #14
  %28 = add i64 %27, 1
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %23
  %.1.ph = phi i8* [ %spec.select, %23 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0, %19
  %.1 = phi i8* [ %22, %19 ], [ %spec.select, %0 ], [ %.1.ph, %.loopexit.loopexit ]
  %33 = getelementptr inbounds i8, i8* %.1, i64 0
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr [6 x i8], [6 x i8]* @.str.1.1898, i32 0, i32 0
  %spec.select1 = select i1 %36, i8* %37, i8* %.1
  ret i8* %spec.select1
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_charset_aliases() #7 {
  %1 = alloca [51 x i8], align 16, !track !906
  %2 = alloca [51 x i8], align 16, !track !907
  %3 = load volatile i8*, i8** @charset_aliases, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %128

; <label>:5:                                      ; preds = %0
  %6 = getelementptr [16 x i8], [16 x i8]* @.str.3.1900, i32 0, i32 0
  %7 = call i8* @getenv(i8* %6) #8, !track !908
  %8 = icmp eq i8* %7, null
  br i1 %8, label %14, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds i8, i8* %7, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %9, %5
  %15 = getelementptr [15 x i8], [15 x i8]* @.str.4.1901, i32 0, i32 0
  br label %16

; <label>:16:                                     ; preds = %14, %9
  %.01 = phi i8* [ %15, %14 ], [ %7, %9 ]
  %17 = call i64 @strlen(i8* %.01) #14
  %18 = getelementptr [14 x i8], [14 x i8]* @.str.2.1899, i32 0, i32 0
  %19 = call i64 @strlen(i8* %18) #14
  %20 = icmp ugt i64 %17, 0
  br i1 %20, label %21, label %28

; <label>:21:                                     ; preds = %16
  %22 = sub i64 %17, 1
  %23 = getelementptr inbounds i8, i8* %.01, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 47
  %27 = xor i1 %26, true
  br label %28

; <label>:28:                                     ; preds = %21, %16
  %29 = phi i1 [ false, %16 ], [ %27, %21 ]
  %30 = zext i1 %29 to i32
  %31 = sext i32 %30 to i64
  %32 = add i64 %17, %31
  %33 = add i64 %32, %19
  %34 = add i64 %33, 1
  %35 = call noalias i8* @malloc(i64 %34) #8, !track !909
  %magicptr = ptrtoint i8* %35 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %47, label %36

; <label>:36:                                     ; preds = %28
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %.01, i64 %17, i1 false), !track !910
  %37 = icmp ne i32 %30, 0
  br i1 %37, label %38, label %40

; <label>:38:                                     ; preds = %36
  %39 = getelementptr inbounds i8, i8* %35, i64 %17
  store i8 47, i8* %39, align 1
  br label %40

; <label>:40:                                     ; preds = %38, %36
  %41 = getelementptr inbounds i8, i8* %35, i64 %17
  %42 = sext i32 %30 to i64
  %43 = getelementptr inbounds i8, i8* %41, i64 %42
  %44 = add i64 %19, 1
  %45 = getelementptr [14 x i8], [14 x i8]* @.str.2.1899, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %45, i64 %44, i1 false), !track !911
  %46 = icmp eq i8* %35, null
  br i1 %46, label %47, label %49

; <label>:47:                                     ; preds = %28, %40
  %48 = getelementptr [1 x i8], [1 x i8]* @.str.1897, i32 0, i32 0
  br label %127

; <label>:49:                                     ; preds = %40
  %50 = call i32 (i8*, i32, ...) @open(i8* %35, i32 131072)
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %54

; <label>:52:                                     ; preds = %49
  %53 = getelementptr [1 x i8], [1 x i8]* @.str.1897, i32 0, i32 0
  br label %126

; <label>:54:                                     ; preds = %49
  %55 = getelementptr [2 x i8], [2 x i8]* @.str.5.1902, i32 0, i32 0
  %56 = call %struct._IO_FILE* @fdopen(i32 %50, i8* %55) #8, !track !912
  %57 = icmp eq %struct._IO_FILE* %56, null
  br i1 %57, label %58, label %61

; <label>:58:                                     ; preds = %54
  %59 = call i32 @close(i32 %50)
  %60 = getelementptr [1 x i8], [1 x i8]* @.str.1897, i32 0, i32 0
  br label %126

; <label>:61:                                     ; preds = %54
  %62 = call i32 @getc_unlocked(%struct._IO_FILE* %56)
  %63 = icmp eq i32 %62, -1
  br i1 %63, label %.outer._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %61
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.outer
  %64 = phi i32 [ %118, %.outer ], [ %62, %.lr.ph.preheader ]
  %.02.ph27 = phi i64 [ %.13, %.outer ], [ 0, %.lr.ph.preheader ]
  %.05.ph26 = phi i8* [ %.16, %.outer ], [ null, %.lr.ph.preheader ]
  call void @unroll_loop(i32 353)
  br label %65

; <label>:65:                                     ; preds = %.lr.ph, %.backedge
  %66 = phi i32 [ %64, %.lr.ph ], [ %67, %.backedge ]
  call void @unroll_loop(i32 453)
  switch i32 %66, label %77 [
    i32 10, label %.backedge
    i32 32, label %.backedge
    i32 9, label %.backedge
    i32 35, label %.preheader
  ]

.preheader:                                       ; preds = %65
  br label %69

.backedge:                                        ; preds = %75, %65, %65, %65
  %67 = call i32 @getc_unlocked(%struct._IO_FILE* %56)
  %68 = icmp eq i32 %67, -1
  br i1 %68, label %.outer._crit_edge.loopexit, label %65

; <label>:69:                                     ; preds = %.preheader, %69
  call void @unroll_loop(i32 454)
  %70 = call i32 @getc_unlocked(%struct._IO_FILE* %56)
  %71 = icmp eq i32 %70, -1
  %72 = icmp eq i32 %70, 10
  %73 = select i1 %71, i1 true, i1 %72
  %74 = xor i1 %73, true
  br i1 %74, label %69, label %75

; <label>:75:                                     ; preds = %69
  %.lcssa = phi i32 [ %70, %69 ]
  %76 = icmp eq i32 %.lcssa, -1
  br i1 %76, label %.outer._crit_edge.loopexit, label %.backedge

; <label>:77:                                     ; preds = %65
  %.lcssa1 = phi i32 [ %66, %65 ]
  %78 = call i32 @ungetc(i32 %.lcssa1, %struct._IO_FILE* %56)
  %79 = getelementptr inbounds [51 x i8], [51 x i8]* %1, i32 0, i32 0
  %80 = getelementptr inbounds [51 x i8], [51 x i8]* %2, i32 0, i32 0
  %81 = getelementptr [10 x i8], [10 x i8]* @.str.6.1903, i32 0, i32 0
  %82 = call i32 (%struct._IO_FILE*, i8*, ...) @fscanf(%struct._IO_FILE* %56, i8* %81, i8* %79, i8* %80)
  %83 = icmp slt i32 %82, 2
  br i1 %83, label %.outer._crit_edge.loopexit2, label %84

; <label>:84:                                     ; preds = %77
  %85 = getelementptr inbounds [51 x i8], [51 x i8]* %1, i32 0, i32 0
  %86 = call i64 @strlen(i8* %85) #14
  %87 = getelementptr inbounds [51 x i8], [51 x i8]* %2, i32 0, i32 0
  %88 = call i64 @strlen(i8* %87) #14
  %89 = icmp eq i64 %.02.ph27, 0
  %90 = add i64 %86, 1
  %91 = add i64 %90, %88
  %92 = add i64 %91, 1
  br i1 %89, label %93, label %96

; <label>:93:                                     ; preds = %84
  %94 = add i64 %92, 1
  %95 = call noalias i8* @malloc(i64 %94) #8, !track !913
  br label %100

; <label>:96:                                     ; preds = %84
  %97 = add i64 %.02.ph27, %92
  %98 = add i64 %97, 1
  %99 = call i8* @realloc(i8* %.05.ph26, i64 %98) #8, !track !914
  br label %100

; <label>:100:                                    ; preds = %96, %93
  %.16 = phi i8* [ %95, %93 ], [ %99, %96 ]
  %.13 = phi i64 [ %92, %93 ], [ %97, %96 ]
  %101 = icmp eq i8* %.16, null
  br i1 %101, label %102, label %.outer

; <label>:102:                                    ; preds = %100
  %.05.lcssa12 = phi i8* [ %.05.ph26, %100 ]
  %.16.lcssa = phi i8* [ %.16, %100 ]
  call void @free(i8* %.05.lcssa12) #8
  br label %.outer._crit_edge

.outer:                                           ; preds = %100
  %103 = getelementptr inbounds i8, i8* %.16, i64 %.13
  %104 = add i64 %88, 1
  %105 = sub i64 0, %104
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = add i64 %86, 1
  %108 = sub i64 0, %107
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = getelementptr inbounds [51 x i8], [51 x i8]* %1, i32 0, i32 0
  %111 = call i8* @strcpy(i8* %109, i8* %110) #8, !track !915
  %112 = getelementptr inbounds i8, i8* %.16, i64 %.13
  %113 = add i64 %88, 1
  %114 = sub i64 0, %113
  %115 = getelementptr inbounds i8, i8* %112, i64 %114
  %116 = getelementptr inbounds [51 x i8], [51 x i8]* %2, i32 0, i32 0
  %117 = call i8* @strcpy(i8* %115, i8* %116) #8, !track !916
  %118 = call i32 @getc_unlocked(%struct._IO_FILE* %56)
  %119 = icmp eq i32 %118, -1
  br i1 %119, label %.outer._crit_edge.loopexit2, label %.lr.ph

.outer._crit_edge.loopexit:                       ; preds = %.backedge, %75
  %.27.ph = phi i8* [ %.05.ph26, %75 ], [ %.05.ph26, %.backedge ]
  %.24.ph = phi i64 [ %.02.ph27, %75 ], [ %.02.ph27, %.backedge ]
  br label %.outer._crit_edge

.outer._crit_edge.loopexit2:                      ; preds = %.outer, %77
  %.27.ph3 = phi i8* [ %.05.ph26, %77 ], [ %.16, %.outer ]
  %.24.ph4 = phi i64 [ %.02.ph27, %77 ], [ %.13, %.outer ]
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer._crit_edge.loopexit2, %.outer._crit_edge.loopexit, %61, %102
  %.27 = phi i8* [ %.16.lcssa, %102 ], [ null, %61 ], [ %.27.ph, %.outer._crit_edge.loopexit ], [ %.27.ph3, %.outer._crit_edge.loopexit2 ]
  %.24 = phi i64 [ 0, %102 ], [ 0, %61 ], [ %.24.ph, %.outer._crit_edge.loopexit ], [ %.24.ph4, %.outer._crit_edge.loopexit2 ]
  %120 = call i32 @fclose(%struct._IO_FILE* %56)
  %121 = icmp eq i64 %.24, 0
  br i1 %121, label %122, label %124

; <label>:122:                                    ; preds = %.outer._crit_edge
  %123 = getelementptr [1 x i8], [1 x i8]* @.str.1897, i32 0, i32 0
  br label %126

; <label>:124:                                    ; preds = %.outer._crit_edge
  %125 = getelementptr inbounds i8, i8* %.27, i64 %.24
  store i8 0, i8* %125, align 1
  br label %126

; <label>:126:                                    ; preds = %58, %124, %122, %52
  %.2 = phi i8* [ %53, %52 ], [ %60, %58 ], [ %123, %122 ], [ %.27, %124 ]
  call void @free(i8* %35) #8
  br label %127

; <label>:127:                                    ; preds = %126, %47
  %.3 = phi i8* [ %48, %47 ], [ %.2, %126 ]
  store volatile i8* %.3, i8** @charset_aliases, align 8
  br label %128

; <label>:128:                                    ; preds = %127, %0
  %.4 = phi i8* [ %.3, %127 ], [ %3, %0 ]
  ret i8* %.4
}

declare dso_local i32 @getc_unlocked(%struct._IO_FILE*) #3

declare dso_local i32 @ungetc(i32, %struct._IO_FILE*) #3

declare dso_local i32 @fscanf(%struct._IO_FILE*, i8*, ...) #3

declare void @unroll_loop(i32)

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "track_func"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noinline noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { nounwind readonly }
attributes #15 = { nounwind readnone }
attributes #16 = { noreturn nounwind }
attributes #17 = { noreturn }
attributes #18 = { nounwind returns_twice }

!llvm.ident = !{!93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93, !93}
!llvm.module.flags = !{!94}

!0 = !{i64 53}
!1 = !{i64 392}
!2 = !{i64 269}
!3 = !{i64 271}
!4 = !{i64 259}
!5 = !{i64 96}
!6 = !{i64 149}
!7 = !{i64 38}
!8 = !{i64 69}
!9 = !{i64 120}
!10 = !{i64 86}
!11 = !{i64 323}
!12 = !{i64 72}
!13 = !{i64 189}
!14 = !{i64 45}
!15 = !{i64 10}
!16 = !{i64 44}
!17 = !{i64 176}
!18 = !{i64 242}
!19 = !{i64 268}
!20 = !{i64 500}
!21 = !{i64 80}
!22 = !{i64 89}
!23 = !{i64 131}
!24 = !{i64 185}
!25 = !{i64 307}
!26 = !{i64 303}
!27 = !{i64 142}
!28 = !{i64 273}
!29 = !{i64 76}
!30 = !{i64 14}
!31 = !{i64 122}
!32 = !{i64 59}
!33 = !{i64 70}
!34 = !{i64 67}
!35 = !{i64 116}
!36 = !{i64 91}
!37 = !{i64 182}
!38 = !{i64 424}
!39 = !{i64 316}
!40 = !{i64 318}
!41 = !{i64 321}
!42 = !{i64 162}
!43 = !{i64 293}
!44 = !{i64 292}
!45 = !{i64 104}
!46 = !{i64 213}
!47 = !{i64 40}
!48 = !{i64 90}
!49 = !{i64 218}
!50 = !{i64 117}
!51 = !{i64 362}
!52 = !{i64 18}
!53 = !{i64 249}
!54 = !{i64 2}
!55 = !{i64 48}
!56 = !{i64 381}
!57 = !{i64 319}
!58 = !{i64 25}
!59 = !{i64 375}
!60 = !{i64 339}
!61 = !{i64 222}
!62 = !{i64 92}
!63 = !{i64 173}
!64 = !{i64 130}
!65 = !{i64 82}
!66 = !{i64 60}
!67 = !{i64 83}
!68 = !{i64 97}
!69 = !{i64 75}
!70 = !{i64 217}
!71 = !{i64 133}
!72 = !{i64 114}
!73 = !{i64 99}
!74 = !{i64 29}
!75 = !{i64 385}
!76 = !{i64 190}
!77 = !{i64 125}
!78 = !{i64 168}
!79 = !{i64 384}
!80 = !{i64 113}
!81 = !{i64 239}
!82 = !{i64 238}
!83 = !{i64 50}
!84 = !{i64 383}
!85 = !{i64 94}
!86 = !{i64 32}
!87 = !{i64 141}
!88 = !{i64 396}
!89 = !{i64 397}
!90 = !{i64 150}
!91 = !{i64 317}
!92 = !{i64 0}
!93 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
!94 = !{i32 1, !"wchar_size", i32 4}
!95 = !{i64 287}
!96 = !{i64 286}
!97 = !{i64 406}
!98 = !{i64 285}
!99 = !{i64 368}
!100 = !{i64 366}
!101 = !{i64 398}
!102 = !{i64 240}
!103 = !{i64 118}
!104 = !{i64 284}
!105 = !{i64 402}
!106 = !{i64 305}
!107 = !{i64 394}
!108 = !{i64 391}
!109 = !{i32 -2145710046}
!110 = !{i64 192}
!111 = !{i64 312}
!112 = !{i64 309}
!113 = !{i64 308}
!114 = !{i64 338}
!115 = !{i64 336}
!116 = !{i32 -2145709344}
!117 = !{i64 329}
!118 = !{i64 314}
!119 = !{i64 327}
!120 = !{i64 324}
!121 = !{i64 322}
!122 = !{i64 331}
!123 = !{i64 360}
!124 = !{i64 358}
!125 = !{i64 357}
!126 = !{i64 356}
!127 = !{i64 355}
!128 = !{i64 354}
!129 = !{i64 353}
!130 = !{i64 364}
!131 = !{i64 351}
!132 = !{i64 350}
!133 = !{i64 349}
!134 = !{i64 348}
!135 = !{i64 346}
!136 = !{i64 224}
!137 = !{i64 299}
!138 = !{i64 343}
!139 = !{i64 342}
!140 = !{i64 231}
!141 = !{i64 153}
!142 = !{i64 298}
!143 = !{i64 301}
!144 = !{i64 302}
!145 = !{i64 489}
!146 = !{i64 488}
!147 = !{i64 487}
!148 = !{i64 184}
!149 = !{i64 46}
!150 = !{i64 21}
!151 = !{i64 202}
!152 = !{i64 477}
!153 = !{i64 476}
!154 = !{i64 474}
!155 = !{i64 471}
!156 = !{i64 250}
!157 = !{i64 245}
!158 = !{i64 243}
!159 = !{i64 304}
!160 = !{i64 241}
!161 = !{i64 470}
!162 = !{i64 469}
!163 = !{i64 244}
!164 = !{i64 154}
!165 = !{i64 509}
!166 = !{i64 522}
!167 = !{i64 518}
!168 = !{i64 23}
!169 = !{i64 517}
!170 = !{i64 186}
!171 = !{i64 187}
!172 = !{i64 516}
!173 = !{i64 515}
!174 = !{i64 253}
!175 = !{i64 513}
!176 = !{i64 251}
!177 = !{i64 9}
!178 = !{i64 208}
!179 = !{i64 524}
!180 = !{i64 93}
!181 = !{i64 508}
!182 = !{i64 13}
!183 = !{i64 111}
!184 = !{i64 77}
!185 = !{i64 128}
!186 = !{i64 209}
!187 = !{i64 57}
!188 = !{i64 134}
!189 = !{i64 497}
!190 = !{i64 496}
!191 = !{i64 437}
!192 = !{i64 436}
!193 = !{i64 435}
!194 = !{i64 430}
!195 = !{i64 429}
!196 = !{i64 428}
!197 = !{i64 427}
!198 = !{i64 425}
!199 = !{i64 420}
!200 = !{i64 419}
!201 = !{i64 416}
!202 = !{i64 414}
!203 = !{i64 461}
!204 = !{i64 459}
!205 = !{i64 440}
!206 = !{i64 439}
!207 = !{i64 441}
!208 = !{i64 442}
!209 = !{i64 443}
!210 = !{i64 444}
!211 = !{i64 445}
!212 = !{i64 446}
!213 = !{i64 447}
!214 = !{i64 448}
!215 = !{i64 506}
!216 = !{i64 505}
!217 = !{i64 503}
!218 = !{i64 502}
!219 = !{i64 501}
!220 = !{i64 449}
!221 = !{i64 450}
!222 = !{i64 451}
!223 = !{i64 467}
!224 = !{i64 453}
!225 = !{i64 454}
!226 = !{i64 455}
!227 = !{i64 456}
!228 = !{i64 457}
!229 = !{i64 458}
!230 = !{i64 460}
!231 = !{i64 462}
!232 = !{i64 463}
!233 = !{i64 464}
!234 = !{i64 465}
!235 = !{i64 466}
!236 = !{i64 452}
!237 = !{i64 411}
!238 = !{i64 412}
!239 = !{i64 413}
!240 = !{i64 258}
!241 = !{i64 415}
!242 = !{i64 64}
!243 = !{i64 417}
!244 = !{i64 418}
!245 = !{i64 109}
!246 = !{i64 212}
!247 = !{i64 256}
!248 = !{i64 421}
!249 = !{i64 422}
!250 = !{i64 423}
!251 = !{i64 438}
!252 = !{i64 143}
!253 = !{i64 426}
!254 = !{i64 55}
!255 = !{i64 203}
!256 = !{i64 73}
!257 = !{i64 431}
!258 = !{i64 432}
!259 = !{i64 433}
!260 = !{i64 196}
!261 = !{i64 169}
!262 = !{i64 434}
!263 = !{i64 195}
!264 = !{i64 34}
!265 = !{i64 481}
!266 = !{i64 198}
!267 = !{i64 223}
!268 = !{i64 498}
!269 = !{i64 207}
!270 = !{i64 499}
!271 = !{i64 219}
!272 = !{i64 216}
!273 = !{i64 504}
!274 = !{i64 112}
!275 = !{i64 180}
!276 = !{i64 507}
!277 = !{i64 56}
!278 = !{i64 255}
!279 = !{i64 81}
!280 = !{i64 510}
!281 = !{i64 511}
!282 = !{i64 79}
!283 = !{i64 512}
!284 = !{i64 175}
!285 = !{i64 514}
!286 = !{i64 137}
!287 = !{i64 188}
!288 = !{i64 138}
!289 = !{i64 183}
!290 = !{i64 139}
!291 = !{i64 519}
!292 = !{i64 520}
!293 = !{i64 521}
!294 = !{i64 157}
!295 = !{i64 523}
!296 = !{i64 468}
!297 = !{i64 148}
!298 = !{i64 472}
!299 = !{i64 473}
!300 = !{i64 246}
!301 = !{i64 475}
!302 = !{i64 102}
!303 = !{i64 30}
!304 = !{i64 478}
!305 = !{i64 161}
!306 = !{i64 485}
!307 = !{i64 480}
!308 = !{i64 495}
!309 = !{i64 482}
!310 = !{i64 479}
!311 = !{i64 483}
!312 = !{i64 484}
!313 = !{i64 486}
!314 = !{i64 87}
!315 = !{i64 155}
!316 = !{i64 199}
!317 = !{i64 490}
!318 = !{i64 492}
!319 = !{i64 493}
!320 = !{i64 494}
!321 = !{i64 373}
!322 = !{i64 374}
!323 = !{i64 387}
!324 = !{i64 377}
!325 = !{i64 378}
!326 = !{i64 379}
!327 = !{i64 181}
!328 = !{i64 380}
!329 = !{i64 24}
!330 = !{i64 197}
!331 = !{i64 386}
!332 = !{i64 382}
!333 = !{i64 376}
!334 = !{i64 371}
!335 = !{i64 370}
!336 = !{i64 369}
!337 = !{i64 367}
!338 = !{i64 365}
!339 = !{i64 408}
!340 = !{i64 407}
!341 = !{i64 405}
!342 = !{i64 403}
!343 = !{i64 115}
!344 = !{i64 395}
!345 = !{i64 389}
!346 = !{i64 388}
!347 = !{i64 335}
!348 = !{i64 328}
!349 = !{i64 325}
!350 = !{i64 359}
!351 = !{i64 347}
!352 = !{i64 345}
!353 = !{i64 210}
!354 = !{i64 42}
!355 = !{i64 315}
!356 = !{i64 788}
!357 = !{i64 787}
!358 = !{i64 211}
!359 = !{i64 786}
!360 = !{i64 785}
!361 = !{i64 784}
!362 = !{i64 783}
!363 = !{i64 144}
!364 = !{i64 782}
!365 = !{i64 159}
!366 = !{i64 261}
!367 = !{i64 781}
!368 = !{i64 205}
!369 = !{i64 780}
!370 = !{i64 15}
!371 = !{i64 779}
!372 = !{i64 151}
!373 = !{i64 103}
!374 = !{i64 778}
!375 = !{i64 491}
!376 = !{i64 789}
!377 = !{i64 775}
!378 = !{i64 776}
!379 = !{i64 774}
!380 = !{i64 773}
!381 = !{i64 85}
!382 = !{i64 772}
!383 = !{i64 771}
!384 = !{i64 770}
!385 = !{i64 769}
!386 = !{i64 768}
!387 = !{i64 152}
!388 = !{i64 767}
!389 = !{i64 801}
!390 = !{i64 813}
!391 = !{i64 8}
!392 = !{i64 236}
!393 = !{i64 235}
!394 = !{i64 812}
!395 = !{i64 811}
!396 = !{i64 810}
!397 = !{i64 809}
!398 = !{i64 808}
!399 = !{i64 234}
!400 = !{i64 807}
!401 = !{i64 806}
!402 = !{i64 805}
!403 = !{i64 17}
!404 = !{i64 166}
!405 = !{i64 95}
!406 = !{i64 232}
!407 = !{i64 179}
!408 = !{i64 165}
!409 = !{i64 19}
!410 = !{i64 35}
!411 = !{i64 52}
!412 = !{i64 803}
!413 = !{i64 257}
!414 = !{i64 279}
!415 = !{i64 802}
!416 = !{i64 814}
!417 = !{i64 800}
!418 = !{i64 799}
!419 = !{i64 78}
!420 = !{i64 798}
!421 = !{i64 536}
!422 = !{i64 797}
!423 = !{i64 796}
!424 = !{i64 795}
!425 = !{i64 794}
!426 = !{i64 793}
!427 = !{i64 792}
!428 = !{i64 791}
!429 = !{i64 804}
!430 = !{i64 790}
!431 = !{i64 41}
!432 = !{i64 777}
!433 = !{i64 740}
!434 = !{i64 739}
!435 = !{i64 738}
!436 = !{i64 737}
!437 = !{i64 736}
!438 = !{i64 735}
!439 = !{i64 276}
!440 = !{i64 127}
!441 = !{i64 110}
!442 = !{i64 734}
!443 = !{i64 733}
!444 = !{i64 732}
!445 = !{i64 731}
!446 = !{i64 730}
!447 = !{i64 741}
!448 = !{i64 728}
!449 = !{i64 409}
!450 = !{i64 727}
!451 = !{i64 726}
!452 = !{i64 204}
!453 = !{i64 226}
!454 = !{i64 725}
!455 = !{i64 280}
!456 = !{i64 270}
!457 = !{i64 724}
!458 = !{i64 723}
!459 = !{i64 61}
!460 = !{i64 267}
!461 = !{i64 266}
!462 = !{i64 26}
!463 = !{i64 158}
!464 = !{i64 5}
!465 = !{i64 722}
!466 = !{i64 721}
!467 = !{i64 156}
!468 = !{i64 263}
!469 = !{i64 106}
!470 = !{i64 252}
!471 = !{i64 720}
!472 = !{i64 719}
!473 = !{i64 718}
!474 = !{i64 753}
!475 = !{i64 764}
!476 = !{i64 264}
!477 = !{i64 272}
!478 = !{i64 344}
!479 = !{i64 129}
!480 = !{i64 47}
!481 = !{i64 74}
!482 = !{i64 225}
!483 = !{i64 361}
!484 = !{i64 352}
!485 = !{i64 363}
!486 = !{i64 274}
!487 = !{i64 275}
!488 = !{i64 65}
!489 = !{i64 227}
!490 = !{i64 326}
!491 = !{i64 172}
!492 = !{i64 330}
!493 = !{i64 341}
!494 = !{i64 332}
!495 = !{i64 333}
!496 = !{i64 334}
!497 = !{i64 98}
!498 = !{i64 337}
!499 = !{i64 123}
!500 = !{i64 340}
!501 = !{i64 228}
!502 = !{i64 277}
!503 = !{i64 390}
!504 = !{i64 229}
!505 = !{i64 393}
!506 = !{i64 200}
!507 = !{i64 230}
!508 = !{i64 410}
!509 = !{i64 399}
!510 = !{i64 400}
!511 = !{i64 401}
!512 = !{i64 404}
!513 = !{i64 372}
!514 = !{i64 140}
!515 = !{i64 742}
!516 = !{i64 826}
!517 = !{i64 885}
!518 = !{i64 884}
!519 = !{i64 883}
!520 = !{i64 882}
!521 = !{i64 881}
!522 = !{i64 880}
!523 = !{i64 879}
!524 = !{i64 878}
!525 = !{i64 877}
!526 = !{i64 876}
!527 = !{i64 875}
!528 = !{i64 886}
!529 = !{i64 174}
!530 = !{i64 873}
!531 = !{i64 872}
!532 = !{i64 871}
!533 = !{i64 870}
!534 = !{i64 869}
!535 = !{i64 868}
!536 = !{i64 867}
!537 = !{i64 866}
!538 = !{i64 865}
!539 = !{i64 864}
!540 = !{i64 146}
!541 = !{i64 220}
!542 = !{i64 863}
!543 = !{i64 898}
!544 = !{i64 910}
!545 = !{i64 909}
!546 = !{i64 908}
!547 = !{i64 907}
!548 = !{i64 906}
!549 = !{i64 171}
!550 = !{i64 905}
!551 = !{i64 904}
!552 = !{i64 903}
!553 = !{i64 902}
!554 = !{i64 901}
!555 = !{i64 900}
!556 = !{i64 107}
!557 = !{i64 899}
!558 = !{i64 911}
!559 = !{i64 28}
!560 = !{i64 147}
!561 = !{i64 260}
!562 = !{!"1"}
!563 = !{i64 895}
!564 = !{i64 894}
!565 = !{i64 893}
!566 = !{i64 892}
!567 = !{i64 891}
!568 = !{i64 890}
!569 = !{i64 889}
!570 = !{i64 888}
!571 = !{i64 887}
!572 = !{i64 874}
!573 = !{i64 837}
!574 = !{i64 836}
!575 = !{i64 835}
!576 = !{i64 834}
!577 = !{i64 833}
!578 = !{i64 832}
!579 = !{i64 831}
!580 = !{i64 830}
!581 = !{i64 829}
!582 = !{i64 828}
!583 = !{i64 827}
!584 = !{i64 838}
!585 = !{i64 825}
!586 = !{i64 824}
!587 = !{i64 1}
!588 = !{i64 823}
!589 = !{i64 170}
!590 = !{i64 822}
!591 = !{i64 821}
!592 = !{i64 897}
!593 = !{i64 896}
!594 = !{i64 820}
!595 = !{i64 819}
!596 = !{i64 818}
!597 = !{i64 817}
!598 = !{i64 816}
!599 = !{i64 815}
!600 = !{i64 850}
!601 = !{i64 861}
!602 = !{i64 860}
!603 = !{i64 859}
!604 = !{i64 858}
!605 = !{i64 857}
!606 = !{i64 856}
!607 = !{i64 855}
!608 = !{i64 854}
!609 = !{i64 853}
!610 = !{i64 39}
!611 = !{i64 58}
!612 = !{i64 135}
!613 = !{i64 852}
!614 = !{i64 851}
!615 = !{i64 862}
!616 = !{i64 849}
!617 = !{i64 848}
!618 = !{i64 847}
!619 = !{i64 846}
!620 = !{i64 296}
!621 = !{i64 845}
!622 = !{i64 844}
!623 = !{i64 843}
!624 = !{i64 842}
!625 = !{i64 145}
!626 = !{i64 43}
!627 = !{i64 841}
!628 = !{i64 221}
!629 = !{i64 840}
!630 = !{i64 63}
!631 = !{i64 49}
!632 = !{i64 214}
!633 = !{i64 62}
!634 = !{i64 191}
!635 = !{i64 290}
!636 = !{i64 289}
!637 = !{i64 297}
!638 = !{i64 839}
!639 = !{i64 108}
!640 = !{i64 595}
!641 = !{i64 594}
!642 = !{i64 593}
!643 = !{i64 592}
!644 = !{i64 206}
!645 = !{i64 283}
!646 = !{i64 591}
!647 = !{i64 590}
!648 = !{i64 589}
!649 = !{i64 588}
!650 = !{i64 587}
!651 = !{i64 215}
!652 = !{i64 586}
!653 = !{i64 585}
!654 = !{i64 71}
!655 = !{i64 66}
!656 = !{i64 596}
!657 = !{i64 583}
!658 = !{i64 582}
!659 = !{i64 581}
!660 = !{i64 580}
!661 = !{i64 22}
!662 = !{i64 136}
!663 = !{i64 313}
!664 = !{i64 578}
!665 = !{i64 577}
!666 = !{i64 311}
!667 = !{i64 576}
!668 = !{i64 575}
!669 = !{i64 310}
!670 = !{i64 574}
!671 = !{i64 248}
!672 = !{i64 247}
!673 = !{i64 178}
!674 = !{i64 573}
!675 = !{i64 763}
!676 = !{i64 762}
!677 = !{i64 761}
!678 = !{i64 760}
!679 = !{i64 759}
!680 = !{i64 758}
!681 = !{i64 757}
!682 = !{i64 756}
!683 = !{i64 755}
!684 = !{i64 754}
!685 = !{i64 765}
!686 = !{i64 752}
!687 = !{i64 751}
!688 = !{i64 750}
!689 = !{i64 749}
!690 = !{i64 748}
!691 = !{i64 747}
!692 = !{i64 746}
!693 = !{i64 745}
!694 = !{i64 744}
!695 = !{i64 278}
!696 = !{i64 51}
!697 = !{i64 20}
!698 = !{i64 743}
!699 = !{i64 615}
!700 = !{i64 579}
!701 = !{i64 614}
!702 = !{i64 613}
!703 = !{i64 612}
!704 = !{i64 611}
!705 = !{i64 610}
!706 = !{i64 609}
!707 = !{i64 620}
!708 = !{i64 607}
!709 = !{i64 606}
!710 = !{i64 605}
!711 = !{i64 604}
!712 = !{i64 603}
!713 = !{i64 729}
!714 = !{i64 602}
!715 = !{i64 601}
!716 = !{i64 600}
!717 = !{i64 599}
!718 = !{i64 598}
!719 = !{i64 597}
!720 = !{i64 584}
!721 = !{i64 547}
!722 = !{i64 201}
!723 = !{i64 545}
!724 = !{i64 546}
!725 = !{i64 544}
!726 = !{i64 543}
!727 = !{i64 542}
!728 = !{i64 541}
!729 = !{i64 540}
!730 = !{i64 539}
!731 = !{i64 193}
!732 = !{i64 538}
!733 = !{i64 537}
!734 = !{i64 548}
!735 = !{i64 535}
!736 = !{i64 300}
!737 = !{i64 534}
!738 = !{i64 533}
!739 = !{i64 532}
!740 = !{i64 531}
!741 = !{i64 530}
!742 = !{i64 163}
!743 = !{i64 132}
!744 = !{i64 160}
!745 = !{i64 529}
!746 = !{i64 105}
!747 = !{i64 528}
!748 = !{i64 11}
!749 = !{i64 527}
!750 = !{i64 526}
!751 = !{i64 525}
!752 = !{i64 560}
!753 = !{i64 571}
!754 = !{i64 570}
!755 = !{i64 569}
!756 = !{i64 568}
!757 = !{i64 567}
!758 = !{i64 566}
!759 = !{i64 565}
!760 = !{i64 564}
!761 = !{i64 306}
!762 = !{i64 563}
!763 = !{i64 562}
!764 = !{i64 561}
!765 = !{i64 572}
!766 = !{i64 559}
!767 = !{i64 558}
!768 = !{i64 557}
!769 = !{i64 556}
!770 = !{i64 555}
!771 = !{i64 281}
!772 = !{i64 282}
!773 = !{i64 554}
!774 = !{i64 553}
!775 = !{i64 552}
!776 = !{i64 551}
!777 = !{i64 550}
!778 = !{i64 549}
!779 = !{i64 632}
!780 = !{i64 690}
!781 = !{i64 689}
!782 = !{i64 688}
!783 = !{i64 687}
!784 = !{i64 691}
!785 = !{i64 291}
!786 = !{i64 294}
!787 = !{i64 167}
!788 = !{i64 295}
!789 = !{i64 686}
!790 = !{i64 685}
!791 = !{i64 684}
!792 = !{i64 683}
!793 = !{i64 682}
!794 = !{i64 681}
!795 = !{i64 692}
!796 = !{i64 679}
!797 = !{i64 678}
!798 = !{i64 677}
!799 = !{i64 233}
!800 = !{i64 164}
!801 = !{i64 119}
!802 = !{i64 124}
!803 = !{i64 676}
!804 = !{i64 766}
!805 = !{i64 674}
!806 = !{i64 673}
!807 = !{i64 672}
!808 = !{i64 675}
!809 = !{i64 671}
!810 = !{i64 670}
!811 = !{i64 288}
!812 = !{i64 31}
!813 = !{i64 669}
!814 = !{i64 320}
!815 = !{i64 704}
!816 = !{i64 716}
!817 = !{i64 88}
!818 = !{i64 715}
!819 = !{i64 714}
!820 = !{i64 177}
!821 = !{i64 713}
!822 = !{i64 712}
!823 = !{i64 711}
!824 = !{i64 710}
!825 = !{i64 709}
!826 = !{i64 708}
!827 = !{i64 707}
!828 = !{i64 37}
!829 = !{i64 706}
!830 = !{i64 705}
!831 = !{i64 101}
!832 = !{i64 126}
!833 = !{i64 717}
!834 = !{i64 121}
!835 = !{i64 703}
!836 = !{i64 702}
!837 = !{i64 33}
!838 = !{i64 701}
!839 = !{i64 700}
!840 = !{i64 699}
!841 = !{i64 698}
!842 = !{i64 697}
!843 = !{i64 696}
!844 = !{i64 695}
!845 = !{i64 694}
!846 = !{i64 693}
!847 = !{i64 680}
!848 = !{i64 643}
!849 = !{i64 642}
!850 = !{i64 54}
!851 = !{i64 641}
!852 = !{i64 640}
!853 = !{i64 68}
!854 = !{i64 237}
!855 = !{i64 639}
!856 = !{i64 84}
!857 = !{i64 638}
!858 = !{i64 637}
!859 = !{i64 608}
!860 = !{i64 619}
!861 = !{i64 618}
!862 = !{i64 617}
!863 = !{i64 616}
!864 = !{i64 16}
!865 = !{i64 636}
!866 = !{i64 635}
!867 = !{i64 634}
!868 = !{i64 633}
!869 = !{i64 644}
!870 = !{i64 631}
!871 = !{i64 630}
!872 = !{i64 27}
!873 = !{i64 629}
!874 = !{i64 4}
!875 = !{i64 628}
!876 = !{i64 627}
!877 = !{i64 626}
!878 = !{i64 625}
!879 = !{i64 624}
!880 = !{i64 623}
!881 = !{i64 622}
!882 = !{i64 12}
!883 = !{i64 621}
!884 = !{i64 254}
!885 = !{i64 656}
!886 = !{i64 667}
!887 = !{i64 666}
!888 = !{i64 665}
!889 = !{i64 664}
!890 = !{i64 663}
!891 = !{i64 662}
!892 = !{i64 661}
!893 = !{i64 660}
!894 = !{i64 659}
!895 = !{i64 658}
!896 = !{i64 265}
!897 = !{i64 7}
!898 = !{i64 3}
!899 = !{i64 6}
!900 = !{i64 657}
!901 = !{i64 36}
!902 = !{i64 194}
!903 = !{i64 100}
!904 = !{i64 668}
!905 = !{i64 655}
!906 = !{i64 654}
!907 = !{i64 653}
!908 = !{i64 262}
!909 = !{i64 652}
!910 = !{i64 651}
!911 = !{i64 650}
!912 = !{i64 649}
!913 = !{i64 648}
!914 = !{i64 647}
!915 = !{i64 646}
!916 = !{i64 645}
