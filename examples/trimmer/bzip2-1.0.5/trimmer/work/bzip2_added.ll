; ModuleID = './work/bzip2_added.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.zzzz = type { i8*, %struct.zzzz* }
%struct.UInt64 = type { [8 x i8] }
%struct.bz_stream = type { i8*, i32, i32, i32, i8*, i32, i32, i32, i8*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8* }
%struct.EState = type { %struct.bz_stream*, i32, i32, i32, i32*, i32*, i32*, i32, i32*, i8*, i16*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i8], [256 x i8], i32, i32, i32, i32, i32, i32, i32, i32, [258 x i32], [18002 x i8], [18002 x i8], [6 x [258 x i8]], [6 x [258 x i32]], [6 x [258 x i32]], [258 x [4 x i32]] }
%struct.DState = type { %struct.bz_stream*, i32, i8, i32, i8, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [256 x i32], i32, [257 x i32], [257 x i32], i32*, i16*, i8*, i32, i32, i32, i32, i32, [256 x i8], [16 x i8], [256 x i8], [4096 x i8], [16 x i32], [18002 x i8], [18002 x i8], [6 x [258 x i8]], [6 x [258 x i32]], [6 x [258 x i32]], [6 x [258 x i32]], [6 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32* }
%struct.bzFile = type { %struct._IO_FILE*, [5000 x i8], i32, i8, %struct.bz_stream, i32, i8 }

@zSuffix = dso_local global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0)], align 16, !track !0
@.str = private unnamed_addr constant [5 x i8] c".bz2\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c".bz\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c".tbz2\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c".tbz\00", align 1
@unzSuffix = dso_local global [4 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [5 x i8] c".tar\00", align 1
@outputHandleJustInCase = common dso_local global %struct._IO_FILE* null, align 8, !track !1
@smallMode = common dso_local global i8 0, align 1
@keepInputFiles = common dso_local global i8 0, align 1
@forceOverwrite = common dso_local global i8 0, align 1
@noisy = common dso_local global i8 0, align 1
@verbosity = common dso_local global i32 0, align 4
@blockSize100k = common dso_local global i32 0, align 4
@testFailsExist = common dso_local global i8 0, align 1
@unzFailsExist = common dso_local global i8 0, align 1
@numFileNames = common dso_local global i32 0, align 4
@numFilesProcessed = common dso_local global i32 0, align 4
@workFactor = common dso_local global i32 0, align 4
@deleteOutputOnInterrupt = common dso_local global i8 0, align 1
@exitValue = common dso_local global i32 0, align 4
@inName = common dso_local global [1034 x i8] zeroinitializer, align 16, !track !2
@outName = common dso_local global [1034 x i8] zeroinitializer, align 16, !track !3
@progNameReally = common dso_local global [1034 x i8] zeroinitializer, align 16, !track !4
@progName = common dso_local global i8* null, align 8, !track !5
@longestFileName = common dso_local global i32 0, align 4
@srcMode = common dso_local global i32 0, align 4
@opMode = common dso_local global i32 0, align 4
@tmpName = common dso_local global [1034 x i8] zeroinitializer, align 16
@.str.6 = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"BZIP2\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"BZIP\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"unzip\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"UNZIP\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"z2cat\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"Z2CAT\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"zcat\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"ZCAT\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.16 = private unnamed_addr constant [19 x i8] c"%s: Bad flag `%s'\0A\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"--stdout\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"--decompress\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"--compress\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"--force\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"--test\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"--keep\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"--small\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"--quiet\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"--license\00", align 1
@.str.27 = private unnamed_addr constant [14 x i8] c"--exponential\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"--repetitive-best\00", align 1
@.str.29 = private unnamed_addr constant [18 x i8] c"--repetitive-fast\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"--fast\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"--best\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"--verbose\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.34 = private unnamed_addr constant [40 x i8] c"%s: -c and -t cannot be used together.\0A\00", align 1
@.str.35 = private unnamed_addr constant [113 x i8] c"\0AYou can use the `bzip2recover' program to attempt to recover\0Adata from undamaged sections of corrupted files.\0A\0A\00", align 1
@.str.94 = private unnamed_addr constant [18 x i8] c"testf: bad modes\0A\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c"(stdin)\00", align 1
@.str.56 = private unnamed_addr constant [39 x i8] c"%s: There are no files matching `%s'.\0A\00", align 1
@.str.95 = private unnamed_addr constant [30 x i8] c"%s: Can't open input %s: %s.\0A\00", align 1
@.str.59 = private unnamed_addr constant [35 x i8] c"%s: Input file %s is a directory.\0A\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8
@.str.82 = private unnamed_addr constant [51 x i8] c"%s: I won't read compressed data from a terminal.\0A\00", align 1
@.str.65 = private unnamed_addr constant [34 x i8] c"%s: For help, type: `%s --help'.\0A\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.83 = private unnamed_addr constant [34 x i8] c"%s: Can't open input file %s:%s.\0A\00", align 1
@.str.96 = private unnamed_addr constant [19 x i8] c"testf: bad srcMode\00", align 1
@.str.70 = private unnamed_addr constant [7 x i8] c"  %s: \00", align 1
@.str.97 = private unnamed_addr constant [4 x i8] c"ok\0A\00", align 1
@.str.98 = private unnamed_addr constant [21 x i8] c"test:bzReadGetUnused\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"\0A    \00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"%s: %s: \00", align 1
@.str.100 = private unnamed_addr constant [36 x i8] c"data integrity (CRC) error in data\0A\00", align 1
@.str.101 = private unnamed_addr constant [24 x i8] c"file ends unexpectedly\0A\00", align 1
@.str.102 = private unnamed_addr constant [46 x i8] c"bad magic number (file not created by bzip2)\0A\00", align 1
@.str.103 = private unnamed_addr constant [36 x i8] c"trailing garbage after EOF ignored\0A\00", align 1
@.str.104 = private unnamed_addr constant [22 x i8] c"test:unexpected error\00", align 1
@.str.48 = private unnamed_addr constant [38 x i8] c"\0A%s: couldn't allocate enough memory\0A\00", align 1
@.str.39 = private unnamed_addr constant [44 x i8] c"%s: Deleting output file %s, if it exists.\0A\00", align 1
@.str.40 = private unnamed_addr constant [59 x i8] c"%s: WARNING: deletion of output file (apparently) failed.\0A\00", align 1
@.str.41 = private unnamed_addr constant [49 x i8] c"%s: WARNING: deletion of output file suppressed\0A\00", align 1
@.str.42 = private unnamed_addr constant [56 x i8] c"%s:    since input file no longer exists.  Output file\0A\00", align 1
@.str.43 = private unnamed_addr constant [32 x i8] c"%s:    `%s' may be incomplete.\0A\00", align 1
@.str.44 = private unnamed_addr constant [61 x i8] c"%s:    I suggest doing an integrity test (bzip2 -tv) of it.\0A\00", align 1
@.str.45 = private unnamed_addr constant [110 x i8] c"%s: WARNING: some files have not been processed:\0A%s:    %d specified on command line, %d not processed yet.\0A\0A\00", align 1
@.str.38 = private unnamed_addr constant [36 x i8] c"\09Input file = %s, output file = %s\0A\00", align 1
@.str.78 = private unnamed_addr constant [65 x i8] c"\0A%s: I/O or other error, bailing out.  Possible reason follows.\0A\00", align 1
@.str.77 = private unnamed_addr constant [236 x i8] c"bzip2: I'm not configured correctly for this platform!\0A\09I require Int32, Int16 and Char to have sizes\0A\09of 4, 2 and 1 bytes to run properly, and they don't.\0A\09Probably you can fix this by defining them correctly,\0A\09and recompiling.  Bye!\0A\00", align 1
@.str.72 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.71 = private unnamed_addr constant [109 x i8] c"\0A%s: PANIC -- internal consistency error:\0A\09%s\0A\09This is a BUG.  Please report it to me at:\0A\09jseward@bzip.org\0A\00", align 1
@.str.79 = private unnamed_addr constant [23 x i8] c"uncompress: bad modes\0A\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c"(stdout)\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c".out\00", align 1
@.str.57 = private unnamed_addr constant [35 x i8] c"%s: Can't open input file %s: %s.\0A\00", align 1
@.str.60 = private unnamed_addr constant [41 x i8] c"%s: Input file %s is not a normal file.\0A\00", align 1
@.str.81 = private unnamed_addr constant [50 x i8] c"%s: Can't guess original name for %s -- using %s\0A\00", align 1
@.str.61 = private unnamed_addr constant [36 x i8] c"%s: Output file %s already exists.\0A\00", align 1
@.str.63 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.62 = private unnamed_addr constant [40 x i8] c"%s: Input file %s has %d other link%s.\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.67 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.68 = private unnamed_addr constant [38 x i8] c"%s: Can't create output file %s: %s.\0A\00", align 1
@.str.84 = private unnamed_addr constant [24 x i8] c"uncompress: bad srcMode\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.86 = private unnamed_addr constant [19 x i8] c"not a bzip2 file.\0A\00", align 1
@.str.87 = private unnamed_addr constant [29 x i8] c"%s: %s is not a bzip2 file.\0A\00", align 1
@fileMetaInfo = internal global %struct.stat zeroinitializer, align 8
@.str.88 = private unnamed_addr constant [27 x i8] c"decompress:bzReadGetUnused\00", align 1
@.str.90 = private unnamed_addr constant [45 x i8] c"\0A%s: %s: trailing garbage after EOF ignored\0A\00", align 1
@.str.91 = private unnamed_addr constant [28 x i8] c"decompress:unexpected error\00", align 1
@.str.93 = private unnamed_addr constant [95 x i8] c"\0A%s: Compressed file ends unexpectedly;\0A\09perhaps it is corrupted?  *Possible* reason follows.\0A\00", align 1
@.str.46 = private unnamed_addr constant [241 x i8] c"\0AIt is possible that the compressed file(s) have become corrupted.\0AYou can use the -tvv option to test integrity of such files.\0A\0AYou can use the `bzip2recover' program to attempt to recover\0Adata from undamaged sections of corrupted files.\0A\0A\00", align 1
@.str.92 = private unnamed_addr constant [47 x i8] c"\0A%s: Data integrity error when decompressing.\0A\00", align 1
@.str.53 = private unnamed_addr constant [21 x i8] c"compress: bad modes\0A\00", align 1
@.str.58 = private unnamed_addr constant [42 x i8] c"%s: Input file %s already has %s suffix.\0A\00", align 1
@.str.64 = private unnamed_addr constant [50 x i8] c"%s: I won't write compressed data to a terminal.\0A\00", align 1
@.str.69 = private unnamed_addr constant [22 x i8] c"compress: bad srcMode\00", align 1
@.str.73 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.74 = private unnamed_addr constant [22 x i8] c" no data compressed.\0A\00", align 1
@.str.75 = private unnamed_addr constant [57 x i8] c"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\0A\00", align 1
@.str.76 = private unnamed_addr constant [26 x i8] c"compress:unexpected error\00", align 1
@.str.52 = private unnamed_addr constant [45 x i8] c"\0A%s: Control-C or similar caught, quitting.\0A\00", align 1
@.str.51 = private unnamed_addr constant [49 x i8] c"%s: %s is redundant in versions 0.9.5 and above\0A\00", align 1
@.str.50 = private unnamed_addr constant [1230 x i8] c"bzip2, a block-sorting file compressor.  Version %s.\0A\0A   usage: %s [flags and input files in any order]\0A\0A   -h --help           print this message\0A   -d --decompress     force decompression\0A   -z --compress       force compression\0A   -k --keep           keep (don't delete) input files\0A   -f --force          overwrite existing output files\0A   -t --test           test compressed file integrity\0A   -c --stdout         output to standard out\0A   -q --quiet          suppress noncritical error messages\0A   -v --verbose        be verbose (a 2nd -v gives more)\0A   -L --license        display software version & license\0A   -V --version        display software version & license\0A   -s --small          use less memory (at most 2500k)\0A   -1 .. -9            set block size to 100k .. 900k\0A   --fast              alias for -1\0A   --best              alias for -9\0A\0A   If invoked as `bzip2', default action is to compress.\0A              as `bunzip2',  default action is to decompress.\0A              as `bzcat', default action is to decompress to stdout.\0A\0A   If no file names are given, bzip2 compresses or decompresses\0A   from standard input to standard output.  You can combine\0A   short flags, so `-v -4' means the same as -v4 or -4v, &c.\0A\0A\00", align 1
@.str.49 = private unnamed_addr constant [531 x i8] c"bzip2, a block-sorting file compressor.  Version %s.\0A   \0A   Copyright (C) 1996-2007 by Julian Seward.\0A   \0A   This program is free software; you can redistribute it and/or modify\0A   it under the terms set out in the LICENSE file, which is included\0A   in the bzip2-1.0.5 source distribution.\0A   \0A   This program is distributed in the hope that it will be useful,\0A   but WITHOUT ANY WARRANTY; without even the implied warranty of\0A   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\0A   LICENSE file for more details.\0A   \0A\00", align 1
@.str.47 = private unnamed_addr constant [120 x i8] c"bzip2: file name\0A`%s'\0Ais suspiciously (more than %d chars) long.\0ATry using a reasonable file name instead.  Sorry! :-)\0A\00", align 1
@.str.36 = private unnamed_addr constant [869 x i8] c"\0A%s: Caught a SIGSEGV or SIGBUS whilst compressing.\0A\0A   Possible causes are (most likely first):\0A   (1) This computer has unreliable memory or cache hardware\0A       (a surprisingly common problem; try a different machine.)\0A   (2) A bug in the compiler used to create this executable\0A       (unlikely, if you didn't compile bzip2 yourself.)\0A   (3) A real bug in bzip2 -- I hope this should never be the case.\0A   The user's manual, Section 4.3, has more info on (1) and (2).\0A   \0A   If you suspect this is a bug in bzip2, or are unsure about (1)\0A   or (2), feel free to report it to me at: jseward@bzip.org.\0A   Section 4.3 of the user's manual describes the info a useful\0A   bug report should have.  If the manual is available on your\0A   system, please try and read it before mailing me.  If you don't\0A   have the manual or can't be bothered to read it, mail me anyway.\0A\0A\00", align 1
@.str.37 = private unnamed_addr constant [996 x i8] c"\0A%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\0A\0A   Possible causes are (most likely first):\0A   (1) The compressed data is corrupted, and bzip2's usual checks\0A       failed to detect this.  Try bzip2 -tvv my_file.bz2.\0A   (2) This computer has unreliable memory or cache hardware\0A       (a surprisingly common problem; try a different machine.)\0A   (3) A bug in the compiler used to create this executable\0A       (unlikely, if you didn't compile bzip2 yourself.)\0A   (4) A real bug in bzip2 -- I hope this should never be the case.\0A   The user's manual, Section 4.3, has more info on (2) and (3).\0A   \0A   If you suspect this is a bug in bzip2, or are unsure about (2)\0A   or (3), feel free to report it to me at: jseward@bzip.org.\0A   Section 4.3 of the user's manual describes the info a useful\0A   bug report should have.  If the manual is available on your\0A   system, please try and read it before mailing me.  If you don't\0A   have the manual or can't be bothered to read it, mail me anyway.\0A\0A\00", align 1
@.str.105 = private unnamed_addr constant [443 x i8] c"\0A\0Abzip2/libbzip2: internal error number %d.\0AThis is a bug in bzip2/libbzip2, %s.\0APlease report it to me at: jseward@bzip.org.  If this happened\0Awhen you were using some program which uses libbzip2 as a\0Acomponent, you should also report this bug to the author(s)\0Aof that program.  Please make an effort to report this bug;\0Atimely and accurate bug reports eventually lead to higher\0Aquality software.  Thanks.  Julian Seward, 10 December 2007.\0A\0A\00", align 1
@.str.1.106 = private unnamed_addr constant [1057 x i8] c"\0A*** A special note about internal error number 1007 ***\0A\0AExperience suggests that a common cause of i.e. 1007\0Ais unreliable memory or other hardware.  The 1007 assertion\0Ajust happens to cross-check the results of huge numbers of\0Amemory reads/writes, and so acts (unintendedly) as a stress\0Atest of your memory system.\0A\0AI suggest the following: try compressing the file again,\0Apossibly monitoring progress in detail with the -vv flag.\0A\0A* If the error cannot be reproduced, and/or happens at different\0A  points in compression, you may have a flaky memory system.\0A  Try a memory-test program.  I have used Memtest86\0A  (www.memtest86.com).  At the time of writing it is free (GPLd).\0A  Memtest86 tests memory much more thorougly than your BIOSs\0A  power-on test, and may find failures that the BIOS doesn't.\0A\0A* If the error can be repeatably reproduced, this is a bug in\0A  bzip2, and I would very much like to hear about it.  Please\0A  let me know, and, ideally, save a copy of the file causing the\0A  problem -- without which I will be unable to investigate it.\0A\0A\00", align 1
@.str.5.107 = private unnamed_addr constant [19 x i8] c"1.0.5, 10-Dec-2007\00", align 1
@.str.2.108 = private unnamed_addr constant [18 x i8] c" {0x%08x, 0x%08x}\00", align 1
@.str.3.109 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.4.110 = private unnamed_addr constant [55 x i8] c"\0A    combined CRCs: stored = 0x%08x, computed = 0x%08x\00", align 1
@.str.6.126 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.7.127 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.8.128 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.9.129 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@bzerrorstrings = internal global [16 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10.130, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11.131, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12.132, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13.133, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14.134, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15.135, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16.136, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17.137, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18.138, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19.139, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.140, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.140, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.140, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.140, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.140, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.140, i32 0, i32 0)], align 16
@.str.10.130 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.11.131 = private unnamed_addr constant [15 x i8] c"SEQUENCE_ERROR\00", align 1
@.str.12.132 = private unnamed_addr constant [12 x i8] c"PARAM_ERROR\00", align 1
@.str.13.133 = private unnamed_addr constant [10 x i8] c"MEM_ERROR\00", align 1
@.str.14.134 = private unnamed_addr constant [11 x i8] c"DATA_ERROR\00", align 1
@.str.15.135 = private unnamed_addr constant [17 x i8] c"DATA_ERROR_MAGIC\00", align 1
@.str.16.136 = private unnamed_addr constant [9 x i8] c"IO_ERROR\00", align 1
@.str.17.137 = private unnamed_addr constant [15 x i8] c"UNEXPECTED_EOF\00", align 1
@.str.18.138 = private unnamed_addr constant [13 x i8] c"OUTBUFF_FULL\00", align 1
@.str.19.139 = private unnamed_addr constant [13 x i8] c"CONFIG_ERROR\00", align 1
@.str.20.140 = private unnamed_addr constant [4 x i8] c"???\00", align 1
@BZ2_crc32Table = dso_local global [256 x i32] [i32 0, i32 79764919, i32 159529838, i32 222504665, i32 319059676, i32 398814059, i32 445009330, i32 507990021, i32 638119352, i32 583659535, i32 797628118, i32 726387553, i32 890018660, i32 835552979, i32 1015980042, i32 944750013, i32 1276238704, i32 1221641927, i32 1167319070, i32 1095957929, i32 1595256236, i32 1540665371, i32 1452775106, i32 1381403509, i32 1780037320, i32 1859660671, i32 1671105958, i32 1733955601, i32 2031960084, i32 2111593891, i32 1889500026, i32 1952343757, i32 -1742489888, i32 -1662866601, i32 -1851683442, i32 -1788833735, i32 -1960329156, i32 -1880695413, i32 -2103051438, i32 -2040207643, i32 -1104454824, i32 -1159051537, i32 -1213636554, i32 -1284997759, i32 -1389417084, i32 -1444007885, i32 -1532160278, i32 -1603531939, i32 -734892656, i32 -789352409, i32 -575645954, i32 -646886583, i32 -952755380, i32 -1007220997, i32 -827056094, i32 -898286187, i32 -231047128, i32 -151282273, i32 -71779514, i32 -8804623, i32 -515967244, i32 -436212925, i32 -390279782, i32 -327299027, i32 881225847, i32 809987520, i32 1023691545, i32 969234094, i32 662832811, i32 591600412, i32 771767749, i32 717299826, i32 311336399, i32 374308984, i32 453813921, i32 533576470, i32 25881363, i32 88864420, i32 134795389, i32 214552010, i32 2023205639, i32 2086057648, i32 1897238633, i32 1976864222, i32 1804852699, i32 1867694188, i32 1645340341, i32 1724971778, i32 1587496639, i32 1516133128, i32 1461550545, i32 1406951526, i32 1302016099, i32 1230646740, i32 1142491917, i32 1087903418, i32 -1398421865, i32 -1469785312, i32 -1524105735, i32 -1578704818, i32 -1079922613, i32 -1151291908, i32 -1239184603, i32 -1293773166, i32 -1968362705, i32 -1905510760, i32 -2094067647, i32 -2014441994, i32 -1716953613, i32 -1654112188, i32 -1876203875, i32 -1796572374, i32 -525066777, i32 -462094256, i32 -382327159, i32 -302564546, i32 -206542021, i32 -143559028, i32 -97365931, i32 -17609246, i32 -960696225, i32 -1031934488, i32 -817968335, i32 -872425850, i32 -709327229, i32 -780559564, i32 -600130067, i32 -654598054, i32 1762451694, i32 1842216281, i32 1619975040, i32 1682949687, i32 2047383090, i32 2127137669, i32 1938468188, i32 2001449195, i32 1325665622, i32 1271206113, i32 1183200824, i32 1111960463, i32 1543535498, i32 1489069629, i32 1434599652, i32 1363369299, i32 622672798, i32 568075817, i32 748617968, i32 677256519, i32 907627842, i32 853037301, i32 1067152940, i32 995781531, i32 51762726, i32 131386257, i32 177728840, i32 240578815, i32 269590778, i32 349224269, i32 429104020, i32 491947555, i32 -248556018, i32 -168932423, i32 -122852000, i32 -60002089, i32 -500490030, i32 -420856475, i32 -341238852, i32 -278395381, i32 -685261898, i32 -739858943, i32 -559578920, i32 -630940305, i32 -1004286614, i32 -1058877219, i32 -845023740, i32 -916395085, i32 -1119974018, i32 -1174433591, i32 -1262701040, i32 -1333941337, i32 -1371866206, i32 -1426332139, i32 -1481064244, i32 -1552294533, i32 -1690935098, i32 -1611170447, i32 -1833673816, i32 -1770699233, i32 -2009983462, i32 -1930228819, i32 -2119160460, i32 -2056179517, i32 1569362073, i32 1498123566, i32 1409854455, i32 1355396672, i32 1317987909, i32 1246755826, i32 1192025387, i32 1137557660, i32 2072149281, i32 2135122070, i32 1912620623, i32 1992383480, i32 1753615357, i32 1816598090, i32 1627664531, i32 1707420964, i32 295390185, i32 358241886, i32 404320391, i32 483945776, i32 43990325, i32 106832002, i32 186451547, i32 266083308, i32 932423249, i32 861060070, i32 1041341759, i32 986742920, i32 613929101, i32 542559546, i32 756411363, i32 701822548, i32 -978770311, i32 -1050133554, i32 -869589737, i32 -924188512, i32 -693284699, i32 -764654318, i32 -550540341, i32 -605129092, i32 -475935807, i32 -413084042, i32 -366743377, i32 -287118056, i32 -257573603, i32 -194731862, i32 -114850189, i32 -35218492, i32 -1984365303, i32 -1921392450, i32 -2143631769, i32 -2063868976, i32 -1698919467, i32 -1635936670, i32 -1824608069, i32 -1744851700, i32 -1347415887, i32 -1418654458, i32 -1506661409, i32 -1561119128, i32 -1129027987, i32 -1200260134, i32 -1254728445, i32 -1309196108], align 16
@BZ2_rNums = dso_local global [512 x i32] [i32 619, i32 720, i32 127, i32 481, i32 931, i32 816, i32 813, i32 233, i32 566, i32 247, i32 985, i32 724, i32 205, i32 454, i32 863, i32 491, i32 741, i32 242, i32 949, i32 214, i32 733, i32 859, i32 335, i32 708, i32 621, i32 574, i32 73, i32 654, i32 730, i32 472, i32 419, i32 436, i32 278, i32 496, i32 867, i32 210, i32 399, i32 680, i32 480, i32 51, i32 878, i32 465, i32 811, i32 169, i32 869, i32 675, i32 611, i32 697, i32 867, i32 561, i32 862, i32 687, i32 507, i32 283, i32 482, i32 129, i32 807, i32 591, i32 733, i32 623, i32 150, i32 238, i32 59, i32 379, i32 684, i32 877, i32 625, i32 169, i32 643, i32 105, i32 170, i32 607, i32 520, i32 932, i32 727, i32 476, i32 693, i32 425, i32 174, i32 647, i32 73, i32 122, i32 335, i32 530, i32 442, i32 853, i32 695, i32 249, i32 445, i32 515, i32 909, i32 545, i32 703, i32 919, i32 874, i32 474, i32 882, i32 500, i32 594, i32 612, i32 641, i32 801, i32 220, i32 162, i32 819, i32 984, i32 589, i32 513, i32 495, i32 799, i32 161, i32 604, i32 958, i32 533, i32 221, i32 400, i32 386, i32 867, i32 600, i32 782, i32 382, i32 596, i32 414, i32 171, i32 516, i32 375, i32 682, i32 485, i32 911, i32 276, i32 98, i32 553, i32 163, i32 354, i32 666, i32 933, i32 424, i32 341, i32 533, i32 870, i32 227, i32 730, i32 475, i32 186, i32 263, i32 647, i32 537, i32 686, i32 600, i32 224, i32 469, i32 68, i32 770, i32 919, i32 190, i32 373, i32 294, i32 822, i32 808, i32 206, i32 184, i32 943, i32 795, i32 384, i32 383, i32 461, i32 404, i32 758, i32 839, i32 887, i32 715, i32 67, i32 618, i32 276, i32 204, i32 918, i32 873, i32 777, i32 604, i32 560, i32 951, i32 160, i32 578, i32 722, i32 79, i32 804, i32 96, i32 409, i32 713, i32 940, i32 652, i32 934, i32 970, i32 447, i32 318, i32 353, i32 859, i32 672, i32 112, i32 785, i32 645, i32 863, i32 803, i32 350, i32 139, i32 93, i32 354, i32 99, i32 820, i32 908, i32 609, i32 772, i32 154, i32 274, i32 580, i32 184, i32 79, i32 626, i32 630, i32 742, i32 653, i32 282, i32 762, i32 623, i32 680, i32 81, i32 927, i32 626, i32 789, i32 125, i32 411, i32 521, i32 938, i32 300, i32 821, i32 78, i32 343, i32 175, i32 128, i32 250, i32 170, i32 774, i32 972, i32 275, i32 999, i32 639, i32 495, i32 78, i32 352, i32 126, i32 857, i32 956, i32 358, i32 619, i32 580, i32 124, i32 737, i32 594, i32 701, i32 612, i32 669, i32 112, i32 134, i32 694, i32 363, i32 992, i32 809, i32 743, i32 168, i32 974, i32 944, i32 375, i32 748, i32 52, i32 600, i32 747, i32 642, i32 182, i32 862, i32 81, i32 344, i32 805, i32 988, i32 739, i32 511, i32 655, i32 814, i32 334, i32 249, i32 515, i32 897, i32 955, i32 664, i32 981, i32 649, i32 113, i32 974, i32 459, i32 893, i32 228, i32 433, i32 837, i32 553, i32 268, i32 926, i32 240, i32 102, i32 654, i32 459, i32 51, i32 686, i32 754, i32 806, i32 760, i32 493, i32 403, i32 415, i32 394, i32 687, i32 700, i32 946, i32 670, i32 656, i32 610, i32 738, i32 392, i32 760, i32 799, i32 887, i32 653, i32 978, i32 321, i32 576, i32 617, i32 626, i32 502, i32 894, i32 679, i32 243, i32 440, i32 680, i32 879, i32 194, i32 572, i32 640, i32 724, i32 926, i32 56, i32 204, i32 700, i32 707, i32 151, i32 457, i32 449, i32 797, i32 195, i32 791, i32 558, i32 945, i32 679, i32 297, i32 59, i32 87, i32 824, i32 713, i32 663, i32 412, i32 693, i32 342, i32 606, i32 134, i32 108, i32 571, i32 364, i32 631, i32 212, i32 174, i32 643, i32 304, i32 329, i32 343, i32 97, i32 430, i32 751, i32 497, i32 314, i32 983, i32 374, i32 822, i32 928, i32 140, i32 206, i32 73, i32 263, i32 980, i32 736, i32 876, i32 478, i32 430, i32 305, i32 170, i32 514, i32 364, i32 692, i32 829, i32 82, i32 855, i32 953, i32 676, i32 246, i32 369, i32 970, i32 294, i32 750, i32 807, i32 827, i32 150, i32 790, i32 288, i32 923, i32 804, i32 378, i32 215, i32 828, i32 592, i32 281, i32 565, i32 555, i32 710, i32 82, i32 896, i32 831, i32 547, i32 261, i32 524, i32 462, i32 293, i32 465, i32 502, i32 56, i32 661, i32 821, i32 976, i32 991, i32 658, i32 869, i32 905, i32 758, i32 745, i32 193, i32 768, i32 550, i32 608, i32 933, i32 378, i32 286, i32 215, i32 979, i32 792, i32 961, i32 61, i32 688, i32 793, i32 644, i32 986, i32 403, i32 106, i32 366, i32 905, i32 644, i32 372, i32 567, i32 466, i32 434, i32 645, i32 210, i32 389, i32 550, i32 919, i32 135, i32 780, i32 773, i32 635, i32 389, i32 707, i32 100, i32 626, i32 958, i32 165, i32 504, i32 920, i32 176, i32 193, i32 713, i32 857, i32 265, i32 203, i32 50, i32 668, i32 108, i32 645, i32 990, i32 626, i32 197, i32 510, i32 357, i32 358, i32 850, i32 858, i32 364, i32 936, i32 638], align 16
@.str.147 = private unnamed_addr constant [62 x i8] c"    block %d: crc = 0x%08x, combined CRC = 0x%08x, size = %d\0A\00", align 1
@.str.1.148 = private unnamed_addr constant [36 x i8] c"    final combined CRC = 0x%08x\0A   \00", align 1
@.str.2.149 = private unnamed_addr constant [64 x i8] c"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\0A\00", align 1
@.str.3.150 = private unnamed_addr constant [59 x i8] c"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\0A\00", align 1
@.str.4.151 = private unnamed_addr constant [41 x i8] c"      pass %d: size is %d, grp uses are \00", align 1
@.str.5.152 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.6.153 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7.154 = private unnamed_addr constant [26 x i8] c"      bytes: mapping %d, \00", align 1
@.str.8.155 = private unnamed_addr constant [15 x i8] c"selectors %d, \00", align 1
@.str.9.156 = private unnamed_addr constant [18 x i8] c"code lengths %d, \00", align 1
@.str.10.157 = private unnamed_addr constant [10 x i8] c"codes %d\0A\00", align 1
@.str.160 = private unnamed_addr constant [20 x i8] c"\0A    [%d: huff+mtf \00", align 1
@.str.1.161 = private unnamed_addr constant [7 x i8] c"rt+rld\00", align 1
@.str.164 = private unnamed_addr constant [38 x i8] c"      %d work, %d block, ratio %5.2f\0A\00", align 1
@.str.1.165 = private unnamed_addr constant [54 x i8] c"    too repetitive; using fallback sorting algorithm\0A\00", align 1
@.str.6.166 = private unnamed_addr constant [34 x i8] c"        main sort initialise ...\0A\00", align 1
@.str.2.167 = private unnamed_addr constant [28 x i8] c"        bucket sorting ...\0A\00", align 1
@.str.7.168 = private unnamed_addr constant [48 x i8] c"        qsort [0x%x, 0x%x]   done %d   this %d\0A\00", align 1
@.str.8.169 = private unnamed_addr constant [44 x i8] c"        %d pointers, %d sorted, %d scanned\0A\00", align 1
@incs = internal global [14 x i32] [i32 1, i32 4, i32 13, i32 40, i32 121, i32 364, i32 1093, i32 3280, i32 9841, i32 29524, i32 88573, i32 265720, i32 797161, i32 2391484], align 16
@.str.3.170 = private unnamed_addr constant [23 x i8] c"        depth %6d has \00", align 1
@.str.4.171 = private unnamed_addr constant [24 x i8] c"%6d unresolved strings\0A\00", align 1
@.str.5.172 = private unnamed_addr constant [34 x i8] c"        reconstructing block ...\0A\00", align 1
@0 = private constant [5 x i8] c"bzip2"
@1 = private constant [5 x i8] c"-fkqs"
@2 = private constant [9 x i8] c"huffman.c"
@__argv_new__ = global i8** null, !track !6

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32, i8**) #0 {
  %3 = call i8* @malloc(i64 32)
  %4 = bitcast i8* %3 to i8**
  store i8** %4, i8*** @__argv_new__
  %5 = load i8**, i8*** @__argv_new__
  %6 = getelementptr i8*, i8** %5, i32 0
  %7 = call i8* @malloc(i64 100)
  store i8* %7, i8** %6
  %8 = load i8*, i8** %6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i64 100, i1 false)
  %9 = getelementptr i8, i8* %8, i32 5
  store i8 0, i8* %9
  %10 = load i8**, i8*** @__argv_new__
  %11 = getelementptr i8*, i8** %10, i32 1
  %12 = call i8* @malloc(i64 100)
  store i8* %12, i8** %11
  %13 = load i8*, i8** %11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i64 100, i1 false)
  %14 = getelementptr i8, i8* %13, i32 5
  store i8 0, i8* %14
  %15 = load i8**, i8*** @__argv_new__
  %16 = getelementptr i8*, i8** %15, i32 2
  %17 = call i8* @malloc(i64 100)
  store i8* %17, i8** %16
  %18 = load i8*, i8** %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), i64 100, i1 false)
  %19 = getelementptr i8, i8* %18, i32 9
  store i8 0, i8* %19
  %20 = load i8**, i8*** @__argv_new__
  %21 = getelementptr i8*, i8** %20, i32 3
  store i8* null, i8** %21
  %22 = alloca %struct.zzzz*, align 8, !track !9
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  store i8 0, i8* @smallMode, align 1
  store i8 0, i8* @keepInputFiles, align 1
  store i8 0, i8* @forceOverwrite, align 1
  store i8 1, i8* @noisy, align 1
  store i32 0, i32* @verbosity, align 4
  store i32 9, i32* @blockSize100k, align 4
  store i8 0, i8* @testFailsExist, align 1
  store i8 0, i8* @unzFailsExist, align 1
  store i32 0, i32* @numFileNames, align 4
  store i32 0, i32* @numFilesProcessed, align 4
  store i32 30, i32* @workFactor, align 4
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  store i32 0, i32* @exitValue, align 4
  %23 = call void (i32)* @signal(i32 11, void (i32)* @mySIGSEGVorSIGBUScatcher) #9
  %24 = call void (i32)* @signal(i32 7, void (i32)* @mySIGSEGVorSIGBUScatcher) #9
  %25 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %26 = getelementptr [7 x i8], [7 x i8]* @.str.6, i32 0, i32 0
  call void @copyFileName(i8* %25, i8* %26)
  %27 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %28 = getelementptr [7 x i8], [7 x i8]* @.str.6, i32 0, i32 0
  call void @copyFileName(i8* %27, i8* %28)
  %29 = getelementptr inbounds i8*, i8** %20, i64 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr [1034 x i8], [1034 x i8]* @progNameReally, i32 0, i32 0
  call void @copyFileName(i8* %31, i8* %30)
  %32 = getelementptr [1034 x i8], [1034 x i8]* @progNameReally, i64 0, i64 0
  store i8* %32, i8** @progName, align 8
  %33 = getelementptr [1034 x i8], [1034 x i8]* @progNameReally, i64 0, i64 0
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %.lr.ph63, label %._crit_edge64

.lr.ph63:                                         ; preds = %2
  %37 = getelementptr [1034 x i8], [1034 x i8]* @progNameReally, i64 0, i64 0
  br label %38

; <label>:38:                                     ; preds = %.lr.ph63, %44
  %.0861 = phi i8* [ %37, %.lr.ph63 ], [ %45, %44 ]
  call void @unroll_loop(i32 0)
  %39 = load i8, i8* %.0861, align 1
  %40 = sext i8 %39 to i32
  %41 = icmp eq i32 %40, 47
  br i1 %41, label %42, label %44

; <label>:42:                                     ; preds = %38
  %43 = getelementptr inbounds i8, i8* %.0861, i64 1
  store i8* %43, i8** @progName, align 8
  br label %44

; <label>:44:                                     ; preds = %38, %42
  %45 = getelementptr inbounds i8, i8* %.0861, i32 1
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %38, label %._crit_edge64.loopexit

._crit_edge64.loopexit:                           ; preds = %44
  br label %._crit_edge64

._crit_edge64:                                    ; preds = %._crit_edge64.loopexit, %2
  store %struct.zzzz* null, %struct.zzzz** %22, align 8
  %49 = getelementptr [6 x i8], [6 x i8]* @.str.7, i32 0, i32 0
  call void @addFlagsFromEnvVar(%struct.zzzz** %22, i8* %49)
  %50 = getelementptr [5 x i8], [5 x i8]* @.str.8, i32 0, i32 0
  call void @addFlagsFromEnvVar(%struct.zzzz** %22, i8* %50)
  %51 = sub nsw i32 3, 1, !track_argc !10
  %52 = icmp sle i32 1, %51
  br i1 %52, label %.lr.ph57, label %._crit_edge58

.lr.ph57:                                         ; preds = %._crit_edge64
  br label %53

; <label>:53:                                     ; preds = %.lr.ph57, %53
  %indvars.iv59 = phi i64 [ 1, %.lr.ph57 ], [ %indvars.iv.next60, %53 ]
  call void @unroll_loop(i32 1)
  %54 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %55 = getelementptr inbounds i8*, i8** %20, i64 %indvars.iv59
  %56 = load i8*, i8** %55, align 8
  %57 = call %struct.zzzz* @snocString(%struct.zzzz* %54, i8* %56)
  store %struct.zzzz* %57, %struct.zzzz** %22, align 8
  %indvars.iv.next60 = add nuw nsw i64 %indvars.iv59, 1
  %exitcond = icmp ne i64 %indvars.iv.next60, 3
  br i1 %exitcond, label %53, label %._crit_edge58.loopexit

._crit_edge58.loopexit:                           ; preds = %53
  br label %._crit_edge58

._crit_edge58:                                    ; preds = %._crit_edge58.loopexit, %._crit_edge64
  store i32 7, i32* @longestFileName, align 4
  store i32 0, i32* @numFileNames, align 4
  %58 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %59 = icmp ne %struct.zzzz* %58, null
  br i1 %59, label %.lr.ph53.preheader, label %._crit_edge54

.lr.ph53.preheader:                               ; preds = %._crit_edge58
  br label %.lr.ph53

.lr.ph53:                                         ; preds = %.lr.ph53.preheader, %88
  %.051 = phi i8 [ %.1, %88 ], [ 1, %.lr.ph53.preheader ]
  %.0149 = phi %struct.zzzz* [ %90, %88 ], [ %58, %.lr.ph53.preheader ]
  call void @unroll_loop(i32 2)
  %60 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.0149, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
  %63 = call i32 @strcmp(i8* %61, i8* %62) #10
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %88, label %65

; <label>:65:                                     ; preds = %.lr.ph53
  %66 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.0149, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 0
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp eq i32 %70, 45
  %72 = zext i8 %.051 to i32
  %73 = icmp ne i32 %72, 0
  %or.cond = and i1 %71, %73
  br i1 %or.cond, label %88, label %74

; <label>:74:                                     ; preds = %65
  %75 = load i32, i32* @numFileNames, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* @numFileNames, align 4
  %77 = load i32, i32* @longestFileName, align 4
  %78 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.0149, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = call i64 @strlen(i8* %79) #10
  %81 = trunc i64 %80 to i32
  %82 = icmp slt i32 %77, %81
  br i1 %82, label %83, label %88

; <label>:83:                                     ; preds = %74
  %84 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.0149, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = call i64 @strlen(i8* %85) #10
  %87 = trunc i64 %86 to i32
  store i32 %87, i32* @longestFileName, align 4
  br label %88

; <label>:88:                                     ; preds = %74, %83, %65, %.lr.ph53
  %.1 = phi i8 [ 0, %.lr.ph53 ], [ %.051, %65 ], [ %.051, %83 ], [ %.051, %74 ]
  %89 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.0149, i32 0, i32 1
  %90 = load %struct.zzzz*, %struct.zzzz** %89, align 8
  %91 = icmp ne %struct.zzzz* %90, null
  br i1 %91, label %.lr.ph53, label %._crit_edge54.loopexit

._crit_edge54.loopexit:                           ; preds = %88
  br label %._crit_edge54

._crit_edge54:                                    ; preds = %._crit_edge54.loopexit, %._crit_edge58
  %92 = load i32, i32* @numFileNames, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

; <label>:94:                                     ; preds = %._crit_edge54
  store i32 1, i32* @srcMode, align 4
  br label %96

; <label>:95:                                     ; preds = %._crit_edge54
  store i32 3, i32* @srcMode, align 4
  br label %96

; <label>:96:                                     ; preds = %95, %94
  store i32 1, i32* @opMode, align 4
  %97 = load i8*, i8** @progName, align 8
  %98 = getelementptr [6 x i8], [6 x i8]* @.str.10, i32 0, i32 0
  %99 = call i8* @strstr(i8* %97, i8* %98) #10, !track !11
  %100 = icmp ne i8* %99, null
  br i1 %100, label %106, label %101

; <label>:101:                                    ; preds = %96
  %102 = load i8*, i8** @progName, align 8
  %103 = getelementptr [6 x i8], [6 x i8]* @.str.11, i32 0, i32 0
  %104 = call i8* @strstr(i8* %102, i8* %103) #10, !track !12
  %105 = icmp ne i8* %104, null
  br i1 %105, label %106, label %107

; <label>:106:                                    ; preds = %101, %96
  store i32 2, i32* @opMode, align 4
  br label %107

; <label>:107:                                    ; preds = %106, %101
  %108 = load i8*, i8** @progName, align 8
  %109 = getelementptr [6 x i8], [6 x i8]* @.str.12, i32 0, i32 0
  %110 = call i8* @strstr(i8* %108, i8* %109) #10, !track !13
  %111 = icmp ne i8* %110, null
  br i1 %111, label %127, label %112

; <label>:112:                                    ; preds = %107
  %113 = load i8*, i8** @progName, align 8
  %114 = getelementptr [6 x i8], [6 x i8]* @.str.13, i32 0, i32 0
  %115 = call i8* @strstr(i8* %113, i8* %114) #10, !track !14
  %116 = icmp ne i8* %115, null
  br i1 %116, label %127, label %117

; <label>:117:                                    ; preds = %112
  %118 = load i8*, i8** @progName, align 8
  %119 = getelementptr [5 x i8], [5 x i8]* @.str.14, i32 0, i32 0
  %120 = call i8* @strstr(i8* %118, i8* %119) #10, !track !15
  %121 = icmp ne i8* %120, null
  br i1 %121, label %127, label %122

; <label>:122:                                    ; preds = %117
  %123 = load i8*, i8** @progName, align 8
  %124 = getelementptr [5 x i8], [5 x i8]* @.str.15, i32 0, i32 0
  %125 = call i8* @strstr(i8* %123, i8* %124) #10, !track !16
  %126 = icmp ne i8* %125, null
  br i1 %126, label %127, label %132

; <label>:127:                                    ; preds = %122, %117, %112, %107
  store i32 2, i32* @opMode, align 4
  %128 = load i32, i32* @numFileNames, align 4
  %129 = icmp eq i32 %128, 0
  %130 = zext i1 %129 to i64
  %131 = select i1 %129, i32 1, i32 2
  store i32 %131, i32* @srcMode, align 4
  br label %132

; <label>:132:                                    ; preds = %127, %122
  %133 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %134 = icmp ne %struct.zzzz* %133, null
  br i1 %134, label %.lr.ph48.preheader, label %.loopexit17

.lr.ph48.preheader:                               ; preds = %132
  br label %.lr.ph48

.lr.ph48:                                         ; preds = %.lr.ph48.preheader, %._crit_edge43
  %.1244 = phi %struct.zzzz* [ %204, %._crit_edge43 ], [ %133, %.lr.ph48.preheader ]
  call void @unroll_loop(i32 3)
  %135 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.1244, i32 0, i32 0
  %136 = load i8*, i8** %135, align 8
  %137 = getelementptr [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
  %138 = call i32 @strcmp(i8* %136, i8* %137) #10
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %.loopexit17.loopexit, label %140

; <label>:140:                                    ; preds = %.lr.ph48
  %141 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.1244, i32 0, i32 0
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 0
  %144 = load i8, i8* %143, align 1
  %145 = sext i8 %144 to i32
  %146 = icmp eq i32 %145, 45
  br i1 %146, label %147, label %._crit_edge43

; <label>:147:                                    ; preds = %140
  %148 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.1244, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 1
  %151 = load i8, i8* %150, align 1
  %152 = sext i8 %151 to i32
  %153 = icmp ne i32 %152, 45
  br i1 %153, label %154, label %._crit_edge43

; <label>:154:                                    ; preds = %147
  %155 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.1244, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  %157 = getelementptr inbounds i8, i8* %156, i64 1
  %158 = load i8, i8* %157, align 1
  %159 = sext i8 %158 to i32
  %160 = icmp ne i32 %159, 0
  br i1 %160, label %.lr.ph42.preheader, label %._crit_edge43

.lr.ph42.preheader:                               ; preds = %154
  br label %.lr.ph42

.lr.ph42:                                         ; preds = %.lr.ph42.preheader, %197
  %indvars.iv = phi i64 [ %indvars.iv.next, %197 ], [ 1, %.lr.ph42.preheader ]
  call void @unroll_loop(i32 4)
  %161 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.1244, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 %indvars.iv
  %164 = load i8, i8* %163, align 1
  %165 = sext i8 %164 to i32
  switch i32 %165, label %189 [
    i32 99, label %166
    i32 100, label %167
    i32 122, label %168
    i32 102, label %169
    i32 116, label %170
    i32 107, label %171
    i32 115, label %172
    i32 113, label %173
    i32 49, label %174
    i32 50, label %175
    i32 51, label %176
    i32 52, label %177
    i32 53, label %178
    i32 54, label %179
    i32 55, label %180
    i32 56, label %181
    i32 57, label %182
    i32 86, label %183
    i32 76, label %183
    i32 118, label %184
    i32 104, label %187
  ]

; <label>:166:                                    ; preds = %.lr.ph42
  store i32 2, i32* @srcMode, align 4
  br label %197

; <label>:167:                                    ; preds = %.lr.ph42
  store i32 2, i32* @opMode, align 4
  br label %197

; <label>:168:                                    ; preds = %.lr.ph42
  store i32 1, i32* @opMode, align 4
  br label %197

; <label>:169:                                    ; preds = %.lr.ph42
  store i8 1, i8* @forceOverwrite, align 1
  br label %197

; <label>:170:                                    ; preds = %.lr.ph42
  store i32 3, i32* @opMode, align 4
  br label %197

; <label>:171:                                    ; preds = %.lr.ph42
  store i8 1, i8* @keepInputFiles, align 1
  br label %197

; <label>:172:                                    ; preds = %.lr.ph42
  store i8 1, i8* @smallMode, align 1
  br label %197

; <label>:173:                                    ; preds = %.lr.ph42
  store i8 0, i8* @noisy, align 1
  br label %197

; <label>:174:                                    ; preds = %.lr.ph42
  store i32 1, i32* @blockSize100k, align 4
  br label %197

; <label>:175:                                    ; preds = %.lr.ph42
  store i32 2, i32* @blockSize100k, align 4
  br label %197

; <label>:176:                                    ; preds = %.lr.ph42
  store i32 3, i32* @blockSize100k, align 4
  br label %197

; <label>:177:                                    ; preds = %.lr.ph42
  store i32 4, i32* @blockSize100k, align 4
  br label %197

; <label>:178:                                    ; preds = %.lr.ph42
  store i32 5, i32* @blockSize100k, align 4
  br label %197

; <label>:179:                                    ; preds = %.lr.ph42
  store i32 6, i32* @blockSize100k, align 4
  br label %197

; <label>:180:                                    ; preds = %.lr.ph42
  store i32 7, i32* @blockSize100k, align 4
  br label %197

; <label>:181:                                    ; preds = %.lr.ph42
  store i32 8, i32* @blockSize100k, align 4
  br label %197

; <label>:182:                                    ; preds = %.lr.ph42
  store i32 9, i32* @blockSize100k, align 4
  br label %197

; <label>:183:                                    ; preds = %.lr.ph42, %.lr.ph42
  call void @license()
  br label %197

; <label>:184:                                    ; preds = %.lr.ph42
  %185 = load i32, i32* @verbosity, align 4
  %186 = add nsw i32 %185, 1
  store i32 %186, i32* @verbosity, align 4
  br label %197

; <label>:187:                                    ; preds = %.lr.ph42
  %188 = load i8*, i8** @progName, align 8
  call void @usage(i8* %188)
  call void @exit(i32 0) #11
  unreachable

; <label>:189:                                    ; preds = %.lr.ph42
  %.12.lcssa15 = phi %struct.zzzz* [ %.1244, %.lr.ph42 ]
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %191 = load i8*, i8** @progName, align 8
  %192 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.12.lcssa15, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  %194 = getelementptr [19 x i8], [19 x i8]* @.str.16, i32 0, i32 0
  %195 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* %194, i8* %191, i8* %193)
  %196 = load i8*, i8** @progName, align 8
  call void @usage(i8* %196)
  call void @exit(i32 1) #11
  unreachable

; <label>:197:                                    ; preds = %166, %167, %168, %169, %170, %171, %172, %173, %174, %175, %176, %177, %178, %179, %180, %181, %182, %183, %184
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %198 = load i8*, i8** %155, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 %indvars.iv.next
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i32
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %.lr.ph42, label %._crit_edge43.loopexit

._crit_edge43.loopexit:                           ; preds = %197
  br label %._crit_edge43

._crit_edge43:                                    ; preds = %._crit_edge43.loopexit, %140, %147, %154
  %.1245 = phi %struct.zzzz* [ %.1244, %147 ], [ %.1244, %140 ], [ %.1244, %154 ], [ %.1244, %._crit_edge43.loopexit ]
  %203 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.1245, i32 0, i32 1
  %204 = load %struct.zzzz*, %struct.zzzz** %203, align 8
  %205 = icmp ne %struct.zzzz* %204, null
  br i1 %205, label %.lr.ph48, label %.loopexit17.loopexit

.loopexit17.loopexit:                             ; preds = %.lr.ph48, %._crit_edge43
  br label %.loopexit17

.loopexit17:                                      ; preds = %.loopexit17.loopexit, %132
  %206 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %207 = icmp ne %struct.zzzz* %206, null
  br i1 %207, label %.lr.ph39.preheader, label %.loopexit

.lr.ph39.preheader:                               ; preds = %.loopexit17
  br label %.lr.ph39

.lr.ph39:                                         ; preds = %.lr.ph39.preheader, %349
  %.2337 = phi %struct.zzzz* [ %351, %349 ], [ %206, %.lr.ph39.preheader ]
  call void @unroll_loop(i32 5)
  %208 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %209 = load i8*, i8** %208, align 8
  %210 = getelementptr [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
  %211 = call i32 @strcmp(i8* %209, i8* %210) #10
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %.loopexit.loopexit, label %213

; <label>:213:                                    ; preds = %.lr.ph39
  %214 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %215 = load i8*, i8** %214, align 8
  %216 = getelementptr [9 x i8], [9 x i8]* @.str.17, i32 0, i32 0
  %217 = call i32 @strcmp(i8* %215, i8* %216) #10
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %220

; <label>:219:                                    ; preds = %213
  store i32 2, i32* @srcMode, align 4
  br label %349

; <label>:220:                                    ; preds = %213
  %221 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %222 = load i8*, i8** %221, align 8
  %223 = getelementptr [13 x i8], [13 x i8]* @.str.18, i32 0, i32 0
  %224 = call i32 @strcmp(i8* %222, i8* %223) #10
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %227

; <label>:226:                                    ; preds = %220
  store i32 2, i32* @opMode, align 4
  br label %349

; <label>:227:                                    ; preds = %220
  %228 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %229 = load i8*, i8** %228, align 8
  %230 = getelementptr [11 x i8], [11 x i8]* @.str.19, i32 0, i32 0
  %231 = call i32 @strcmp(i8* %229, i8* %230) #10
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %234

; <label>:233:                                    ; preds = %227
  store i32 1, i32* @opMode, align 4
  br label %349

; <label>:234:                                    ; preds = %227
  %235 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %236 = load i8*, i8** %235, align 8
  %237 = getelementptr [8 x i8], [8 x i8]* @.str.20, i32 0, i32 0
  %238 = call i32 @strcmp(i8* %236, i8* %237) #10
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

; <label>:240:                                    ; preds = %234
  store i8 1, i8* @forceOverwrite, align 1
  br label %349

; <label>:241:                                    ; preds = %234
  %242 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %243 = load i8*, i8** %242, align 8
  %244 = getelementptr [7 x i8], [7 x i8]* @.str.21, i32 0, i32 0
  %245 = call i32 @strcmp(i8* %243, i8* %244) #10
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %248

; <label>:247:                                    ; preds = %241
  store i32 3, i32* @opMode, align 4
  br label %349

; <label>:248:                                    ; preds = %241
  %249 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %250 = load i8*, i8** %249, align 8
  %251 = getelementptr [7 x i8], [7 x i8]* @.str.22, i32 0, i32 0
  %252 = call i32 @strcmp(i8* %250, i8* %251) #10
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %255

; <label>:254:                                    ; preds = %248
  store i8 1, i8* @keepInputFiles, align 1
  br label %349

; <label>:255:                                    ; preds = %248
  %256 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %257 = load i8*, i8** %256, align 8
  %258 = getelementptr [8 x i8], [8 x i8]* @.str.23, i32 0, i32 0
  %259 = call i32 @strcmp(i8* %257, i8* %258) #10
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

; <label>:261:                                    ; preds = %255
  store i8 1, i8* @smallMode, align 1
  br label %349

; <label>:262:                                    ; preds = %255
  %263 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %264 = load i8*, i8** %263, align 8
  %265 = getelementptr [8 x i8], [8 x i8]* @.str.24, i32 0, i32 0
  %266 = call i32 @strcmp(i8* %264, i8* %265) #10
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %269

; <label>:268:                                    ; preds = %262
  store i8 0, i8* @noisy, align 1
  br label %349

; <label>:269:                                    ; preds = %262
  %270 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %271 = load i8*, i8** %270, align 8
  %272 = getelementptr [10 x i8], [10 x i8]* @.str.25, i32 0, i32 0
  %273 = call i32 @strcmp(i8* %271, i8* %272) #10
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %276

; <label>:275:                                    ; preds = %269
  call void @license()
  br label %349

; <label>:276:                                    ; preds = %269
  %277 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %278 = load i8*, i8** %277, align 8
  %279 = getelementptr [10 x i8], [10 x i8]* @.str.26, i32 0, i32 0
  %280 = call i32 @strcmp(i8* %278, i8* %279) #10
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %283

; <label>:282:                                    ; preds = %276
  call void @license()
  br label %349

; <label>:283:                                    ; preds = %276
  %284 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %285 = load i8*, i8** %284, align 8
  %286 = getelementptr [14 x i8], [14 x i8]* @.str.27, i32 0, i32 0
  %287 = call i32 @strcmp(i8* %285, i8* %286) #10
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %290

; <label>:289:                                    ; preds = %283
  store i32 1, i32* @workFactor, align 4
  br label %349

; <label>:290:                                    ; preds = %283
  %291 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %292 = load i8*, i8** %291, align 8
  %293 = getelementptr [18 x i8], [18 x i8]* @.str.28, i32 0, i32 0
  %294 = call i32 @strcmp(i8* %292, i8* %293) #10
  %295 = icmp eq i32 %294, 0
  %296 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %297 = load i8*, i8** %296, align 8
  br i1 %295, label %298, label %299

; <label>:298:                                    ; preds = %290
  call void @redundant(i8* %297)
  br label %349

; <label>:299:                                    ; preds = %290
  %300 = getelementptr [18 x i8], [18 x i8]* @.str.29, i32 0, i32 0
  %301 = call i32 @strcmp(i8* %297, i8* %300) #10
  %302 = icmp eq i32 %301, 0
  %303 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %304 = load i8*, i8** %303, align 8
  br i1 %302, label %305, label %306

; <label>:305:                                    ; preds = %299
  call void @redundant(i8* %304)
  br label %349

; <label>:306:                                    ; preds = %299
  %307 = getelementptr [7 x i8], [7 x i8]* @.str.30, i32 0, i32 0
  %308 = call i32 @strcmp(i8* %304, i8* %307) #10
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %311

; <label>:310:                                    ; preds = %306
  store i32 1, i32* @blockSize100k, align 4
  br label %349

; <label>:311:                                    ; preds = %306
  %312 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %313 = load i8*, i8** %312, align 8
  %314 = getelementptr [7 x i8], [7 x i8]* @.str.31, i32 0, i32 0
  %315 = call i32 @strcmp(i8* %313, i8* %314) #10
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %318

; <label>:317:                                    ; preds = %311
  store i32 9, i32* @blockSize100k, align 4
  br label %349

; <label>:318:                                    ; preds = %311
  %319 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %320 = load i8*, i8** %319, align 8
  %321 = getelementptr [10 x i8], [10 x i8]* @.str.32, i32 0, i32 0
  %322 = call i32 @strcmp(i8* %320, i8* %321) #10
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %327

; <label>:324:                                    ; preds = %318
  %325 = load i32, i32* @verbosity, align 4
  %326 = add nsw i32 %325, 1
  store i32 %326, i32* @verbosity, align 4
  br label %349

; <label>:327:                                    ; preds = %318
  %328 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %329 = load i8*, i8** %328, align 8
  %330 = getelementptr [7 x i8], [7 x i8]* @.str.33, i32 0, i32 0
  %331 = call i32 @strcmp(i8* %329, i8* %330) #10
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %335

; <label>:333:                                    ; preds = %327
  %334 = load i8*, i8** @progName, align 8
  call void @usage(i8* %334)
  call void @exit(i32 0) #11
  unreachable

; <label>:335:                                    ; preds = %327
  %336 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 0
  %337 = load i8*, i8** %336, align 8
  %338 = getelementptr [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
  %339 = call i32 @strncmp(i8* %337, i8* %338, i64 2) #10
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %349

; <label>:341:                                    ; preds = %335
  %.23.lcssa13 = phi %struct.zzzz* [ %.2337, %335 ]
  %342 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %343 = load i8*, i8** @progName, align 8
  %344 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.23.lcssa13, i32 0, i32 0
  %345 = load i8*, i8** %344, align 8
  %346 = getelementptr [19 x i8], [19 x i8]* @.str.16, i32 0, i32 0
  %347 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %342, i8* %346, i8* %343, i8* %345)
  %348 = load i8*, i8** @progName, align 8
  call void @usage(i8* %348)
  call void @exit(i32 1) #11
  unreachable

; <label>:349:                                    ; preds = %219, %233, %247, %261, %275, %289, %305, %317, %335, %324, %310, %298, %282, %268, %254, %240, %226
  %350 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.2337, i32 0, i32 1
  %351 = load %struct.zzzz*, %struct.zzzz** %350, align 8
  %352 = icmp ne %struct.zzzz* %351, null
  br i1 %352, label %.lr.ph39, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph39, %349
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.loopexit17
  %353 = load i32, i32* @verbosity, align 4
  %354 = icmp sgt i32 %353, 4
  br i1 %354, label %355, label %356

; <label>:355:                                    ; preds = %.loopexit
  store i32 4, i32* @verbosity, align 4
  br label %356

; <label>:356:                                    ; preds = %355, %.loopexit
  %357 = load i32, i32* @opMode, align 4
  %358 = icmp eq i32 %357, 1
  br i1 %358, label %359, label %366

; <label>:359:                                    ; preds = %356
  %360 = load i8, i8* @smallMode, align 1
  %361 = zext i8 %360 to i32
  %362 = icmp ne i32 %361, 0
  %363 = load i32, i32* @blockSize100k, align 4
  %364 = icmp sgt i32 %363, 2
  %or.cond3 = and i1 %362, %364
  br i1 %or.cond3, label %365, label %366

; <label>:365:                                    ; preds = %359
  store i32 2, i32* @blockSize100k, align 4
  br label %366

; <label>:366:                                    ; preds = %365, %359, %356
  %367 = load i32, i32* @opMode, align 4
  %368 = icmp eq i32 %367, 3
  %369 = load i32, i32* @srcMode, align 4
  %370 = icmp eq i32 %369, 2
  %or.cond5 = and i1 %368, %370
  br i1 %or.cond5, label %371, label %376

; <label>:371:                                    ; preds = %366
  %372 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %373 = load i8*, i8** @progName, align 8
  %374 = getelementptr [40 x i8], [40 x i8]* @.str.34, i32 0, i32 0
  %375 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %372, i8* %374, i8* %373)
  call void @exit(i32 1) #11
  unreachable

; <label>:376:                                    ; preds = %366
  %377 = load i32, i32* @srcMode, align 4
  %378 = icmp eq i32 %377, 2
  %379 = load i32, i32* @numFileNames, align 4
  %380 = icmp eq i32 %379, 0
  %or.cond7 = and i1 %378, %380
  br i1 %or.cond7, label %381, label %382

; <label>:381:                                    ; preds = %376
  store i32 1, i32* @srcMode, align 4
  br label %382

; <label>:382:                                    ; preds = %381, %376
  %383 = load i32, i32* @opMode, align 4
  %384 = icmp ne i32 %383, 1
  br i1 %384, label %385, label %386

; <label>:385:                                    ; preds = %382
  store i32 0, i32* @blockSize100k, align 4
  br label %386

; <label>:386:                                    ; preds = %385, %382
  %387 = load i32, i32* @srcMode, align 4
  %388 = icmp eq i32 %387, 3
  br i1 %388, label %389, label %393

; <label>:389:                                    ; preds = %386
  %390 = call void (i32)* @signal(i32 2, void (i32)* @mySignalCatcher) #9
  %391 = call void (i32)* @signal(i32 15, void (i32)* @mySignalCatcher) #9
  %392 = call void (i32)* @signal(i32 1, void (i32)* @mySignalCatcher) #9
  br label %393

; <label>:393:                                    ; preds = %389, %386
  %394 = load i32, i32* @opMode, align 4
  %395 = icmp eq i32 %394, 1
  br i1 %395, label %396, label %426

; <label>:396:                                    ; preds = %393
  %397 = load i32, i32* @srcMode, align 4
  %398 = icmp eq i32 %397, 1
  br i1 %398, label %399, label %400

; <label>:399:                                    ; preds = %396
  call void @compress(i8* null)
  br label %._crit_edge24

; <label>:400:                                    ; preds = %396
  %401 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %402 = icmp ne %struct.zzzz* %401, null
  br i1 %402, label %.lr.ph23.preheader, label %._crit_edge24

.lr.ph23.preheader:                               ; preds = %400
  br label %.lr.ph23

.lr.ph23:                                         ; preds = %.lr.ph23.preheader, %422
  %.221 = phi i8 [ %.3, %422 ], [ 1, %.lr.ph23.preheader ]
  %.3419 = phi %struct.zzzz* [ %424, %422 ], [ %401, %.lr.ph23.preheader ]
  call void @unroll_loop(i32 6)
  %403 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.3419, i32 0, i32 0
  %404 = load i8*, i8** %403, align 8
  %405 = getelementptr [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
  %406 = call i32 @strcmp(i8* %404, i8* %405) #10
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %422, label %408

; <label>:408:                                    ; preds = %.lr.ph23
  %409 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.3419, i32 0, i32 0
  %410 = load i8*, i8** %409, align 8
  %411 = getelementptr inbounds i8, i8* %410, i64 0
  %412 = load i8, i8* %411, align 1
  %413 = sext i8 %412 to i32
  %414 = icmp eq i32 %413, 45
  %415 = zext i8 %.221 to i32
  %416 = icmp ne i32 %415, 0
  %or.cond9 = and i1 %414, %416
  br i1 %or.cond9, label %422, label %417

; <label>:417:                                    ; preds = %408
  %418 = load i32, i32* @numFilesProcessed, align 4
  %419 = add nsw i32 %418, 1
  store i32 %419, i32* @numFilesProcessed, align 4
  %420 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.3419, i32 0, i32 0
  %421 = load i8*, i8** %420, align 8
  call void @compress(i8* %421)
  br label %422

; <label>:422:                                    ; preds = %408, %.lr.ph23, %417
  %.3 = phi i8 [ %.221, %417 ], [ 0, %.lr.ph23 ], [ %.221, %408 ]
  %423 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.3419, i32 0, i32 1
  %424 = load %struct.zzzz*, %struct.zzzz** %423, align 8
  %425 = icmp ne %struct.zzzz* %424, null
  br i1 %425, label %.lr.ph23, label %._crit_edge24.loopexit

; <label>:426:                                    ; preds = %393
  %427 = load i32, i32* @opMode, align 4
  %428 = icmp eq i32 %427, 2
  br i1 %428, label %429, label %463

; <label>:429:                                    ; preds = %426
  store i8 0, i8* @unzFailsExist, align 1
  %430 = load i32, i32* @srcMode, align 4
  %431 = icmp eq i32 %430, 1
  br i1 %431, label %432, label %433

; <label>:432:                                    ; preds = %429
  call void @uncompress(i8* null)
  br label %._crit_edge30

; <label>:433:                                    ; preds = %429
  %434 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %435 = icmp ne %struct.zzzz* %434, null
  br i1 %435, label %.lr.ph29.preheader, label %._crit_edge30

.lr.ph29.preheader:                               ; preds = %433
  br label %.lr.ph29

.lr.ph29:                                         ; preds = %.lr.ph29.preheader, %455
  %.427 = phi i8 [ %.5, %455 ], [ 1, %.lr.ph29.preheader ]
  %.4525 = phi %struct.zzzz* [ %457, %455 ], [ %434, %.lr.ph29.preheader ]
  call void @unroll_loop(i32 7)
  %436 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.4525, i32 0, i32 0
  %437 = load i8*, i8** %436, align 8
  %438 = getelementptr [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
  %439 = call i32 @strcmp(i8* %437, i8* %438) #10
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %455, label %441

; <label>:441:                                    ; preds = %.lr.ph29
  %442 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.4525, i32 0, i32 0
  %443 = load i8*, i8** %442, align 8
  %444 = getelementptr inbounds i8, i8* %443, i64 0
  %445 = load i8, i8* %444, align 1
  %446 = sext i8 %445 to i32
  %447 = icmp eq i32 %446, 45
  %448 = zext i8 %.427 to i32
  %449 = icmp ne i32 %448, 0
  %or.cond11 = and i1 %447, %449
  br i1 %or.cond11, label %455, label %450

; <label>:450:                                    ; preds = %441
  %451 = load i32, i32* @numFilesProcessed, align 4
  %452 = add nsw i32 %451, 1
  store i32 %452, i32* @numFilesProcessed, align 4
  %453 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.4525, i32 0, i32 0
  %454 = load i8*, i8** %453, align 8
  call void @uncompress(i8* %454)
  br label %455

; <label>:455:                                    ; preds = %441, %.lr.ph29, %450
  %.5 = phi i8 [ %.427, %450 ], [ 0, %.lr.ph29 ], [ %.427, %441 ]
  %456 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.4525, i32 0, i32 1
  %457 = load %struct.zzzz*, %struct.zzzz** %456, align 8
  %458 = icmp ne %struct.zzzz* %457, null
  br i1 %458, label %.lr.ph29, label %._crit_edge30.loopexit

._crit_edge30.loopexit:                           ; preds = %455
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %433, %432
  %459 = load i8, i8* @unzFailsExist, align 1
  %460 = icmp ne i8 %459, 0
  br i1 %460, label %461, label %._crit_edge24

; <label>:461:                                    ; preds = %._crit_edge30
  call void @setExit(i32 2)
  %462 = load i32, i32* @exitValue, align 4
  call void @exit(i32 %462) #11
  unreachable

; <label>:463:                                    ; preds = %426
  store i8 0, i8* @testFailsExist, align 1
  %464 = load i32, i32* @srcMode, align 4
  %465 = icmp eq i32 %464, 1
  br i1 %465, label %466, label %467

; <label>:466:                                    ; preds = %463
  call void @testf(i8* null)
  br label %._crit_edge36

; <label>:467:                                    ; preds = %463
  %468 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %469 = icmp ne %struct.zzzz* %468, null
  br i1 %469, label %.lr.ph35.preheader, label %._crit_edge36

.lr.ph35.preheader:                               ; preds = %467
  br label %.lr.ph35

.lr.ph35:                                         ; preds = %.lr.ph35.preheader, %489
  %.633 = phi i8 [ %.7, %489 ], [ 1, %.lr.ph35.preheader ]
  %.5631 = phi %struct.zzzz* [ %491, %489 ], [ %468, %.lr.ph35.preheader ]
  call void @unroll_loop(i32 8)
  %470 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.5631, i32 0, i32 0
  %471 = load i8*, i8** %470, align 8
  %472 = getelementptr [3 x i8], [3 x i8]* @.str.9, i32 0, i32 0
  %473 = call i32 @strcmp(i8* %471, i8* %472) #10
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %489, label %475

; <label>:475:                                    ; preds = %.lr.ph35
  %476 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.5631, i32 0, i32 0
  %477 = load i8*, i8** %476, align 8
  %478 = getelementptr inbounds i8, i8* %477, i64 0
  %479 = load i8, i8* %478, align 1
  %480 = sext i8 %479 to i32
  %481 = icmp eq i32 %480, 45
  %482 = zext i8 %.633 to i32
  %483 = icmp ne i32 %482, 0
  %or.cond13 = and i1 %481, %483
  br i1 %or.cond13, label %489, label %484

; <label>:484:                                    ; preds = %475
  %485 = load i32, i32* @numFilesProcessed, align 4
  %486 = add nsw i32 %485, 1
  store i32 %486, i32* @numFilesProcessed, align 4
  %487 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.5631, i32 0, i32 0
  %488 = load i8*, i8** %487, align 8
  call void @testf(i8* %488)
  br label %489

; <label>:489:                                    ; preds = %475, %.lr.ph35, %484
  %.7 = phi i8 [ %.633, %484 ], [ 0, %.lr.ph35 ], [ %.633, %475 ]
  %490 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.5631, i32 0, i32 1
  %491 = load %struct.zzzz*, %struct.zzzz** %490, align 8
  %492 = icmp ne %struct.zzzz* %491, null
  br i1 %492, label %.lr.ph35, label %._crit_edge36.loopexit

._crit_edge36.loopexit:                           ; preds = %489
  br label %._crit_edge36

._crit_edge36:                                    ; preds = %._crit_edge36.loopexit, %467, %466
  %493 = load i8, i8* @testFailsExist, align 1
  %494 = zext i8 %493 to i32
  %495 = icmp ne i32 %494, 0
  br i1 %495, label %496, label %._crit_edge24

; <label>:496:                                    ; preds = %._crit_edge36
  %497 = load i8, i8* @noisy, align 1
  %498 = zext i8 %497 to i32
  %499 = icmp ne i32 %498, 0
  br i1 %499, label %500, label %._crit_edge24

; <label>:500:                                    ; preds = %496
  %501 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %502 = getelementptr [113 x i8], [113 x i8]* @.str.35, i32 0, i32 0
  %503 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %501, i8* %502)
  call void @setExit(i32 2)
  %504 = load i32, i32* @exitValue, align 4
  call void @exit(i32 %504) #11
  unreachable

._crit_edge24.loopexit:                           ; preds = %422
  br label %._crit_edge24

._crit_edge24:                                    ; preds = %._crit_edge24.loopexit, %._crit_edge30, %496, %._crit_edge36, %399, %400
  %505 = load %struct.zzzz*, %struct.zzzz** %22, align 8
  %506 = icmp ne %struct.zzzz* %505, null
  br i1 %506, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge24
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %515
  %.6718 = phi %struct.zzzz* [ %508, %515 ], [ %505, %.lr.ph.preheader ]
  call void @unroll_loop(i32 9)
  %507 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.6718, i32 0, i32 1
  %508 = load %struct.zzzz*, %struct.zzzz** %507, align 8
  %509 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.6718, i32 0, i32 0
  %510 = load i8*, i8** %509, align 8
  %511 = icmp ne i8* %510, null
  br i1 %511, label %512, label %515

; <label>:512:                                    ; preds = %.lr.ph
  %513 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.6718, i32 0, i32 0
  %514 = load i8*, i8** %513, align 8
  call void @free(i8* %514) #9
  br label %515

; <label>:515:                                    ; preds = %512, %.lr.ph
  %516 = bitcast %struct.zzzz* %.6718 to i8*
  call void @free(i8* %516) #9
  %517 = icmp ne %struct.zzzz* %508, null
  br i1 %517, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %515
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge24
  %518 = load i32, i32* @exitValue, align 4
  ret i32 %518
}

; Function Attrs: noinline nounwind uwtable
define internal void @mySIGSEGVorSIGBUScatcher(i32) #0 {
  %2 = load i32, i32* @opMode, align 4
  %3 = icmp eq i32 %2, 1
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = load i8*, i8** @progName, align 8
  br i1 %3, label %6, label %9

; <label>:6:                                      ; preds = %1
  %7 = getelementptr [869 x i8], [869 x i8]* @.str.36, i32 0, i32 0
  %8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* %7, i8* %5)
  br label %12

; <label>:9:                                      ; preds = %1
  %10 = getelementptr [996 x i8], [996 x i8]* @.str.37, i32 0, i32 0
  %11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* %10, i8* %5)
  br label %12

; <label>:12:                                     ; preds = %9, %6
  call void @showFileNames()
  %13 = load i32, i32* @opMode, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %12
  call void @cleanUpAndFail(i32 3) #12
  unreachable

; <label>:16:                                     ; preds = %12
  call void @cadvise()
  call void @cleanUpAndFail(i32 2) #12
  unreachable
}

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @copyFileName(i8*, i8*) #0 {
  %3 = call i64 @strlen(i8* %1) #10
  %4 = icmp ugt i64 %3, 1024
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %2
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %7 = getelementptr [120 x i8], [120 x i8]* @.str.47, i32 0, i32 0
  %8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* %7, i8* %1, i32 1024)
  call void @setExit(i32 1)
  %9 = load i32, i32* @exitValue, align 4
  call void @exit(i32 %9) #11
  unreachable

; <label>:10:                                     ; preds = %2
  %11 = call i8* @strncpy(i8* %0, i8* %1, i64 1024) #9, !track !17
  %12 = getelementptr inbounds i8, i8* %0, i64 1024
  store i8 0, i8* %12, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @addFlagsFromEnvVar(%struct.zzzz**, i8*) #0 {
  %3 = call i8* @getenv(i8* %1) #9
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %._crit_edge12

; <label>:5:                                      ; preds = %2
  %6 = load i8, i8* %3, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %._crit_edge12, label %.lr.ph11.preheader

.lr.ph11.preheader:                               ; preds = %5
  br label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %61
  %.09 = phi i8* [ %.1.lcssa, %61 ], [ %3, %.lr.ph11.preheader ]
  %.028 = phi i32 [ %45, %61 ], [ 0, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 11)
  %9 = sext i32 %.028 to i64
  %10 = getelementptr inbounds i8, i8* %.09, i64 %9
  br label %11

; <label>:11:                                     ; preds = %11, %.lr.ph11
  %.1 = phi i8* [ %10, %.lr.ph11 ], [ %22, %11 ]
  %12 = call i16** @__ctype_b_loc() #13
  %13 = load i16*, i16** %12, align 8
  %14 = load i8, i8* %.1, align 1
  %15 = sext i8 %14 to i32
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i16, i16* %13, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = and i32 %19, 8192
  %21 = icmp ne i32 %20, 0
  %22 = getelementptr inbounds i8, i8* %.1, i32 1
  br i1 %21, label %11, label %23

; <label>:23:                                     ; preds = %11
  %.1.lcssa = phi i8* [ %.1, %11 ]
  br label %24

; <label>:24:                                     ; preds = %42, %23
  %indvars.iv = phi i64 [ %indvars.iv.next, %42 ], [ 0, %23 ]
  %25 = getelementptr inbounds i8, i8* %.1.lcssa, i64 %indvars.iv
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %42

; <label>:29:                                     ; preds = %24
  %30 = call i16** @__ctype_b_loc() #13
  %31 = load i16*, i16** %30, align 8
  %32 = getelementptr inbounds i8, i8* %.1.lcssa, i64 %indvars.iv
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %31, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, 8192
  %40 = icmp ne i32 %39, 0
  %41 = xor i1 %40, true
  br label %42

; <label>:42:                                     ; preds = %29, %24
  %43 = phi i1 [ false, %24 ], [ %41, %29 ]
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  br i1 %43, label %24, label %44

; <label>:44:                                     ; preds = %42
  %.13.lcssa.wide = phi i64 [ %indvars.iv, %42 ]
  %45 = trunc i64 %.13.lcssa.wide to i32
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %61

; <label>:47:                                     ; preds = %44
  %48 = icmp sgt i32 %45, 1024
  %spec.select = select i1 %48, i32 1024, i32 %45
  %49 = icmp slt i32 0, %spec.select
  br i1 %49, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %47
  %50 = sext i32 %spec.select to i64
  br label %51

; <label>:51:                                     ; preds = %.lr.ph, %51
  %indvars.iv6 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next7, %51 ]
  %52 = getelementptr inbounds i8, i8* %.1.lcssa, i64 %indvars.iv6
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds [1034 x i8], [1034 x i8]* @tmpName, i64 0, i64 %indvars.iv6
  store i8 %53, i8* %54, align 1
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1
  %55 = icmp slt i64 %indvars.iv.next7, %50
  br i1 %55, label %51, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %51
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %47
  %56 = sext i32 %spec.select to i64
  %57 = getelementptr inbounds [1034 x i8], [1034 x i8]* @tmpName, i64 0, i64 %56
  store i8 0, i8* %57, align 1
  %58 = load %struct.zzzz*, %struct.zzzz** %0, align 8
  %59 = getelementptr [1034 x i8], [1034 x i8]* @tmpName, i32 0, i32 0
  %60 = call %struct.zzzz* @snocString(%struct.zzzz* %58, i8* %59)
  store %struct.zzzz* %60, %struct.zzzz** %0, align 8
  br label %61

; <label>:61:                                     ; preds = %._crit_edge, %44
  %62 = sext i32 %45 to i64
  %63 = getelementptr inbounds i8, i8* %.1.lcssa, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %._crit_edge12.loopexit, label %.lr.ph11

._crit_edge12.loopexit:                           ; preds = %61
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %._crit_edge12.loopexit, %5, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.zzzz* @snocString(%struct.zzzz*, i8*) #2 {
  %3 = icmp eq %struct.zzzz* %0, null
  br i1 %3, label %4, label %14

; <label>:4:                                      ; preds = %2
  %5 = call %struct.zzzz* @mkCell()
  %6 = call i64 @strlen(i8* %1) #10
  %7 = add i64 5, %6
  %8 = trunc i64 %7 to i32
  %9 = call i8* @myMalloc(i32 %8)
  %10 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %5, i32 0, i32 0
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %5, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = call i8* @strcpy(i8* %12, i8* %1) #9, !track !18
  br label %27

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %0, i32 0, i32 1
  %16 = load %struct.zzzz*, %struct.zzzz** %15, align 8
  %17 = icmp ne %struct.zzzz* %16, null
  br i1 %17, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %14
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.012 = phi %struct.zzzz* [ %19, %.lr.ph ], [ %0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 12)
  %18 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.012, i32 0, i32 1
  %19 = load %struct.zzzz*, %struct.zzzz** %18, align 8
  %20 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %19, i32 0, i32 1
  %21 = load %struct.zzzz*, %struct.zzzz** %20, align 8
  %22 = icmp ne %struct.zzzz* %21, null
  br i1 %22, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.01.lcssa.ph = phi %struct.zzzz* [ %19, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %14
  %.01.lcssa = phi %struct.zzzz* [ %0, %14 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %23 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.01.lcssa, i32 0, i32 1
  %24 = load %struct.zzzz*, %struct.zzzz** %23, align 8
  %25 = call %struct.zzzz* @snocString(%struct.zzzz* %24, i8* %1)
  %26 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %.01.lcssa, i32 0, i32 1
  store %struct.zzzz* %25, %struct.zzzz** %26, align 8
  br label %27

; <label>:27:                                     ; preds = %._crit_edge, %4
  %.0 = phi %struct.zzzz* [ %5, %4 ], [ %0, %._crit_edge ]
  ret %struct.zzzz* %.0
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @license() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = call i8* @BZ2_bzlibVersion()
  %3 = getelementptr [531 x i8], [531 x i8]* @.str.49, i32 0, i32 0
  %4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %3, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @usage(i8*) #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3 = call i8* @BZ2_bzlibVersion()
  %4 = getelementptr [1230 x i8], [1230 x i8]* @.str.50, i32 0, i32 0
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* %4, i8* %3, i8* %0)
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #4

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #5

; Function Attrs: noinline nounwind uwtable
define internal void @redundant(i8*) #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3 = load i8*, i8** @progName, align 8
  %4 = getelementptr [49 x i8], [49 x i8]* @.str.51, i32 0, i32 0
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* %4, i8* %3, i8* %0)
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal void @mySignalCatcher(i32) #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3 = load i8*, i8** @progName, align 8
  %4 = getelementptr [45 x i8], [45 x i8]* @.str.52, i32 0, i32 0
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* %4, i8* %3)
  call void @cleanUpAndFail(i32 1) #12
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @compress(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !19
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  %3 = icmp eq i8* %0, null
  %4 = load i32, i32* @srcMode, align 4
  %5 = icmp ne i32 %4, 1
  %or.cond = and i1 %3, %5
  br i1 %or.cond, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = getelementptr [21 x i8], [21 x i8]* @.str.53, i32 0, i32 0
  call void @panic(i8* %7) #12
  unreachable

; <label>:8:                                      ; preds = %1
  %9 = load i32, i32* @srcMode, align 4
  switch i32 %9, label %25 [
    i32 1, label %10
    i32 3, label %15
    i32 2, label %21
  ]

; <label>:10:                                     ; preds = %8
  %11 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %12 = getelementptr [8 x i8], [8 x i8]* @.str.54, i32 0, i32 0
  call void @copyFileName(i8* %11, i8* %12)
  %13 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %14 = getelementptr [9 x i8], [9 x i8]* @.str.55, i32 0, i32 0
  call void @copyFileName(i8* %13, i8* %14)
  br label %25

; <label>:15:                                     ; preds = %8
  %16 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @copyFileName(i8* %16, i8* %0)
  %17 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  call void @copyFileName(i8* %17, i8* %0)
  %18 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %19 = getelementptr [5 x i8], [5 x i8]* @.str, i32 0, i32 0
  %20 = call i8* @strcat(i8* %18, i8* %19) #9, !track !20
  br label %25

; <label>:21:                                     ; preds = %8
  %22 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @copyFileName(i8* %22, i8* %0)
  %23 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %24 = getelementptr [9 x i8], [9 x i8]* @.str.55, i32 0, i32 0
  call void @copyFileName(i8* %23, i8* %24)
  br label %25

; <label>:25:                                     ; preds = %8, %21, %15, %10
  %26 = load i32, i32* @srcMode, align 4
  %27 = icmp ne i32 %26, 1
  br i1 %27, label %28, label %43

; <label>:28:                                     ; preds = %25
  %29 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %30 = call zeroext i8 @containsDubiousChars(i8* %29)
  %31 = zext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %43

; <label>:33:                                     ; preds = %28
  %34 = load i8, i8* @noisy, align 1
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %36, label %42

; <label>:36:                                     ; preds = %33
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %38 = load i8*, i8** @progName, align 8
  %39 = getelementptr [39 x i8], [39 x i8]* @.str.56, i32 0, i32 0
  %40 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* %39, i8* %38, i8* %40)
  br label %42

; <label>:42:                                     ; preds = %36, %33
  call void @setExit(i32 1)
  br label %280

; <label>:43:                                     ; preds = %28, %25
  %44 = load i32, i32* @srcMode, align 4
  %45 = icmp ne i32 %44, 1
  br i1 %45, label %46, label %59

; <label>:46:                                     ; preds = %43
  %47 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %48 = call zeroext i8 @fileExists(i8* %47)
  %49 = icmp ne i8 %48, 0
  br i1 %49, label %59, label %50

; <label>:50:                                     ; preds = %46
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %52 = load i8*, i8** @progName, align 8
  %53 = call i32* @__errno_location() #13
  %54 = load i32, i32* %53, align 4
  %55 = call i8* @strerror(i32 %54) #9, !track !21
  %56 = getelementptr [35 x i8], [35 x i8]* @.str.57, i32 0, i32 0
  %57 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* %56, i8* %52, i8* %57, i8* %55)
  call void @setExit(i32 1)
  br label %280

; <label>:59:                                     ; preds = %46, %43
  br label %60

; <label>:60:                                     ; preds = %59, %80
  %indvars.iv = phi i64 [ 0, %59 ], [ %indvars.iv.next, %80 ]
  call void @unroll_loop(i32 13)
  %61 = getelementptr inbounds [4 x i8*], [4 x i8*]* @zSuffix, i64 0, i64 %indvars.iv
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %64 = call zeroext i8 @hasSuffix(i8* %63, i8* %62)
  %65 = icmp ne i8 %64, 0
  br i1 %65, label %66, label %80

; <label>:66:                                     ; preds = %60
  %.0.lcssa3.wide = phi i64 [ %indvars.iv, %60 ]
  %67 = trunc i64 %.0.lcssa3.wide to i32
  %68 = load i8, i8* @noisy, align 1
  %69 = icmp ne i8 %68, 0
  br i1 %69, label %70, label %79

; <label>:70:                                     ; preds = %66
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %72 = load i8*, i8** @progName, align 8
  %73 = sext i32 %67 to i64
  %74 = getelementptr inbounds [4 x i8*], [4 x i8*]* @zSuffix, i64 0, i64 %73
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr [42 x i8], [42 x i8]* @.str.58, i32 0, i32 0
  %77 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* %76, i8* %72, i8* %77, i8* %75)
  br label %79

; <label>:79:                                     ; preds = %70, %66
  call void @setExit(i32 1)
  br label %280

; <label>:80:                                     ; preds = %60
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %81 = icmp ult i64 %indvars.iv.next, 4
  br i1 %81, label %60, label %82

; <label>:82:                                     ; preds = %80
  %83 = load i32, i32* @srcMode, align 4
  %84 = icmp eq i32 %83, 3
  %85 = load i32, i32* @srcMode, align 4
  %86 = icmp eq i32 %85, 2
  %or.cond3 = or i1 %84, %86
  br i1 %or.cond3, label %87, label %100

; <label>:87:                                     ; preds = %82
  %88 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %89 = call i32 @stat64(i8* %88, %struct.stat* %2) #9
  %90 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = and i32 %91, 61440
  %93 = icmp eq i32 %92, 16384
  br i1 %93, label %94, label %100

; <label>:94:                                     ; preds = %87
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %96 = load i8*, i8** @progName, align 8
  %97 = getelementptr [35 x i8], [35 x i8]* @.str.59, i32 0, i32 0
  %98 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* %97, i8* %96, i8* %98)
  call void @setExit(i32 1)
  br label %280

; <label>:100:                                    ; preds = %87, %82
  %101 = load i32, i32* @srcMode, align 4
  %102 = icmp ne i32 %101, 3
  %103 = load i8, i8* @forceOverwrite, align 1
  %104 = icmp ne i8 %103, 0
  %or.cond5 = or i1 %102, %104
  br i1 %or.cond5, label %120, label %105

; <label>:105:                                    ; preds = %100
  %106 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %107 = call zeroext i8 @notAStandardFile(i8* %106)
  %108 = zext i8 %107 to i32
  %109 = icmp ne i32 %108, 0
  br i1 %109, label %110, label %120

; <label>:110:                                    ; preds = %105
  %111 = load i8, i8* @noisy, align 1
  %112 = icmp ne i8 %111, 0
  br i1 %112, label %113, label %119

; <label>:113:                                    ; preds = %110
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %115 = load i8*, i8** @progName, align 8
  %116 = getelementptr [41 x i8], [41 x i8]* @.str.60, i32 0, i32 0
  %117 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %114, i8* %116, i8* %115, i8* %117)
  br label %119

; <label>:119:                                    ; preds = %113, %110
  call void @setExit(i32 1)
  br label %280

; <label>:120:                                    ; preds = %100, %105
  %121 = load i32, i32* @srcMode, align 4
  %122 = icmp eq i32 %121, 3
  br i1 %122, label %123, label %140

; <label>:123:                                    ; preds = %120
  %124 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %125 = call zeroext i8 @fileExists(i8* %124)
  %126 = zext i8 %125 to i32
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %128, label %140

; <label>:128:                                    ; preds = %123
  %129 = load i8, i8* @forceOverwrite, align 1
  %130 = icmp ne i8 %129, 0
  br i1 %130, label %131, label %134

; <label>:131:                                    ; preds = %128
  %132 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %133 = call i32 @remove(i8* %132) #9
  br label %140

; <label>:134:                                    ; preds = %128
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %136 = load i8*, i8** @progName, align 8
  %137 = getelementptr [36 x i8], [36 x i8]* @.str.61, i32 0, i32 0
  %138 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %139 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* %137, i8* %136, i8* %138)
  call void @setExit(i32 1)
  br label %280

; <label>:140:                                    ; preds = %131, %123, %120
  %141 = load i32, i32* @srcMode, align 4
  %142 = icmp ne i32 %141, 3
  %143 = load i8, i8* @forceOverwrite, align 1
  %144 = icmp ne i8 %143, 0
  %or.cond7 = or i1 %142, %144
  br i1 %or.cond7, label %160, label %145

; <label>:145:                                    ; preds = %140
  %146 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %147 = call i32 @countHardLinks(i8* %146)
  %148 = icmp sgt i32 %147, 0
  br i1 %148, label %149, label %160

; <label>:149:                                    ; preds = %145
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %151 = load i8*, i8** @progName, align 8
  %152 = icmp sgt i32 %147, 1
  %153 = zext i1 %152 to i64
  %154 = getelementptr [2 x i8], [2 x i8]* @.str.63, i32 0, i32 0
  %155 = getelementptr [1 x i8], [1 x i8]* @.str.4, i32 0, i32 0
  %156 = select i1 %152, i8* %154, i8* %155
  %157 = getelementptr [40 x i8], [40 x i8]* @.str.62, i32 0, i32 0
  %158 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %150, i8* %157, i8* %151, i8* %158, i32 %147, i8* %156)
  call void @setExit(i32 1)
  br label %280

; <label>:160:                                    ; preds = %140, %145
  %161 = load i32, i32* @srcMode, align 4
  %162 = icmp eq i32 %161, 3
  br i1 %162, label %163, label %165

; <label>:163:                                    ; preds = %160
  %164 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @saveInputFileMetaInfo(i8* %164)
  br label %165

; <label>:165:                                    ; preds = %163, %160
  %166 = load i32, i32* @srcMode, align 4
  switch i32 %166, label %254 [
    i32 1, label %167
    i32 2, label %184
    i32 3, label %218
  ]

; <label>:167:                                    ; preds = %165
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %171 = call i32 @fileno(%struct._IO_FILE* %170) #9
  %172 = call i32 @isatty(i32 %171) #9
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %256

; <label>:174:                                    ; preds = %167
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %176 = load i8*, i8** @progName, align 8
  %177 = getelementptr [50 x i8], [50 x i8]* @.str.64, i32 0, i32 0
  %178 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %175, i8* %177, i8* %176)
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %180 = load i8*, i8** @progName, align 8
  %181 = load i8*, i8** @progName, align 8
  %182 = getelementptr [34 x i8], [34 x i8]* @.str.65, i32 0, i32 0
  %183 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %179, i8* %182, i8* %180, i8* %181)
  call void @setExit(i32 1)
  br label %280

; <label>:184:                                    ; preds = %165
  %185 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %186 = getelementptr [3 x i8], [3 x i8]* @.str.66, i32 0, i32 0
  %187 = call %struct._IO_FILE* @fopen64(i8* %185, i8* %186), !track !22
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %190 = call i32 @fileno(%struct._IO_FILE* %189) #9
  %191 = call i32 @isatty(i32 %190) #9
  %192 = icmp ne i32 %191, 0
  br i1 %192, label %193, label %207

; <label>:193:                                    ; preds = %184
  %194 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %195 = load i8*, i8** @progName, align 8
  %196 = getelementptr [50 x i8], [50 x i8]* @.str.64, i32 0, i32 0
  %197 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %194, i8* %196, i8* %195)
  %198 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %199 = load i8*, i8** @progName, align 8
  %200 = load i8*, i8** @progName, align 8
  %201 = getelementptr [34 x i8], [34 x i8]* @.str.65, i32 0, i32 0
  %202 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %198, i8* %201, i8* %199, i8* %200)
  %203 = icmp ne %struct._IO_FILE* %187, null
  br i1 %203, label %204, label %206

; <label>:204:                                    ; preds = %193
  %205 = call i32 @fclose(%struct._IO_FILE* %187)
  br label %206

; <label>:206:                                    ; preds = %204, %193
  call void @setExit(i32 1)
  br label %280

; <label>:207:                                    ; preds = %184
  %208 = icmp eq %struct._IO_FILE* %187, null
  br i1 %208, label %209, label %256

; <label>:209:                                    ; preds = %207
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %211 = load i8*, i8** @progName, align 8
  %212 = call i32* @__errno_location() #13
  %213 = load i32, i32* %212, align 4
  %214 = call i8* @strerror(i32 %213) #9, !track !23
  %215 = getelementptr [35 x i8], [35 x i8]* @.str.57, i32 0, i32 0
  %216 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %217 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %210, i8* %215, i8* %211, i8* %216, i8* %214)
  call void @setExit(i32 1)
  br label %280

; <label>:218:                                    ; preds = %165
  %219 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %220 = getelementptr [3 x i8], [3 x i8]* @.str.66, i32 0, i32 0
  %221 = call %struct._IO_FILE* @fopen64(i8* %219, i8* %220), !track !24
  %222 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %223 = getelementptr [3 x i8], [3 x i8]* @.str.67, i32 0, i32 0
  %224 = call %struct._IO_FILE* @fopen_output_safely(i8* %222, i8* %223)
  %225 = icmp eq %struct._IO_FILE* %224, null
  br i1 %225, label %226, label %239

; <label>:226:                                    ; preds = %218
  %227 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %228 = load i8*, i8** @progName, align 8
  %229 = call i32* @__errno_location() #13
  %230 = load i32, i32* %229, align 4
  %231 = call i8* @strerror(i32 %230) #9, !track !25
  %232 = getelementptr [38 x i8], [38 x i8]* @.str.68, i32 0, i32 0
  %233 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %234 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %227, i8* %232, i8* %228, i8* %233, i8* %231)
  %235 = icmp ne %struct._IO_FILE* %221, null
  br i1 %235, label %236, label %238

; <label>:236:                                    ; preds = %226
  %237 = call i32 @fclose(%struct._IO_FILE* %221)
  br label %238

; <label>:238:                                    ; preds = %236, %226
  call void @setExit(i32 1)
  br label %280

; <label>:239:                                    ; preds = %218
  %240 = icmp eq %struct._IO_FILE* %221, null
  br i1 %240, label %241, label %256

; <label>:241:                                    ; preds = %239
  %242 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %243 = load i8*, i8** @progName, align 8
  %244 = call i32* @__errno_location() #13
  %245 = load i32, i32* %244, align 4
  %246 = call i8* @strerror(i32 %245) #9, !track !26
  %247 = getelementptr [35 x i8], [35 x i8]* @.str.57, i32 0, i32 0
  %248 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %249 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %242, i8* %247, i8* %243, i8* %248, i8* %246)
  %250 = icmp ne %struct._IO_FILE* %224, null
  br i1 %250, label %251, label %253

; <label>:251:                                    ; preds = %241
  %252 = call i32 @fclose(%struct._IO_FILE* %224)
  br label %253

; <label>:253:                                    ; preds = %251, %241
  call void @setExit(i32 1)
  br label %280

; <label>:254:                                    ; preds = %165
  %255 = getelementptr [22 x i8], [22 x i8]* @.str.69, i32 0, i32 0
  call void @panic(i8* %255) #12
  unreachable

; <label>:256:                                    ; preds = %239, %207, %167
  %.02 = phi %struct._IO_FILE* [ %169, %167 ], [ %188, %207 ], [ %224, %239 ]
  %.01 = phi %struct._IO_FILE* [ %168, %167 ], [ %187, %207 ], [ %221, %239 ]
  %257 = load i32, i32* @verbosity, align 4
  %258 = icmp sge i32 %257, 1
  br i1 %258, label %259, label %267

; <label>:259:                                    ; preds = %256
  %260 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %261 = getelementptr [7 x i8], [7 x i8]* @.str.70, i32 0, i32 0
  %262 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %263 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %260, i8* %261, i8* %262)
  %264 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @pad(i8* %264)
  %265 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %266 = call i32 @fflush(%struct._IO_FILE* %265)
  br label %267

; <label>:267:                                    ; preds = %259, %256
  store %struct._IO_FILE* %.02, %struct._IO_FILE** @outputHandleJustInCase, align 8
  store i8 1, i8* @deleteOutputOnInterrupt, align 1
  call void @compressStream(%struct._IO_FILE* %.01, %struct._IO_FILE* %.02)
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %268 = load i32, i32* @srcMode, align 4
  %269 = icmp eq i32 %268, 3
  br i1 %269, label %270, label %279

; <label>:270:                                    ; preds = %267
  %271 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  call void @applySavedTimeInfoToOutputFile(i8* %271)
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  %272 = load i8, i8* @keepInputFiles, align 1
  %273 = icmp ne i8 %272, 0
  br i1 %273, label %279, label %274

; <label>:274:                                    ; preds = %270
  %275 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %276 = call i32 @remove(i8* %275) #9
  %277 = icmp ne i32 %276, 0
  br i1 %277, label %278, label %279

; <label>:278:                                    ; preds = %274
  call void @ioError() #12
  unreachable

; <label>:279:                                    ; preds = %270, %274, %267
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  br label %280

; <label>:280:                                    ; preds = %279, %253, %238, %209, %206, %174, %149, %134, %119, %94, %79, %50, %42
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @uncompress(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !27
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  %3 = icmp eq i8* %0, null
  %4 = load i32, i32* @srcMode, align 4
  %5 = icmp ne i32 %4, 1
  %or.cond = and i1 %3, %5
  br i1 %or.cond, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = getelementptr [23 x i8], [23 x i8]* @.str.79, i32 0, i32 0
  call void @panic(i8* %7) #12
  unreachable

; <label>:8:                                      ; preds = %1
  %9 = load i32, i32* @srcMode, align 4
  switch i32 %9, label %36 [
    i32 1, label %10
    i32 3, label %15
    i32 2, label %32
  ]

; <label>:10:                                     ; preds = %8
  %11 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %12 = getelementptr [8 x i8], [8 x i8]* @.str.54, i32 0, i32 0
  call void @copyFileName(i8* %11, i8* %12)
  %13 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %14 = getelementptr [9 x i8], [9 x i8]* @.str.55, i32 0, i32 0
  call void @copyFileName(i8* %13, i8* %14)
  br label %36

; <label>:15:                                     ; preds = %8
  %16 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @copyFileName(i8* %16, i8* %0)
  %17 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  call void @copyFileName(i8* %17, i8* %0)
  br label %18

; <label>:18:                                     ; preds = %15, %26
  %indvars.iv = phi i64 [ 0, %15 ], [ %indvars.iv.next, %26 ]
  call void @unroll_loop(i32 14)
  %19 = getelementptr inbounds [4 x i8*], [4 x i8*]* @zSuffix, i64 0, i64 %indvars.iv
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds [4 x i8*], [4 x i8*]* @unzSuffix, i64 0, i64 %indvars.iv
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %24 = call zeroext i8 @mapSuffix(i8* %23, i8* %20, i8* %22)
  %25 = icmp ne i8 %24, 0
  br i1 %25, label %.loopexit, label %26

; <label>:26:                                     ; preds = %18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %27 = icmp ult i64 %indvars.iv.next, 4
  br i1 %27, label %18, label %28

; <label>:28:                                     ; preds = %26
  %29 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %30 = getelementptr [5 x i8], [5 x i8]* @.str.80, i32 0, i32 0
  %31 = call i8* @strcat(i8* %29, i8* %30) #9, !track !28
  br label %36

; <label>:32:                                     ; preds = %8
  %33 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @copyFileName(i8* %33, i8* %0)
  %34 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %35 = getelementptr [9 x i8], [9 x i8]* @.str.55, i32 0, i32 0
  call void @copyFileName(i8* %34, i8* %35)
  br label %36

.loopexit:                                        ; preds = %18
  %.1.ph = phi i8 [ 0, %18 ]
  br label %36

; <label>:36:                                     ; preds = %.loopexit, %10, %28, %32, %8
  %.1 = phi i8 [ 0, %8 ], [ 0, %32 ], [ 1, %28 ], [ 0, %10 ], [ %.1.ph, %.loopexit ]
  %37 = load i32, i32* @srcMode, align 4
  %38 = icmp ne i32 %37, 1
  br i1 %38, label %39, label %54

; <label>:39:                                     ; preds = %36
  %40 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %41 = call zeroext i8 @containsDubiousChars(i8* %40)
  %42 = zext i8 %41 to i32
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %54

; <label>:44:                                     ; preds = %39
  %45 = load i8, i8* @noisy, align 1
  %46 = icmp ne i8 %45, 0
  br i1 %46, label %47, label %53

; <label>:47:                                     ; preds = %44
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %49 = load i8*, i8** @progName, align 8
  %50 = getelementptr [39 x i8], [39 x i8]* @.str.56, i32 0, i32 0
  %51 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %50, i8* %49, i8* %51)
  br label %53

; <label>:53:                                     ; preds = %47, %44
  call void @setExit(i32 1)
  br label %291

; <label>:54:                                     ; preds = %39, %36
  %55 = load i32, i32* @srcMode, align 4
  %56 = icmp ne i32 %55, 1
  br i1 %56, label %57, label %70

; <label>:57:                                     ; preds = %54
  %58 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %59 = call zeroext i8 @fileExists(i8* %58)
  %60 = icmp ne i8 %59, 0
  br i1 %60, label %70, label %61

; <label>:61:                                     ; preds = %57
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %63 = load i8*, i8** @progName, align 8
  %64 = call i32* @__errno_location() #13
  %65 = load i32, i32* %64, align 4
  %66 = call i8* @strerror(i32 %65) #9, !track !29
  %67 = getelementptr [35 x i8], [35 x i8]* @.str.57, i32 0, i32 0
  %68 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* %67, i8* %63, i8* %68, i8* %66)
  call void @setExit(i32 1)
  br label %291

; <label>:70:                                     ; preds = %57, %54
  %71 = load i32, i32* @srcMode, align 4
  %72 = icmp eq i32 %71, 3
  %73 = load i32, i32* @srcMode, align 4
  %74 = icmp eq i32 %73, 2
  %or.cond3 = or i1 %72, %74
  br i1 %or.cond3, label %75, label %88

; <label>:75:                                     ; preds = %70
  %76 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %77 = call i32 @stat64(i8* %76, %struct.stat* %2) #9
  %78 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %79 = load i32, i32* %78, align 8
  %80 = and i32 %79, 61440
  %81 = icmp eq i32 %80, 16384
  br i1 %81, label %82, label %88

; <label>:82:                                     ; preds = %75
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %84 = load i8*, i8** @progName, align 8
  %85 = getelementptr [35 x i8], [35 x i8]* @.str.59, i32 0, i32 0
  %86 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* %85, i8* %84, i8* %86)
  call void @setExit(i32 1)
  br label %291

; <label>:88:                                     ; preds = %75, %70
  %89 = load i32, i32* @srcMode, align 4
  %90 = icmp ne i32 %89, 3
  %91 = load i8, i8* @forceOverwrite, align 1
  %92 = icmp ne i8 %91, 0
  %or.cond5 = or i1 %90, %92
  br i1 %or.cond5, label %108, label %93

; <label>:93:                                     ; preds = %88
  %94 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %95 = call zeroext i8 @notAStandardFile(i8* %94)
  %96 = zext i8 %95 to i32
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %108

; <label>:98:                                     ; preds = %93
  %99 = load i8, i8* @noisy, align 1
  %100 = icmp ne i8 %99, 0
  br i1 %100, label %101, label %107

; <label>:101:                                    ; preds = %98
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %103 = load i8*, i8** @progName, align 8
  %104 = getelementptr [41 x i8], [41 x i8]* @.str.60, i32 0, i32 0
  %105 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %106 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %102, i8* %104, i8* %103, i8* %105)
  br label %107

; <label>:107:                                    ; preds = %101, %98
  call void @setExit(i32 1)
  br label %291

; <label>:108:                                    ; preds = %88, %93
  %109 = icmp ne i8 %.1, 0
  %110 = load i8, i8* @noisy, align 1
  %111 = icmp ne i8 %110, 0
  %or.cond9 = and i1 %109, %111
  br i1 %or.cond9, label %112, label %119

; <label>:112:                                    ; preds = %108
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %114 = load i8*, i8** @progName, align 8
  %115 = getelementptr [50 x i8], [50 x i8]* @.str.81, i32 0, i32 0
  %116 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %117 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %113, i8* %115, i8* %114, i8* %116, i8* %117)
  br label %119

; <label>:119:                                    ; preds = %112, %108
  %120 = load i32, i32* @srcMode, align 4
  %121 = icmp eq i32 %120, 3
  br i1 %121, label %122, label %139

; <label>:122:                                    ; preds = %119
  %123 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %124 = call zeroext i8 @fileExists(i8* %123)
  %125 = zext i8 %124 to i32
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %127, label %139

; <label>:127:                                    ; preds = %122
  %128 = load i8, i8* @forceOverwrite, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %133

; <label>:130:                                    ; preds = %127
  %131 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %132 = call i32 @remove(i8* %131) #9
  br label %139

; <label>:133:                                    ; preds = %127
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %135 = load i8*, i8** @progName, align 8
  %136 = getelementptr [36 x i8], [36 x i8]* @.str.61, i32 0, i32 0
  %137 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %138 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* %136, i8* %135, i8* %137)
  call void @setExit(i32 1)
  br label %291

; <label>:139:                                    ; preds = %130, %122, %119
  %140 = load i32, i32* @srcMode, align 4
  %141 = icmp ne i32 %140, 3
  %142 = load i8, i8* @forceOverwrite, align 1
  %143 = icmp ne i8 %142, 0
  %or.cond7 = or i1 %141, %143
  br i1 %or.cond7, label %159, label %144

; <label>:144:                                    ; preds = %139
  %145 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %146 = call i32 @countHardLinks(i8* %145)
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %148, label %159

; <label>:148:                                    ; preds = %144
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %150 = load i8*, i8** @progName, align 8
  %151 = icmp sgt i32 %146, 1
  %152 = zext i1 %151 to i64
  %153 = getelementptr [2 x i8], [2 x i8]* @.str.63, i32 0, i32 0
  %154 = getelementptr [1 x i8], [1 x i8]* @.str.4, i32 0, i32 0
  %155 = select i1 %151, i8* %153, i8* %154
  %156 = getelementptr [40 x i8], [40 x i8]* @.str.62, i32 0, i32 0
  %157 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %158 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %149, i8* %156, i8* %150, i8* %157, i32 %146, i8* %155)
  call void @setExit(i32 1)
  br label %291

; <label>:159:                                    ; preds = %139, %144
  %160 = load i32, i32* @srcMode, align 4
  %161 = icmp eq i32 %160, 3
  br i1 %161, label %162, label %164

; <label>:162:                                    ; preds = %159
  %163 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @saveInputFileMetaInfo(i8* %163)
  br label %164

; <label>:164:                                    ; preds = %162, %159
  %165 = load i32, i32* @srcMode, align 4
  switch i32 %165, label %234 [
    i32 1, label %166
    i32 2, label %183
    i32 3, label %198
  ]

; <label>:166:                                    ; preds = %164
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %170 = call i32 @fileno(%struct._IO_FILE* %169) #9
  %171 = call i32 @isatty(i32 %170) #9
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %173, label %236

; <label>:173:                                    ; preds = %166
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %175 = load i8*, i8** @progName, align 8
  %176 = getelementptr [51 x i8], [51 x i8]* @.str.82, i32 0, i32 0
  %177 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* %176, i8* %175)
  %178 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %179 = load i8*, i8** @progName, align 8
  %180 = load i8*, i8** @progName, align 8
  %181 = getelementptr [34 x i8], [34 x i8]* @.str.65, i32 0, i32 0
  %182 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %178, i8* %181, i8* %179, i8* %180)
  call void @setExit(i32 1)
  br label %291

; <label>:183:                                    ; preds = %164
  %184 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %185 = getelementptr [3 x i8], [3 x i8]* @.str.66, i32 0, i32 0
  %186 = call %struct._IO_FILE* @fopen64(i8* %184, i8* %185), !track !30
  %187 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %188 = icmp eq %struct._IO_FILE* %186, null
  br i1 %188, label %189, label %236

; <label>:189:                                    ; preds = %183
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %191 = load i8*, i8** @progName, align 8
  %192 = call i32* @__errno_location() #13
  %193 = load i32, i32* %192, align 4
  %194 = call i8* @strerror(i32 %193) #9, !track !31
  %195 = getelementptr [34 x i8], [34 x i8]* @.str.83, i32 0, i32 0
  %196 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %197 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* %195, i8* %191, i8* %196, i8* %194)
  call void @setExit(i32 1)
  br label %291

; <label>:198:                                    ; preds = %164
  %199 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %200 = getelementptr [3 x i8], [3 x i8]* @.str.66, i32 0, i32 0
  %201 = call %struct._IO_FILE* @fopen64(i8* %199, i8* %200), !track !32
  %202 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %203 = getelementptr [3 x i8], [3 x i8]* @.str.67, i32 0, i32 0
  %204 = call %struct._IO_FILE* @fopen_output_safely(i8* %202, i8* %203)
  %205 = icmp eq %struct._IO_FILE* %204, null
  br i1 %205, label %206, label %219

; <label>:206:                                    ; preds = %198
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %208 = load i8*, i8** @progName, align 8
  %209 = call i32* @__errno_location() #13
  %210 = load i32, i32* %209, align 4
  %211 = call i8* @strerror(i32 %210) #9, !track !33
  %212 = getelementptr [38 x i8], [38 x i8]* @.str.68, i32 0, i32 0
  %213 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %214 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %207, i8* %212, i8* %208, i8* %213, i8* %211)
  %215 = icmp ne %struct._IO_FILE* %201, null
  br i1 %215, label %216, label %218

; <label>:216:                                    ; preds = %206
  %217 = call i32 @fclose(%struct._IO_FILE* %201)
  br label %218

; <label>:218:                                    ; preds = %216, %206
  call void @setExit(i32 1)
  br label %291

; <label>:219:                                    ; preds = %198
  %220 = icmp eq %struct._IO_FILE* %201, null
  br i1 %220, label %221, label %236

; <label>:221:                                    ; preds = %219
  %222 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %223 = load i8*, i8** @progName, align 8
  %224 = call i32* @__errno_location() #13
  %225 = load i32, i32* %224, align 4
  %226 = call i8* @strerror(i32 %225) #9, !track !34
  %227 = getelementptr [35 x i8], [35 x i8]* @.str.57, i32 0, i32 0
  %228 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %229 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %222, i8* %227, i8* %223, i8* %228, i8* %226)
  %230 = icmp ne %struct._IO_FILE* %204, null
  br i1 %230, label %231, label %233

; <label>:231:                                    ; preds = %221
  %232 = call i32 @fclose(%struct._IO_FILE* %204)
  br label %233

; <label>:233:                                    ; preds = %231, %221
  call void @setExit(i32 1)
  br label %291

; <label>:234:                                    ; preds = %164
  %235 = getelementptr [24 x i8], [24 x i8]* @.str.84, i32 0, i32 0
  call void @panic(i8* %235) #12
  unreachable

; <label>:236:                                    ; preds = %219, %183, %166
  %.02 = phi %struct._IO_FILE* [ %168, %166 ], [ %187, %183 ], [ %204, %219 ]
  %.01 = phi %struct._IO_FILE* [ %167, %166 ], [ %186, %183 ], [ %201, %219 ]
  %237 = load i32, i32* @verbosity, align 4
  %238 = icmp sge i32 %237, 1
  br i1 %238, label %239, label %247

; <label>:239:                                    ; preds = %236
  %240 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %241 = getelementptr [7 x i8], [7 x i8]* @.str.70, i32 0, i32 0
  %242 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %243 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %240, i8* %241, i8* %242)
  %244 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @pad(i8* %244)
  %245 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %246 = call i32 @fflush(%struct._IO_FILE* %245)
  br label %247

; <label>:247:                                    ; preds = %239, %236
  store %struct._IO_FILE* %.02, %struct._IO_FILE** @outputHandleJustInCase, align 8
  store i8 1, i8* @deleteOutputOnInterrupt, align 1
  %248 = call zeroext i8 @uncompressStream(%struct._IO_FILE* %.01, %struct._IO_FILE* %.02)
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %249 = icmp ne i8 %248, 0
  br i1 %249, label %250, label %262

; <label>:250:                                    ; preds = %247
  %251 = load i32, i32* @srcMode, align 4
  %252 = icmp eq i32 %251, 3
  br i1 %252, label %253, label %270

; <label>:253:                                    ; preds = %250
  %254 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  call void @applySavedTimeInfoToOutputFile(i8* %254)
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  %255 = load i8, i8* @keepInputFiles, align 1
  %256 = icmp ne i8 %255, 0
  br i1 %256, label %270, label %257

; <label>:257:                                    ; preds = %253
  %258 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %259 = call i32 @remove(i8* %258) #9
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %261, label %270

; <label>:261:                                    ; preds = %257
  call void @ioError() #12
  unreachable

; <label>:262:                                    ; preds = %247
  store i8 1, i8* @unzFailsExist, align 1
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  %263 = load i32, i32* @srcMode, align 4
  %264 = icmp eq i32 %263, 3
  br i1 %264, label %265, label %270

; <label>:265:                                    ; preds = %262
  %266 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %267 = call i32 @remove(i8* %266) #9
  %268 = icmp ne i32 %267, 0
  br i1 %268, label %269, label %270

; <label>:269:                                    ; preds = %265
  call void @ioError() #12
  unreachable

; <label>:270:                                    ; preds = %262, %265, %250, %257, %253
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  %271 = icmp ne i8 %248, 0
  br i1 %271, label %272, label %279

; <label>:272:                                    ; preds = %270
  %273 = load i32, i32* @verbosity, align 4
  %274 = icmp sge i32 %273, 1
  br i1 %274, label %275, label %291

; <label>:275:                                    ; preds = %272
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %277 = getelementptr [6 x i8], [6 x i8]* @.str.85, i32 0, i32 0
  %278 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %276, i8* %277)
  br label %291

; <label>:279:                                    ; preds = %270
  call void @setExit(i32 2)
  %280 = load i32, i32* @verbosity, align 4
  %281 = icmp sge i32 %280, 1
  %282 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  br i1 %281, label %283, label %286

; <label>:283:                                    ; preds = %279
  %284 = getelementptr [19 x i8], [19 x i8]* @.str.86, i32 0, i32 0
  %285 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %282, i8* %284)
  br label %291

; <label>:286:                                    ; preds = %279
  %287 = load i8*, i8** @progName, align 8
  %288 = getelementptr [29 x i8], [29 x i8]* @.str.87, i32 0, i32 0
  %289 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %290 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %282, i8* %288, i8* %287, i8* %289)
  br label %291

; <label>:291:                                    ; preds = %283, %286, %272, %275, %53, %61, %82, %107, %133, %148, %173, %189, %218, %233
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @setExit(i32) #0 {
  %2 = load i32, i32* @exitValue, align 4
  %3 = icmp sgt i32 %0, %2
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  store i32 %0, i32* @exitValue, align 4
  br label %5

; <label>:5:                                      ; preds = %4, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @testf(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !35
  store i8 0, i8* @deleteOutputOnInterrupt, align 1
  %3 = icmp eq i8* %0, null
  %4 = load i32, i32* @srcMode, align 4
  %5 = icmp ne i32 %4, 1
  %or.cond = and i1 %3, %5
  br i1 %or.cond, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = getelementptr [18 x i8], [18 x i8]* @.str.94, i32 0, i32 0
  call void @panic(i8* %7) #12
  unreachable

; <label>:8:                                      ; preds = %1
  %9 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %10 = getelementptr [7 x i8], [7 x i8]* @.str.6, i32 0, i32 0
  call void @copyFileName(i8* %9, i8* %10)
  %11 = load i32, i32* @srcMode, align 4
  switch i32 %11, label %19 [
    i32 1, label %12
    i32 3, label %15
    i32 2, label %17
  ]

; <label>:12:                                     ; preds = %8
  %13 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %14 = getelementptr [8 x i8], [8 x i8]* @.str.54, i32 0, i32 0
  call void @copyFileName(i8* %13, i8* %14)
  br label %19

; <label>:15:                                     ; preds = %8
  %16 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @copyFileName(i8* %16, i8* %0)
  br label %19

; <label>:17:                                     ; preds = %8
  %18 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @copyFileName(i8* %18, i8* %0)
  br label %19

; <label>:19:                                     ; preds = %8, %17, %15, %12
  %20 = load i32, i32* @srcMode, align 4
  %21 = icmp ne i32 %20, 1
  br i1 %21, label %22, label %37

; <label>:22:                                     ; preds = %19
  %23 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %24 = call zeroext i8 @containsDubiousChars(i8* %23)
  %25 = zext i8 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %37

; <label>:27:                                     ; preds = %22
  %28 = load i8, i8* @noisy, align 1
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %36

; <label>:30:                                     ; preds = %27
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %32 = load i8*, i8** @progName, align 8
  %33 = getelementptr [39 x i8], [39 x i8]* @.str.56, i32 0, i32 0
  %34 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* %33, i8* %32, i8* %34)
  br label %36

; <label>:36:                                     ; preds = %30, %27
  call void @setExit(i32 1)
  br label %128

; <label>:37:                                     ; preds = %22, %19
  %38 = load i32, i32* @srcMode, align 4
  %39 = icmp ne i32 %38, 1
  br i1 %39, label %40, label %53

; <label>:40:                                     ; preds = %37
  %41 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %42 = call zeroext i8 @fileExists(i8* %41)
  %43 = icmp ne i8 %42, 0
  br i1 %43, label %53, label %44

; <label>:44:                                     ; preds = %40
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %46 = load i8*, i8** @progName, align 8
  %47 = call i32* @__errno_location() #13
  %48 = load i32, i32* %47, align 4
  %49 = call i8* @strerror(i32 %48) #9, !track !36
  %50 = getelementptr [30 x i8], [30 x i8]* @.str.95, i32 0, i32 0
  %51 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* %50, i8* %46, i8* %51, i8* %49)
  call void @setExit(i32 1)
  br label %128

; <label>:53:                                     ; preds = %40, %37
  %54 = load i32, i32* @srcMode, align 4
  %55 = icmp ne i32 %54, 1
  br i1 %55, label %56, label %69

; <label>:56:                                     ; preds = %53
  %57 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %58 = call i32 @stat64(i8* %57, %struct.stat* %2) #9
  %59 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = and i32 %60, 61440
  %62 = icmp eq i32 %61, 16384
  br i1 %62, label %63, label %69

; <label>:63:                                     ; preds = %56
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %65 = load i8*, i8** @progName, align 8
  %66 = getelementptr [35 x i8], [35 x i8]* @.str.59, i32 0, i32 0
  %67 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* %66, i8* %65, i8* %67)
  call void @setExit(i32 1)
  br label %128

; <label>:69:                                     ; preds = %56, %53
  %70 = load i32, i32* @srcMode, align 4
  switch i32 %70, label %102 [
    i32 1, label %71
    i32 2, label %88
    i32 3, label %88
  ]

; <label>:71:                                     ; preds = %69
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %73 = call i32 @fileno(%struct._IO_FILE* %72) #9
  %74 = call i32 @isatty(i32 %73) #9
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %86

; <label>:76:                                     ; preds = %71
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %78 = load i8*, i8** @progName, align 8
  %79 = getelementptr [51 x i8], [51 x i8]* @.str.82, i32 0, i32 0
  %80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* %79, i8* %78)
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %82 = load i8*, i8** @progName, align 8
  %83 = load i8*, i8** @progName, align 8
  %84 = getelementptr [34 x i8], [34 x i8]* @.str.65, i32 0, i32 0
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %81, i8* %84, i8* %82, i8* %83)
  call void @setExit(i32 1)
  br label %128

; <label>:86:                                     ; preds = %71
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  br label %104

; <label>:88:                                     ; preds = %69, %69
  %89 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %90 = getelementptr [3 x i8], [3 x i8]* @.str.66, i32 0, i32 0
  %91 = call %struct._IO_FILE* @fopen64(i8* %89, i8* %90), !track !37
  %92 = icmp eq %struct._IO_FILE* %91, null
  br i1 %92, label %93, label %104

; <label>:93:                                     ; preds = %88
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %95 = load i8*, i8** @progName, align 8
  %96 = call i32* @__errno_location() #13
  %97 = load i32, i32* %96, align 4
  %98 = call i8* @strerror(i32 %97) #9, !track !38
  %99 = getelementptr [34 x i8], [34 x i8]* @.str.83, i32 0, i32 0
  %100 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* %99, i8* %95, i8* %100, i8* %98)
  call void @setExit(i32 1)
  br label %128

; <label>:102:                                    ; preds = %69
  %103 = getelementptr [19 x i8], [19 x i8]* @.str.96, i32 0, i32 0
  call void @panic(i8* %103) #12
  unreachable

; <label>:104:                                    ; preds = %88, %86
  %.0 = phi %struct._IO_FILE* [ %87, %86 ], [ %91, %88 ]
  %105 = load i32, i32* @verbosity, align 4
  %106 = icmp sge i32 %105, 1
  br i1 %106, label %107, label %115

; <label>:107:                                    ; preds = %104
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %109 = getelementptr [7 x i8], [7 x i8]* @.str.70, i32 0, i32 0
  %110 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %111 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %108, i8* %109, i8* %110)
  %112 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  call void @pad(i8* %112)
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %114 = call i32 @fflush(%struct._IO_FILE* %113)
  br label %115

; <label>:115:                                    ; preds = %107, %104
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %116 = call zeroext i8 @testStream(%struct._IO_FILE* %.0)
  %117 = zext i8 %116 to i32
  %118 = icmp ne i32 %117, 0
  %119 = load i32, i32* @verbosity, align 4
  %120 = icmp sge i32 %119, 1
  %or.cond3 = and i1 %118, %120
  br i1 %or.cond3, label %121, label %125

; <label>:121:                                    ; preds = %115
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %123 = getelementptr [4 x i8], [4 x i8]* @.str.97, i32 0, i32 0
  %124 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %122, i8* %123)
  br label %125

; <label>:125:                                    ; preds = %121, %115
  %126 = icmp ne i8 %116, 0
  br i1 %126, label %128, label %127

; <label>:127:                                    ; preds = %125
  store i8 1, i8* @testFailsExist, align 1
  br label %128

; <label>:128:                                    ; preds = %36, %44, %63, %76, %93, %127, %125
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #1

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @panic(i8*) #6 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3 = load i8*, i8** @progName, align 8
  %4 = getelementptr [109 x i8], [109 x i8]* @.str.71, i32 0, i32 0
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* %4, i8* %3, i8* %0)
  call void @showFileNames()
  call void @cleanUpAndFail(i32 3) #12
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @containsDubiousChars(i8*) #0 {
  ret i8 0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fileExists(i8*) #0 {
  %2 = getelementptr [3 x i8], [3 x i8]* @.str.66, i32 0, i32 0
  %3 = call %struct._IO_FILE* @fopen64(i8* %0, i8* %2), !track !39
  %4 = icmp ne %struct._IO_FILE* %3, null
  %5 = zext i1 %4 to i32
  %6 = trunc i32 %5 to i8
  %7 = icmp ne %struct._IO_FILE* %3, null
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %1
  %9 = call i32 @fclose(%struct._IO_FILE* %3)
  br label %10

; <label>:10:                                     ; preds = %8, %1
  ret i8 %6
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #7

; Function Attrs: nounwind
declare dso_local i8* @strerror(i32) #1

; Function Attrs: nounwind
declare dso_local i32 @stat64(i8*, %struct.stat*) #1

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare dso_local i32 @isatty(i32) #1

declare dso_local %struct._IO_FILE* @fopen64(i8*, i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal void @pad(i8*) #0 {
  %2 = call i64 @strlen(i8* %0) #10
  %3 = trunc i64 %2 to i32
  %4 = load i32, i32* @longestFileName, align 4
  %5 = icmp sge i32 %3, %4
  br i1 %5, label %.loopexit, label %6

; <label>:6:                                      ; preds = %1
  %7 = load i32, i32* @longestFileName, align 4
  %8 = call i64 @strlen(i8* %0) #10
  %9 = trunc i64 %8 to i32
  %10 = sub nsw i32 %7, %9
  %11 = icmp sle i32 1, %10
  br i1 %11, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %6
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i32 [ %15, %.lr.ph ], [ 1, %.lr.ph.preheader ]
  call void @unroll_loop(i32 15)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %13 = getelementptr [2 x i8], [2 x i8]* @.str.72, i32 0, i32 0
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* %13)
  %15 = add nuw nsw i32 %.01, 1
  %16 = load i32, i32* @longestFileName, align 4
  %17 = call i64 @strlen(i8* %0) #10
  %18 = trunc i64 %17 to i32
  %19 = sub nsw i32 %16, %18
  %20 = icmp sle i32 %15, %19
  br i1 %20, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %6, %1
  ret void
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #5

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @testStream(%struct._IO_FILE*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [5000 x i8], align 16, !track !40
  %5 = alloca [5000 x i8], align 16, !track !41
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8, !track !42
  store i32 0, i32* %6, align 4
  %8 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %93, label %10

; <label>:10:                                     ; preds = %1
  %11 = load i32, i32* @verbosity, align 4
  %12 = load i8, i8* @smallMode, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds [5000 x i8], [5000 x i8]* %5, i32 0, i32 0
  %15 = load i32, i32* %6, align 4
  %16 = call i8* @BZ2_bzReadOpen(i32* %2, %struct._IO_FILE* %0, i32 %11, i32 %13, i8* %14, i32 %15)
  %17 = icmp eq i8* %16, null
  br i1 %17, label %._crit_edge25, label %.lr.ph24.preheader

.lr.ph24.preheader:                               ; preds = %10
  br label %.lr.ph24

.lr.ph24:                                         ; preds = %.lr.ph24.preheader, %61
  %18 = phi i8* [ %66, %61 ], [ %16, %.lr.ph24.preheader ]
  %.0222 = phi i32 [ %22, %61 ], [ 0, %.lr.ph24.preheader ]
  call void @unroll_loop(i32 16)
  %19 = load i32, i32* %2, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %._crit_edge25.loopexit2, label %21

; <label>:21:                                     ; preds = %.lr.ph24
  %22 = add nuw nsw i32 %.0222, 1
  %23 = load i32, i32* %2, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %21
  br label %.lr.ph

; <label>:25:                                     ; preds = %.lr.ph
  %26 = load i32, i32* %2, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %.lr.ph, label %._crit_edge.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %25
  call void @unroll_loop(i32 17)
  %28 = getelementptr inbounds [5000 x i8], [5000 x i8]* %4, i32 0, i32 0
  %29 = call i32 @BZ2_bzRead(i32* %2, i8* %18, i8* %28, i32 5000)
  %30 = load i32, i32* %2, align 4
  %31 = icmp eq i32 %30, -5
  br i1 %31, label %._crit_edge25.loopexit, label %25

._crit_edge.loopexit:                             ; preds = %25
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %21
  %32 = phi i8* [ %18, %21 ], [ %18, %._crit_edge.loopexit ]
  %33 = load i32, i32* %2, align 4
  %34 = icmp ne i32 %33, 4
  br i1 %34, label %._crit_edge25.loopexit2, label %35

; <label>:35:                                     ; preds = %._crit_edge
  call void @BZ2_bzReadGetUnused(i32* %2, i8* %32, i8** %7, i32* %6)
  %36 = load i32, i32* %2, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %40

; <label>:38:                                     ; preds = %35
  %39 = getelementptr [21 x i8], [21 x i8]* @.str.98, i32 0, i32 0
  call void @panic(i8* %39) #12
  unreachable

; <label>:40:                                     ; preds = %35
  %41 = load i8*, i8** %7, align 8
  %42 = load i32, i32* %6, align 4
  %43 = icmp slt i32 0, %42
  br i1 %43, label %.lr.ph20.preheader, label %._crit_edge21

.lr.ph20.preheader:                               ; preds = %40
  br label %.lr.ph20

.lr.ph20:                                         ; preds = %.lr.ph20.preheader, %.lr.ph20
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph20 ], [ 0, %.lr.ph20.preheader ]
  call void @unroll_loop(i32 18)
  %44 = getelementptr inbounds i8, i8* %41, i64 %indvars.iv
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds [5000 x i8], [5000 x i8]* %5, i64 0, i64 %indvars.iv
  store i8 %45, i8* %46, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %47 = load i32, i32* %6, align 4
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %indvars.iv.next, %48
  br i1 %49, label %.lr.ph20, label %._crit_edge21.loopexit

._crit_edge21.loopexit:                           ; preds = %.lr.ph20
  br label %._crit_edge21

._crit_edge21:                                    ; preds = %._crit_edge21.loopexit, %40
  call void @BZ2_bzReadClose(i32* %2, i8* %32)
  %50 = load i32, i32* %2, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %54

; <label>:52:                                     ; preds = %._crit_edge21
  %53 = getelementptr [21 x i8], [21 x i8]* @.str.98, i32 0, i32 0
  call void @panic(i8* %53) #12
  unreachable

; <label>:54:                                     ; preds = %._crit_edge21
  %55 = load i32, i32* %6, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %61

; <label>:57:                                     ; preds = %54
  %58 = call zeroext i8 @myfeof(%struct._IO_FILE* %0)
  %59 = zext i8 %58 to i32
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %68, label %61

; <label>:61:                                     ; preds = %57, %54
  %62 = load i32, i32* @verbosity, align 4
  %63 = load i8, i8* @smallMode, align 1
  %64 = zext i8 %63 to i32
  %65 = load i32, i32* %6, align 4
  %66 = call i8* @BZ2_bzReadOpen(i32* %2, %struct._IO_FILE* %0, i32 %62, i32 %64, i8* %14, i32 %65)
  %67 = icmp eq i8* %66, null
  br i1 %67, label %._crit_edge25.loopexit2, label %.lr.ph24

; <label>:68:                                     ; preds = %57
  %69 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %93, label %71

; <label>:71:                                     ; preds = %68
  %72 = call i32 @fclose(%struct._IO_FILE* %0)
  %73 = icmp eq i32 %72, -1
  br i1 %73, label %93, label %74

; <label>:74:                                     ; preds = %71
  %75 = load i32, i32* @verbosity, align 4
  %76 = icmp sge i32 %75, 2
  br i1 %76, label %77, label %123

; <label>:77:                                     ; preds = %74
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %79 = getelementptr [6 x i8], [6 x i8]* @.str.89, i32 0, i32 0
  %80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* %79)
  br label %123

._crit_edge25.loopexit:                           ; preds = %.lr.ph
  %.ph = phi i8* [ %18, %.lr.ph ]
  %.1.ph = phi i32 [ %22, %.lr.ph ]
  br label %._crit_edge25

._crit_edge25.loopexit2:                          ; preds = %61, %.lr.ph24, %._crit_edge
  %.ph3 = phi i8* [ %32, %._crit_edge ], [ %66, %61 ], [ %18, %.lr.ph24 ]
  %.1.ph4 = phi i32 [ %22, %._crit_edge ], [ %22, %61 ], [ %.0222, %.lr.ph24 ]
  br label %._crit_edge25

._crit_edge25:                                    ; preds = %._crit_edge25.loopexit2, %._crit_edge25.loopexit, %10
  %81 = phi i8* [ %16, %10 ], [ %.ph, %._crit_edge25.loopexit ], [ %.ph3, %._crit_edge25.loopexit2 ]
  %.1 = phi i32 [ 0, %10 ], [ %.1.ph, %._crit_edge25.loopexit ], [ %.1.ph4, %._crit_edge25.loopexit2 ]
  call void @BZ2_bzReadClose(i32* %3, i8* %81)
  %82 = load i32, i32* @verbosity, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %90

; <label>:84:                                     ; preds = %._crit_edge25
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %86 = load i8*, i8** @progName, align 8
  %87 = getelementptr [9 x i8], [9 x i8]* @.str.99, i32 0, i32 0
  %88 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* %87, i8* %86, i8* %88)
  br label %90

; <label>:90:                                     ; preds = %84, %._crit_edge25
  %91 = load i32, i32* %2, align 4
  switch i32 %91, label %121 [
    i32 -9, label %92
    i32 -6, label %93
    i32 -4, label %94
    i32 -3, label %98
    i32 -7, label %99
    i32 -5, label %103
  ]

; <label>:92:                                     ; preds = %90
  call void @configError() #12
  unreachable

; <label>:93:                                     ; preds = %90, %71, %68, %1
  call void @ioError() #12
  unreachable

; <label>:94:                                     ; preds = %90
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %96 = getelementptr [36 x i8], [36 x i8]* @.str.100, i32 0, i32 0
  %97 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* %96)
  br label %123

; <label>:98:                                     ; preds = %90
  call void @outOfMemory() #12
  unreachable

; <label>:99:                                     ; preds = %90
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %101 = getelementptr [24 x i8], [24 x i8]* @.str.101, i32 0, i32 0
  %102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* %101)
  br label %123

; <label>:103:                                    ; preds = %90
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %105 = icmp ne %struct._IO_FILE* %0, %104
  br i1 %105, label %106, label %108

; <label>:106:                                    ; preds = %103
  %107 = call i32 @fclose(%struct._IO_FILE* %0)
  br label %108

; <label>:108:                                    ; preds = %106, %103
  %109 = icmp eq i32 %.1, 1
  br i1 %109, label %110, label %114

; <label>:110:                                    ; preds = %108
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %112 = getelementptr [46 x i8], [46 x i8]* @.str.102, i32 0, i32 0
  %113 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* %112)
  br label %123

; <label>:114:                                    ; preds = %108
  %115 = load i8, i8* @noisy, align 1
  %116 = icmp ne i8 %115, 0
  br i1 %116, label %117, label %123

; <label>:117:                                    ; preds = %114
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %119 = getelementptr [36 x i8], [36 x i8]* @.str.103, i32 0, i32 0
  %120 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %118, i8* %119)
  br label %123

; <label>:121:                                    ; preds = %90
  %122 = getelementptr [22 x i8], [22 x i8]* @.str.104, i32 0, i32 0
  call void @panic(i8* %122) #12
  unreachable

; <label>:123:                                    ; preds = %114, %117, %74, %77, %110, %99, %94
  %.0 = phi i8 [ 0, %110 ], [ 0, %99 ], [ 0, %94 ], [ 1, %77 ], [ 1, %74 ], [ 1, %117 ], [ 1, %114 ]
  ret i8 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @ferror(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @myfeof(%struct._IO_FILE*) #0 {
  %2 = call i32 @fgetc(%struct._IO_FILE* %0)
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = call i32 @ungetc(i32 %2, %struct._IO_FILE* %0)
  br label %6

; <label>:6:                                      ; preds = %1, %4
  %.0 = phi i8 [ 0, %4 ], [ 1, %1 ]
  ret i8 %.0
}

declare dso_local i32 @fclose(%struct._IO_FILE*) #5

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @configError() #6 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = getelementptr [236 x i8], [236 x i8]* @.str.77, i32 0, i32 0
  %3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %2)
  call void @setExit(i32 3)
  %4 = load i32, i32* @exitValue, align 4
  call void @exit(i32 %4) #11
  unreachable
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @ioError() #6 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** @progName, align 8
  %3 = getelementptr [65 x i8], [65 x i8]* @.str.78, i32 0, i32 0
  %4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %3, i8* %2)
  %5 = load i8*, i8** @progName, align 8
  call void @perror(i8* %5)
  call void @showFileNames()
  call void @cleanUpAndFail(i32 1) #12
  unreachable
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @outOfMemory() #6 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** @progName, align 8
  %3 = getelementptr [38 x i8], [38 x i8]* @.str.48, i32 0, i32 0
  %4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %3, i8* %2)
  call void @showFileNames()
  call void @cleanUpAndFail(i32 1) #12
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @showFileNames() #0 {
  %1 = load i8, i8* @noisy, align 1
  %2 = icmp ne i8 %1, 0
  br i1 %2, label %3, label %9

; <label>:3:                                      ; preds = %0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = getelementptr [36 x i8], [36 x i8]* @.str.38, i32 0, i32 0
  %6 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %7 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* %5, i8* %6, i8* %7)
  br label %9

; <label>:9:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @cleanUpAndFail(i32) #6 {
  %2 = alloca %struct.stat, align 8, !track !43
  %3 = load i32, i32* @srcMode, align 4
  %4 = icmp eq i32 %3, 3
  %5 = load i32, i32* @opMode, align 4
  %6 = icmp ne i32 %5, 3
  %or.cond = and i1 %4, %6
  br i1 %or.cond, label %7, label %57

; <label>:7:                                      ; preds = %1
  %8 = load i8, i8* @deleteOutputOnInterrupt, align 1
  %9 = zext i8 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %57

; <label>:11:                                     ; preds = %7
  %12 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %13 = call i32 @stat64(i8* %12, %struct.stat* %2) #9
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %39

; <label>:15:                                     ; preds = %11
  %16 = load i8, i8* @noisy, align 1
  %17 = icmp ne i8 %16, 0
  br i1 %17, label %18, label %24

; <label>:18:                                     ; preds = %15
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %20 = load i8*, i8** @progName, align 8
  %21 = getelementptr [44 x i8], [44 x i8]* @.str.39, i32 0, i32 0
  %22 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* %21, i8* %20, i8* %22)
  br label %24

; <label>:24:                                     ; preds = %18, %15
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %26 = icmp ne %struct._IO_FILE* %25, null
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %24
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %29 = call i32 @fclose(%struct._IO_FILE* %28)
  br label %30

; <label>:30:                                     ; preds = %27, %24
  %31 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %32 = call i32 @remove(i8* %31) #9
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %57

; <label>:34:                                     ; preds = %30
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %36 = load i8*, i8** @progName, align 8
  %37 = getelementptr [59 x i8], [59 x i8]* @.str.40, i32 0, i32 0
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* %37, i8* %36)
  br label %57

; <label>:39:                                     ; preds = %11
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %41 = load i8*, i8** @progName, align 8
  %42 = getelementptr [49 x i8], [49 x i8]* @.str.41, i32 0, i32 0
  %43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* %42, i8* %41)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %45 = load i8*, i8** @progName, align 8
  %46 = getelementptr [56 x i8], [56 x i8]* @.str.42, i32 0, i32 0
  %47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* %46, i8* %45)
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %49 = load i8*, i8** @progName, align 8
  %50 = getelementptr [32 x i8], [32 x i8]* @.str.43, i32 0, i32 0
  %51 = getelementptr [1034 x i8], [1034 x i8]* @outName, i32 0, i32 0
  %52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %50, i8* %49, i8* %51)
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %54 = load i8*, i8** @progName, align 8
  %55 = getelementptr [61 x i8], [61 x i8]* @.str.44, i32 0, i32 0
  %56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* %55, i8* %54)
  br label %57

; <label>:57:                                     ; preds = %39, %34, %30, %7, %1
  %58 = load i8, i8* @noisy, align 1
  %59 = zext i8 %58 to i32
  %60 = icmp ne i32 %59, 0
  %61 = load i32, i32* @numFileNames, align 4
  %62 = icmp sgt i32 %61, 0
  %or.cond3 = and i1 %60, %62
  br i1 %or.cond3, label %63, label %77

; <label>:63:                                     ; preds = %57
  %64 = load i32, i32* @numFilesProcessed, align 4
  %65 = load i32, i32* @numFileNames, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %77

; <label>:67:                                     ; preds = %63
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %69 = load i8*, i8** @progName, align 8
  %70 = load i8*, i8** @progName, align 8
  %71 = load i32, i32* @numFileNames, align 4
  %72 = load i32, i32* @numFileNames, align 4
  %73 = load i32, i32* @numFilesProcessed, align 4
  %74 = sub nsw i32 %72, %73
  %75 = getelementptr [110 x i8], [110 x i8]* @.str.45, i32 0, i32 0
  %76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* %75, i8* %69, i8* %70, i32 %71, i32 %74)
  br label %77

; <label>:77:                                     ; preds = %67, %63, %57
  call void @setExit(i32 %0)
  %78 = load i32, i32* @exitValue, align 4
  call void @exit(i32 %78) #11
  unreachable
}

; Function Attrs: nounwind
declare dso_local i32 @remove(i8*) #1

declare dso_local void @perror(i8*) #5

declare dso_local i32 @fgetc(%struct._IO_FILE*) #5

declare dso_local i32 @ungetc(i32, %struct._IO_FILE*) #5

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mapSuffix(i8*, i8*, i8*) #0 {
  %4 = call zeroext i8 @hasSuffix(i8* %0, i8* %1)
  %5 = icmp ne i8 %4, 0
  br i1 %5, label %6, label %12

; <label>:6:                                      ; preds = %3
  %7 = call i64 @strlen(i8* %0) #10
  %8 = call i64 @strlen(i8* %1) #10
  %9 = sub i64 %7, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  store i8 0, i8* %10, align 1
  %11 = call i8* @strcat(i8* %0, i8* %2) #9, !track !44
  br label %12

; <label>:12:                                     ; preds = %3, %6
  %.0 = phi i8 [ 1, %6 ], [ 0, %3 ]
  ret i8 %.0
}

; Function Attrs: nounwind
declare dso_local i8* @strcat(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @notAStandardFile(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !45
  %3 = call i32 @lstat64(i8* %0, %struct.stat* %2) #9
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %10, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 61440
  %9 = icmp eq i32 %8, 32768
  %. = select i1 %9, i8 0, i8 1
  br label %10

; <label>:10:                                     ; preds = %5, %1
  %.0 = phi i8 [ 1, %1 ], [ %., %5 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @countHardLinks(i8*) #0 {
  %2 = alloca %struct.stat, align 8, !track !46
  %3 = call i32 @lstat64(i8* %0, %struct.stat* %2) #9
  %4 = icmp ne i32 %3, 0
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %6, 1
  %8 = trunc i64 %7 to i32
  %.0 = select i1 %4, i32 0, i32 %8
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @saveInputFileMetaInfo(i8*) #0 {
  %2 = call i32 @stat64(i8* %0, %struct.stat* @fileMetaInfo) #9
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  call void @ioError() #12
  unreachable

; <label>:5:                                      ; preds = %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._IO_FILE* @fopen_output_safely(i8*, i8*) #2 {
  %3 = call i32 (i8*, i32, ...) @open64(i8* %0, i32 193, i32 384)
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %10, label %5

; <label>:5:                                      ; preds = %2
  %6 = call %struct._IO_FILE* @fdopen(i32 %3, i8* %1) #9, !track !47
  %7 = icmp eq %struct._IO_FILE* %6, null
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %5
  %9 = call i32 @close(i32 %3)
  br label %10

; <label>:10:                                     ; preds = %5, %8, %2
  %.0 = phi %struct._IO_FILE* [ null, %2 ], [ %6, %8 ], [ %6, %5 ]
  ret %struct._IO_FILE* %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @uncompressStream(%struct._IO_FILE*, %struct._IO_FILE*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [5000 x i8], align 16, !track !48
  %6 = alloca [5000 x i8], align 16, !track !49
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8, !track !50
  store i32 0, i32* %7, align 4
  %9 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %142, label %11

; <label>:11:                                     ; preds = %2
  %12 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %142, label %14

; <label>:14:                                     ; preds = %11
  %15 = load i32, i32* @verbosity, align 4
  %16 = load i8, i8* @smallMode, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [5000 x i8], [5000 x i8]* %6, i32 0, i32 0
  %19 = load i32, i32* %7, align 4
  %20 = call i8* @BZ2_bzReadOpen(i32* %3, %struct._IO_FILE* %0, i32 %15, i32 %17, i8* %18, i32 %19)
  %21 = icmp eq i8* %20, null
  br i1 %21, label %._crit_edge31, label %.lr.ph30.preheader

.lr.ph30.preheader:                               ; preds = %14
  br label %.lr.ph30

.lr.ph30:                                         ; preds = %.lr.ph30.preheader, %78
  %22 = phi i8* [ %83, %78 ], [ %20, %.lr.ph30.preheader ]
  %.0228 = phi i32 [ %26, %78 ], [ 0, %.lr.ph30.preheader ]
  call void @unroll_loop(i32 19)
  %23 = load i32, i32* %3, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %._crit_edge31.loopexit, label %25

; <label>:25:                                     ; preds = %.lr.ph30
  %26 = add nuw nsw i32 %.0228, 1
  %27 = load i32, i32* %3, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %.lr.ph22.preheader, label %._crit_edge23

.lr.ph22.preheader:                               ; preds = %25
  br label %.lr.ph22

; <label>:29:                                     ; preds = %46
  %30 = load i32, i32* %3, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %.lr.ph22, label %._crit_edge23.loopexit

.lr.ph22:                                         ; preds = %.lr.ph22.preheader, %29
  call void @unroll_loop(i32 20)
  %32 = getelementptr inbounds [5000 x i8], [5000 x i8]* %5, i32 0, i32 0
  %33 = call i32 @BZ2_bzRead(i32* %3, i8* %22, i8* %32, i32 5000)
  %34 = load i32, i32* %3, align 4
  %35 = icmp eq i32 %34, -5
  br i1 %35, label %116, label %36

; <label>:36:                                     ; preds = %.lr.ph22
  %37 = load i32, i32* %3, align 4
  %38 = icmp eq i32 %37, 0
  %39 = load i32, i32* %3, align 4
  %40 = icmp eq i32 %39, 4
  %or.cond = or i1 %38, %40
  %41 = icmp sgt i32 %33, 0
  %or.cond2 = and i1 %or.cond, %41
  br i1 %or.cond2, label %42, label %46

; <label>:42:                                     ; preds = %36
  %43 = getelementptr inbounds [5000 x i8], [5000 x i8]* %5, i32 0, i32 0
  %44 = sext i32 %33 to i64
  %45 = call i64 @fwrite(i8* %43, i64 1, i64 %44, %struct._IO_FILE* %1)
  br label %46

; <label>:46:                                     ; preds = %36, %42
  %47 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %.loopexit3, label %29

._crit_edge23.loopexit:                           ; preds = %29
  br label %._crit_edge23

._crit_edge23:                                    ; preds = %._crit_edge23.loopexit, %25
  %49 = phi i8* [ %22, %25 ], [ %22, %._crit_edge23.loopexit ]
  %50 = load i32, i32* %3, align 4
  %51 = icmp ne i32 %50, 4
  br i1 %51, label %._crit_edge31.loopexit, label %52

; <label>:52:                                     ; preds = %._crit_edge23
  call void @BZ2_bzReadGetUnused(i32* %3, i8* %49, i8** %8, i32* %7)
  %53 = load i32, i32* %3, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %57

; <label>:55:                                     ; preds = %52
  %56 = getelementptr [27 x i8], [27 x i8]* @.str.88, i32 0, i32 0
  call void @panic(i8* %56) #12
  unreachable

; <label>:57:                                     ; preds = %52
  %58 = load i8*, i8** %8, align 8
  %59 = load i32, i32* %7, align 4
  %60 = icmp slt i32 0, %59
  br i1 %60, label %.lr.ph26.preheader, label %._crit_edge27

.lr.ph26.preheader:                               ; preds = %57
  br label %.lr.ph26

.lr.ph26:                                         ; preds = %.lr.ph26.preheader, %.lr.ph26
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph26 ], [ 0, %.lr.ph26.preheader ]
  call void @unroll_loop(i32 21)
  %61 = getelementptr inbounds i8, i8* %58, i64 %indvars.iv
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [5000 x i8], [5000 x i8]* %6, i64 0, i64 %indvars.iv
  store i8 %62, i8* %63, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %64 = load i32, i32* %7, align 4
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %indvars.iv.next, %65
  br i1 %66, label %.lr.ph26, label %._crit_edge27.loopexit

._crit_edge27.loopexit:                           ; preds = %.lr.ph26
  br label %._crit_edge27

._crit_edge27:                                    ; preds = %._crit_edge27.loopexit, %57
  call void @BZ2_bzReadClose(i32* %3, i8* %49)
  %67 = load i32, i32* %3, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %71

; <label>:69:                                     ; preds = %._crit_edge27
  %70 = getelementptr [27 x i8], [27 x i8]* @.str.88, i32 0, i32 0
  call void @panic(i8* %70) #12
  unreachable

; <label>:71:                                     ; preds = %._crit_edge27
  %72 = load i32, i32* %7, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %78

; <label>:74:                                     ; preds = %71
  %75 = call zeroext i8 @myfeof(%struct._IO_FILE* %0)
  %76 = zext i8 %75 to i32
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %._crit_edge.loopexit5, label %78

; <label>:78:                                     ; preds = %74, %71
  %79 = load i32, i32* @verbosity, align 4
  %80 = load i8, i8* @smallMode, align 1
  %81 = zext i8 %80 to i32
  %82 = load i32, i32* %7, align 4
  %83 = call i8* @BZ2_bzReadOpen(i32* %3, %struct._IO_FILE* %0, i32 %79, i32 %81, i8* %18, i32 %82)
  %84 = icmp eq i8* %83, null
  br i1 %84, label %._crit_edge31.loopexit, label %.lr.ph30

._crit_edge.loopexit:                             ; preds = %122
  br label %._crit_edge

._crit_edge.loopexit5:                            ; preds = %74
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit5, %._crit_edge.loopexit, %119
  %85 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %142, label %87

; <label>:87:                                     ; preds = %._crit_edge
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %89 = icmp ne %struct._IO_FILE* %1, %88
  br i1 %89, label %90, label %94

; <label>:90:                                     ; preds = %87
  %91 = call i32 @fileno(%struct._IO_FILE* %1) #9
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %142, label %93

; <label>:93:                                     ; preds = %90
  call void @applySavedFileAttrToOutputFile(i32 %91)
  br label %94

; <label>:94:                                     ; preds = %93, %87
  %95 = call i32 @fclose(%struct._IO_FILE* %0)
  %96 = icmp eq i32 %95, -1
  br i1 %96, label %142, label %97

; <label>:97:                                     ; preds = %94
  %98 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %142, label %100

; <label>:100:                                    ; preds = %97
  %101 = call i32 @fflush(%struct._IO_FILE* %1)
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %142, label %103

; <label>:103:                                    ; preds = %100
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %105 = icmp ne %struct._IO_FILE* %1, %104
  br i1 %105, label %106, label %109

; <label>:106:                                    ; preds = %103
  %107 = call i32 @fclose(%struct._IO_FILE* %1)
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %108 = icmp eq i32 %107, -1
  br i1 %108, label %142, label %109

; <label>:109:                                    ; preds = %106, %103
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %110 = load i32, i32* @verbosity, align 4
  %111 = icmp sge i32 %110, 2
  br i1 %111, label %112, label %169

; <label>:112:                                    ; preds = %109
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %114 = getelementptr [6 x i8], [6 x i8]* @.str.89, i32 0, i32 0
  %115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %113, i8* %114)
  br label %169

; <label>:116:                                    ; preds = %.lr.ph22
  %.lcssa19 = phi i32 [ %26, %.lr.ph22 ]
  %.lcssa7 = phi i8* [ %22, %.lr.ph22 ]
  %117 = load i8, i8* @forceOverwrite, align 1
  %118 = icmp ne i8 %117, 0
  br i1 %118, label %119, label %._crit_edge31

; <label>:119:                                    ; preds = %116
  call void @rewind(%struct._IO_FILE* %0)
  %120 = call zeroext i8 @myfeof(%struct._IO_FILE* %0)
  %121 = icmp ne i8 %120, 0
  br i1 %121, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %119
  br label %.lr.ph

; <label>:122:                                    ; preds = %136
  %123 = call zeroext i8 @myfeof(%struct._IO_FILE* %0)
  %124 = icmp ne i8 %123, 0
  br i1 %124, label %._crit_edge.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %122
  call void @unroll_loop(i32 22)
  %125 = getelementptr inbounds [5000 x i8], [5000 x i8]* %5, i32 0, i32 0
  %126 = call i64 @fread(i8* %125, i64 1, i64 5000, %struct._IO_FILE* %0)
  %127 = trunc i64 %126 to i32
  %128 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %.loopexit, label %130

; <label>:130:                                    ; preds = %.lr.ph
  %131 = icmp sgt i32 %127, 0
  br i1 %131, label %132, label %136

; <label>:132:                                    ; preds = %130
  %133 = getelementptr inbounds [5000 x i8], [5000 x i8]* %5, i32 0, i32 0
  %134 = sext i32 %127 to i64
  %135 = call i64 @fwrite(i8* %133, i64 1, i64 %134, %struct._IO_FILE* %1)
  br label %136

; <label>:136:                                    ; preds = %132, %130
  %137 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %138 = icmp ne i32 %137, 0
  br i1 %138, label %.loopexit, label %122

._crit_edge31.loopexit:                           ; preds = %78, %.lr.ph30, %._crit_edge23
  %.ph4 = phi i8* [ %49, %._crit_edge23 ], [ %83, %78 ], [ %22, %.lr.ph30 ]
  %.1.ph = phi i32 [ %26, %._crit_edge23 ], [ %26, %78 ], [ %.0228, %.lr.ph30 ]
  br label %._crit_edge31

._crit_edge31:                                    ; preds = %._crit_edge31.loopexit, %116, %14
  %139 = phi i8* [ %20, %14 ], [ %.lcssa7, %116 ], [ %.ph4, %._crit_edge31.loopexit ]
  %.1 = phi i32 [ 0, %14 ], [ %.lcssa19, %116 ], [ %.1.ph, %._crit_edge31.loopexit ]
  call void @BZ2_bzReadClose(i32* %4, i8* %139)
  %140 = load i32, i32* %3, align 4
  switch i32 %140, label %167 [
    i32 -9, label %141
    i32 -6, label %142
    i32 -4, label %143
    i32 -3, label %144
    i32 -7, label %145
    i32 -5, label %146
  ]

; <label>:141:                                    ; preds = %._crit_edge31
  call void @configError() #12
  unreachable

.loopexit:                                        ; preds = %.lr.ph, %136
  br label %142

.loopexit3:                                       ; preds = %46
  br label %142

; <label>:142:                                    ; preds = %.loopexit3, %.loopexit, %._crit_edge31, %106, %100, %97, %94, %90, %._crit_edge, %11, %2
  call void @ioError() #12
  unreachable

; <label>:143:                                    ; preds = %._crit_edge31
  call void @crcError() #12
  unreachable

; <label>:144:                                    ; preds = %._crit_edge31
  call void @outOfMemory() #12
  unreachable

; <label>:145:                                    ; preds = %._crit_edge31
  call void @compressedStreamEOF() #12
  unreachable

; <label>:146:                                    ; preds = %._crit_edge31
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %148 = icmp ne %struct._IO_FILE* %0, %147
  br i1 %148, label %149, label %151

; <label>:149:                                    ; preds = %146
  %150 = call i32 @fclose(%struct._IO_FILE* %0)
  br label %151

; <label>:151:                                    ; preds = %149, %146
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %153 = icmp ne %struct._IO_FILE* %1, %152
  br i1 %153, label %154, label %156

; <label>:154:                                    ; preds = %151
  %155 = call i32 @fclose(%struct._IO_FILE* %1)
  br label %156

; <label>:156:                                    ; preds = %154, %151
  %157 = icmp eq i32 %.1, 1
  br i1 %157, label %169, label %158

; <label>:158:                                    ; preds = %156
  %159 = load i8, i8* @noisy, align 1
  %160 = icmp ne i8 %159, 0
  br i1 %160, label %161, label %169

; <label>:161:                                    ; preds = %158
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %163 = load i8*, i8** @progName, align 8
  %164 = getelementptr [45 x i8], [45 x i8]* @.str.90, i32 0, i32 0
  %165 = getelementptr [1034 x i8], [1034 x i8]* @inName, i32 0, i32 0
  %166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %162, i8* %164, i8* %163, i8* %165)
  br label %169

; <label>:167:                                    ; preds = %._crit_edge31
  %168 = getelementptr [28 x i8], [28 x i8]* @.str.91, i32 0, i32 0
  call void @panic(i8* %168) #12
  unreachable

; <label>:169:                                    ; preds = %158, %161, %156, %109, %112
  %.0 = phi i8 [ 1, %112 ], [ 1, %109 ], [ 0, %156 ], [ 1, %161 ], [ 1, %158 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @applySavedTimeInfoToOutputFile(i8*) #0 {
  %2 = alloca %struct.timespec, align 8, !track !51
  %3 = getelementptr %struct.stat, %struct.stat* @fileMetaInfo, i32 0, i32 11, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  store i64 %4, i64* %5, align 8
  %6 = getelementptr %struct.stat, %struct.stat* @fileMetaInfo, i32 0, i32 12, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  store i64 %7, i64* %8, align 8
  %9 = call i32 @utime(i8* %0, %struct.timespec* %2) #9
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %1
  call void @ioError() #12
  unreachable

; <label>:12:                                     ; preds = %1
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @utime(i8*, %struct.timespec*) #1

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #5

; Function Attrs: noinline nounwind uwtable
define internal void @applySavedFileAttrToOutputFile(i32) #0 {
  %2 = getelementptr %struct.stat, %struct.stat* @fileMetaInfo, i32 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = call i32 @fchmod(i32 %0, i32 %3) #9
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  call void @ioError() #12
  unreachable

; <label>:7:                                      ; preds = %1
  %8 = getelementptr %struct.stat, %struct.stat* @fileMetaInfo, i32 0, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr %struct.stat, %struct.stat* @fileMetaInfo, i32 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = call i32 @fchown(i32 %0, i32 %9, i32 %11) #9
  ret void
}

declare dso_local void @rewind(%struct._IO_FILE*) #5

declare dso_local i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #5

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @crcError() #6 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** @progName, align 8
  %3 = getelementptr [47 x i8], [47 x i8]* @.str.92, i32 0, i32 0
  %4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %3, i8* %2)
  call void @showFileNames()
  call void @cadvise()
  call void @cleanUpAndFail(i32 2) #12
  unreachable
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @compressedStreamEOF() #6 {
  %1 = load i8, i8* @noisy, align 1
  %2 = icmp ne i8 %1, 0
  br i1 %2, label %3, label %9

; <label>:3:                                      ; preds = %0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = load i8*, i8** @progName, align 8
  %6 = getelementptr [95 x i8], [95 x i8]* @.str.93, i32 0, i32 0
  %7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* %6, i8* %5)
  %8 = load i8*, i8** @progName, align 8
  call void @perror(i8* %8)
  call void @showFileNames()
  call void @cadvise()
  br label %9

; <label>:9:                                      ; preds = %3, %0
  call void @cleanUpAndFail(i32 2) #12
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @cadvise() #0 {
  %1 = load i8, i8* @noisy, align 1
  %2 = icmp ne i8 %1, 0
  br i1 %2, label %3, label %7

; <label>:3:                                      ; preds = %0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = getelementptr [241 x i8], [241 x i8]* @.str.46, i32 0, i32 0
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* %5)
  br label %7

; <label>:7:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @fchmod(i32, i32) #1

; Function Attrs: nounwind
declare dso_local i32 @fchown(i32, i32, i32) #1

declare dso_local i32 @open64(i8*, i32, ...) #5

; Function Attrs: nounwind
declare dso_local %struct._IO_FILE* @fdopen(i32, i8*) #1

declare dso_local i32 @close(i32) #5

; Function Attrs: nounwind
declare dso_local i32 @lstat64(i8*, %struct.stat*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hasSuffix(i8*, i8*) #0 {
  %3 = call i64 @strlen(i8* %0) #10
  %4 = trunc i64 %3 to i32
  %5 = call i64 @strlen(i8* %1) #10
  %6 = trunc i64 %5 to i32
  %7 = icmp slt i32 %4, %6
  br i1 %7, label %16, label %8

; <label>:8:                                      ; preds = %2
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds i8, i8* %0, i64 %9
  %11 = sext i32 %6 to i64
  %12 = sub i64 0, %11
  %13 = getelementptr inbounds i8, i8* %10, i64 %12
  %14 = call i32 @strcmp(i8* %13, i8* %1) #10
  %15 = icmp eq i32 %14, 0
  %. = select i1 %15, i8 1, i8 0
  br label %16

; <label>:16:                                     ; preds = %8, %2
  %.0 = phi i8 [ 0, %2 ], [ %., %8 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @compressStream(%struct._IO_FILE*, %struct._IO_FILE*) #0 {
  %3 = alloca [5000 x i8], align 16, !track !52
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [32 x i8], align 16, !track !53
  %11 = alloca [32 x i8], align 16, !track !54
  %12 = alloca %struct.UInt64, align 1
  %13 = alloca %struct.UInt64, align 1
  %14 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %111, label %16

; <label>:16:                                     ; preds = %2
  %17 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %111, label %19

; <label>:19:                                     ; preds = %16
  %20 = load i32, i32* @blockSize100k, align 4
  %21 = load i32, i32* @verbosity, align 4
  %22 = load i32, i32* @workFactor, align 4
  %23 = call i8* @BZ2_bzWriteOpen(i32* %8, %struct._IO_FILE* %1, i32 %20, i32 %21, i32 %22)
  %24 = load i32, i32* %8, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %107, label %26

; <label>:26:                                     ; preds = %19
  %27 = load i32, i32* @verbosity, align 4
  %28 = icmp sge i32 %27, 2
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %26
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %31 = getelementptr [2 x i8], [2 x i8]* @.str.73, i32 0, i32 0
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* %31)
  br label %33

; <label>:33:                                     ; preds = %29, %26
  %34 = call zeroext i8 @myfeof(%struct._IO_FILE* %0)
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %33
  br label %.lr.ph

; <label>:36:                                     ; preds = %48
  %37 = call zeroext i8 @myfeof(%struct._IO_FILE* %0)
  %38 = icmp ne i8 %37, 0
  br i1 %38, label %._crit_edge.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %36
  call void @unroll_loop(i32 24)
  %39 = getelementptr inbounds [5000 x i8], [5000 x i8]* %3, i32 0, i32 0
  %40 = call i64 @fread(i8* %39, i64 1, i64 5000, %struct._IO_FILE* %0)
  %41 = trunc i64 %40 to i32
  %42 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %.loopexit, label %44

; <label>:44:                                     ; preds = %.lr.ph
  %45 = icmp sgt i32 %41, 0
  br i1 %45, label %46, label %48

; <label>:46:                                     ; preds = %44
  %47 = getelementptr inbounds [5000 x i8], [5000 x i8]* %3, i32 0, i32 0
  call void @BZ2_bzWrite(i32* %8, i8* %23, i8* %47, i32 %41)
  br label %48

; <label>:48:                                     ; preds = %46, %44
  %49 = load i32, i32* %8, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %.loopexit2, label %36

._crit_edge.loopexit:                             ; preds = %36
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %33
  call void @BZ2_bzWriteClose64(i32* %8, i8* %23, i32 0, i32* %4, i32* %5, i32* %6, i32* %7)
  %51 = load i32, i32* %8, align 4
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %107, label %53

; <label>:53:                                     ; preds = %._crit_edge
  %54 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %111, label %56

; <label>:56:                                     ; preds = %53
  %57 = call i32 @fflush(%struct._IO_FILE* %1)
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %111, label %59

; <label>:59:                                     ; preds = %56
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %61 = icmp ne %struct._IO_FILE* %1, %60
  br i1 %61, label %62, label %68

; <label>:62:                                     ; preds = %59
  %63 = call i32 @fileno(%struct._IO_FILE* %1) #9
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %111, label %65

; <label>:65:                                     ; preds = %62
  call void @applySavedFileAttrToOutputFile(i32 %63)
  %66 = call i32 @fclose(%struct._IO_FILE* %1)
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %111, label %68

; <label>:68:                                     ; preds = %65, %59
  store %struct._IO_FILE* null, %struct._IO_FILE** @outputHandleJustInCase, align 8
  %69 = call i32 @ferror(%struct._IO_FILE* %0) #9
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %111, label %71

; <label>:71:                                     ; preds = %68
  %72 = call i32 @fclose(%struct._IO_FILE* %0)
  %73 = icmp eq i32 %72, -1
  br i1 %73, label %111, label %74

; <label>:74:                                     ; preds = %71
  %75 = load i32, i32* @verbosity, align 4
  %76 = icmp sge i32 %75, 1
  br i1 %76, label %77, label %106

; <label>:77:                                     ; preds = %74
  %78 = load i32, i32* %4, align 4
  %79 = icmp eq i32 %78, 0
  %80 = load i32, i32* %5, align 4
  %81 = icmp eq i32 %80, 0
  %or.cond = and i1 %79, %81
  br i1 %or.cond, label %82, label %86

; <label>:82:                                     ; preds = %77
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %84 = getelementptr [22 x i8], [22 x i8]* @.str.74, i32 0, i32 0
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* %84)
  br label %106

; <label>:86:                                     ; preds = %77
  %87 = load i32, i32* %4, align 4
  %88 = load i32, i32* %5, align 4
  call void @uInt64_from_UInt32s(%struct.UInt64* %12, i32 %87, i32 %88)
  %89 = load i32, i32* %6, align 4
  %90 = load i32, i32* %7, align 4
  call void @uInt64_from_UInt32s(%struct.UInt64* %13, i32 %89, i32 %90)
  %91 = call double @uInt64_to_double(%struct.UInt64* %12)
  %92 = call double @uInt64_to_double(%struct.UInt64* %13)
  %93 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i32 0, i32 0
  call void @uInt64_toAscii(i8* %93, %struct.UInt64* %12)
  %94 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i32 0, i32 0
  call void @uInt64_toAscii(i8* %94, %struct.UInt64* %13)
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %96 = fdiv double %91, %92
  %97 = fmul double 8.000000e+00, %92
  %98 = fdiv double %97, %91
  %99 = fdiv double %92, %91
  %100 = fsub double 1.000000e+00, %99
  %101 = fmul double 1.000000e+02, %100
  %102 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i32 0, i32 0
  %103 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i32 0, i32 0
  %104 = getelementptr [57 x i8], [57 x i8]* @.str.75, i32 0, i32 0
  %105 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* %104, double %96, double %98, double %101, i8* %102, i8* %103)
  br label %106

; <label>:106:                                    ; preds = %82, %86, %74
  ret void

.loopexit2:                                       ; preds = %48
  br label %107

; <label>:107:                                    ; preds = %.loopexit2, %._crit_edge, %19
  call void @BZ2_bzWriteClose64(i32* %9, i8* %23, i32 1, i32* %4, i32* %5, i32* %6, i32* %7)
  %108 = load i32, i32* %8, align 4
  switch i32 %108, label %112 [
    i32 -9, label %109
    i32 -3, label %110
    i32 -6, label %111
  ]

; <label>:109:                                    ; preds = %107
  call void @configError() #12
  unreachable

; <label>:110:                                    ; preds = %107
  call void @outOfMemory() #12
  unreachable

.loopexit:                                        ; preds = %.lr.ph
  br label %111

; <label>:111:                                    ; preds = %.loopexit, %107, %71, %68, %65, %62, %56, %53, %16, %2
  call void @ioError() #12
  unreachable

; <label>:112:                                    ; preds = %107
  %113 = getelementptr [26 x i8], [26 x i8]* @.str.76, i32 0, i32 0
  call void @panic(i8* %113) #12
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @uInt64_from_UInt32s(%struct.UInt64*, i32, i32) #0 {
  %4 = lshr i32 %2, 24
  %5 = and i32 %4, 255
  %6 = trunc i32 %5 to i8
  %7 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  store i8 %6, i8* %8, align 1
  %9 = lshr i32 %2, 16
  %10 = and i32 %9, 255
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 6
  store i8 %11, i8* %13, align 1
  %14 = lshr i32 %2, 8
  %15 = and i32 %14, 255
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %17, i64 0, i64 5
  store i8 %16, i8* %18, align 1
  %19 = and i32 %2, 255
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %21, i64 0, i64 4
  store i8 %20, i8* %22, align 1
  %23 = lshr i32 %1, 24
  %24 = and i32 %23, 255
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %26, i64 0, i64 3
  store i8 %25, i8* %27, align 1
  %28 = lshr i32 %1, 16
  %29 = and i32 %28, 255
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %31, i64 0, i64 2
  store i8 %30, i8* %32, align 1
  %33 = lshr i32 %1, 8
  %34 = and i32 %33, 255
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %36, i64 0, i64 1
  store i8 %35, i8* %37, align 1
  %38 = and i32 %1, 255
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %40, i64 0, i64 0
  store i8 %39, i8* %41, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal double @uInt64_to_double(%struct.UInt64*) #0 {
  br label %2

; <label>:2:                                      ; preds = %1, %2
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %2 ]
  %.05 = phi double [ 0.000000e+00, %1 ], [ %8, %2 ]
  %.023 = phi double [ 1.000000e+00, %1 ], [ %9, %2 ]
  %3 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %4 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 %indvars.iv
  %5 = load i8, i8* %4, align 1
  %6 = uitofp i8 %5 to double
  %7 = fmul double %.023, %6
  %8 = fadd double %.05, %7
  %9 = fmul double %.023, 2.560000e+02
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 8
  br i1 %exitcond, label %2, label %10

; <label>:10:                                     ; preds = %2
  %.0.lcssa = phi double [ %8, %2 ]
  ret double %.0.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal void @uInt64_toAscii(i8*, %struct.UInt64*) #0 {
  %3 = alloca [32 x i8], align 16
  %4 = alloca %struct.UInt64, align 1
  %5 = bitcast %struct.UInt64* %4 to i8*
  %6 = bitcast %struct.UInt64* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %6, i64 8, i1 false)
  br label %7

; <label>:7:                                      ; preds = %7, %2
  %indvars.iv3 = phi i64 [ %indvars.iv.next4, %7 ], [ 0, %2 ]
  %8 = call i32 @uInt64_qrm10(%struct.UInt64* %4)
  %9 = add nsw i32 %8, 48
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i64 0, i64 %indvars.iv3
  store i8 %10, i8* %11, align 1
  %indvars.iv.next4 = add nuw i64 %indvars.iv3, 1
  %12 = call zeroext i8 @uInt64_isZero(%struct.UInt64* %4)
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %13, true
  br i1 %14, label %7, label %15

; <label>:15:                                     ; preds = %7
  %.lcssa.wide = phi i64 [ %indvars.iv.next4, %7 ]
  %16 = trunc i64 %.lcssa.wide to i32
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %0, i64 %17
  store i8 0, i8* %18, align 1
  %19 = sext i32 %16 to i64
  %20 = sext i32 %16 to i64
  br label %21

; <label>:21:                                     ; preds = %15, %21
  %indvars.iv = phi i64 [ 0, %15 ], [ %indvars.iv.next, %21 ]
  call void @unroll_loop(i32 25)
  %22 = sub nsw i64 %20, %indvars.iv
  %23 = sub nsw i64 %22, 1
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv
  store i8 %25, i8* %26, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %27 = icmp slt i64 %indvars.iv.next, %19
  br i1 %27, label %21, label %28

; <label>:28:                                     ; preds = %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #8

; Function Attrs: noinline nounwind uwtable
define internal i32 @uInt64_qrm10(%struct.UInt64*) #0 {
  br label %2

; <label>:2:                                      ; preds = %1, %2
  %indvars.iv = phi i64 [ 7, %1 ], [ %indvars.iv.next, %2 ]
  %.012 = phi i32 [ 0, %1 ], [ %13, %2 ]
  %3 = mul nuw i32 %.012, 256
  %4 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %indvars.iv
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add i32 %3, %7
  %9 = udiv i32 %8, 10
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 %indvars.iv
  store i8 %10, i8* %12, align 1
  %13 = urem i32 %8, 10
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %14 = icmp sge i64 %indvars.iv.next, 0
  br i1 %14, label %2, label %15

; <label>:15:                                     ; preds = %2
  %.01.lcssa = phi i32 [ %13, %2 ]
  ret i32 %.01.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @uInt64_isZero(%struct.UInt64*) #0 {
  br label %2

; <label>:2:                                      ; preds = %1, %8
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %8 ]
  %3 = getelementptr inbounds %struct.UInt64, %struct.UInt64* %0, i32 0, i32 0
  %4 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 %indvars.iv
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %10, label %8

; <label>:8:                                      ; preds = %2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %9 = icmp ult i64 %indvars.iv.next, 8
  br i1 %9, label %2, label %10

; <label>:10:                                     ; preds = %8, %2
  %.0 = phi i8 [ 0, %2 ], [ 1, %8 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.zzzz* @mkCell() #2 {
  %1 = call i8* @myMalloc(i32 16)
  %2 = bitcast i8* %1 to %struct.zzzz*
  %3 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %2, i32 0, i32 0
  store i8* null, i8** %3, align 8
  %4 = getelementptr inbounds %struct.zzzz, %struct.zzzz* %2, i32 0, i32 1
  store %struct.zzzz* null, %struct.zzzz** %4, align 8
  ret %struct.zzzz* %2
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @myMalloc(i32) #2 {
  %2 = sext i32 %0 to i64
  %3 = call noalias i8* @malloc(i64 %2) #9, !track !55
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %1
  call void @outOfMemory() #12
  unreachable

; <label>:6:                                      ; preds = %1
  ret i8* %3
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #1

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #1

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #7

; Function Attrs: nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bz__AssertH__fail(i32) #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3 = call i8* @BZ2_bzlibVersion()
  %4 = getelementptr [443 x i8], [443 x i8]* @.str.105, i32 0, i32 0
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* %4, i32 %0, i8* %3)
  %6 = icmp eq i32 %0, 1007
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %1
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = getelementptr [1057 x i8], [1057 x i8]* @.str.1.106, i32 0, i32 0
  %10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* %9)
  br label %11

; <label>:11:                                     ; preds = %7, %1
  call void @exit(i32 3) #11
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @BZ2_bzlibVersion() #0 {
  %1 = getelementptr [19 x i8], [19 x i8]* @.str.5.107, i32 0, i32 0
  ret i8* %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzCompressInit(%struct.bz_stream*, i32, i32, i32) #0 {
  %5 = call i32 @bz_config_ok()
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %152

; <label>:7:                                      ; preds = %4
  %8 = icmp eq %struct.bz_stream* %0, null
  %9 = icmp slt i32 %1, 1
  %or.cond = or i1 %8, %9
  %10 = icmp sgt i32 %1, 9
  %or.cond1 = or i1 %or.cond, %10
  %11 = icmp slt i32 %3, 0
  %or.cond2 = or i1 %or.cond1, %11
  %12 = icmp sgt i32 %3, 250
  %or.cond3 = or i1 %or.cond2, %12
  br i1 %or.cond3, label %152, label %13

; <label>:13:                                     ; preds = %7
  %14 = icmp eq i32 %3, 0
  %spec.select = select i1 %14, i32 30, i32 %3
  %15 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  %16 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %15, align 8
  %17 = icmp eq i8* (i8*, i32, i32)* %16, null
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %13
  %19 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %19, align 8
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %22 = load void (i8*, i8*)*, void (i8*, i8*)** %21, align 8
  %23 = icmp eq void (i8*, i8*)* %22, null
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %25, align 8
  br label %26

; <label>:26:                                     ; preds = %24, %20
  %27 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  %28 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %27, align 8
  %29 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %30 = load i8*, i8** %29, align 8
  %31 = call i8* %28(i8* %30, i32 55768, i32 1)
  %32 = bitcast i8* %31 to %struct.EState*
  %33 = icmp eq %struct.EState* %32, null
  br i1 %33, label %152, label %34

; <label>:34:                                     ; preds = %26
  %35 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 0
  store %struct.bz_stream* %0, %struct.bz_stream** %35, align 8
  %36 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 4
  store i32* null, i32** %36, align 8
  %37 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 5
  store i32* null, i32** %37, align 8
  %38 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 6
  store i32* null, i32** %38, align 8
  %39 = mul nsw i32 100000, %1
  %40 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  %41 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %40, align 8
  %42 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %43 = load i8*, i8** %42, align 8
  %44 = sext i32 %39 to i64
  %45 = mul i64 %44, 4
  %46 = trunc i64 %45 to i32
  %47 = call i8* %41(i8* %43, i32 %46, i32 1)
  %48 = bitcast i8* %47 to i32*
  %49 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 4
  store i32* %48, i32** %49, align 8
  %50 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  %51 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %50, align 8
  %52 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %53 = load i8*, i8** %52, align 8
  %54 = add nsw i32 %39, 34
  %55 = sext i32 %54 to i64
  %56 = mul i64 %55, 4
  %57 = trunc i64 %56 to i32
  %58 = call i8* %51(i8* %53, i32 %57, i32 1)
  %59 = bitcast i8* %58 to i32*
  %60 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 5
  store i32* %59, i32** %60, align 8
  %61 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  %62 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %61, align 8
  %63 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %64 = load i8*, i8** %63, align 8
  %65 = call i8* %62(i8* %64, i32 262148, i32 1)
  %66 = bitcast i8* %65 to i32*
  %67 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 6
  store i32* %66, i32** %67, align 8
  %68 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 4
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %79, label %71

; <label>:71:                                     ; preds = %34
  %72 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 5
  %73 = load i32*, i32** %72, align 8
  %74 = icmp eq i32* %73, null
  br i1 %74, label %79, label %75

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 6
  %77 = load i32*, i32** %76, align 8
  %78 = icmp eq i32* %77, null
  br i1 %78, label %79, label %123

; <label>:79:                                     ; preds = %75, %71, %34
  %80 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 4
  %81 = load i32*, i32** %80, align 8
  %82 = icmp ne i32* %81, null
  br i1 %82, label %83, label %91

; <label>:83:                                     ; preds = %79
  %84 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %85 = load void (i8*, i8*)*, void (i8*, i8*)** %84, align 8
  %86 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 4
  %89 = load i32*, i32** %88, align 8
  %90 = bitcast i32* %89 to i8*
  call void %85(i8* %87, i8* %90)
  br label %91

; <label>:91:                                     ; preds = %83, %79
  %92 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 5
  %93 = load i32*, i32** %92, align 8
  %94 = icmp ne i32* %93, null
  br i1 %94, label %95, label %103

; <label>:95:                                     ; preds = %91
  %96 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %97 = load void (i8*, i8*)*, void (i8*, i8*)** %96, align 8
  %98 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 5
  %101 = load i32*, i32** %100, align 8
  %102 = bitcast i32* %101 to i8*
  call void %97(i8* %99, i8* %102)
  br label %103

; <label>:103:                                    ; preds = %95, %91
  %104 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 6
  %105 = load i32*, i32** %104, align 8
  %106 = icmp ne i32* %105, null
  br i1 %106, label %107, label %115

; <label>:107:                                    ; preds = %103
  %108 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %109 = load void (i8*, i8*)*, void (i8*, i8*)** %108, align 8
  %110 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 6
  %113 = load i32*, i32** %112, align 8
  %114 = bitcast i32* %113 to i8*
  call void %109(i8* %111, i8* %114)
  br label %115

; <label>:115:                                    ; preds = %107, %103
  %116 = icmp ne %struct.EState* %32, null
  br i1 %116, label %117, label %152

; <label>:117:                                    ; preds = %115
  %118 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %119 = load void (i8*, i8*)*, void (i8*, i8*)** %118, align 8
  %120 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %121 = load i8*, i8** %120, align 8
  %122 = bitcast %struct.EState* %32 to i8*
  call void %119(i8* %121, i8* %122)
  br label %152

; <label>:123:                                    ; preds = %75
  %124 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 29
  store i32 0, i32* %124, align 4
  %125 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 2
  store i32 2, i32* %125, align 4
  %126 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 1
  store i32 2, i32* %126, align 8
  %127 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 27
  store i32 0, i32* %127, align 4
  %128 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 30
  store i32 %1, i32* %128, align 8
  %129 = mul nsw i32 100000, %1
  %130 = sub nsw i32 %129, 19
  %131 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 18
  store i32 %130, i32* %131, align 8
  %132 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 28
  store i32 %2, i32* %132, align 8
  %133 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 12
  store i32 %spec.select, i32* %133, align 8
  %134 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 5
  %135 = load i32*, i32** %134, align 8
  %136 = bitcast i32* %135 to i8*
  %137 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 9
  store i8* %136, i8** %137, align 8
  %138 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 4
  %139 = load i32*, i32** %138, align 8
  %140 = bitcast i32* %139 to i16*
  %141 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 10
  store i16* %140, i16** %141, align 8
  %142 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 11
  store i8* null, i8** %142, align 8
  %143 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 4
  %144 = load i32*, i32** %143, align 8
  %145 = getelementptr inbounds %struct.EState, %struct.EState* %32, i32 0, i32 8
  store i32* %144, i32** %145, align 8
  %146 = bitcast %struct.EState* %32 to i8*
  %147 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  store i8* %146, i8** %147, align 8
  %148 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 2
  store i32 0, i32* %148, align 4
  %149 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 3
  store i32 0, i32* %149, align 8
  %150 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 6
  store i32 0, i32* %150, align 4
  %151 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 7
  store i32 0, i32* %151, align 8
  call void @init_RL(%struct.EState* %32)
  call void @prepare_new_block(%struct.EState* %32)
  br label %152

; <label>:152:                                    ; preds = %115, %117, %26, %7, %4, %123
  %.0 = phi i32 [ 0, %123 ], [ -9, %4 ], [ -2, %7 ], [ -3, %26 ], [ -3, %117 ], [ -3, %115 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @bz_config_ok() #0 {
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @default_bzalloc(i8*, i32, i32) #0 {
  %4 = mul nsw i32 %1, %2
  %5 = sext i32 %4 to i64
  %6 = call noalias i8* @malloc(i64 %5) #9
  ret i8* %6
}

; Function Attrs: noinline nounwind uwtable
define internal void @default_bzfree(i8*, i8*) #0 {
  %3 = icmp ne i8* %1, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %2
  call void @free(i8* %1) #9
  br label %5

; <label>:5:                                      ; preds = %4, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_RL(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  store i32 256, i32* %2, align 4
  %3 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  store i32 0, i32* %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_new_block(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 20
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  store i32 -1, i32* %5, align 8
  br label %6

; <label>:6:                                      ; preds = %1, %6
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %6 ]
  call void @unroll_loop(i32 26)
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %8 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %indvars.iv
  store i8 0, i8* %8, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %6, label %9

; <label>:9:                                      ; preds = %6
  %10 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 29
  %11 = load i32, i32* %10, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %10, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzCompress(%struct.bz_stream*, i32) #0 {
  %3 = icmp eq %struct.bz_stream* %0, null
  br i1 %3, label %88, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8* %6 to %struct.EState*
  %8 = icmp eq %struct.EState* %7, null
  br i1 %8, label %88, label %9

; <label>:9:                                      ; preds = %4
  %10 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 0
  %11 = load %struct.bz_stream*, %struct.bz_stream** %10, align 8
  %12 = icmp ne %struct.bz_stream* %11, %0
  br i1 %12, label %88, label %.preheader

.preheader:                                       ; preds = %9
  br label %13

; <label>:13:                                     ; preds = %.preheader, %.backedge
  call void @unroll_loop(i32 27)
  %14 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  switch i32 %15, label %87 [
    i32 1, label %.loopexit
    i32 2, label %16
    i32 3, label %33
    i32 4, label %59
  ]

; <label>:16:                                     ; preds = %13
  switch i32 %1, label %.loopexit [
    i32 0, label %17
    i32 1, label %23
    i32 2, label %28
  ]

; <label>:17:                                     ; preds = %16
  %18 = call zeroext i8 @handle_compress(%struct.bz_stream* %0)
  %19 = zext i8 %18 to i32
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i64
  %22 = select i1 %20, i32 1, i32 -2
  br label %88

; <label>:23:                                     ; preds = %16
  %24 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 3
  store i32 %25, i32* %26, align 8
  %27 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 1
  store i32 3, i32* %27, align 8
  br label %.backedge

.backedge:                                        ; preds = %23, %28
  br label %13

; <label>:28:                                     ; preds = %16
  %29 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 3
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 1
  store i32 4, i32* %32, align 8
  br label %.backedge

; <label>:33:                                     ; preds = %13
  %34 = icmp ne i32 %1, 1
  br i1 %34, label %88, label %35

; <label>:35:                                     ; preds = %33
  %36 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 0
  %39 = load %struct.bz_stream*, %struct.bz_stream** %38, align 8
  %40 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %39, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ne i32 %37, %41
  br i1 %42, label %88, label %43

; <label>:43:                                     ; preds = %35
  %44 = call zeroext i8 @handle_compress(%struct.bz_stream* %0)
  %45 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = icmp ugt i32 %46, 0
  br i1 %47, label %88, label %48

; <label>:48:                                     ; preds = %43
  %49 = call zeroext i8 @isempty_RL(%struct.EState* %7)
  %50 = icmp ne i8 %49, 0
  br i1 %50, label %51, label %88

; <label>:51:                                     ; preds = %48
  %52 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 20
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 19
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %53, %55
  br i1 %56, label %88, label %57

; <label>:57:                                     ; preds = %51
  %58 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 1
  store i32 2, i32* %58, align 8
  br label %88

; <label>:59:                                     ; preds = %13
  %60 = icmp ne i32 %1, 2
  br i1 %60, label %88, label %61

; <label>:61:                                     ; preds = %59
  %62 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 3
  %63 = load i32, i32* %62, align 8
  %64 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 0
  %65 = load %struct.bz_stream*, %struct.bz_stream** %64, align 8
  %66 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %65, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = icmp ne i32 %63, %67
  br i1 %68, label %88, label %69

; <label>:69:                                     ; preds = %61
  %70 = call zeroext i8 @handle_compress(%struct.bz_stream* %0)
  %71 = icmp ne i8 %70, 0
  br i1 %71, label %72, label %88

; <label>:72:                                     ; preds = %69
  %73 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 3
  %74 = load i32, i32* %73, align 8
  %75 = icmp ugt i32 %74, 0
  br i1 %75, label %88, label %76

; <label>:76:                                     ; preds = %72
  %77 = call zeroext i8 @isempty_RL(%struct.EState* %7)
  %78 = icmp ne i8 %77, 0
  br i1 %78, label %79, label %88

; <label>:79:                                     ; preds = %76
  %80 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 20
  %81 = load i32, i32* %80, align 8
  %82 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 19
  %83 = load i32, i32* %82, align 4
  %84 = icmp slt i32 %81, %83
  br i1 %84, label %88, label %85

; <label>:85:                                     ; preds = %79
  %86 = getelementptr inbounds %struct.EState, %struct.EState* %7, i32 0, i32 1
  store i32 1, i32* %86, align 8
  br label %88

; <label>:87:                                     ; preds = %13
  br label %88

.loopexit:                                        ; preds = %13, %16
  %.0.ph = phi i32 [ -2, %16 ], [ -1, %13 ]
  br label %88

; <label>:88:                                     ; preds = %.loopexit, %72, %76, %79, %69, %61, %59, %43, %48, %51, %35, %33, %9, %4, %2, %87, %85, %57, %17
  %.0 = phi i32 [ 0, %87 ], [ 4, %85 ], [ 1, %57 ], [ %22, %17 ], [ -2, %2 ], [ -2, %4 ], [ -2, %9 ], [ -1, %33 ], [ -1, %35 ], [ 2, %51 ], [ 2, %48 ], [ 2, %43 ], [ -1, %59 ], [ -1, %61 ], [ -1, %69 ], [ 3, %79 ], [ 3, %76 ], [ 3, %72 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handle_compress(%struct.bz_stream*) #0 {
  %2 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  %3 = load i8*, i8** %2, align 8
  %4 = bitcast i8* %3 to %struct.EState*
  %5 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 0
  br label %6

; <label>:6:                                      ; preds = %1, %83
  %.01 = phi i8 [ 0, %1 ], [ %.12, %83 ]
  %.0 = phi i8 [ 0, %1 ], [ %.1, %83 ]
  call void @unroll_loop(i32 28)
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %46

; <label>:10:                                     ; preds = %6
  %11 = call zeroext i8 @copy_output_until_stop(%struct.EState* %4)
  %12 = zext i8 %11 to i32
  %13 = zext i8 %.0 to i32
  %14 = or i32 %13, %12
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 20
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 19
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %17, %19
  br i1 %20, label %84, label %21

; <label>:21:                                     ; preds = %10
  %22 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 4
  br i1 %24, label %25, label %33

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %25
  %30 = call zeroext i8 @isempty_RL(%struct.EState* %4)
  %31 = zext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %84, label %33

; <label>:33:                                     ; preds = %29, %25, %21
  call void @prepare_new_block(%struct.EState* %4)
  %34 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 2
  store i32 2, i32* %34, align 4
  %35 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 3
  br i1 %37, label %38, label %46

; <label>:38:                                     ; preds = %33
  %39 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %46

; <label>:42:                                     ; preds = %38
  %43 = call zeroext i8 @isempty_RL(%struct.EState* %4)
  %44 = zext i8 %43 to i32
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %84, label %46

; <label>:46:                                     ; preds = %33, %38, %42, %6
  %.1 = phi i8 [ %.0, %6 ], [ %15, %42 ], [ %15, %38 ], [ %15, %33 ]
  %47 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %83

; <label>:50:                                     ; preds = %46
  %51 = call zeroext i8 @copy_input_until_stop(%struct.EState* %4)
  %52 = zext i8 %51 to i32
  %53 = zext i8 %.01 to i32
  %54 = or i32 %53, %52
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = icmp ne i32 %57, 2
  br i1 %58, label %59, label %70

; <label>:59:                                     ; preds = %50
  %60 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 3
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %70

; <label>:63:                                     ; preds = %59
  call void @flush_RL(%struct.EState* %4)
  %64 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 4
  %67 = zext i1 %66 to i32
  %68 = trunc i32 %67 to i8
  call void @BZ2_compressBlock(%struct.EState* %4, i8 zeroext %68)
  %69 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 2
  store i32 1, i32* %69, align 4
  br label %83

; <label>:70:                                     ; preds = %59, %50
  %71 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 17
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 18
  %74 = load i32, i32* %73, align 8
  %75 = icmp sge i32 %72, %74
  br i1 %75, label %76, label %78

; <label>:76:                                     ; preds = %70
  call void @BZ2_compressBlock(%struct.EState* %4, i8 zeroext 0)
  %77 = getelementptr inbounds %struct.EState, %struct.EState* %4, i32 0, i32 2
  store i32 1, i32* %77, align 4
  br label %83

; <label>:78:                                     ; preds = %70
  %79 = load %struct.bz_stream*, %struct.bz_stream** %5, align 8
  %80 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %79, i32 0, i32 1
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %84, label %83

; <label>:83:                                     ; preds = %63, %78, %76, %46
  %.12 = phi i8 [ %.01, %46 ], [ %55, %76 ], [ %55, %78 ], [ %55, %63 ]
  br label %6

; <label>:84:                                     ; preds = %78, %42, %29, %10
  %.23 = phi i8 [ %.01, %10 ], [ %.01, %29 ], [ %.01, %42 ], [ %55, %78 ]
  %.2 = phi i8 [ %15, %10 ], [ %15, %29 ], [ %15, %42 ], [ %.1, %78 ]
  %85 = zext i8 %.23 to i32
  %86 = icmp ne i32 %85, 0
  %87 = zext i8 %.2 to i32
  %88 = icmp ne i32 %87, 0
  %89 = select i1 %86, i1 true, i1 %88
  %90 = zext i1 %89 to i32
  %91 = trunc i32 %90 to i8
  ret i8 %91
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @isempty_RL(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 256
  br i1 %4, label %5, label %9

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %10, label %9

; <label>:9:                                      ; preds = %5, %1
  br label %10

; <label>:10:                                     ; preds = %5, %9
  %.0 = phi i8 [ 1, %9 ], [ 0, %5 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @copy_output_until_stop(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %3 = load %struct.bz_stream*, %struct.bz_stream** %2, align 8
  %4 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3, i32 0, i32 5
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %1
  call void @unroll_loop(i32 29)
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 20
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %10 = load i32, i32* %9, align 4
  %11 = icmp sge i32 %8, %10
  br i1 %11, label %._crit_edge.loopexit, label %.lr.ph1

.lr.ph1:                                          ; preds = %.lr.ph.preheader
  br label %15

.lr.ph:                                           ; preds = %56
  %.03 = phi i8 [ 1, %56 ]
  call void @unroll_loop(i32 29)
  %12 = load i32, i32* %7, align 8
  %13 = load i32, i32* %9, align 4
  %14 = icmp sge i32 %12, %13
  br i1 %14, label %.lr.ph.._crit_edge.loopexit_crit_edge, label %15

; <label>:15:                                     ; preds = %.lr.ph1, %.lr.ph
  %16 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 11
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 20
  %19 = load i32, i32* %18, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %24 = load %struct.bz_stream*, %struct.bz_stream** %23, align 8
  %25 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %24, i32 0, i32 4
  %26 = load i8*, i8** %25, align 8
  store i8 %22, i8* %26, align 1
  %27 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 20
  %28 = load i32, i32* %27, align 8
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %27, align 8
  %30 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %31 = load %struct.bz_stream*, %struct.bz_stream** %30, align 8
  %32 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %31, i32 0, i32 5
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, -1
  store i32 %34, i32* %32, align 8
  %35 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %36 = load %struct.bz_stream*, %struct.bz_stream** %35, align 8
  %37 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %36, i32 0, i32 4
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %39, i8** %37, align 8
  %40 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %41 = load %struct.bz_stream*, %struct.bz_stream** %40, align 8
  %42 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %41, i32 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %42, align 4
  %45 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %46 = load %struct.bz_stream*, %struct.bz_stream** %45, align 8
  %47 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %46, i32 0, i32 6
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %56

; <label>:50:                                     ; preds = %15
  %51 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %52 = load %struct.bz_stream*, %struct.bz_stream** %51, align 8
  %53 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %52, i32 0, i32 7
  %54 = load i32, i32* %53, align 8
  %55 = add i32 %54, 1
  store i32 %55, i32* %53, align 8
  br label %56

; <label>:56:                                     ; preds = %50, %15
  %57 = load %struct.bz_stream*, %struct.bz_stream** %2, align 8
  %58 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %57, i32 0, i32 5
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %.._crit_edge.loopexit_crit_edge, label %.lr.ph

.._crit_edge.loopexit_crit_edge:                  ; preds = %56
  %split = phi i8 [ 1, %56 ]
  br label %._crit_edge.loopexit

.lr.ph.._crit_edge.loopexit_crit_edge:            ; preds = %.lr.ph
  %split2 = phi i8 [ %.03, %.lr.ph ]
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph.._crit_edge.loopexit_crit_edge, %.._crit_edge.loopexit_crit_edge, %.lr.ph.preheader
  %.02.ph = phi i8 [ %split2, %.lr.ph.._crit_edge.loopexit_crit_edge ], [ %split, %.._crit_edge.loopexit_crit_edge ], [ 0, %.lr.ph.preheader ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %.02 = phi i8 [ 0, %1 ], [ %.02.ph, %._crit_edge.loopexit ]
  ret i8 %.02
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @copy_input_until_stop(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 2
  %5 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 18
  %8 = load i32, i32* %7, align 8
  %9 = icmp sge i32 %6, %8
  br i1 %4, label %10, label %117

; <label>:10:                                     ; preds = %1
  br i1 %9, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %10
  call void @unroll_loop(i32 30)
  %11 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %12 = load %struct.bz_stream*, %struct.bz_stream** %11, align 8
  %13 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %._crit_edge.loopexit, label %.lr.ph3

.lr.ph3:                                          ; preds = %.lr.ph.preheader
  br label %20

.lr.ph:                                           ; preds = %113
  %.06 = phi i8 [ 1, %113 ]
  call void @unroll_loop(i32 30)
  %16 = load %struct.bz_stream*, %struct.bz_stream** %11, align 8
  %17 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %16, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %.lr.ph.._crit_edge.loopexit_crit_edge, label %20

; <label>:20:                                     ; preds = %.lr.ph3, %.lr.ph
  %21 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %22 = load %struct.bz_stream*, %struct.bz_stream** %21, align 8
  %23 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %28 = load i32, i32* %27, align 4
  %29 = icmp ne i32 %26, %28
  br i1 %29, label %30, label %66

; <label>:30:                                     ; preds = %20
  %31 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %66

; <label>:34:                                     ; preds = %30
  %35 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %39 = load i32, i32* %38, align 8
  %40 = shl i32 %39, 8
  %41 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %42 = load i32, i32* %41, align 8
  %43 = lshr i32 %42, 24
  %44 = zext i8 %37 to i32
  %45 = xor i32 %43, %44
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = xor i32 %40, %48
  %50 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %52 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %53 = load i32, i32* %52, align 4
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %51, i64 0, i64 %54
  store i8 1, i8* %55, align 1
  %56 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %57, i64 %60
  store i8 %37, i8* %61, align 1
  %62 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %62, align 4
  %65 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  store i32 %26, i32* %65, align 4
  br label %86

; <label>:66:                                     ; preds = %30, %20
  %67 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %68 = load i32, i32* %67, align 4
  %69 = icmp ne i32 %26, %68
  br i1 %69, label %74, label %70

; <label>:70:                                     ; preds = %66
  %71 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 255
  br i1 %73, label %74, label %82

; <label>:74:                                     ; preds = %70, %66
  %75 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %76 = load i32, i32* %75, align 4
  %77 = icmp ult i32 %76, 256
  br i1 %77, label %78, label %79

; <label>:78:                                     ; preds = %74
  call void @add_pair_to_block(%struct.EState* %0)
  br label %79

; <label>:79:                                     ; preds = %78, %74
  %80 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  store i32 %26, i32* %80, align 4
  %81 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  store i32 1, i32* %81, align 8
  br label %86

; <label>:82:                                     ; preds = %70
  %83 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %84 = load i32, i32* %83, align 8
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %83, align 8
  br label %86

; <label>:86:                                     ; preds = %79, %82, %34
  %87 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %88 = load %struct.bz_stream*, %struct.bz_stream** %87, align 8
  %89 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %88, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %91, i8** %89, align 8
  %92 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %93 = load %struct.bz_stream*, %struct.bz_stream** %92, align 8
  %94 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %93, i32 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = add i32 %95, -1
  store i32 %96, i32* %94, align 8
  %97 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %98 = load %struct.bz_stream*, %struct.bz_stream** %97, align 8
  %99 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %98, i32 0, i32 2
  %100 = load i32, i32* %99, align 4
  %101 = add i32 %100, 1
  store i32 %101, i32* %99, align 4
  %102 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %103 = load %struct.bz_stream*, %struct.bz_stream** %102, align 8
  %104 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %103, i32 0, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %113

; <label>:107:                                    ; preds = %86
  %108 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %109 = load %struct.bz_stream*, %struct.bz_stream** %108, align 8
  %110 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %109, i32 0, i32 3
  %111 = load i32, i32* %110, align 8
  %112 = add i32 %111, 1
  store i32 %112, i32* %110, align 8
  br label %113

; <label>:113:                                    ; preds = %107, %86
  %114 = load i32, i32* %5, align 4
  %115 = load i32, i32* %7, align 8
  %116 = icmp sge i32 %114, %115
  br i1 %116, label %.._crit_edge.loopexit_crit_edge, label %.lr.ph

; <label>:117:                                    ; preds = %1
  br i1 %9, label %._crit_edge, label %.lr.ph9.preheader

.lr.ph9.preheader:                                ; preds = %117
  %118 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 3
  call void @unroll_loop(i32 31)
  %119 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %120 = load %struct.bz_stream*, %struct.bz_stream** %119, align 8
  %121 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %120, i32 0, i32 1
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %._crit_edge.loopexit1, label %.lr.ph6

.lr.ph6:                                          ; preds = %.lr.ph9.preheader
  br label %128

.lr.ph9:                                          ; preds = %224
  %.17 = phi i8 [ 1, %224 ]
  call void @unroll_loop(i32 31)
  %124 = load %struct.bz_stream*, %struct.bz_stream** %119, align 8
  %125 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %124, i32 0, i32 1
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %.lr.ph9.._crit_edge.loopexit1_crit_edge, label %128

; <label>:128:                                    ; preds = %.lr.ph6, %.lr.ph9
  %.175 = phi i8 [ 0, %.lr.ph6 ], [ %.17, %.lr.ph9 ]
  %129 = load i32, i32* %118, align 8
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %.._crit_edge.loopexit1_crit_edge, label %131

; <label>:131:                                    ; preds = %128
  %132 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %133 = load %struct.bz_stream*, %struct.bz_stream** %132, align 8
  %134 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %133, i32 0, i32 0
  %135 = load i8*, i8** %134, align 8
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %139 = load i32, i32* %138, align 4
  %140 = icmp ne i32 %137, %139
  br i1 %140, label %141, label %177

; <label>:141:                                    ; preds = %131
  %142 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %143 = load i32, i32* %142, align 8
  %144 = icmp eq i32 %143, 1
  br i1 %144, label %145, label %177

; <label>:145:                                    ; preds = %141
  %146 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %147 = load i32, i32* %146, align 4
  %148 = trunc i32 %147 to i8
  %149 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %150 = load i32, i32* %149, align 8
  %151 = shl i32 %150, 8
  %152 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %153 = load i32, i32* %152, align 8
  %154 = lshr i32 %153, 24
  %155 = zext i8 %148 to i32
  %156 = xor i32 %154, %155
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = xor i32 %151, %159
  %161 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  store i32 %160, i32* %161, align 8
  %162 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %163 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds [256 x i8], [256 x i8]* %162, i64 0, i64 %165
  store i8 1, i8* %166, align 1
  %167 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %168 = load i8*, i8** %167, align 8
  %169 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %170 = load i32, i32* %169, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %168, i64 %171
  store i8 %148, i8* %172, align 1
  %173 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %174 = load i32, i32* %173, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %173, align 4
  %176 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  store i32 %137, i32* %176, align 4
  br label %197

; <label>:177:                                    ; preds = %141, %131
  %178 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %179 = load i32, i32* %178, align 4
  %180 = icmp ne i32 %137, %179
  br i1 %180, label %185, label %181

; <label>:181:                                    ; preds = %177
  %182 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %183 = load i32, i32* %182, align 8
  %184 = icmp eq i32 %183, 255
  br i1 %184, label %185, label %193

; <label>:185:                                    ; preds = %181, %177
  %186 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %187 = load i32, i32* %186, align 4
  %188 = icmp ult i32 %187, 256
  br i1 %188, label %189, label %190

; <label>:189:                                    ; preds = %185
  call void @add_pair_to_block(%struct.EState* %0)
  br label %190

; <label>:190:                                    ; preds = %189, %185
  %191 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  store i32 %137, i32* %191, align 4
  %192 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  store i32 1, i32* %192, align 8
  br label %197

; <label>:193:                                    ; preds = %181
  %194 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %195 = load i32, i32* %194, align 8
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %194, align 8
  br label %197

; <label>:197:                                    ; preds = %190, %193, %145
  %198 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %199 = load %struct.bz_stream*, %struct.bz_stream** %198, align 8
  %200 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %199, i32 0, i32 0
  %201 = load i8*, i8** %200, align 8
  %202 = getelementptr inbounds i8, i8* %201, i32 1
  store i8* %202, i8** %200, align 8
  %203 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %204 = load %struct.bz_stream*, %struct.bz_stream** %203, align 8
  %205 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %204, i32 0, i32 1
  %206 = load i32, i32* %205, align 8
  %207 = add i32 %206, -1
  store i32 %207, i32* %205, align 8
  %208 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %209 = load %struct.bz_stream*, %struct.bz_stream** %208, align 8
  %210 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %209, i32 0, i32 2
  %211 = load i32, i32* %210, align 4
  %212 = add i32 %211, 1
  store i32 %212, i32* %210, align 4
  %213 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %214 = load %struct.bz_stream*, %struct.bz_stream** %213, align 8
  %215 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %214, i32 0, i32 2
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %224

; <label>:218:                                    ; preds = %197
  %219 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 0
  %220 = load %struct.bz_stream*, %struct.bz_stream** %219, align 8
  %221 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %220, i32 0, i32 3
  %222 = load i32, i32* %221, align 8
  %223 = add i32 %222, 1
  store i32 %223, i32* %221, align 8
  br label %224

; <label>:224:                                    ; preds = %218, %197
  %225 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 3
  %226 = load i32, i32* %225, align 8
  %227 = add i32 %226, -1
  store i32 %227, i32* %225, align 8
  %228 = load i32, i32* %5, align 4
  %229 = load i32, i32* %7, align 8
  %230 = icmp sge i32 %228, %229
  br i1 %230, label %.._crit_edge.loopexit1_crit_edge9, label %.lr.ph9

.lr.ph.._crit_edge.loopexit_crit_edge:            ; preds = %.lr.ph
  %split = phi i8 [ %.06, %.lr.ph ]
  br label %._crit_edge.loopexit

.._crit_edge.loopexit_crit_edge:                  ; preds = %113
  %split4 = phi i8 [ 1, %113 ]
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.._crit_edge.loopexit_crit_edge, %.lr.ph.._crit_edge.loopexit_crit_edge, %.lr.ph.preheader
  %.2.ph = phi i8 [ %split, %.lr.ph.._crit_edge.loopexit_crit_edge ], [ %split4, %.._crit_edge.loopexit_crit_edge ], [ 0, %.lr.ph.preheader ]
  br label %._crit_edge

.._crit_edge.loopexit1_crit_edge:                 ; preds = %128
  %split7 = phi i8 [ %.175, %128 ]
  br label %._crit_edge.loopexit1

.lr.ph9.._crit_edge.loopexit1_crit_edge:          ; preds = %.lr.ph9
  %split8 = phi i8 [ %.17, %.lr.ph9 ]
  br label %._crit_edge.loopexit1

.._crit_edge.loopexit1_crit_edge9:                ; preds = %224
  %split10 = phi i8 [ 1, %224 ]
  br label %._crit_edge.loopexit1

._crit_edge.loopexit1:                            ; preds = %.._crit_edge.loopexit1_crit_edge9, %.lr.ph9.._crit_edge.loopexit1_crit_edge, %.._crit_edge.loopexit1_crit_edge, %.lr.ph9.preheader
  %.2.ph2 = phi i8 [ %split7, %.._crit_edge.loopexit1_crit_edge ], [ %split8, %.lr.ph9.._crit_edge.loopexit1_crit_edge ], [ %split10, %.._crit_edge.loopexit1_crit_edge9 ], [ 0, %.lr.ph9.preheader ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit1, %._crit_edge.loopexit, %117, %10
  %.2 = phi i8 [ 0, %10 ], [ 0, %117 ], [ %.2.ph, %._crit_edge.loopexit ], [ %.2.ph2, %._crit_edge.loopexit1 ]
  ret i8 %.2
}

; Function Attrs: noinline nounwind uwtable
define internal void @flush_RL(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %3 = load i32, i32* %2, align 4
  %4 = icmp ult i32 %3, 256
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %1
  call void @add_pair_to_block(%struct.EState* %0)
  br label %6

; <label>:6:                                      ; preds = %5, %1
  call void @init_RL(%struct.EState* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_pair_to_block(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %3 = load i32, i32* %2, align 4
  %4 = trunc i32 %3 to i8
  %5 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %6 = load i32, i32* %5, align 8
  %7 = icmp slt i32 0, %6
  br i1 %7, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.01 = phi i32 [ %21, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 10)
  %8 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %9 = load i32, i32* %8, align 8
  %10 = shl i32 %9, 8
  %11 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %12 = load i32, i32* %11, align 8
  %13 = lshr i32 %12, 24
  %14 = zext i8 %4 to i32
  %15 = xor i32 %13, %14
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = xor i32 %10, %18
  %20 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  store i32 %19, i32* %20, align 8
  %21 = add nuw nsw i32 %.01, 1
  %22 = load i32, i32* %5, align 8
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  %24 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %25 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 13
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* %24, i64 0, i64 %27
  store i8 1, i8* %28, align 1
  %29 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %30 = load i32, i32* %29, align 8
  switch i32 %30, label %88 [
    i32 1, label %31
    i32 2, label %41
    i32 3, label %60
  ]

; <label>:31:                                     ; preds = %._crit_edge
  %32 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %33, i64 %36
  store i8 %4, i8* %37, align 1
  %38 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %39 = load i32, i32* %38, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %38, align 4
  br label %144

; <label>:41:                                     ; preds = %._crit_edge
  %42 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %43, i64 %46
  store i8 %4, i8* %47, align 1
  %48 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %49 = load i32, i32* %48, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %48, align 4
  %51 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %52, i64 %55
  store i8 %4, i8* %56, align 1
  %57 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %57, align 4
  br label %144

; <label>:60:                                     ; preds = %._crit_edge
  %61 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  store i8 %4, i8* %66, align 1
  %67 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 4
  %70 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  store i8 %4, i8* %75, align 1
  %76 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %76, align 4
  %79 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %82 = load i32, i32* %81, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %80, i64 %83
  store i8 %4, i8* %84, align 1
  %85 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %86 = load i32, i32* %85, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %85, align 4
  br label %144

; <label>:88:                                     ; preds = %._crit_edge
  %89 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %90 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %91 = load i32, i32* %90, align 8
  %92 = sub nsw i32 %91, 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [256 x i8], [256 x i8]* %89, i64 0, i64 %93
  store i8 1, i8* %94, align 1
  %95 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %96, i64 %99
  store i8 %4, i8* %100, align 1
  %101 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %101, align 4
  %104 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %105 = load i8*, i8** %104, align 8
  %106 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %107 = load i32, i32* %106, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %105, i64 %108
  store i8 %4, i8* %109, align 1
  %110 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %111 = load i32, i32* %110, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %110, align 4
  %113 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %114, i64 %117
  store i8 %4, i8* %118, align 1
  %119 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %119, align 4
  %122 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %123 = load i8*, i8** %122, align 8
  %124 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %125 = load i32, i32* %124, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %123, i64 %126
  store i8 %4, i8* %127, align 1
  %128 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %129 = load i32, i32* %128, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %128, align 4
  %131 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 14
  %132 = load i32, i32* %131, align 8
  %133 = sub nsw i32 %132, 4
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %136 = load i8*, i8** %135, align 8
  %137 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %136, i64 %139
  store i8 %134, i8* %140, align 1
  %141 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %142 = load i32, i32* %141, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %141, align 4
  br label %144

; <label>:144:                                    ; preds = %88, %60, %41, %31
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzCompressEnd(%struct.bz_stream*) #0 {
  %2 = icmp eq %struct.bz_stream* %0, null
  br i1 %2, label %56, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.EState*
  %7 = icmp eq %struct.EState* %6, null
  br i1 %7, label %56, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.EState, %struct.EState* %6, i32 0, i32 0
  %10 = load %struct.bz_stream*, %struct.bz_stream** %9, align 8
  %11 = icmp ne %struct.bz_stream* %10, %0
  br i1 %11, label %56, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.EState, %struct.EState* %6, i32 0, i32 4
  %14 = load i32*, i32** %13, align 8
  %15 = icmp ne i32* %14, null
  br i1 %15, label %16, label %24

; <label>:16:                                     ; preds = %12
  %17 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.EState, %struct.EState* %6, i32 0, i32 4
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast i32* %22 to i8*
  call void %18(i8* %20, i8* %23)
  br label %24

; <label>:24:                                     ; preds = %16, %12
  %25 = getelementptr inbounds %struct.EState, %struct.EState* %6, i32 0, i32 5
  %26 = load i32*, i32** %25, align 8
  %27 = icmp ne i32* %26, null
  br i1 %27, label %28, label %36

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %30 = load void (i8*, i8*)*, void (i8*, i8*)** %29, align 8
  %31 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.EState, %struct.EState* %6, i32 0, i32 5
  %34 = load i32*, i32** %33, align 8
  %35 = bitcast i32* %34 to i8*
  call void %30(i8* %32, i8* %35)
  br label %36

; <label>:36:                                     ; preds = %28, %24
  %37 = getelementptr inbounds %struct.EState, %struct.EState* %6, i32 0, i32 6
  %38 = load i32*, i32** %37, align 8
  %39 = icmp ne i32* %38, null
  br i1 %39, label %40, label %48

; <label>:40:                                     ; preds = %36
  %41 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %42 = load void (i8*, i8*)*, void (i8*, i8*)** %41, align 8
  %43 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.EState, %struct.EState* %6, i32 0, i32 6
  %46 = load i32*, i32** %45, align 8
  %47 = bitcast i32* %46 to i8*
  call void %42(i8* %44, i8* %47)
  br label %48

; <label>:48:                                     ; preds = %40, %36
  %49 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %50 = load void (i8*, i8*)*, void (i8*, i8*)** %49, align 8
  %51 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  %54 = load i8*, i8** %53, align 8
  call void %50(i8* %52, i8* %54)
  %55 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  store i8* null, i8** %55, align 8
  br label %56

; <label>:56:                                     ; preds = %8, %3, %1, %48
  %.0 = phi i32 [ 0, %48 ], [ -2, %1 ], [ -2, %3 ], [ -2, %8 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzDecompressInit(%struct.bz_stream*, i32, i32) #0 {
  %4 = call i32 @bz_config_ok()
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %50

; <label>:6:                                      ; preds = %3
  %7 = icmp ne %struct.bz_stream* %0, null
  %switch = icmp ult i32 %2, 2
  %or.cond1 = and i1 %7, %switch
  br i1 %or.cond1, label %8, label %50

; <label>:8:                                      ; preds = %6
  %9 = icmp slt i32 %1, 0
  %10 = icmp sgt i32 %1, 4
  %or.cond = or i1 %9, %10
  br i1 %or.cond, label %50, label %11

; <label>:11:                                     ; preds = %8
  %12 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  %13 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %12, align 8
  %14 = icmp eq i8* (i8*, i32, i32)* %13, null
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %11
  %16 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  store i8* (i8*, i32, i32)* @default_bzalloc, i8* (i8*, i32, i32)** %16, align 8
  br label %17

; <label>:17:                                     ; preds = %15, %11
  %18 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %18, align 8
  %20 = icmp eq void (i8*, i8*)* %19, null
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %17
  %22 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  store void (i8*, i8*)* @default_bzfree, void (i8*, i8*)** %22, align 8
  br label %23

; <label>:23:                                     ; preds = %21, %17
  %24 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 9
  %25 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %24, align 8
  %26 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %27 = load i8*, i8** %26, align 8
  %28 = call i8* %25(i8* %27, i32 64144, i32 1)
  %29 = bitcast i8* %28 to %struct.DState*
  %30 = icmp eq %struct.DState* %29, null
  br i1 %30, label %50, label %31

; <label>:31:                                     ; preds = %23
  %32 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 0
  store %struct.bz_stream* %0, %struct.bz_stream** %32, align 8
  %33 = bitcast %struct.DState* %29 to i8*
  %34 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  store i8* %33, i8** %34, align 8
  %35 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 1
  store i32 10, i32* %35, align 8
  %36 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 8
  store i32 0, i32* %36, align 4
  %37 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 7
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 26
  store i32 0, i32* %38, align 4
  %39 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 2
  store i32 0, i32* %39, align 4
  %40 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 3
  store i32 0, i32* %40, align 8
  %41 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 6
  store i32 0, i32* %41, align 4
  %42 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 7
  store i32 0, i32* %42, align 8
  %43 = trunc i32 %2 to i8
  %44 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 10
  store i8 %43, i8* %44, align 4
  %45 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 22
  store i8* null, i8** %45, align 8
  %46 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 21
  store i16* null, i16** %46, align 8
  %47 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 20
  store i32* null, i32** %47, align 8
  %48 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 11
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds %struct.DState, %struct.DState* %29, i32 0, i32 12
  store i32 %1, i32* %49, align 4
  br label %50

; <label>:50:                                     ; preds = %6, %23, %8, %3, %31
  %.0 = phi i32 [ 0, %31 ], [ -9, %3 ], [ -2, %6 ], [ -2, %8 ], [ -3, %23 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_indexIntoF(i32, i32*) #0 {
  br label %3

; <label>:3:                                      ; preds = %3, %2
  %.01 = phi i32 [ 0, %2 ], [ %..01, %3 ]
  %.0 = phi i32 [ 256, %2 ], [ %.0., %3 ]
  call void @unroll_loop(i32 35)
  %4 = add nsw i32 %.01, %.0
  %5 = ashr i32 %4, 1
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i32, i32* %1, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = icmp sge i32 %0, %8
  %..01 = select i1 %9, i32 %5, i32 %.01
  %.0. = select i1 %9, i32 %.0, i32 %5
  %10 = sub nsw i32 %.0., %..01
  %11 = icmp ne i32 %10, 1
  br i1 %11, label %3, label %12

; <label>:12:                                     ; preds = %3
  %.12.lcssa = phi i32 [ %..01, %3 ]
  ret i32 %.12.lcssa
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzDecompress(%struct.bz_stream*) #0 {
  %2 = icmp eq %struct.bz_stream* %0, null
  br i1 %2, label %._crit_edge, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.DState*
  %7 = icmp eq %struct.DState* %6, null
  br i1 %7, label %._crit_edge, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 0
  %10 = load %struct.bz_stream*, %struct.bz_stream** %9, align 8
  %11 = icmp ne %struct.bz_stream* %10, %0
  br i1 %11, label %._crit_edge, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %12
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %114
  call void @unroll_loop(i32 36)
  %16 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 2
  br i1 %18, label %19, label %85

; <label>:19:                                     ; preds = %.lr.ph
  %20 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 10
  %21 = load i8, i8* %20, align 4
  %22 = icmp ne i8 %21, 0
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %19
  %24 = call zeroext i8 @unRLE_obuf_to_output_SMALL(%struct.DState* %6)
  br label %27

; <label>:25:                                     ; preds = %19
  %26 = call zeroext i8 @unRLE_obuf_to_output_FAST(%struct.DState* %6)
  br label %27

; <label>:27:                                     ; preds = %25, %23
  %.01 = phi i8 [ %24, %23 ], [ %26, %25 ]
  %28 = icmp ne i8 %.01, 0
  br i1 %28, label %._crit_edge.loopexit, label %29

; <label>:29:                                     ; preds = %27
  %30 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 17
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 51
  %33 = load i32, i32* %32, align 8
  %34 = add nsw i32 %33, 1
  %35 = icmp eq i32 %31, %34
  br i1 %35, label %36, label %._crit_edge.loopexit

; <label>:36:                                     ; preds = %29
  %37 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %._crit_edge.loopexit

; <label>:40:                                     ; preds = %36
  %41 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 25
  %42 = load i32, i32* %41, align 8
  %43 = xor i32 %42, -1
  %44 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 25
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 12
  %46 = load i32, i32* %45, align 4
  %47 = icmp sge i32 %46, 3
  br i1 %47, label %48, label %56

; <label>:48:                                     ; preds = %40
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %50 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 23
  %51 = load i32, i32* %50, align 8
  %52 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 25
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr [18 x i8], [18 x i8]* @.str.2.108, i32 0, i32 0
  %55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* %54, i32 %51, i32 %53)
  br label %56

; <label>:56:                                     ; preds = %48, %40
  %57 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 12
  %58 = load i32, i32* %57, align 4
  %59 = icmp sge i32 %58, 2
  br i1 %59, label %60, label %64

; <label>:60:                                     ; preds = %56
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %62 = getelementptr [2 x i8], [2 x i8]* @.str.3.109, i32 0, i32 0
  %63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* %62)
  br label %64

; <label>:64:                                     ; preds = %60, %56
  %65 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 25
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 23
  %68 = load i32, i32* %67, align 8
  %69 = icmp ne i32 %66, %68
  br i1 %69, label %._crit_edge.loopexit, label %70

; <label>:70:                                     ; preds = %64
  %71 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 26
  %72 = load i32, i32* %71, align 4
  %73 = shl i32 %72, 1
  %74 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 26
  %75 = load i32, i32* %74, align 4
  %76 = lshr i32 %75, 31
  %77 = or i32 %73, %76
  %78 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 26
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 25
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 26
  %82 = load i32, i32* %81, align 4
  %83 = xor i32 %82, %80
  store i32 %83, i32* %81, align 4
  %84 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 1
  store i32 14, i32* %84, align 8
  br label %85

; <label>:85:                                     ; preds = %70, %.lr.ph
  %86 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 1
  %87 = load i32, i32* %86, align 8
  %88 = icmp sge i32 %87, 10
  br i1 %88, label %89, label %114

; <label>:89:                                     ; preds = %85
  %90 = call i32 @BZ2_decompress(%struct.DState* %6)
  %91 = icmp eq i32 %90, 4
  br i1 %91, label %92, label %110

; <label>:92:                                     ; preds = %89
  %.lcssa = phi i32 [ %90, %89 ]
  %93 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 12
  %94 = load i32, i32* %93, align 4
  %95 = icmp sge i32 %94, 3
  br i1 %95, label %96, label %104

; <label>:96:                                     ; preds = %92
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %98 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 24
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 26
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr [55 x i8], [55 x i8]* @.str.4.110, i32 0, i32 0
  %103 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* %102, i32 %99, i32 %101)
  br label %104

; <label>:104:                                    ; preds = %96, %92
  %105 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 26
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 24
  %108 = load i32, i32* %107, align 4
  %109 = icmp ne i32 %106, %108
  %..lcssa = select i1 %109, i32 -4, i32 %.lcssa
  br label %._crit_edge

; <label>:110:                                    ; preds = %89
  %111 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 1
  %112 = load i32, i32* %111, align 8
  %113 = icmp ne i32 %112, 2
  br i1 %113, label %._crit_edge.loopexit, label %114

; <label>:114:                                    ; preds = %110, %85
  %115 = load i32, i32* %13, align 8
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %114, %27, %64, %36, %29, %110
  %.0.ph = phi i32 [ %90, %110 ], [ 0, %29 ], [ 0, %36 ], [ -4, %64 ], [ -4, %27 ], [ -1, %114 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %104, %12, %8, %3, %1
  %.0 = phi i32 [ -2, %1 ], [ -2, %3 ], [ -2, %8 ], [ -1, %12 ], [ %..lcssa, %104 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @unRLE_obuf_to_output_SMALL(%struct.DState*) #0 {
  %2 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 4
  %3 = load i8, i8* %2, align 4
  %4 = icmp ne i8 %3, 0
  %5 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %6 = load %struct.bz_stream*, %struct.bz_stream** %5, align 8
  %7 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %6, i32 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %4, label %10, label %505

; <label>:10:                                     ; preds = %1
  br i1 %9, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %10
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  call void @unroll_loop(i32 23)
  br label %11

; <label>:11:                                     ; preds = %.lr.ph, %66
  call void @unroll_loop(i32 38)
  %12 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %71, label %15

; <label>:15:                                     ; preds = %11
  %16 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  %17 = load i8, i8* %16, align 4
  %18 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %19 = load %struct.bz_stream*, %struct.bz_stream** %18, align 8
  %20 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %19, i32 0, i32 4
  %21 = load i8*, i8** %20, align 8
  store i8 %17, i8* %21, align 1
  %22 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  %23 = load i32, i32* %22, align 8
  %24 = shl i32 %23, 8
  %25 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  %26 = load i32, i32* %25, align 8
  %27 = lshr i32 %26, 24
  %28 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  %29 = load i8, i8* %28, align 4
  %30 = zext i8 %29 to i32
  %31 = xor i32 %27, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = xor i32 %24, %34
  %36 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = add nsw i32 %38, -1
  store i32 %39, i32* %37, align 8
  %40 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %41 = load %struct.bz_stream*, %struct.bz_stream** %40, align 8
  %42 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %41, i32 0, i32 4
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %44, i8** %42, align 8
  %45 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %46 = load %struct.bz_stream*, %struct.bz_stream** %45, align 8
  %47 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %46, i32 0, i32 5
  %48 = load i32, i32* %47, align 8
  %49 = add i32 %48, -1
  store i32 %49, i32* %47, align 8
  %50 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %51 = load %struct.bz_stream*, %struct.bz_stream** %50, align 8
  %52 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %51, i32 0, i32 6
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %52, align 4
  %55 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %56 = load %struct.bz_stream*, %struct.bz_stream** %55, align 8
  %57 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %56, i32 0, i32 6
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %66

; <label>:60:                                     ; preds = %15
  %61 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %62 = load %struct.bz_stream*, %struct.bz_stream** %61, align 8
  %63 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %62, i32 0, i32 7
  %64 = load i32, i32* %63, align 8
  %65 = add i32 %64, 1
  store i32 %65, i32* %63, align 8
  br label %66

; <label>:66:                                     ; preds = %60, %15
  %67 = load %struct.bz_stream*, %struct.bz_stream** %5, align 8
  %68 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %67, i32 0, i32 5
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %._crit_edge.loopexit, label %11

; <label>:71:                                     ; preds = %11
  %72 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %75 = load i32, i32* %74, align 8
  %76 = add nsw i32 %75, 1
  %77 = icmp eq i32 %73, %76
  br i1 %77, label %._crit_edge.loopexit1, label %78

; <label>:78:                                     ; preds = %71
  %79 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %82 = load i32, i32* %81, align 8
  %83 = add nsw i32 %82, 1
  %84 = icmp sgt i32 %80, %83
  br i1 %84, label %._crit_edge.loopexit1, label %85

; <label>:85:                                     ; preds = %78
  %86 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 1, i32* %86, align 8
  %87 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %88 = load i32, i32* %87, align 8
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  store i8 %89, i8* %90, align 4
  %91 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %94 = load i32, i32* %93, align 8
  %95 = mul i32 100000, %94
  %96 = icmp uge i32 %92, %95
  br i1 %96, label %._crit_edge.loopexit1, label %97

; <label>:97:                                     ; preds = %85
  %98 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %101 = getelementptr inbounds [257 x i32], [257 x i32]* %100, i32 0, i32 0
  %102 = call i32 @BZ2_indexIntoF(i32 %99, i32* %101)
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %105 = load i16*, i16** %104, align 8
  %106 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i16, i16* %105, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %115 = load i32, i32* %114, align 4
  %116 = lshr i32 %115, 1
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %113, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %122 = load i32, i32* %121, align 4
  %123 = shl i32 %122, 2
  %124 = and i32 %123, 4
  %125 = lshr i32 %120, %124
  %126 = and i32 %125, 15
  %127 = shl i32 %126, 16
  %128 = or i32 %111, %127
  %129 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %131 = load i32, i32* %130, align 8
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %148

; <label>:133:                                    ; preds = %97
  %134 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %135 = load i32, i32* %134, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %138, i32* %139, align 8
  %140 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %141 = load i32, i32* %140, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %140, align 4
  %143 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 512
  br i1 %145, label %146, label %148

; <label>:146:                                    ; preds = %133
  %147 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %147, align 4
  br label %148

; <label>:148:                                    ; preds = %133, %146, %97
  %149 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %150 = load i32, i32* %149, align 8
  %151 = add nsw i32 %150, -1
  store i32 %151, i32* %149, align 8
  %152 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %153 = load i32, i32* %152, align 8
  %154 = icmp eq i32 %153, 1
  %155 = zext i1 %154 to i64
  %156 = select i1 %154, i32 1, i32 0
  %157 = zext i8 %103 to i32
  %158 = xor i32 %157, %156
  %159 = trunc i32 %158 to i8
  %160 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %161 = load i32, i32* %160, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %160, align 4
  %163 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %166 = load i32, i32* %165, align 8
  %167 = add nsw i32 %166, 1
  %168 = icmp eq i32 %164, %167
  br i1 %168, label %.backedge, label %169

; <label>:169:                                    ; preds = %148
  %170 = zext i8 %159 to i32
  %171 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %172 = load i32, i32* %171, align 8
  %173 = icmp ne i32 %170, %172
  br i1 %173, label %174, label %177

; <label>:174:                                    ; preds = %169
  %175 = zext i8 %159 to i32
  %176 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %175, i32* %176, align 8
  br label %.backedge

; <label>:177:                                    ; preds = %169
  %178 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 2, i32* %178, align 8
  %179 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %182 = load i32, i32* %181, align 8
  %183 = mul i32 100000, %182
  %184 = icmp uge i32 %180, %183
  br i1 %184, label %._crit_edge.loopexit1, label %185

; <label>:185:                                    ; preds = %177
  %186 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %187 = load i32, i32* %186, align 4
  %188 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %189 = getelementptr inbounds [257 x i32], [257 x i32]* %188, i32 0, i32 0
  %190 = call i32 @BZ2_indexIntoF(i32 %187, i32* %189)
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %193 = load i16*, i16** %192, align 8
  %194 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds i16, i16* %193, i64 %196
  %198 = load i16, i16* %197, align 2
  %199 = zext i16 %198 to i32
  %200 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %201 = load i8*, i8** %200, align 8
  %202 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %203 = load i32, i32* %202, align 4
  %204 = lshr i32 %203, 1
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds i8, i8* %201, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %210 = load i32, i32* %209, align 4
  %211 = shl i32 %210, 2
  %212 = and i32 %211, 4
  %213 = lshr i32 %208, %212
  %214 = and i32 %213, 15
  %215 = shl i32 %214, 16
  %216 = or i32 %199, %215
  %217 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %216, i32* %217, align 4
  %218 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %219 = load i32, i32* %218, align 8
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %236

; <label>:221:                                    ; preds = %185
  %222 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %223 = load i32, i32* %222, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %226, i32* %227, align 8
  %228 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %229 = load i32, i32* %228, align 4
  %230 = add nsw i32 %229, 1
  store i32 %230, i32* %228, align 4
  %231 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %232 = load i32, i32* %231, align 4
  %233 = icmp eq i32 %232, 512
  br i1 %233, label %234, label %236

; <label>:234:                                    ; preds = %221
  %235 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %235, align 4
  br label %236

; <label>:236:                                    ; preds = %221, %234, %185
  %237 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %238 = load i32, i32* %237, align 8
  %239 = add nsw i32 %238, -1
  store i32 %239, i32* %237, align 8
  %240 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %241 = load i32, i32* %240, align 8
  %242 = icmp eq i32 %241, 1
  %243 = zext i1 %242 to i64
  %244 = select i1 %242, i32 1, i32 0
  %245 = zext i8 %191 to i32
  %246 = xor i32 %245, %244
  %247 = trunc i32 %246 to i8
  %248 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %249 = load i32, i32* %248, align 4
  %250 = add nsw i32 %249, 1
  store i32 %250, i32* %248, align 4
  %251 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %252 = load i32, i32* %251, align 4
  %253 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %254 = load i32, i32* %253, align 8
  %255 = add nsw i32 %254, 1
  %256 = icmp eq i32 %252, %255
  br i1 %256, label %.backedge, label %257

; <label>:257:                                    ; preds = %236
  %258 = zext i8 %247 to i32
  %259 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %260 = load i32, i32* %259, align 8
  %261 = icmp ne i32 %258, %260
  br i1 %261, label %262, label %265

; <label>:262:                                    ; preds = %257
  %263 = zext i8 %247 to i32
  %264 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %263, i32* %264, align 8
  br label %.backedge

; <label>:265:                                    ; preds = %257
  %266 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 3, i32* %266, align 8
  %267 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %268 = load i32, i32* %267, align 4
  %269 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %270 = load i32, i32* %269, align 8
  %271 = mul i32 100000, %270
  %272 = icmp uge i32 %268, %271
  br i1 %272, label %._crit_edge.loopexit1, label %273

; <label>:273:                                    ; preds = %265
  %274 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %275 = load i32, i32* %274, align 4
  %276 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %277 = getelementptr inbounds [257 x i32], [257 x i32]* %276, i32 0, i32 0
  %278 = call i32 @BZ2_indexIntoF(i32 %275, i32* %277)
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %281 = load i16*, i16** %280, align 8
  %282 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %283 = load i32, i32* %282, align 4
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds i16, i16* %281, i64 %284
  %286 = load i16, i16* %285, align 2
  %287 = zext i16 %286 to i32
  %288 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %289 = load i8*, i8** %288, align 8
  %290 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %291 = load i32, i32* %290, align 4
  %292 = lshr i32 %291, 1
  %293 = zext i32 %292 to i64
  %294 = getelementptr inbounds i8, i8* %289, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %298 = load i32, i32* %297, align 4
  %299 = shl i32 %298, 2
  %300 = and i32 %299, 4
  %301 = lshr i32 %296, %300
  %302 = and i32 %301, 15
  %303 = shl i32 %302, 16
  %304 = or i32 %287, %303
  %305 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %304, i32* %305, align 4
  %306 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %307 = load i32, i32* %306, align 8
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %309, label %324

; <label>:309:                                    ; preds = %273
  %310 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %311 = load i32, i32* %310, align 4
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %312
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %314, i32* %315, align 8
  %316 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %317 = load i32, i32* %316, align 4
  %318 = add nsw i32 %317, 1
  store i32 %318, i32* %316, align 4
  %319 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %320 = load i32, i32* %319, align 4
  %321 = icmp eq i32 %320, 512
  br i1 %321, label %322, label %324

; <label>:322:                                    ; preds = %309
  %323 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %323, align 4
  br label %324

; <label>:324:                                    ; preds = %309, %322, %273
  %325 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %326 = load i32, i32* %325, align 8
  %327 = add nsw i32 %326, -1
  store i32 %327, i32* %325, align 8
  %328 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %329 = load i32, i32* %328, align 8
  %330 = icmp eq i32 %329, 1
  %331 = zext i1 %330 to i64
  %332 = select i1 %330, i32 1, i32 0
  %333 = zext i8 %279 to i32
  %334 = xor i32 %333, %332
  %335 = trunc i32 %334 to i8
  %336 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %337 = load i32, i32* %336, align 4
  %338 = add nsw i32 %337, 1
  store i32 %338, i32* %336, align 4
  %339 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %340 = load i32, i32* %339, align 4
  %341 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %342 = load i32, i32* %341, align 8
  %343 = add nsw i32 %342, 1
  %344 = icmp eq i32 %340, %343
  br i1 %344, label %.backedge, label %345

; <label>:345:                                    ; preds = %324
  %346 = zext i8 %335 to i32
  %347 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %348 = load i32, i32* %347, align 8
  %349 = icmp ne i32 %346, %348
  br i1 %349, label %350, label %353

; <label>:350:                                    ; preds = %345
  %351 = zext i8 %335 to i32
  %352 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %351, i32* %352, align 8
  br label %.backedge

; <label>:353:                                    ; preds = %345
  %354 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %357 = load i32, i32* %356, align 8
  %358 = mul i32 100000, %357
  %359 = icmp uge i32 %355, %358
  br i1 %359, label %._crit_edge.loopexit1, label %360

; <label>:360:                                    ; preds = %353
  %361 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %362 = load i32, i32* %361, align 4
  %363 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %364 = getelementptr inbounds [257 x i32], [257 x i32]* %363, i32 0, i32 0
  %365 = call i32 @BZ2_indexIntoF(i32 %362, i32* %364)
  %366 = trunc i32 %365 to i8
  %367 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %368 = load i16*, i16** %367, align 8
  %369 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %370 = load i32, i32* %369, align 4
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds i16, i16* %368, i64 %371
  %373 = load i16, i16* %372, align 2
  %374 = zext i16 %373 to i32
  %375 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %376 = load i8*, i8** %375, align 8
  %377 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %378 = load i32, i32* %377, align 4
  %379 = lshr i32 %378, 1
  %380 = zext i32 %379 to i64
  %381 = getelementptr inbounds i8, i8* %376, i64 %380
  %382 = load i8, i8* %381, align 1
  %383 = zext i8 %382 to i32
  %384 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %385 = load i32, i32* %384, align 4
  %386 = shl i32 %385, 2
  %387 = and i32 %386, 4
  %388 = lshr i32 %383, %387
  %389 = and i32 %388, 15
  %390 = shl i32 %389, 16
  %391 = or i32 %374, %390
  %392 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %391, i32* %392, align 4
  %393 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %394 = load i32, i32* %393, align 8
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %411

; <label>:396:                                    ; preds = %360
  %397 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %398 = load i32, i32* %397, align 4
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %399
  %401 = load i32, i32* %400, align 4
  %402 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %401, i32* %402, align 8
  %403 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %404 = load i32, i32* %403, align 4
  %405 = add nsw i32 %404, 1
  store i32 %405, i32* %403, align 4
  %406 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %407 = load i32, i32* %406, align 4
  %408 = icmp eq i32 %407, 512
  br i1 %408, label %409, label %411

; <label>:409:                                    ; preds = %396
  %410 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %410, align 4
  br label %411

; <label>:411:                                    ; preds = %396, %409, %360
  %412 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %413 = load i32, i32* %412, align 8
  %414 = add nsw i32 %413, -1
  store i32 %414, i32* %412, align 8
  %415 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %416 = load i32, i32* %415, align 8
  %417 = icmp eq i32 %416, 1
  %418 = zext i1 %417 to i64
  %419 = select i1 %417, i32 1, i32 0
  %420 = zext i8 %366 to i32
  %421 = xor i32 %420, %419
  %422 = trunc i32 %421 to i8
  %423 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %424 = load i32, i32* %423, align 4
  %425 = add nsw i32 %424, 1
  store i32 %425, i32* %423, align 4
  %426 = zext i8 %422 to i32
  %427 = add nsw i32 %426, 4
  %428 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 %427, i32* %428, align 8
  %429 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %430 = load i32, i32* %429, align 4
  %431 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %432 = load i32, i32* %431, align 8
  %433 = mul i32 100000, %432
  %434 = icmp uge i32 %430, %433
  br i1 %434, label %._crit_edge.loopexit1, label %435

; <label>:435:                                    ; preds = %411
  %436 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %437 = load i32, i32* %436, align 4
  %438 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %439 = getelementptr inbounds [257 x i32], [257 x i32]* %438, i32 0, i32 0
  %440 = call i32 @BZ2_indexIntoF(i32 %437, i32* %439)
  %441 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %440, i32* %441, align 8
  %442 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %443 = load i16*, i16** %442, align 8
  %444 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %445 = load i32, i32* %444, align 4
  %446 = zext i32 %445 to i64
  %447 = getelementptr inbounds i16, i16* %443, i64 %446
  %448 = load i16, i16* %447, align 2
  %449 = zext i16 %448 to i32
  %450 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %451 = load i8*, i8** %450, align 8
  %452 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %453 = load i32, i32* %452, align 4
  %454 = lshr i32 %453, 1
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds i8, i8* %451, i64 %455
  %457 = load i8, i8* %456, align 1
  %458 = zext i8 %457 to i32
  %459 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %460 = load i32, i32* %459, align 4
  %461 = shl i32 %460, 2
  %462 = and i32 %461, 4
  %463 = lshr i32 %458, %462
  %464 = and i32 %463, 15
  %465 = shl i32 %464, 16
  %466 = or i32 %449, %465
  %467 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %466, i32* %467, align 4
  %468 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %469 = load i32, i32* %468, align 8
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %486

; <label>:471:                                    ; preds = %435
  %472 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %473 = load i32, i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %476, i32* %477, align 8
  %478 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %479 = load i32, i32* %478, align 4
  %480 = add nsw i32 %479, 1
  store i32 %480, i32* %478, align 4
  %481 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %482 = load i32, i32* %481, align 4
  %483 = icmp eq i32 %482, 512
  br i1 %483, label %484, label %486

; <label>:484:                                    ; preds = %471
  %485 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %485, align 4
  br label %486

; <label>:486:                                    ; preds = %471, %484, %435
  %487 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %488 = load i32, i32* %487, align 8
  %489 = add nsw i32 %488, -1
  store i32 %489, i32* %487, align 8
  %490 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %491 = load i32, i32* %490, align 8
  %492 = icmp eq i32 %491, 1
  %493 = zext i1 %492 to i64
  %494 = select i1 %492, i32 1, i32 0
  %495 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %496 = load i32, i32* %495, align 8
  %497 = xor i32 %496, %494
  store i32 %497, i32* %495, align 8
  %498 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %499 = load i32, i32* %498, align 4
  %500 = add nsw i32 %499, 1
  store i32 %500, i32* %498, align 4
  br label %.backedge

.backedge:                                        ; preds = %324, %236, %148, %486, %350, %262, %174
  %501 = load %struct.bz_stream*, %struct.bz_stream** %5, align 8
  %502 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %501, i32 0, i32 5
  %503 = load i32, i32* %502, align 8
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %._crit_edge.loopexit1, label %.lr.ph

; <label>:505:                                    ; preds = %1
  br i1 %9, label %._crit_edge, label %.lr.ph4.preheader

.lr.ph4.preheader:                                ; preds = %505
  br label %.lr.ph4

.lr.ph4:                                          ; preds = %.lr.ph4.preheader, %.backedge1
  call void @unroll_loop(i32 37)
  br label %506

; <label>:506:                                    ; preds = %.lr.ph4, %561
  call void @unroll_loop(i32 39)
  %507 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  %508 = load i32, i32* %507, align 8
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %566, label %510

; <label>:510:                                    ; preds = %506
  %511 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  %512 = load i8, i8* %511, align 4
  %513 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %514 = load %struct.bz_stream*, %struct.bz_stream** %513, align 8
  %515 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %514, i32 0, i32 4
  %516 = load i8*, i8** %515, align 8
  store i8 %512, i8* %516, align 1
  %517 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  %518 = load i32, i32* %517, align 8
  %519 = shl i32 %518, 8
  %520 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  %521 = load i32, i32* %520, align 8
  %522 = lshr i32 %521, 24
  %523 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  %524 = load i8, i8* %523, align 4
  %525 = zext i8 %524 to i32
  %526 = xor i32 %522, %525
  %527 = zext i32 %526 to i64
  %528 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %527
  %529 = load i32, i32* %528, align 4
  %530 = xor i32 %519, %529
  %531 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  store i32 %530, i32* %531, align 8
  %532 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  %533 = load i32, i32* %532, align 8
  %534 = add nsw i32 %533, -1
  store i32 %534, i32* %532, align 8
  %535 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %536 = load %struct.bz_stream*, %struct.bz_stream** %535, align 8
  %537 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %536, i32 0, i32 4
  %538 = load i8*, i8** %537, align 8
  %539 = getelementptr inbounds i8, i8* %538, i32 1
  store i8* %539, i8** %537, align 8
  %540 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %541 = load %struct.bz_stream*, %struct.bz_stream** %540, align 8
  %542 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %541, i32 0, i32 5
  %543 = load i32, i32* %542, align 8
  %544 = add i32 %543, -1
  store i32 %544, i32* %542, align 8
  %545 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %546 = load %struct.bz_stream*, %struct.bz_stream** %545, align 8
  %547 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %546, i32 0, i32 6
  %548 = load i32, i32* %547, align 4
  %549 = add i32 %548, 1
  store i32 %549, i32* %547, align 4
  %550 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %551 = load %struct.bz_stream*, %struct.bz_stream** %550, align 8
  %552 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %551, i32 0, i32 6
  %553 = load i32, i32* %552, align 4
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %555, label %561

; <label>:555:                                    ; preds = %510
  %556 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %557 = load %struct.bz_stream*, %struct.bz_stream** %556, align 8
  %558 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %557, i32 0, i32 7
  %559 = load i32, i32* %558, align 8
  %560 = add i32 %559, 1
  store i32 %560, i32* %558, align 8
  br label %561

; <label>:561:                                    ; preds = %555, %510
  %562 = load %struct.bz_stream*, %struct.bz_stream** %5, align 8
  %563 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %562, i32 0, i32 5
  %564 = load i32, i32* %563, align 8
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %._crit_edge.loopexit3, label %506

; <label>:566:                                    ; preds = %506
  %567 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %568 = load i32, i32* %567, align 4
  %569 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %570 = load i32, i32* %569, align 8
  %571 = add nsw i32 %570, 1
  %572 = icmp eq i32 %568, %571
  br i1 %572, label %._crit_edge.loopexit5, label %573

; <label>:573:                                    ; preds = %566
  %574 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %575 = load i32, i32* %574, align 4
  %576 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %577 = load i32, i32* %576, align 8
  %578 = add nsw i32 %577, 1
  %579 = icmp sgt i32 %575, %578
  br i1 %579, label %._crit_edge.loopexit5, label %580

; <label>:580:                                    ; preds = %573
  %581 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 1, i32* %581, align 8
  %582 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %583 = load i32, i32* %582, align 8
  %584 = trunc i32 %583 to i8
  %585 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  store i8 %584, i8* %585, align 4
  %586 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %587 = load i32, i32* %586, align 4
  %588 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %589 = load i32, i32* %588, align 8
  %590 = mul i32 100000, %589
  %591 = icmp uge i32 %587, %590
  br i1 %591, label %._crit_edge.loopexit5, label %592

; <label>:592:                                    ; preds = %580
  %593 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %594 = load i32, i32* %593, align 4
  %595 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %596 = getelementptr inbounds [257 x i32], [257 x i32]* %595, i32 0, i32 0
  %597 = call i32 @BZ2_indexIntoF(i32 %594, i32* %596)
  %598 = trunc i32 %597 to i8
  %599 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %600 = load i16*, i16** %599, align 8
  %601 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %602 = load i32, i32* %601, align 4
  %603 = zext i32 %602 to i64
  %604 = getelementptr inbounds i16, i16* %600, i64 %603
  %605 = load i16, i16* %604, align 2
  %606 = zext i16 %605 to i32
  %607 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %608 = load i8*, i8** %607, align 8
  %609 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %610 = load i32, i32* %609, align 4
  %611 = lshr i32 %610, 1
  %612 = zext i32 %611 to i64
  %613 = getelementptr inbounds i8, i8* %608, i64 %612
  %614 = load i8, i8* %613, align 1
  %615 = zext i8 %614 to i32
  %616 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %617 = load i32, i32* %616, align 4
  %618 = shl i32 %617, 2
  %619 = and i32 %618, 4
  %620 = lshr i32 %615, %619
  %621 = and i32 %620, 15
  %622 = shl i32 %621, 16
  %623 = or i32 %606, %622
  %624 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %623, i32* %624, align 4
  %625 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %626 = load i32, i32* %625, align 4
  %627 = add nsw i32 %626, 1
  store i32 %627, i32* %625, align 4
  %628 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %629 = load i32, i32* %628, align 4
  %630 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %631 = load i32, i32* %630, align 8
  %632 = add nsw i32 %631, 1
  %633 = icmp eq i32 %629, %632
  br i1 %633, label %.backedge1, label %634

; <label>:634:                                    ; preds = %592
  %635 = zext i8 %598 to i32
  %636 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %637 = load i32, i32* %636, align 8
  %638 = icmp ne i32 %635, %637
  br i1 %638, label %639, label %642

; <label>:639:                                    ; preds = %634
  %640 = zext i8 %598 to i32
  %641 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %640, i32* %641, align 8
  br label %.backedge1

; <label>:642:                                    ; preds = %634
  %643 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 2, i32* %643, align 8
  %644 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %645 = load i32, i32* %644, align 4
  %646 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %647 = load i32, i32* %646, align 8
  %648 = mul i32 100000, %647
  %649 = icmp uge i32 %645, %648
  br i1 %649, label %._crit_edge.loopexit5, label %650

; <label>:650:                                    ; preds = %642
  %651 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %652 = load i32, i32* %651, align 4
  %653 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %654 = getelementptr inbounds [257 x i32], [257 x i32]* %653, i32 0, i32 0
  %655 = call i32 @BZ2_indexIntoF(i32 %652, i32* %654)
  %656 = trunc i32 %655 to i8
  %657 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %658 = load i16*, i16** %657, align 8
  %659 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %660 = load i32, i32* %659, align 4
  %661 = zext i32 %660 to i64
  %662 = getelementptr inbounds i16, i16* %658, i64 %661
  %663 = load i16, i16* %662, align 2
  %664 = zext i16 %663 to i32
  %665 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %666 = load i8*, i8** %665, align 8
  %667 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %668 = load i32, i32* %667, align 4
  %669 = lshr i32 %668, 1
  %670 = zext i32 %669 to i64
  %671 = getelementptr inbounds i8, i8* %666, i64 %670
  %672 = load i8, i8* %671, align 1
  %673 = zext i8 %672 to i32
  %674 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %675 = load i32, i32* %674, align 4
  %676 = shl i32 %675, 2
  %677 = and i32 %676, 4
  %678 = lshr i32 %673, %677
  %679 = and i32 %678, 15
  %680 = shl i32 %679, 16
  %681 = or i32 %664, %680
  %682 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %681, i32* %682, align 4
  %683 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %684 = load i32, i32* %683, align 4
  %685 = add nsw i32 %684, 1
  store i32 %685, i32* %683, align 4
  %686 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %687 = load i32, i32* %686, align 4
  %688 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %689 = load i32, i32* %688, align 8
  %690 = add nsw i32 %689, 1
  %691 = icmp eq i32 %687, %690
  br i1 %691, label %.backedge1, label %692

; <label>:692:                                    ; preds = %650
  %693 = zext i8 %656 to i32
  %694 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %695 = load i32, i32* %694, align 8
  %696 = icmp ne i32 %693, %695
  br i1 %696, label %697, label %700

; <label>:697:                                    ; preds = %692
  %698 = zext i8 %656 to i32
  %699 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %698, i32* %699, align 8
  br label %.backedge1

; <label>:700:                                    ; preds = %692
  %701 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 3, i32* %701, align 8
  %702 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %703 = load i32, i32* %702, align 4
  %704 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %705 = load i32, i32* %704, align 8
  %706 = mul i32 100000, %705
  %707 = icmp uge i32 %703, %706
  br i1 %707, label %._crit_edge.loopexit5, label %708

; <label>:708:                                    ; preds = %700
  %709 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %710 = load i32, i32* %709, align 4
  %711 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %712 = getelementptr inbounds [257 x i32], [257 x i32]* %711, i32 0, i32 0
  %713 = call i32 @BZ2_indexIntoF(i32 %710, i32* %712)
  %714 = trunc i32 %713 to i8
  %715 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %716 = load i16*, i16** %715, align 8
  %717 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %718 = load i32, i32* %717, align 4
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds i16, i16* %716, i64 %719
  %721 = load i16, i16* %720, align 2
  %722 = zext i16 %721 to i32
  %723 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %724 = load i8*, i8** %723, align 8
  %725 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %726 = load i32, i32* %725, align 4
  %727 = lshr i32 %726, 1
  %728 = zext i32 %727 to i64
  %729 = getelementptr inbounds i8, i8* %724, i64 %728
  %730 = load i8, i8* %729, align 1
  %731 = zext i8 %730 to i32
  %732 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %733 = load i32, i32* %732, align 4
  %734 = shl i32 %733, 2
  %735 = and i32 %734, 4
  %736 = lshr i32 %731, %735
  %737 = and i32 %736, 15
  %738 = shl i32 %737, 16
  %739 = or i32 %722, %738
  %740 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %739, i32* %740, align 4
  %741 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %742 = load i32, i32* %741, align 4
  %743 = add nsw i32 %742, 1
  store i32 %743, i32* %741, align 4
  %744 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %745 = load i32, i32* %744, align 4
  %746 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %747 = load i32, i32* %746, align 8
  %748 = add nsw i32 %747, 1
  %749 = icmp eq i32 %745, %748
  br i1 %749, label %.backedge1, label %750

; <label>:750:                                    ; preds = %708
  %751 = zext i8 %714 to i32
  %752 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %753 = load i32, i32* %752, align 8
  %754 = icmp ne i32 %751, %753
  br i1 %754, label %755, label %758

; <label>:755:                                    ; preds = %750
  %756 = zext i8 %714 to i32
  %757 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %756, i32* %757, align 8
  br label %.backedge1

; <label>:758:                                    ; preds = %750
  %759 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %760 = load i32, i32* %759, align 4
  %761 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %762 = load i32, i32* %761, align 8
  %763 = mul i32 100000, %762
  %764 = icmp uge i32 %760, %763
  br i1 %764, label %._crit_edge.loopexit5, label %765

; <label>:765:                                    ; preds = %758
  %766 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %767 = load i32, i32* %766, align 4
  %768 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %769 = getelementptr inbounds [257 x i32], [257 x i32]* %768, i32 0, i32 0
  %770 = call i32 @BZ2_indexIntoF(i32 %767, i32* %769)
  %771 = trunc i32 %770 to i8
  %772 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %773 = load i16*, i16** %772, align 8
  %774 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %775 = load i32, i32* %774, align 4
  %776 = zext i32 %775 to i64
  %777 = getelementptr inbounds i16, i16* %773, i64 %776
  %778 = load i16, i16* %777, align 2
  %779 = zext i16 %778 to i32
  %780 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %781 = load i8*, i8** %780, align 8
  %782 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %783 = load i32, i32* %782, align 4
  %784 = lshr i32 %783, 1
  %785 = zext i32 %784 to i64
  %786 = getelementptr inbounds i8, i8* %781, i64 %785
  %787 = load i8, i8* %786, align 1
  %788 = zext i8 %787 to i32
  %789 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %790 = load i32, i32* %789, align 4
  %791 = shl i32 %790, 2
  %792 = and i32 %791, 4
  %793 = lshr i32 %788, %792
  %794 = and i32 %793, 15
  %795 = shl i32 %794, 16
  %796 = or i32 %779, %795
  %797 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %796, i32* %797, align 4
  %798 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %799 = load i32, i32* %798, align 4
  %800 = add nsw i32 %799, 1
  store i32 %800, i32* %798, align 4
  %801 = zext i8 %771 to i32
  %802 = add nsw i32 %801, 4
  %803 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 %802, i32* %803, align 8
  %804 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %805 = load i32, i32* %804, align 4
  %806 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %807 = load i32, i32* %806, align 8
  %808 = mul i32 100000, %807
  %809 = icmp uge i32 %805, %808
  br i1 %809, label %._crit_edge.loopexit5, label %810

; <label>:810:                                    ; preds = %765
  %811 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %812 = load i32, i32* %811, align 4
  %813 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %814 = getelementptr inbounds [257 x i32], [257 x i32]* %813, i32 0, i32 0
  %815 = call i32 @BZ2_indexIntoF(i32 %812, i32* %814)
  %816 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %815, i32* %816, align 8
  %817 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %818 = load i16*, i16** %817, align 8
  %819 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %820 = load i32, i32* %819, align 4
  %821 = zext i32 %820 to i64
  %822 = getelementptr inbounds i16, i16* %818, i64 %821
  %823 = load i16, i16* %822, align 2
  %824 = zext i16 %823 to i32
  %825 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %826 = load i8*, i8** %825, align 8
  %827 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %828 = load i32, i32* %827, align 4
  %829 = lshr i32 %828, 1
  %830 = zext i32 %829 to i64
  %831 = getelementptr inbounds i8, i8* %826, i64 %830
  %832 = load i8, i8* %831, align 1
  %833 = zext i8 %832 to i32
  %834 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %835 = load i32, i32* %834, align 4
  %836 = shl i32 %835, 2
  %837 = and i32 %836, 4
  %838 = lshr i32 %833, %837
  %839 = and i32 %838, 15
  %840 = shl i32 %839, 16
  %841 = or i32 %824, %840
  %842 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %841, i32* %842, align 4
  %843 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %844 = load i32, i32* %843, align 4
  %845 = add nsw i32 %844, 1
  store i32 %845, i32* %843, align 4
  br label %.backedge1

.backedge1:                                       ; preds = %708, %650, %592, %810, %755, %697, %639
  %846 = load %struct.bz_stream*, %struct.bz_stream** %5, align 8
  %847 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %846, i32 0, i32 5
  %848 = load i32, i32* %847, align 8
  %849 = icmp eq i32 %848, 0
  br i1 %849, label %._crit_edge.loopexit5, label %.lr.ph4

._crit_edge.loopexit:                             ; preds = %66
  %.0.ph = phi i8 [ 0, %66 ]
  br label %._crit_edge

._crit_edge.loopexit1:                            ; preds = %.backedge, %71, %78, %85, %177, %265, %353, %411
  %.0.ph2 = phi i8 [ 1, %411 ], [ 1, %353 ], [ 1, %265 ], [ 1, %177 ], [ 1, %85 ], [ 1, %78 ], [ 0, %71 ], [ 0, %.backedge ]
  br label %._crit_edge

._crit_edge.loopexit3:                            ; preds = %561
  %.0.ph4 = phi i8 [ 0, %561 ]
  br label %._crit_edge

._crit_edge.loopexit5:                            ; preds = %.backedge1, %566, %573, %580, %642, %700, %758, %765
  %.0.ph6 = phi i8 [ 1, %765 ], [ 1, %758 ], [ 1, %700 ], [ 1, %642 ], [ 1, %580 ], [ 1, %573 ], [ 0, %566 ], [ 0, %.backedge1 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit5, %._crit_edge.loopexit3, %._crit_edge.loopexit1, %._crit_edge.loopexit, %505, %10
  %.0 = phi i8 [ 0, %10 ], [ 0, %505 ], [ %.0.ph, %._crit_edge.loopexit ], [ %.0.ph2, %._crit_edge.loopexit1 ], [ %.0.ph4, %._crit_edge.loopexit3 ], [ %.0.ph6, %._crit_edge.loopexit5 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @unRLE_obuf_to_output_FAST(%struct.DState*) #0 {
  %2 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 4
  %3 = load i8, i8* %2, align 4
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %5, label %422

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %7 = load %struct.bz_stream*, %struct.bz_stream** %6, align 8
  %8 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 5
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %5
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  call void @unroll_loop(i32 40)
  br label %11

; <label>:11:                                     ; preds = %.lr.ph, %66
  call void @unroll_loop(i32 32)
  %12 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %71, label %15

; <label>:15:                                     ; preds = %11
  %16 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  %17 = load i8, i8* %16, align 4
  %18 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %19 = load %struct.bz_stream*, %struct.bz_stream** %18, align 8
  %20 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %19, i32 0, i32 4
  %21 = load i8*, i8** %20, align 8
  store i8 %17, i8* %21, align 1
  %22 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  %23 = load i32, i32* %22, align 8
  %24 = shl i32 %23, 8
  %25 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  %26 = load i32, i32* %25, align 8
  %27 = lshr i32 %26, 24
  %28 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  %29 = load i8, i8* %28, align 4
  %30 = zext i8 %29 to i32
  %31 = xor i32 %27, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = xor i32 %24, %34
  %36 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = add nsw i32 %38, -1
  store i32 %39, i32* %37, align 8
  %40 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %41 = load %struct.bz_stream*, %struct.bz_stream** %40, align 8
  %42 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %41, i32 0, i32 4
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %44, i8** %42, align 8
  %45 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %46 = load %struct.bz_stream*, %struct.bz_stream** %45, align 8
  %47 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %46, i32 0, i32 5
  %48 = load i32, i32* %47, align 8
  %49 = add i32 %48, -1
  store i32 %49, i32* %47, align 8
  %50 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %51 = load %struct.bz_stream*, %struct.bz_stream** %50, align 8
  %52 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %51, i32 0, i32 6
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %52, align 4
  %55 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %56 = load %struct.bz_stream*, %struct.bz_stream** %55, align 8
  %57 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %56, i32 0, i32 6
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %66

; <label>:60:                                     ; preds = %15
  %61 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %62 = load %struct.bz_stream*, %struct.bz_stream** %61, align 8
  %63 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %62, i32 0, i32 7
  %64 = load i32, i32* %63, align 8
  %65 = add i32 %64, 1
  store i32 %65, i32* %63, align 8
  br label %66

; <label>:66:                                     ; preds = %60, %15
  %67 = load %struct.bz_stream*, %struct.bz_stream** %6, align 8
  %68 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %67, i32 0, i32 5
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %._crit_edge.loopexit, label %11

; <label>:71:                                     ; preds = %11
  %72 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %75 = load i32, i32* %74, align 8
  %76 = add nsw i32 %75, 1
  %77 = icmp eq i32 %73, %76
  br i1 %77, label %._crit_edge.loopexit1, label %78

; <label>:78:                                     ; preds = %71
  %79 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %82 = load i32, i32* %81, align 8
  %83 = add nsw i32 %82, 1
  %84 = icmp sgt i32 %80, %83
  br i1 %84, label %._crit_edge.loopexit1, label %85

; <label>:85:                                     ; preds = %78
  %86 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 1, i32* %86, align 8
  %87 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %88 = load i32, i32* %87, align 8
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  store i8 %89, i8* %90, align 4
  %91 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %94 = load i32, i32* %93, align 8
  %95 = mul i32 100000, %94
  %96 = icmp uge i32 %92, %95
  br i1 %96, label %._crit_edge.loopexit1, label %97

; <label>:97:                                     ; preds = %85
  %98 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %99 = load i32*, i32** %98, align 8
  %100 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i32, i32* %99, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %104, i32* %105, align 4
  %106 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %107 = load i32, i32* %106, align 4
  %108 = and i32 %107, 255
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %111 = load i32, i32* %110, align 4
  %112 = lshr i32 %111, 8
  store i32 %112, i32* %110, align 4
  %113 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %131

; <label>:116:                                    ; preds = %97
  %117 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %118 = load i32, i32* %117, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %121, i32* %122, align 8
  %123 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %124 = load i32, i32* %123, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %123, align 4
  %126 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, 512
  br i1 %128, label %129, label %131

; <label>:129:                                    ; preds = %116
  %130 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %130, align 4
  br label %131

; <label>:131:                                    ; preds = %116, %129, %97
  %132 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %133 = load i32, i32* %132, align 8
  %134 = add nsw i32 %133, -1
  store i32 %134, i32* %132, align 8
  %135 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %136 = load i32, i32* %135, align 8
  %137 = icmp eq i32 %136, 1
  %138 = zext i1 %137 to i64
  %139 = select i1 %137, i32 1, i32 0
  %140 = zext i8 %109 to i32
  %141 = xor i32 %140, %139
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %144 = load i32, i32* %143, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %143, align 4
  %146 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %149 = load i32, i32* %148, align 8
  %150 = add nsw i32 %149, 1
  %151 = icmp eq i32 %147, %150
  br i1 %151, label %.backedge, label %152

; <label>:152:                                    ; preds = %131
  %153 = zext i8 %142 to i32
  %154 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %155 = load i32, i32* %154, align 8
  %156 = icmp ne i32 %153, %155
  br i1 %156, label %157, label %160

; <label>:157:                                    ; preds = %152
  %158 = zext i8 %142 to i32
  %159 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %158, i32* %159, align 8
  br label %.backedge

; <label>:160:                                    ; preds = %152
  %161 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 2, i32* %161, align 8
  %162 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %163 = load i32, i32* %162, align 4
  %164 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %165 = load i32, i32* %164, align 8
  %166 = mul i32 100000, %165
  %167 = icmp uge i32 %163, %166
  br i1 %167, label %._crit_edge.loopexit1, label %168

; <label>:168:                                    ; preds = %160
  %169 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %170 = load i32*, i32** %169, align 8
  %171 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %172 = load i32, i32* %171, align 4
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds i32, i32* %170, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %175, i32* %176, align 4
  %177 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %178 = load i32, i32* %177, align 4
  %179 = and i32 %178, 255
  %180 = trunc i32 %179 to i8
  %181 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %182 = load i32, i32* %181, align 4
  %183 = lshr i32 %182, 8
  store i32 %183, i32* %181, align 4
  %184 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %185 = load i32, i32* %184, align 8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %202

; <label>:187:                                    ; preds = %168
  %188 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %189 = load i32, i32* %188, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %192, i32* %193, align 8
  %194 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %195 = load i32, i32* %194, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %194, align 4
  %197 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 512
  br i1 %199, label %200, label %202

; <label>:200:                                    ; preds = %187
  %201 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %201, align 4
  br label %202

; <label>:202:                                    ; preds = %187, %200, %168
  %203 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %204 = load i32, i32* %203, align 8
  %205 = add nsw i32 %204, -1
  store i32 %205, i32* %203, align 8
  %206 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %207 = load i32, i32* %206, align 8
  %208 = icmp eq i32 %207, 1
  %209 = zext i1 %208 to i64
  %210 = select i1 %208, i32 1, i32 0
  %211 = zext i8 %180 to i32
  %212 = xor i32 %211, %210
  %213 = trunc i32 %212 to i8
  %214 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %215 = load i32, i32* %214, align 4
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %214, align 4
  %217 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %220 = load i32, i32* %219, align 8
  %221 = add nsw i32 %220, 1
  %222 = icmp eq i32 %218, %221
  br i1 %222, label %.backedge, label %223

; <label>:223:                                    ; preds = %202
  %224 = zext i8 %213 to i32
  %225 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %226 = load i32, i32* %225, align 8
  %227 = icmp ne i32 %224, %226
  br i1 %227, label %228, label %231

; <label>:228:                                    ; preds = %223
  %229 = zext i8 %213 to i32
  %230 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %229, i32* %230, align 8
  br label %.backedge

; <label>:231:                                    ; preds = %223
  %232 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 3, i32* %232, align 8
  %233 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %234 = load i32, i32* %233, align 4
  %235 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %236 = load i32, i32* %235, align 8
  %237 = mul i32 100000, %236
  %238 = icmp uge i32 %234, %237
  br i1 %238, label %._crit_edge.loopexit1, label %239

; <label>:239:                                    ; preds = %231
  %240 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %241 = load i32*, i32** %240, align 8
  %242 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %243 = load i32, i32* %242, align 4
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds i32, i32* %241, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %246, i32* %247, align 4
  %248 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %249 = load i32, i32* %248, align 4
  %250 = and i32 %249, 255
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %253 = load i32, i32* %252, align 4
  %254 = lshr i32 %253, 8
  store i32 %254, i32* %252, align 4
  %255 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %256 = load i32, i32* %255, align 8
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %273

; <label>:258:                                    ; preds = %239
  %259 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %260 = load i32, i32* %259, align 4
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %261
  %263 = load i32, i32* %262, align 4
  %264 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %263, i32* %264, align 8
  %265 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %266 = load i32, i32* %265, align 4
  %267 = add nsw i32 %266, 1
  store i32 %267, i32* %265, align 4
  %268 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %269 = load i32, i32* %268, align 4
  %270 = icmp eq i32 %269, 512
  br i1 %270, label %271, label %273

; <label>:271:                                    ; preds = %258
  %272 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %272, align 4
  br label %273

; <label>:273:                                    ; preds = %258, %271, %239
  %274 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %275 = load i32, i32* %274, align 8
  %276 = add nsw i32 %275, -1
  store i32 %276, i32* %274, align 8
  %277 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %278 = load i32, i32* %277, align 8
  %279 = icmp eq i32 %278, 1
  %280 = zext i1 %279 to i64
  %281 = select i1 %279, i32 1, i32 0
  %282 = zext i8 %251 to i32
  %283 = xor i32 %282, %281
  %284 = trunc i32 %283 to i8
  %285 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %286 = load i32, i32* %285, align 4
  %287 = add nsw i32 %286, 1
  store i32 %287, i32* %285, align 4
  %288 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %289 = load i32, i32* %288, align 4
  %290 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %291 = load i32, i32* %290, align 8
  %292 = add nsw i32 %291, 1
  %293 = icmp eq i32 %289, %292
  br i1 %293, label %.backedge, label %294

; <label>:294:                                    ; preds = %273
  %295 = zext i8 %284 to i32
  %296 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %297 = load i32, i32* %296, align 8
  %298 = icmp ne i32 %295, %297
  br i1 %298, label %299, label %302

; <label>:299:                                    ; preds = %294
  %300 = zext i8 %284 to i32
  %301 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %300, i32* %301, align 8
  br label %.backedge

; <label>:302:                                    ; preds = %294
  %303 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %304 = load i32, i32* %303, align 4
  %305 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %306 = load i32, i32* %305, align 8
  %307 = mul i32 100000, %306
  %308 = icmp uge i32 %304, %307
  br i1 %308, label %._crit_edge.loopexit1, label %309

; <label>:309:                                    ; preds = %302
  %310 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %311 = load i32*, i32** %310, align 8
  %312 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %313 = load i32, i32* %312, align 4
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds i32, i32* %311, i64 %314
  %316 = load i32, i32* %315, align 4
  %317 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %316, i32* %317, align 4
  %318 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %319 = load i32, i32* %318, align 4
  %320 = and i32 %319, 255
  %321 = trunc i32 %320 to i8
  %322 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %323 = load i32, i32* %322, align 4
  %324 = lshr i32 %323, 8
  store i32 %324, i32* %322, align 4
  %325 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %326 = load i32, i32* %325, align 8
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %328, label %343

; <label>:328:                                    ; preds = %309
  %329 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %330 = load i32, i32* %329, align 4
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %331
  %333 = load i32, i32* %332, align 4
  %334 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %333, i32* %334, align 8
  %335 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %336 = load i32, i32* %335, align 4
  %337 = add nsw i32 %336, 1
  store i32 %337, i32* %335, align 4
  %338 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %339 = load i32, i32* %338, align 4
  %340 = icmp eq i32 %339, 512
  br i1 %340, label %341, label %343

; <label>:341:                                    ; preds = %328
  %342 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %342, align 4
  br label %343

; <label>:343:                                    ; preds = %328, %341, %309
  %344 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %345 = load i32, i32* %344, align 8
  %346 = add nsw i32 %345, -1
  store i32 %346, i32* %344, align 8
  %347 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %348 = load i32, i32* %347, align 8
  %349 = icmp eq i32 %348, 1
  %350 = zext i1 %349 to i64
  %351 = select i1 %349, i32 1, i32 0
  %352 = zext i8 %321 to i32
  %353 = xor i32 %352, %351
  %354 = trunc i32 %353 to i8
  %355 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %356 = load i32, i32* %355, align 4
  %357 = add nsw i32 %356, 1
  store i32 %357, i32* %355, align 4
  %358 = zext i8 %354 to i32
  %359 = add nsw i32 %358, 4
  %360 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 %359, i32* %360, align 8
  %361 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %362 = load i32, i32* %361, align 4
  %363 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %364 = load i32, i32* %363, align 8
  %365 = mul i32 100000, %364
  %366 = icmp uge i32 %362, %365
  br i1 %366, label %._crit_edge.loopexit1, label %367

; <label>:367:                                    ; preds = %343
  %368 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %369 = load i32*, i32** %368, align 8
  %370 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %371 = load i32, i32* %370, align 4
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds i32, i32* %369, i64 %372
  %374 = load i32, i32* %373, align 4
  %375 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %374, i32* %375, align 4
  %376 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %377 = load i32, i32* %376, align 4
  %378 = and i32 %377, 255
  %379 = trunc i32 %378 to i8
  %380 = zext i8 %379 to i32
  %381 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %380, i32* %381, align 8
  %382 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %383 = load i32, i32* %382, align 4
  %384 = lshr i32 %383, 8
  store i32 %384, i32* %382, align 4
  %385 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %386 = load i32, i32* %385, align 8
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %388, label %403

; <label>:388:                                    ; preds = %367
  %389 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %390 = load i32, i32* %389, align 4
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %391
  %393 = load i32, i32* %392, align 4
  %394 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %393, i32* %394, align 8
  %395 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %396 = load i32, i32* %395, align 4
  %397 = add nsw i32 %396, 1
  store i32 %397, i32* %395, align 4
  %398 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %399 = load i32, i32* %398, align 4
  %400 = icmp eq i32 %399, 512
  br i1 %400, label %401, label %403

; <label>:401:                                    ; preds = %388
  %402 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %402, align 4
  br label %403

; <label>:403:                                    ; preds = %388, %401, %367
  %404 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %405 = load i32, i32* %404, align 8
  %406 = add nsw i32 %405, -1
  store i32 %406, i32* %404, align 8
  %407 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %408 = load i32, i32* %407, align 8
  %409 = icmp eq i32 %408, 1
  %410 = zext i1 %409 to i64
  %411 = select i1 %409, i32 1, i32 0
  %412 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %413 = load i32, i32* %412, align 8
  %414 = xor i32 %413, %411
  store i32 %414, i32* %412, align 8
  %415 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %416 = load i32, i32* %415, align 4
  %417 = add nsw i32 %416, 1
  store i32 %417, i32* %415, align 4
  br label %.backedge

.backedge:                                        ; preds = %273, %202, %131, %403, %299, %228, %157
  %418 = load %struct.bz_stream*, %struct.bz_stream** %6, align 8
  %419 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %418, i32 0, i32 5
  %420 = load i32, i32* %419, align 8
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %._crit_edge.loopexit1, label %.lr.ph

; <label>:422:                                    ; preds = %1
  %423 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  %424 = load i32, i32* %423, align 8
  %425 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  %426 = load i8, i8* %425, align 4
  %427 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  %428 = load i32, i32* %427, align 8
  %429 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %430 = load i32, i32* %429, align 4
  %431 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %432 = load i32, i32* %431, align 8
  %433 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %434 = load i32*, i32** %433, align 8
  %435 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %438 = load %struct.bz_stream*, %struct.bz_stream** %437, align 8
  %439 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %438, i32 0, i32 4
  %440 = load i8*, i8** %439, align 8
  %441 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %442 = load %struct.bz_stream*, %struct.bz_stream** %441, align 8
  %443 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %442, i32 0, i32 5
  %444 = load i32, i32* %443, align 8
  %445 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %446 = load i32, i32* %445, align 8
  %447 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %448 = load i32, i32* %447, align 8
  %449 = add nsw i32 %448, 1
  br label %450

; <label>:450:                                    ; preds = %.backedge109, %422
  %.027 = phi i32 [ %436, %422 ], [ %.027.be, %.backedge109 ]
  %.022 = phi i8* [ %440, %422 ], [ %.325, %.backedge109 ]
  %.018 = phi i32 [ %432, %422 ], [ %.018.be, %.backedge109 ]
  %.014 = phi i32 [ %430, %422 ], [ %.014.be, %.backedge109 ]
  %.011 = phi i32 [ %428, %422 ], [ %.011.be, %.backedge109 ]
  %.07 = phi i8 [ %426, %422 ], [ %486, %.backedge109 ]
  %.02 = phi i32 [ %424, %422 ], [ %.35, %.backedge109 ]
  %.01 = phi i32 [ %444, %422 ], [ %.3, %.backedge109 ]
  call void @unroll_loop(i32 33)
  %451 = icmp sgt i32 %.011, 0
  br i1 %451, label %452, label %481

; <label>:452:                                    ; preds = %450
  %453 = icmp eq i32 %.01, 0
  br i1 %453, label %._crit_edge117.loopexit3, label %.lr.ph116.preheader

.lr.ph116.preheader:                              ; preds = %452
  br label %.lr.ph116

.lr.ph116:                                        ; preds = %.lr.ph116.preheader, %455
  %.1114 = phi i32 [ %466, %455 ], [ %.01, %.lr.ph116.preheader ]
  %.13113 = phi i32 [ %463, %455 ], [ %.02, %.lr.ph116.preheader ]
  %.112112 = phi i32 [ %464, %455 ], [ %.011, %.lr.ph116.preheader ]
  %.123111 = phi i8* [ %465, %455 ], [ %.022, %.lr.ph116.preheader ]
  call void @unroll_loop(i32 34)
  %454 = icmp eq i32 %.112112, 1
  br i1 %454, label %.loopexit, label %455

; <label>:455:                                    ; preds = %.lr.ph116
  store i8 %.07, i8* %.123111, align 1
  %456 = shl i32 %.13113, 8
  %457 = lshr i32 %.13113, 24
  %458 = zext i8 %.07 to i32
  %459 = xor i32 %457, %458
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %460
  %462 = load i32, i32* %461, align 4
  %463 = xor i32 %456, %462
  %464 = add nsw i32 %.112112, -1
  %465 = getelementptr inbounds i8, i8* %.123111, i32 1
  %466 = add i32 %.1114, -1
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %._crit_edge117.loopexit, label %.lr.ph116

.loopexit:                                        ; preds = %.lr.ph116
  %.224.ph = phi i8* [ %.123111, %.lr.ph116 ]
  %.24.ph = phi i32 [ %.13113, %.lr.ph116 ]
  %.2.ph = phi i32 [ %.1114, %.lr.ph116 ]
  br label %468

; <label>:468:                                    ; preds = %.loopexit, %501, %499
  %.128 = phi i32 [ %495, %499 ], [ %495, %501 ], [ %.027, %.loopexit ]
  %.224 = phi i8* [ %.325, %499 ], [ %.325, %501 ], [ %.224.ph, %.loopexit ]
  %.119 = phi i32 [ %500, %499 ], [ %.220, %501 ], [ %.018, %.loopexit ]
  %.115 = phi i32 [ %496, %499 ], [ %496, %501 ], [ %.014, %.loopexit ]
  %.18 = phi i8 [ %486, %499 ], [ %486, %501 ], [ %.07, %.loopexit ]
  %.24 = phi i32 [ %.35, %499 ], [ %.35, %501 ], [ %.24.ph, %.loopexit ]
  %.2 = phi i32 [ %.3, %499 ], [ %.3, %501 ], [ %.2.ph, %.loopexit ]
  %469 = icmp eq i32 %.2, 0
  br i1 %469, label %._crit_edge117.loopexit3, label %470

; <label>:470:                                    ; preds = %468
  store i8 %.18, i8* %.224, align 1
  %471 = shl i32 %.24, 8
  %472 = lshr i32 %.24, 24
  %473 = zext i8 %.18 to i32
  %474 = xor i32 %472, %473
  %475 = zext i32 %474 to i64
  %476 = getelementptr inbounds [256 x i32], [256 x i32]* @BZ2_crc32Table, i64 0, i64 %475
  %477 = load i32, i32* %476, align 4
  %478 = xor i32 %471, %477
  %479 = getelementptr inbounds i8, i8* %.224, i32 1
  %480 = add i32 %.2, -1
  br label %481

; <label>:481:                                    ; preds = %470, %450
  %.229 = phi i32 [ %.128, %470 ], [ %.027, %450 ]
  %.325 = phi i8* [ %479, %470 ], [ %.022, %450 ]
  %.220 = phi i32 [ %.119, %470 ], [ %.018, %450 ]
  %.216 = phi i32 [ %.115, %470 ], [ %.014, %450 ]
  %.29 = phi i8 [ %.18, %470 ], [ %.07, %450 ]
  %.35 = phi i32 [ %478, %470 ], [ %.02, %450 ]
  %.3 = phi i32 [ %480, %470 ], [ %.01, %450 ]
  %482 = icmp sgt i32 %.216, %449
  br i1 %482, label %._crit_edge.loopexit12, label %483

; <label>:483:                                    ; preds = %481
  %484 = icmp eq i32 %.216, %449
  br i1 %484, label %._crit_edge117.loopexit3, label %485

; <label>:485:                                    ; preds = %483
  %486 = trunc i32 %.220 to i8
  %487 = mul i32 100000, %446
  %488 = icmp uge i32 %.229, %487
  br i1 %488, label %._crit_edge.loopexit12, label %489

; <label>:489:                                    ; preds = %485
  %490 = zext i32 %.229 to i64
  %491 = getelementptr inbounds i32, i32* %434, i64 %490
  %492 = load i32, i32* %491, align 4
  %493 = and i32 %492, 255
  %494 = trunc i32 %493 to i8
  %495 = lshr i32 %492, 8
  %496 = add nsw i32 %.216, 1
  %497 = zext i8 %494 to i32
  %498 = icmp ne i32 %497, %.220
  br i1 %498, label %499, label %501

; <label>:499:                                    ; preds = %489
  %500 = zext i8 %494 to i32
  br label %468

; <label>:501:                                    ; preds = %489
  %502 = icmp eq i32 %496, %449
  br i1 %502, label %468, label %503

; <label>:503:                                    ; preds = %501
  %504 = mul i32 100000, %446
  %505 = icmp uge i32 %495, %504
  br i1 %505, label %._crit_edge.loopexit12, label %506

; <label>:506:                                    ; preds = %503
  %507 = zext i32 %495 to i64
  %508 = getelementptr inbounds i32, i32* %434, i64 %507
  %509 = load i32, i32* %508, align 4
  %510 = and i32 %509, 255
  %511 = trunc i32 %510 to i8
  %512 = lshr i32 %509, 8
  %513 = add nsw i32 %496, 1
  %514 = icmp eq i32 %513, %449
  br i1 %514, label %.backedge109, label %515

; <label>:515:                                    ; preds = %506
  %516 = zext i8 %511 to i32
  %517 = icmp ne i32 %516, %.220
  br i1 %517, label %518, label %520

; <label>:518:                                    ; preds = %515
  %519 = zext i8 %511 to i32
  br label %.backedge109

; <label>:520:                                    ; preds = %515
  %521 = mul i32 100000, %446
  %522 = icmp uge i32 %512, %521
  br i1 %522, label %._crit_edge.loopexit12, label %523

; <label>:523:                                    ; preds = %520
  %524 = zext i32 %512 to i64
  %525 = getelementptr inbounds i32, i32* %434, i64 %524
  %526 = load i32, i32* %525, align 4
  %527 = and i32 %526, 255
  %528 = trunc i32 %527 to i8
  %529 = lshr i32 %526, 8
  %530 = add nsw i32 %513, 1
  %531 = icmp eq i32 %530, %449
  br i1 %531, label %.backedge109, label %532

; <label>:532:                                    ; preds = %523
  %533 = zext i8 %528 to i32
  %534 = icmp ne i32 %533, %.220
  br i1 %534, label %535, label %537

; <label>:535:                                    ; preds = %532
  %536 = zext i8 %528 to i32
  br label %.backedge109

; <label>:537:                                    ; preds = %532
  %538 = mul i32 100000, %446
  %539 = icmp uge i32 %529, %538
  br i1 %539, label %._crit_edge.loopexit12, label %540

; <label>:540:                                    ; preds = %537
  %541 = zext i32 %529 to i64
  %542 = getelementptr inbounds i32, i32* %434, i64 %541
  %543 = load i32, i32* %542, align 4
  %544 = and i32 %543, 255
  %545 = trunc i32 %544 to i8
  %546 = lshr i32 %543, 8
  %547 = add nsw i32 %530, 1
  %548 = zext i8 %545 to i32
  %549 = add nsw i32 %548, 4
  %550 = mul i32 100000, %446
  %551 = icmp uge i32 %546, %550
  br i1 %551, label %._crit_edge.loopexit12, label %552

; <label>:552:                                    ; preds = %540
  %553 = zext i32 %546 to i64
  %554 = getelementptr inbounds i32, i32* %434, i64 %553
  %555 = load i32, i32* %554, align 4
  %556 = and i32 %555, 255
  %557 = trunc i32 %556 to i8
  %558 = zext i8 %557 to i32
  %559 = lshr i32 %555, 8
  %560 = add nsw i32 %547, 1
  br label %.backedge109

.backedge109:                                     ; preds = %523, %506, %552, %535, %518
  %.027.be = phi i32 [ %512, %518 ], [ %529, %535 ], [ %559, %552 ], [ %512, %506 ], [ %529, %523 ]
  %.018.be = phi i32 [ %519, %518 ], [ %536, %535 ], [ %558, %552 ], [ %.220, %506 ], [ %.220, %523 ]
  %.014.be = phi i32 [ %513, %518 ], [ %530, %535 ], [ %560, %552 ], [ %513, %506 ], [ %530, %523 ]
  %.011.be = phi i32 [ 2, %518 ], [ 3, %535 ], [ %549, %552 ], [ 2, %506 ], [ 3, %523 ]
  br label %450

._crit_edge117.loopexit:                          ; preds = %455
  %.330.ph = phi i32 [ %.027, %455 ]
  %.426.ph = phi i8* [ %465, %455 ]
  %.321.ph = phi i32 [ %.018, %455 ]
  %.317.ph = phi i32 [ %.014, %455 ]
  %.213.ph = phi i32 [ %464, %455 ]
  %.310.ph = phi i8 [ %.07, %455 ]
  %.46.ph = phi i32 [ %463, %455 ]
  %.4.ph = phi i32 [ %466, %455 ]
  br label %._crit_edge117

._crit_edge117.loopexit3:                         ; preds = %452, %468, %483
  %.330.ph4 = phi i32 [ %.229, %483 ], [ %.128, %468 ], [ %.027, %452 ]
  %.426.ph5 = phi i8* [ %.325, %483 ], [ %.224, %468 ], [ %.022, %452 ]
  %.321.ph6 = phi i32 [ %.220, %483 ], [ %.119, %468 ], [ %.018, %452 ]
  %.317.ph7 = phi i32 [ %.216, %483 ], [ %.115, %468 ], [ %.014, %452 ]
  %.213.ph8 = phi i32 [ 0, %483 ], [ 1, %468 ], [ %.011, %452 ]
  %.310.ph9 = phi i8 [ %.29, %483 ], [ %.18, %468 ], [ %.07, %452 ]
  %.46.ph10 = phi i32 [ %.35, %483 ], [ %.24, %468 ], [ %.02, %452 ]
  %.4.ph11 = phi i32 [ %.3, %483 ], [ %.2, %468 ], [ %.01, %452 ]
  br label %._crit_edge117

._crit_edge117:                                   ; preds = %._crit_edge117.loopexit3, %._crit_edge117.loopexit
  %.330 = phi i32 [ %.330.ph, %._crit_edge117.loopexit ], [ %.330.ph4, %._crit_edge117.loopexit3 ]
  %.426 = phi i8* [ %.426.ph, %._crit_edge117.loopexit ], [ %.426.ph5, %._crit_edge117.loopexit3 ]
  %.321 = phi i32 [ %.321.ph, %._crit_edge117.loopexit ], [ %.321.ph6, %._crit_edge117.loopexit3 ]
  %.317 = phi i32 [ %.317.ph, %._crit_edge117.loopexit ], [ %.317.ph7, %._crit_edge117.loopexit3 ]
  %.213 = phi i32 [ %.213.ph, %._crit_edge117.loopexit ], [ %.213.ph8, %._crit_edge117.loopexit3 ]
  %.310 = phi i8 [ %.310.ph, %._crit_edge117.loopexit ], [ %.310.ph9, %._crit_edge117.loopexit3 ]
  %.46 = phi i32 [ %.46.ph, %._crit_edge117.loopexit ], [ %.46.ph10, %._crit_edge117.loopexit3 ]
  %.4 = phi i32 [ %.4.ph, %._crit_edge117.loopexit ], [ %.4.ph11, %._crit_edge117.loopexit3 ]
  %561 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %562 = load %struct.bz_stream*, %struct.bz_stream** %561, align 8
  %563 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %562, i32 0, i32 6
  %564 = load i32, i32* %563, align 4
  %565 = sub i32 %444, %.4
  %566 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %567 = load %struct.bz_stream*, %struct.bz_stream** %566, align 8
  %568 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %567, i32 0, i32 6
  %569 = load i32, i32* %568, align 4
  %570 = add i32 %569, %565
  store i32 %570, i32* %568, align 4
  %571 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %572 = load %struct.bz_stream*, %struct.bz_stream** %571, align 8
  %573 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %572, i32 0, i32 6
  %574 = load i32, i32* %573, align 4
  %575 = icmp ult i32 %574, %564
  br i1 %575, label %576, label %582

; <label>:576:                                    ; preds = %._crit_edge117
  %577 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %578 = load %struct.bz_stream*, %struct.bz_stream** %577, align 8
  %579 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %578, i32 0, i32 7
  %580 = load i32, i32* %579, align 8
  %581 = add i32 %580, 1
  store i32 %581, i32* %579, align 8
  br label %582

; <label>:582:                                    ; preds = %576, %._crit_edge117
  %583 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  store i32 %.46, i32* %583, align 8
  %584 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  store i8 %.310, i8* %584, align 4
  %585 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 %.213, i32* %585, align 8
  %586 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  store i32 %.317, i32* %586, align 4
  %587 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %.321, i32* %587, align 8
  %588 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  store i32* %434, i32** %588, align 8
  %589 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %.330, i32* %589, align 4
  %590 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %591 = load %struct.bz_stream*, %struct.bz_stream** %590, align 8
  %592 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %591, i32 0, i32 4
  store i8* %.426, i8** %592, align 8
  %593 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %594 = load %struct.bz_stream*, %struct.bz_stream** %593, align 8
  %595 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %594, i32 0, i32 5
  store i32 %.4, i32* %595, align 8
  br label %._crit_edge

._crit_edge.loopexit:                             ; preds = %66
  %.0.ph = phi i8 [ 0, %66 ]
  br label %._crit_edge

._crit_edge.loopexit1:                            ; preds = %.backedge, %71, %78, %85, %160, %231, %302, %343
  %.0.ph2 = phi i8 [ 1, %343 ], [ 1, %302 ], [ 1, %231 ], [ 1, %160 ], [ 1, %85 ], [ 1, %78 ], [ 0, %71 ], [ 0, %.backedge ]
  br label %._crit_edge

._crit_edge.loopexit12:                           ; preds = %481, %485, %503, %520, %537, %540
  %.0.ph13 = phi i8 [ 1, %540 ], [ 1, %537 ], [ 1, %520 ], [ 1, %503 ], [ 1, %485 ], [ 1, %481 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit12, %._crit_edge.loopexit1, %._crit_edge.loopexit, %5, %582
  %.0 = phi i8 [ 0, %582 ], [ 0, %5 ], [ %.0.ph, %._crit_edge.loopexit ], [ %.0.ph2, %._crit_edge.loopexit1 ], [ %.0.ph13, %._crit_edge.loopexit12 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzDecompressEnd(%struct.bz_stream*) #0 {
  %2 = icmp eq %struct.bz_stream* %0, null
  br i1 %2, label %55, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.DState*
  %7 = icmp eq %struct.DState* %6, null
  br i1 %7, label %55, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 0
  %10 = load %struct.bz_stream*, %struct.bz_stream** %9, align 8
  %11 = icmp ne %struct.bz_stream* %10, %0
  br i1 %11, label %55, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 20
  %14 = load i32*, i32** %13, align 8
  %15 = icmp ne i32* %14, null
  br i1 %15, label %16, label %24

; <label>:16:                                     ; preds = %12
  %17 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 20
  %22 = load i32*, i32** %21, align 8
  %23 = bitcast i32* %22 to i8*
  call void %18(i8* %20, i8* %23)
  br label %24

; <label>:24:                                     ; preds = %16, %12
  %25 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 21
  %26 = load i16*, i16** %25, align 8
  %27 = icmp ne i16* %26, null
  br i1 %27, label %28, label %36

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %30 = load void (i8*, i8*)*, void (i8*, i8*)** %29, align 8
  %31 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 21
  %34 = load i16*, i16** %33, align 8
  %35 = bitcast i16* %34 to i8*
  call void %30(i8* %32, i8* %35)
  br label %36

; <label>:36:                                     ; preds = %28, %24
  %37 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 22
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %40, label %47

; <label>:40:                                     ; preds = %36
  %41 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %42 = load void (i8*, i8*)*, void (i8*, i8*)** %41, align 8
  %43 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.DState, %struct.DState* %6, i32 0, i32 22
  %46 = load i8*, i8** %45, align 8
  call void %42(i8* %44, i8* %46)
  br label %47

; <label>:47:                                     ; preds = %40, %36
  %48 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 10
  %49 = load void (i8*, i8*)*, void (i8*, i8*)** %48, align 8
  %50 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 11
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  %53 = load i8*, i8** %52, align 8
  call void %49(i8* %51, i8* %53)
  %54 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %0, i32 0, i32 8
  store i8* null, i8** %54, align 8
  br label %55

; <label>:55:                                     ; preds = %8, %3, %1, %47
  %.0 = phi i32 [ 0, %47 ], [ -2, %1 ], [ -2, %3 ], [ -2, %8 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @BZ2_bzWriteOpen(i32*, %struct._IO_FILE*, i32, i32, i32) #2 {
  %6 = icmp ne i32* %0, null
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %5
  store i32 0, i32* %0, align 4
  br label %8

; <label>:8:                                      ; preds = %7, %5
  %9 = icmp ne %struct.bzFile* null, null
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %8
  %11 = getelementptr inbounds %struct.bzFile, %struct.bzFile* null, i32 0, i32 5
  store i32 0, i32* %11, align 8
  br label %12

; <label>:12:                                     ; preds = %10, %8
  %13 = icmp eq %struct._IO_FILE* %1, null
  %14 = icmp slt i32 %2, 1
  %or.cond = or i1 %13, %14
  %15 = icmp sgt i32 %2, 9
  %or.cond1 = or i1 %or.cond, %15
  %16 = icmp slt i32 %4, 0
  %or.cond2 = or i1 %or.cond1, %16
  %17 = icmp sgt i32 %4, 250
  %or.cond3 = or i1 %or.cond2, %17
  %18 = icmp slt i32 %3, 0
  %or.cond4 = or i1 %or.cond3, %18
  %19 = icmp sgt i32 %3, 4
  %or.cond5 = or i1 %or.cond4, %19
  br i1 %or.cond5, label %20, label %27

; <label>:20:                                     ; preds = %12
  %21 = icmp ne i32* %0, null
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %20
  store i32 -2, i32* %0, align 4
  br label %23

; <label>:23:                                     ; preds = %22, %20
  %24 = icmp ne %struct.bzFile* null, null
  br i1 %24, label %25, label %83

; <label>:25:                                     ; preds = %23
  %26 = getelementptr inbounds %struct.bzFile, %struct.bzFile* null, i32 0, i32 5
  store i32 -2, i32* %26, align 8
  br label %83

; <label>:27:                                     ; preds = %12
  %28 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %27
  %31 = icmp ne i32* %0, null
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %30
  store i32 -6, i32* %0, align 4
  br label %33

; <label>:33:                                     ; preds = %32, %30
  %34 = icmp ne %struct.bzFile* null, null
  br i1 %34, label %35, label %83

; <label>:35:                                     ; preds = %33
  %36 = getelementptr inbounds %struct.bzFile, %struct.bzFile* null, i32 0, i32 5
  store i32 -6, i32* %36, align 8
  br label %83

; <label>:37:                                     ; preds = %27
  %38 = call noalias i8* @malloc(i64 5104) #9, !track !56
  %39 = bitcast i8* %38 to %struct.bzFile*
  %40 = icmp eq %struct.bzFile* %39, null
  %41 = icmp ne i32* %0, null
  br i1 %40, label %42, label %48

; <label>:42:                                     ; preds = %37
  br i1 %41, label %43, label %44

; <label>:43:                                     ; preds = %42
  store i32 -3, i32* %0, align 4
  br label %44

; <label>:44:                                     ; preds = %43, %42
  %45 = icmp ne %struct.bzFile* %39, null
  br i1 %45, label %46, label %83

; <label>:46:                                     ; preds = %44
  %47 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 5
  store i32 -3, i32* %47, align 8
  br label %83

; <label>:48:                                     ; preds = %37
  br i1 %41, label %49, label %50

; <label>:49:                                     ; preds = %48
  store i32 0, i32* %0, align 4
  br label %50

; <label>:50:                                     ; preds = %49, %48
  %51 = icmp ne %struct.bzFile* %39, null
  br i1 %51, label %52, label %54

; <label>:52:                                     ; preds = %50
  %53 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 5
  store i32 0, i32* %53, align 8
  br label %54

; <label>:54:                                     ; preds = %52, %50
  %55 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 6
  store i8 0, i8* %55, align 4
  %56 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 2
  store i32 0, i32* %56, align 8
  %57 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 0
  store %struct._IO_FILE* %1, %struct._IO_FILE** %57, align 8
  %58 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 3
  store i8 1, i8* %58, align 4
  %59 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 4
  %60 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %59, i32 0, i32 9
  store i8* (i8*, i32, i32)* null, i8* (i8*, i32, i32)** %60, align 8
  %61 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 4
  %62 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %61, i32 0, i32 10
  store void (i8*, i8*)* null, void (i8*, i8*)** %62, align 8
  %63 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 4
  %64 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %63, i32 0, i32 11
  store i8* null, i8** %64, align 8
  %65 = icmp eq i32 %4, 0
  %spec.select = select i1 %65, i32 30, i32 %4
  %66 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 4
  %67 = call i32 @BZ2_bzCompressInit(%struct.bz_stream* %66, i32 %2, i32 %3, i32 %spec.select)
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %78

; <label>:69:                                     ; preds = %54
  %70 = icmp ne i32* %0, null
  br i1 %70, label %71, label %72

; <label>:71:                                     ; preds = %69
  store i32 %67, i32* %0, align 4
  br label %72

; <label>:72:                                     ; preds = %71, %69
  %73 = icmp ne %struct.bzFile* %39, null
  br i1 %73, label %74, label %76

; <label>:74:                                     ; preds = %72
  %75 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 5
  store i32 %67, i32* %75, align 8
  br label %76

; <label>:76:                                     ; preds = %74, %72
  %77 = bitcast %struct.bzFile* %39 to i8*
  call void @free(i8* %77) #9
  br label %83

; <label>:78:                                     ; preds = %54
  %79 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 4
  %80 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %79, i32 0, i32 1
  store i32 0, i32* %80, align 8
  %81 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %39, i32 0, i32 6
  store i8 1, i8* %81, align 4
  %82 = bitcast %struct.bzFile* %39 to i8*
  br label %83

; <label>:83:                                     ; preds = %44, %46, %33, %35, %23, %25, %78, %76
  %.0 = phi i8* [ null, %76 ], [ %82, %78 ], [ null, %25 ], [ null, %23 ], [ null, %35 ], [ null, %33 ], [ null, %46 ], [ null, %44 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bzWrite(i32*, i8*, i8*, i32) #0 {
  %5 = bitcast i8* %1 to %struct.bzFile*
  %6 = icmp ne i32* %0, null
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  store i32 0, i32* %0, align 4
  br label %8

; <label>:8:                                      ; preds = %7, %4
  %magicptr = ptrtoint %struct.bzFile* %5 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %14, label %9

; <label>:9:                                      ; preds = %8
  %10 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 0, i32* %10, align 8
  %11 = icmp eq %struct.bzFile* %5, null
  %12 = icmp eq i8* %2, null
  %or.cond = or i1 %11, %12
  %13 = icmp slt i32 %3, 0
  %or.cond1 = or i1 %or.cond, %13
  br i1 %or.cond1, label %14, label %21

; <label>:14:                                     ; preds = %8, %9
  %15 = icmp ne i32* %0, null
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %14
  store i32 -2, i32* %0, align 4
  br label %17

; <label>:17:                                     ; preds = %16, %14
  %18 = icmp ne %struct.bzFile* %5, null
  br i1 %18, label %19, label %117

; <label>:19:                                     ; preds = %17
  %20 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -2, i32* %20, align 8
  br label %117

; <label>:21:                                     ; preds = %9
  %22 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 3
  %23 = load i8, i8* %22, align 4
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %32, label %25

; <label>:25:                                     ; preds = %21
  %26 = icmp ne i32* %0, null
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %25
  store i32 -1, i32* %0, align 4
  br label %28

; <label>:28:                                     ; preds = %27, %25
  %29 = icmp ne %struct.bzFile* %5, null
  br i1 %29, label %30, label %117

; <label>:30:                                     ; preds = %28
  %31 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -1, i32* %31, align 8
  br label %117

; <label>:32:                                     ; preds = %21
  %33 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %33, align 8
  %35 = call i32 @ferror(%struct._IO_FILE* %34) #9
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %44

; <label>:37:                                     ; preds = %32
  %38 = icmp ne i32* %0, null
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %37
  store i32 -6, i32* %0, align 4
  br label %40

; <label>:40:                                     ; preds = %39, %37
  %41 = icmp ne %struct.bzFile* %5, null
  br i1 %41, label %42, label %117

; <label>:42:                                     ; preds = %40
  %43 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -6, i32* %43, align 8
  br label %117

; <label>:44:                                     ; preds = %32
  %45 = icmp eq i32 %3, 0
  br i1 %45, label %46, label %53

; <label>:46:                                     ; preds = %44
  %47 = icmp ne i32* %0, null
  br i1 %47, label %48, label %49

; <label>:48:                                     ; preds = %46
  store i32 0, i32* %0, align 4
  br label %49

; <label>:49:                                     ; preds = %48, %46
  %50 = icmp ne %struct.bzFile* %5, null
  br i1 %50, label %51, label %117

; <label>:51:                                     ; preds = %49
  %52 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 0, i32* %52, align 8
  br label %117

; <label>:53:                                     ; preds = %44
  %54 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %55 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %54, i32 0, i32 1
  store i32 %3, i32* %55, align 8
  %56 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %57 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %56, i32 0, i32 0
  store i8* %2, i8** %57, align 8
  %58 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %59 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %58, i32 0, i32 5
  store i32 5000, i32* %59, align 8
  %60 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 1
  %61 = getelementptr inbounds [5000 x i8], [5000 x i8]* %60, i32 0, i32 0
  %62 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %63 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %62, i32 0, i32 4
  store i8* %61, i8** %63, align 8
  %64 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %65 = call i32 @BZ2_bzCompress(%struct.bz_stream* %64, i32 0)
  %66 = icmp ne i32 %65, 1
  br i1 %66, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %53
  br label %.lr.ph

; <label>:67:                                     ; preds = %105
  store i32 5000, i32* %59, align 8
  store i8* %61, i8** %63, align 8
  %68 = call i32 @BZ2_bzCompress(%struct.bz_stream* %64, i32 0)
  %69 = icmp ne i32 %68, 1
  br i1 %69, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %67
  %.lcssa.ph = phi i32 [ %68, %67 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %53
  %.lcssa = phi i32 [ %65, %53 ], [ %.lcssa.ph, %._crit_edge.loopexit ]
  %70 = icmp ne i32* %0, null
  br i1 %70, label %71, label %72

; <label>:71:                                     ; preds = %._crit_edge
  store i32 %.lcssa, i32* %0, align 4
  br label %72

; <label>:72:                                     ; preds = %71, %._crit_edge
  %73 = icmp ne %struct.bzFile* %5, null
  br i1 %73, label %74, label %117

; <label>:74:                                     ; preds = %72
  %75 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 %.lcssa, i32* %75, align 8
  br label %117

.lr.ph:                                           ; preds = %.lr.ph.preheader, %67
  call void @unroll_loop(i32 41)
  %76 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %77 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %76, i32 0, i32 5
  %78 = load i32, i32* %77, align 8
  %79 = icmp ult i32 %78, 5000
  br i1 %79, label %80, label %105

; <label>:80:                                     ; preds = %.lr.ph
  %81 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %82 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %81, i32 0, i32 5
  %83 = load i32, i32* %82, align 8
  %84 = sub i32 5000, %83
  %85 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 1
  %86 = getelementptr inbounds [5000 x i8], [5000 x i8]* %85, i32 0, i32 0
  %87 = sext i32 %84 to i64
  %88 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %88, align 8
  %90 = call i64 @fwrite(i8* %86, i64 1, i64 %87, %struct._IO_FILE* %89)
  %91 = trunc i64 %90 to i32
  %92 = icmp ne i32 %84, %91
  br i1 %92, label %98, label %93

; <label>:93:                                     ; preds = %80
  %94 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %94, align 8
  %96 = call i32 @ferror(%struct._IO_FILE* %95) #9
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %105

; <label>:98:                                     ; preds = %93, %80
  %99 = icmp ne i32* %0, null
  br i1 %99, label %100, label %101

; <label>:100:                                    ; preds = %98
  store i32 -6, i32* %0, align 4
  br label %101

; <label>:101:                                    ; preds = %100, %98
  %102 = icmp ne %struct.bzFile* %5, null
  br i1 %102, label %103, label %117

; <label>:103:                                    ; preds = %101
  %104 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -6, i32* %104, align 8
  br label %117

; <label>:105:                                    ; preds = %93, %.lr.ph
  %106 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %107 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %106, i32 0, i32 1
  %108 = load i32, i32* %107, align 8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %67

; <label>:110:                                    ; preds = %105
  %111 = icmp ne i32* %0, null
  br i1 %111, label %112, label %113

; <label>:112:                                    ; preds = %110
  store i32 0, i32* %0, align 4
  br label %113

; <label>:113:                                    ; preds = %112, %110
  %114 = icmp ne %struct.bzFile* %5, null
  br i1 %114, label %115, label %117

; <label>:115:                                    ; preds = %113
  %116 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 0, i32* %116, align 8
  br label %117

; <label>:117:                                    ; preds = %113, %115, %101, %103, %72, %74, %49, %51, %40, %42, %28, %30, %17, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bzWriteClose(i32*, i8*, i32, i32*, i32*) #0 {
  call void @BZ2_bzWriteClose64(i32* %0, i8* %1, i32 %2, i32* %3, i32* null, i32* %4, i32* null)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bzWriteClose64(i32*, i8*, i32, i32*, i32*, i32*, i32*) #0 {
  %8 = bitcast i8* %1 to %struct.bzFile*
  %9 = icmp eq %struct.bzFile* %8, null
  br i1 %9, label %10, label %17

; <label>:10:                                     ; preds = %7
  %11 = icmp ne i32* %0, null
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %10
  store i32 0, i32* %0, align 4
  br label %13

; <label>:13:                                     ; preds = %12, %10
  %14 = icmp ne %struct.bzFile* %8, null
  br i1 %14, label %15, label %162

; <label>:15:                                     ; preds = %13
  %16 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  store i32 0, i32* %16, align 8
  br label %162

; <label>:17:                                     ; preds = %7
  %18 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 3
  %19 = load i8, i8* %18, align 4
  %20 = icmp ne i8 %19, 0
  br i1 %20, label %28, label %21

; <label>:21:                                     ; preds = %17
  %22 = icmp ne i32* %0, null
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %21
  store i32 -1, i32* %0, align 4
  br label %24

; <label>:24:                                     ; preds = %23, %21
  %25 = icmp ne %struct.bzFile* %8, null
  br i1 %25, label %26, label %162

; <label>:26:                                     ; preds = %24
  %27 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  store i32 -1, i32* %27, align 8
  br label %162

; <label>:28:                                     ; preds = %17
  %29 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 0
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %29, align 8
  %31 = call i32 @ferror(%struct._IO_FILE* %30) #9
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %40

; <label>:33:                                     ; preds = %28
  %34 = icmp ne i32* %0, null
  br i1 %34, label %35, label %36

; <label>:35:                                     ; preds = %33
  store i32 -6, i32* %0, align 4
  br label %36

; <label>:36:                                     ; preds = %35, %33
  %37 = icmp ne %struct.bzFile* %8, null
  br i1 %37, label %38, label %162

; <label>:38:                                     ; preds = %36
  %39 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  store i32 -6, i32* %39, align 8
  br label %162

; <label>:40:                                     ; preds = %28
  %41 = icmp ne i32* %3, null
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %40
  store i32 0, i32* %3, align 4
  br label %43

; <label>:43:                                     ; preds = %42, %40
  %44 = icmp ne i32* %4, null
  br i1 %44, label %45, label %46

; <label>:45:                                     ; preds = %43
  store i32 0, i32* %4, align 4
  br label %46

; <label>:46:                                     ; preds = %45, %43
  %47 = icmp ne i32* %5, null
  br i1 %47, label %48, label %49

; <label>:48:                                     ; preds = %46
  store i32 0, i32* %5, align 4
  br label %49

; <label>:49:                                     ; preds = %48, %46
  %50 = icmp ne i32* %6, null
  br i1 %50, label %51, label %52

; <label>:51:                                     ; preds = %49
  store i32 0, i32* %6, align 4
  br label %52

; <label>:52:                                     ; preds = %51, %49
  %cond = icmp eq i32 %2, 0
  br i1 %cond, label %53, label %127

; <label>:53:                                     ; preds = %52
  %54 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %.preheader, label %105

.preheader:                                       ; preds = %53
  br label %57

; <label>:57:                                     ; preds = %.preheader, %103
  call void @unroll_loop(i32 42)
  %58 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %59 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %58, i32 0, i32 5
  store i32 5000, i32* %59, align 8
  %60 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 1
  %61 = getelementptr inbounds [5000 x i8], [5000 x i8]* %60, i32 0, i32 0
  %62 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %63 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %62, i32 0, i32 4
  store i8* %61, i8** %63, align 8
  %64 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %65 = call i32 @BZ2_bzCompress(%struct.bz_stream* %64, i32 2)
  %.off = add i32 %65, -3
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %73, label %66

; <label>:66:                                     ; preds = %57
  %.lcssa = phi i32 [ %65, %57 ]
  %67 = icmp ne i32* %0, null
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %66
  store i32 %.lcssa, i32* %0, align 4
  br label %69

; <label>:69:                                     ; preds = %68, %66
  %70 = icmp ne %struct.bzFile* %8, null
  br i1 %70, label %71, label %162

; <label>:71:                                     ; preds = %69
  %72 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  store i32 %.lcssa, i32* %72, align 8
  br label %162

; <label>:73:                                     ; preds = %57
  %74 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %75 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %74, i32 0, i32 5
  %76 = load i32, i32* %75, align 8
  %77 = icmp ult i32 %76, 5000
  br i1 %77, label %78, label %103

; <label>:78:                                     ; preds = %73
  %79 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %80 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %79, i32 0, i32 5
  %81 = load i32, i32* %80, align 8
  %82 = sub i32 5000, %81
  %83 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 1
  %84 = getelementptr inbounds [5000 x i8], [5000 x i8]* %83, i32 0, i32 0
  %85 = sext i32 %82 to i64
  %86 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 0
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %86, align 8
  %88 = call i64 @fwrite(i8* %84, i64 1, i64 %85, %struct._IO_FILE* %87)
  %89 = trunc i64 %88 to i32
  %90 = icmp ne i32 %82, %89
  br i1 %90, label %96, label %91

; <label>:91:                                     ; preds = %78
  %92 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 0
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %92, align 8
  %94 = call i32 @ferror(%struct._IO_FILE* %93) #9
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %103

; <label>:96:                                     ; preds = %91, %78
  %97 = icmp ne i32* %0, null
  br i1 %97, label %98, label %99

; <label>:98:                                     ; preds = %96
  store i32 -6, i32* %0, align 4
  br label %99

; <label>:99:                                     ; preds = %98, %96
  %100 = icmp ne %struct.bzFile* %8, null
  br i1 %100, label %101, label %162

; <label>:101:                                    ; preds = %99
  %102 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  store i32 -6, i32* %102, align 8
  br label %162

; <label>:103:                                    ; preds = %91, %73
  %104 = icmp eq i32 %65, 4
  br i1 %104, label %.loopexit, label %57

.loopexit:                                        ; preds = %103
  br label %105

; <label>:105:                                    ; preds = %.loopexit, %53
  %106 = icmp ne i32 %2, 0
  br i1 %106, label %127, label %107

; <label>:107:                                    ; preds = %105
  %108 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 0
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %108, align 8
  %110 = call i32 @ferror(%struct._IO_FILE* %109) #9
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %127, label %112

; <label>:112:                                    ; preds = %107
  %113 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 0
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** %113, align 8
  %115 = call i32 @fflush(%struct._IO_FILE* %114)
  %116 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 0
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** %116, align 8
  %118 = call i32 @ferror(%struct._IO_FILE* %117) #9
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %120, label %127

; <label>:120:                                    ; preds = %112
  %121 = icmp ne i32* %0, null
  br i1 %121, label %122, label %123

; <label>:122:                                    ; preds = %120
  store i32 -6, i32* %0, align 4
  br label %123

; <label>:123:                                    ; preds = %122, %120
  %124 = icmp ne %struct.bzFile* %8, null
  br i1 %124, label %125, label %162

; <label>:125:                                    ; preds = %123
  %126 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  store i32 -6, i32* %126, align 8
  br label %162

; <label>:127:                                    ; preds = %52, %112, %107, %105
  %128 = icmp ne i32* %3, null
  br i1 %128, label %129, label %133

; <label>:129:                                    ; preds = %127
  %130 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %131 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %130, i32 0, i32 2
  %132 = load i32, i32* %131, align 4
  store i32 %132, i32* %3, align 4
  br label %133

; <label>:133:                                    ; preds = %129, %127
  %134 = icmp ne i32* %4, null
  br i1 %134, label %135, label %139

; <label>:135:                                    ; preds = %133
  %136 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %137 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %136, i32 0, i32 3
  %138 = load i32, i32* %137, align 8
  store i32 %138, i32* %4, align 4
  br label %139

; <label>:139:                                    ; preds = %135, %133
  %140 = icmp ne i32* %5, null
  br i1 %140, label %141, label %145

; <label>:141:                                    ; preds = %139
  %142 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %143 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %142, i32 0, i32 6
  %144 = load i32, i32* %143, align 4
  store i32 %144, i32* %5, align 4
  br label %145

; <label>:145:                                    ; preds = %141, %139
  %146 = icmp ne i32* %6, null
  br i1 %146, label %147, label %151

; <label>:147:                                    ; preds = %145
  %148 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %149 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %148, i32 0, i32 7
  %150 = load i32, i32* %149, align 8
  store i32 %150, i32* %6, align 4
  br label %151

; <label>:151:                                    ; preds = %147, %145
  %152 = icmp ne i32* %0, null
  br i1 %152, label %153, label %154

; <label>:153:                                    ; preds = %151
  store i32 0, i32* %0, align 4
  br label %154

; <label>:154:                                    ; preds = %153, %151
  %155 = icmp ne %struct.bzFile* %8, null
  br i1 %155, label %156, label %158

; <label>:156:                                    ; preds = %154
  %157 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 5
  store i32 0, i32* %157, align 8
  br label %158

; <label>:158:                                    ; preds = %156, %154
  %159 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 4
  %160 = call i32 @BZ2_bzCompressEnd(%struct.bz_stream* %159)
  %161 = bitcast %struct.bzFile* %8 to i8*
  call void @free(i8* %161) #9
  br label %162

; <label>:162:                                    ; preds = %123, %125, %99, %101, %69, %71, %36, %38, %24, %26, %13, %15, %158
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @BZ2_bzReadOpen(i32*, %struct._IO_FILE*, i32, i32, i8*, i32) #2 {
  %7 = icmp ne i32* %0, null
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %6
  store i32 0, i32* %0, align 4
  br label %9

; <label>:9:                                      ; preds = %8, %6
  %10 = icmp ne %struct.bzFile* null, null
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %9
  %12 = getelementptr inbounds %struct.bzFile, %struct.bzFile* null, i32 0, i32 5
  store i32 0, i32* %12, align 8
  br label %13

; <label>:13:                                     ; preds = %11, %9
  %14 = icmp ne %struct._IO_FILE* %1, null
  %switch = icmp ult i32 %3, 2
  %or.cond3 = and i1 %14, %switch
  br i1 %or.cond3, label %15, label %26

; <label>:15:                                     ; preds = %13
  %16 = icmp slt i32 %2, 0
  %17 = icmp sgt i32 %2, 4
  %or.cond = or i1 %16, %17
  br i1 %or.cond, label %26, label %18

; <label>:18:                                     ; preds = %15
  %19 = icmp eq i8* %4, null
  %20 = icmp ne i32 %5, 0
  %or.cond1 = and i1 %19, %20
  br i1 %or.cond1, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = icmp ne i8* %4, null
  br i1 %22, label %23, label %33

; <label>:23:                                     ; preds = %21
  %24 = icmp slt i32 %5, 0
  %25 = icmp sgt i32 %5, 5000
  %or.cond2 = or i1 %24, %25
  br i1 %or.cond2, label %26, label %33

; <label>:26:                                     ; preds = %13, %18, %23, %15
  %27 = icmp ne i32* %0, null
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %26
  store i32 -2, i32* %0, align 4
  br label %29

; <label>:29:                                     ; preds = %28, %26
  %30 = icmp ne %struct.bzFile* null, null
  br i1 %30, label %31, label %107

; <label>:31:                                     ; preds = %29
  %32 = getelementptr inbounds %struct.bzFile, %struct.bzFile* null, i32 0, i32 5
  store i32 -2, i32* %32, align 8
  br label %107

; <label>:33:                                     ; preds = %23, %21
  %34 = call i32 @ferror(%struct._IO_FILE* %1) #9
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %43

; <label>:36:                                     ; preds = %33
  %37 = icmp ne i32* %0, null
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %36
  store i32 -6, i32* %0, align 4
  br label %39

; <label>:39:                                     ; preds = %38, %36
  %40 = icmp ne %struct.bzFile* null, null
  br i1 %40, label %41, label %107

; <label>:41:                                     ; preds = %39
  %42 = getelementptr inbounds %struct.bzFile, %struct.bzFile* null, i32 0, i32 5
  store i32 -6, i32* %42, align 8
  br label %107

; <label>:43:                                     ; preds = %33
  %44 = call noalias i8* @malloc(i64 5104) #9, !track !57
  %45 = bitcast i8* %44 to %struct.bzFile*
  %46 = icmp eq %struct.bzFile* %45, null
  %47 = icmp ne i32* %0, null
  br i1 %46, label %48, label %54

; <label>:48:                                     ; preds = %43
  br i1 %47, label %49, label %50

; <label>:49:                                     ; preds = %48
  store i32 -3, i32* %0, align 4
  br label %50

; <label>:50:                                     ; preds = %49, %48
  %51 = icmp ne %struct.bzFile* %45, null
  br i1 %51, label %52, label %107

; <label>:52:                                     ; preds = %50
  %53 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 5
  store i32 -3, i32* %53, align 8
  br label %107

; <label>:54:                                     ; preds = %43
  br i1 %47, label %55, label %56

; <label>:55:                                     ; preds = %54
  store i32 0, i32* %0, align 4
  br label %56

; <label>:56:                                     ; preds = %55, %54
  %57 = icmp ne %struct.bzFile* %45, null
  br i1 %57, label %58, label %60

; <label>:58:                                     ; preds = %56
  %59 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 5
  store i32 0, i32* %59, align 8
  br label %60

; <label>:60:                                     ; preds = %58, %56
  %61 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 6
  store i8 0, i8* %61, align 4
  %62 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 0
  store %struct._IO_FILE* %1, %struct._IO_FILE** %62, align 8
  %63 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 2
  store i32 0, i32* %63, align 8
  %64 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 3
  store i8 0, i8* %64, align 4
  %65 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 4
  %66 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %65, i32 0, i32 9
  store i8* (i8*, i32, i32)* null, i8* (i8*, i32, i32)** %66, align 8
  %67 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 4
  %68 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %67, i32 0, i32 10
  store void (i8*, i8*)* null, void (i8*, i8*)** %68, align 8
  %69 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 4
  %70 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %69, i32 0, i32 11
  store i8* null, i8** %70, align 8
  %71 = icmp sgt i32 %5, 0
  br i1 %71, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %60
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.014 = phi i32 [ %82, %.lr.ph ], [ %5, %.lr.ph.preheader ]
  %.023 = phi i8* [ %81, %.lr.ph ], [ %4, %.lr.ph.preheader ]
  call void @unroll_loop(i32 43)
  %72 = load i8, i8* %.023, align 1
  %73 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 1
  %74 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 2
  %75 = load i32, i32* %74, align 8
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [5000 x i8], [5000 x i8]* %73, i64 0, i64 %76
  store i8 %72, i8* %77, align 1
  %78 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 2
  %79 = load i32, i32* %78, align 8
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %78, align 8
  %81 = getelementptr inbounds i8, i8* %.023, i64 1
  %82 = add nsw i32 %.014, -1
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %60
  %84 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 4
  %85 = call i32 @BZ2_bzDecompressInit(%struct.bz_stream* %84, i32 %2, i32 %3)
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %96

; <label>:87:                                     ; preds = %._crit_edge
  %88 = icmp ne i32* %0, null
  br i1 %88, label %89, label %90

; <label>:89:                                     ; preds = %87
  store i32 %85, i32* %0, align 4
  br label %90

; <label>:90:                                     ; preds = %89, %87
  %91 = icmp ne %struct.bzFile* %45, null
  br i1 %91, label %92, label %94

; <label>:92:                                     ; preds = %90
  %93 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 5
  store i32 %85, i32* %93, align 8
  br label %94

; <label>:94:                                     ; preds = %92, %90
  %95 = bitcast %struct.bzFile* %45 to i8*
  call void @free(i8* %95) #9
  br label %107

; <label>:96:                                     ; preds = %._crit_edge
  %97 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 2
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 4
  %100 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %99, i32 0, i32 1
  store i32 %98, i32* %100, align 8
  %101 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 1
  %102 = getelementptr inbounds [5000 x i8], [5000 x i8]* %101, i32 0, i32 0
  %103 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 4
  %104 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %103, i32 0, i32 0
  store i8* %102, i8** %104, align 8
  %105 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %45, i32 0, i32 6
  store i8 1, i8* %105, align 4
  %106 = bitcast %struct.bzFile* %45 to i8*
  br label %107

; <label>:107:                                    ; preds = %50, %52, %39, %41, %29, %31, %96, %94
  %.0 = phi i8* [ null, %94 ], [ %106, %96 ], [ null, %31 ], [ null, %29 ], [ null, %41 ], [ null, %39 ], [ null, %52 ], [ null, %50 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bzReadClose(i32*, i8*) #0 {
  %3 = bitcast i8* %1 to %struct.bzFile*
  %4 = icmp ne i32* %0, null
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %2
  store i32 0, i32* %0, align 4
  br label %6

; <label>:6:                                      ; preds = %5, %2
  %magicptr = ptrtoint %struct.bzFile* %3 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %12, label %7

; <label>:7:                                      ; preds = %6
  %8 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %3, i32 0, i32 5
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %3, i32 0, i32 3
  %10 = load i8, i8* %9, align 4
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %19, label %26

; <label>:12:                                     ; preds = %6
  %13 = icmp ne i32* %0, null
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %12
  store i32 0, i32* %0, align 4
  br label %15

; <label>:15:                                     ; preds = %14, %12
  %16 = icmp ne %struct.bzFile* %3, null
  br i1 %16, label %17, label %35

; <label>:17:                                     ; preds = %15
  %18 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %3, i32 0, i32 5
  store i32 0, i32* %18, align 8
  br label %35

; <label>:19:                                     ; preds = %7
  %20 = icmp ne i32* %0, null
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %19
  store i32 -1, i32* %0, align 4
  br label %22

; <label>:22:                                     ; preds = %21, %19
  %23 = icmp ne %struct.bzFile* %3, null
  br i1 %23, label %24, label %35

; <label>:24:                                     ; preds = %22
  %25 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %3, i32 0, i32 5
  store i32 -1, i32* %25, align 8
  br label %35

; <label>:26:                                     ; preds = %7
  %27 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %3, i32 0, i32 6
  %28 = load i8, i8* %27, align 4
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %3, i32 0, i32 4
  %32 = call i32 @BZ2_bzDecompressEnd(%struct.bz_stream* %31)
  br label %33

; <label>:33:                                     ; preds = %30, %26
  %34 = bitcast %struct.bzFile* %3 to i8*
  call void @free(i8* %34) #9
  br label %35

; <label>:35:                                     ; preds = %22, %24, %15, %17, %33
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzRead(i32*, i8*, i8*, i32) #0 {
  %5 = bitcast i8* %1 to %struct.bzFile*
  %6 = icmp ne i32* %0, null
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  store i32 0, i32* %0, align 4
  br label %8

; <label>:8:                                      ; preds = %7, %4
  %magicptr = ptrtoint %struct.bzFile* %5 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %14, label %9

; <label>:9:                                      ; preds = %8
  %10 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 0, i32* %10, align 8
  %11 = icmp eq %struct.bzFile* %5, null
  %12 = icmp eq i8* %2, null
  %or.cond = or i1 %11, %12
  %13 = icmp slt i32 %3, 0
  %or.cond1 = or i1 %or.cond, %13
  br i1 %or.cond1, label %14, label %21

; <label>:14:                                     ; preds = %8, %9
  %15 = icmp ne i32* %0, null
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %14
  store i32 -2, i32* %0, align 4
  br label %17

; <label>:17:                                     ; preds = %16, %14
  %18 = icmp ne %struct.bzFile* %5, null
  br i1 %18, label %19, label %156

; <label>:19:                                     ; preds = %17
  %20 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -2, i32* %20, align 8
  br label %156

; <label>:21:                                     ; preds = %9
  %22 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 3
  %23 = load i8, i8* %22, align 4
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %25, label %32

; <label>:25:                                     ; preds = %21
  %26 = icmp ne i32* %0, null
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %25
  store i32 -1, i32* %0, align 4
  br label %28

; <label>:28:                                     ; preds = %27, %25
  %29 = icmp ne %struct.bzFile* %5, null
  br i1 %29, label %30, label %156

; <label>:30:                                     ; preds = %28
  %31 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -1, i32* %31, align 8
  br label %156

; <label>:32:                                     ; preds = %21
  %33 = icmp eq i32 %3, 0
  br i1 %33, label %34, label %41

; <label>:34:                                     ; preds = %32
  %35 = icmp ne i32* %0, null
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %34
  store i32 0, i32* %0, align 4
  br label %37

; <label>:37:                                     ; preds = %36, %34
  %38 = icmp ne %struct.bzFile* %5, null
  br i1 %38, label %39, label %156

; <label>:39:                                     ; preds = %37
  %40 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 0, i32* %40, align 8
  br label %156

; <label>:41:                                     ; preds = %32
  %42 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %43 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %42, i32 0, i32 5
  store i32 %3, i32* %43, align 8
  %44 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %45 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %44, i32 0, i32 4
  store i8* %2, i8** %45, align 8
  %46 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %46, align 8
  %48 = call i32 @ferror(%struct._IO_FILE* %47) #9
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %41
  br label %.lr.ph

; <label>:50:                                     ; preds = %144
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %46, align 8
  %52 = call i32 @ferror(%struct._IO_FILE* %51) #9
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %50
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %41
  %54 = icmp ne i32* %0, null
  br i1 %54, label %55, label %56

; <label>:55:                                     ; preds = %._crit_edge
  store i32 -6, i32* %0, align 4
  br label %56

; <label>:56:                                     ; preds = %55, %._crit_edge
  %57 = icmp ne %struct.bzFile* %5, null
  br i1 %57, label %58, label %156

; <label>:58:                                     ; preds = %56
  %59 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -6, i32* %59, align 8
  br label %156

.lr.ph:                                           ; preds = %.lr.ph.preheader, %50
  call void @unroll_loop(i32 44)
  %60 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %61 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %60, i32 0, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %97

; <label>:64:                                     ; preds = %.lr.ph
  %65 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %65, align 8
  %67 = call zeroext i8 @myfeof.123(%struct._IO_FILE* %66)
  %68 = icmp ne i8 %67, 0
  br i1 %68, label %97, label %69

; <label>:69:                                     ; preds = %64
  %70 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 1
  %71 = getelementptr inbounds [5000 x i8], [5000 x i8]* %70, i32 0, i32 0
  %72 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %72, align 8
  %74 = call i64 @fread(i8* %71, i64 1, i64 5000, %struct._IO_FILE* %73)
  %75 = trunc i64 %74 to i32
  %76 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %76, align 8
  %78 = call i32 @ferror(%struct._IO_FILE* %77) #9
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %87

; <label>:80:                                     ; preds = %69
  %81 = icmp ne i32* %0, null
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %80
  store i32 -6, i32* %0, align 4
  br label %83

; <label>:83:                                     ; preds = %82, %80
  %84 = icmp ne %struct.bzFile* %5, null
  br i1 %84, label %85, label %156

; <label>:85:                                     ; preds = %83
  %86 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -6, i32* %86, align 8
  br label %156

; <label>:87:                                     ; preds = %69
  %88 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 2
  store i32 %75, i32* %88, align 8
  %89 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 2
  %90 = load i32, i32* %89, align 8
  %91 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %92 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %91, i32 0, i32 1
  store i32 %90, i32* %92, align 8
  %93 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 1
  %94 = getelementptr inbounds [5000 x i8], [5000 x i8]* %93, i32 0, i32 0
  %95 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %96 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %95, i32 0, i32 0
  store i8* %94, i8** %96, align 8
  br label %97

; <label>:97:                                     ; preds = %87, %64, %.lr.ph
  %98 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %99 = call i32 @BZ2_bzDecompress(%struct.bz_stream* %98)
  switch i32 %99, label %100 [
    i32 0, label %107
    i32 4, label %132
  ]

; <label>:100:                                    ; preds = %97
  %.lcssa = phi i32 [ %99, %97 ]
  %101 = icmp ne i32* %0, null
  br i1 %101, label %102, label %103

; <label>:102:                                    ; preds = %100
  store i32 %.lcssa, i32* %0, align 4
  br label %103

; <label>:103:                                    ; preds = %102, %100
  %104 = icmp ne %struct.bzFile* %5, null
  br i1 %104, label %105, label %156

; <label>:105:                                    ; preds = %103
  %106 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 %.lcssa, i32* %106, align 8
  br label %156

; <label>:107:                                    ; preds = %97
  %108 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %108, align 8
  %110 = call zeroext i8 @myfeof.123(%struct._IO_FILE* %109)
  %111 = zext i8 %110 to i32
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %130

; <label>:113:                                    ; preds = %107
  %114 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %115 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %114, i32 0, i32 1
  %116 = load i32, i32* %115, align 8
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %130

; <label>:118:                                    ; preds = %113
  %119 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %120 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %119, i32 0, i32 5
  %121 = load i32, i32* %120, align 8
  %122 = icmp ugt i32 %121, 0
  br i1 %122, label %123, label %130

; <label>:123:                                    ; preds = %118
  %124 = icmp ne i32* %0, null
  br i1 %124, label %125, label %126

; <label>:125:                                    ; preds = %123
  store i32 -7, i32* %0, align 4
  br label %126

; <label>:126:                                    ; preds = %125, %123
  %127 = icmp ne %struct.bzFile* %5, null
  br i1 %127, label %128, label %156

; <label>:128:                                    ; preds = %126
  %129 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -7, i32* %129, align 8
  br label %156

; <label>:130:                                    ; preds = %118, %113, %107
  %131 = icmp eq i32 %99, 4
  br i1 %131, label %132, label %144

; <label>:132:                                    ; preds = %97, %130
  %133 = icmp ne i32* %0, null
  br i1 %133, label %134, label %135

; <label>:134:                                    ; preds = %132
  store i32 4, i32* %0, align 4
  br label %135

; <label>:135:                                    ; preds = %134, %132
  %136 = icmp ne %struct.bzFile* %5, null
  br i1 %136, label %137, label %139

; <label>:137:                                    ; preds = %135
  %138 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 4, i32* %138, align 8
  br label %139

; <label>:139:                                    ; preds = %137, %135
  %140 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %141 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %140, i32 0, i32 5
  %142 = load i32, i32* %141, align 8
  %143 = sub i32 %3, %142
  br label %156

; <label>:144:                                    ; preds = %130
  %145 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %146 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %145, i32 0, i32 5
  %147 = load i32, i32* %146, align 8
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %50

; <label>:149:                                    ; preds = %144
  %150 = icmp ne i32* %0, null
  br i1 %150, label %151, label %152

; <label>:151:                                    ; preds = %149
  store i32 0, i32* %0, align 4
  br label %152

; <label>:152:                                    ; preds = %151, %149
  %153 = icmp ne %struct.bzFile* %5, null
  br i1 %153, label %154, label %156

; <label>:154:                                    ; preds = %152
  %155 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 0, i32* %155, align 8
  br label %156

; <label>:156:                                    ; preds = %152, %154, %126, %128, %103, %105, %83, %85, %56, %58, %37, %39, %28, %30, %17, %19, %139
  %.0 = phi i32 [ %143, %139 ], [ 0, %19 ], [ 0, %17 ], [ 0, %30 ], [ 0, %28 ], [ 0, %39 ], [ 0, %37 ], [ 0, %58 ], [ 0, %56 ], [ 0, %85 ], [ 0, %83 ], [ 0, %105 ], [ 0, %103 ], [ 0, %128 ], [ 0, %126 ], [ %3, %154 ], [ %3, %152 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @myfeof.123(%struct._IO_FILE*) #0 {
  %2 = call i32 @fgetc(%struct._IO_FILE* %0)
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = call i32 @ungetc(i32 %2, %struct._IO_FILE* %0)
  br label %6

; <label>:6:                                      ; preds = %1, %4
  %.0 = phi i8 [ 0, %4 ], [ 1, %1 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bzReadGetUnused(i32*, i8*, i8**, i32*) #0 {
  %5 = bitcast i8* %1 to %struct.bzFile*
  %6 = icmp eq %struct.bzFile* %5, null
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %4
  %8 = icmp ne i32* %0, null
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %7
  store i32 -2, i32* %0, align 4
  br label %10

; <label>:10:                                     ; preds = %9, %7
  %11 = icmp ne %struct.bzFile* %5, null
  br i1 %11, label %12, label %48

; <label>:12:                                     ; preds = %10
  %13 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -2, i32* %13, align 8
  br label %48

; <label>:14:                                     ; preds = %4
  %15 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  %16 = load i32, i32* %15, align 8
  %17 = icmp ne i32 %16, 4
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %14
  %19 = icmp ne i32* %0, null
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %18
  store i32 -1, i32* %0, align 4
  br label %21

; <label>:21:                                     ; preds = %20, %18
  %22 = icmp ne %struct.bzFile* %5, null
  br i1 %22, label %23, label %48

; <label>:23:                                     ; preds = %21
  %24 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -1, i32* %24, align 8
  br label %48

; <label>:25:                                     ; preds = %14
  %26 = icmp eq i8** %2, null
  %27 = icmp eq i32* %3, null
  %or.cond = or i1 %26, %27
  %28 = icmp ne i32* %0, null
  br i1 %or.cond, label %29, label %35

; <label>:29:                                     ; preds = %25
  br i1 %28, label %30, label %31

; <label>:30:                                     ; preds = %29
  store i32 -2, i32* %0, align 4
  br label %31

; <label>:31:                                     ; preds = %30, %29
  %32 = icmp ne %struct.bzFile* %5, null
  br i1 %32, label %33, label %48

; <label>:33:                                     ; preds = %31
  %34 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 -2, i32* %34, align 8
  br label %48

; <label>:35:                                     ; preds = %25
  br i1 %28, label %36, label %37

; <label>:36:                                     ; preds = %35
  store i32 0, i32* %0, align 4
  br label %37

; <label>:37:                                     ; preds = %36, %35
  %38 = icmp ne %struct.bzFile* %5, null
  br i1 %38, label %39, label %41

; <label>:39:                                     ; preds = %37
  %40 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  store i32 0, i32* %40, align 8
  br label %41

; <label>:41:                                     ; preds = %39, %37
  %42 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %43 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %3, align 4
  %45 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 4
  %46 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %45, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  store i8* %47, i8** %2, align 8
  br label %48

; <label>:48:                                     ; preds = %31, %33, %21, %23, %10, %12, %41
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzBuffToBuffCompress(i8*, i32*, i8*, i32, i32, i32, i32) #0 {
  %8 = alloca %struct.bz_stream, align 8, !track !58
  %9 = icmp eq i8* %0, null
  %10 = icmp eq i32* %1, null
  %or.cond = or i1 %9, %10
  %11 = icmp eq i8* %2, null
  %or.cond1 = or i1 %or.cond, %11
  %12 = icmp slt i32 %4, 1
  %or.cond2 = or i1 %or.cond1, %12
  %13 = icmp sgt i32 %4, 9
  %or.cond3 = or i1 %or.cond2, %13
  %14 = icmp slt i32 %5, 0
  %or.cond4 = or i1 %or.cond3, %14
  %15 = icmp sgt i32 %5, 4
  %or.cond5 = or i1 %or.cond4, %15
  %16 = icmp slt i32 %6, 0
  %or.cond6 = or i1 %or.cond5, %16
  %17 = icmp sgt i32 %6, 250
  %or.cond7 = or i1 %or.cond6, %17
  br i1 %or.cond7, label %42, label %18

; <label>:18:                                     ; preds = %7
  %19 = icmp eq i32 %6, 0
  %spec.select = select i1 %19, i32 30, i32 %6
  %20 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 9
  store i8* (i8*, i32, i32)* null, i8* (i8*, i32, i32)** %20, align 8
  %21 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 10
  store void (i8*, i8*)* null, void (i8*, i8*)** %21, align 8
  %22 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 11
  store i8* null, i8** %22, align 8
  %23 = call i32 @BZ2_bzCompressInit(%struct.bz_stream* %8, i32 %4, i32 %5, i32 %spec.select)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %42, label %25

; <label>:25:                                     ; preds = %18
  %26 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 0
  store i8* %2, i8** %26, align 8
  %27 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 4
  store i8* %0, i8** %27, align 8
  %28 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 1
  store i32 %3, i32* %28, align 8
  %29 = load i32, i32* %1, align 4
  %30 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 5
  store i32 %29, i32* %30, align 8
  %31 = call i32 @BZ2_bzCompress(%struct.bz_stream* %8, i32 2)
  switch i32 %31, label %40 [
    i32 3, label %38
    i32 4, label %32
  ]

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %8, i32 0, i32 5
  %34 = load i32, i32* %33, align 8
  %35 = load i32, i32* %1, align 4
  %36 = sub i32 %35, %34
  store i32 %36, i32* %1, align 4
  %37 = call i32 @BZ2_bzCompressEnd(%struct.bz_stream* %8)
  br label %42

; <label>:38:                                     ; preds = %25
  %39 = call i32 @BZ2_bzCompressEnd(%struct.bz_stream* %8)
  br label %42

; <label>:40:                                     ; preds = %25
  %41 = call i32 @BZ2_bzCompressEnd(%struct.bz_stream* %8)
  br label %42

; <label>:42:                                     ; preds = %18, %7, %40, %38, %32
  %.0 = phi i32 [ -8, %38 ], [ %31, %40 ], [ 0, %32 ], [ -2, %7 ], [ %23, %18 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzBuffToBuffDecompress(i8*, i32*, i8*, i32, i32, i32) #0 {
  %7 = alloca %struct.bz_stream, align 8, !track !59
  %8 = icmp eq i8* %0, null
  %9 = icmp eq i32* %1, null
  %or.cond = or i1 %8, %9
  %10 = icmp eq i8* %2, null
  %or.cond1 = or i1 %or.cond, %10
  %or.cond1.not = xor i1 %or.cond1, true
  %switch = icmp ult i32 %4, 2
  %or.cond3 = and i1 %or.cond1.not, %switch
  br i1 %or.cond3, label %11, label %40

; <label>:11:                                     ; preds = %6
  %12 = icmp slt i32 %5, 0
  %13 = icmp sgt i32 %5, 4
  %or.cond2 = or i1 %12, %13
  br i1 %or.cond2, label %40, label %14

; <label>:14:                                     ; preds = %11
  %15 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 9
  store i8* (i8*, i32, i32)* null, i8* (i8*, i32, i32)** %15, align 8
  %16 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 10
  store void (i8*, i8*)* null, void (i8*, i8*)** %16, align 8
  %17 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 11
  store i8* null, i8** %17, align 8
  %18 = call i32 @BZ2_bzDecompressInit(%struct.bz_stream* %7, i32 %5, i32 %4)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %40, label %20

; <label>:20:                                     ; preds = %14
  %21 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 0
  store i8* %2, i8** %21, align 8
  %22 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 4
  store i8* %0, i8** %22, align 8
  %23 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 1
  store i32 %3, i32* %23, align 8
  %24 = load i32, i32* %1, align 4
  %25 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 5
  store i32 %24, i32* %25, align 8
  %26 = call i32 @BZ2_bzDecompress(%struct.bz_stream* %7)
  switch i32 %26, label %38 [
    i32 0, label %33
    i32 4, label %27
  ]

; <label>:27:                                     ; preds = %20
  %28 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 5
  %29 = load i32, i32* %28, align 8
  %30 = load i32, i32* %1, align 4
  %31 = sub i32 %30, %29
  store i32 %31, i32* %1, align 4
  %32 = call i32 @BZ2_bzDecompressEnd(%struct.bz_stream* %7)
  br label %40

; <label>:33:                                     ; preds = %20
  %34 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %7, i32 0, i32 5
  %35 = load i32, i32* %34, align 8
  %36 = icmp ugt i32 %35, 0
  %37 = call i32 @BZ2_bzDecompressEnd(%struct.bz_stream* %7)
  %. = select i1 %36, i32 -7, i32 -8
  br label %40

; <label>:38:                                     ; preds = %20
  %39 = call i32 @BZ2_bzDecompressEnd(%struct.bz_stream* %7)
  br label %40

; <label>:40:                                     ; preds = %6, %33, %14, %11, %38, %27
  %.0 = phi i32 [ %26, %38 ], [ 0, %27 ], [ -2, %11 ], [ -2, %6 ], [ %18, %14 ], [ %., %33 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @BZ2_bzopen(i8*, i8*) #0 {
  %3 = call i8* @bzopen_or_bzdopen(i8* %0, i32 -1, i8* %1, i32 0)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @bzopen_or_bzdopen(i8*, i32, i8*, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca [5000 x i8], align 16
  %7 = alloca [10 x i8], align 1
  %8 = bitcast [10 x i8]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 10, i1 false)
  %9 = icmp eq i8* %2, null
  br i1 %9, label %84, label %10

; <label>:10:                                     ; preds = %4
  %11 = load i8, i8* %2, align 1
  %12 = icmp ne i8 %11, 0
  br i1 %12, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %10
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %32
  %.0113 = phi i32 [ %.1, %32 ], [ 0, %.lr.ph.preheader ]
  %.0312 = phi i8* [ %33, %32 ], [ %2, %.lr.ph.preheader ]
  %.0611 = phi i32 [ %.2, %32 ], [ 9, %.lr.ph.preheader ]
  %.0810 = phi i32 [ %.19, %32 ], [ 0, %.lr.ph.preheader ]
  %13 = load i8, i8* %.0312, align 1
  %14 = sext i8 %13 to i32
  switch i32 %14, label %17 [
    i32 114, label %32
    i32 119, label %15
    i32 115, label %16
  ]

; <label>:15:                                     ; preds = %.lr.ph
  br label %32

; <label>:16:                                     ; preds = %.lr.ph
  br label %32

; <label>:17:                                     ; preds = %.lr.ph
  %18 = call i16** @__ctype_b_loc() #13
  %19 = load i16*, i16** %18, align 8
  %20 = load i8, i8* %.0312, align 1
  %21 = sext i8 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %19, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 2048
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %32

; <label>:28:                                     ; preds = %17
  %29 = load i8, i8* %.0312, align 1
  %30 = sext i8 %29 to i32
  %31 = sub nsw i32 %30, 48
  br label %32

; <label>:32:                                     ; preds = %17, %28, %.lr.ph, %16, %15
  %.19 = phi i32 [ %.0810, %16 ], [ 1, %15 ], [ 0, %.lr.ph ], [ %.0810, %28 ], [ %.0810, %17 ]
  %.2 = phi i32 [ %.0611, %16 ], [ %.0611, %15 ], [ %.0611, %.lr.ph ], [ %31, %28 ], [ %.0611, %17 ]
  %.1 = phi i32 [ 1, %16 ], [ %.0113, %15 ], [ %.0113, %.lr.ph ], [ %.0113, %28 ], [ %.0113, %17 ]
  %33 = getelementptr inbounds i8, i8* %.0312, i32 1
  %34 = load i8, i8* %33, align 1
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %32
  %.08.lcssa.ph = phi i32 [ %.19, %32 ]
  %.06.lcssa.ph = phi i32 [ %.2, %32 ]
  %.01.lcssa.ph = phi i32 [ %.1, %32 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %10
  %.08.lcssa = phi i32 [ 0, %10 ], [ %.08.lcssa.ph, %._crit_edge.loopexit ]
  %.06.lcssa = phi i32 [ 9, %10 ], [ %.06.lcssa.ph, %._crit_edge.loopexit ]
  %.01.lcssa = phi i32 [ 0, %10 ], [ %.01.lcssa.ph, %._crit_edge.loopexit ]
  %36 = getelementptr inbounds [10 x i8], [10 x i8]* %7, i32 0, i32 0
  %37 = icmp ne i32 %.08.lcssa, 0
  %38 = zext i1 %37 to i64
  %39 = getelementptr [2 x i8], [2 x i8]* @.str.6.126, i32 0, i32 0
  %40 = getelementptr [2 x i8], [2 x i8]* @.str.7.127, i32 0, i32 0
  %41 = select i1 %37, i8* %39, i8* %40
  %42 = call i8* @strcat(i8* %36, i8* %41) #9
  %43 = getelementptr inbounds [10 x i8], [10 x i8]* %7, i32 0, i32 0
  %44 = getelementptr [2 x i8], [2 x i8]* @.str.8.128, i32 0, i32 0
  %45 = call i8* @strcat(i8* %43, i8* %44) #9
  %46 = icmp eq i32 %3, 0
  br i1 %46, label %47, label %61

; <label>:47:                                     ; preds = %._crit_edge
  %48 = icmp eq i8* %0, null
  br i1 %48, label %53, label %49

; <label>:49:                                     ; preds = %47
  %50 = getelementptr [1 x i8], [1 x i8]* @.str.9.129, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %0, i8* %50) #10
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %58

; <label>:53:                                     ; preds = %49, %47
  %54 = icmp ne i32 %.08.lcssa, 0
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %57 = select i1 %54, %struct._IO_FILE* %55, %struct._IO_FILE* %56
  br label %64

; <label>:58:                                     ; preds = %49
  %59 = getelementptr inbounds [10 x i8], [10 x i8]* %7, i32 0, i32 0
  %60 = call %struct._IO_FILE* @fopen64(i8* %0, i8* %59), !track !60
  br label %64

; <label>:61:                                     ; preds = %._crit_edge
  %62 = getelementptr inbounds [10 x i8], [10 x i8]* %7, i32 0, i32 0
  %63 = call %struct._IO_FILE* @fdopen(i32 %1, i8* %62) #9, !track !61
  br label %64

; <label>:64:                                     ; preds = %58, %53, %61
  %.15 = phi %struct._IO_FILE* [ %63, %61 ], [ %60, %58 ], [ %57, %53 ]
  %65 = icmp eq %struct._IO_FILE* %.15, null
  br i1 %65, label %84, label %66

; <label>:66:                                     ; preds = %64
  %67 = icmp ne i32 %.08.lcssa, 0
  br i1 %67, label %68, label %72

; <label>:68:                                     ; preds = %66
  %69 = icmp slt i32 %.06.lcssa, 1
  %spec.select = select i1 %69, i32 1, i32 %.06.lcssa
  %70 = icmp sgt i32 %spec.select, 9
  %.4 = select i1 %70, i32 9, i32 %spec.select
  %71 = call i8* @BZ2_bzWriteOpen(i32* %5, %struct._IO_FILE* %.15, i32 %.4, i32 0, i32 30)
  br label %75

; <label>:72:                                     ; preds = %66
  %73 = getelementptr inbounds [5000 x i8], [5000 x i8]* %6, i32 0, i32 0
  %74 = call i8* @BZ2_bzReadOpen(i32* %5, %struct._IO_FILE* %.15, i32 0, i32 %.01.lcssa, i8* %73, i32 0)
  br label %75

; <label>:75:                                     ; preds = %72, %68
  %.02 = phi i8* [ %71, %68 ], [ %74, %72 ]
  %76 = icmp eq i8* %.02, null
  br i1 %76, label %77, label %84

; <label>:77:                                     ; preds = %75
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %79 = icmp ne %struct._IO_FILE* %.15, %78
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %81 = icmp ne %struct._IO_FILE* %.15, %80
  %or.cond = and i1 %79, %81
  br i1 %or.cond, label %82, label %84

; <label>:82:                                     ; preds = %77
  %83 = call i32 @fclose(%struct._IO_FILE* %.15)
  br label %84

; <label>:84:                                     ; preds = %75, %77, %82, %64, %4
  %.0 = phi i8* [ null, %4 ], [ null, %64 ], [ null, %82 ], [ null, %77 ], [ %.02, %75 ]
  ret i8* %.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #8

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @BZ2_bzdopen(i32, i8*) #0 {
  %3 = call i8* @bzopen_or_bzdopen(i8* null, i32 %0, i8* %1, i32 1)
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzread(i8*, i8*, i32) #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i8* %0 to %struct.bzFile*
  %6 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 4
  br i1 %8, label %15, label %9

; <label>:9:                                      ; preds = %3
  %10 = call i32 @BZ2_bzRead(i32* %4, i8* %0, i8* %1, i32 %2)
  %11 = load i32, i32* %4, align 4
  %12 = icmp eq i32 %11, 0
  %13 = load i32, i32* %4, align 4
  %14 = icmp eq i32 %13, 4
  %or.cond = or i1 %12, %14
  %spec.select = select i1 %or.cond, i32 %10, i32 -1
  ret i32 %spec.select

; <label>:15:                                     ; preds = %3
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzwrite(i8*, i8*, i32) #0 {
  %4 = alloca i32, align 4
  call void @BZ2_bzWrite(i32* %4, i8* %0, i8* %1, i32 %2)
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %. = select i1 %6, i32 %2, i32 -1
  ret i32 %.
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_bzflush(i8*) #0 {
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bzclose(i8*) #0 {
  %2 = alloca i32, align 4
  %3 = icmp eq i8* %0, null
  br i1 %3, label %24, label %4

; <label>:4:                                      ; preds = %1
  %5 = bitcast i8* %0 to %struct.bzFile*
  %6 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %5, i32 0, i32 0
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %8 = bitcast i8* %0 to %struct.bzFile*
  %9 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %8, i32 0, i32 3
  %10 = load i8, i8* %9, align 4
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %4
  call void @BZ2_bzWriteClose(i32* %2, i8* %0, i32 0, i32* null, i32* null)
  %13 = load i32, i32* %2, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %12
  call void @BZ2_bzWriteClose(i32* null, i8* %0, i32 1, i32* null, i32* null)
  br label %17

; <label>:16:                                     ; preds = %4
  call void @BZ2_bzReadClose(i32* %2, i8* %0)
  br label %17

; <label>:17:                                     ; preds = %12, %15, %16
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %19 = icmp ne %struct._IO_FILE* %7, %18
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %21 = icmp ne %struct._IO_FILE* %7, %20
  %or.cond = and i1 %19, %21
  br i1 %or.cond, label %22, label %24

; <label>:22:                                     ; preds = %17
  %23 = call i32 @fclose(%struct._IO_FILE* %7)
  br label %24

; <label>:24:                                     ; preds = %1, %22, %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @BZ2_bzerror(i8*, i32*) #0 {
  %3 = bitcast i8* %0 to %struct.bzFile*
  %4 = getelementptr inbounds %struct.bzFile, %struct.bzFile* %3, i32 0, i32 5
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  %spec.select = select i1 %6, i32 0, i32 %5
  store i32 %spec.select, i32* %1, align 4
  %7 = mul nsw i32 %spec.select, -1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [16 x i8*], [16 x i8*]* @bzerrorstrings, i64 0, i64 %8
  %10 = load i8*, i8** %9, align 8
  ret i8* %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_bsInitWrite(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 25
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 24
  store i32 0, i32* %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_compressBlock(%struct.EState*, i8 zeroext) #0 {
  %3 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %46

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %8 = load i32, i32* %7, align 8
  %9 = xor i32 %8, -1
  %10 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 27
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 %12, 1
  %14 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 27
  %15 = load i32, i32* %14, align 4
  %16 = lshr i32 %15, 31
  %17 = or i32 %13, %16
  %18 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 27
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 27
  %22 = load i32, i32* %21, align 4
  %23 = xor i32 %22, %20
  store i32 %23, i32* %21, align 4
  %24 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 29
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %25, 1
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %6
  %28 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  store i32 0, i32* %28, align 4
  br label %29

; <label>:29:                                     ; preds = %27, %6
  %30 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %31 = load i32, i32* %30, align 8
  %32 = icmp sge i32 %31, 2
  br i1 %32, label %33, label %45

; <label>:33:                                     ; preds = %29
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %35 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 29
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 27
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr [62 x i8], [62 x i8]* @.str.147, i32 0, i32 0
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* %43, i32 %36, i32 %38, i32 %40, i32 %42)
  br label %45

; <label>:45:                                     ; preds = %33, %29
  call void @BZ2_blockSort(%struct.EState* %0)
  br label %46

; <label>:46:                                     ; preds = %45, %2
  %47 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 5
  %48 = load i32*, i32** %47, align 8
  %49 = bitcast i32* %48 to i8*
  %50 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %51 = load i32, i32* %50, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  %54 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 11
  store i8* %53, i8** %54, align 8
  %55 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 29
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %63

; <label>:58:                                     ; preds = %46
  call void @BZ2_bsInitWrite(%struct.EState* %0)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 66)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 90)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 104)
  %59 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 30
  %60 = load i32, i32* %59, align 8
  %61 = add nsw i32 48, %60
  %62 = trunc i32 %61 to i8
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext %62)
  br label %63

; <label>:63:                                     ; preds = %58, %46
  %64 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %65 = load i32, i32* %64, align 4
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %72

; <label>:67:                                     ; preds = %63
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 49)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 65)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 89)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 38)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 83)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 89)
  %68 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 26
  %69 = load i32, i32* %68, align 8
  call void @bsPutUInt32(%struct.EState* %0, i32 %69)
  call void @bsW(%struct.EState* %0, i32 1, i32 0)
  %70 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 7
  %71 = load i32, i32* %70, align 8
  call void @bsW(%struct.EState* %0, i32 24, i32 %71)
  call void @generateMTFValues(%struct.EState* %0)
  call void @sendMTFValues(%struct.EState* %0)
  br label %72

; <label>:72:                                     ; preds = %67, %63
  %73 = icmp ne i8 %1, 0
  br i1 %73, label %74, label %87

; <label>:74:                                     ; preds = %72
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 23)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 114)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 69)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 56)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext 80)
  call void @bsPutUChar(%struct.EState* %0, i8 zeroext -112)
  %75 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 27
  %76 = load i32, i32* %75, align 4
  call void @bsPutUInt32(%struct.EState* %0, i32 %76)
  %77 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %78 = load i32, i32* %77, align 8
  %79 = icmp sge i32 %78, 2
  br i1 %79, label %80, label %86

; <label>:80:                                     ; preds = %74
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %82 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 27
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr [36 x i8], [36 x i8]* @.str.1.148, i32 0, i32 0
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %81, i8* %84, i32 %83)
  br label %86

; <label>:86:                                     ; preds = %80, %74
  call void @bsFinishWrite(%struct.EState* %0)
  br label %87

; <label>:87:                                     ; preds = %86, %72
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @bsPutUChar(%struct.EState*, i8 zeroext) #0 {
  %3 = zext i8 %1 to i32
  call void @bsW(%struct.EState* %0, i32 8, i32 %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @bsPutUInt32(%struct.EState*, i32) #0 {
  %3 = lshr i32 %1, 24
  %4 = zext i32 %3 to i64
  %5 = and i64 %4, 255
  %6 = trunc i64 %5 to i32
  call void @bsW(%struct.EState* %0, i32 8, i32 %6)
  %7 = lshr i32 %1, 16
  %8 = zext i32 %7 to i64
  %9 = and i64 %8, 255
  %10 = trunc i64 %9 to i32
  call void @bsW(%struct.EState* %0, i32 8, i32 %10)
  %11 = lshr i32 %1, 8
  %12 = zext i32 %11 to i64
  %13 = and i64 %12, 255
  %14 = trunc i64 %13 to i32
  call void @bsW(%struct.EState* %0, i32 8, i32 %14)
  %15 = zext i32 %1 to i64
  %16 = and i64 %15, 255
  %17 = trunc i64 %16 to i32
  call void @bsW(%struct.EState* %0, i32 8, i32 %17)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @bsW(%struct.EState*, i32, i32) #0 {
  %4 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 25
  %5 = load i32, i32* %4, align 4
  %6 = icmp sge i32 %5, 8
  br i1 %6, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 45)
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 24
  %8 = load i32, i32* %7, align 8
  %9 = lshr i32 %8, 24
  %10 = trunc i32 %9 to i8
  %11 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 11
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %12, i64 %15
  store i8 %10, i8* %16, align 1
  %17 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %17, align 4
  %20 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 24
  %21 = load i32, i32* %20, align 8
  %22 = shl i32 %21, 8
  store i32 %22, i32* %20, align 8
  %23 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 25
  %24 = load i32, i32* %23, align 4
  %25 = sub nsw i32 %24, 8
  store i32 %25, i32* %23, align 4
  %26 = load i32, i32* %4, align 4
  %27 = icmp sge i32 %26, 8
  br i1 %27, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %28 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 25
  %29 = load i32, i32* %28, align 4
  %30 = sub nsw i32 32, %29
  %31 = sub nsw i32 %30, %1
  %32 = shl i32 %2, %31
  %33 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 24
  %34 = load i32, i32* %33, align 8
  %35 = or i32 %34, %32
  store i32 %35, i32* %33, align 8
  %36 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 25
  %37 = load i32, i32* %36, align 4
  %38 = add nsw i32 %37, %1
  store i32 %38, i32* %36, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @generateMTFValues(%struct.EState*) #0 {
  %2 = alloca [256 x i8], align 16
  %3 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 8
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 10
  %8 = load i16*, i16** %7, align 8
  call void @makeMaps_e(%struct.EState* %0)
  %9 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 21
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, 1
  %12 = icmp sle i32 0, %11
  br i1 %12, label %.lr.ph31, label %._crit_edge32

.lr.ph31:                                         ; preds = %1
  %13 = add i32 %10, 2
  %14 = zext i32 %13 to i64
  br label %15

; <label>:15:                                     ; preds = %.lr.ph31, %15
  %indvars.iv33 = phi i64 [ 0, %.lr.ph31 ], [ %indvars.iv.next34, %15 ]
  call void @unroll_loop(i32 46)
  %16 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %17 = getelementptr inbounds [258 x i32], [258 x i32]* %16, i64 0, i64 %indvars.iv33
  store i32 0, i32* %17, align 4
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %exitcond2 = icmp ne i64 %indvars.iv.next34, %14
  br i1 %exitcond2, label %15, label %._crit_edge32.loopexit

._crit_edge32.loopexit:                           ; preds = %15
  br label %._crit_edge32

._crit_edge32:                                    ; preds = %._crit_edge32.loopexit, %1
  %18 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 21
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 0, %19
  br i1 %20, label %.lr.ph25.preheader, label %._crit_edge26

.lr.ph25.preheader:                               ; preds = %._crit_edge32
  br label %.lr.ph25

.lr.ph25:                                         ; preds = %.lr.ph25.preheader, %.lr.ph25
  %indvars.iv27 = phi i64 [ %indvars.iv.next28, %.lr.ph25 ], [ 0, %.lr.ph25.preheader ]
  call void @unroll_loop(i32 47)
  %21 = trunc i64 %indvars.iv27 to i32
  %22 = trunc i32 %21 to i8
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %indvars.iv27
  store i8 %22, i8* %23, align 1
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %24 = load i32, i32* %18, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp slt i64 %indvars.iv.next28, %25
  br i1 %26, label %.lr.ph25, label %._crit_edge26.loopexit

._crit_edge26.loopexit:                           ; preds = %.lr.ph25
  br label %._crit_edge26

._crit_edge26:                                    ; preds = %._crit_edge26.loopexit, %._crit_edge32
  %27 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 0, %28
  br i1 %29, label %.lr.ph19.preheader, label %._crit_edge20

.lr.ph19.preheader:                               ; preds = %._crit_edge26
  br label %.lr.ph19

.lr.ph19:                                         ; preds = %.lr.ph19.preheader, %110
  %indvars.iv = phi i64 [ %indvars.iv.next, %110 ], [ 0, %.lr.ph19.preheader ]
  %.0316 = phi i32 [ %.3, %110 ], [ 0, %.lr.ph19.preheader ]
  %.0615 = phi i32 [ %.410, %110 ], [ 0, %.lr.ph19.preheader ]
  call void @unroll_loop(i32 48)
  %30 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv
  %31 = load i32, i32* %30, align 4
  %32 = sub i32 %31, 1
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %38

; <label>:34:                                     ; preds = %.lr.ph19
  %35 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %32, %36
  br label %38

; <label>:38:                                     ; preds = %34, %.lr.ph19
  %.02 = phi i32 [ %37, %34 ], [ %32, %.lr.ph19 ]
  %39 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 23
  %40 = sext i32 %.02 to i64
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [256 x i8], [256 x i8]* %39, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  %47 = load i8, i8* %46, align 16
  %48 = zext i8 %47 to i32
  %49 = zext i8 %45 to i32
  %50 = icmp eq i32 %48, %49
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %38
  %52 = add nsw i32 %.0316, 1
  br label %110

; <label>:53:                                     ; preds = %38
  %54 = icmp sgt i32 %.0316, 0
  br i1 %54, label %55, label %79

; <label>:55:                                     ; preds = %53
  %56 = add nsw i32 %.0316, -1
  br label %57

; <label>:57:                                     ; preds = %55, %76
  %.17 = phi i32 [ %.0615, %55 ], [ %.28, %76 ]
  %.14 = phi i32 [ %56, %55 ], [ %78, %76 ]
  call void @unroll_loop(i32 49)
  %58 = and i32 %.14, 1
  %59 = icmp ne i32 %58, 0
  %60 = sext i32 %.17 to i64
  %61 = getelementptr inbounds i16, i16* %8, i64 %60
  br i1 %59, label %62, label %68

; <label>:62:                                     ; preds = %57
  store i16 1, i16* %61, align 2
  %63 = add nsw i32 %.17, 1
  %64 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %65 = getelementptr inbounds [258 x i32], [258 x i32]* %64, i64 0, i64 1
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %65, align 4
  br label %74

; <label>:68:                                     ; preds = %57
  store i16 0, i16* %61, align 2
  %69 = add nsw i32 %.17, 1
  %70 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %71 = getelementptr inbounds [258 x i32], [258 x i32]* %70, i64 0, i64 0
  %72 = load i32, i32* %71, align 8
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %71, align 8
  br label %74

; <label>:74:                                     ; preds = %68, %62
  %.28 = phi i32 [ %63, %62 ], [ %69, %68 ]
  %75 = icmp slt i32 %.14, 2
  br i1 %75, label %.loopexit1, label %76

; <label>:76:                                     ; preds = %74
  %77 = sub nsw i32 %.14, 2
  %78 = sdiv i32 %77, 2
  br label %57

.loopexit1:                                       ; preds = %74
  %.39.ph = phi i32 [ %.28, %74 ]
  %.25.ph = phi i32 [ 0, %74 ]
  br label %79

; <label>:79:                                     ; preds = %.loopexit1, %53
  %.39 = phi i32 [ %.0615, %53 ], [ %.39.ph, %.loopexit1 ]
  %.25 = phi i32 [ %.0316, %53 ], [ %.25.ph, %.loopexit1 ]
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 1
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  %83 = load i8, i8* %82, align 16
  %84 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 1
  store i8 %83, i8* %84, align 1
  %85 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 1
  %86 = zext i8 %45 to i32
  %87 = zext i8 %81 to i32
  %88 = icmp ne i32 %86, %87
  br i1 %88, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %79
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %.013 = phi i8* [ %89, %.lr.ph ], [ %85, %.lr.ph.preheader ]
  %.01112 = phi i8 [ %90, %.lr.ph ], [ %81, %.lr.ph.preheader ]
  call void @unroll_loop(i32 50)
  %89 = getelementptr inbounds i8, i8* %.013, i32 1
  %90 = load i8, i8* %89, align 1
  store i8 %.01112, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = icmp ne i32 %86, %91
  br i1 %92, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %.011.lcssa.ph = phi i8 [ %90, %.lr.ph ]
  %.0.lcssa.ph = phi i8* [ %89, %.lr.ph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %79
  %.011.lcssa = phi i8 [ %81, %79 ], [ %.011.lcssa.ph, %._crit_edge.loopexit ]
  %.0.lcssa = phi i8* [ %85, %79 ], [ %.0.lcssa.ph, %._crit_edge.loopexit ]
  %93 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  store i8 %.011.lcssa, i8* %93, align 16
  %94 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  %95 = ptrtoint i8* %.0.lcssa to i64
  %96 = ptrtoint i8* %94 to i64
  %97 = sub i64 %95, %96
  %98 = trunc i64 %97 to i32
  %99 = add nsw i32 %98, 1
  %100 = trunc i32 %99 to i16
  %101 = sext i32 %.39 to i64
  %102 = getelementptr inbounds i16, i16* %8, i64 %101
  store i16 %100, i16* %102, align 2
  %103 = add nsw i32 %.39, 1
  %104 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %105 = add nsw i32 %98, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [258 x i32], [258 x i32]* %104, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %107, align 4
  br label %110

; <label>:110:                                    ; preds = %51, %._crit_edge
  %.410 = phi i32 [ %.0615, %51 ], [ %103, %._crit_edge ]
  %.3 = phi i32 [ %52, %51 ], [ %.25, %._crit_edge ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %111 = load i32, i32* %27, align 4
  %112 = sext i32 %111 to i64
  %113 = icmp slt i64 %indvars.iv.next, %112
  br i1 %113, label %.lr.ph19, label %._crit_edge20.loopexit

._crit_edge20.loopexit:                           ; preds = %110
  %.06.lcssa.ph = phi i32 [ %.410, %110 ]
  %.03.lcssa.ph = phi i32 [ %.3, %110 ]
  br label %._crit_edge20

._crit_edge20:                                    ; preds = %._crit_edge20.loopexit, %._crit_edge26
  %.06.lcssa = phi i32 [ 0, %._crit_edge26 ], [ %.06.lcssa.ph, %._crit_edge20.loopexit ]
  %.03.lcssa = phi i32 [ 0, %._crit_edge26 ], [ %.03.lcssa.ph, %._crit_edge20.loopexit ]
  %114 = icmp sgt i32 %.03.lcssa, 0
  br i1 %114, label %115, label %139

; <label>:115:                                    ; preds = %._crit_edge20
  %116 = add nsw i32 %.03.lcssa, -1
  br label %117

; <label>:117:                                    ; preds = %115, %136
  %.5 = phi i32 [ %.06.lcssa, %115 ], [ %.6, %136 ]
  %.4 = phi i32 [ %116, %115 ], [ %138, %136 ]
  call void @unroll_loop(i32 51)
  %118 = and i32 %.4, 1
  %119 = icmp ne i32 %118, 0
  %120 = sext i32 %.5 to i64
  %121 = getelementptr inbounds i16, i16* %8, i64 %120
  br i1 %119, label %122, label %128

; <label>:122:                                    ; preds = %117
  store i16 1, i16* %121, align 2
  %123 = add nsw i32 %.5, 1
  %124 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %125 = getelementptr inbounds [258 x i32], [258 x i32]* %124, i64 0, i64 1
  %126 = load i32, i32* %125, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %125, align 4
  br label %134

; <label>:128:                                    ; preds = %117
  store i16 0, i16* %121, align 2
  %129 = add nsw i32 %.5, 1
  %130 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %131 = getelementptr inbounds [258 x i32], [258 x i32]* %130, i64 0, i64 0
  %132 = load i32, i32* %131, align 8
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %131, align 8
  br label %134

; <label>:134:                                    ; preds = %128, %122
  %.6 = phi i32 [ %123, %122 ], [ %129, %128 ]
  %135 = icmp slt i32 %.4, 2
  br i1 %135, label %.loopexit, label %136

; <label>:136:                                    ; preds = %134
  %137 = sub nsw i32 %.4, 2
  %138 = sdiv i32 %137, 2
  br label %117

.loopexit:                                        ; preds = %134
  %.7.ph = phi i32 [ %.6, %134 ]
  br label %139

; <label>:139:                                    ; preds = %.loopexit, %._crit_edge20
  %.7 = phi i32 [ %.06.lcssa, %._crit_edge20 ], [ %.7.ph, %.loopexit ]
  %140 = trunc i32 %11 to i16
  %141 = sext i32 %.7 to i64
  %142 = getelementptr inbounds i16, i16* %8, i64 %141
  store i16 %140, i16* %142, align 2
  %143 = add nsw i32 %.7, 1
  %144 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %145 = sext i32 %11 to i64
  %146 = getelementptr inbounds [258 x i32], [258 x i32]* %144, i64 0, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %146, align 4
  %149 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  store i32 %143, i32* %149, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sendMTFValues(%struct.EState*) #0 {
  %2 = alloca [6 x i16], align 2, !track !62
  %3 = alloca [6 x i32], align 16
  %4 = alloca [6 x i8], align 1
  %5 = alloca [16 x i8], align 16
  %6 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 10
  %7 = load i16*, i16** %6, align 8
  %8 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %9 = load i32, i32* %8, align 8
  %10 = icmp sge i32 %9, 3
  br i1 %10, label %11, label %21

; <label>:11:                                     ; preds = %1
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %13 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 21
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr [64 x i8], [64 x i8]* @.str.2.149, i32 0, i32 0
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* %19, i32 %14, i32 %16, i32 %18)
  br label %21

; <label>:21:                                     ; preds = %11, %1
  %22 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 21
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %23, 2
  %25 = add i32 %23, 2
  %26 = zext i32 %25 to i64
  br label %27

; <label>:27:                                     ; preds = %21, %._crit_edge248
  %indvars.iv256 = phi i64 [ 0, %21 ], [ %indvars.iv.next257, %._crit_edge248 ]
  call void @unroll_loop(i32 53)
  %28 = icmp slt i32 0, %24
  br i1 %28, label %.lr.ph247.preheader, label %._crit_edge248

.lr.ph247.preheader:                              ; preds = %27
  br label %.lr.ph247

.lr.ph247:                                        ; preds = %.lr.ph247.preheader, %.lr.ph247
  %indvars.iv249 = phi i64 [ %indvars.iv.next250, %.lr.ph247 ], [ 0, %.lr.ph247.preheader ]
  call void @unroll_loop(i32 54)
  %29 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %30 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %29, i64 0, i64 %indvars.iv256
  %31 = getelementptr inbounds [258 x i8], [258 x i8]* %30, i64 0, i64 %indvars.iv249
  store i8 15, i8* %31, align 1
  %indvars.iv.next250 = add nuw nsw i64 %indvars.iv249, 1
  %exitcond34 = icmp ne i64 %indvars.iv.next250, %26
  br i1 %exitcond34, label %.lr.ph247, label %._crit_edge248.loopexit

._crit_edge248.loopexit:                          ; preds = %.lr.ph247
  br label %._crit_edge248

._crit_edge248:                                   ; preds = %._crit_edge248.loopexit, %27
  %indvars.iv.next257 = add nuw nsw i64 %indvars.iv256, 1
  %exitcond258 = icmp ne i64 %indvars.iv.next257, 6
  br i1 %exitcond258, label %27, label %32

; <label>:32:                                     ; preds = %._crit_edge248
  %33 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %34 = load i32, i32* %33, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %37, label %36

; <label>:36:                                     ; preds = %32
  call void @BZ2_bz__AssertH__fail(i32 3001)
  br label %37

; <label>:37:                                     ; preds = %36, %32
  %38 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 200
  br i1 %40, label %53, label %41

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %43 = load i32, i32* %42, align 4
  %44 = icmp slt i32 %43, 600
  br i1 %44, label %53, label %45

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %47 = load i32, i32* %46, align 4
  %48 = icmp slt i32 %47, 1200
  br i1 %48, label %53, label %49

; <label>:49:                                     ; preds = %45
  %50 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %51, 2400
  %. = select i1 %52, i32 5, i32 6
  br label %53

; <label>:53:                                     ; preds = %41, %45, %49, %37
  %.346 = phi i32 [ 2, %37 ], [ 3, %41 ], [ %., %49 ], [ 4, %45 ]
  %54 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %23, 2
  %57 = zext i32 %.346 to i64
  %58 = sext i32 %.346 to i64
  %59 = zext i32 %.346 to i64
  %60 = zext i32 %56 to i64
  br label %61

; <label>:61:                                     ; preds = %53, %._crit_edge235
  %indvars.iv243 = phi i64 [ %57, %53 ], [ %indvars.iv.next244, %._crit_edge235 ]
  %.022242 = phi i32 [ 0, %53 ], [ %123, %._crit_edge235 ]
  %.050240 = phi i32 [ %55, %53 ], [ %124, %._crit_edge235 ]
  call void @unroll_loop(i32 55)
  %62 = trunc i64 %indvars.iv243 to i32
  %63 = sdiv i32 %.050240, %62
  %64 = add i32 %.022242, -1
  %65 = sext i32 %64 to i64
  %66 = sub nsw i32 %24, 1
  %67 = sext i32 %66 to i64
  call void @unroll_loop(i32 56)
  %68 = icmp slt i32 0, %63
  %69 = icmp slt i64 %65, %67
  %or.cond827 = and i1 %68, %69
  br i1 %or.cond827, label %.lr.ph31, label %.critedge

.lr.ph31:                                         ; preds = %61
  br label %70

; <label>:70:                                     ; preds = %.lr.ph31, %70
  %.04729 = phi i32 [ 0, %.lr.ph31 ], [ %74, %70 ]
  %indvars.iv22928 = phi i64 [ %65, %.lr.ph31 ], [ %indvars.iv.next230, %70 ]
  %indvars.iv.next230 = add nsw i64 %indvars.iv22928, 1
  %71 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %72 = getelementptr inbounds [258 x i32], [258 x i32]* %71, i64 0, i64 %indvars.iv.next230
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %.04729, %73
  call void @unroll_loop(i32 56)
  %75 = icmp slt i32 %74, %63
  %76 = icmp slt i64 %indvars.iv.next230, %67
  %or.cond8 = and i1 %75, %76
  br i1 %or.cond8, label %70, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %70
  %split = phi i32 [ %74, %70 ]
  %split32 = phi i64 [ %indvars.iv.next230, %70 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge, %61
  %.047.lcssa = phi i32 [ %split, %..critedge_crit_edge ], [ 0, %61 ]
  %.025.lcssa.wide = phi i64 [ %split32, %..critedge_crit_edge ], [ %65, %61 ]
  %77 = trunc i64 %.025.lcssa.wide to i32
  %78 = icmp sgt i32 %77, %.022242
  %79 = icmp ne i64 %indvars.iv243, %59
  %or.cond = and i1 %78, %79
  %80 = icmp ne i64 %indvars.iv243, 1
  %or.cond1 = and i1 %or.cond, %80
  br i1 %or.cond1, label %81, label %92

; <label>:81:                                     ; preds = %.critedge
  %82 = sub nuw nsw i64 %58, %indvars.iv243
  %83 = trunc i64 %82 to i32
  %.urem = urem i32 %83, 2
  %84 = icmp eq i32 %.urem, 1
  br i1 %84, label %85, label %92

; <label>:85:                                     ; preds = %81
  %86 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 32
  %87 = sext i32 %77 to i64
  %88 = getelementptr inbounds [258 x i32], [258 x i32]* %86, i64 0, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = sub nsw i32 %.047.lcssa, %89
  %91 = add nsw i32 %77, -1
  br label %92

; <label>:92:                                     ; preds = %85, %81, %.critedge
  %.148 = phi i32 [ %90, %85 ], [ %.047.lcssa, %81 ], [ %.047.lcssa, %.critedge ]
  %.126 = phi i32 [ %91, %85 ], [ %77, %81 ], [ %77, %.critedge ]
  %93 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %94 = load i32, i32* %93, align 8
  %95 = icmp sge i32 %94, 3
  br i1 %95, label %96, label %109

; <label>:96:                                     ; preds = %92
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %98 = sitofp i32 %.148 to float
  %99 = fpext float %98 to double
  %100 = fmul double 1.000000e+02, %99
  %101 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %102 = load i32, i32* %101, align 4
  %103 = sitofp i32 %102 to float
  %104 = fpext float %103 to double
  %105 = fdiv double %100, %104
  %106 = trunc i64 %indvars.iv243 to i32
  %107 = getelementptr [59 x i8], [59 x i8]* @.str.3.150, i32 0, i32 0
  %108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* %107, i32 %106, i32 %.022242, i32 %.126, i32 %.148, double %105)
  br label %109

; <label>:109:                                    ; preds = %96, %92
  %110 = icmp slt i32 0, %24
  br i1 %110, label %.lr.ph234, label %._crit_edge235

.lr.ph234:                                        ; preds = %109
  %111 = sext i32 %.126 to i64
  %112 = sext i32 %.022242 to i64
  br label %113

; <label>:113:                                    ; preds = %.lr.ph234, %122
  %indvars.iv236 = phi i64 [ 0, %.lr.ph234 ], [ %indvars.iv.next237, %122 ]
  call void @unroll_loop(i32 57)
  %114 = icmp sge i64 %indvars.iv236, %112
  %115 = icmp sle i64 %indvars.iv236, %111
  %or.cond2 = and i1 %114, %115
  %116 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %117 = sub nsw i64 %indvars.iv243, 1
  %118 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %116, i64 0, i64 %117
  %119 = getelementptr inbounds [258 x i8], [258 x i8]* %118, i64 0, i64 %indvars.iv236
  br i1 %or.cond2, label %120, label %121

; <label>:120:                                    ; preds = %113
  store i8 0, i8* %119, align 1
  br label %122

; <label>:121:                                    ; preds = %113
  store i8 15, i8* %119, align 1
  br label %122

; <label>:122:                                    ; preds = %120, %121
  %indvars.iv.next237 = add nuw nsw i64 %indvars.iv236, 1
  %exitcond33 = icmp ne i64 %indvars.iv.next237, %60
  br i1 %exitcond33, label %113, label %._crit_edge235.loopexit

._crit_edge235.loopexit:                          ; preds = %122
  br label %._crit_edge235

._crit_edge235:                                   ; preds = %._crit_edge235.loopexit, %109
  %indvars.iv.next244 = add nsw i64 %indvars.iv243, -1
  %123 = add nsw i32 %.126, 1
  %124 = sub nsw i32 %.050240, %.148
  %125 = icmp sgt i64 %indvars.iv.next244, 0
  br i1 %125, label %61, label %126

; <label>:126:                                    ; preds = %._crit_edge235
  %127 = add i32 %23, 2
  %128 = zext i32 %127 to i64
  %129 = zext i32 %127 to i64
  br label %130

; <label>:130:                                    ; preds = %126, %1968
  %.034227 = phi i32 [ 0, %126 ], [ %1969, %1968 ]
  call void @unroll_loop(i32 58)
  br label %131

; <label>:131:                                    ; preds = %130, %131
  %indvars.iv153 = phi i64 [ 0, %130 ], [ %indvars.iv.next154, %131 ]
  %132 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 %indvars.iv153
  store i32 0, i32* %132, align 4
  %indvars.iv.next154 = add nuw nsw i64 %indvars.iv153, 1
  %exitcond16 = icmp ne i64 %indvars.iv.next154, %57
  br i1 %exitcond16, label %131, label %.preheader7

.preheader7:                                      ; preds = %131
  %indvars.iv166.ph = phi i64 [ 0, %131 ]
  br label %133

; <label>:133:                                    ; preds = %.preheader7, %._crit_edge160
  %indvars.iv166 = phi i64 [ %indvars.iv.next167, %._crit_edge160 ], [ %indvars.iv166.ph, %.preheader7 ]
  call void @unroll_loop(i32 59)
  %134 = icmp slt i32 0, %24
  br i1 %134, label %.lr.ph159.preheader, label %._crit_edge160

.lr.ph159.preheader:                              ; preds = %133
  br label %.lr.ph159

.lr.ph159:                                        ; preds = %.lr.ph159.preheader, %.lr.ph159
  %indvars.iv161 = phi i64 [ %indvars.iv.next162, %.lr.ph159 ], [ 0, %.lr.ph159.preheader ]
  call void @unroll_loop(i32 60)
  %135 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %136 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %135, i64 0, i64 %indvars.iv166
  %137 = getelementptr inbounds [258 x i32], [258 x i32]* %136, i64 0, i64 %indvars.iv161
  store i32 0, i32* %137, align 4
  %indvars.iv.next162 = add nuw nsw i64 %indvars.iv161, 1
  %exitcond17 = icmp ne i64 %indvars.iv.next162, %128
  br i1 %exitcond17, label %.lr.ph159, label %._crit_edge160.loopexit

._crit_edge160.loopexit:                          ; preds = %.lr.ph159
  br label %._crit_edge160

._crit_edge160:                                   ; preds = %._crit_edge160.loopexit, %133
  %indvars.iv.next167 = add nuw nsw i64 %indvars.iv166, 1
  %exitcond18 = icmp ne i64 %indvars.iv.next167, %57
  br i1 %exitcond18, label %133, label %138

; <label>:138:                                    ; preds = %._crit_edge160
  %139 = icmp eq i32 %.346, 6
  %140 = icmp slt i32 0, %24
  %or.cond4 = and i1 %139, %140
  br i1 %or.cond4, label %.lr.ph172.preheader, label %._crit_edge173

.lr.ph172.preheader:                              ; preds = %138
  br label %.lr.ph172

.lr.ph172:                                        ; preds = %.lr.ph172.preheader, %.lr.ph172
  %indvars.iv174 = phi i64 [ %indvars.iv.next175, %.lr.ph172 ], [ 0, %.lr.ph172.preheader ]
  call void @unroll_loop(i32 61)
  %141 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %142 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %141, i64 0, i64 1
  %143 = getelementptr inbounds [258 x i8], [258 x i8]* %142, i64 0, i64 %indvars.iv174
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = shl i32 %145, 16
  %147 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %148 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %147, i64 0, i64 0
  %149 = getelementptr inbounds [258 x i8], [258 x i8]* %148, i64 0, i64 %indvars.iv174
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = or i32 %146, %151
  %153 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %154 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %153, i64 0, i64 %indvars.iv174
  %155 = getelementptr inbounds [4 x i32], [4 x i32]* %154, i64 0, i64 0
  store i32 %152, i32* %155, align 8
  %156 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %157 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %156, i64 0, i64 3
  %158 = getelementptr inbounds [258 x i8], [258 x i8]* %157, i64 0, i64 %indvars.iv174
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = shl i32 %160, 16
  %162 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %163 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %162, i64 0, i64 2
  %164 = getelementptr inbounds [258 x i8], [258 x i8]* %163, i64 0, i64 %indvars.iv174
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = or i32 %161, %166
  %168 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %169 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %168, i64 0, i64 %indvars.iv174
  %170 = getelementptr inbounds [4 x i32], [4 x i32]* %169, i64 0, i64 1
  store i32 %167, i32* %170, align 4
  %171 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %172 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %171, i64 0, i64 5
  %173 = getelementptr inbounds [258 x i8], [258 x i8]* %172, i64 0, i64 %indvars.iv174
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = shl i32 %175, 16
  %177 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %178 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %177, i64 0, i64 4
  %179 = getelementptr inbounds [258 x i8], [258 x i8]* %178, i64 0, i64 %indvars.iv174
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = or i32 %176, %181
  %183 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %184 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %183, i64 0, i64 %indvars.iv174
  %185 = getelementptr inbounds [4 x i32], [4 x i32]* %184, i64 0, i64 2
  store i32 %182, i32* %185, align 8
  %indvars.iv.next175 = add nuw nsw i64 %indvars.iv174, 1
  %exitcond19 = icmp ne i64 %indvars.iv.next175, %129
  br i1 %exitcond19, label %.lr.ph172, label %._crit_edge173.loopexit

._crit_edge173.loopexit:                          ; preds = %.lr.ph172
  br label %._crit_edge173

._crit_edge173:                                   ; preds = %._crit_edge173.loopexit, %138
  %186 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %187 = load i32, i32* %186, align 4
  %188 = icmp sge i32 0, %187
  br i1 %188, label %1940, label %.lr.ph211.preheader

.lr.ph211.preheader:                              ; preds = %._crit_edge173
  br label %.lr.ph211

._crit_edge212:                                   ; preds = %._crit_edge204
  %split213.wide = phi i64 [ %indvars.iv.next216, %._crit_edge204 ]
  %split214 = phi i32 [ %1359, %._crit_edge204 ]
  %189 = trunc i64 %split213.wide to i32
  br label %1940

.lr.ph211:                                        ; preds = %.lr.ph211.preheader, %._crit_edge204
  %indvars.iv215 = phi i64 [ %indvars.iv.next216, %._crit_edge204 ], [ 0, %.lr.ph211.preheader ]
  %.123209 = phi i32 [ %1937, %._crit_edge204 ], [ 0, %.lr.ph211.preheader ]
  %.029208 = phi i32 [ %1359, %._crit_edge204 ], [ 0, %.lr.ph211.preheader ]
  call void @unroll_loop(i32 62)
  %190 = add nsw i32 %.123209, 50
  %191 = sub nsw i32 %190, 1
  %192 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %193 = load i32, i32* %192, align 4
  %194 = icmp sge i32 %191, %193
  br i1 %194, label %195, label %199

; <label>:195:                                    ; preds = %.lr.ph211
  %196 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %197 = load i32, i32* %196, align 4
  %198 = sub nsw i32 %197, 1
  br label %199

; <label>:199:                                    ; preds = %195, %.lr.ph211
  %.227 = phi i32 [ %198, %195 ], [ %191, %.lr.ph211 ]
  br label %200

; <label>:200:                                    ; preds = %199, %200
  %indvars.iv179 = phi i64 [ 0, %199 ], [ %indvars.iv.next180, %200 ]
  call void @unroll_loop(i32 63)
  %201 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 %indvars.iv179
  store i16 0, i16* %201, align 2
  %indvars.iv.next180 = add nuw nsw i64 %indvars.iv179, 1
  %exitcond20 = icmp ne i64 %indvars.iv.next180, %57
  br i1 %exitcond20, label %200, label %202

; <label>:202:                                    ; preds = %200
  %203 = icmp eq i32 %.346, 6
  br i1 %203, label %204, label %1326

; <label>:204:                                    ; preds = %202
  %205 = sub nsw i32 %.227, %.123209
  %206 = add nsw i32 %205, 1
  %207 = icmp eq i32 50, %206
  br i1 %207, label %208, label %1326

; <label>:208:                                    ; preds = %204
  %209 = sext i32 %.123209 to i64
  %210 = getelementptr inbounds i16, i16* %7, i64 %209
  %211 = load i16, i16* %210, align 2
  %212 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %213 = zext i16 %211 to i64
  %214 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %212, i64 0, i64 %213
  %215 = getelementptr inbounds [4 x i32], [4 x i32]* %214, i64 0, i64 0
  %216 = load i32, i32* %215, align 8
  %217 = add i32 0, %216
  %218 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %219 = zext i16 %211 to i64
  %220 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %218, i64 0, i64 %219
  %221 = getelementptr inbounds [4 x i32], [4 x i32]* %220, i64 0, i64 1
  %222 = load i32, i32* %221, align 4
  %223 = add i32 0, %222
  %224 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %225 = zext i16 %211 to i64
  %226 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %224, i64 0, i64 %225
  %227 = getelementptr inbounds [4 x i32], [4 x i32]* %226, i64 0, i64 2
  %228 = load i32, i32* %227, align 8
  %229 = add i32 0, %228
  %230 = add nsw i32 %.123209, 1
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i16, i16* %7, i64 %231
  %233 = load i16, i16* %232, align 2
  %234 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %235 = zext i16 %233 to i64
  %236 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %234, i64 0, i64 %235
  %237 = getelementptr inbounds [4 x i32], [4 x i32]* %236, i64 0, i64 0
  %238 = load i32, i32* %237, align 8
  %239 = add i32 %217, %238
  %240 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %241 = zext i16 %233 to i64
  %242 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %240, i64 0, i64 %241
  %243 = getelementptr inbounds [4 x i32], [4 x i32]* %242, i64 0, i64 1
  %244 = load i32, i32* %243, align 4
  %245 = add i32 %223, %244
  %246 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %247 = zext i16 %233 to i64
  %248 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %246, i64 0, i64 %247
  %249 = getelementptr inbounds [4 x i32], [4 x i32]* %248, i64 0, i64 2
  %250 = load i32, i32* %249, align 8
  %251 = add i32 %229, %250
  %252 = add nsw i32 %.123209, 2
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i16, i16* %7, i64 %253
  %255 = load i16, i16* %254, align 2
  %256 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %257 = zext i16 %255 to i64
  %258 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %256, i64 0, i64 %257
  %259 = getelementptr inbounds [4 x i32], [4 x i32]* %258, i64 0, i64 0
  %260 = load i32, i32* %259, align 8
  %261 = add i32 %239, %260
  %262 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %263 = zext i16 %255 to i64
  %264 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %262, i64 0, i64 %263
  %265 = getelementptr inbounds [4 x i32], [4 x i32]* %264, i64 0, i64 1
  %266 = load i32, i32* %265, align 4
  %267 = add i32 %245, %266
  %268 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %269 = zext i16 %255 to i64
  %270 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %268, i64 0, i64 %269
  %271 = getelementptr inbounds [4 x i32], [4 x i32]* %270, i64 0, i64 2
  %272 = load i32, i32* %271, align 8
  %273 = add i32 %251, %272
  %274 = add nsw i32 %.123209, 3
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i16, i16* %7, i64 %275
  %277 = load i16, i16* %276, align 2
  %278 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %279 = zext i16 %277 to i64
  %280 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %278, i64 0, i64 %279
  %281 = getelementptr inbounds [4 x i32], [4 x i32]* %280, i64 0, i64 0
  %282 = load i32, i32* %281, align 8
  %283 = add i32 %261, %282
  %284 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %285 = zext i16 %277 to i64
  %286 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %284, i64 0, i64 %285
  %287 = getelementptr inbounds [4 x i32], [4 x i32]* %286, i64 0, i64 1
  %288 = load i32, i32* %287, align 4
  %289 = add i32 %267, %288
  %290 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %291 = zext i16 %277 to i64
  %292 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %290, i64 0, i64 %291
  %293 = getelementptr inbounds [4 x i32], [4 x i32]* %292, i64 0, i64 2
  %294 = load i32, i32* %293, align 8
  %295 = add i32 %273, %294
  %296 = add nsw i32 %.123209, 4
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i16, i16* %7, i64 %297
  %299 = load i16, i16* %298, align 2
  %300 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %301 = zext i16 %299 to i64
  %302 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %300, i64 0, i64 %301
  %303 = getelementptr inbounds [4 x i32], [4 x i32]* %302, i64 0, i64 0
  %304 = load i32, i32* %303, align 8
  %305 = add i32 %283, %304
  %306 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %307 = zext i16 %299 to i64
  %308 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %306, i64 0, i64 %307
  %309 = getelementptr inbounds [4 x i32], [4 x i32]* %308, i64 0, i64 1
  %310 = load i32, i32* %309, align 4
  %311 = add i32 %289, %310
  %312 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %313 = zext i16 %299 to i64
  %314 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %312, i64 0, i64 %313
  %315 = getelementptr inbounds [4 x i32], [4 x i32]* %314, i64 0, i64 2
  %316 = load i32, i32* %315, align 8
  %317 = add i32 %295, %316
  %318 = add nsw i32 %.123209, 5
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds i16, i16* %7, i64 %319
  %321 = load i16, i16* %320, align 2
  %322 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %323 = zext i16 %321 to i64
  %324 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %322, i64 0, i64 %323
  %325 = getelementptr inbounds [4 x i32], [4 x i32]* %324, i64 0, i64 0
  %326 = load i32, i32* %325, align 8
  %327 = add i32 %305, %326
  %328 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %329 = zext i16 %321 to i64
  %330 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %328, i64 0, i64 %329
  %331 = getelementptr inbounds [4 x i32], [4 x i32]* %330, i64 0, i64 1
  %332 = load i32, i32* %331, align 4
  %333 = add i32 %311, %332
  %334 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %335 = zext i16 %321 to i64
  %336 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %334, i64 0, i64 %335
  %337 = getelementptr inbounds [4 x i32], [4 x i32]* %336, i64 0, i64 2
  %338 = load i32, i32* %337, align 8
  %339 = add i32 %317, %338
  %340 = add nsw i32 %.123209, 6
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i16, i16* %7, i64 %341
  %343 = load i16, i16* %342, align 2
  %344 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %345 = zext i16 %343 to i64
  %346 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %344, i64 0, i64 %345
  %347 = getelementptr inbounds [4 x i32], [4 x i32]* %346, i64 0, i64 0
  %348 = load i32, i32* %347, align 8
  %349 = add i32 %327, %348
  %350 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %351 = zext i16 %343 to i64
  %352 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %350, i64 0, i64 %351
  %353 = getelementptr inbounds [4 x i32], [4 x i32]* %352, i64 0, i64 1
  %354 = load i32, i32* %353, align 4
  %355 = add i32 %333, %354
  %356 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %357 = zext i16 %343 to i64
  %358 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %356, i64 0, i64 %357
  %359 = getelementptr inbounds [4 x i32], [4 x i32]* %358, i64 0, i64 2
  %360 = load i32, i32* %359, align 8
  %361 = add i32 %339, %360
  %362 = add nsw i32 %.123209, 7
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i16, i16* %7, i64 %363
  %365 = load i16, i16* %364, align 2
  %366 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %367 = zext i16 %365 to i64
  %368 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %366, i64 0, i64 %367
  %369 = getelementptr inbounds [4 x i32], [4 x i32]* %368, i64 0, i64 0
  %370 = load i32, i32* %369, align 8
  %371 = add i32 %349, %370
  %372 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %373 = zext i16 %365 to i64
  %374 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %372, i64 0, i64 %373
  %375 = getelementptr inbounds [4 x i32], [4 x i32]* %374, i64 0, i64 1
  %376 = load i32, i32* %375, align 4
  %377 = add i32 %355, %376
  %378 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %379 = zext i16 %365 to i64
  %380 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %378, i64 0, i64 %379
  %381 = getelementptr inbounds [4 x i32], [4 x i32]* %380, i64 0, i64 2
  %382 = load i32, i32* %381, align 8
  %383 = add i32 %361, %382
  %384 = add nsw i32 %.123209, 8
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i16, i16* %7, i64 %385
  %387 = load i16, i16* %386, align 2
  %388 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %389 = zext i16 %387 to i64
  %390 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %388, i64 0, i64 %389
  %391 = getelementptr inbounds [4 x i32], [4 x i32]* %390, i64 0, i64 0
  %392 = load i32, i32* %391, align 8
  %393 = add i32 %371, %392
  %394 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %395 = zext i16 %387 to i64
  %396 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %394, i64 0, i64 %395
  %397 = getelementptr inbounds [4 x i32], [4 x i32]* %396, i64 0, i64 1
  %398 = load i32, i32* %397, align 4
  %399 = add i32 %377, %398
  %400 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %401 = zext i16 %387 to i64
  %402 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %400, i64 0, i64 %401
  %403 = getelementptr inbounds [4 x i32], [4 x i32]* %402, i64 0, i64 2
  %404 = load i32, i32* %403, align 8
  %405 = add i32 %383, %404
  %406 = add nsw i32 %.123209, 9
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i16, i16* %7, i64 %407
  %409 = load i16, i16* %408, align 2
  %410 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %411 = zext i16 %409 to i64
  %412 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %410, i64 0, i64 %411
  %413 = getelementptr inbounds [4 x i32], [4 x i32]* %412, i64 0, i64 0
  %414 = load i32, i32* %413, align 8
  %415 = add i32 %393, %414
  %416 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %417 = zext i16 %409 to i64
  %418 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %416, i64 0, i64 %417
  %419 = getelementptr inbounds [4 x i32], [4 x i32]* %418, i64 0, i64 1
  %420 = load i32, i32* %419, align 4
  %421 = add i32 %399, %420
  %422 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %423 = zext i16 %409 to i64
  %424 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %422, i64 0, i64 %423
  %425 = getelementptr inbounds [4 x i32], [4 x i32]* %424, i64 0, i64 2
  %426 = load i32, i32* %425, align 8
  %427 = add i32 %405, %426
  %428 = add nsw i32 %.123209, 10
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds i16, i16* %7, i64 %429
  %431 = load i16, i16* %430, align 2
  %432 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %433 = zext i16 %431 to i64
  %434 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %432, i64 0, i64 %433
  %435 = getelementptr inbounds [4 x i32], [4 x i32]* %434, i64 0, i64 0
  %436 = load i32, i32* %435, align 8
  %437 = add i32 %415, %436
  %438 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %439 = zext i16 %431 to i64
  %440 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %438, i64 0, i64 %439
  %441 = getelementptr inbounds [4 x i32], [4 x i32]* %440, i64 0, i64 1
  %442 = load i32, i32* %441, align 4
  %443 = add i32 %421, %442
  %444 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %445 = zext i16 %431 to i64
  %446 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %444, i64 0, i64 %445
  %447 = getelementptr inbounds [4 x i32], [4 x i32]* %446, i64 0, i64 2
  %448 = load i32, i32* %447, align 8
  %449 = add i32 %427, %448
  %450 = add nsw i32 %.123209, 11
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds i16, i16* %7, i64 %451
  %453 = load i16, i16* %452, align 2
  %454 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %455 = zext i16 %453 to i64
  %456 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %454, i64 0, i64 %455
  %457 = getelementptr inbounds [4 x i32], [4 x i32]* %456, i64 0, i64 0
  %458 = load i32, i32* %457, align 8
  %459 = add i32 %437, %458
  %460 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %461 = zext i16 %453 to i64
  %462 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %460, i64 0, i64 %461
  %463 = getelementptr inbounds [4 x i32], [4 x i32]* %462, i64 0, i64 1
  %464 = load i32, i32* %463, align 4
  %465 = add i32 %443, %464
  %466 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %467 = zext i16 %453 to i64
  %468 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %466, i64 0, i64 %467
  %469 = getelementptr inbounds [4 x i32], [4 x i32]* %468, i64 0, i64 2
  %470 = load i32, i32* %469, align 8
  %471 = add i32 %449, %470
  %472 = add nsw i32 %.123209, 12
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %7, i64 %473
  %475 = load i16, i16* %474, align 2
  %476 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %477 = zext i16 %475 to i64
  %478 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %476, i64 0, i64 %477
  %479 = getelementptr inbounds [4 x i32], [4 x i32]* %478, i64 0, i64 0
  %480 = load i32, i32* %479, align 8
  %481 = add i32 %459, %480
  %482 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %483 = zext i16 %475 to i64
  %484 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %482, i64 0, i64 %483
  %485 = getelementptr inbounds [4 x i32], [4 x i32]* %484, i64 0, i64 1
  %486 = load i32, i32* %485, align 4
  %487 = add i32 %465, %486
  %488 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %489 = zext i16 %475 to i64
  %490 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %488, i64 0, i64 %489
  %491 = getelementptr inbounds [4 x i32], [4 x i32]* %490, i64 0, i64 2
  %492 = load i32, i32* %491, align 8
  %493 = add i32 %471, %492
  %494 = add nsw i32 %.123209, 13
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i16, i16* %7, i64 %495
  %497 = load i16, i16* %496, align 2
  %498 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %499 = zext i16 %497 to i64
  %500 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %498, i64 0, i64 %499
  %501 = getelementptr inbounds [4 x i32], [4 x i32]* %500, i64 0, i64 0
  %502 = load i32, i32* %501, align 8
  %503 = add i32 %481, %502
  %504 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %505 = zext i16 %497 to i64
  %506 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %504, i64 0, i64 %505
  %507 = getelementptr inbounds [4 x i32], [4 x i32]* %506, i64 0, i64 1
  %508 = load i32, i32* %507, align 4
  %509 = add i32 %487, %508
  %510 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %511 = zext i16 %497 to i64
  %512 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %510, i64 0, i64 %511
  %513 = getelementptr inbounds [4 x i32], [4 x i32]* %512, i64 0, i64 2
  %514 = load i32, i32* %513, align 8
  %515 = add i32 %493, %514
  %516 = add nsw i32 %.123209, 14
  %517 = sext i32 %516 to i64
  %518 = getelementptr inbounds i16, i16* %7, i64 %517
  %519 = load i16, i16* %518, align 2
  %520 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %521 = zext i16 %519 to i64
  %522 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %520, i64 0, i64 %521
  %523 = getelementptr inbounds [4 x i32], [4 x i32]* %522, i64 0, i64 0
  %524 = load i32, i32* %523, align 8
  %525 = add i32 %503, %524
  %526 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %527 = zext i16 %519 to i64
  %528 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %526, i64 0, i64 %527
  %529 = getelementptr inbounds [4 x i32], [4 x i32]* %528, i64 0, i64 1
  %530 = load i32, i32* %529, align 4
  %531 = add i32 %509, %530
  %532 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %533 = zext i16 %519 to i64
  %534 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %532, i64 0, i64 %533
  %535 = getelementptr inbounds [4 x i32], [4 x i32]* %534, i64 0, i64 2
  %536 = load i32, i32* %535, align 8
  %537 = add i32 %515, %536
  %538 = add nsw i32 %.123209, 15
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds i16, i16* %7, i64 %539
  %541 = load i16, i16* %540, align 2
  %542 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %543 = zext i16 %541 to i64
  %544 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %542, i64 0, i64 %543
  %545 = getelementptr inbounds [4 x i32], [4 x i32]* %544, i64 0, i64 0
  %546 = load i32, i32* %545, align 8
  %547 = add i32 %525, %546
  %548 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %549 = zext i16 %541 to i64
  %550 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %548, i64 0, i64 %549
  %551 = getelementptr inbounds [4 x i32], [4 x i32]* %550, i64 0, i64 1
  %552 = load i32, i32* %551, align 4
  %553 = add i32 %531, %552
  %554 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %555 = zext i16 %541 to i64
  %556 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %554, i64 0, i64 %555
  %557 = getelementptr inbounds [4 x i32], [4 x i32]* %556, i64 0, i64 2
  %558 = load i32, i32* %557, align 8
  %559 = add i32 %537, %558
  %560 = add nsw i32 %.123209, 16
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i16, i16* %7, i64 %561
  %563 = load i16, i16* %562, align 2
  %564 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %565 = zext i16 %563 to i64
  %566 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %564, i64 0, i64 %565
  %567 = getelementptr inbounds [4 x i32], [4 x i32]* %566, i64 0, i64 0
  %568 = load i32, i32* %567, align 8
  %569 = add i32 %547, %568
  %570 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %571 = zext i16 %563 to i64
  %572 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %570, i64 0, i64 %571
  %573 = getelementptr inbounds [4 x i32], [4 x i32]* %572, i64 0, i64 1
  %574 = load i32, i32* %573, align 4
  %575 = add i32 %553, %574
  %576 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %577 = zext i16 %563 to i64
  %578 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %576, i64 0, i64 %577
  %579 = getelementptr inbounds [4 x i32], [4 x i32]* %578, i64 0, i64 2
  %580 = load i32, i32* %579, align 8
  %581 = add i32 %559, %580
  %582 = add nsw i32 %.123209, 17
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds i16, i16* %7, i64 %583
  %585 = load i16, i16* %584, align 2
  %586 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %587 = zext i16 %585 to i64
  %588 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %586, i64 0, i64 %587
  %589 = getelementptr inbounds [4 x i32], [4 x i32]* %588, i64 0, i64 0
  %590 = load i32, i32* %589, align 8
  %591 = add i32 %569, %590
  %592 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %593 = zext i16 %585 to i64
  %594 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %592, i64 0, i64 %593
  %595 = getelementptr inbounds [4 x i32], [4 x i32]* %594, i64 0, i64 1
  %596 = load i32, i32* %595, align 4
  %597 = add i32 %575, %596
  %598 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %599 = zext i16 %585 to i64
  %600 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %598, i64 0, i64 %599
  %601 = getelementptr inbounds [4 x i32], [4 x i32]* %600, i64 0, i64 2
  %602 = load i32, i32* %601, align 8
  %603 = add i32 %581, %602
  %604 = add nsw i32 %.123209, 18
  %605 = sext i32 %604 to i64
  %606 = getelementptr inbounds i16, i16* %7, i64 %605
  %607 = load i16, i16* %606, align 2
  %608 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %609 = zext i16 %607 to i64
  %610 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %608, i64 0, i64 %609
  %611 = getelementptr inbounds [4 x i32], [4 x i32]* %610, i64 0, i64 0
  %612 = load i32, i32* %611, align 8
  %613 = add i32 %591, %612
  %614 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %615 = zext i16 %607 to i64
  %616 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %614, i64 0, i64 %615
  %617 = getelementptr inbounds [4 x i32], [4 x i32]* %616, i64 0, i64 1
  %618 = load i32, i32* %617, align 4
  %619 = add i32 %597, %618
  %620 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %621 = zext i16 %607 to i64
  %622 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %620, i64 0, i64 %621
  %623 = getelementptr inbounds [4 x i32], [4 x i32]* %622, i64 0, i64 2
  %624 = load i32, i32* %623, align 8
  %625 = add i32 %603, %624
  %626 = add nsw i32 %.123209, 19
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds i16, i16* %7, i64 %627
  %629 = load i16, i16* %628, align 2
  %630 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %631 = zext i16 %629 to i64
  %632 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %630, i64 0, i64 %631
  %633 = getelementptr inbounds [4 x i32], [4 x i32]* %632, i64 0, i64 0
  %634 = load i32, i32* %633, align 8
  %635 = add i32 %613, %634
  %636 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %637 = zext i16 %629 to i64
  %638 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %636, i64 0, i64 %637
  %639 = getelementptr inbounds [4 x i32], [4 x i32]* %638, i64 0, i64 1
  %640 = load i32, i32* %639, align 4
  %641 = add i32 %619, %640
  %642 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %643 = zext i16 %629 to i64
  %644 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %642, i64 0, i64 %643
  %645 = getelementptr inbounds [4 x i32], [4 x i32]* %644, i64 0, i64 2
  %646 = load i32, i32* %645, align 8
  %647 = add i32 %625, %646
  %648 = add nsw i32 %.123209, 20
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds i16, i16* %7, i64 %649
  %651 = load i16, i16* %650, align 2
  %652 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %653 = zext i16 %651 to i64
  %654 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %652, i64 0, i64 %653
  %655 = getelementptr inbounds [4 x i32], [4 x i32]* %654, i64 0, i64 0
  %656 = load i32, i32* %655, align 8
  %657 = add i32 %635, %656
  %658 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %659 = zext i16 %651 to i64
  %660 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %658, i64 0, i64 %659
  %661 = getelementptr inbounds [4 x i32], [4 x i32]* %660, i64 0, i64 1
  %662 = load i32, i32* %661, align 4
  %663 = add i32 %641, %662
  %664 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %665 = zext i16 %651 to i64
  %666 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %664, i64 0, i64 %665
  %667 = getelementptr inbounds [4 x i32], [4 x i32]* %666, i64 0, i64 2
  %668 = load i32, i32* %667, align 8
  %669 = add i32 %647, %668
  %670 = add nsw i32 %.123209, 21
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i16, i16* %7, i64 %671
  %673 = load i16, i16* %672, align 2
  %674 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %675 = zext i16 %673 to i64
  %676 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %674, i64 0, i64 %675
  %677 = getelementptr inbounds [4 x i32], [4 x i32]* %676, i64 0, i64 0
  %678 = load i32, i32* %677, align 8
  %679 = add i32 %657, %678
  %680 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %681 = zext i16 %673 to i64
  %682 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %680, i64 0, i64 %681
  %683 = getelementptr inbounds [4 x i32], [4 x i32]* %682, i64 0, i64 1
  %684 = load i32, i32* %683, align 4
  %685 = add i32 %663, %684
  %686 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %687 = zext i16 %673 to i64
  %688 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %686, i64 0, i64 %687
  %689 = getelementptr inbounds [4 x i32], [4 x i32]* %688, i64 0, i64 2
  %690 = load i32, i32* %689, align 8
  %691 = add i32 %669, %690
  %692 = add nsw i32 %.123209, 22
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i16, i16* %7, i64 %693
  %695 = load i16, i16* %694, align 2
  %696 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %697 = zext i16 %695 to i64
  %698 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %696, i64 0, i64 %697
  %699 = getelementptr inbounds [4 x i32], [4 x i32]* %698, i64 0, i64 0
  %700 = load i32, i32* %699, align 8
  %701 = add i32 %679, %700
  %702 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %703 = zext i16 %695 to i64
  %704 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %702, i64 0, i64 %703
  %705 = getelementptr inbounds [4 x i32], [4 x i32]* %704, i64 0, i64 1
  %706 = load i32, i32* %705, align 4
  %707 = add i32 %685, %706
  %708 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %709 = zext i16 %695 to i64
  %710 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %708, i64 0, i64 %709
  %711 = getelementptr inbounds [4 x i32], [4 x i32]* %710, i64 0, i64 2
  %712 = load i32, i32* %711, align 8
  %713 = add i32 %691, %712
  %714 = add nsw i32 %.123209, 23
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds i16, i16* %7, i64 %715
  %717 = load i16, i16* %716, align 2
  %718 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %719 = zext i16 %717 to i64
  %720 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %718, i64 0, i64 %719
  %721 = getelementptr inbounds [4 x i32], [4 x i32]* %720, i64 0, i64 0
  %722 = load i32, i32* %721, align 8
  %723 = add i32 %701, %722
  %724 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %725 = zext i16 %717 to i64
  %726 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %724, i64 0, i64 %725
  %727 = getelementptr inbounds [4 x i32], [4 x i32]* %726, i64 0, i64 1
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %707, %728
  %730 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %731 = zext i16 %717 to i64
  %732 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %730, i64 0, i64 %731
  %733 = getelementptr inbounds [4 x i32], [4 x i32]* %732, i64 0, i64 2
  %734 = load i32, i32* %733, align 8
  %735 = add i32 %713, %734
  %736 = add nsw i32 %.123209, 24
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds i16, i16* %7, i64 %737
  %739 = load i16, i16* %738, align 2
  %740 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %741 = zext i16 %739 to i64
  %742 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %740, i64 0, i64 %741
  %743 = getelementptr inbounds [4 x i32], [4 x i32]* %742, i64 0, i64 0
  %744 = load i32, i32* %743, align 8
  %745 = add i32 %723, %744
  %746 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %747 = zext i16 %739 to i64
  %748 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %746, i64 0, i64 %747
  %749 = getelementptr inbounds [4 x i32], [4 x i32]* %748, i64 0, i64 1
  %750 = load i32, i32* %749, align 4
  %751 = add i32 %729, %750
  %752 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %753 = zext i16 %739 to i64
  %754 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %752, i64 0, i64 %753
  %755 = getelementptr inbounds [4 x i32], [4 x i32]* %754, i64 0, i64 2
  %756 = load i32, i32* %755, align 8
  %757 = add i32 %735, %756
  %758 = add nsw i32 %.123209, 25
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds i16, i16* %7, i64 %759
  %761 = load i16, i16* %760, align 2
  %762 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %763 = zext i16 %761 to i64
  %764 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %762, i64 0, i64 %763
  %765 = getelementptr inbounds [4 x i32], [4 x i32]* %764, i64 0, i64 0
  %766 = load i32, i32* %765, align 8
  %767 = add i32 %745, %766
  %768 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %769 = zext i16 %761 to i64
  %770 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %768, i64 0, i64 %769
  %771 = getelementptr inbounds [4 x i32], [4 x i32]* %770, i64 0, i64 1
  %772 = load i32, i32* %771, align 4
  %773 = add i32 %751, %772
  %774 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %775 = zext i16 %761 to i64
  %776 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %774, i64 0, i64 %775
  %777 = getelementptr inbounds [4 x i32], [4 x i32]* %776, i64 0, i64 2
  %778 = load i32, i32* %777, align 8
  %779 = add i32 %757, %778
  %780 = add nsw i32 %.123209, 26
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i16, i16* %7, i64 %781
  %783 = load i16, i16* %782, align 2
  %784 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %785 = zext i16 %783 to i64
  %786 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %784, i64 0, i64 %785
  %787 = getelementptr inbounds [4 x i32], [4 x i32]* %786, i64 0, i64 0
  %788 = load i32, i32* %787, align 8
  %789 = add i32 %767, %788
  %790 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %791 = zext i16 %783 to i64
  %792 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %790, i64 0, i64 %791
  %793 = getelementptr inbounds [4 x i32], [4 x i32]* %792, i64 0, i64 1
  %794 = load i32, i32* %793, align 4
  %795 = add i32 %773, %794
  %796 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %797 = zext i16 %783 to i64
  %798 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %796, i64 0, i64 %797
  %799 = getelementptr inbounds [4 x i32], [4 x i32]* %798, i64 0, i64 2
  %800 = load i32, i32* %799, align 8
  %801 = add i32 %779, %800
  %802 = add nsw i32 %.123209, 27
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i16, i16* %7, i64 %803
  %805 = load i16, i16* %804, align 2
  %806 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %807 = zext i16 %805 to i64
  %808 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %806, i64 0, i64 %807
  %809 = getelementptr inbounds [4 x i32], [4 x i32]* %808, i64 0, i64 0
  %810 = load i32, i32* %809, align 8
  %811 = add i32 %789, %810
  %812 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %813 = zext i16 %805 to i64
  %814 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %812, i64 0, i64 %813
  %815 = getelementptr inbounds [4 x i32], [4 x i32]* %814, i64 0, i64 1
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %795, %816
  %818 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %819 = zext i16 %805 to i64
  %820 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %818, i64 0, i64 %819
  %821 = getelementptr inbounds [4 x i32], [4 x i32]* %820, i64 0, i64 2
  %822 = load i32, i32* %821, align 8
  %823 = add i32 %801, %822
  %824 = add nsw i32 %.123209, 28
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i16, i16* %7, i64 %825
  %827 = load i16, i16* %826, align 2
  %828 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %829 = zext i16 %827 to i64
  %830 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %828, i64 0, i64 %829
  %831 = getelementptr inbounds [4 x i32], [4 x i32]* %830, i64 0, i64 0
  %832 = load i32, i32* %831, align 8
  %833 = add i32 %811, %832
  %834 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %835 = zext i16 %827 to i64
  %836 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %834, i64 0, i64 %835
  %837 = getelementptr inbounds [4 x i32], [4 x i32]* %836, i64 0, i64 1
  %838 = load i32, i32* %837, align 4
  %839 = add i32 %817, %838
  %840 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %841 = zext i16 %827 to i64
  %842 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %840, i64 0, i64 %841
  %843 = getelementptr inbounds [4 x i32], [4 x i32]* %842, i64 0, i64 2
  %844 = load i32, i32* %843, align 8
  %845 = add i32 %823, %844
  %846 = add nsw i32 %.123209, 29
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i16, i16* %7, i64 %847
  %849 = load i16, i16* %848, align 2
  %850 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %851 = zext i16 %849 to i64
  %852 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %850, i64 0, i64 %851
  %853 = getelementptr inbounds [4 x i32], [4 x i32]* %852, i64 0, i64 0
  %854 = load i32, i32* %853, align 8
  %855 = add i32 %833, %854
  %856 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %857 = zext i16 %849 to i64
  %858 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %856, i64 0, i64 %857
  %859 = getelementptr inbounds [4 x i32], [4 x i32]* %858, i64 0, i64 1
  %860 = load i32, i32* %859, align 4
  %861 = add i32 %839, %860
  %862 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %863 = zext i16 %849 to i64
  %864 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %862, i64 0, i64 %863
  %865 = getelementptr inbounds [4 x i32], [4 x i32]* %864, i64 0, i64 2
  %866 = load i32, i32* %865, align 8
  %867 = add i32 %845, %866
  %868 = add nsw i32 %.123209, 30
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i16, i16* %7, i64 %869
  %871 = load i16, i16* %870, align 2
  %872 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %873 = zext i16 %871 to i64
  %874 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %872, i64 0, i64 %873
  %875 = getelementptr inbounds [4 x i32], [4 x i32]* %874, i64 0, i64 0
  %876 = load i32, i32* %875, align 8
  %877 = add i32 %855, %876
  %878 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %879 = zext i16 %871 to i64
  %880 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %878, i64 0, i64 %879
  %881 = getelementptr inbounds [4 x i32], [4 x i32]* %880, i64 0, i64 1
  %882 = load i32, i32* %881, align 4
  %883 = add i32 %861, %882
  %884 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %885 = zext i16 %871 to i64
  %886 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %884, i64 0, i64 %885
  %887 = getelementptr inbounds [4 x i32], [4 x i32]* %886, i64 0, i64 2
  %888 = load i32, i32* %887, align 8
  %889 = add i32 %867, %888
  %890 = add nsw i32 %.123209, 31
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds i16, i16* %7, i64 %891
  %893 = load i16, i16* %892, align 2
  %894 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %895 = zext i16 %893 to i64
  %896 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %894, i64 0, i64 %895
  %897 = getelementptr inbounds [4 x i32], [4 x i32]* %896, i64 0, i64 0
  %898 = load i32, i32* %897, align 8
  %899 = add i32 %877, %898
  %900 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %901 = zext i16 %893 to i64
  %902 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %900, i64 0, i64 %901
  %903 = getelementptr inbounds [4 x i32], [4 x i32]* %902, i64 0, i64 1
  %904 = load i32, i32* %903, align 4
  %905 = add i32 %883, %904
  %906 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %907 = zext i16 %893 to i64
  %908 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %906, i64 0, i64 %907
  %909 = getelementptr inbounds [4 x i32], [4 x i32]* %908, i64 0, i64 2
  %910 = load i32, i32* %909, align 8
  %911 = add i32 %889, %910
  %912 = add nsw i32 %.123209, 32
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds i16, i16* %7, i64 %913
  %915 = load i16, i16* %914, align 2
  %916 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %917 = zext i16 %915 to i64
  %918 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %916, i64 0, i64 %917
  %919 = getelementptr inbounds [4 x i32], [4 x i32]* %918, i64 0, i64 0
  %920 = load i32, i32* %919, align 8
  %921 = add i32 %899, %920
  %922 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %923 = zext i16 %915 to i64
  %924 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %922, i64 0, i64 %923
  %925 = getelementptr inbounds [4 x i32], [4 x i32]* %924, i64 0, i64 1
  %926 = load i32, i32* %925, align 4
  %927 = add i32 %905, %926
  %928 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %929 = zext i16 %915 to i64
  %930 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %928, i64 0, i64 %929
  %931 = getelementptr inbounds [4 x i32], [4 x i32]* %930, i64 0, i64 2
  %932 = load i32, i32* %931, align 8
  %933 = add i32 %911, %932
  %934 = add nsw i32 %.123209, 33
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i16, i16* %7, i64 %935
  %937 = load i16, i16* %936, align 2
  %938 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %939 = zext i16 %937 to i64
  %940 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %938, i64 0, i64 %939
  %941 = getelementptr inbounds [4 x i32], [4 x i32]* %940, i64 0, i64 0
  %942 = load i32, i32* %941, align 8
  %943 = add i32 %921, %942
  %944 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %945 = zext i16 %937 to i64
  %946 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %944, i64 0, i64 %945
  %947 = getelementptr inbounds [4 x i32], [4 x i32]* %946, i64 0, i64 1
  %948 = load i32, i32* %947, align 4
  %949 = add i32 %927, %948
  %950 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %951 = zext i16 %937 to i64
  %952 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %950, i64 0, i64 %951
  %953 = getelementptr inbounds [4 x i32], [4 x i32]* %952, i64 0, i64 2
  %954 = load i32, i32* %953, align 8
  %955 = add i32 %933, %954
  %956 = add nsw i32 %.123209, 34
  %957 = sext i32 %956 to i64
  %958 = getelementptr inbounds i16, i16* %7, i64 %957
  %959 = load i16, i16* %958, align 2
  %960 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %961 = zext i16 %959 to i64
  %962 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %960, i64 0, i64 %961
  %963 = getelementptr inbounds [4 x i32], [4 x i32]* %962, i64 0, i64 0
  %964 = load i32, i32* %963, align 8
  %965 = add i32 %943, %964
  %966 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %967 = zext i16 %959 to i64
  %968 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %966, i64 0, i64 %967
  %969 = getelementptr inbounds [4 x i32], [4 x i32]* %968, i64 0, i64 1
  %970 = load i32, i32* %969, align 4
  %971 = add i32 %949, %970
  %972 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %973 = zext i16 %959 to i64
  %974 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %972, i64 0, i64 %973
  %975 = getelementptr inbounds [4 x i32], [4 x i32]* %974, i64 0, i64 2
  %976 = load i32, i32* %975, align 8
  %977 = add i32 %955, %976
  %978 = add nsw i32 %.123209, 35
  %979 = sext i32 %978 to i64
  %980 = getelementptr inbounds i16, i16* %7, i64 %979
  %981 = load i16, i16* %980, align 2
  %982 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %983 = zext i16 %981 to i64
  %984 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %982, i64 0, i64 %983
  %985 = getelementptr inbounds [4 x i32], [4 x i32]* %984, i64 0, i64 0
  %986 = load i32, i32* %985, align 8
  %987 = add i32 %965, %986
  %988 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %989 = zext i16 %981 to i64
  %990 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %988, i64 0, i64 %989
  %991 = getelementptr inbounds [4 x i32], [4 x i32]* %990, i64 0, i64 1
  %992 = load i32, i32* %991, align 4
  %993 = add i32 %971, %992
  %994 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %995 = zext i16 %981 to i64
  %996 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %994, i64 0, i64 %995
  %997 = getelementptr inbounds [4 x i32], [4 x i32]* %996, i64 0, i64 2
  %998 = load i32, i32* %997, align 8
  %999 = add i32 %977, %998
  %1000 = add nsw i32 %.123209, 36
  %1001 = sext i32 %1000 to i64
  %1002 = getelementptr inbounds i16, i16* %7, i64 %1001
  %1003 = load i16, i16* %1002, align 2
  %1004 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1005 = zext i16 %1003 to i64
  %1006 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1004, i64 0, i64 %1005
  %1007 = getelementptr inbounds [4 x i32], [4 x i32]* %1006, i64 0, i64 0
  %1008 = load i32, i32* %1007, align 8
  %1009 = add i32 %987, %1008
  %1010 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1011 = zext i16 %1003 to i64
  %1012 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1010, i64 0, i64 %1011
  %1013 = getelementptr inbounds [4 x i32], [4 x i32]* %1012, i64 0, i64 1
  %1014 = load i32, i32* %1013, align 4
  %1015 = add i32 %993, %1014
  %1016 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1017 = zext i16 %1003 to i64
  %1018 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1016, i64 0, i64 %1017
  %1019 = getelementptr inbounds [4 x i32], [4 x i32]* %1018, i64 0, i64 2
  %1020 = load i32, i32* %1019, align 8
  %1021 = add i32 %999, %1020
  %1022 = add nsw i32 %.123209, 37
  %1023 = sext i32 %1022 to i64
  %1024 = getelementptr inbounds i16, i16* %7, i64 %1023
  %1025 = load i16, i16* %1024, align 2
  %1026 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1027 = zext i16 %1025 to i64
  %1028 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1026, i64 0, i64 %1027
  %1029 = getelementptr inbounds [4 x i32], [4 x i32]* %1028, i64 0, i64 0
  %1030 = load i32, i32* %1029, align 8
  %1031 = add i32 %1009, %1030
  %1032 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1033 = zext i16 %1025 to i64
  %1034 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1032, i64 0, i64 %1033
  %1035 = getelementptr inbounds [4 x i32], [4 x i32]* %1034, i64 0, i64 1
  %1036 = load i32, i32* %1035, align 4
  %1037 = add i32 %1015, %1036
  %1038 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1039 = zext i16 %1025 to i64
  %1040 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1038, i64 0, i64 %1039
  %1041 = getelementptr inbounds [4 x i32], [4 x i32]* %1040, i64 0, i64 2
  %1042 = load i32, i32* %1041, align 8
  %1043 = add i32 %1021, %1042
  %1044 = add nsw i32 %.123209, 38
  %1045 = sext i32 %1044 to i64
  %1046 = getelementptr inbounds i16, i16* %7, i64 %1045
  %1047 = load i16, i16* %1046, align 2
  %1048 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1049 = zext i16 %1047 to i64
  %1050 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1048, i64 0, i64 %1049
  %1051 = getelementptr inbounds [4 x i32], [4 x i32]* %1050, i64 0, i64 0
  %1052 = load i32, i32* %1051, align 8
  %1053 = add i32 %1031, %1052
  %1054 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1055 = zext i16 %1047 to i64
  %1056 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1054, i64 0, i64 %1055
  %1057 = getelementptr inbounds [4 x i32], [4 x i32]* %1056, i64 0, i64 1
  %1058 = load i32, i32* %1057, align 4
  %1059 = add i32 %1037, %1058
  %1060 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1061 = zext i16 %1047 to i64
  %1062 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1060, i64 0, i64 %1061
  %1063 = getelementptr inbounds [4 x i32], [4 x i32]* %1062, i64 0, i64 2
  %1064 = load i32, i32* %1063, align 8
  %1065 = add i32 %1043, %1064
  %1066 = add nsw i32 %.123209, 39
  %1067 = sext i32 %1066 to i64
  %1068 = getelementptr inbounds i16, i16* %7, i64 %1067
  %1069 = load i16, i16* %1068, align 2
  %1070 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1071 = zext i16 %1069 to i64
  %1072 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1070, i64 0, i64 %1071
  %1073 = getelementptr inbounds [4 x i32], [4 x i32]* %1072, i64 0, i64 0
  %1074 = load i32, i32* %1073, align 8
  %1075 = add i32 %1053, %1074
  %1076 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1077 = zext i16 %1069 to i64
  %1078 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1076, i64 0, i64 %1077
  %1079 = getelementptr inbounds [4 x i32], [4 x i32]* %1078, i64 0, i64 1
  %1080 = load i32, i32* %1079, align 4
  %1081 = add i32 %1059, %1080
  %1082 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1083 = zext i16 %1069 to i64
  %1084 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1082, i64 0, i64 %1083
  %1085 = getelementptr inbounds [4 x i32], [4 x i32]* %1084, i64 0, i64 2
  %1086 = load i32, i32* %1085, align 8
  %1087 = add i32 %1065, %1086
  %1088 = add nsw i32 %.123209, 40
  %1089 = sext i32 %1088 to i64
  %1090 = getelementptr inbounds i16, i16* %7, i64 %1089
  %1091 = load i16, i16* %1090, align 2
  %1092 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1093 = zext i16 %1091 to i64
  %1094 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1092, i64 0, i64 %1093
  %1095 = getelementptr inbounds [4 x i32], [4 x i32]* %1094, i64 0, i64 0
  %1096 = load i32, i32* %1095, align 8
  %1097 = add i32 %1075, %1096
  %1098 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1099 = zext i16 %1091 to i64
  %1100 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1098, i64 0, i64 %1099
  %1101 = getelementptr inbounds [4 x i32], [4 x i32]* %1100, i64 0, i64 1
  %1102 = load i32, i32* %1101, align 4
  %1103 = add i32 %1081, %1102
  %1104 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1105 = zext i16 %1091 to i64
  %1106 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1104, i64 0, i64 %1105
  %1107 = getelementptr inbounds [4 x i32], [4 x i32]* %1106, i64 0, i64 2
  %1108 = load i32, i32* %1107, align 8
  %1109 = add i32 %1087, %1108
  %1110 = add nsw i32 %.123209, 41
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i16, i16* %7, i64 %1111
  %1113 = load i16, i16* %1112, align 2
  %1114 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1115 = zext i16 %1113 to i64
  %1116 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1114, i64 0, i64 %1115
  %1117 = getelementptr inbounds [4 x i32], [4 x i32]* %1116, i64 0, i64 0
  %1118 = load i32, i32* %1117, align 8
  %1119 = add i32 %1097, %1118
  %1120 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1121 = zext i16 %1113 to i64
  %1122 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1120, i64 0, i64 %1121
  %1123 = getelementptr inbounds [4 x i32], [4 x i32]* %1122, i64 0, i64 1
  %1124 = load i32, i32* %1123, align 4
  %1125 = add i32 %1103, %1124
  %1126 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1127 = zext i16 %1113 to i64
  %1128 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1126, i64 0, i64 %1127
  %1129 = getelementptr inbounds [4 x i32], [4 x i32]* %1128, i64 0, i64 2
  %1130 = load i32, i32* %1129, align 8
  %1131 = add i32 %1109, %1130
  %1132 = add nsw i32 %.123209, 42
  %1133 = sext i32 %1132 to i64
  %1134 = getelementptr inbounds i16, i16* %7, i64 %1133
  %1135 = load i16, i16* %1134, align 2
  %1136 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1137 = zext i16 %1135 to i64
  %1138 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1136, i64 0, i64 %1137
  %1139 = getelementptr inbounds [4 x i32], [4 x i32]* %1138, i64 0, i64 0
  %1140 = load i32, i32* %1139, align 8
  %1141 = add i32 %1119, %1140
  %1142 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1143 = zext i16 %1135 to i64
  %1144 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1142, i64 0, i64 %1143
  %1145 = getelementptr inbounds [4 x i32], [4 x i32]* %1144, i64 0, i64 1
  %1146 = load i32, i32* %1145, align 4
  %1147 = add i32 %1125, %1146
  %1148 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1149 = zext i16 %1135 to i64
  %1150 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1148, i64 0, i64 %1149
  %1151 = getelementptr inbounds [4 x i32], [4 x i32]* %1150, i64 0, i64 2
  %1152 = load i32, i32* %1151, align 8
  %1153 = add i32 %1131, %1152
  %1154 = add nsw i32 %.123209, 43
  %1155 = sext i32 %1154 to i64
  %1156 = getelementptr inbounds i16, i16* %7, i64 %1155
  %1157 = load i16, i16* %1156, align 2
  %1158 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1159 = zext i16 %1157 to i64
  %1160 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1158, i64 0, i64 %1159
  %1161 = getelementptr inbounds [4 x i32], [4 x i32]* %1160, i64 0, i64 0
  %1162 = load i32, i32* %1161, align 8
  %1163 = add i32 %1141, %1162
  %1164 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1165 = zext i16 %1157 to i64
  %1166 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1164, i64 0, i64 %1165
  %1167 = getelementptr inbounds [4 x i32], [4 x i32]* %1166, i64 0, i64 1
  %1168 = load i32, i32* %1167, align 4
  %1169 = add i32 %1147, %1168
  %1170 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1171 = zext i16 %1157 to i64
  %1172 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1170, i64 0, i64 %1171
  %1173 = getelementptr inbounds [4 x i32], [4 x i32]* %1172, i64 0, i64 2
  %1174 = load i32, i32* %1173, align 8
  %1175 = add i32 %1153, %1174
  %1176 = add nsw i32 %.123209, 44
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i16, i16* %7, i64 %1177
  %1179 = load i16, i16* %1178, align 2
  %1180 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1181 = zext i16 %1179 to i64
  %1182 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1180, i64 0, i64 %1181
  %1183 = getelementptr inbounds [4 x i32], [4 x i32]* %1182, i64 0, i64 0
  %1184 = load i32, i32* %1183, align 8
  %1185 = add i32 %1163, %1184
  %1186 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1187 = zext i16 %1179 to i64
  %1188 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1186, i64 0, i64 %1187
  %1189 = getelementptr inbounds [4 x i32], [4 x i32]* %1188, i64 0, i64 1
  %1190 = load i32, i32* %1189, align 4
  %1191 = add i32 %1169, %1190
  %1192 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1193 = zext i16 %1179 to i64
  %1194 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1192, i64 0, i64 %1193
  %1195 = getelementptr inbounds [4 x i32], [4 x i32]* %1194, i64 0, i64 2
  %1196 = load i32, i32* %1195, align 8
  %1197 = add i32 %1175, %1196
  %1198 = add nsw i32 %.123209, 45
  %1199 = sext i32 %1198 to i64
  %1200 = getelementptr inbounds i16, i16* %7, i64 %1199
  %1201 = load i16, i16* %1200, align 2
  %1202 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1203 = zext i16 %1201 to i64
  %1204 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1202, i64 0, i64 %1203
  %1205 = getelementptr inbounds [4 x i32], [4 x i32]* %1204, i64 0, i64 0
  %1206 = load i32, i32* %1205, align 8
  %1207 = add i32 %1185, %1206
  %1208 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1209 = zext i16 %1201 to i64
  %1210 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1208, i64 0, i64 %1209
  %1211 = getelementptr inbounds [4 x i32], [4 x i32]* %1210, i64 0, i64 1
  %1212 = load i32, i32* %1211, align 4
  %1213 = add i32 %1191, %1212
  %1214 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1215 = zext i16 %1201 to i64
  %1216 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1214, i64 0, i64 %1215
  %1217 = getelementptr inbounds [4 x i32], [4 x i32]* %1216, i64 0, i64 2
  %1218 = load i32, i32* %1217, align 8
  %1219 = add i32 %1197, %1218
  %1220 = add nsw i32 %.123209, 46
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds i16, i16* %7, i64 %1221
  %1223 = load i16, i16* %1222, align 2
  %1224 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1225 = zext i16 %1223 to i64
  %1226 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1224, i64 0, i64 %1225
  %1227 = getelementptr inbounds [4 x i32], [4 x i32]* %1226, i64 0, i64 0
  %1228 = load i32, i32* %1227, align 8
  %1229 = add i32 %1207, %1228
  %1230 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1231 = zext i16 %1223 to i64
  %1232 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1230, i64 0, i64 %1231
  %1233 = getelementptr inbounds [4 x i32], [4 x i32]* %1232, i64 0, i64 1
  %1234 = load i32, i32* %1233, align 4
  %1235 = add i32 %1213, %1234
  %1236 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1237 = zext i16 %1223 to i64
  %1238 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1236, i64 0, i64 %1237
  %1239 = getelementptr inbounds [4 x i32], [4 x i32]* %1238, i64 0, i64 2
  %1240 = load i32, i32* %1239, align 8
  %1241 = add i32 %1219, %1240
  %1242 = add nsw i32 %.123209, 47
  %1243 = sext i32 %1242 to i64
  %1244 = getelementptr inbounds i16, i16* %7, i64 %1243
  %1245 = load i16, i16* %1244, align 2
  %1246 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1247 = zext i16 %1245 to i64
  %1248 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1246, i64 0, i64 %1247
  %1249 = getelementptr inbounds [4 x i32], [4 x i32]* %1248, i64 0, i64 0
  %1250 = load i32, i32* %1249, align 8
  %1251 = add i32 %1229, %1250
  %1252 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1253 = zext i16 %1245 to i64
  %1254 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1252, i64 0, i64 %1253
  %1255 = getelementptr inbounds [4 x i32], [4 x i32]* %1254, i64 0, i64 1
  %1256 = load i32, i32* %1255, align 4
  %1257 = add i32 %1235, %1256
  %1258 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1259 = zext i16 %1245 to i64
  %1260 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1258, i64 0, i64 %1259
  %1261 = getelementptr inbounds [4 x i32], [4 x i32]* %1260, i64 0, i64 2
  %1262 = load i32, i32* %1261, align 8
  %1263 = add i32 %1241, %1262
  %1264 = add nsw i32 %.123209, 48
  %1265 = sext i32 %1264 to i64
  %1266 = getelementptr inbounds i16, i16* %7, i64 %1265
  %1267 = load i16, i16* %1266, align 2
  %1268 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1269 = zext i16 %1267 to i64
  %1270 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1268, i64 0, i64 %1269
  %1271 = getelementptr inbounds [4 x i32], [4 x i32]* %1270, i64 0, i64 0
  %1272 = load i32, i32* %1271, align 8
  %1273 = add i32 %1251, %1272
  %1274 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1275 = zext i16 %1267 to i64
  %1276 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1274, i64 0, i64 %1275
  %1277 = getelementptr inbounds [4 x i32], [4 x i32]* %1276, i64 0, i64 1
  %1278 = load i32, i32* %1277, align 4
  %1279 = add i32 %1257, %1278
  %1280 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1281 = zext i16 %1267 to i64
  %1282 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1280, i64 0, i64 %1281
  %1283 = getelementptr inbounds [4 x i32], [4 x i32]* %1282, i64 0, i64 2
  %1284 = load i32, i32* %1283, align 8
  %1285 = add i32 %1263, %1284
  %1286 = add nsw i32 %.123209, 49
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i16, i16* %7, i64 %1287
  %1289 = load i16, i16* %1288, align 2
  %1290 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1291 = zext i16 %1289 to i64
  %1292 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1290, i64 0, i64 %1291
  %1293 = getelementptr inbounds [4 x i32], [4 x i32]* %1292, i64 0, i64 0
  %1294 = load i32, i32* %1293, align 8
  %1295 = add i32 %1273, %1294
  %1296 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1297 = zext i16 %1289 to i64
  %1298 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1296, i64 0, i64 %1297
  %1299 = getelementptr inbounds [4 x i32], [4 x i32]* %1298, i64 0, i64 1
  %1300 = load i32, i32* %1299, align 4
  %1301 = add i32 %1279, %1300
  %1302 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 38
  %1303 = zext i16 %1289 to i64
  %1304 = getelementptr inbounds [258 x [4 x i32]], [258 x [4 x i32]]* %1302, i64 0, i64 %1303
  %1305 = getelementptr inbounds [4 x i32], [4 x i32]* %1304, i64 0, i64 2
  %1306 = load i32, i32* %1305, align 8
  %1307 = add i32 %1285, %1306
  %1308 = and i32 %1295, 65535
  %1309 = trunc i32 %1308 to i16
  %1310 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 0
  store i16 %1309, i16* %1310, align 2
  %1311 = lshr i32 %1295, 16
  %1312 = trunc i32 %1311 to i16
  %1313 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 1
  store i16 %1312, i16* %1313, align 2
  %1314 = and i32 %1301, 65535
  %1315 = trunc i32 %1314 to i16
  %1316 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 2
  store i16 %1315, i16* %1316, align 2
  %1317 = lshr i32 %1301, 16
  %1318 = trunc i32 %1317 to i16
  %1319 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 3
  store i16 %1318, i16* %1319, align 2
  %1320 = and i32 %1307, 65535
  %1321 = trunc i32 %1320 to i16
  %1322 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 4
  store i16 %1321, i16* %1322, align 2
  %1323 = lshr i32 %1307, 16
  %1324 = trunc i32 %1323 to i16
  %1325 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 5
  store i16 %1324, i16* %1325, align 2
  br label %._crit_edge191

; <label>:1326:                                   ; preds = %204, %202
  %1327 = icmp sle i32 %.123209, %.227
  br i1 %1327, label %.lr.ph190, label %._crit_edge191

.lr.ph190:                                        ; preds = %1326
  %1328 = sext i32 %.123209 to i64
  %1329 = sext i32 %.227 to i64
  %1330 = add i64 %1329, 1
  br label %1331

; <label>:1331:                                   ; preds = %.lr.ph190, %1346
  %indvars.iv192 = phi i64 [ %1328, %.lr.ph190 ], [ %indvars.iv.next193, %1346 ]
  call void @unroll_loop(i32 64)
  %1332 = getelementptr inbounds i16, i16* %7, i64 %indvars.iv192
  %1333 = load i16, i16* %1332, align 2
  br label %1334

; <label>:1334:                                   ; preds = %1331, %1334
  %indvars.iv184 = phi i64 [ 0, %1331 ], [ %indvars.iv.next185, %1334 ]
  call void @unroll_loop(i32 65)
  %1335 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %1336 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %1335, i64 0, i64 %indvars.iv184
  %1337 = zext i16 %1333 to i64
  %1338 = getelementptr inbounds [258 x i8], [258 x i8]* %1336, i64 0, i64 %1337
  %1339 = load i8, i8* %1338, align 1
  %1340 = zext i8 %1339 to i32
  %1341 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 %indvars.iv184
  %1342 = load i16, i16* %1341, align 2
  %1343 = zext i16 %1342 to i32
  %1344 = add nsw i32 %1343, %1340
  %1345 = trunc i32 %1344 to i16
  store i16 %1345, i16* %1341, align 2
  %indvars.iv.next185 = add nuw nsw i64 %indvars.iv184, 1
  %exitcond21 = icmp ne i64 %indvars.iv.next185, %57
  br i1 %exitcond21, label %1334, label %1346

; <label>:1346:                                   ; preds = %1334
  %indvars.iv.next193 = add nsw i64 %indvars.iv192, 1
  %exitcond22 = icmp ne i64 %indvars.iv.next193, %1330
  br i1 %exitcond22, label %1331, label %._crit_edge191.loopexit

._crit_edge191.loopexit:                          ; preds = %1346
  br label %._crit_edge191

._crit_edge191:                                   ; preds = %._crit_edge191.loopexit, %1326, %208
  br label %1347

; <label>:1347:                                   ; preds = %._crit_edge191, %1357
  %indvars.iv197 = phi i64 [ 0, %._crit_edge191 ], [ %indvars.iv.next198, %1357 ]
  %.030195 = phi i32 [ -1, %._crit_edge191 ], [ %.131, %1357 ]
  %.032194 = phi i32 [ 999999999, %._crit_edge191 ], [ %.133, %1357 ]
  call void @unroll_loop(i32 66)
  %1348 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 %indvars.iv197
  %1349 = load i16, i16* %1348, align 2
  %1350 = zext i16 %1349 to i32
  %1351 = icmp slt i32 %1350, %.032194
  br i1 %1351, label %1352, label %1357

; <label>:1352:                                   ; preds = %1347
  %1353 = getelementptr inbounds [6 x i16], [6 x i16]* %2, i64 0, i64 %indvars.iv197
  %1354 = load i16, i16* %1353, align 2
  %1355 = zext i16 %1354 to i32
  %1356 = trunc i64 %indvars.iv197 to i32
  br label %1357

; <label>:1357:                                   ; preds = %1347, %1352
  %.133 = phi i32 [ %1355, %1352 ], [ %.032194, %1347 ]
  %.131 = phi i32 [ %1356, %1352 ], [ %.030195, %1347 ]
  %indvars.iv.next198 = add nuw nsw i64 %indvars.iv197, 1
  %exitcond23 = icmp ne i64 %indvars.iv.next198, %57
  br i1 %exitcond23, label %1347, label %1358

; <label>:1358:                                   ; preds = %1357
  %.032.lcssa = phi i32 [ %.133, %1357 ]
  %.030.lcssa = phi i32 [ %.131, %1357 ]
  %1359 = add nsw i32 %.029208, %.032.lcssa
  %1360 = sext i32 %.030.lcssa to i64
  %1361 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 %1360
  %1362 = load i32, i32* %1361, align 4
  %1363 = add nsw i32 %1362, 1
  store i32 %1363, i32* %1361, align 4
  %1364 = trunc i32 %.030.lcssa to i8
  %1365 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 33
  %1366 = getelementptr inbounds [18002 x i8], [18002 x i8]* %1365, i64 0, i64 %indvars.iv215
  store i8 %1364, i8* %1366, align 1
  %indvars.iv.next216 = add nuw i64 %indvars.iv215, 1
  %1367 = icmp eq i32 %.346, 6
  br i1 %1367, label %1368, label %1922

; <label>:1368:                                   ; preds = %1358
  %1369 = sub nsw i32 %.227, %.123209
  %1370 = add nsw i32 %1369, 1
  %1371 = icmp eq i32 50, %1370
  br i1 %1371, label %1372, label %1922

; <label>:1372:                                   ; preds = %1368
  %1373 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1374 = sext i32 %.030.lcssa to i64
  %1375 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1373, i64 0, i64 %1374
  %1376 = sext i32 %.123209 to i64
  %1377 = getelementptr inbounds i16, i16* %7, i64 %1376
  %1378 = load i16, i16* %1377, align 2
  %1379 = zext i16 %1378 to i64
  %1380 = getelementptr inbounds [258 x i32], [258 x i32]* %1375, i64 0, i64 %1379
  %1381 = load i32, i32* %1380, align 4
  %1382 = add nsw i32 %1381, 1
  store i32 %1382, i32* %1380, align 4
  %1383 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1384 = sext i32 %.030.lcssa to i64
  %1385 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1383, i64 0, i64 %1384
  %1386 = add nsw i32 %.123209, 1
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds i16, i16* %7, i64 %1387
  %1389 = load i16, i16* %1388, align 2
  %1390 = zext i16 %1389 to i64
  %1391 = getelementptr inbounds [258 x i32], [258 x i32]* %1385, i64 0, i64 %1390
  %1392 = load i32, i32* %1391, align 4
  %1393 = add nsw i32 %1392, 1
  store i32 %1393, i32* %1391, align 4
  %1394 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1395 = sext i32 %.030.lcssa to i64
  %1396 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1394, i64 0, i64 %1395
  %1397 = add nsw i32 %.123209, 2
  %1398 = sext i32 %1397 to i64
  %1399 = getelementptr inbounds i16, i16* %7, i64 %1398
  %1400 = load i16, i16* %1399, align 2
  %1401 = zext i16 %1400 to i64
  %1402 = getelementptr inbounds [258 x i32], [258 x i32]* %1396, i64 0, i64 %1401
  %1403 = load i32, i32* %1402, align 4
  %1404 = add nsw i32 %1403, 1
  store i32 %1404, i32* %1402, align 4
  %1405 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1406 = sext i32 %.030.lcssa to i64
  %1407 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1405, i64 0, i64 %1406
  %1408 = add nsw i32 %.123209, 3
  %1409 = sext i32 %1408 to i64
  %1410 = getelementptr inbounds i16, i16* %7, i64 %1409
  %1411 = load i16, i16* %1410, align 2
  %1412 = zext i16 %1411 to i64
  %1413 = getelementptr inbounds [258 x i32], [258 x i32]* %1407, i64 0, i64 %1412
  %1414 = load i32, i32* %1413, align 4
  %1415 = add nsw i32 %1414, 1
  store i32 %1415, i32* %1413, align 4
  %1416 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1417 = sext i32 %.030.lcssa to i64
  %1418 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1416, i64 0, i64 %1417
  %1419 = add nsw i32 %.123209, 4
  %1420 = sext i32 %1419 to i64
  %1421 = getelementptr inbounds i16, i16* %7, i64 %1420
  %1422 = load i16, i16* %1421, align 2
  %1423 = zext i16 %1422 to i64
  %1424 = getelementptr inbounds [258 x i32], [258 x i32]* %1418, i64 0, i64 %1423
  %1425 = load i32, i32* %1424, align 4
  %1426 = add nsw i32 %1425, 1
  store i32 %1426, i32* %1424, align 4
  %1427 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1428 = sext i32 %.030.lcssa to i64
  %1429 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1427, i64 0, i64 %1428
  %1430 = add nsw i32 %.123209, 5
  %1431 = sext i32 %1430 to i64
  %1432 = getelementptr inbounds i16, i16* %7, i64 %1431
  %1433 = load i16, i16* %1432, align 2
  %1434 = zext i16 %1433 to i64
  %1435 = getelementptr inbounds [258 x i32], [258 x i32]* %1429, i64 0, i64 %1434
  %1436 = load i32, i32* %1435, align 4
  %1437 = add nsw i32 %1436, 1
  store i32 %1437, i32* %1435, align 4
  %1438 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1439 = sext i32 %.030.lcssa to i64
  %1440 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1438, i64 0, i64 %1439
  %1441 = add nsw i32 %.123209, 6
  %1442 = sext i32 %1441 to i64
  %1443 = getelementptr inbounds i16, i16* %7, i64 %1442
  %1444 = load i16, i16* %1443, align 2
  %1445 = zext i16 %1444 to i64
  %1446 = getelementptr inbounds [258 x i32], [258 x i32]* %1440, i64 0, i64 %1445
  %1447 = load i32, i32* %1446, align 4
  %1448 = add nsw i32 %1447, 1
  store i32 %1448, i32* %1446, align 4
  %1449 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1450 = sext i32 %.030.lcssa to i64
  %1451 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1449, i64 0, i64 %1450
  %1452 = add nsw i32 %.123209, 7
  %1453 = sext i32 %1452 to i64
  %1454 = getelementptr inbounds i16, i16* %7, i64 %1453
  %1455 = load i16, i16* %1454, align 2
  %1456 = zext i16 %1455 to i64
  %1457 = getelementptr inbounds [258 x i32], [258 x i32]* %1451, i64 0, i64 %1456
  %1458 = load i32, i32* %1457, align 4
  %1459 = add nsw i32 %1458, 1
  store i32 %1459, i32* %1457, align 4
  %1460 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1461 = sext i32 %.030.lcssa to i64
  %1462 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1460, i64 0, i64 %1461
  %1463 = add nsw i32 %.123209, 8
  %1464 = sext i32 %1463 to i64
  %1465 = getelementptr inbounds i16, i16* %7, i64 %1464
  %1466 = load i16, i16* %1465, align 2
  %1467 = zext i16 %1466 to i64
  %1468 = getelementptr inbounds [258 x i32], [258 x i32]* %1462, i64 0, i64 %1467
  %1469 = load i32, i32* %1468, align 4
  %1470 = add nsw i32 %1469, 1
  store i32 %1470, i32* %1468, align 4
  %1471 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1472 = sext i32 %.030.lcssa to i64
  %1473 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1471, i64 0, i64 %1472
  %1474 = add nsw i32 %.123209, 9
  %1475 = sext i32 %1474 to i64
  %1476 = getelementptr inbounds i16, i16* %7, i64 %1475
  %1477 = load i16, i16* %1476, align 2
  %1478 = zext i16 %1477 to i64
  %1479 = getelementptr inbounds [258 x i32], [258 x i32]* %1473, i64 0, i64 %1478
  %1480 = load i32, i32* %1479, align 4
  %1481 = add nsw i32 %1480, 1
  store i32 %1481, i32* %1479, align 4
  %1482 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1483 = sext i32 %.030.lcssa to i64
  %1484 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1482, i64 0, i64 %1483
  %1485 = add nsw i32 %.123209, 10
  %1486 = sext i32 %1485 to i64
  %1487 = getelementptr inbounds i16, i16* %7, i64 %1486
  %1488 = load i16, i16* %1487, align 2
  %1489 = zext i16 %1488 to i64
  %1490 = getelementptr inbounds [258 x i32], [258 x i32]* %1484, i64 0, i64 %1489
  %1491 = load i32, i32* %1490, align 4
  %1492 = add nsw i32 %1491, 1
  store i32 %1492, i32* %1490, align 4
  %1493 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1494 = sext i32 %.030.lcssa to i64
  %1495 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1493, i64 0, i64 %1494
  %1496 = add nsw i32 %.123209, 11
  %1497 = sext i32 %1496 to i64
  %1498 = getelementptr inbounds i16, i16* %7, i64 %1497
  %1499 = load i16, i16* %1498, align 2
  %1500 = zext i16 %1499 to i64
  %1501 = getelementptr inbounds [258 x i32], [258 x i32]* %1495, i64 0, i64 %1500
  %1502 = load i32, i32* %1501, align 4
  %1503 = add nsw i32 %1502, 1
  store i32 %1503, i32* %1501, align 4
  %1504 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1505 = sext i32 %.030.lcssa to i64
  %1506 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1504, i64 0, i64 %1505
  %1507 = add nsw i32 %.123209, 12
  %1508 = sext i32 %1507 to i64
  %1509 = getelementptr inbounds i16, i16* %7, i64 %1508
  %1510 = load i16, i16* %1509, align 2
  %1511 = zext i16 %1510 to i64
  %1512 = getelementptr inbounds [258 x i32], [258 x i32]* %1506, i64 0, i64 %1511
  %1513 = load i32, i32* %1512, align 4
  %1514 = add nsw i32 %1513, 1
  store i32 %1514, i32* %1512, align 4
  %1515 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1516 = sext i32 %.030.lcssa to i64
  %1517 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1515, i64 0, i64 %1516
  %1518 = add nsw i32 %.123209, 13
  %1519 = sext i32 %1518 to i64
  %1520 = getelementptr inbounds i16, i16* %7, i64 %1519
  %1521 = load i16, i16* %1520, align 2
  %1522 = zext i16 %1521 to i64
  %1523 = getelementptr inbounds [258 x i32], [258 x i32]* %1517, i64 0, i64 %1522
  %1524 = load i32, i32* %1523, align 4
  %1525 = add nsw i32 %1524, 1
  store i32 %1525, i32* %1523, align 4
  %1526 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1527 = sext i32 %.030.lcssa to i64
  %1528 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1526, i64 0, i64 %1527
  %1529 = add nsw i32 %.123209, 14
  %1530 = sext i32 %1529 to i64
  %1531 = getelementptr inbounds i16, i16* %7, i64 %1530
  %1532 = load i16, i16* %1531, align 2
  %1533 = zext i16 %1532 to i64
  %1534 = getelementptr inbounds [258 x i32], [258 x i32]* %1528, i64 0, i64 %1533
  %1535 = load i32, i32* %1534, align 4
  %1536 = add nsw i32 %1535, 1
  store i32 %1536, i32* %1534, align 4
  %1537 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1538 = sext i32 %.030.lcssa to i64
  %1539 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1537, i64 0, i64 %1538
  %1540 = add nsw i32 %.123209, 15
  %1541 = sext i32 %1540 to i64
  %1542 = getelementptr inbounds i16, i16* %7, i64 %1541
  %1543 = load i16, i16* %1542, align 2
  %1544 = zext i16 %1543 to i64
  %1545 = getelementptr inbounds [258 x i32], [258 x i32]* %1539, i64 0, i64 %1544
  %1546 = load i32, i32* %1545, align 4
  %1547 = add nsw i32 %1546, 1
  store i32 %1547, i32* %1545, align 4
  %1548 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1549 = sext i32 %.030.lcssa to i64
  %1550 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1548, i64 0, i64 %1549
  %1551 = add nsw i32 %.123209, 16
  %1552 = sext i32 %1551 to i64
  %1553 = getelementptr inbounds i16, i16* %7, i64 %1552
  %1554 = load i16, i16* %1553, align 2
  %1555 = zext i16 %1554 to i64
  %1556 = getelementptr inbounds [258 x i32], [258 x i32]* %1550, i64 0, i64 %1555
  %1557 = load i32, i32* %1556, align 4
  %1558 = add nsw i32 %1557, 1
  store i32 %1558, i32* %1556, align 4
  %1559 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1560 = sext i32 %.030.lcssa to i64
  %1561 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1559, i64 0, i64 %1560
  %1562 = add nsw i32 %.123209, 17
  %1563 = sext i32 %1562 to i64
  %1564 = getelementptr inbounds i16, i16* %7, i64 %1563
  %1565 = load i16, i16* %1564, align 2
  %1566 = zext i16 %1565 to i64
  %1567 = getelementptr inbounds [258 x i32], [258 x i32]* %1561, i64 0, i64 %1566
  %1568 = load i32, i32* %1567, align 4
  %1569 = add nsw i32 %1568, 1
  store i32 %1569, i32* %1567, align 4
  %1570 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1571 = sext i32 %.030.lcssa to i64
  %1572 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1570, i64 0, i64 %1571
  %1573 = add nsw i32 %.123209, 18
  %1574 = sext i32 %1573 to i64
  %1575 = getelementptr inbounds i16, i16* %7, i64 %1574
  %1576 = load i16, i16* %1575, align 2
  %1577 = zext i16 %1576 to i64
  %1578 = getelementptr inbounds [258 x i32], [258 x i32]* %1572, i64 0, i64 %1577
  %1579 = load i32, i32* %1578, align 4
  %1580 = add nsw i32 %1579, 1
  store i32 %1580, i32* %1578, align 4
  %1581 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1582 = sext i32 %.030.lcssa to i64
  %1583 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1581, i64 0, i64 %1582
  %1584 = add nsw i32 %.123209, 19
  %1585 = sext i32 %1584 to i64
  %1586 = getelementptr inbounds i16, i16* %7, i64 %1585
  %1587 = load i16, i16* %1586, align 2
  %1588 = zext i16 %1587 to i64
  %1589 = getelementptr inbounds [258 x i32], [258 x i32]* %1583, i64 0, i64 %1588
  %1590 = load i32, i32* %1589, align 4
  %1591 = add nsw i32 %1590, 1
  store i32 %1591, i32* %1589, align 4
  %1592 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1593 = sext i32 %.030.lcssa to i64
  %1594 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1592, i64 0, i64 %1593
  %1595 = add nsw i32 %.123209, 20
  %1596 = sext i32 %1595 to i64
  %1597 = getelementptr inbounds i16, i16* %7, i64 %1596
  %1598 = load i16, i16* %1597, align 2
  %1599 = zext i16 %1598 to i64
  %1600 = getelementptr inbounds [258 x i32], [258 x i32]* %1594, i64 0, i64 %1599
  %1601 = load i32, i32* %1600, align 4
  %1602 = add nsw i32 %1601, 1
  store i32 %1602, i32* %1600, align 4
  %1603 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1604 = sext i32 %.030.lcssa to i64
  %1605 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1603, i64 0, i64 %1604
  %1606 = add nsw i32 %.123209, 21
  %1607 = sext i32 %1606 to i64
  %1608 = getelementptr inbounds i16, i16* %7, i64 %1607
  %1609 = load i16, i16* %1608, align 2
  %1610 = zext i16 %1609 to i64
  %1611 = getelementptr inbounds [258 x i32], [258 x i32]* %1605, i64 0, i64 %1610
  %1612 = load i32, i32* %1611, align 4
  %1613 = add nsw i32 %1612, 1
  store i32 %1613, i32* %1611, align 4
  %1614 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1615 = sext i32 %.030.lcssa to i64
  %1616 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1614, i64 0, i64 %1615
  %1617 = add nsw i32 %.123209, 22
  %1618 = sext i32 %1617 to i64
  %1619 = getelementptr inbounds i16, i16* %7, i64 %1618
  %1620 = load i16, i16* %1619, align 2
  %1621 = zext i16 %1620 to i64
  %1622 = getelementptr inbounds [258 x i32], [258 x i32]* %1616, i64 0, i64 %1621
  %1623 = load i32, i32* %1622, align 4
  %1624 = add nsw i32 %1623, 1
  store i32 %1624, i32* %1622, align 4
  %1625 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1626 = sext i32 %.030.lcssa to i64
  %1627 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1625, i64 0, i64 %1626
  %1628 = add nsw i32 %.123209, 23
  %1629 = sext i32 %1628 to i64
  %1630 = getelementptr inbounds i16, i16* %7, i64 %1629
  %1631 = load i16, i16* %1630, align 2
  %1632 = zext i16 %1631 to i64
  %1633 = getelementptr inbounds [258 x i32], [258 x i32]* %1627, i64 0, i64 %1632
  %1634 = load i32, i32* %1633, align 4
  %1635 = add nsw i32 %1634, 1
  store i32 %1635, i32* %1633, align 4
  %1636 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1637 = sext i32 %.030.lcssa to i64
  %1638 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1636, i64 0, i64 %1637
  %1639 = add nsw i32 %.123209, 24
  %1640 = sext i32 %1639 to i64
  %1641 = getelementptr inbounds i16, i16* %7, i64 %1640
  %1642 = load i16, i16* %1641, align 2
  %1643 = zext i16 %1642 to i64
  %1644 = getelementptr inbounds [258 x i32], [258 x i32]* %1638, i64 0, i64 %1643
  %1645 = load i32, i32* %1644, align 4
  %1646 = add nsw i32 %1645, 1
  store i32 %1646, i32* %1644, align 4
  %1647 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1648 = sext i32 %.030.lcssa to i64
  %1649 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1647, i64 0, i64 %1648
  %1650 = add nsw i32 %.123209, 25
  %1651 = sext i32 %1650 to i64
  %1652 = getelementptr inbounds i16, i16* %7, i64 %1651
  %1653 = load i16, i16* %1652, align 2
  %1654 = zext i16 %1653 to i64
  %1655 = getelementptr inbounds [258 x i32], [258 x i32]* %1649, i64 0, i64 %1654
  %1656 = load i32, i32* %1655, align 4
  %1657 = add nsw i32 %1656, 1
  store i32 %1657, i32* %1655, align 4
  %1658 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1659 = sext i32 %.030.lcssa to i64
  %1660 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1658, i64 0, i64 %1659
  %1661 = add nsw i32 %.123209, 26
  %1662 = sext i32 %1661 to i64
  %1663 = getelementptr inbounds i16, i16* %7, i64 %1662
  %1664 = load i16, i16* %1663, align 2
  %1665 = zext i16 %1664 to i64
  %1666 = getelementptr inbounds [258 x i32], [258 x i32]* %1660, i64 0, i64 %1665
  %1667 = load i32, i32* %1666, align 4
  %1668 = add nsw i32 %1667, 1
  store i32 %1668, i32* %1666, align 4
  %1669 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1670 = sext i32 %.030.lcssa to i64
  %1671 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1669, i64 0, i64 %1670
  %1672 = add nsw i32 %.123209, 27
  %1673 = sext i32 %1672 to i64
  %1674 = getelementptr inbounds i16, i16* %7, i64 %1673
  %1675 = load i16, i16* %1674, align 2
  %1676 = zext i16 %1675 to i64
  %1677 = getelementptr inbounds [258 x i32], [258 x i32]* %1671, i64 0, i64 %1676
  %1678 = load i32, i32* %1677, align 4
  %1679 = add nsw i32 %1678, 1
  store i32 %1679, i32* %1677, align 4
  %1680 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1681 = sext i32 %.030.lcssa to i64
  %1682 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1680, i64 0, i64 %1681
  %1683 = add nsw i32 %.123209, 28
  %1684 = sext i32 %1683 to i64
  %1685 = getelementptr inbounds i16, i16* %7, i64 %1684
  %1686 = load i16, i16* %1685, align 2
  %1687 = zext i16 %1686 to i64
  %1688 = getelementptr inbounds [258 x i32], [258 x i32]* %1682, i64 0, i64 %1687
  %1689 = load i32, i32* %1688, align 4
  %1690 = add nsw i32 %1689, 1
  store i32 %1690, i32* %1688, align 4
  %1691 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1692 = sext i32 %.030.lcssa to i64
  %1693 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1691, i64 0, i64 %1692
  %1694 = add nsw i32 %.123209, 29
  %1695 = sext i32 %1694 to i64
  %1696 = getelementptr inbounds i16, i16* %7, i64 %1695
  %1697 = load i16, i16* %1696, align 2
  %1698 = zext i16 %1697 to i64
  %1699 = getelementptr inbounds [258 x i32], [258 x i32]* %1693, i64 0, i64 %1698
  %1700 = load i32, i32* %1699, align 4
  %1701 = add nsw i32 %1700, 1
  store i32 %1701, i32* %1699, align 4
  %1702 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1703 = sext i32 %.030.lcssa to i64
  %1704 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1702, i64 0, i64 %1703
  %1705 = add nsw i32 %.123209, 30
  %1706 = sext i32 %1705 to i64
  %1707 = getelementptr inbounds i16, i16* %7, i64 %1706
  %1708 = load i16, i16* %1707, align 2
  %1709 = zext i16 %1708 to i64
  %1710 = getelementptr inbounds [258 x i32], [258 x i32]* %1704, i64 0, i64 %1709
  %1711 = load i32, i32* %1710, align 4
  %1712 = add nsw i32 %1711, 1
  store i32 %1712, i32* %1710, align 4
  %1713 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1714 = sext i32 %.030.lcssa to i64
  %1715 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1713, i64 0, i64 %1714
  %1716 = add nsw i32 %.123209, 31
  %1717 = sext i32 %1716 to i64
  %1718 = getelementptr inbounds i16, i16* %7, i64 %1717
  %1719 = load i16, i16* %1718, align 2
  %1720 = zext i16 %1719 to i64
  %1721 = getelementptr inbounds [258 x i32], [258 x i32]* %1715, i64 0, i64 %1720
  %1722 = load i32, i32* %1721, align 4
  %1723 = add nsw i32 %1722, 1
  store i32 %1723, i32* %1721, align 4
  %1724 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1725 = sext i32 %.030.lcssa to i64
  %1726 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1724, i64 0, i64 %1725
  %1727 = add nsw i32 %.123209, 32
  %1728 = sext i32 %1727 to i64
  %1729 = getelementptr inbounds i16, i16* %7, i64 %1728
  %1730 = load i16, i16* %1729, align 2
  %1731 = zext i16 %1730 to i64
  %1732 = getelementptr inbounds [258 x i32], [258 x i32]* %1726, i64 0, i64 %1731
  %1733 = load i32, i32* %1732, align 4
  %1734 = add nsw i32 %1733, 1
  store i32 %1734, i32* %1732, align 4
  %1735 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1736 = sext i32 %.030.lcssa to i64
  %1737 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1735, i64 0, i64 %1736
  %1738 = add nsw i32 %.123209, 33
  %1739 = sext i32 %1738 to i64
  %1740 = getelementptr inbounds i16, i16* %7, i64 %1739
  %1741 = load i16, i16* %1740, align 2
  %1742 = zext i16 %1741 to i64
  %1743 = getelementptr inbounds [258 x i32], [258 x i32]* %1737, i64 0, i64 %1742
  %1744 = load i32, i32* %1743, align 4
  %1745 = add nsw i32 %1744, 1
  store i32 %1745, i32* %1743, align 4
  %1746 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1747 = sext i32 %.030.lcssa to i64
  %1748 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1746, i64 0, i64 %1747
  %1749 = add nsw i32 %.123209, 34
  %1750 = sext i32 %1749 to i64
  %1751 = getelementptr inbounds i16, i16* %7, i64 %1750
  %1752 = load i16, i16* %1751, align 2
  %1753 = zext i16 %1752 to i64
  %1754 = getelementptr inbounds [258 x i32], [258 x i32]* %1748, i64 0, i64 %1753
  %1755 = load i32, i32* %1754, align 4
  %1756 = add nsw i32 %1755, 1
  store i32 %1756, i32* %1754, align 4
  %1757 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1758 = sext i32 %.030.lcssa to i64
  %1759 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1757, i64 0, i64 %1758
  %1760 = add nsw i32 %.123209, 35
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds i16, i16* %7, i64 %1761
  %1763 = load i16, i16* %1762, align 2
  %1764 = zext i16 %1763 to i64
  %1765 = getelementptr inbounds [258 x i32], [258 x i32]* %1759, i64 0, i64 %1764
  %1766 = load i32, i32* %1765, align 4
  %1767 = add nsw i32 %1766, 1
  store i32 %1767, i32* %1765, align 4
  %1768 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1769 = sext i32 %.030.lcssa to i64
  %1770 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1768, i64 0, i64 %1769
  %1771 = add nsw i32 %.123209, 36
  %1772 = sext i32 %1771 to i64
  %1773 = getelementptr inbounds i16, i16* %7, i64 %1772
  %1774 = load i16, i16* %1773, align 2
  %1775 = zext i16 %1774 to i64
  %1776 = getelementptr inbounds [258 x i32], [258 x i32]* %1770, i64 0, i64 %1775
  %1777 = load i32, i32* %1776, align 4
  %1778 = add nsw i32 %1777, 1
  store i32 %1778, i32* %1776, align 4
  %1779 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1780 = sext i32 %.030.lcssa to i64
  %1781 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1779, i64 0, i64 %1780
  %1782 = add nsw i32 %.123209, 37
  %1783 = sext i32 %1782 to i64
  %1784 = getelementptr inbounds i16, i16* %7, i64 %1783
  %1785 = load i16, i16* %1784, align 2
  %1786 = zext i16 %1785 to i64
  %1787 = getelementptr inbounds [258 x i32], [258 x i32]* %1781, i64 0, i64 %1786
  %1788 = load i32, i32* %1787, align 4
  %1789 = add nsw i32 %1788, 1
  store i32 %1789, i32* %1787, align 4
  %1790 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1791 = sext i32 %.030.lcssa to i64
  %1792 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1790, i64 0, i64 %1791
  %1793 = add nsw i32 %.123209, 38
  %1794 = sext i32 %1793 to i64
  %1795 = getelementptr inbounds i16, i16* %7, i64 %1794
  %1796 = load i16, i16* %1795, align 2
  %1797 = zext i16 %1796 to i64
  %1798 = getelementptr inbounds [258 x i32], [258 x i32]* %1792, i64 0, i64 %1797
  %1799 = load i32, i32* %1798, align 4
  %1800 = add nsw i32 %1799, 1
  store i32 %1800, i32* %1798, align 4
  %1801 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1802 = sext i32 %.030.lcssa to i64
  %1803 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1801, i64 0, i64 %1802
  %1804 = add nsw i32 %.123209, 39
  %1805 = sext i32 %1804 to i64
  %1806 = getelementptr inbounds i16, i16* %7, i64 %1805
  %1807 = load i16, i16* %1806, align 2
  %1808 = zext i16 %1807 to i64
  %1809 = getelementptr inbounds [258 x i32], [258 x i32]* %1803, i64 0, i64 %1808
  %1810 = load i32, i32* %1809, align 4
  %1811 = add nsw i32 %1810, 1
  store i32 %1811, i32* %1809, align 4
  %1812 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1813 = sext i32 %.030.lcssa to i64
  %1814 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1812, i64 0, i64 %1813
  %1815 = add nsw i32 %.123209, 40
  %1816 = sext i32 %1815 to i64
  %1817 = getelementptr inbounds i16, i16* %7, i64 %1816
  %1818 = load i16, i16* %1817, align 2
  %1819 = zext i16 %1818 to i64
  %1820 = getelementptr inbounds [258 x i32], [258 x i32]* %1814, i64 0, i64 %1819
  %1821 = load i32, i32* %1820, align 4
  %1822 = add nsw i32 %1821, 1
  store i32 %1822, i32* %1820, align 4
  %1823 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1824 = sext i32 %.030.lcssa to i64
  %1825 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1823, i64 0, i64 %1824
  %1826 = add nsw i32 %.123209, 41
  %1827 = sext i32 %1826 to i64
  %1828 = getelementptr inbounds i16, i16* %7, i64 %1827
  %1829 = load i16, i16* %1828, align 2
  %1830 = zext i16 %1829 to i64
  %1831 = getelementptr inbounds [258 x i32], [258 x i32]* %1825, i64 0, i64 %1830
  %1832 = load i32, i32* %1831, align 4
  %1833 = add nsw i32 %1832, 1
  store i32 %1833, i32* %1831, align 4
  %1834 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1835 = sext i32 %.030.lcssa to i64
  %1836 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1834, i64 0, i64 %1835
  %1837 = add nsw i32 %.123209, 42
  %1838 = sext i32 %1837 to i64
  %1839 = getelementptr inbounds i16, i16* %7, i64 %1838
  %1840 = load i16, i16* %1839, align 2
  %1841 = zext i16 %1840 to i64
  %1842 = getelementptr inbounds [258 x i32], [258 x i32]* %1836, i64 0, i64 %1841
  %1843 = load i32, i32* %1842, align 4
  %1844 = add nsw i32 %1843, 1
  store i32 %1844, i32* %1842, align 4
  %1845 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1846 = sext i32 %.030.lcssa to i64
  %1847 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1845, i64 0, i64 %1846
  %1848 = add nsw i32 %.123209, 43
  %1849 = sext i32 %1848 to i64
  %1850 = getelementptr inbounds i16, i16* %7, i64 %1849
  %1851 = load i16, i16* %1850, align 2
  %1852 = zext i16 %1851 to i64
  %1853 = getelementptr inbounds [258 x i32], [258 x i32]* %1847, i64 0, i64 %1852
  %1854 = load i32, i32* %1853, align 4
  %1855 = add nsw i32 %1854, 1
  store i32 %1855, i32* %1853, align 4
  %1856 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1857 = sext i32 %.030.lcssa to i64
  %1858 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1856, i64 0, i64 %1857
  %1859 = add nsw i32 %.123209, 44
  %1860 = sext i32 %1859 to i64
  %1861 = getelementptr inbounds i16, i16* %7, i64 %1860
  %1862 = load i16, i16* %1861, align 2
  %1863 = zext i16 %1862 to i64
  %1864 = getelementptr inbounds [258 x i32], [258 x i32]* %1858, i64 0, i64 %1863
  %1865 = load i32, i32* %1864, align 4
  %1866 = add nsw i32 %1865, 1
  store i32 %1866, i32* %1864, align 4
  %1867 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1868 = sext i32 %.030.lcssa to i64
  %1869 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1867, i64 0, i64 %1868
  %1870 = add nsw i32 %.123209, 45
  %1871 = sext i32 %1870 to i64
  %1872 = getelementptr inbounds i16, i16* %7, i64 %1871
  %1873 = load i16, i16* %1872, align 2
  %1874 = zext i16 %1873 to i64
  %1875 = getelementptr inbounds [258 x i32], [258 x i32]* %1869, i64 0, i64 %1874
  %1876 = load i32, i32* %1875, align 4
  %1877 = add nsw i32 %1876, 1
  store i32 %1877, i32* %1875, align 4
  %1878 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1879 = sext i32 %.030.lcssa to i64
  %1880 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1878, i64 0, i64 %1879
  %1881 = add nsw i32 %.123209, 46
  %1882 = sext i32 %1881 to i64
  %1883 = getelementptr inbounds i16, i16* %7, i64 %1882
  %1884 = load i16, i16* %1883, align 2
  %1885 = zext i16 %1884 to i64
  %1886 = getelementptr inbounds [258 x i32], [258 x i32]* %1880, i64 0, i64 %1885
  %1887 = load i32, i32* %1886, align 4
  %1888 = add nsw i32 %1887, 1
  store i32 %1888, i32* %1886, align 4
  %1889 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1890 = sext i32 %.030.lcssa to i64
  %1891 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1889, i64 0, i64 %1890
  %1892 = add nsw i32 %.123209, 47
  %1893 = sext i32 %1892 to i64
  %1894 = getelementptr inbounds i16, i16* %7, i64 %1893
  %1895 = load i16, i16* %1894, align 2
  %1896 = zext i16 %1895 to i64
  %1897 = getelementptr inbounds [258 x i32], [258 x i32]* %1891, i64 0, i64 %1896
  %1898 = load i32, i32* %1897, align 4
  %1899 = add nsw i32 %1898, 1
  store i32 %1899, i32* %1897, align 4
  %1900 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1901 = sext i32 %.030.lcssa to i64
  %1902 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1900, i64 0, i64 %1901
  %1903 = add nsw i32 %.123209, 48
  %1904 = sext i32 %1903 to i64
  %1905 = getelementptr inbounds i16, i16* %7, i64 %1904
  %1906 = load i16, i16* %1905, align 2
  %1907 = zext i16 %1906 to i64
  %1908 = getelementptr inbounds [258 x i32], [258 x i32]* %1902, i64 0, i64 %1907
  %1909 = load i32, i32* %1908, align 4
  %1910 = add nsw i32 %1909, 1
  store i32 %1910, i32* %1908, align 4
  %1911 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1912 = sext i32 %.030.lcssa to i64
  %1913 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1911, i64 0, i64 %1912
  %1914 = add nsw i32 %.123209, 49
  %1915 = sext i32 %1914 to i64
  %1916 = getelementptr inbounds i16, i16* %7, i64 %1915
  %1917 = load i16, i16* %1916, align 2
  %1918 = zext i16 %1917 to i64
  %1919 = getelementptr inbounds [258 x i32], [258 x i32]* %1913, i64 0, i64 %1918
  %1920 = load i32, i32* %1919, align 4
  %1921 = add nsw i32 %1920, 1
  store i32 %1921, i32* %1919, align 4
  br label %._crit_edge204

; <label>:1922:                                   ; preds = %1368, %1358
  %1923 = icmp sle i32 %.123209, %.227
  br i1 %1923, label %.lr.ph203, label %._crit_edge204

.lr.ph203:                                        ; preds = %1922
  %1924 = sext i32 %.123209 to i64
  %1925 = sext i32 %.227 to i64
  %1926 = add i64 %1925, 1
  br label %1927

; <label>:1927:                                   ; preds = %.lr.ph203, %1927
  %indvars.iv205 = phi i64 [ %1924, %.lr.ph203 ], [ %indvars.iv.next206, %1927 ]
  call void @unroll_loop(i32 67)
  %1928 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1929 = sext i32 %.030.lcssa to i64
  %1930 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1928, i64 0, i64 %1929
  %1931 = getelementptr inbounds i16, i16* %7, i64 %indvars.iv205
  %1932 = load i16, i16* %1931, align 2
  %1933 = zext i16 %1932 to i64
  %1934 = getelementptr inbounds [258 x i32], [258 x i32]* %1930, i64 0, i64 %1933
  %1935 = load i32, i32* %1934, align 4
  %1936 = add nsw i32 %1935, 1
  store i32 %1936, i32* %1934, align 4
  %indvars.iv.next206 = add nsw i64 %indvars.iv205, 1
  %exitcond24 = icmp ne i64 %indvars.iv.next206, %1926
  br i1 %exitcond24, label %1927, label %._crit_edge204.loopexit

._crit_edge204.loopexit:                          ; preds = %1927
  br label %._crit_edge204

._crit_edge204:                                   ; preds = %._crit_edge204.loopexit, %1922, %1372
  %1937 = add nsw i32 %.227, 1
  %1938 = load i32, i32* %186, align 4
  %1939 = icmp sge i32 %1937, %1938
  br i1 %1939, label %._crit_edge212, label %.lr.ph211

; <label>:1940:                                   ; preds = %._crit_edge173, %._crit_edge212
  %.136.lcssa = phi i32 [ %189, %._crit_edge212 ], [ 0, %._crit_edge173 ]
  %.029.lcssa = phi i32 [ %split214, %._crit_edge212 ], [ 0, %._crit_edge173 ]
  %1941 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %1942 = load i32, i32* %1941, align 8
  %1943 = icmp sge i32 %1942, 3
  br i1 %1943, label %1944, label %1960

; <label>:1944:                                   ; preds = %1940
  %1945 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1946 = add nuw nsw i32 %.034227, 1
  %1947 = sdiv i32 %.029.lcssa, 8
  %1948 = getelementptr [41 x i8], [41 x i8]* @.str.4.151, i32 0, i32 0
  %1949 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1945, i8* %1948, i32 %1946, i32 %1947)
  br label %1950

; <label>:1950:                                   ; preds = %1944, %1950
  %indvars.iv218 = phi i64 [ 0, %1944 ], [ %indvars.iv.next219, %1950 ]
  call void @unroll_loop(i32 68)
  %1951 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1952 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 %indvars.iv218
  %1953 = load i32, i32* %1952, align 4
  %1954 = getelementptr [4 x i8], [4 x i8]* @.str.5.152, i32 0, i32 0
  %1955 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1951, i8* %1954, i32 %1953)
  %indvars.iv.next219 = add nuw nsw i64 %indvars.iv218, 1
  %exitcond25 = icmp ne i64 %indvars.iv.next219, %57
  br i1 %exitcond25, label %1950, label %1956

; <label>:1956:                                   ; preds = %1950
  %1957 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1958 = getelementptr [2 x i8], [2 x i8]* @.str.6.153, i32 0, i32 0
  %1959 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1957, i8* %1958)
  br label %1960

; <label>:1960:                                   ; preds = %1956, %1940
  br label %1961

; <label>:1961:                                   ; preds = %1960, %1961
  %indvars.iv223 = phi i64 [ 0, %1960 ], [ %indvars.iv.next224, %1961 ]
  call void @unroll_loop(i32 69)
  %1962 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %1963 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %1962, i64 0, i64 %indvars.iv223
  %1964 = getelementptr inbounds [258 x i8], [258 x i8]* %1963, i64 0, i64 0
  %1965 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 37
  %1966 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %1965, i64 0, i64 %indvars.iv223
  %1967 = getelementptr inbounds [258 x i32], [258 x i32]* %1966, i64 0, i64 0
  call void @BZ2_hbMakeCodeLengths(i8* %1964, i32* %1967, i32 %24, i32 17)
  %indvars.iv.next224 = add nuw nsw i64 %indvars.iv223, 1
  %exitcond26 = icmp ne i64 %indvars.iv.next224, %57
  br i1 %exitcond26, label %1961, label %1968

; <label>:1968:                                   ; preds = %1961
  %1969 = add nuw nsw i32 %.034227, 1
  %exitcond228 = icmp ne i32 %1969, 4
  br i1 %exitcond228, label %130, label %1970

; <label>:1970:                                   ; preds = %1968
  %.035.lcssa = phi i32 [ %.136.lcssa, %1968 ]
  %1971 = icmp slt i32 %.346, 8
  br i1 %1971, label %1973, label %1972

; <label>:1972:                                   ; preds = %1970
  call void @BZ2_bz__AssertH__fail(i32 3002)
  br label %1973

; <label>:1973:                                   ; preds = %1972, %1970
  %1974 = icmp slt i32 %.035.lcssa, 32768
  %1975 = icmp sle i32 %.035.lcssa, 18002
  %or.cond3 = and i1 %1974, %1975
  br i1 %or.cond3, label %1977, label %1976

; <label>:1976:                                   ; preds = %1973
  call void @BZ2_bz__AssertH__fail(i32 3003)
  br label %1977

; <label>:1977:                                   ; preds = %1973, %1976
  %1978 = zext i32 %.346 to i64
  br label %1979

; <label>:1979:                                   ; preds = %1977, %1979
  %indvars.iv148 = phi i64 [ 0, %1977 ], [ %indvars.iv.next149, %1979 ]
  %.210147 = phi i32 [ 0, %1977 ], [ %1982, %1979 ]
  %1980 = trunc i32 %.210147 to i8
  %1981 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 %indvars.iv148
  store i8 %1980, i8* %1981, align 1
  %indvars.iv.next149 = add nuw nsw i64 %indvars.iv148, 1
  %1982 = add nuw nsw i32 %.210147, 1
  %exitcond15 = icmp ne i64 %indvars.iv.next149, %1978
  br i1 %exitcond15, label %1979, label %1983

; <label>:1983:                                   ; preds = %1979
  %1984 = icmp slt i32 0, %.035.lcssa
  br i1 %1984, label %.lr.ph141.preheader, label %._crit_edge142

.lr.ph141.preheader:                              ; preds = %1983
  %1985 = zext i32 %.035.lcssa to i64
  br label %.lr.ph141

.lr.ph141:                                        ; preds = %.lr.ph141.preheader, %2001
  %indvars.iv143 = phi i64 [ %indvars.iv.next144, %2001 ], [ 0, %.lr.ph141.preheader ]
  call void @unroll_loop(i32 70)
  %1986 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 33
  %1987 = getelementptr inbounds [18002 x i8], [18002 x i8]* %1986, i64 0, i64 %indvars.iv143
  %1988 = load i8, i8* %1987, align 1
  %1989 = sext i32 0 to i64
  %1990 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 %1989
  %1991 = load i8, i8* %1990, align 1
  %1992 = zext i8 %1988 to i32
  %1993 = zext i8 %1991 to i32
  %1994 = icmp ne i32 %1992, %1993
  br i1 %1994, label %.lr.ph133.preheader, label %2001

.lr.ph133.preheader:                              ; preds = %.lr.ph141
  br label %.lr.ph133

.lr.ph133:                                        ; preds = %.lr.ph133.preheader, %.lr.ph133
  %indvars.iv137 = phi i64 [ %indvars.iv.next138, %.lr.ph133 ], [ 0, %.lr.ph133.preheader ]
  %.037130 = phi i8 [ %1996, %.lr.ph133 ], [ %1991, %.lr.ph133.preheader ]
  call void @unroll_loop(i32 71)
  %indvars.iv.next138 = add nuw nsw i64 %indvars.iv137, 1
  %1995 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 %indvars.iv.next138
  %1996 = load i8, i8* %1995, align 1
  %1997 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 %indvars.iv.next138
  store i8 %.037130, i8* %1997, align 1
  %1998 = zext i8 %1996 to i32
  %1999 = icmp ne i32 %1992, %1998
  br i1 %1999, label %.lr.ph133, label %._crit_edge134

._crit_edge134:                                   ; preds = %.lr.ph133
  %split135 = phi i8 [ %1996, %.lr.ph133 ]
  %split136.wide = phi i64 [ %indvars.iv.next138, %.lr.ph133 ]
  %2000 = trunc i64 %split136.wide to i32
  br label %2001

; <label>:2001:                                   ; preds = %._crit_edge134, %.lr.ph141
  %.037.lcssa = phi i8 [ %split135, %._crit_edge134 ], [ %1991, %.lr.ph141 ]
  %.018.lcssa = phi i32 [ %2000, %._crit_edge134 ], [ 0, %.lr.ph141 ]
  %2002 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  store i8 %.037.lcssa, i8* %2002, align 1
  %2003 = trunc i32 %.018.lcssa to i8
  %2004 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 34
  %2005 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2004, i64 0, i64 %indvars.iv143
  store i8 %2003, i8* %2005, align 1
  %indvars.iv.next144 = add nuw nsw i64 %indvars.iv143, 1
  %exitcond14 = icmp ne i64 %indvars.iv.next144, %1985
  br i1 %exitcond14, label %.lr.ph141, label %._crit_edge142.loopexit

._crit_edge142.loopexit:                          ; preds = %2001
  br label %._crit_edge142

._crit_edge142:                                   ; preds = %._crit_edge142.loopexit, %1983
  %2006 = add i32 %23, 2
  %2007 = zext i32 %2006 to i64
  %2008 = zext i32 %.346 to i64
  br label %2009

; <label>:2009:                                   ; preds = %._crit_edge142, %2042
  %indvars.iv126 = phi i64 [ 0, %._crit_edge142 ], [ %indvars.iv.next127, %2042 ]
  call void @unroll_loop(i32 72)
  %2010 = icmp slt i32 0, %24
  br i1 %2010, label %.lr.ph117.preheader, label %._crit_edge118

.lr.ph117.preheader:                              ; preds = %2009
  br label %.lr.ph117

.lr.ph117:                                        ; preds = %.lr.ph117.preheader, %2036
  %indvars.iv121 = phi i64 [ %indvars.iv.next122, %2036 ], [ 0, %.lr.ph117.preheader ]
  %.038114 = phi i32 [ %.139, %2036 ], [ 32, %.lr.ph117.preheader ]
  %.040113 = phi i32 [ %.141, %2036 ], [ 0, %.lr.ph117.preheader ]
  call void @unroll_loop(i32 73)
  %2011 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2012 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2011, i64 0, i64 %indvars.iv126
  %2013 = getelementptr inbounds [258 x i8], [258 x i8]* %2012, i64 0, i64 %indvars.iv121
  %2014 = load i8, i8* %2013, align 1
  %2015 = zext i8 %2014 to i32
  %2016 = icmp sgt i32 %2015, %.040113
  br i1 %2016, label %2017, label %2023

; <label>:2017:                                   ; preds = %.lr.ph117
  %2018 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2019 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2018, i64 0, i64 %indvars.iv126
  %2020 = getelementptr inbounds [258 x i8], [258 x i8]* %2019, i64 0, i64 %indvars.iv121
  %2021 = load i8, i8* %2020, align 1
  %2022 = zext i8 %2021 to i32
  br label %2023

; <label>:2023:                                   ; preds = %2017, %.lr.ph117
  %.141 = phi i32 [ %2022, %2017 ], [ %.040113, %.lr.ph117 ]
  %2024 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2025 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2024, i64 0, i64 %indvars.iv126
  %2026 = getelementptr inbounds [258 x i8], [258 x i8]* %2025, i64 0, i64 %indvars.iv121
  %2027 = load i8, i8* %2026, align 1
  %2028 = zext i8 %2027 to i32
  %2029 = icmp slt i32 %2028, %.038114
  br i1 %2029, label %2030, label %2036

; <label>:2030:                                   ; preds = %2023
  %2031 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2032 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2031, i64 0, i64 %indvars.iv126
  %2033 = getelementptr inbounds [258 x i8], [258 x i8]* %2032, i64 0, i64 %indvars.iv121
  %2034 = load i8, i8* %2033, align 1
  %2035 = zext i8 %2034 to i32
  br label %2036

; <label>:2036:                                   ; preds = %2023, %2030
  %.139 = phi i32 [ %2035, %2030 ], [ %.038114, %2023 ]
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %exitcond12 = icmp ne i64 %indvars.iv.next122, %2007
  br i1 %exitcond12, label %.lr.ph117, label %._crit_edge118.loopexit

._crit_edge118.loopexit:                          ; preds = %2036
  %.040.lcssa.ph = phi i32 [ %.141, %2036 ]
  %.038.lcssa.ph = phi i32 [ %.139, %2036 ]
  br label %._crit_edge118

._crit_edge118:                                   ; preds = %._crit_edge118.loopexit, %2009
  %.040.lcssa = phi i32 [ 0, %2009 ], [ %.040.lcssa.ph, %._crit_edge118.loopexit ]
  %.038.lcssa = phi i32 [ 32, %2009 ], [ %.038.lcssa.ph, %._crit_edge118.loopexit ]
  %2037 = icmp sgt i32 %.040.lcssa, 17
  br i1 %2037, label %2038, label %2039

; <label>:2038:                                   ; preds = %._crit_edge118
  call void @BZ2_bz__AssertH__fail(i32 3004)
  br label %2039

; <label>:2039:                                   ; preds = %2038, %._crit_edge118
  %2040 = icmp slt i32 %.038.lcssa, 1
  br i1 %2040, label %2041, label %2042

; <label>:2041:                                   ; preds = %2039
  call void @BZ2_bz__AssertH__fail(i32 3005)
  br label %2042

; <label>:2042:                                   ; preds = %2041, %2039
  %2043 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 36
  %2044 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2043, i64 0, i64 %indvars.iv126
  %2045 = getelementptr inbounds [258 x i32], [258 x i32]* %2044, i64 0, i64 0
  %2046 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2047 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2046, i64 0, i64 %indvars.iv126
  %2048 = getelementptr inbounds [258 x i8], [258 x i8]* %2047, i64 0, i64 0
  call void @BZ2_hbAssignCodes(i32* %2045, i8* %2048, i32 %.038.lcssa, i32 %.040.lcssa, i32 %24)
  %indvars.iv.next127 = add nuw nsw i64 %indvars.iv126, 1
  %exitcond13 = icmp ne i64 %indvars.iv.next127, %2008
  br i1 %exitcond13, label %2009, label %.preheader6

.preheader6:                                      ; preds = %2042
  %indvars.iv110.ph = phi i64 [ 0, %2042 ]
  br label %2049

; <label>:2049:                                   ; preds = %.preheader6, %2061
  %indvars.iv110 = phi i64 [ %indvars.iv.next111, %2061 ], [ %indvars.iv110.ph, %.preheader6 ]
  %2050 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %indvars.iv110
  store i8 0, i8* %2050, align 1
  br label %2051

; <label>:2051:                                   ; preds = %2049, %2060
  %indvars.iv106 = phi i64 [ 0, %2049 ], [ %indvars.iv.next107, %2060 ]
  call void @unroll_loop(i32 74)
  %2052 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %2053 = mul nuw nsw i64 %indvars.iv110, 16
  %2054 = add nuw nsw i64 %2053, %indvars.iv106
  %2055 = getelementptr inbounds [256 x i8], [256 x i8]* %2052, i64 0, i64 %2054
  %2056 = load i8, i8* %2055, align 1
  %2057 = icmp ne i8 %2056, 0
  br i1 %2057, label %2058, label %2060

; <label>:2058:                                   ; preds = %2051
  %2059 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %indvars.iv110
  store i8 1, i8* %2059, align 1
  br label %2060

; <label>:2060:                                   ; preds = %2051, %2058
  %indvars.iv.next107 = add nuw nsw i64 %indvars.iv106, 1
  %exitcond108 = icmp ne i64 %indvars.iv.next107, 16
  br i1 %exitcond108, label %2051, label %2061

; <label>:2061:                                   ; preds = %2060
  %indvars.iv.next111 = add nuw nsw i64 %indvars.iv110, 1
  %exitcond112 = icmp ne i64 %indvars.iv.next111, 16
  br i1 %exitcond112, label %2049, label %2062

; <label>:2062:                                   ; preds = %2061
  %2063 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2064 = load i32, i32* %2063, align 4
  br label %2065

; <label>:2065:                                   ; preds = %2062, %2071
  %indvars.iv102 = phi i64 [ 0, %2062 ], [ %indvars.iv.next103, %2071 ]
  call void @unroll_loop(i32 75)
  %2066 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %indvars.iv102
  %2067 = load i8, i8* %2066, align 1
  %2068 = icmp ne i8 %2067, 0
  br i1 %2068, label %2069, label %2070

; <label>:2069:                                   ; preds = %2065
  call void @bsW(%struct.EState* %0, i32 1, i32 1)
  br label %2071

; <label>:2070:                                   ; preds = %2065
  call void @bsW(%struct.EState* %0, i32 1, i32 0)
  br label %2071

; <label>:2071:                                   ; preds = %2069, %2070
  %indvars.iv.next103 = add nuw nsw i64 %indvars.iv102, 1
  %exitcond104 = icmp ne i64 %indvars.iv.next103, 16
  br i1 %exitcond104, label %2065, label %.preheader5

.preheader5:                                      ; preds = %2071
  %indvars.iv98.ph = phi i64 [ 0, %2071 ]
  br label %2072

; <label>:2072:                                   ; preds = %.preheader5, %2086
  %indvars.iv98 = phi i64 [ %indvars.iv.next99, %2086 ], [ %indvars.iv98.ph, %.preheader5 ]
  %2073 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %indvars.iv98
  %2074 = load i8, i8* %2073, align 1
  %2075 = icmp ne i8 %2074, 0
  br i1 %2075, label %.preheader, label %2086

.preheader:                                       ; preds = %2072
  br label %2076

; <label>:2076:                                   ; preds = %.preheader, %2085
  %indvars.iv94 = phi i64 [ %indvars.iv.next95, %2085 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 76)
  %2077 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %2078 = mul nuw nsw i64 %indvars.iv98, 16
  %2079 = add nuw nsw i64 %2078, %indvars.iv94
  %2080 = getelementptr inbounds [256 x i8], [256 x i8]* %2077, i64 0, i64 %2079
  %2081 = load i8, i8* %2080, align 1
  %2082 = icmp ne i8 %2081, 0
  br i1 %2082, label %2083, label %2084

; <label>:2083:                                   ; preds = %2076
  call void @bsW(%struct.EState* %0, i32 1, i32 1)
  br label %2085

; <label>:2084:                                   ; preds = %2076
  call void @bsW(%struct.EState* %0, i32 1, i32 0)
  br label %2085

; <label>:2085:                                   ; preds = %2083, %2084
  %indvars.iv.next95 = add nuw nsw i64 %indvars.iv94, 1
  %exitcond96 = icmp ne i64 %indvars.iv.next95, 16
  br i1 %exitcond96, label %2076, label %.loopexit

.loopexit:                                        ; preds = %2085
  br label %2086

; <label>:2086:                                   ; preds = %.loopexit, %2072
  %indvars.iv.next99 = add nuw nsw i64 %indvars.iv98, 1
  %exitcond100 = icmp ne i64 %indvars.iv.next99, 16
  br i1 %exitcond100, label %2072, label %2087

; <label>:2087:                                   ; preds = %2086
  %2088 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %2089 = load i32, i32* %2088, align 8
  %2090 = icmp sge i32 %2089, 3
  br i1 %2090, label %2091, label %2098

; <label>:2091:                                   ; preds = %2087
  %2092 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2093 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2094 = load i32, i32* %2093, align 4
  %2095 = sub nsw i32 %2094, %2064
  %2096 = getelementptr [26 x i8], [26 x i8]* @.str.7.154, i32 0, i32 0
  %2097 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2092, i8* %2096, i32 %2095)
  br label %2098

; <label>:2098:                                   ; preds = %2091, %2087
  %2099 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2100 = load i32, i32* %2099, align 4
  call void @bsW(%struct.EState* %0, i32 3, i32 %.346)
  call void @bsW(%struct.EState* %0, i32 15, i32 %.035.lcssa)
  %2101 = icmp slt i32 0, %.035.lcssa
  br i1 %2101, label %.lr.ph87.preheader, label %._crit_edge88

.lr.ph87.preheader:                               ; preds = %2098
  %2102 = zext i32 %.035.lcssa to i64
  br label %.lr.ph87

.lr.ph87:                                         ; preds = %.lr.ph87.preheader, %._crit_edge84
  %indvars.iv89 = phi i64 [ %indvars.iv.next90, %._crit_edge84 ], [ 0, %.lr.ph87.preheader ]
  call void @unroll_loop(i32 77)
  %2103 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 34
  %2104 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2103, i64 0, i64 %indvars.iv89
  %2105 = load i8, i8* %2104, align 1
  %2106 = zext i8 %2105 to i32
  %2107 = icmp slt i32 0, %2106
  br i1 %2107, label %.lr.ph83.preheader, label %._crit_edge84

.lr.ph83.preheader:                               ; preds = %.lr.ph87
  br label %.lr.ph83

.lr.ph83:                                         ; preds = %.lr.ph83.preheader, %.lr.ph83
  %.32181 = phi i32 [ %2108, %.lr.ph83 ], [ 0, %.lr.ph83.preheader ]
  call void @unroll_loop(i32 78)
  call void @bsW(%struct.EState* %0, i32 1, i32 1)
  %2108 = add nuw nsw i32 %.32181, 1
  %2109 = load i8, i8* %2104, align 1
  %2110 = zext i8 %2109 to i32
  %2111 = icmp ult i32 %2108, %2110
  br i1 %2111, label %.lr.ph83, label %._crit_edge84.loopexit

._crit_edge84.loopexit:                           ; preds = %.lr.ph83
  br label %._crit_edge84

._crit_edge84:                                    ; preds = %._crit_edge84.loopexit, %.lr.ph87
  call void @bsW(%struct.EState* %0, i32 1, i32 0)
  %indvars.iv.next90 = add nuw nsw i64 %indvars.iv89, 1
  %exitcond11 = icmp ne i64 %indvars.iv.next90, %2102
  br i1 %exitcond11, label %.lr.ph87, label %._crit_edge88.loopexit

._crit_edge88.loopexit:                           ; preds = %._crit_edge84
  br label %._crit_edge88

._crit_edge88:                                    ; preds = %._crit_edge88.loopexit, %2098
  %2112 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %2113 = load i32, i32* %2112, align 8
  %2114 = icmp sge i32 %2113, 3
  br i1 %2114, label %2115, label %2122

; <label>:2115:                                   ; preds = %._crit_edge88
  %2116 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2117 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2118 = load i32, i32* %2117, align 4
  %2119 = sub nsw i32 %2118, %2100
  %2120 = getelementptr [15 x i8], [15 x i8]* @.str.8.155, i32 0, i32 0
  %2121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2116, i8* %2120, i32 %2119)
  br label %2122

; <label>:2122:                                   ; preds = %2115, %._crit_edge88
  %2123 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2124 = load i32, i32* %2123, align 4
  %2125 = add i32 %23, 2
  %2126 = zext i32 %2125 to i64
  %2127 = zext i32 %.346 to i64
  br label %2128

; <label>:2128:                                   ; preds = %2122, %._crit_edge73
  %indvars.iv77 = phi i64 [ 0, %2122 ], [ %indvars.iv.next78, %._crit_edge73 ]
  call void @unroll_loop(i32 79)
  %2129 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2130 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2129, i64 0, i64 %indvars.iv77
  %2131 = getelementptr inbounds [258 x i8], [258 x i8]* %2130, i64 0, i64 0
  %2132 = load i8, i8* %2131, align 2
  %2133 = zext i8 %2132 to i32
  call void @bsW(%struct.EState* %0, i32 5, i32 %2133)
  %2134 = icmp slt i32 0, %24
  br i1 %2134, label %.lr.ph72.preheader, label %._crit_edge73

.lr.ph72.preheader:                               ; preds = %2128
  br label %.lr.ph72

.lr.ph72:                                         ; preds = %.lr.ph72.preheader, %._crit_edge67
  %indvars.iv74 = phi i64 [ %indvars.iv.next75, %._crit_edge67 ], [ 0, %.lr.ph72.preheader ]
  %.070 = phi i32 [ %.2.lcssa, %._crit_edge67 ], [ %2133, %.lr.ph72.preheader ]
  call void @unroll_loop(i32 80)
  %2135 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2136 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2135, i64 0, i64 %indvars.iv77
  %2137 = getelementptr inbounds [258 x i8], [258 x i8]* %2136, i64 0, i64 %indvars.iv74
  %2138 = load i8, i8* %2137, align 1
  %2139 = zext i8 %2138 to i32
  %2140 = icmp slt i32 %.070, %2139
  br i1 %2140, label %.lr.ph61.preheader, label %._crit_edge62

.lr.ph61.preheader:                               ; preds = %.lr.ph72
  br label %.lr.ph61

.lr.ph61:                                         ; preds = %.lr.ph61.preheader, %.lr.ph61
  %.159 = phi i32 [ %2141, %.lr.ph61 ], [ %.070, %.lr.ph61.preheader ]
  call void @unroll_loop(i32 81)
  call void @bsW(%struct.EState* %0, i32 2, i32 2)
  %2141 = add nsw i32 %.159, 1
  %2142 = load i8, i8* %2137, align 1
  %2143 = zext i8 %2142 to i32
  %2144 = icmp slt i32 %2141, %2143
  br i1 %2144, label %.lr.ph61, label %._crit_edge62.loopexit

._crit_edge62.loopexit:                           ; preds = %.lr.ph61
  %.1.lcssa.ph = phi i32 [ %2141, %.lr.ph61 ]
  br label %._crit_edge62

._crit_edge62:                                    ; preds = %._crit_edge62.loopexit, %.lr.ph72
  %.1.lcssa = phi i32 [ %.070, %.lr.ph72 ], [ %.1.lcssa.ph, %._crit_edge62.loopexit ]
  %2145 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2146 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2145, i64 0, i64 %indvars.iv77
  %2147 = getelementptr inbounds [258 x i8], [258 x i8]* %2146, i64 0, i64 %indvars.iv74
  %2148 = load i8, i8* %2147, align 1
  %2149 = zext i8 %2148 to i32
  %2150 = icmp sgt i32 %.1.lcssa, %2149
  br i1 %2150, label %.lr.ph66.preheader, label %._crit_edge67

.lr.ph66.preheader:                               ; preds = %._crit_edge62
  br label %.lr.ph66

.lr.ph66:                                         ; preds = %.lr.ph66.preheader, %.lr.ph66
  %.264 = phi i32 [ %2151, %.lr.ph66 ], [ %.1.lcssa, %.lr.ph66.preheader ]
  call void @unroll_loop(i32 82)
  call void @bsW(%struct.EState* %0, i32 2, i32 3)
  %2151 = add nsw i32 %.264, -1
  %2152 = load i8, i8* %2147, align 1
  %2153 = zext i8 %2152 to i32
  %2154 = icmp sgt i32 %2151, %2153
  br i1 %2154, label %.lr.ph66, label %._crit_edge67.loopexit

._crit_edge67.loopexit:                           ; preds = %.lr.ph66
  %.2.lcssa.ph = phi i32 [ %2151, %.lr.ph66 ]
  br label %._crit_edge67

._crit_edge67:                                    ; preds = %._crit_edge67.loopexit, %._crit_edge62
  %.2.lcssa = phi i32 [ %.1.lcssa, %._crit_edge62 ], [ %.2.lcssa.ph, %._crit_edge67.loopexit ]
  call void @bsW(%struct.EState* %0, i32 1, i32 0)
  %indvars.iv.next75 = add nuw nsw i64 %indvars.iv74, 1
  %exitcond10 = icmp ne i64 %indvars.iv.next75, %2126
  br i1 %exitcond10, label %.lr.ph72, label %._crit_edge73.loopexit

._crit_edge73.loopexit:                           ; preds = %._crit_edge67
  br label %._crit_edge73

._crit_edge73:                                    ; preds = %._crit_edge73.loopexit, %2128
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %exitcond = icmp ne i64 %indvars.iv.next78, %2127
  br i1 %exitcond, label %2128, label %2155

; <label>:2155:                                   ; preds = %._crit_edge73
  %2156 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %2157 = load i32, i32* %2156, align 8
  %2158 = icmp sge i32 %2157, 3
  br i1 %2158, label %2159, label %2166

; <label>:2159:                                   ; preds = %2155
  %2160 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2161 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2162 = load i32, i32* %2161, align 4
  %2163 = sub nsw i32 %2162, %2124
  %2164 = getelementptr [18 x i8], [18 x i8]* @.str.9.156, i32 0, i32 0
  %2165 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2160, i8* %2164, i32 %2163)
  br label %2166

; <label>:2166:                                   ; preds = %2159, %2155
  %2167 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2168 = load i32, i32* %2167, align 4
  %2169 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %2170 = load i32, i32* %2169, align 4
  %2171 = icmp sge i32 0, %2170
  br i1 %2171, label %._crit_edge58, label %.lr.ph57.preheader

.lr.ph57.preheader:                               ; preds = %2166
  br label %.lr.ph57

.lr.ph57:                                         ; preds = %.lr.ph57.preheader, %._crit_edge
  %.22455 = phi i32 [ %2792, %._crit_edge ], [ 0, %.lr.ph57.preheader ]
  %.04252 = phi i32 [ %2793, %._crit_edge ], [ 0, %.lr.ph57.preheader ]
  call void @unroll_loop(i32 83)
  %2172 = add nsw i32 %.22455, 50
  %2173 = sub nsw i32 %2172, 1
  %2174 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %2175 = load i32, i32* %2174, align 4
  %2176 = icmp sge i32 %2173, %2175
  br i1 %2176, label %2177, label %2181

; <label>:2177:                                   ; preds = %.lr.ph57
  %2178 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 31
  %2179 = load i32, i32* %2178, align 4
  %2180 = sub nsw i32 %2179, 1
  br label %2181

; <label>:2181:                                   ; preds = %2177, %.lr.ph57
  %.328 = phi i32 [ %2180, %2177 ], [ %2173, %.lr.ph57 ]
  %2182 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 33
  %2183 = sext i32 %.04252 to i64
  %2184 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2182, i64 0, i64 %2183
  %2185 = load i8, i8* %2184, align 1
  %2186 = zext i8 %2185 to i32
  %2187 = icmp slt i32 %2186, %.346
  br i1 %2187, label %2189, label %2188

; <label>:2188:                                   ; preds = %2181
  call void @BZ2_bz__AssertH__fail(i32 3006)
  br label %2189

; <label>:2189:                                   ; preds = %2188, %2181
  %2190 = icmp eq i32 %.346, 6
  br i1 %2190, label %2191, label %2761

; <label>:2191:                                   ; preds = %2189
  %2192 = sub nsw i32 %.328, %.22455
  %2193 = add nsw i32 %2192, 1
  %2194 = icmp eq i32 50, %2193
  br i1 %2194, label %2195, label %2761

; <label>:2195:                                   ; preds = %2191
  %2196 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2197 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 33
  %2198 = sext i32 %.04252 to i64
  %2199 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2197, i64 0, i64 %2198
  %2200 = load i8, i8* %2199, align 1
  %2201 = zext i8 %2200 to i64
  %2202 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2196, i64 0, i64 %2201
  %2203 = getelementptr inbounds [258 x i8], [258 x i8]* %2202, i64 0, i64 0
  %2204 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 36
  %2205 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 33
  %2206 = sext i32 %.04252 to i64
  %2207 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2205, i64 0, i64 %2206
  %2208 = load i8, i8* %2207, align 1
  %2209 = zext i8 %2208 to i64
  %2210 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2204, i64 0, i64 %2209
  %2211 = getelementptr inbounds [258 x i32], [258 x i32]* %2210, i64 0, i64 0
  %2212 = sext i32 %.22455 to i64
  %2213 = getelementptr inbounds i16, i16* %7, i64 %2212
  %2214 = load i16, i16* %2213, align 2
  %2215 = zext i16 %2214 to i64
  %2216 = getelementptr inbounds i8, i8* %2203, i64 %2215
  %2217 = load i8, i8* %2216, align 1
  %2218 = zext i8 %2217 to i32
  %2219 = zext i16 %2214 to i64
  %2220 = getelementptr inbounds i32, i32* %2211, i64 %2219
  %2221 = load i32, i32* %2220, align 4
  call void @bsW(%struct.EState* %0, i32 %2218, i32 %2221)
  %2222 = add nsw i32 %.22455, 1
  %2223 = sext i32 %2222 to i64
  %2224 = getelementptr inbounds i16, i16* %7, i64 %2223
  %2225 = load i16, i16* %2224, align 2
  %2226 = zext i16 %2225 to i64
  %2227 = getelementptr inbounds i8, i8* %2203, i64 %2226
  %2228 = load i8, i8* %2227, align 1
  %2229 = zext i8 %2228 to i32
  %2230 = zext i16 %2225 to i64
  %2231 = getelementptr inbounds i32, i32* %2211, i64 %2230
  %2232 = load i32, i32* %2231, align 4
  call void @bsW(%struct.EState* %0, i32 %2229, i32 %2232)
  %2233 = add nsw i32 %.22455, 2
  %2234 = sext i32 %2233 to i64
  %2235 = getelementptr inbounds i16, i16* %7, i64 %2234
  %2236 = load i16, i16* %2235, align 2
  %2237 = zext i16 %2236 to i64
  %2238 = getelementptr inbounds i8, i8* %2203, i64 %2237
  %2239 = load i8, i8* %2238, align 1
  %2240 = zext i8 %2239 to i32
  %2241 = zext i16 %2236 to i64
  %2242 = getelementptr inbounds i32, i32* %2211, i64 %2241
  %2243 = load i32, i32* %2242, align 4
  call void @bsW(%struct.EState* %0, i32 %2240, i32 %2243)
  %2244 = add nsw i32 %.22455, 3
  %2245 = sext i32 %2244 to i64
  %2246 = getelementptr inbounds i16, i16* %7, i64 %2245
  %2247 = load i16, i16* %2246, align 2
  %2248 = zext i16 %2247 to i64
  %2249 = getelementptr inbounds i8, i8* %2203, i64 %2248
  %2250 = load i8, i8* %2249, align 1
  %2251 = zext i8 %2250 to i32
  %2252 = zext i16 %2247 to i64
  %2253 = getelementptr inbounds i32, i32* %2211, i64 %2252
  %2254 = load i32, i32* %2253, align 4
  call void @bsW(%struct.EState* %0, i32 %2251, i32 %2254)
  %2255 = add nsw i32 %.22455, 4
  %2256 = sext i32 %2255 to i64
  %2257 = getelementptr inbounds i16, i16* %7, i64 %2256
  %2258 = load i16, i16* %2257, align 2
  %2259 = zext i16 %2258 to i64
  %2260 = getelementptr inbounds i8, i8* %2203, i64 %2259
  %2261 = load i8, i8* %2260, align 1
  %2262 = zext i8 %2261 to i32
  %2263 = zext i16 %2258 to i64
  %2264 = getelementptr inbounds i32, i32* %2211, i64 %2263
  %2265 = load i32, i32* %2264, align 4
  call void @bsW(%struct.EState* %0, i32 %2262, i32 %2265)
  %2266 = add nsw i32 %.22455, 5
  %2267 = sext i32 %2266 to i64
  %2268 = getelementptr inbounds i16, i16* %7, i64 %2267
  %2269 = load i16, i16* %2268, align 2
  %2270 = zext i16 %2269 to i64
  %2271 = getelementptr inbounds i8, i8* %2203, i64 %2270
  %2272 = load i8, i8* %2271, align 1
  %2273 = zext i8 %2272 to i32
  %2274 = zext i16 %2269 to i64
  %2275 = getelementptr inbounds i32, i32* %2211, i64 %2274
  %2276 = load i32, i32* %2275, align 4
  call void @bsW(%struct.EState* %0, i32 %2273, i32 %2276)
  %2277 = add nsw i32 %.22455, 6
  %2278 = sext i32 %2277 to i64
  %2279 = getelementptr inbounds i16, i16* %7, i64 %2278
  %2280 = load i16, i16* %2279, align 2
  %2281 = zext i16 %2280 to i64
  %2282 = getelementptr inbounds i8, i8* %2203, i64 %2281
  %2283 = load i8, i8* %2282, align 1
  %2284 = zext i8 %2283 to i32
  %2285 = zext i16 %2280 to i64
  %2286 = getelementptr inbounds i32, i32* %2211, i64 %2285
  %2287 = load i32, i32* %2286, align 4
  call void @bsW(%struct.EState* %0, i32 %2284, i32 %2287)
  %2288 = add nsw i32 %.22455, 7
  %2289 = sext i32 %2288 to i64
  %2290 = getelementptr inbounds i16, i16* %7, i64 %2289
  %2291 = load i16, i16* %2290, align 2
  %2292 = zext i16 %2291 to i64
  %2293 = getelementptr inbounds i8, i8* %2203, i64 %2292
  %2294 = load i8, i8* %2293, align 1
  %2295 = zext i8 %2294 to i32
  %2296 = zext i16 %2291 to i64
  %2297 = getelementptr inbounds i32, i32* %2211, i64 %2296
  %2298 = load i32, i32* %2297, align 4
  call void @bsW(%struct.EState* %0, i32 %2295, i32 %2298)
  %2299 = add nsw i32 %.22455, 8
  %2300 = sext i32 %2299 to i64
  %2301 = getelementptr inbounds i16, i16* %7, i64 %2300
  %2302 = load i16, i16* %2301, align 2
  %2303 = zext i16 %2302 to i64
  %2304 = getelementptr inbounds i8, i8* %2203, i64 %2303
  %2305 = load i8, i8* %2304, align 1
  %2306 = zext i8 %2305 to i32
  %2307 = zext i16 %2302 to i64
  %2308 = getelementptr inbounds i32, i32* %2211, i64 %2307
  %2309 = load i32, i32* %2308, align 4
  call void @bsW(%struct.EState* %0, i32 %2306, i32 %2309)
  %2310 = add nsw i32 %.22455, 9
  %2311 = sext i32 %2310 to i64
  %2312 = getelementptr inbounds i16, i16* %7, i64 %2311
  %2313 = load i16, i16* %2312, align 2
  %2314 = zext i16 %2313 to i64
  %2315 = getelementptr inbounds i8, i8* %2203, i64 %2314
  %2316 = load i8, i8* %2315, align 1
  %2317 = zext i8 %2316 to i32
  %2318 = zext i16 %2313 to i64
  %2319 = getelementptr inbounds i32, i32* %2211, i64 %2318
  %2320 = load i32, i32* %2319, align 4
  call void @bsW(%struct.EState* %0, i32 %2317, i32 %2320)
  %2321 = add nsw i32 %.22455, 10
  %2322 = sext i32 %2321 to i64
  %2323 = getelementptr inbounds i16, i16* %7, i64 %2322
  %2324 = load i16, i16* %2323, align 2
  %2325 = zext i16 %2324 to i64
  %2326 = getelementptr inbounds i8, i8* %2203, i64 %2325
  %2327 = load i8, i8* %2326, align 1
  %2328 = zext i8 %2327 to i32
  %2329 = zext i16 %2324 to i64
  %2330 = getelementptr inbounds i32, i32* %2211, i64 %2329
  %2331 = load i32, i32* %2330, align 4
  call void @bsW(%struct.EState* %0, i32 %2328, i32 %2331)
  %2332 = add nsw i32 %.22455, 11
  %2333 = sext i32 %2332 to i64
  %2334 = getelementptr inbounds i16, i16* %7, i64 %2333
  %2335 = load i16, i16* %2334, align 2
  %2336 = zext i16 %2335 to i64
  %2337 = getelementptr inbounds i8, i8* %2203, i64 %2336
  %2338 = load i8, i8* %2337, align 1
  %2339 = zext i8 %2338 to i32
  %2340 = zext i16 %2335 to i64
  %2341 = getelementptr inbounds i32, i32* %2211, i64 %2340
  %2342 = load i32, i32* %2341, align 4
  call void @bsW(%struct.EState* %0, i32 %2339, i32 %2342)
  %2343 = add nsw i32 %.22455, 12
  %2344 = sext i32 %2343 to i64
  %2345 = getelementptr inbounds i16, i16* %7, i64 %2344
  %2346 = load i16, i16* %2345, align 2
  %2347 = zext i16 %2346 to i64
  %2348 = getelementptr inbounds i8, i8* %2203, i64 %2347
  %2349 = load i8, i8* %2348, align 1
  %2350 = zext i8 %2349 to i32
  %2351 = zext i16 %2346 to i64
  %2352 = getelementptr inbounds i32, i32* %2211, i64 %2351
  %2353 = load i32, i32* %2352, align 4
  call void @bsW(%struct.EState* %0, i32 %2350, i32 %2353)
  %2354 = add nsw i32 %.22455, 13
  %2355 = sext i32 %2354 to i64
  %2356 = getelementptr inbounds i16, i16* %7, i64 %2355
  %2357 = load i16, i16* %2356, align 2
  %2358 = zext i16 %2357 to i64
  %2359 = getelementptr inbounds i8, i8* %2203, i64 %2358
  %2360 = load i8, i8* %2359, align 1
  %2361 = zext i8 %2360 to i32
  %2362 = zext i16 %2357 to i64
  %2363 = getelementptr inbounds i32, i32* %2211, i64 %2362
  %2364 = load i32, i32* %2363, align 4
  call void @bsW(%struct.EState* %0, i32 %2361, i32 %2364)
  %2365 = add nsw i32 %.22455, 14
  %2366 = sext i32 %2365 to i64
  %2367 = getelementptr inbounds i16, i16* %7, i64 %2366
  %2368 = load i16, i16* %2367, align 2
  %2369 = zext i16 %2368 to i64
  %2370 = getelementptr inbounds i8, i8* %2203, i64 %2369
  %2371 = load i8, i8* %2370, align 1
  %2372 = zext i8 %2371 to i32
  %2373 = zext i16 %2368 to i64
  %2374 = getelementptr inbounds i32, i32* %2211, i64 %2373
  %2375 = load i32, i32* %2374, align 4
  call void @bsW(%struct.EState* %0, i32 %2372, i32 %2375)
  %2376 = add nsw i32 %.22455, 15
  %2377 = sext i32 %2376 to i64
  %2378 = getelementptr inbounds i16, i16* %7, i64 %2377
  %2379 = load i16, i16* %2378, align 2
  %2380 = zext i16 %2379 to i64
  %2381 = getelementptr inbounds i8, i8* %2203, i64 %2380
  %2382 = load i8, i8* %2381, align 1
  %2383 = zext i8 %2382 to i32
  %2384 = zext i16 %2379 to i64
  %2385 = getelementptr inbounds i32, i32* %2211, i64 %2384
  %2386 = load i32, i32* %2385, align 4
  call void @bsW(%struct.EState* %0, i32 %2383, i32 %2386)
  %2387 = add nsw i32 %.22455, 16
  %2388 = sext i32 %2387 to i64
  %2389 = getelementptr inbounds i16, i16* %7, i64 %2388
  %2390 = load i16, i16* %2389, align 2
  %2391 = zext i16 %2390 to i64
  %2392 = getelementptr inbounds i8, i8* %2203, i64 %2391
  %2393 = load i8, i8* %2392, align 1
  %2394 = zext i8 %2393 to i32
  %2395 = zext i16 %2390 to i64
  %2396 = getelementptr inbounds i32, i32* %2211, i64 %2395
  %2397 = load i32, i32* %2396, align 4
  call void @bsW(%struct.EState* %0, i32 %2394, i32 %2397)
  %2398 = add nsw i32 %.22455, 17
  %2399 = sext i32 %2398 to i64
  %2400 = getelementptr inbounds i16, i16* %7, i64 %2399
  %2401 = load i16, i16* %2400, align 2
  %2402 = zext i16 %2401 to i64
  %2403 = getelementptr inbounds i8, i8* %2203, i64 %2402
  %2404 = load i8, i8* %2403, align 1
  %2405 = zext i8 %2404 to i32
  %2406 = zext i16 %2401 to i64
  %2407 = getelementptr inbounds i32, i32* %2211, i64 %2406
  %2408 = load i32, i32* %2407, align 4
  call void @bsW(%struct.EState* %0, i32 %2405, i32 %2408)
  %2409 = add nsw i32 %.22455, 18
  %2410 = sext i32 %2409 to i64
  %2411 = getelementptr inbounds i16, i16* %7, i64 %2410
  %2412 = load i16, i16* %2411, align 2
  %2413 = zext i16 %2412 to i64
  %2414 = getelementptr inbounds i8, i8* %2203, i64 %2413
  %2415 = load i8, i8* %2414, align 1
  %2416 = zext i8 %2415 to i32
  %2417 = zext i16 %2412 to i64
  %2418 = getelementptr inbounds i32, i32* %2211, i64 %2417
  %2419 = load i32, i32* %2418, align 4
  call void @bsW(%struct.EState* %0, i32 %2416, i32 %2419)
  %2420 = add nsw i32 %.22455, 19
  %2421 = sext i32 %2420 to i64
  %2422 = getelementptr inbounds i16, i16* %7, i64 %2421
  %2423 = load i16, i16* %2422, align 2
  %2424 = zext i16 %2423 to i64
  %2425 = getelementptr inbounds i8, i8* %2203, i64 %2424
  %2426 = load i8, i8* %2425, align 1
  %2427 = zext i8 %2426 to i32
  %2428 = zext i16 %2423 to i64
  %2429 = getelementptr inbounds i32, i32* %2211, i64 %2428
  %2430 = load i32, i32* %2429, align 4
  call void @bsW(%struct.EState* %0, i32 %2427, i32 %2430)
  %2431 = add nsw i32 %.22455, 20
  %2432 = sext i32 %2431 to i64
  %2433 = getelementptr inbounds i16, i16* %7, i64 %2432
  %2434 = load i16, i16* %2433, align 2
  %2435 = zext i16 %2434 to i64
  %2436 = getelementptr inbounds i8, i8* %2203, i64 %2435
  %2437 = load i8, i8* %2436, align 1
  %2438 = zext i8 %2437 to i32
  %2439 = zext i16 %2434 to i64
  %2440 = getelementptr inbounds i32, i32* %2211, i64 %2439
  %2441 = load i32, i32* %2440, align 4
  call void @bsW(%struct.EState* %0, i32 %2438, i32 %2441)
  %2442 = add nsw i32 %.22455, 21
  %2443 = sext i32 %2442 to i64
  %2444 = getelementptr inbounds i16, i16* %7, i64 %2443
  %2445 = load i16, i16* %2444, align 2
  %2446 = zext i16 %2445 to i64
  %2447 = getelementptr inbounds i8, i8* %2203, i64 %2446
  %2448 = load i8, i8* %2447, align 1
  %2449 = zext i8 %2448 to i32
  %2450 = zext i16 %2445 to i64
  %2451 = getelementptr inbounds i32, i32* %2211, i64 %2450
  %2452 = load i32, i32* %2451, align 4
  call void @bsW(%struct.EState* %0, i32 %2449, i32 %2452)
  %2453 = add nsw i32 %.22455, 22
  %2454 = sext i32 %2453 to i64
  %2455 = getelementptr inbounds i16, i16* %7, i64 %2454
  %2456 = load i16, i16* %2455, align 2
  %2457 = zext i16 %2456 to i64
  %2458 = getelementptr inbounds i8, i8* %2203, i64 %2457
  %2459 = load i8, i8* %2458, align 1
  %2460 = zext i8 %2459 to i32
  %2461 = zext i16 %2456 to i64
  %2462 = getelementptr inbounds i32, i32* %2211, i64 %2461
  %2463 = load i32, i32* %2462, align 4
  call void @bsW(%struct.EState* %0, i32 %2460, i32 %2463)
  %2464 = add nsw i32 %.22455, 23
  %2465 = sext i32 %2464 to i64
  %2466 = getelementptr inbounds i16, i16* %7, i64 %2465
  %2467 = load i16, i16* %2466, align 2
  %2468 = zext i16 %2467 to i64
  %2469 = getelementptr inbounds i8, i8* %2203, i64 %2468
  %2470 = load i8, i8* %2469, align 1
  %2471 = zext i8 %2470 to i32
  %2472 = zext i16 %2467 to i64
  %2473 = getelementptr inbounds i32, i32* %2211, i64 %2472
  %2474 = load i32, i32* %2473, align 4
  call void @bsW(%struct.EState* %0, i32 %2471, i32 %2474)
  %2475 = add nsw i32 %.22455, 24
  %2476 = sext i32 %2475 to i64
  %2477 = getelementptr inbounds i16, i16* %7, i64 %2476
  %2478 = load i16, i16* %2477, align 2
  %2479 = zext i16 %2478 to i64
  %2480 = getelementptr inbounds i8, i8* %2203, i64 %2479
  %2481 = load i8, i8* %2480, align 1
  %2482 = zext i8 %2481 to i32
  %2483 = zext i16 %2478 to i64
  %2484 = getelementptr inbounds i32, i32* %2211, i64 %2483
  %2485 = load i32, i32* %2484, align 4
  call void @bsW(%struct.EState* %0, i32 %2482, i32 %2485)
  %2486 = add nsw i32 %.22455, 25
  %2487 = sext i32 %2486 to i64
  %2488 = getelementptr inbounds i16, i16* %7, i64 %2487
  %2489 = load i16, i16* %2488, align 2
  %2490 = zext i16 %2489 to i64
  %2491 = getelementptr inbounds i8, i8* %2203, i64 %2490
  %2492 = load i8, i8* %2491, align 1
  %2493 = zext i8 %2492 to i32
  %2494 = zext i16 %2489 to i64
  %2495 = getelementptr inbounds i32, i32* %2211, i64 %2494
  %2496 = load i32, i32* %2495, align 4
  call void @bsW(%struct.EState* %0, i32 %2493, i32 %2496)
  %2497 = add nsw i32 %.22455, 26
  %2498 = sext i32 %2497 to i64
  %2499 = getelementptr inbounds i16, i16* %7, i64 %2498
  %2500 = load i16, i16* %2499, align 2
  %2501 = zext i16 %2500 to i64
  %2502 = getelementptr inbounds i8, i8* %2203, i64 %2501
  %2503 = load i8, i8* %2502, align 1
  %2504 = zext i8 %2503 to i32
  %2505 = zext i16 %2500 to i64
  %2506 = getelementptr inbounds i32, i32* %2211, i64 %2505
  %2507 = load i32, i32* %2506, align 4
  call void @bsW(%struct.EState* %0, i32 %2504, i32 %2507)
  %2508 = add nsw i32 %.22455, 27
  %2509 = sext i32 %2508 to i64
  %2510 = getelementptr inbounds i16, i16* %7, i64 %2509
  %2511 = load i16, i16* %2510, align 2
  %2512 = zext i16 %2511 to i64
  %2513 = getelementptr inbounds i8, i8* %2203, i64 %2512
  %2514 = load i8, i8* %2513, align 1
  %2515 = zext i8 %2514 to i32
  %2516 = zext i16 %2511 to i64
  %2517 = getelementptr inbounds i32, i32* %2211, i64 %2516
  %2518 = load i32, i32* %2517, align 4
  call void @bsW(%struct.EState* %0, i32 %2515, i32 %2518)
  %2519 = add nsw i32 %.22455, 28
  %2520 = sext i32 %2519 to i64
  %2521 = getelementptr inbounds i16, i16* %7, i64 %2520
  %2522 = load i16, i16* %2521, align 2
  %2523 = zext i16 %2522 to i64
  %2524 = getelementptr inbounds i8, i8* %2203, i64 %2523
  %2525 = load i8, i8* %2524, align 1
  %2526 = zext i8 %2525 to i32
  %2527 = zext i16 %2522 to i64
  %2528 = getelementptr inbounds i32, i32* %2211, i64 %2527
  %2529 = load i32, i32* %2528, align 4
  call void @bsW(%struct.EState* %0, i32 %2526, i32 %2529)
  %2530 = add nsw i32 %.22455, 29
  %2531 = sext i32 %2530 to i64
  %2532 = getelementptr inbounds i16, i16* %7, i64 %2531
  %2533 = load i16, i16* %2532, align 2
  %2534 = zext i16 %2533 to i64
  %2535 = getelementptr inbounds i8, i8* %2203, i64 %2534
  %2536 = load i8, i8* %2535, align 1
  %2537 = zext i8 %2536 to i32
  %2538 = zext i16 %2533 to i64
  %2539 = getelementptr inbounds i32, i32* %2211, i64 %2538
  %2540 = load i32, i32* %2539, align 4
  call void @bsW(%struct.EState* %0, i32 %2537, i32 %2540)
  %2541 = add nsw i32 %.22455, 30
  %2542 = sext i32 %2541 to i64
  %2543 = getelementptr inbounds i16, i16* %7, i64 %2542
  %2544 = load i16, i16* %2543, align 2
  %2545 = zext i16 %2544 to i64
  %2546 = getelementptr inbounds i8, i8* %2203, i64 %2545
  %2547 = load i8, i8* %2546, align 1
  %2548 = zext i8 %2547 to i32
  %2549 = zext i16 %2544 to i64
  %2550 = getelementptr inbounds i32, i32* %2211, i64 %2549
  %2551 = load i32, i32* %2550, align 4
  call void @bsW(%struct.EState* %0, i32 %2548, i32 %2551)
  %2552 = add nsw i32 %.22455, 31
  %2553 = sext i32 %2552 to i64
  %2554 = getelementptr inbounds i16, i16* %7, i64 %2553
  %2555 = load i16, i16* %2554, align 2
  %2556 = zext i16 %2555 to i64
  %2557 = getelementptr inbounds i8, i8* %2203, i64 %2556
  %2558 = load i8, i8* %2557, align 1
  %2559 = zext i8 %2558 to i32
  %2560 = zext i16 %2555 to i64
  %2561 = getelementptr inbounds i32, i32* %2211, i64 %2560
  %2562 = load i32, i32* %2561, align 4
  call void @bsW(%struct.EState* %0, i32 %2559, i32 %2562)
  %2563 = add nsw i32 %.22455, 32
  %2564 = sext i32 %2563 to i64
  %2565 = getelementptr inbounds i16, i16* %7, i64 %2564
  %2566 = load i16, i16* %2565, align 2
  %2567 = zext i16 %2566 to i64
  %2568 = getelementptr inbounds i8, i8* %2203, i64 %2567
  %2569 = load i8, i8* %2568, align 1
  %2570 = zext i8 %2569 to i32
  %2571 = zext i16 %2566 to i64
  %2572 = getelementptr inbounds i32, i32* %2211, i64 %2571
  %2573 = load i32, i32* %2572, align 4
  call void @bsW(%struct.EState* %0, i32 %2570, i32 %2573)
  %2574 = add nsw i32 %.22455, 33
  %2575 = sext i32 %2574 to i64
  %2576 = getelementptr inbounds i16, i16* %7, i64 %2575
  %2577 = load i16, i16* %2576, align 2
  %2578 = zext i16 %2577 to i64
  %2579 = getelementptr inbounds i8, i8* %2203, i64 %2578
  %2580 = load i8, i8* %2579, align 1
  %2581 = zext i8 %2580 to i32
  %2582 = zext i16 %2577 to i64
  %2583 = getelementptr inbounds i32, i32* %2211, i64 %2582
  %2584 = load i32, i32* %2583, align 4
  call void @bsW(%struct.EState* %0, i32 %2581, i32 %2584)
  %2585 = add nsw i32 %.22455, 34
  %2586 = sext i32 %2585 to i64
  %2587 = getelementptr inbounds i16, i16* %7, i64 %2586
  %2588 = load i16, i16* %2587, align 2
  %2589 = zext i16 %2588 to i64
  %2590 = getelementptr inbounds i8, i8* %2203, i64 %2589
  %2591 = load i8, i8* %2590, align 1
  %2592 = zext i8 %2591 to i32
  %2593 = zext i16 %2588 to i64
  %2594 = getelementptr inbounds i32, i32* %2211, i64 %2593
  %2595 = load i32, i32* %2594, align 4
  call void @bsW(%struct.EState* %0, i32 %2592, i32 %2595)
  %2596 = add nsw i32 %.22455, 35
  %2597 = sext i32 %2596 to i64
  %2598 = getelementptr inbounds i16, i16* %7, i64 %2597
  %2599 = load i16, i16* %2598, align 2
  %2600 = zext i16 %2599 to i64
  %2601 = getelementptr inbounds i8, i8* %2203, i64 %2600
  %2602 = load i8, i8* %2601, align 1
  %2603 = zext i8 %2602 to i32
  %2604 = zext i16 %2599 to i64
  %2605 = getelementptr inbounds i32, i32* %2211, i64 %2604
  %2606 = load i32, i32* %2605, align 4
  call void @bsW(%struct.EState* %0, i32 %2603, i32 %2606)
  %2607 = add nsw i32 %.22455, 36
  %2608 = sext i32 %2607 to i64
  %2609 = getelementptr inbounds i16, i16* %7, i64 %2608
  %2610 = load i16, i16* %2609, align 2
  %2611 = zext i16 %2610 to i64
  %2612 = getelementptr inbounds i8, i8* %2203, i64 %2611
  %2613 = load i8, i8* %2612, align 1
  %2614 = zext i8 %2613 to i32
  %2615 = zext i16 %2610 to i64
  %2616 = getelementptr inbounds i32, i32* %2211, i64 %2615
  %2617 = load i32, i32* %2616, align 4
  call void @bsW(%struct.EState* %0, i32 %2614, i32 %2617)
  %2618 = add nsw i32 %.22455, 37
  %2619 = sext i32 %2618 to i64
  %2620 = getelementptr inbounds i16, i16* %7, i64 %2619
  %2621 = load i16, i16* %2620, align 2
  %2622 = zext i16 %2621 to i64
  %2623 = getelementptr inbounds i8, i8* %2203, i64 %2622
  %2624 = load i8, i8* %2623, align 1
  %2625 = zext i8 %2624 to i32
  %2626 = zext i16 %2621 to i64
  %2627 = getelementptr inbounds i32, i32* %2211, i64 %2626
  %2628 = load i32, i32* %2627, align 4
  call void @bsW(%struct.EState* %0, i32 %2625, i32 %2628)
  %2629 = add nsw i32 %.22455, 38
  %2630 = sext i32 %2629 to i64
  %2631 = getelementptr inbounds i16, i16* %7, i64 %2630
  %2632 = load i16, i16* %2631, align 2
  %2633 = zext i16 %2632 to i64
  %2634 = getelementptr inbounds i8, i8* %2203, i64 %2633
  %2635 = load i8, i8* %2634, align 1
  %2636 = zext i8 %2635 to i32
  %2637 = zext i16 %2632 to i64
  %2638 = getelementptr inbounds i32, i32* %2211, i64 %2637
  %2639 = load i32, i32* %2638, align 4
  call void @bsW(%struct.EState* %0, i32 %2636, i32 %2639)
  %2640 = add nsw i32 %.22455, 39
  %2641 = sext i32 %2640 to i64
  %2642 = getelementptr inbounds i16, i16* %7, i64 %2641
  %2643 = load i16, i16* %2642, align 2
  %2644 = zext i16 %2643 to i64
  %2645 = getelementptr inbounds i8, i8* %2203, i64 %2644
  %2646 = load i8, i8* %2645, align 1
  %2647 = zext i8 %2646 to i32
  %2648 = zext i16 %2643 to i64
  %2649 = getelementptr inbounds i32, i32* %2211, i64 %2648
  %2650 = load i32, i32* %2649, align 4
  call void @bsW(%struct.EState* %0, i32 %2647, i32 %2650)
  %2651 = add nsw i32 %.22455, 40
  %2652 = sext i32 %2651 to i64
  %2653 = getelementptr inbounds i16, i16* %7, i64 %2652
  %2654 = load i16, i16* %2653, align 2
  %2655 = zext i16 %2654 to i64
  %2656 = getelementptr inbounds i8, i8* %2203, i64 %2655
  %2657 = load i8, i8* %2656, align 1
  %2658 = zext i8 %2657 to i32
  %2659 = zext i16 %2654 to i64
  %2660 = getelementptr inbounds i32, i32* %2211, i64 %2659
  %2661 = load i32, i32* %2660, align 4
  call void @bsW(%struct.EState* %0, i32 %2658, i32 %2661)
  %2662 = add nsw i32 %.22455, 41
  %2663 = sext i32 %2662 to i64
  %2664 = getelementptr inbounds i16, i16* %7, i64 %2663
  %2665 = load i16, i16* %2664, align 2
  %2666 = zext i16 %2665 to i64
  %2667 = getelementptr inbounds i8, i8* %2203, i64 %2666
  %2668 = load i8, i8* %2667, align 1
  %2669 = zext i8 %2668 to i32
  %2670 = zext i16 %2665 to i64
  %2671 = getelementptr inbounds i32, i32* %2211, i64 %2670
  %2672 = load i32, i32* %2671, align 4
  call void @bsW(%struct.EState* %0, i32 %2669, i32 %2672)
  %2673 = add nsw i32 %.22455, 42
  %2674 = sext i32 %2673 to i64
  %2675 = getelementptr inbounds i16, i16* %7, i64 %2674
  %2676 = load i16, i16* %2675, align 2
  %2677 = zext i16 %2676 to i64
  %2678 = getelementptr inbounds i8, i8* %2203, i64 %2677
  %2679 = load i8, i8* %2678, align 1
  %2680 = zext i8 %2679 to i32
  %2681 = zext i16 %2676 to i64
  %2682 = getelementptr inbounds i32, i32* %2211, i64 %2681
  %2683 = load i32, i32* %2682, align 4
  call void @bsW(%struct.EState* %0, i32 %2680, i32 %2683)
  %2684 = add nsw i32 %.22455, 43
  %2685 = sext i32 %2684 to i64
  %2686 = getelementptr inbounds i16, i16* %7, i64 %2685
  %2687 = load i16, i16* %2686, align 2
  %2688 = zext i16 %2687 to i64
  %2689 = getelementptr inbounds i8, i8* %2203, i64 %2688
  %2690 = load i8, i8* %2689, align 1
  %2691 = zext i8 %2690 to i32
  %2692 = zext i16 %2687 to i64
  %2693 = getelementptr inbounds i32, i32* %2211, i64 %2692
  %2694 = load i32, i32* %2693, align 4
  call void @bsW(%struct.EState* %0, i32 %2691, i32 %2694)
  %2695 = add nsw i32 %.22455, 44
  %2696 = sext i32 %2695 to i64
  %2697 = getelementptr inbounds i16, i16* %7, i64 %2696
  %2698 = load i16, i16* %2697, align 2
  %2699 = zext i16 %2698 to i64
  %2700 = getelementptr inbounds i8, i8* %2203, i64 %2699
  %2701 = load i8, i8* %2700, align 1
  %2702 = zext i8 %2701 to i32
  %2703 = zext i16 %2698 to i64
  %2704 = getelementptr inbounds i32, i32* %2211, i64 %2703
  %2705 = load i32, i32* %2704, align 4
  call void @bsW(%struct.EState* %0, i32 %2702, i32 %2705)
  %2706 = add nsw i32 %.22455, 45
  %2707 = sext i32 %2706 to i64
  %2708 = getelementptr inbounds i16, i16* %7, i64 %2707
  %2709 = load i16, i16* %2708, align 2
  %2710 = zext i16 %2709 to i64
  %2711 = getelementptr inbounds i8, i8* %2203, i64 %2710
  %2712 = load i8, i8* %2711, align 1
  %2713 = zext i8 %2712 to i32
  %2714 = zext i16 %2709 to i64
  %2715 = getelementptr inbounds i32, i32* %2211, i64 %2714
  %2716 = load i32, i32* %2715, align 4
  call void @bsW(%struct.EState* %0, i32 %2713, i32 %2716)
  %2717 = add nsw i32 %.22455, 46
  %2718 = sext i32 %2717 to i64
  %2719 = getelementptr inbounds i16, i16* %7, i64 %2718
  %2720 = load i16, i16* %2719, align 2
  %2721 = zext i16 %2720 to i64
  %2722 = getelementptr inbounds i8, i8* %2203, i64 %2721
  %2723 = load i8, i8* %2722, align 1
  %2724 = zext i8 %2723 to i32
  %2725 = zext i16 %2720 to i64
  %2726 = getelementptr inbounds i32, i32* %2211, i64 %2725
  %2727 = load i32, i32* %2726, align 4
  call void @bsW(%struct.EState* %0, i32 %2724, i32 %2727)
  %2728 = add nsw i32 %.22455, 47
  %2729 = sext i32 %2728 to i64
  %2730 = getelementptr inbounds i16, i16* %7, i64 %2729
  %2731 = load i16, i16* %2730, align 2
  %2732 = zext i16 %2731 to i64
  %2733 = getelementptr inbounds i8, i8* %2203, i64 %2732
  %2734 = load i8, i8* %2733, align 1
  %2735 = zext i8 %2734 to i32
  %2736 = zext i16 %2731 to i64
  %2737 = getelementptr inbounds i32, i32* %2211, i64 %2736
  %2738 = load i32, i32* %2737, align 4
  call void @bsW(%struct.EState* %0, i32 %2735, i32 %2738)
  %2739 = add nsw i32 %.22455, 48
  %2740 = sext i32 %2739 to i64
  %2741 = getelementptr inbounds i16, i16* %7, i64 %2740
  %2742 = load i16, i16* %2741, align 2
  %2743 = zext i16 %2742 to i64
  %2744 = getelementptr inbounds i8, i8* %2203, i64 %2743
  %2745 = load i8, i8* %2744, align 1
  %2746 = zext i8 %2745 to i32
  %2747 = zext i16 %2742 to i64
  %2748 = getelementptr inbounds i32, i32* %2211, i64 %2747
  %2749 = load i32, i32* %2748, align 4
  call void @bsW(%struct.EState* %0, i32 %2746, i32 %2749)
  %2750 = add nsw i32 %.22455, 49
  %2751 = sext i32 %2750 to i64
  %2752 = getelementptr inbounds i16, i16* %7, i64 %2751
  %2753 = load i16, i16* %2752, align 2
  %2754 = zext i16 %2753 to i64
  %2755 = getelementptr inbounds i8, i8* %2203, i64 %2754
  %2756 = load i8, i8* %2755, align 1
  %2757 = zext i8 %2756 to i32
  %2758 = zext i16 %2753 to i64
  %2759 = getelementptr inbounds i32, i32* %2211, i64 %2758
  %2760 = load i32, i32* %2759, align 4
  call void @bsW(%struct.EState* %0, i32 %2757, i32 %2760)
  br label %._crit_edge

; <label>:2761:                                   ; preds = %2191, %2189
  %2762 = icmp sle i32 %.22455, %.328
  br i1 %2762, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2761
  %2763 = sext i32 %.22455 to i64
  %2764 = sext i32 %.328 to i64
  %2765 = add i64 %2764, 1
  br label %2766

; <label>:2766:                                   ; preds = %.lr.ph, %2766
  %indvars.iv = phi i64 [ %2763, %.lr.ph ], [ %indvars.iv.next, %2766 ]
  call void @unroll_loop(i32 84)
  %2767 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 35
  %2768 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 33
  %2769 = sext i32 %.04252 to i64
  %2770 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2768, i64 0, i64 %2769
  %2771 = load i8, i8* %2770, align 1
  %2772 = zext i8 %2771 to i64
  %2773 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2767, i64 0, i64 %2772
  %2774 = getelementptr inbounds i16, i16* %7, i64 %indvars.iv
  %2775 = load i16, i16* %2774, align 2
  %2776 = zext i16 %2775 to i64
  %2777 = getelementptr inbounds [258 x i8], [258 x i8]* %2773, i64 0, i64 %2776
  %2778 = load i8, i8* %2777, align 1
  %2779 = zext i8 %2778 to i32
  %2780 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 36
  %2781 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 33
  %2782 = sext i32 %.04252 to i64
  %2783 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2781, i64 0, i64 %2782
  %2784 = load i8, i8* %2783, align 1
  %2785 = zext i8 %2784 to i64
  %2786 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2780, i64 0, i64 %2785
  %2787 = getelementptr inbounds i16, i16* %7, i64 %indvars.iv
  %2788 = load i16, i16* %2787, align 2
  %2789 = zext i16 %2788 to i64
  %2790 = getelementptr inbounds [258 x i32], [258 x i32]* %2786, i64 0, i64 %2789
  %2791 = load i32, i32* %2790, align 4
  call void @bsW(%struct.EState* %0, i32 %2779, i32 %2791)
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %exitcond9 = icmp ne i64 %indvars.iv.next, %2765
  br i1 %exitcond9, label %2766, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %2766
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2761, %2195
  %.04253 = phi i32 [ %.04252, %2195 ], [ %.04252, %2761 ], [ %.04252, %._crit_edge.loopexit ]
  %2792 = add nsw i32 %.328, 1
  %2793 = add nsw i32 %.04253, 1
  %2794 = load i32, i32* %2169, align 4
  %2795 = icmp sge i32 %2792, %2794
  br i1 %2795, label %._crit_edge58.loopexit, label %.lr.ph57

._crit_edge58.loopexit:                           ; preds = %._crit_edge
  %.042.lcssa.ph = phi i32 [ %2793, %._crit_edge ]
  br label %._crit_edge58

._crit_edge58:                                    ; preds = %._crit_edge58.loopexit, %2166
  %.042.lcssa = phi i32 [ 0, %2166 ], [ %.042.lcssa.ph, %._crit_edge58.loopexit ]
  %2796 = icmp eq i32 %.042.lcssa, %.035.lcssa
  br i1 %2796, label %2798, label %2797

; <label>:2797:                                   ; preds = %._crit_edge58
  call void @BZ2_bz__AssertH__fail(i32 3007)
  br label %2798

; <label>:2798:                                   ; preds = %2797, %._crit_edge58
  %2799 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %2800 = load i32, i32* %2799, align 8
  %2801 = icmp sge i32 %2800, 3
  br i1 %2801, label %2802, label %2809

; <label>:2802:                                   ; preds = %2798
  %2803 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2804 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %2805 = load i32, i32* %2804, align 4
  %2806 = sub nsw i32 %2805, %2168
  %2807 = getelementptr [10 x i8], [10 x i8]* @.str.10.157, i32 0, i32 0
  %2808 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2803, i8* %2807, i32 %2806)
  br label %2809

; <label>:2809:                                   ; preds = %2802, %2798
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @bsFinishWrite(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 25
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %1
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  call void @unroll_loop(i32 52)
  %5 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 24
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 24
  %8 = trunc i32 %7 to i8
  %9 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 11
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  store i8 %8, i8* %14, align 1
  %15 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 19
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 4
  %18 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 24
  %19 = load i32, i32* %18, align 8
  %20 = shl i32 %19, 8
  store i32 %20, i32* %18, align 8
  %21 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 25
  %22 = load i32, i32* %21, align 4
  %23 = sub nsw i32 %22, 8
  store i32 %23, i32* %21, align 4
  %24 = load i32, i32* %2, align 4
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @makeMaps_e(%struct.EState*) #0 {
  %2 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 21
  store i32 0, i32* %2, align 4
  br label %3

; <label>:3:                                      ; preds = %1, %17
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %17 ]
  call void @unroll_loop(i32 85)
  %4 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 22
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %indvars.iv
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  br i1 %7, label %8, label %17

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 21
  %10 = load i32, i32* %9, align 4
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 23
  %13 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i64 %indvars.iv
  store i8 %11, i8* %13, align 1
  %14 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 21
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  br label %17

; <label>:17:                                     ; preds = %3, %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %3, label %18

; <label>:18:                                     ; preds = %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BZ2_decompress(%struct.DState*) #0 {
  %2 = alloca [6 x i8], align 1, !track !63
  %3 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %4 = load %struct.bz_stream*, %struct.bz_stream** %3, align 8
  %5 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 10
  br i1 %7, label %8, label %33

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 40
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 41
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 42
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 43
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 44
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 45
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 46
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 47
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 48
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 49
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 50
  store i32 0, i32* %19, align 4
  %20 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 52
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 53
  store i32 0, i32* %22, align 8
  %23 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 54
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 55
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 56
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 57
  store i32 0, i32* %26, align 8
  %27 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 58
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 59
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 60
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 61
  store i32* null, i32** %30, align 8
  %31 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 62
  store i32* null, i32** %31, align 8
  %32 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 63
  store i32* null, i32** %32, align 8
  br label %33

; <label>:33:                                     ; preds = %8, %1
  %34 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 40
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 41
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 42
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 43
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 44
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 45
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 46
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 47
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 48
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 49
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 50
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 52
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 53
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 54
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 55
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 56
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 57
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 58
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 59
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 60
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 61
  %77 = load i32*, i32** %76, align 8
  %78 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 62
  %79 = load i32*, i32** %78, align 8
  %80 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 63
  %81 = load i32*, i32** %80, align 8
  %82 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  %83 = load i32, i32* %82, align 8
  switch i32 %83, label %4044 [
    i32 10, label %84
    i32 11, label %151
    i32 12, label %218
    i32 13, label %285
    i32 14, label %408
    i32 15, label %478
    i32 16, label %545
    i32 17, label %612
    i32 18, label %679
    i32 19, label %746
    i32 20, label %828
    i32 21, label %899
    i32 22, label %970
    i32 23, label %1041
    i32 24, label %1112
    i32 25, label %1179
    i32 26, label %1250
    i32 27, label %1321
    i32 28, label %1405
    i32 29, label %1492
    i32 30, label %1577
    i32 31, label %1643
    i32 32, label %1711
    i32 33, label %1825
    i32 34, label %1894
    i32 35, label %1961
    i32 36, label %2148
    i32 37, label %2223
    i32 38, label %2349
    i32 39, label %2424
    i32 40, label %2794
    i32 41, label %2869
    i32 42, label %3422
    i32 43, label %3489
    i32 44, label %3556
    i32 45, label %3623
    i32 46, label %3690
    i32 47, label %3759
    i32 48, label %3830
    i32 49, label %3901
    i32 50, label %3972
  ]

; <label>:84:                                     ; preds = %33
  %85 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 10, i32* %85, align 8
  %86 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %87 = load i32, i32* %86, align 4
  %88 = icmp sge i32 %87, 8
  br i1 %88, label %._crit_edge628, label %.lr.ph627.preheader

.lr.ph627.preheader:                              ; preds = %84
  br label %.lr.ph627

._crit_edge628.loopexit:                          ; preds = %148
  br label %._crit_edge628

._crit_edge628:                                   ; preds = %._crit_edge628.loopexit, %84
  %89 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %90 = load i32, i32* %89, align 8
  %91 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %92 = load i32, i32* %91, align 4
  %93 = sub nsw i32 %92, 8
  %94 = lshr i32 %90, %93
  %95 = and i32 %94, 255
  %96 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %97 = load i32, i32* %96, align 4
  %98 = sub nsw i32 %97, 8
  store i32 %98, i32* %96, align 4
  %99 = trunc i32 %95 to i8
  %100 = zext i8 %99 to i32
  %101 = icmp ne i32 %100, 66
  br i1 %101, label %4045, label %151

.lr.ph627:                                        ; preds = %.lr.ph627.preheader, %148
  call void @unroll_loop(i32 87)
  %102 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %103 = load %struct.bz_stream*, %struct.bz_stream** %102, align 8
  %104 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %103, i32 0, i32 1
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %.loopexit1008, label %107

; <label>:107:                                    ; preds = %.lr.ph627
  %108 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %109 = load i32, i32* %108, align 8
  %110 = shl i32 %109, 8
  %111 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %112 = load %struct.bz_stream*, %struct.bz_stream** %111, align 8
  %113 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %112, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = or i32 %110, %116
  %118 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %117, i32* %118, align 8
  %119 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, 8
  store i32 %121, i32* %119, align 4
  %122 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %123 = load %struct.bz_stream*, %struct.bz_stream** %122, align 8
  %124 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %123, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %126, i8** %124, align 8
  %127 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %128 = load %struct.bz_stream*, %struct.bz_stream** %127, align 8
  %129 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %128, i32 0, i32 1
  %130 = load i32, i32* %129, align 8
  %131 = add i32 %130, -1
  store i32 %131, i32* %129, align 8
  %132 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %133 = load %struct.bz_stream*, %struct.bz_stream** %132, align 8
  %134 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %133, i32 0, i32 2
  %135 = load i32, i32* %134, align 4
  %136 = add i32 %135, 1
  store i32 %136, i32* %134, align 4
  %137 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %138 = load %struct.bz_stream*, %struct.bz_stream** %137, align 8
  %139 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %138, i32 0, i32 2
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %148

; <label>:142:                                    ; preds = %107
  %143 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %144 = load %struct.bz_stream*, %struct.bz_stream** %143, align 8
  %145 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %144, i32 0, i32 3
  %146 = load i32, i32* %145, align 8
  %147 = add i32 %146, 1
  store i32 %147, i32* %145, align 8
  br label %148

; <label>:148:                                    ; preds = %142, %107
  %149 = load i32, i32* %86, align 4
  %150 = icmp sge i32 %149, 8
  br i1 %150, label %._crit_edge628.loopexit, label %.lr.ph627

; <label>:151:                                    ; preds = %._crit_edge628, %33
  %152 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 11, i32* %152, align 8
  %153 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %154 = load i32, i32* %153, align 4
  %155 = icmp sge i32 %154, 8
  br i1 %155, label %._crit_edge625, label %.lr.ph624.preheader

.lr.ph624.preheader:                              ; preds = %151
  br label %.lr.ph624

._crit_edge625.loopexit:                          ; preds = %215
  br label %._crit_edge625

._crit_edge625:                                   ; preds = %._crit_edge625.loopexit, %151
  %156 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %157 = load i32, i32* %156, align 8
  %158 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %159 = load i32, i32* %158, align 4
  %160 = sub nsw i32 %159, 8
  %161 = lshr i32 %157, %160
  %162 = and i32 %161, 255
  %163 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %164 = load i32, i32* %163, align 4
  %165 = sub nsw i32 %164, 8
  store i32 %165, i32* %163, align 4
  %166 = trunc i32 %162 to i8
  %167 = zext i8 %166 to i32
  %168 = icmp ne i32 %167, 90
  br i1 %168, label %4045, label %218

.lr.ph624:                                        ; preds = %.lr.ph624.preheader, %215
  call void @unroll_loop(i32 88)
  %169 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %170 = load %struct.bz_stream*, %struct.bz_stream** %169, align 8
  %171 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %170, i32 0, i32 1
  %172 = load i32, i32* %171, align 8
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %.loopexit983, label %174

; <label>:174:                                    ; preds = %.lr.ph624
  %175 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %176 = load i32, i32* %175, align 8
  %177 = shl i32 %176, 8
  %178 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %179 = load %struct.bz_stream*, %struct.bz_stream** %178, align 8
  %180 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %179, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = or i32 %177, %183
  %185 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %184, i32* %185, align 8
  %186 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %187 = load i32, i32* %186, align 4
  %188 = add nsw i32 %187, 8
  store i32 %188, i32* %186, align 4
  %189 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %190 = load %struct.bz_stream*, %struct.bz_stream** %189, align 8
  %191 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %190, i32 0, i32 0
  %192 = load i8*, i8** %191, align 8
  %193 = getelementptr inbounds i8, i8* %192, i32 1
  store i8* %193, i8** %191, align 8
  %194 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %195 = load %struct.bz_stream*, %struct.bz_stream** %194, align 8
  %196 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %195, i32 0, i32 1
  %197 = load i32, i32* %196, align 8
  %198 = add i32 %197, -1
  store i32 %198, i32* %196, align 8
  %199 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %200 = load %struct.bz_stream*, %struct.bz_stream** %199, align 8
  %201 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %200, i32 0, i32 2
  %202 = load i32, i32* %201, align 4
  %203 = add i32 %202, 1
  store i32 %203, i32* %201, align 4
  %204 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %205 = load %struct.bz_stream*, %struct.bz_stream** %204, align 8
  %206 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %205, i32 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %215

; <label>:209:                                    ; preds = %174
  %210 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %211 = load %struct.bz_stream*, %struct.bz_stream** %210, align 8
  %212 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %211, i32 0, i32 3
  %213 = load i32, i32* %212, align 8
  %214 = add i32 %213, 1
  store i32 %214, i32* %212, align 8
  br label %215

; <label>:215:                                    ; preds = %209, %174
  %216 = load i32, i32* %153, align 4
  %217 = icmp sge i32 %216, 8
  br i1 %217, label %._crit_edge625.loopexit, label %.lr.ph624

; <label>:218:                                    ; preds = %._crit_edge625, %33
  %219 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 12, i32* %219, align 8
  %220 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %221 = load i32, i32* %220, align 4
  %222 = icmp sge i32 %221, 8
  br i1 %222, label %._crit_edge622, label %.lr.ph621.preheader

.lr.ph621.preheader:                              ; preds = %218
  br label %.lr.ph621

._crit_edge622.loopexit:                          ; preds = %282
  br label %._crit_edge622

._crit_edge622:                                   ; preds = %._crit_edge622.loopexit, %218
  %223 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %224 = load i32, i32* %223, align 8
  %225 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %226 = load i32, i32* %225, align 4
  %227 = sub nsw i32 %226, 8
  %228 = lshr i32 %224, %227
  %229 = and i32 %228, 255
  %230 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %231 = load i32, i32* %230, align 4
  %232 = sub nsw i32 %231, 8
  store i32 %232, i32* %230, align 4
  %233 = trunc i32 %229 to i8
  %234 = zext i8 %233 to i32
  %235 = icmp ne i32 %234, 104
  br i1 %235, label %4045, label %285

.lr.ph621:                                        ; preds = %.lr.ph621.preheader, %282
  call void @unroll_loop(i32 89)
  %236 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %237 = load %struct.bz_stream*, %struct.bz_stream** %236, align 8
  %238 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %237, i32 0, i32 1
  %239 = load i32, i32* %238, align 8
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %.loopexit958, label %241

; <label>:241:                                    ; preds = %.lr.ph621
  %242 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %243 = load i32, i32* %242, align 8
  %244 = shl i32 %243, 8
  %245 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %246 = load %struct.bz_stream*, %struct.bz_stream** %245, align 8
  %247 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %246, i32 0, i32 0
  %248 = load i8*, i8** %247, align 8
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = or i32 %244, %250
  %252 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %251, i32* %252, align 8
  %253 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %254 = load i32, i32* %253, align 4
  %255 = add nsw i32 %254, 8
  store i32 %255, i32* %253, align 4
  %256 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %257 = load %struct.bz_stream*, %struct.bz_stream** %256, align 8
  %258 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %257, i32 0, i32 0
  %259 = load i8*, i8** %258, align 8
  %260 = getelementptr inbounds i8, i8* %259, i32 1
  store i8* %260, i8** %258, align 8
  %261 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %262 = load %struct.bz_stream*, %struct.bz_stream** %261, align 8
  %263 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %262, i32 0, i32 1
  %264 = load i32, i32* %263, align 8
  %265 = add i32 %264, -1
  store i32 %265, i32* %263, align 8
  %266 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %267 = load %struct.bz_stream*, %struct.bz_stream** %266, align 8
  %268 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %267, i32 0, i32 2
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %269, 1
  store i32 %270, i32* %268, align 4
  %271 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %272 = load %struct.bz_stream*, %struct.bz_stream** %271, align 8
  %273 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %272, i32 0, i32 2
  %274 = load i32, i32* %273, align 4
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %276, label %282

; <label>:276:                                    ; preds = %241
  %277 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %278 = load %struct.bz_stream*, %struct.bz_stream** %277, align 8
  %279 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %278, i32 0, i32 3
  %280 = load i32, i32* %279, align 8
  %281 = add i32 %280, 1
  store i32 %281, i32* %279, align 8
  br label %282

; <label>:282:                                    ; preds = %276, %241
  %283 = load i32, i32* %220, align 4
  %284 = icmp sge i32 %283, 8
  br i1 %284, label %._crit_edge622.loopexit, label %.lr.ph621

; <label>:285:                                    ; preds = %._crit_edge622, %33
  %286 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 13, i32* %286, align 8
  %287 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %288 = load i32, i32* %287, align 4
  %289 = icmp sge i32 %288, 8
  br i1 %289, label %._crit_edge619, label %.lr.ph618.preheader

.lr.ph618.preheader:                              ; preds = %285
  br label %.lr.ph618

._crit_edge619.loopexit:                          ; preds = %350
  br label %._crit_edge619

._crit_edge619:                                   ; preds = %._crit_edge619.loopexit, %285
  %290 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %291 = load i32, i32* %290, align 8
  %292 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %293 = load i32, i32* %292, align 4
  %294 = sub nsw i32 %293, 8
  %295 = lshr i32 %291, %294
  %296 = and i32 %295, 255
  %297 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %298 = load i32, i32* %297, align 4
  %299 = sub nsw i32 %298, 8
  store i32 %299, i32* %297, align 4
  %300 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  store i32 %296, i32* %300, align 8
  %301 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %302 = load i32, i32* %301, align 8
  %303 = icmp slt i32 %302, 49
  br i1 %303, label %4045, label %353

.lr.ph618:                                        ; preds = %.lr.ph618.preheader, %350
  call void @unroll_loop(i32 90)
  %304 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %305 = load %struct.bz_stream*, %struct.bz_stream** %304, align 8
  %306 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %305, i32 0, i32 1
  %307 = load i32, i32* %306, align 8
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %.loopexit933, label %309

; <label>:309:                                    ; preds = %.lr.ph618
  %310 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %311 = load i32, i32* %310, align 8
  %312 = shl i32 %311, 8
  %313 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %314 = load %struct.bz_stream*, %struct.bz_stream** %313, align 8
  %315 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %314, i32 0, i32 0
  %316 = load i8*, i8** %315, align 8
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %317 to i32
  %319 = or i32 %312, %318
  %320 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %319, i32* %320, align 8
  %321 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %322 = load i32, i32* %321, align 4
  %323 = add nsw i32 %322, 8
  store i32 %323, i32* %321, align 4
  %324 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %325 = load %struct.bz_stream*, %struct.bz_stream** %324, align 8
  %326 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %325, i32 0, i32 0
  %327 = load i8*, i8** %326, align 8
  %328 = getelementptr inbounds i8, i8* %327, i32 1
  store i8* %328, i8** %326, align 8
  %329 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %330 = load %struct.bz_stream*, %struct.bz_stream** %329, align 8
  %331 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %330, i32 0, i32 1
  %332 = load i32, i32* %331, align 8
  %333 = add i32 %332, -1
  store i32 %333, i32* %331, align 8
  %334 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %335 = load %struct.bz_stream*, %struct.bz_stream** %334, align 8
  %336 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %335, i32 0, i32 2
  %337 = load i32, i32* %336, align 4
  %338 = add i32 %337, 1
  store i32 %338, i32* %336, align 4
  %339 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %340 = load %struct.bz_stream*, %struct.bz_stream** %339, align 8
  %341 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %340, i32 0, i32 2
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %350

; <label>:344:                                    ; preds = %309
  %345 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %346 = load %struct.bz_stream*, %struct.bz_stream** %345, align 8
  %347 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %346, i32 0, i32 3
  %348 = load i32, i32* %347, align 8
  %349 = add i32 %348, 1
  store i32 %349, i32* %347, align 8
  br label %350

; <label>:350:                                    ; preds = %344, %309
  %351 = load i32, i32* %287, align 4
  %352 = icmp sge i32 %351, 8
  br i1 %352, label %._crit_edge619.loopexit, label %.lr.ph618

; <label>:353:                                    ; preds = %._crit_edge619
  %354 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %355 = load i32, i32* %354, align 8
  %356 = icmp sgt i32 %355, 57
  br i1 %356, label %4045, label %357

; <label>:357:                                    ; preds = %353
  %358 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %359 = load i32, i32* %358, align 8
  %360 = sub nsw i32 %359, 48
  store i32 %360, i32* %358, align 8
  %361 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 10
  %362 = load i8, i8* %361, align 4
  %363 = icmp ne i8 %362, 0
  %364 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4, i32 0, i32 9
  %365 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %364, align 8
  %366 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4, i32 0, i32 11
  %367 = load i8*, i8** %366, align 8
  %368 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %369 = load i32, i32* %368, align 8
  %370 = mul nsw i32 %369, 100000
  %371 = sext i32 %370 to i64
  br i1 %363, label %372, label %399

; <label>:372:                                    ; preds = %357
  %373 = mul i64 %371, 2
  %374 = trunc i64 %373 to i32
  %375 = call i8* %365(i8* %367, i32 %374, i32 1)
  %376 = bitcast i8* %375 to i16*
  %377 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  store i16* %376, i16** %377, align 8
  %378 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4, i32 0, i32 9
  %379 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %378, align 8
  %380 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4, i32 0, i32 11
  %381 = load i8*, i8** %380, align 8
  %382 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %383 = load i32, i32* %382, align 8
  %384 = mul nsw i32 %383, 100000
  %385 = add nsw i32 1, %384
  %386 = ashr i32 %385, 1
  %387 = sext i32 %386 to i64
  %388 = mul i64 %387, 1
  %389 = trunc i64 %388 to i32
  %390 = call i8* %379(i8* %381, i32 %389, i32 1)
  %391 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  store i8* %390, i8** %391, align 8
  %392 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %393 = load i16*, i16** %392, align 8
  %394 = icmp eq i16* %393, null
  br i1 %394, label %4045, label %395

; <label>:395:                                    ; preds = %372
  %396 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %397 = load i8*, i8** %396, align 8
  %398 = icmp eq i8* %397, null
  br i1 %398, label %4045, label %408

; <label>:399:                                    ; preds = %357
  %400 = mul i64 %371, 4
  %401 = trunc i64 %400 to i32
  %402 = call i8* %365(i8* %367, i32 %401, i32 1)
  %403 = bitcast i8* %402 to i32*
  %404 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  store i32* %403, i32** %404, align 8
  %405 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %406 = load i32*, i32** %405, align 8
  %407 = icmp eq i32* %406, null
  br i1 %407, label %4045, label %408

; <label>:408:                                    ; preds = %395, %399, %33
  %409 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 14, i32* %409, align 8
  %410 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %411 = load i32, i32* %410, align 4
  %412 = icmp sge i32 %411, 8
  br i1 %412, label %._crit_edge616, label %.lr.ph615.preheader

.lr.ph615.preheader:                              ; preds = %408
  br label %.lr.ph615

._crit_edge616.loopexit:                          ; preds = %472
  br label %._crit_edge616

._crit_edge616:                                   ; preds = %._crit_edge616.loopexit, %408
  %413 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %414 = load i32, i32* %413, align 8
  %415 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %416 = load i32, i32* %415, align 4
  %417 = sub nsw i32 %416, 8
  %418 = lshr i32 %414, %417
  %419 = and i32 %418, 255
  %420 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %421 = load i32, i32* %420, align 4
  %422 = sub nsw i32 %421, 8
  store i32 %422, i32* %420, align 4
  %423 = trunc i32 %419 to i8
  %424 = zext i8 %423 to i32
  %425 = icmp eq i32 %424, 23
  br i1 %425, label %3422, label %475

.lr.ph615:                                        ; preds = %.lr.ph615.preheader, %472
  call void @unroll_loop(i32 91)
  %426 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %427 = load %struct.bz_stream*, %struct.bz_stream** %426, align 8
  %428 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %427, i32 0, i32 1
  %429 = load i32, i32* %428, align 8
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %.loopexit908, label %431

; <label>:431:                                    ; preds = %.lr.ph615
  %432 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %433 = load i32, i32* %432, align 8
  %434 = shl i32 %433, 8
  %435 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %436 = load %struct.bz_stream*, %struct.bz_stream** %435, align 8
  %437 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %436, i32 0, i32 0
  %438 = load i8*, i8** %437, align 8
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  %441 = or i32 %434, %440
  %442 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %441, i32* %442, align 8
  %443 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %444 = load i32, i32* %443, align 4
  %445 = add nsw i32 %444, 8
  store i32 %445, i32* %443, align 4
  %446 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %447 = load %struct.bz_stream*, %struct.bz_stream** %446, align 8
  %448 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %447, i32 0, i32 0
  %449 = load i8*, i8** %448, align 8
  %450 = getelementptr inbounds i8, i8* %449, i32 1
  store i8* %450, i8** %448, align 8
  %451 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %452 = load %struct.bz_stream*, %struct.bz_stream** %451, align 8
  %453 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %452, i32 0, i32 1
  %454 = load i32, i32* %453, align 8
  %455 = add i32 %454, -1
  store i32 %455, i32* %453, align 8
  %456 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %457 = load %struct.bz_stream*, %struct.bz_stream** %456, align 8
  %458 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %457, i32 0, i32 2
  %459 = load i32, i32* %458, align 4
  %460 = add i32 %459, 1
  store i32 %460, i32* %458, align 4
  %461 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %462 = load %struct.bz_stream*, %struct.bz_stream** %461, align 8
  %463 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %462, i32 0, i32 2
  %464 = load i32, i32* %463, align 4
  %465 = icmp eq i32 %464, 0
  br i1 %465, label %466, label %472

; <label>:466:                                    ; preds = %431
  %467 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %468 = load %struct.bz_stream*, %struct.bz_stream** %467, align 8
  %469 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %468, i32 0, i32 3
  %470 = load i32, i32* %469, align 8
  %471 = add i32 %470, 1
  store i32 %471, i32* %469, align 8
  br label %472

; <label>:472:                                    ; preds = %466, %431
  %473 = load i32, i32* %410, align 4
  %474 = icmp sge i32 %473, 8
  br i1 %474, label %._crit_edge616.loopexit, label %.lr.ph615

; <label>:475:                                    ; preds = %._crit_edge616
  %476 = zext i8 %423 to i32
  %477 = icmp ne i32 %476, 49
  br i1 %477, label %4045, label %478

; <label>:478:                                    ; preds = %475, %33
  %479 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 15, i32* %479, align 8
  %480 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %481 = load i32, i32* %480, align 4
  %482 = icmp sge i32 %481, 8
  br i1 %482, label %._crit_edge613, label %.lr.ph612.preheader

.lr.ph612.preheader:                              ; preds = %478
  br label %.lr.ph612

._crit_edge613.loopexit:                          ; preds = %542
  br label %._crit_edge613

._crit_edge613:                                   ; preds = %._crit_edge613.loopexit, %478
  %483 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %484 = load i32, i32* %483, align 8
  %485 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %486 = load i32, i32* %485, align 4
  %487 = sub nsw i32 %486, 8
  %488 = lshr i32 %484, %487
  %489 = and i32 %488, 255
  %490 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %491 = load i32, i32* %490, align 4
  %492 = sub nsw i32 %491, 8
  store i32 %492, i32* %490, align 4
  %493 = trunc i32 %489 to i8
  %494 = zext i8 %493 to i32
  %495 = icmp ne i32 %494, 65
  br i1 %495, label %4045, label %545

.lr.ph612:                                        ; preds = %.lr.ph612.preheader, %542
  call void @unroll_loop(i32 92)
  %496 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %497 = load %struct.bz_stream*, %struct.bz_stream** %496, align 8
  %498 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %497, i32 0, i32 1
  %499 = load i32, i32* %498, align 8
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %.loopexit883, label %501

; <label>:501:                                    ; preds = %.lr.ph612
  %502 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %503 = load i32, i32* %502, align 8
  %504 = shl i32 %503, 8
  %505 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %506 = load %struct.bz_stream*, %struct.bz_stream** %505, align 8
  %507 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %506, i32 0, i32 0
  %508 = load i8*, i8** %507, align 8
  %509 = load i8, i8* %508, align 1
  %510 = zext i8 %509 to i32
  %511 = or i32 %504, %510
  %512 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %511, i32* %512, align 8
  %513 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %514 = load i32, i32* %513, align 4
  %515 = add nsw i32 %514, 8
  store i32 %515, i32* %513, align 4
  %516 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %517 = load %struct.bz_stream*, %struct.bz_stream** %516, align 8
  %518 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %517, i32 0, i32 0
  %519 = load i8*, i8** %518, align 8
  %520 = getelementptr inbounds i8, i8* %519, i32 1
  store i8* %520, i8** %518, align 8
  %521 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %522 = load %struct.bz_stream*, %struct.bz_stream** %521, align 8
  %523 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %522, i32 0, i32 1
  %524 = load i32, i32* %523, align 8
  %525 = add i32 %524, -1
  store i32 %525, i32* %523, align 8
  %526 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %527 = load %struct.bz_stream*, %struct.bz_stream** %526, align 8
  %528 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %527, i32 0, i32 2
  %529 = load i32, i32* %528, align 4
  %530 = add i32 %529, 1
  store i32 %530, i32* %528, align 4
  %531 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %532 = load %struct.bz_stream*, %struct.bz_stream** %531, align 8
  %533 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %532, i32 0, i32 2
  %534 = load i32, i32* %533, align 4
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %536, label %542

; <label>:536:                                    ; preds = %501
  %537 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %538 = load %struct.bz_stream*, %struct.bz_stream** %537, align 8
  %539 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %538, i32 0, i32 3
  %540 = load i32, i32* %539, align 8
  %541 = add i32 %540, 1
  store i32 %541, i32* %539, align 8
  br label %542

; <label>:542:                                    ; preds = %536, %501
  %543 = load i32, i32* %480, align 4
  %544 = icmp sge i32 %543, 8
  br i1 %544, label %._crit_edge613.loopexit, label %.lr.ph612

; <label>:545:                                    ; preds = %._crit_edge613, %33
  %546 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 16, i32* %546, align 8
  %547 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %548 = load i32, i32* %547, align 4
  %549 = icmp sge i32 %548, 8
  br i1 %549, label %._crit_edge610, label %.lr.ph609.preheader

.lr.ph609.preheader:                              ; preds = %545
  br label %.lr.ph609

._crit_edge610.loopexit:                          ; preds = %609
  br label %._crit_edge610

._crit_edge610:                                   ; preds = %._crit_edge610.loopexit, %545
  %550 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %551 = load i32, i32* %550, align 8
  %552 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %553 = load i32, i32* %552, align 4
  %554 = sub nsw i32 %553, 8
  %555 = lshr i32 %551, %554
  %556 = and i32 %555, 255
  %557 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %558 = load i32, i32* %557, align 4
  %559 = sub nsw i32 %558, 8
  store i32 %559, i32* %557, align 4
  %560 = trunc i32 %556 to i8
  %561 = zext i8 %560 to i32
  %562 = icmp ne i32 %561, 89
  br i1 %562, label %4045, label %612

.lr.ph609:                                        ; preds = %.lr.ph609.preheader, %609
  call void @unroll_loop(i32 93)
  %563 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %564 = load %struct.bz_stream*, %struct.bz_stream** %563, align 8
  %565 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %564, i32 0, i32 1
  %566 = load i32, i32* %565, align 8
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %.loopexit858, label %568

; <label>:568:                                    ; preds = %.lr.ph609
  %569 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %570 = load i32, i32* %569, align 8
  %571 = shl i32 %570, 8
  %572 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %573 = load %struct.bz_stream*, %struct.bz_stream** %572, align 8
  %574 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %573, i32 0, i32 0
  %575 = load i8*, i8** %574, align 8
  %576 = load i8, i8* %575, align 1
  %577 = zext i8 %576 to i32
  %578 = or i32 %571, %577
  %579 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %578, i32* %579, align 8
  %580 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %581 = load i32, i32* %580, align 4
  %582 = add nsw i32 %581, 8
  store i32 %582, i32* %580, align 4
  %583 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %584 = load %struct.bz_stream*, %struct.bz_stream** %583, align 8
  %585 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %584, i32 0, i32 0
  %586 = load i8*, i8** %585, align 8
  %587 = getelementptr inbounds i8, i8* %586, i32 1
  store i8* %587, i8** %585, align 8
  %588 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %589 = load %struct.bz_stream*, %struct.bz_stream** %588, align 8
  %590 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %589, i32 0, i32 1
  %591 = load i32, i32* %590, align 8
  %592 = add i32 %591, -1
  store i32 %592, i32* %590, align 8
  %593 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %594 = load %struct.bz_stream*, %struct.bz_stream** %593, align 8
  %595 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %594, i32 0, i32 2
  %596 = load i32, i32* %595, align 4
  %597 = add i32 %596, 1
  store i32 %597, i32* %595, align 4
  %598 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %599 = load %struct.bz_stream*, %struct.bz_stream** %598, align 8
  %600 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %599, i32 0, i32 2
  %601 = load i32, i32* %600, align 4
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %603, label %609

; <label>:603:                                    ; preds = %568
  %604 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %605 = load %struct.bz_stream*, %struct.bz_stream** %604, align 8
  %606 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %605, i32 0, i32 3
  %607 = load i32, i32* %606, align 8
  %608 = add i32 %607, 1
  store i32 %608, i32* %606, align 8
  br label %609

; <label>:609:                                    ; preds = %603, %568
  %610 = load i32, i32* %547, align 4
  %611 = icmp sge i32 %610, 8
  br i1 %611, label %._crit_edge610.loopexit, label %.lr.ph609

; <label>:612:                                    ; preds = %._crit_edge610, %33
  %613 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 17, i32* %613, align 8
  %614 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %615 = load i32, i32* %614, align 4
  %616 = icmp sge i32 %615, 8
  br i1 %616, label %._crit_edge607, label %.lr.ph606.preheader

.lr.ph606.preheader:                              ; preds = %612
  br label %.lr.ph606

._crit_edge607.loopexit:                          ; preds = %676
  br label %._crit_edge607

._crit_edge607:                                   ; preds = %._crit_edge607.loopexit, %612
  %617 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %618 = load i32, i32* %617, align 8
  %619 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %620 = load i32, i32* %619, align 4
  %621 = sub nsw i32 %620, 8
  %622 = lshr i32 %618, %621
  %623 = and i32 %622, 255
  %624 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %625 = load i32, i32* %624, align 4
  %626 = sub nsw i32 %625, 8
  store i32 %626, i32* %624, align 4
  %627 = trunc i32 %623 to i8
  %628 = zext i8 %627 to i32
  %629 = icmp ne i32 %628, 38
  br i1 %629, label %4045, label %679

.lr.ph606:                                        ; preds = %.lr.ph606.preheader, %676
  call void @unroll_loop(i32 94)
  %630 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %631 = load %struct.bz_stream*, %struct.bz_stream** %630, align 8
  %632 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %631, i32 0, i32 1
  %633 = load i32, i32* %632, align 8
  %634 = icmp eq i32 %633, 0
  br i1 %634, label %.loopexit833, label %635

; <label>:635:                                    ; preds = %.lr.ph606
  %636 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %637 = load i32, i32* %636, align 8
  %638 = shl i32 %637, 8
  %639 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %640 = load %struct.bz_stream*, %struct.bz_stream** %639, align 8
  %641 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %640, i32 0, i32 0
  %642 = load i8*, i8** %641, align 8
  %643 = load i8, i8* %642, align 1
  %644 = zext i8 %643 to i32
  %645 = or i32 %638, %644
  %646 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %645, i32* %646, align 8
  %647 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %648 = load i32, i32* %647, align 4
  %649 = add nsw i32 %648, 8
  store i32 %649, i32* %647, align 4
  %650 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %651 = load %struct.bz_stream*, %struct.bz_stream** %650, align 8
  %652 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %651, i32 0, i32 0
  %653 = load i8*, i8** %652, align 8
  %654 = getelementptr inbounds i8, i8* %653, i32 1
  store i8* %654, i8** %652, align 8
  %655 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %656 = load %struct.bz_stream*, %struct.bz_stream** %655, align 8
  %657 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %656, i32 0, i32 1
  %658 = load i32, i32* %657, align 8
  %659 = add i32 %658, -1
  store i32 %659, i32* %657, align 8
  %660 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %661 = load %struct.bz_stream*, %struct.bz_stream** %660, align 8
  %662 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %661, i32 0, i32 2
  %663 = load i32, i32* %662, align 4
  %664 = add i32 %663, 1
  store i32 %664, i32* %662, align 4
  %665 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %666 = load %struct.bz_stream*, %struct.bz_stream** %665, align 8
  %667 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %666, i32 0, i32 2
  %668 = load i32, i32* %667, align 4
  %669 = icmp eq i32 %668, 0
  br i1 %669, label %670, label %676

; <label>:670:                                    ; preds = %635
  %671 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %672 = load %struct.bz_stream*, %struct.bz_stream** %671, align 8
  %673 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %672, i32 0, i32 3
  %674 = load i32, i32* %673, align 8
  %675 = add i32 %674, 1
  store i32 %675, i32* %673, align 8
  br label %676

; <label>:676:                                    ; preds = %670, %635
  %677 = load i32, i32* %614, align 4
  %678 = icmp sge i32 %677, 8
  br i1 %678, label %._crit_edge607.loopexit, label %.lr.ph606

; <label>:679:                                    ; preds = %._crit_edge607, %33
  %680 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 18, i32* %680, align 8
  %681 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %682 = load i32, i32* %681, align 4
  %683 = icmp sge i32 %682, 8
  br i1 %683, label %._crit_edge604, label %.lr.ph603.preheader

.lr.ph603.preheader:                              ; preds = %679
  br label %.lr.ph603

._crit_edge604.loopexit:                          ; preds = %743
  br label %._crit_edge604

._crit_edge604:                                   ; preds = %._crit_edge604.loopexit, %679
  %684 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %685 = load i32, i32* %684, align 8
  %686 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %687 = load i32, i32* %686, align 4
  %688 = sub nsw i32 %687, 8
  %689 = lshr i32 %685, %688
  %690 = and i32 %689, 255
  %691 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %692 = load i32, i32* %691, align 4
  %693 = sub nsw i32 %692, 8
  store i32 %693, i32* %691, align 4
  %694 = trunc i32 %690 to i8
  %695 = zext i8 %694 to i32
  %696 = icmp ne i32 %695, 83
  br i1 %696, label %4045, label %746

.lr.ph603:                                        ; preds = %.lr.ph603.preheader, %743
  call void @unroll_loop(i32 95)
  %697 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %698 = load %struct.bz_stream*, %struct.bz_stream** %697, align 8
  %699 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %698, i32 0, i32 1
  %700 = load i32, i32* %699, align 8
  %701 = icmp eq i32 %700, 0
  br i1 %701, label %.loopexit808, label %702

; <label>:702:                                    ; preds = %.lr.ph603
  %703 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %704 = load i32, i32* %703, align 8
  %705 = shl i32 %704, 8
  %706 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %707 = load %struct.bz_stream*, %struct.bz_stream** %706, align 8
  %708 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %707, i32 0, i32 0
  %709 = load i8*, i8** %708, align 8
  %710 = load i8, i8* %709, align 1
  %711 = zext i8 %710 to i32
  %712 = or i32 %705, %711
  %713 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %712, i32* %713, align 8
  %714 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %715 = load i32, i32* %714, align 4
  %716 = add nsw i32 %715, 8
  store i32 %716, i32* %714, align 4
  %717 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %718 = load %struct.bz_stream*, %struct.bz_stream** %717, align 8
  %719 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %718, i32 0, i32 0
  %720 = load i8*, i8** %719, align 8
  %721 = getelementptr inbounds i8, i8* %720, i32 1
  store i8* %721, i8** %719, align 8
  %722 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %723 = load %struct.bz_stream*, %struct.bz_stream** %722, align 8
  %724 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %723, i32 0, i32 1
  %725 = load i32, i32* %724, align 8
  %726 = add i32 %725, -1
  store i32 %726, i32* %724, align 8
  %727 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %728 = load %struct.bz_stream*, %struct.bz_stream** %727, align 8
  %729 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %728, i32 0, i32 2
  %730 = load i32, i32* %729, align 4
  %731 = add i32 %730, 1
  store i32 %731, i32* %729, align 4
  %732 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %733 = load %struct.bz_stream*, %struct.bz_stream** %732, align 8
  %734 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %733, i32 0, i32 2
  %735 = load i32, i32* %734, align 4
  %736 = icmp eq i32 %735, 0
  br i1 %736, label %737, label %743

; <label>:737:                                    ; preds = %702
  %738 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %739 = load %struct.bz_stream*, %struct.bz_stream** %738, align 8
  %740 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %739, i32 0, i32 3
  %741 = load i32, i32* %740, align 8
  %742 = add i32 %741, 1
  store i32 %742, i32* %740, align 8
  br label %743

; <label>:743:                                    ; preds = %737, %702
  %744 = load i32, i32* %681, align 4
  %745 = icmp sge i32 %744, 8
  br i1 %745, label %._crit_edge604.loopexit, label %.lr.ph603

; <label>:746:                                    ; preds = %._crit_edge604, %33
  %747 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 19, i32* %747, align 8
  %748 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %749 = load i32, i32* %748, align 4
  %750 = icmp sge i32 %749, 8
  br i1 %750, label %._crit_edge601, label %.lr.ph600.preheader

.lr.ph600.preheader:                              ; preds = %746
  br label %.lr.ph600

._crit_edge601.loopexit:                          ; preds = %810
  br label %._crit_edge601

._crit_edge601:                                   ; preds = %._crit_edge601.loopexit, %746
  %751 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %752 = load i32, i32* %751, align 8
  %753 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %754 = load i32, i32* %753, align 4
  %755 = sub nsw i32 %754, 8
  %756 = lshr i32 %752, %755
  %757 = and i32 %756, 255
  %758 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %759 = load i32, i32* %758, align 4
  %760 = sub nsw i32 %759, 8
  store i32 %760, i32* %758, align 4
  %761 = trunc i32 %757 to i8
  %762 = zext i8 %761 to i32
  %763 = icmp ne i32 %762, 89
  br i1 %763, label %4045, label %813

.lr.ph600:                                        ; preds = %.lr.ph600.preheader, %810
  call void @unroll_loop(i32 96)
  %764 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %765 = load %struct.bz_stream*, %struct.bz_stream** %764, align 8
  %766 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %765, i32 0, i32 1
  %767 = load i32, i32* %766, align 8
  %768 = icmp eq i32 %767, 0
  br i1 %768, label %.loopexit783, label %769

; <label>:769:                                    ; preds = %.lr.ph600
  %770 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %771 = load i32, i32* %770, align 8
  %772 = shl i32 %771, 8
  %773 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %774 = load %struct.bz_stream*, %struct.bz_stream** %773, align 8
  %775 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %774, i32 0, i32 0
  %776 = load i8*, i8** %775, align 8
  %777 = load i8, i8* %776, align 1
  %778 = zext i8 %777 to i32
  %779 = or i32 %772, %778
  %780 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %779, i32* %780, align 8
  %781 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %782 = load i32, i32* %781, align 4
  %783 = add nsw i32 %782, 8
  store i32 %783, i32* %781, align 4
  %784 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %785 = load %struct.bz_stream*, %struct.bz_stream** %784, align 8
  %786 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %785, i32 0, i32 0
  %787 = load i8*, i8** %786, align 8
  %788 = getelementptr inbounds i8, i8* %787, i32 1
  store i8* %788, i8** %786, align 8
  %789 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %790 = load %struct.bz_stream*, %struct.bz_stream** %789, align 8
  %791 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %790, i32 0, i32 1
  %792 = load i32, i32* %791, align 8
  %793 = add i32 %792, -1
  store i32 %793, i32* %791, align 8
  %794 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %795 = load %struct.bz_stream*, %struct.bz_stream** %794, align 8
  %796 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %795, i32 0, i32 2
  %797 = load i32, i32* %796, align 4
  %798 = add i32 %797, 1
  store i32 %798, i32* %796, align 4
  %799 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %800 = load %struct.bz_stream*, %struct.bz_stream** %799, align 8
  %801 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %800, i32 0, i32 2
  %802 = load i32, i32* %801, align 4
  %803 = icmp eq i32 %802, 0
  br i1 %803, label %804, label %810

; <label>:804:                                    ; preds = %769
  %805 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %806 = load %struct.bz_stream*, %struct.bz_stream** %805, align 8
  %807 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %806, i32 0, i32 3
  %808 = load i32, i32* %807, align 8
  %809 = add i32 %808, 1
  store i32 %809, i32* %807, align 8
  br label %810

; <label>:810:                                    ; preds = %804, %769
  %811 = load i32, i32* %748, align 4
  %812 = icmp sge i32 %811, 8
  br i1 %812, label %._crit_edge601.loopexit, label %.lr.ph600

; <label>:813:                                    ; preds = %._crit_edge601
  %814 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 11
  %815 = load i32, i32* %814, align 8
  %816 = add nsw i32 %815, 1
  store i32 %816, i32* %814, align 8
  %817 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 12
  %818 = load i32, i32* %817, align 4
  %819 = icmp sge i32 %818, 2
  br i1 %819, label %820, label %826

; <label>:820:                                    ; preds = %813
  %821 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %822 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 11
  %823 = load i32, i32* %822, align 8
  %824 = getelementptr [20 x i8], [20 x i8]* @.str.160, i32 0, i32 0
  %825 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %821, i8* %824, i32 %823)
  br label %826

; <label>:826:                                    ; preds = %820, %813
  %827 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  store i32 0, i32* %827, align 8
  br label %828

; <label>:828:                                    ; preds = %33, %826
  %829 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 20, i32* %829, align 8
  %830 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %831 = load i32, i32* %830, align 4
  %832 = icmp sge i32 %831, 8
  br i1 %832, label %._crit_edge598, label %.lr.ph597.preheader

.lr.ph597.preheader:                              ; preds = %828
  br label %.lr.ph597

._crit_edge598.loopexit:                          ; preds = %896
  br label %._crit_edge598

._crit_edge598:                                   ; preds = %._crit_edge598.loopexit, %828
  %833 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %834 = load i32, i32* %833, align 8
  %835 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %836 = load i32, i32* %835, align 4
  %837 = sub nsw i32 %836, 8
  %838 = lshr i32 %834, %837
  %839 = and i32 %838, 255
  %840 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %841 = load i32, i32* %840, align 4
  %842 = sub nsw i32 %841, 8
  store i32 %842, i32* %840, align 4
  %843 = trunc i32 %839 to i8
  %844 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  %845 = load i32, i32* %844, align 8
  %846 = shl i32 %845, 8
  %847 = zext i8 %843 to i32
  %848 = or i32 %846, %847
  %849 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  store i32 %848, i32* %849, align 8
  br label %899

.lr.ph597:                                        ; preds = %.lr.ph597.preheader, %896
  call void @unroll_loop(i32 97)
  %850 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %851 = load %struct.bz_stream*, %struct.bz_stream** %850, align 8
  %852 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %851, i32 0, i32 1
  %853 = load i32, i32* %852, align 8
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %.loopexit758, label %855

; <label>:855:                                    ; preds = %.lr.ph597
  %856 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %857 = load i32, i32* %856, align 8
  %858 = shl i32 %857, 8
  %859 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %860 = load %struct.bz_stream*, %struct.bz_stream** %859, align 8
  %861 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %860, i32 0, i32 0
  %862 = load i8*, i8** %861, align 8
  %863 = load i8, i8* %862, align 1
  %864 = zext i8 %863 to i32
  %865 = or i32 %858, %864
  %866 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %865, i32* %866, align 8
  %867 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %868 = load i32, i32* %867, align 4
  %869 = add nsw i32 %868, 8
  store i32 %869, i32* %867, align 4
  %870 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %871 = load %struct.bz_stream*, %struct.bz_stream** %870, align 8
  %872 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %871, i32 0, i32 0
  %873 = load i8*, i8** %872, align 8
  %874 = getelementptr inbounds i8, i8* %873, i32 1
  store i8* %874, i8** %872, align 8
  %875 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %876 = load %struct.bz_stream*, %struct.bz_stream** %875, align 8
  %877 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %876, i32 0, i32 1
  %878 = load i32, i32* %877, align 8
  %879 = add i32 %878, -1
  store i32 %879, i32* %877, align 8
  %880 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %881 = load %struct.bz_stream*, %struct.bz_stream** %880, align 8
  %882 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %881, i32 0, i32 2
  %883 = load i32, i32* %882, align 4
  %884 = add i32 %883, 1
  store i32 %884, i32* %882, align 4
  %885 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %886 = load %struct.bz_stream*, %struct.bz_stream** %885, align 8
  %887 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %886, i32 0, i32 2
  %888 = load i32, i32* %887, align 4
  %889 = icmp eq i32 %888, 0
  br i1 %889, label %890, label %896

; <label>:890:                                    ; preds = %855
  %891 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %892 = load %struct.bz_stream*, %struct.bz_stream** %891, align 8
  %893 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %892, i32 0, i32 3
  %894 = load i32, i32* %893, align 8
  %895 = add i32 %894, 1
  store i32 %895, i32* %893, align 8
  br label %896

; <label>:896:                                    ; preds = %890, %855
  %897 = load i32, i32* %830, align 4
  %898 = icmp sge i32 %897, 8
  br i1 %898, label %._crit_edge598.loopexit, label %.lr.ph597

; <label>:899:                                    ; preds = %33, %._crit_edge598
  %900 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 21, i32* %900, align 8
  %901 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %902 = load i32, i32* %901, align 4
  %903 = icmp sge i32 %902, 8
  br i1 %903, label %._crit_edge595, label %.lr.ph594.preheader

.lr.ph594.preheader:                              ; preds = %899
  br label %.lr.ph594

._crit_edge595.loopexit:                          ; preds = %967
  br label %._crit_edge595

._crit_edge595:                                   ; preds = %._crit_edge595.loopexit, %899
  %904 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %905 = load i32, i32* %904, align 8
  %906 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %907 = load i32, i32* %906, align 4
  %908 = sub nsw i32 %907, 8
  %909 = lshr i32 %905, %908
  %910 = and i32 %909, 255
  %911 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %912 = load i32, i32* %911, align 4
  %913 = sub nsw i32 %912, 8
  store i32 %913, i32* %911, align 4
  %914 = trunc i32 %910 to i8
  %915 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  %916 = load i32, i32* %915, align 8
  %917 = shl i32 %916, 8
  %918 = zext i8 %914 to i32
  %919 = or i32 %917, %918
  %920 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  store i32 %919, i32* %920, align 8
  br label %970

.lr.ph594:                                        ; preds = %.lr.ph594.preheader, %967
  call void @unroll_loop(i32 98)
  %921 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %922 = load %struct.bz_stream*, %struct.bz_stream** %921, align 8
  %923 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %922, i32 0, i32 1
  %924 = load i32, i32* %923, align 8
  %925 = icmp eq i32 %924, 0
  br i1 %925, label %.loopexit733, label %926

; <label>:926:                                    ; preds = %.lr.ph594
  %927 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %928 = load i32, i32* %927, align 8
  %929 = shl i32 %928, 8
  %930 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %931 = load %struct.bz_stream*, %struct.bz_stream** %930, align 8
  %932 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %931, i32 0, i32 0
  %933 = load i8*, i8** %932, align 8
  %934 = load i8, i8* %933, align 1
  %935 = zext i8 %934 to i32
  %936 = or i32 %929, %935
  %937 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %936, i32* %937, align 8
  %938 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %939 = load i32, i32* %938, align 4
  %940 = add nsw i32 %939, 8
  store i32 %940, i32* %938, align 4
  %941 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %942 = load %struct.bz_stream*, %struct.bz_stream** %941, align 8
  %943 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %942, i32 0, i32 0
  %944 = load i8*, i8** %943, align 8
  %945 = getelementptr inbounds i8, i8* %944, i32 1
  store i8* %945, i8** %943, align 8
  %946 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %947 = load %struct.bz_stream*, %struct.bz_stream** %946, align 8
  %948 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %947, i32 0, i32 1
  %949 = load i32, i32* %948, align 8
  %950 = add i32 %949, -1
  store i32 %950, i32* %948, align 8
  %951 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %952 = load %struct.bz_stream*, %struct.bz_stream** %951, align 8
  %953 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %952, i32 0, i32 2
  %954 = load i32, i32* %953, align 4
  %955 = add i32 %954, 1
  store i32 %955, i32* %953, align 4
  %956 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %957 = load %struct.bz_stream*, %struct.bz_stream** %956, align 8
  %958 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %957, i32 0, i32 2
  %959 = load i32, i32* %958, align 4
  %960 = icmp eq i32 %959, 0
  br i1 %960, label %961, label %967

; <label>:961:                                    ; preds = %926
  %962 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %963 = load %struct.bz_stream*, %struct.bz_stream** %962, align 8
  %964 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %963, i32 0, i32 3
  %965 = load i32, i32* %964, align 8
  %966 = add i32 %965, 1
  store i32 %966, i32* %964, align 8
  br label %967

; <label>:967:                                    ; preds = %961, %926
  %968 = load i32, i32* %901, align 4
  %969 = icmp sge i32 %968, 8
  br i1 %969, label %._crit_edge595.loopexit, label %.lr.ph594

; <label>:970:                                    ; preds = %33, %._crit_edge595
  %971 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 22, i32* %971, align 8
  %972 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %973 = load i32, i32* %972, align 4
  %974 = icmp sge i32 %973, 8
  br i1 %974, label %._crit_edge592, label %.lr.ph591.preheader

.lr.ph591.preheader:                              ; preds = %970
  br label %.lr.ph591

._crit_edge592.loopexit:                          ; preds = %1038
  br label %._crit_edge592

._crit_edge592:                                   ; preds = %._crit_edge592.loopexit, %970
  %975 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %976 = load i32, i32* %975, align 8
  %977 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %978 = load i32, i32* %977, align 4
  %979 = sub nsw i32 %978, 8
  %980 = lshr i32 %976, %979
  %981 = and i32 %980, 255
  %982 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %983 = load i32, i32* %982, align 4
  %984 = sub nsw i32 %983, 8
  store i32 %984, i32* %982, align 4
  %985 = trunc i32 %981 to i8
  %986 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  %987 = load i32, i32* %986, align 8
  %988 = shl i32 %987, 8
  %989 = zext i8 %985 to i32
  %990 = or i32 %988, %989
  %991 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  store i32 %990, i32* %991, align 8
  br label %1041

.lr.ph591:                                        ; preds = %.lr.ph591.preheader, %1038
  call void @unroll_loop(i32 99)
  %992 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %993 = load %struct.bz_stream*, %struct.bz_stream** %992, align 8
  %994 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %993, i32 0, i32 1
  %995 = load i32, i32* %994, align 8
  %996 = icmp eq i32 %995, 0
  br i1 %996, label %.loopexit708, label %997

; <label>:997:                                    ; preds = %.lr.ph591
  %998 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %999 = load i32, i32* %998, align 8
  %1000 = shl i32 %999, 8
  %1001 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1002 = load %struct.bz_stream*, %struct.bz_stream** %1001, align 8
  %1003 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1002, i32 0, i32 0
  %1004 = load i8*, i8** %1003, align 8
  %1005 = load i8, i8* %1004, align 1
  %1006 = zext i8 %1005 to i32
  %1007 = or i32 %1000, %1006
  %1008 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1007, i32* %1008, align 8
  %1009 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1010 = load i32, i32* %1009, align 4
  %1011 = add nsw i32 %1010, 8
  store i32 %1011, i32* %1009, align 4
  %1012 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1013 = load %struct.bz_stream*, %struct.bz_stream** %1012, align 8
  %1014 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1013, i32 0, i32 0
  %1015 = load i8*, i8** %1014, align 8
  %1016 = getelementptr inbounds i8, i8* %1015, i32 1
  store i8* %1016, i8** %1014, align 8
  %1017 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1018 = load %struct.bz_stream*, %struct.bz_stream** %1017, align 8
  %1019 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1018, i32 0, i32 1
  %1020 = load i32, i32* %1019, align 8
  %1021 = add i32 %1020, -1
  store i32 %1021, i32* %1019, align 8
  %1022 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1023 = load %struct.bz_stream*, %struct.bz_stream** %1022, align 8
  %1024 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1023, i32 0, i32 2
  %1025 = load i32, i32* %1024, align 4
  %1026 = add i32 %1025, 1
  store i32 %1026, i32* %1024, align 4
  %1027 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1028 = load %struct.bz_stream*, %struct.bz_stream** %1027, align 8
  %1029 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1028, i32 0, i32 2
  %1030 = load i32, i32* %1029, align 4
  %1031 = icmp eq i32 %1030, 0
  br i1 %1031, label %1032, label %1038

; <label>:1032:                                   ; preds = %997
  %1033 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1034 = load %struct.bz_stream*, %struct.bz_stream** %1033, align 8
  %1035 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1034, i32 0, i32 3
  %1036 = load i32, i32* %1035, align 8
  %1037 = add i32 %1036, 1
  store i32 %1037, i32* %1035, align 8
  br label %1038

; <label>:1038:                                   ; preds = %1032, %997
  %1039 = load i32, i32* %972, align 4
  %1040 = icmp sge i32 %1039, 8
  br i1 %1040, label %._crit_edge592.loopexit, label %.lr.ph591

; <label>:1041:                                   ; preds = %33, %._crit_edge592
  %1042 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 23, i32* %1042, align 8
  %1043 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1044 = load i32, i32* %1043, align 4
  %1045 = icmp sge i32 %1044, 8
  br i1 %1045, label %._crit_edge589, label %.lr.ph588.preheader

.lr.ph588.preheader:                              ; preds = %1041
  br label %.lr.ph588

._crit_edge589.loopexit:                          ; preds = %1109
  br label %._crit_edge589

._crit_edge589:                                   ; preds = %._crit_edge589.loopexit, %1041
  %1046 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1047 = load i32, i32* %1046, align 8
  %1048 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1049 = load i32, i32* %1048, align 4
  %1050 = sub nsw i32 %1049, 8
  %1051 = lshr i32 %1047, %1050
  %1052 = and i32 %1051, 255
  %1053 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1054 = load i32, i32* %1053, align 4
  %1055 = sub nsw i32 %1054, 8
  store i32 %1055, i32* %1053, align 4
  %1056 = trunc i32 %1052 to i8
  %1057 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  %1058 = load i32, i32* %1057, align 8
  %1059 = shl i32 %1058, 8
  %1060 = zext i8 %1056 to i32
  %1061 = or i32 %1059, %1060
  %1062 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 23
  store i32 %1061, i32* %1062, align 8
  br label %1112

.lr.ph588:                                        ; preds = %.lr.ph588.preheader, %1109
  call void @unroll_loop(i32 100)
  %1063 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1064 = load %struct.bz_stream*, %struct.bz_stream** %1063, align 8
  %1065 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1064, i32 0, i32 1
  %1066 = load i32, i32* %1065, align 8
  %1067 = icmp eq i32 %1066, 0
  br i1 %1067, label %.loopexit683, label %1068

; <label>:1068:                                   ; preds = %.lr.ph588
  %1069 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1070 = load i32, i32* %1069, align 8
  %1071 = shl i32 %1070, 8
  %1072 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1073 = load %struct.bz_stream*, %struct.bz_stream** %1072, align 8
  %1074 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1073, i32 0, i32 0
  %1075 = load i8*, i8** %1074, align 8
  %1076 = load i8, i8* %1075, align 1
  %1077 = zext i8 %1076 to i32
  %1078 = or i32 %1071, %1077
  %1079 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1078, i32* %1079, align 8
  %1080 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1081 = load i32, i32* %1080, align 4
  %1082 = add nsw i32 %1081, 8
  store i32 %1082, i32* %1080, align 4
  %1083 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1084 = load %struct.bz_stream*, %struct.bz_stream** %1083, align 8
  %1085 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1084, i32 0, i32 0
  %1086 = load i8*, i8** %1085, align 8
  %1087 = getelementptr inbounds i8, i8* %1086, i32 1
  store i8* %1087, i8** %1085, align 8
  %1088 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1089 = load %struct.bz_stream*, %struct.bz_stream** %1088, align 8
  %1090 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1089, i32 0, i32 1
  %1091 = load i32, i32* %1090, align 8
  %1092 = add i32 %1091, -1
  store i32 %1092, i32* %1090, align 8
  %1093 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1094 = load %struct.bz_stream*, %struct.bz_stream** %1093, align 8
  %1095 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1094, i32 0, i32 2
  %1096 = load i32, i32* %1095, align 4
  %1097 = add i32 %1096, 1
  store i32 %1097, i32* %1095, align 4
  %1098 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1099 = load %struct.bz_stream*, %struct.bz_stream** %1098, align 8
  %1100 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1099, i32 0, i32 2
  %1101 = load i32, i32* %1100, align 4
  %1102 = icmp eq i32 %1101, 0
  br i1 %1102, label %1103, label %1109

; <label>:1103:                                   ; preds = %1068
  %1104 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1105 = load %struct.bz_stream*, %struct.bz_stream** %1104, align 8
  %1106 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1105, i32 0, i32 3
  %1107 = load i32, i32* %1106, align 8
  %1108 = add i32 %1107, 1
  store i32 %1108, i32* %1106, align 8
  br label %1109

; <label>:1109:                                   ; preds = %1103, %1068
  %1110 = load i32, i32* %1043, align 4
  %1111 = icmp sge i32 %1110, 8
  br i1 %1111, label %._crit_edge589.loopexit, label %.lr.ph588

; <label>:1112:                                   ; preds = %33, %._crit_edge589
  %1113 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 24, i32* %1113, align 8
  %1114 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1115 = load i32, i32* %1114, align 4
  %1116 = icmp sge i32 %1115, 1
  br i1 %1116, label %._crit_edge586, label %.lr.ph585.preheader

.lr.ph585.preheader:                              ; preds = %1112
  br label %.lr.ph585

._crit_edge586.loopexit:                          ; preds = %1176
  br label %._crit_edge586

._crit_edge586:                                   ; preds = %._crit_edge586.loopexit, %1112
  %1117 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1118 = load i32, i32* %1117, align 8
  %1119 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1120 = load i32, i32* %1119, align 4
  %1121 = sub nsw i32 %1120, 1
  %1122 = lshr i32 %1118, %1121
  %1123 = and i32 %1122, 1
  %1124 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1125 = load i32, i32* %1124, align 4
  %1126 = sub nsw i32 %1125, 1
  store i32 %1126, i32* %1124, align 4
  %1127 = trunc i32 %1123 to i8
  %1128 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 4
  store i8 %1127, i8* %1128, align 4
  %1129 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  store i32 0, i32* %1129, align 8
  br label %1179

.lr.ph585:                                        ; preds = %.lr.ph585.preheader, %1176
  call void @unroll_loop(i32 101)
  %1130 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1131 = load %struct.bz_stream*, %struct.bz_stream** %1130, align 8
  %1132 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1131, i32 0, i32 1
  %1133 = load i32, i32* %1132, align 8
  %1134 = icmp eq i32 %1133, 0
  br i1 %1134, label %.loopexit658, label %1135

; <label>:1135:                                   ; preds = %.lr.ph585
  %1136 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1137 = load i32, i32* %1136, align 8
  %1138 = shl i32 %1137, 8
  %1139 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1140 = load %struct.bz_stream*, %struct.bz_stream** %1139, align 8
  %1141 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1140, i32 0, i32 0
  %1142 = load i8*, i8** %1141, align 8
  %1143 = load i8, i8* %1142, align 1
  %1144 = zext i8 %1143 to i32
  %1145 = or i32 %1138, %1144
  %1146 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1145, i32* %1146, align 8
  %1147 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1148 = load i32, i32* %1147, align 4
  %1149 = add nsw i32 %1148, 8
  store i32 %1149, i32* %1147, align 4
  %1150 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1151 = load %struct.bz_stream*, %struct.bz_stream** %1150, align 8
  %1152 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1151, i32 0, i32 0
  %1153 = load i8*, i8** %1152, align 8
  %1154 = getelementptr inbounds i8, i8* %1153, i32 1
  store i8* %1154, i8** %1152, align 8
  %1155 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1156 = load %struct.bz_stream*, %struct.bz_stream** %1155, align 8
  %1157 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1156, i32 0, i32 1
  %1158 = load i32, i32* %1157, align 8
  %1159 = add i32 %1158, -1
  store i32 %1159, i32* %1157, align 8
  %1160 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1161 = load %struct.bz_stream*, %struct.bz_stream** %1160, align 8
  %1162 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1161, i32 0, i32 2
  %1163 = load i32, i32* %1162, align 4
  %1164 = add i32 %1163, 1
  store i32 %1164, i32* %1162, align 4
  %1165 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1166 = load %struct.bz_stream*, %struct.bz_stream** %1165, align 8
  %1167 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1166, i32 0, i32 2
  %1168 = load i32, i32* %1167, align 4
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1170, label %1176

; <label>:1170:                                   ; preds = %1135
  %1171 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1172 = load %struct.bz_stream*, %struct.bz_stream** %1171, align 8
  %1173 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1172, i32 0, i32 3
  %1174 = load i32, i32* %1173, align 8
  %1175 = add i32 %1174, 1
  store i32 %1175, i32* %1173, align 8
  br label %1176

; <label>:1176:                                   ; preds = %1170, %1135
  %1177 = load i32, i32* %1114, align 4
  %1178 = icmp sge i32 %1177, 1
  br i1 %1178, label %._crit_edge586.loopexit, label %.lr.ph585

; <label>:1179:                                   ; preds = %33, %._crit_edge586
  %1180 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 25, i32* %1180, align 8
  %1181 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1182 = load i32, i32* %1181, align 4
  %1183 = icmp sge i32 %1182, 8
  br i1 %1183, label %._crit_edge583, label %.lr.ph582.preheader

.lr.ph582.preheader:                              ; preds = %1179
  br label %.lr.ph582

._crit_edge583.loopexit:                          ; preds = %1247
  br label %._crit_edge583

._crit_edge583:                                   ; preds = %._crit_edge583.loopexit, %1179
  %1184 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1185 = load i32, i32* %1184, align 8
  %1186 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1187 = load i32, i32* %1186, align 4
  %1188 = sub nsw i32 %1187, 8
  %1189 = lshr i32 %1185, %1188
  %1190 = and i32 %1189, 255
  %1191 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1192 = load i32, i32* %1191, align 4
  %1193 = sub nsw i32 %1192, 8
  store i32 %1193, i32* %1191, align 4
  %1194 = trunc i32 %1190 to i8
  %1195 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %1196 = load i32, i32* %1195, align 8
  %1197 = shl i32 %1196, 8
  %1198 = zext i8 %1194 to i32
  %1199 = or i32 %1197, %1198
  %1200 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  store i32 %1199, i32* %1200, align 8
  br label %1250

.lr.ph582:                                        ; preds = %.lr.ph582.preheader, %1247
  call void @unroll_loop(i32 102)
  %1201 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1202 = load %struct.bz_stream*, %struct.bz_stream** %1201, align 8
  %1203 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1202, i32 0, i32 1
  %1204 = load i32, i32* %1203, align 8
  %1205 = icmp eq i32 %1204, 0
  br i1 %1205, label %.loopexit633, label %1206

; <label>:1206:                                   ; preds = %.lr.ph582
  %1207 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1208 = load i32, i32* %1207, align 8
  %1209 = shl i32 %1208, 8
  %1210 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1211 = load %struct.bz_stream*, %struct.bz_stream** %1210, align 8
  %1212 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1211, i32 0, i32 0
  %1213 = load i8*, i8** %1212, align 8
  %1214 = load i8, i8* %1213, align 1
  %1215 = zext i8 %1214 to i32
  %1216 = or i32 %1209, %1215
  %1217 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1216, i32* %1217, align 8
  %1218 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1219 = load i32, i32* %1218, align 4
  %1220 = add nsw i32 %1219, 8
  store i32 %1220, i32* %1218, align 4
  %1221 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1222 = load %struct.bz_stream*, %struct.bz_stream** %1221, align 8
  %1223 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1222, i32 0, i32 0
  %1224 = load i8*, i8** %1223, align 8
  %1225 = getelementptr inbounds i8, i8* %1224, i32 1
  store i8* %1225, i8** %1223, align 8
  %1226 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1227 = load %struct.bz_stream*, %struct.bz_stream** %1226, align 8
  %1228 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1227, i32 0, i32 1
  %1229 = load i32, i32* %1228, align 8
  %1230 = add i32 %1229, -1
  store i32 %1230, i32* %1228, align 8
  %1231 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1232 = load %struct.bz_stream*, %struct.bz_stream** %1231, align 8
  %1233 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1232, i32 0, i32 2
  %1234 = load i32, i32* %1233, align 4
  %1235 = add i32 %1234, 1
  store i32 %1235, i32* %1233, align 4
  %1236 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1237 = load %struct.bz_stream*, %struct.bz_stream** %1236, align 8
  %1238 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1237, i32 0, i32 2
  %1239 = load i32, i32* %1238, align 4
  %1240 = icmp eq i32 %1239, 0
  br i1 %1240, label %1241, label %1247

; <label>:1241:                                   ; preds = %1206
  %1242 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1243 = load %struct.bz_stream*, %struct.bz_stream** %1242, align 8
  %1244 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1243, i32 0, i32 3
  %1245 = load i32, i32* %1244, align 8
  %1246 = add i32 %1245, 1
  store i32 %1246, i32* %1244, align 8
  br label %1247

; <label>:1247:                                   ; preds = %1241, %1206
  %1248 = load i32, i32* %1181, align 4
  %1249 = icmp sge i32 %1248, 8
  br i1 %1249, label %._crit_edge583.loopexit, label %.lr.ph582

; <label>:1250:                                   ; preds = %33, %._crit_edge583
  %1251 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 26, i32* %1251, align 8
  %1252 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1253 = load i32, i32* %1252, align 4
  %1254 = icmp sge i32 %1253, 8
  br i1 %1254, label %._crit_edge580, label %.lr.ph579.preheader

.lr.ph579.preheader:                              ; preds = %1250
  br label %.lr.ph579

._crit_edge580.loopexit:                          ; preds = %1318
  br label %._crit_edge580

._crit_edge580:                                   ; preds = %._crit_edge580.loopexit, %1250
  %1255 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1256 = load i32, i32* %1255, align 8
  %1257 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1258 = load i32, i32* %1257, align 4
  %1259 = sub nsw i32 %1258, 8
  %1260 = lshr i32 %1256, %1259
  %1261 = and i32 %1260, 255
  %1262 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1263 = load i32, i32* %1262, align 4
  %1264 = sub nsw i32 %1263, 8
  store i32 %1264, i32* %1262, align 4
  %1265 = trunc i32 %1261 to i8
  %1266 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %1267 = load i32, i32* %1266, align 8
  %1268 = shl i32 %1267, 8
  %1269 = zext i8 %1265 to i32
  %1270 = or i32 %1268, %1269
  %1271 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  store i32 %1270, i32* %1271, align 8
  br label %1321

.lr.ph579:                                        ; preds = %.lr.ph579.preheader, %1318
  call void @unroll_loop(i32 103)
  %1272 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1273 = load %struct.bz_stream*, %struct.bz_stream** %1272, align 8
  %1274 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1273, i32 0, i32 1
  %1275 = load i32, i32* %1274, align 8
  %1276 = icmp eq i32 %1275, 0
  br i1 %1276, label %.loopexit608, label %1277

; <label>:1277:                                   ; preds = %.lr.ph579
  %1278 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1279 = load i32, i32* %1278, align 8
  %1280 = shl i32 %1279, 8
  %1281 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1282 = load %struct.bz_stream*, %struct.bz_stream** %1281, align 8
  %1283 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1282, i32 0, i32 0
  %1284 = load i8*, i8** %1283, align 8
  %1285 = load i8, i8* %1284, align 1
  %1286 = zext i8 %1285 to i32
  %1287 = or i32 %1280, %1286
  %1288 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1287, i32* %1288, align 8
  %1289 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1290 = load i32, i32* %1289, align 4
  %1291 = add nsw i32 %1290, 8
  store i32 %1291, i32* %1289, align 4
  %1292 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1293 = load %struct.bz_stream*, %struct.bz_stream** %1292, align 8
  %1294 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1293, i32 0, i32 0
  %1295 = load i8*, i8** %1294, align 8
  %1296 = getelementptr inbounds i8, i8* %1295, i32 1
  store i8* %1296, i8** %1294, align 8
  %1297 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1298 = load %struct.bz_stream*, %struct.bz_stream** %1297, align 8
  %1299 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1298, i32 0, i32 1
  %1300 = load i32, i32* %1299, align 8
  %1301 = add i32 %1300, -1
  store i32 %1301, i32* %1299, align 8
  %1302 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1303 = load %struct.bz_stream*, %struct.bz_stream** %1302, align 8
  %1304 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1303, i32 0, i32 2
  %1305 = load i32, i32* %1304, align 4
  %1306 = add i32 %1305, 1
  store i32 %1306, i32* %1304, align 4
  %1307 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1308 = load %struct.bz_stream*, %struct.bz_stream** %1307, align 8
  %1309 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1308, i32 0, i32 2
  %1310 = load i32, i32* %1309, align 4
  %1311 = icmp eq i32 %1310, 0
  br i1 %1311, label %1312, label %1318

; <label>:1312:                                   ; preds = %1277
  %1313 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1314 = load %struct.bz_stream*, %struct.bz_stream** %1313, align 8
  %1315 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1314, i32 0, i32 3
  %1316 = load i32, i32* %1315, align 8
  %1317 = add i32 %1316, 1
  store i32 %1317, i32* %1315, align 8
  br label %1318

; <label>:1318:                                   ; preds = %1312, %1277
  %1319 = load i32, i32* %1252, align 4
  %1320 = icmp sge i32 %1319, 8
  br i1 %1320, label %._crit_edge580.loopexit, label %.lr.ph579

; <label>:1321:                                   ; preds = %33, %._crit_edge580
  %1322 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 27, i32* %1322, align 8
  %1323 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1324 = load i32, i32* %1323, align 4
  %1325 = icmp sge i32 %1324, 8
  br i1 %1325, label %._crit_edge577, label %.lr.ph576.preheader

.lr.ph576.preheader:                              ; preds = %1321
  br label %.lr.ph576

._crit_edge577.loopexit:                          ; preds = %1392
  br label %._crit_edge577

._crit_edge577:                                   ; preds = %._crit_edge577.loopexit, %1321
  %1326 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1327 = load i32, i32* %1326, align 8
  %1328 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1329 = load i32, i32* %1328, align 4
  %1330 = sub nsw i32 %1329, 8
  %1331 = lshr i32 %1327, %1330
  %1332 = and i32 %1331, 255
  %1333 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1334 = load i32, i32* %1333, align 4
  %1335 = sub nsw i32 %1334, 8
  store i32 %1335, i32* %1333, align 4
  %1336 = trunc i32 %1332 to i8
  %1337 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %1338 = load i32, i32* %1337, align 8
  %1339 = shl i32 %1338, 8
  %1340 = zext i8 %1336 to i32
  %1341 = or i32 %1339, %1340
  %1342 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  store i32 %1341, i32* %1342, align 8
  %1343 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %1344 = load i32, i32* %1343, align 8
  %1345 = icmp slt i32 %1344, 0
  br i1 %1345, label %4045, label %1395

.lr.ph576:                                        ; preds = %.lr.ph576.preheader, %1392
  call void @unroll_loop(i32 104)
  %1346 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1347 = load %struct.bz_stream*, %struct.bz_stream** %1346, align 8
  %1348 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1347, i32 0, i32 1
  %1349 = load i32, i32* %1348, align 8
  %1350 = icmp eq i32 %1349, 0
  br i1 %1350, label %.loopexit583, label %1351

; <label>:1351:                                   ; preds = %.lr.ph576
  %1352 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1353 = load i32, i32* %1352, align 8
  %1354 = shl i32 %1353, 8
  %1355 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1356 = load %struct.bz_stream*, %struct.bz_stream** %1355, align 8
  %1357 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1356, i32 0, i32 0
  %1358 = load i8*, i8** %1357, align 8
  %1359 = load i8, i8* %1358, align 1
  %1360 = zext i8 %1359 to i32
  %1361 = or i32 %1354, %1360
  %1362 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1361, i32* %1362, align 8
  %1363 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1364 = load i32, i32* %1363, align 4
  %1365 = add nsw i32 %1364, 8
  store i32 %1365, i32* %1363, align 4
  %1366 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1367 = load %struct.bz_stream*, %struct.bz_stream** %1366, align 8
  %1368 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1367, i32 0, i32 0
  %1369 = load i8*, i8** %1368, align 8
  %1370 = getelementptr inbounds i8, i8* %1369, i32 1
  store i8* %1370, i8** %1368, align 8
  %1371 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1372 = load %struct.bz_stream*, %struct.bz_stream** %1371, align 8
  %1373 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1372, i32 0, i32 1
  %1374 = load i32, i32* %1373, align 8
  %1375 = add i32 %1374, -1
  store i32 %1375, i32* %1373, align 8
  %1376 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1377 = load %struct.bz_stream*, %struct.bz_stream** %1376, align 8
  %1378 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1377, i32 0, i32 2
  %1379 = load i32, i32* %1378, align 4
  %1380 = add i32 %1379, 1
  store i32 %1380, i32* %1378, align 4
  %1381 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1382 = load %struct.bz_stream*, %struct.bz_stream** %1381, align 8
  %1383 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1382, i32 0, i32 2
  %1384 = load i32, i32* %1383, align 4
  %1385 = icmp eq i32 %1384, 0
  br i1 %1385, label %1386, label %1392

; <label>:1386:                                   ; preds = %1351
  %1387 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1388 = load %struct.bz_stream*, %struct.bz_stream** %1387, align 8
  %1389 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1388, i32 0, i32 3
  %1390 = load i32, i32* %1389, align 8
  %1391 = add i32 %1390, 1
  store i32 %1391, i32* %1389, align 8
  br label %1392

; <label>:1392:                                   ; preds = %1386, %1351
  %1393 = load i32, i32* %1323, align 4
  %1394 = icmp sge i32 %1393, 8
  br i1 %1394, label %._crit_edge577.loopexit, label %.lr.ph576

; <label>:1395:                                   ; preds = %._crit_edge577
  %1396 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %1397 = load i32, i32* %1396, align 8
  %1398 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %1399 = load i32, i32* %1398, align 8
  %1400 = mul nsw i32 100000, %1399
  %1401 = add nsw i32 10, %1400
  %1402 = icmp sgt i32 %1397, %1401
  br i1 %1402, label %4045, label %1403

; <label>:1403:                                   ; preds = %1395, %1477
  %.09 = phi i32 [ %1478, %1477 ], [ 0, %1395 ]
  %1404 = icmp slt i32 %.09, 16
  br i1 %1404, label %1405, label %.preheader581

.preheader581:                                    ; preds = %1403
  br label %1479

; <label>:1405:                                   ; preds = %1403, %33
  %.110 = phi i32 [ %35, %33 ], [ %.09, %1403 ]
  %1406 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 28, i32* %1406, align 8
  %1407 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1408 = load i32, i32* %1407, align 4
  %1409 = icmp sge i32 %1408, 1
  br i1 %1409, label %._crit_edge398, label %.lr.ph397.preheader

.lr.ph397.preheader:                              ; preds = %1405
  br label %.lr.ph397

._crit_edge398.loopexit:                          ; preds = %1472
  br label %._crit_edge398

._crit_edge398:                                   ; preds = %._crit_edge398.loopexit, %1405
  %1410 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1411 = load i32, i32* %1410, align 8
  %1412 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1413 = load i32, i32* %1412, align 4
  %1414 = sub nsw i32 %1413, 1
  %1415 = lshr i32 %1411, %1414
  %1416 = and i32 %1415, 1
  %1417 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1418 = load i32, i32* %1417, align 4
  %1419 = sub nsw i32 %1418, 1
  store i32 %1419, i32* %1417, align 4
  %1420 = trunc i32 %1416 to i8
  %1421 = zext i8 %1420 to i32
  %1422 = icmp eq i32 %1421, 1
  %1423 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 29
  %1424 = sext i32 %.110 to i64
  %1425 = getelementptr inbounds [16 x i8], [16 x i8]* %1423, i64 0, i64 %1424
  br i1 %1422, label %1475, label %1476

.lr.ph397:                                        ; preds = %.lr.ph397.preheader, %1472
  call void @unroll_loop(i32 105)
  %1426 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1427 = load %struct.bz_stream*, %struct.bz_stream** %1426, align 8
  %1428 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1427, i32 0, i32 1
  %1429 = load i32, i32* %1428, align 8
  %1430 = icmp eq i32 %1429, 0
  br i1 %1430, label %.loopexit202, label %1431

; <label>:1431:                                   ; preds = %.lr.ph397
  %1432 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1433 = load i32, i32* %1432, align 8
  %1434 = shl i32 %1433, 8
  %1435 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1436 = load %struct.bz_stream*, %struct.bz_stream** %1435, align 8
  %1437 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1436, i32 0, i32 0
  %1438 = load i8*, i8** %1437, align 8
  %1439 = load i8, i8* %1438, align 1
  %1440 = zext i8 %1439 to i32
  %1441 = or i32 %1434, %1440
  %1442 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1441, i32* %1442, align 8
  %1443 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1444 = load i32, i32* %1443, align 4
  %1445 = add nsw i32 %1444, 8
  store i32 %1445, i32* %1443, align 4
  %1446 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1447 = load %struct.bz_stream*, %struct.bz_stream** %1446, align 8
  %1448 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1447, i32 0, i32 0
  %1449 = load i8*, i8** %1448, align 8
  %1450 = getelementptr inbounds i8, i8* %1449, i32 1
  store i8* %1450, i8** %1448, align 8
  %1451 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1452 = load %struct.bz_stream*, %struct.bz_stream** %1451, align 8
  %1453 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1452, i32 0, i32 1
  %1454 = load i32, i32* %1453, align 8
  %1455 = add i32 %1454, -1
  store i32 %1455, i32* %1453, align 8
  %1456 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1457 = load %struct.bz_stream*, %struct.bz_stream** %1456, align 8
  %1458 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1457, i32 0, i32 2
  %1459 = load i32, i32* %1458, align 4
  %1460 = add i32 %1459, 1
  store i32 %1460, i32* %1458, align 4
  %1461 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1462 = load %struct.bz_stream*, %struct.bz_stream** %1461, align 8
  %1463 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1462, i32 0, i32 2
  %1464 = load i32, i32* %1463, align 4
  %1465 = icmp eq i32 %1464, 0
  br i1 %1465, label %1466, label %1472

; <label>:1466:                                   ; preds = %1431
  %1467 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1468 = load %struct.bz_stream*, %struct.bz_stream** %1467, align 8
  %1469 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1468, i32 0, i32 3
  %1470 = load i32, i32* %1469, align 8
  %1471 = add i32 %1470, 1
  store i32 %1471, i32* %1469, align 8
  br label %1472

; <label>:1472:                                   ; preds = %1466, %1431
  %1473 = load i32, i32* %1407, align 4
  %1474 = icmp sge i32 %1473, 1
  br i1 %1474, label %._crit_edge398.loopexit, label %.lr.ph397

; <label>:1475:                                   ; preds = %._crit_edge398
  store i8 1, i8* %1425, align 1
  br label %1477

; <label>:1476:                                   ; preds = %._crit_edge398
  store i8 0, i8* %1425, align 1
  br label %1477

; <label>:1477:                                   ; preds = %1475, %1476
  %1478 = add nsw i32 %.110, 1
  br label %1403

; <label>:1479:                                   ; preds = %.preheader581, %1479
  %indvars.iv572 = phi i64 [ %indvars.iv.next573, %1479 ], [ 0, %.preheader581 ]
  call void @unroll_loop(i32 106)
  %1480 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 28
  %1481 = getelementptr inbounds [256 x i8], [256 x i8]* %1480, i64 0, i64 %indvars.iv572
  store i8 0, i8* %1481, align 1
  %indvars.iv.next573 = add nuw nsw i64 %indvars.iv572, 1
  %exitcond574 = icmp ne i64 %indvars.iv.next573, 256
  br i1 %exitcond574, label %1479, label %.loopexit582

.loopexit582:                                     ; preds = %1479
  %.013.ph = phi i32 [ %37, %1479 ]
  %.3.ph = phi i32 [ 0, %1479 ]
  br label %1482

; <label>:1482:                                   ; preds = %.loopexit582, %1567
  %.013 = phi i32 [ %.316, %1567 ], [ %.013.ph, %.loopexit582 ]
  %.3 = phi i32 [ %1568, %1567 ], [ %.3.ph, %.loopexit582 ]
  %1483 = icmp slt i32 %.3, 16
  br i1 %1483, label %1484, label %1569

; <label>:1484:                                   ; preds = %1482
  %1485 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 29
  %1486 = sext i32 %.3 to i64
  %1487 = getelementptr inbounds [16 x i8], [16 x i8]* %1485, i64 0, i64 %1486
  %1488 = load i8, i8* %1487, align 1
  %1489 = icmp ne i8 %1488, 0
  br i1 %1489, label %1490, label %1567

; <label>:1490:                                   ; preds = %1484, %1565
  %.114 = phi i32 [ %1566, %1565 ], [ 0, %1484 ]
  %.4 = phi i32 [ %.5, %1565 ], [ %.3, %1484 ]
  %1491 = icmp slt i32 %.114, 16
  br i1 %1491, label %1492, label %1567

; <label>:1492:                                   ; preds = %1490, %33
  %.215 = phi i32 [ %37, %33 ], [ %.114, %1490 ]
  %.5 = phi i32 [ %35, %33 ], [ %.4, %1490 ]
  %1493 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 29, i32* %1493, align 8
  %1494 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1495 = load i32, i32* %1494, align 4
  %1496 = icmp sge i32 %1495, 1
  br i1 %1496, label %._crit_edge401, label %.lr.ph400.preheader

.lr.ph400.preheader:                              ; preds = %1492
  br label %.lr.ph400

._crit_edge401.loopexit:                          ; preds = %1556
  br label %._crit_edge401

._crit_edge401:                                   ; preds = %._crit_edge401.loopexit, %1492
  %1497 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1498 = load i32, i32* %1497, align 8
  %1499 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1500 = load i32, i32* %1499, align 4
  %1501 = sub nsw i32 %1500, 1
  %1502 = lshr i32 %1498, %1501
  %1503 = and i32 %1502, 1
  %1504 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1505 = load i32, i32* %1504, align 4
  %1506 = sub nsw i32 %1505, 1
  store i32 %1506, i32* %1504, align 4
  %1507 = trunc i32 %1503 to i8
  %1508 = zext i8 %1507 to i32
  %1509 = icmp eq i32 %1508, 1
  br i1 %1509, label %1559, label %1565

.lr.ph400:                                        ; preds = %.lr.ph400.preheader, %1556
  call void @unroll_loop(i32 107)
  %1510 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1511 = load %struct.bz_stream*, %struct.bz_stream** %1510, align 8
  %1512 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1511, i32 0, i32 1
  %1513 = load i32, i32* %1512, align 8
  %1514 = icmp eq i32 %1513, 0
  br i1 %1514, label %.loopexit227, label %1515

; <label>:1515:                                   ; preds = %.lr.ph400
  %1516 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1517 = load i32, i32* %1516, align 8
  %1518 = shl i32 %1517, 8
  %1519 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1520 = load %struct.bz_stream*, %struct.bz_stream** %1519, align 8
  %1521 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1520, i32 0, i32 0
  %1522 = load i8*, i8** %1521, align 8
  %1523 = load i8, i8* %1522, align 1
  %1524 = zext i8 %1523 to i32
  %1525 = or i32 %1518, %1524
  %1526 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1525, i32* %1526, align 8
  %1527 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1528 = load i32, i32* %1527, align 4
  %1529 = add nsw i32 %1528, 8
  store i32 %1529, i32* %1527, align 4
  %1530 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1531 = load %struct.bz_stream*, %struct.bz_stream** %1530, align 8
  %1532 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1531, i32 0, i32 0
  %1533 = load i8*, i8** %1532, align 8
  %1534 = getelementptr inbounds i8, i8* %1533, i32 1
  store i8* %1534, i8** %1532, align 8
  %1535 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1536 = load %struct.bz_stream*, %struct.bz_stream** %1535, align 8
  %1537 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1536, i32 0, i32 1
  %1538 = load i32, i32* %1537, align 8
  %1539 = add i32 %1538, -1
  store i32 %1539, i32* %1537, align 8
  %1540 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1541 = load %struct.bz_stream*, %struct.bz_stream** %1540, align 8
  %1542 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1541, i32 0, i32 2
  %1543 = load i32, i32* %1542, align 4
  %1544 = add i32 %1543, 1
  store i32 %1544, i32* %1542, align 4
  %1545 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1546 = load %struct.bz_stream*, %struct.bz_stream** %1545, align 8
  %1547 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1546, i32 0, i32 2
  %1548 = load i32, i32* %1547, align 4
  %1549 = icmp eq i32 %1548, 0
  br i1 %1549, label %1550, label %1556

; <label>:1550:                                   ; preds = %1515
  %1551 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1552 = load %struct.bz_stream*, %struct.bz_stream** %1551, align 8
  %1553 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1552, i32 0, i32 3
  %1554 = load i32, i32* %1553, align 8
  %1555 = add i32 %1554, 1
  store i32 %1555, i32* %1553, align 8
  br label %1556

; <label>:1556:                                   ; preds = %1550, %1515
  %1557 = load i32, i32* %1494, align 4
  %1558 = icmp sge i32 %1557, 1
  br i1 %1558, label %._crit_edge401.loopexit, label %.lr.ph400

; <label>:1559:                                   ; preds = %._crit_edge401
  %1560 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 28
  %1561 = mul nsw i32 %.5, 16
  %1562 = add nsw i32 %1561, %.215
  %1563 = sext i32 %1562 to i64
  %1564 = getelementptr inbounds [256 x i8], [256 x i8]* %1560, i64 0, i64 %1563
  store i8 1, i8* %1564, align 1
  br label %1565

; <label>:1565:                                   ; preds = %._crit_edge401, %1559
  %1566 = add nsw i32 %.215, 1
  br label %1490

; <label>:1567:                                   ; preds = %1484, %1490
  %.316 = phi i32 [ %.013, %1484 ], [ %.114, %1490 ]
  %.6 = phi i32 [ %.3, %1484 ], [ %.4, %1490 ]
  %1568 = add nsw i32 %.6, 1
  br label %1482

; <label>:1569:                                   ; preds = %1482
  call void @makeMaps_d(%struct.DState* %0)
  %1570 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 27
  %1571 = load i32, i32* %1570, align 8
  %1572 = icmp eq i32 %1571, 0
  br i1 %1572, label %4045, label %1573

; <label>:1573:                                   ; preds = %1569
  %1574 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 27
  %1575 = load i32, i32* %1574, align 8
  %1576 = add nsw i32 %1575, 2
  br label %1577

; <label>:1577:                                   ; preds = %33, %1573
  %.061 = phi i32 [ %41, %33 ], [ %1576, %1573 ]
  %.417 = phi i32 [ %37, %33 ], [ %.013, %1573 ]
  %.7 = phi i32 [ %35, %33 ], [ %.3, %1573 ]
  %1578 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 30, i32* %1578, align 8
  %1579 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1580 = load i32, i32* %1579, align 4
  %1581 = icmp sge i32 %1580, 3
  br i1 %1581, label %._crit_edge570, label %.lr.ph569.preheader

.lr.ph569.preheader:                              ; preds = %1577
  br label %.lr.ph569

._crit_edge570.loopexit:                          ; preds = %1640
  br label %._crit_edge570

._crit_edge570:                                   ; preds = %._crit_edge570.loopexit, %1577
  %1582 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1583 = load i32, i32* %1582, align 8
  %1584 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1585 = load i32, i32* %1584, align 4
  %1586 = sub nsw i32 %1585, 3
  %1587 = lshr i32 %1583, %1586
  %1588 = and i32 %1587, 7
  %1589 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1590 = load i32, i32* %1589, align 4
  %1591 = sub nsw i32 %1590, 3
  store i32 %1591, i32* %1589, align 4
  %1592 = icmp slt i32 %1588, 2
  %1593 = icmp sgt i32 %1588, 6
  %or.cond = or i1 %1592, %1593
  br i1 %or.cond, label %4045, label %1643

.lr.ph569:                                        ; preds = %.lr.ph569.preheader, %1640
  call void @unroll_loop(i32 108)
  %1594 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1595 = load %struct.bz_stream*, %struct.bz_stream** %1594, align 8
  %1596 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1595, i32 0, i32 1
  %1597 = load i32, i32* %1596, align 8
  %1598 = icmp eq i32 %1597, 0
  br i1 %1598, label %.loopexit556, label %1599

; <label>:1599:                                   ; preds = %.lr.ph569
  %1600 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1601 = load i32, i32* %1600, align 8
  %1602 = shl i32 %1601, 8
  %1603 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1604 = load %struct.bz_stream*, %struct.bz_stream** %1603, align 8
  %1605 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1604, i32 0, i32 0
  %1606 = load i8*, i8** %1605, align 8
  %1607 = load i8, i8* %1606, align 1
  %1608 = zext i8 %1607 to i32
  %1609 = or i32 %1602, %1608
  %1610 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1609, i32* %1610, align 8
  %1611 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1612 = load i32, i32* %1611, align 4
  %1613 = add nsw i32 %1612, 8
  store i32 %1613, i32* %1611, align 4
  %1614 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1615 = load %struct.bz_stream*, %struct.bz_stream** %1614, align 8
  %1616 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1615, i32 0, i32 0
  %1617 = load i8*, i8** %1616, align 8
  %1618 = getelementptr inbounds i8, i8* %1617, i32 1
  store i8* %1618, i8** %1616, align 8
  %1619 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1620 = load %struct.bz_stream*, %struct.bz_stream** %1619, align 8
  %1621 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1620, i32 0, i32 1
  %1622 = load i32, i32* %1621, align 8
  %1623 = add i32 %1622, -1
  store i32 %1623, i32* %1621, align 8
  %1624 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1625 = load %struct.bz_stream*, %struct.bz_stream** %1624, align 8
  %1626 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1625, i32 0, i32 2
  %1627 = load i32, i32* %1626, align 4
  %1628 = add i32 %1627, 1
  store i32 %1628, i32* %1626, align 4
  %1629 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1630 = load %struct.bz_stream*, %struct.bz_stream** %1629, align 8
  %1631 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1630, i32 0, i32 2
  %1632 = load i32, i32* %1631, align 4
  %1633 = icmp eq i32 %1632, 0
  br i1 %1633, label %1634, label %1640

; <label>:1634:                                   ; preds = %1599
  %1635 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1636 = load %struct.bz_stream*, %struct.bz_stream** %1635, align 8
  %1637 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1636, i32 0, i32 3
  %1638 = load i32, i32* %1637, align 8
  %1639 = add i32 %1638, 1
  store i32 %1639, i32* %1637, align 8
  br label %1640

; <label>:1640:                                   ; preds = %1634, %1599
  %1641 = load i32, i32* %1579, align 4
  %1642 = icmp sge i32 %1641, 3
  br i1 %1642, label %._crit_edge570.loopexit, label %.lr.ph569

; <label>:1643:                                   ; preds = %._crit_edge570, %33
  %.084 = phi i32 [ %43, %33 ], [ %1588, %._crit_edge570 ]
  %.162 = phi i32 [ %41, %33 ], [ %.061, %._crit_edge570 ]
  %.518 = phi i32 [ %37, %33 ], [ %.417, %._crit_edge570 ]
  %.8 = phi i32 [ %35, %33 ], [ %.7, %._crit_edge570 ]
  %1644 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 31, i32* %1644, align 8
  %1645 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1646 = load i32, i32* %1645, align 4
  %1647 = icmp sge i32 %1646, 15
  br i1 %1647, label %._crit_edge567, label %.lr.ph566.preheader

.lr.ph566.preheader:                              ; preds = %1643
  br label %.lr.ph566

._crit_edge567.loopexit:                          ; preds = %1705
  br label %._crit_edge567

._crit_edge567:                                   ; preds = %._crit_edge567.loopexit, %1643
  %1648 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1649 = load i32, i32* %1648, align 8
  %1650 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1651 = load i32, i32* %1650, align 4
  %1652 = sub nsw i32 %1651, 15
  %1653 = lshr i32 %1649, %1652
  %1654 = and i32 %1653, 32767
  %1655 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1656 = load i32, i32* %1655, align 4
  %1657 = sub nsw i32 %1656, 15
  store i32 %1657, i32* %1655, align 4
  %1658 = icmp slt i32 %1654, 1
  br i1 %1658, label %4045, label %1708

.lr.ph566:                                        ; preds = %.lr.ph566.preheader, %1705
  call void @unroll_loop(i32 109)
  %1659 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1660 = load %struct.bz_stream*, %struct.bz_stream** %1659, align 8
  %1661 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1660, i32 0, i32 1
  %1662 = load i32, i32* %1661, align 8
  %1663 = icmp eq i32 %1662, 0
  br i1 %1663, label %.loopexit531, label %1664

; <label>:1664:                                   ; preds = %.lr.ph566
  %1665 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1666 = load i32, i32* %1665, align 8
  %1667 = shl i32 %1666, 8
  %1668 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1669 = load %struct.bz_stream*, %struct.bz_stream** %1668, align 8
  %1670 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1669, i32 0, i32 0
  %1671 = load i8*, i8** %1670, align 8
  %1672 = load i8, i8* %1671, align 1
  %1673 = zext i8 %1672 to i32
  %1674 = or i32 %1667, %1673
  %1675 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1674, i32* %1675, align 8
  %1676 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1677 = load i32, i32* %1676, align 4
  %1678 = add nsw i32 %1677, 8
  store i32 %1678, i32* %1676, align 4
  %1679 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1680 = load %struct.bz_stream*, %struct.bz_stream** %1679, align 8
  %1681 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1680, i32 0, i32 0
  %1682 = load i8*, i8** %1681, align 8
  %1683 = getelementptr inbounds i8, i8* %1682, i32 1
  store i8* %1683, i8** %1681, align 8
  %1684 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1685 = load %struct.bz_stream*, %struct.bz_stream** %1684, align 8
  %1686 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1685, i32 0, i32 1
  %1687 = load i32, i32* %1686, align 8
  %1688 = add i32 %1687, -1
  store i32 %1688, i32* %1686, align 8
  %1689 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1690 = load %struct.bz_stream*, %struct.bz_stream** %1689, align 8
  %1691 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1690, i32 0, i32 2
  %1692 = load i32, i32* %1691, align 4
  %1693 = add i32 %1692, 1
  store i32 %1693, i32* %1691, align 4
  %1694 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1695 = load %struct.bz_stream*, %struct.bz_stream** %1694, align 8
  %1696 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1695, i32 0, i32 2
  %1697 = load i32, i32* %1696, align 4
  %1698 = icmp eq i32 %1697, 0
  br i1 %1698, label %1699, label %1705

; <label>:1699:                                   ; preds = %1664
  %1700 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1701 = load %struct.bz_stream*, %struct.bz_stream** %1700, align 8
  %1702 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1701, i32 0, i32 3
  %1703 = load i32, i32* %1702, align 8
  %1704 = add i32 %1703, 1
  store i32 %1704, i32* %1702, align 8
  br label %1705

; <label>:1705:                                   ; preds = %1699, %1664
  %1706 = load i32, i32* %1645, align 4
  %1707 = icmp sge i32 %1706, 15
  br i1 %1707, label %._crit_edge567.loopexit, label %.lr.ph566

; <label>:1708:                                   ; preds = %._crit_edge567, %1781
  %.0106 = phi i32 [ %.2108, %1781 ], [ %1654, %._crit_edge567 ]
  %.185 = phi i32 [ %.387, %1781 ], [ %.084, %._crit_edge567 ]
  %.263 = phi i32 [ %.465, %1781 ], [ %.162, %._crit_edge567 ]
  %.619 = phi i32 [ %.821, %1781 ], [ %.518, %._crit_edge567 ]
  %.9 = phi i32 [ %1786, %1781 ], [ 0, %._crit_edge567 ]
  %1709 = icmp slt i32 %.9, %.0106
  br i1 %1709, label %1710, label %1787

; <label>:1710:                                   ; preds = %1778, %1708
  %.1107 = phi i32 [ %.0106, %1708 ], [ %.2108, %1778 ]
  %.286 = phi i32 [ %.185, %1708 ], [ %.387, %1778 ]
  %.364 = phi i32 [ %.263, %1708 ], [ %.465, %1778 ]
  %.720 = phi i32 [ 0, %1708 ], [ %1779, %1778 ]
  %.10 = phi i32 [ %.9, %1708 ], [ %.11, %1778 ]
  br label %1711

; <label>:1711:                                   ; preds = %33, %1710
  %.2108 = phi i32 [ %45, %33 ], [ %.1107, %1710 ]
  %.387 = phi i32 [ %43, %33 ], [ %.286, %1710 ]
  %.465 = phi i32 [ %41, %33 ], [ %.364, %1710 ]
  %.821 = phi i32 [ %37, %33 ], [ %.720, %1710 ]
  %.11 = phi i32 [ %35, %33 ], [ %.10, %1710 ]
  %1712 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 32, i32* %1712, align 8
  %1713 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1714 = load i32, i32* %1713, align 4
  %1715 = icmp sge i32 %1714, 1
  br i1 %1715, label %._crit_edge404, label %.lr.ph403.preheader

.lr.ph403.preheader:                              ; preds = %1711
  br label %.lr.ph403

._crit_edge404.loopexit:                          ; preds = %1775
  br label %._crit_edge404

._crit_edge404:                                   ; preds = %._crit_edge404.loopexit, %1711
  %1716 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1717 = load i32, i32* %1716, align 8
  %1718 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1719 = load i32, i32* %1718, align 4
  %1720 = sub nsw i32 %1719, 1
  %1721 = lshr i32 %1717, %1720
  %1722 = and i32 %1721, 1
  %1723 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1724 = load i32, i32* %1723, align 4
  %1725 = sub nsw i32 %1724, 1
  store i32 %1725, i32* %1723, align 4
  %1726 = trunc i32 %1722 to i8
  %1727 = zext i8 %1726 to i32
  %1728 = icmp eq i32 %1727, 0
  br i1 %1728, label %1781, label %1778

.lr.ph403:                                        ; preds = %.lr.ph403.preheader, %1775
  call void @unroll_loop(i32 110)
  %1729 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1730 = load %struct.bz_stream*, %struct.bz_stream** %1729, align 8
  %1731 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1730, i32 0, i32 1
  %1732 = load i32, i32* %1731, align 8
  %1733 = icmp eq i32 %1732, 0
  br i1 %1733, label %.loopexit252, label %1734

; <label>:1734:                                   ; preds = %.lr.ph403
  %1735 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1736 = load i32, i32* %1735, align 8
  %1737 = shl i32 %1736, 8
  %1738 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1739 = load %struct.bz_stream*, %struct.bz_stream** %1738, align 8
  %1740 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1739, i32 0, i32 0
  %1741 = load i8*, i8** %1740, align 8
  %1742 = load i8, i8* %1741, align 1
  %1743 = zext i8 %1742 to i32
  %1744 = or i32 %1737, %1743
  %1745 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1744, i32* %1745, align 8
  %1746 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1747 = load i32, i32* %1746, align 4
  %1748 = add nsw i32 %1747, 8
  store i32 %1748, i32* %1746, align 4
  %1749 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1750 = load %struct.bz_stream*, %struct.bz_stream** %1749, align 8
  %1751 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1750, i32 0, i32 0
  %1752 = load i8*, i8** %1751, align 8
  %1753 = getelementptr inbounds i8, i8* %1752, i32 1
  store i8* %1753, i8** %1751, align 8
  %1754 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1755 = load %struct.bz_stream*, %struct.bz_stream** %1754, align 8
  %1756 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1755, i32 0, i32 1
  %1757 = load i32, i32* %1756, align 8
  %1758 = add i32 %1757, -1
  store i32 %1758, i32* %1756, align 8
  %1759 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1760 = load %struct.bz_stream*, %struct.bz_stream** %1759, align 8
  %1761 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1760, i32 0, i32 2
  %1762 = load i32, i32* %1761, align 4
  %1763 = add i32 %1762, 1
  store i32 %1763, i32* %1761, align 4
  %1764 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1765 = load %struct.bz_stream*, %struct.bz_stream** %1764, align 8
  %1766 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1765, i32 0, i32 2
  %1767 = load i32, i32* %1766, align 4
  %1768 = icmp eq i32 %1767, 0
  br i1 %1768, label %1769, label %1775

; <label>:1769:                                   ; preds = %1734
  %1770 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1771 = load %struct.bz_stream*, %struct.bz_stream** %1770, align 8
  %1772 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1771, i32 0, i32 3
  %1773 = load i32, i32* %1772, align 8
  %1774 = add i32 %1773, 1
  store i32 %1774, i32* %1772, align 8
  br label %1775

; <label>:1775:                                   ; preds = %1769, %1734
  %1776 = load i32, i32* %1713, align 4
  %1777 = icmp sge i32 %1776, 1
  br i1 %1777, label %._crit_edge404.loopexit, label %.lr.ph403

; <label>:1778:                                   ; preds = %._crit_edge404
  %1779 = add nsw i32 %.821, 1
  %1780 = icmp sge i32 %1779, %.387
  br i1 %1780, label %4045, label %1710

; <label>:1781:                                   ; preds = %._crit_edge404
  %1782 = trunc i32 %.821 to i8
  %1783 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 34
  %1784 = sext i32 %.11 to i64
  %1785 = getelementptr inbounds [18002 x i8], [18002 x i8]* %1783, i64 0, i64 %1784
  store i8 %1782, i8* %1785, align 1
  %1786 = add nsw i32 %.11, 1
  br label %1708

; <label>:1787:                                   ; preds = %1708
  %1788 = icmp slt i32 0, %.185
  br i1 %1788, label %.lr.ph563.preheader, label %._crit_edge564

.lr.ph563.preheader:                              ; preds = %1787
  br label %.lr.ph563

.lr.ph563:                                        ; preds = %.lr.ph563.preheader, %.lr.ph563
  %.0365561 = phi i8 [ %1791, %.lr.ph563 ], [ 0, %.lr.ph563.preheader ]
  call void @unroll_loop(i32 111)
  %1789 = zext i8 %.0365561 to i64
  %1790 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 %1789
  store i8 %.0365561, i8* %1790, align 1
  %1791 = add i8 %.0365561, 1
  %1792 = zext i8 %1791 to i32
  %1793 = icmp slt i32 %1792, %.185
  br i1 %1793, label %.lr.ph563, label %._crit_edge564.loopexit

._crit_edge564.loopexit:                          ; preds = %.lr.ph563
  br label %._crit_edge564

._crit_edge564:                                   ; preds = %._crit_edge564.loopexit, %1787
  %1794 = icmp slt i32 0, %.0106
  br i1 %1794, label %.lr.ph554, label %1822

.lr.ph554:                                        ; preds = %._crit_edge564
  %1795 = add i32 %.0106, -1
  %1796 = zext i32 %.0106 to i64
  br label %1797

; <label>:1797:                                   ; preds = %.lr.ph554, %._crit_edge551
  %indvars.iv557 = phi i64 [ 0, %.lr.ph554 ], [ %indvars.iv.next558, %._crit_edge551 ]
  call void @unroll_loop(i32 112)
  %1798 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 34
  %1799 = getelementptr inbounds [18002 x i8], [18002 x i8]* %1798, i64 0, i64 %indvars.iv557
  %1800 = load i8, i8* %1799, align 1
  %1801 = zext i8 %1800 to i64
  %1802 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 %1801
  %1803 = load i8, i8* %1802, align 1
  %1804 = zext i8 %1800 to i32
  %1805 = icmp sgt i32 %1804, 0
  br i1 %1805, label %.lr.ph550.preheader, label %._crit_edge551

.lr.ph550.preheader:                              ; preds = %1797
  br label %.lr.ph550

.lr.ph550:                                        ; preds = %.lr.ph550.preheader, %.lr.ph550
  %.1366548 = phi i8 [ %1813, %.lr.ph550 ], [ %1800, %.lr.ph550.preheader ]
  call void @unroll_loop(i32 113)
  %1806 = zext i8 %.1366548 to i32
  %1807 = sub nsw i32 %1806, 1
  %1808 = sext i32 %1807 to i64
  %1809 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 %1808
  %1810 = load i8, i8* %1809, align 1
  %1811 = zext i8 %.1366548 to i64
  %1812 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 %1811
  store i8 %1810, i8* %1812, align 1
  %1813 = add i8 %.1366548, -1
  %1814 = zext i8 %1813 to i32
  %1815 = icmp sgt i32 %1814, 0
  br i1 %1815, label %.lr.ph550, label %._crit_edge551.loopexit

._crit_edge551.loopexit:                          ; preds = %.lr.ph550
  br label %._crit_edge551

._crit_edge551:                                   ; preds = %._crit_edge551.loopexit, %1797
  %1816 = getelementptr inbounds [6 x i8], [6 x i8]* %2, i64 0, i64 0
  store i8 %1803, i8* %1816, align 1
  %1817 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 33
  %1818 = getelementptr inbounds [18002 x i8], [18002 x i8]* %1817, i64 0, i64 %indvars.iv557
  store i8 %1803, i8* %1818, align 1
  %indvars.iv.next558 = add nuw nsw i64 %indvars.iv557, 1
  %exitcond1036 = icmp ne i64 %indvars.iv.next558, %1796
  br i1 %exitcond1036, label %1797, label %._crit_edge555

._crit_edge555:                                   ; preds = %._crit_edge551
  %1819 = zext i32 %1795 to i64
  %1820 = add i64 %1819, 1
  %1821 = trunc i64 %1820 to i32
  br label %1822

; <label>:1822:                                   ; preds = %._crit_edge555, %._crit_edge564
  %.12.lcssa = phi i32 [ %1821, %._crit_edge555 ], [ 0, %._crit_edge564 ]
  br label %1823

; <label>:1823:                                   ; preds = %2038, %1822
  %.0228 = phi i32 [ %.2230, %2038 ], [ %63, %1822 ]
  %.3109 = phi i32 [ %.5111, %2038 ], [ %.0106, %1822 ]
  %.488 = phi i32 [ %.690, %2038 ], [ %.185, %1822 ]
  %.566 = phi i32 [ %.768, %2038 ], [ %.263, %1822 ]
  %.042 = phi i32 [ %2039, %2038 ], [ 0, %1822 ]
  %.922 = phi i32 [ %.1124, %2038 ], [ %.619, %1822 ]
  %.13 = phi i32 [ %.1511, %2038 ], [ %.12.lcssa, %1822 ]
  %1824 = icmp slt i32 %.042, %.488
  br i1 %1824, label %1825, label %2040

; <label>:1825:                                   ; preds = %1823, %33
  %.1229 = phi i32 [ %63, %33 ], [ %.0228, %1823 ]
  %.4110 = phi i32 [ %45, %33 ], [ %.3109, %1823 ]
  %.589 = phi i32 [ %43, %33 ], [ %.488, %1823 ]
  %.667 = phi i32 [ %41, %33 ], [ %.566, %1823 ]
  %.143 = phi i32 [ %39, %33 ], [ %.042, %1823 ]
  %.1023 = phi i32 [ %37, %33 ], [ %.922, %1823 ]
  %.14 = phi i32 [ %35, %33 ], [ %.13, %1823 ]
  %1826 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 33, i32* %1826, align 8
  %1827 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1828 = load i32, i32* %1827, align 4
  %1829 = icmp sge i32 %1828, 5
  br i1 %1829, label %._crit_edge413, label %.lr.ph412.preheader

.lr.ph412.preheader:                              ; preds = %1825
  br label %.lr.ph412

._crit_edge413.loopexit:                          ; preds = %1886
  br label %._crit_edge413

._crit_edge413:                                   ; preds = %._crit_edge413.loopexit, %1825
  %1830 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1831 = load i32, i32* %1830, align 8
  %1832 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1833 = load i32, i32* %1832, align 4
  %1834 = sub nsw i32 %1833, 5
  %1835 = lshr i32 %1831, %1834
  %1836 = and i32 %1835, 31
  %1837 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1838 = load i32, i32* %1837, align 4
  %1839 = sub nsw i32 %1838, 5
  store i32 %1839, i32* %1837, align 4
  br label %1889

.lr.ph412:                                        ; preds = %.lr.ph412.preheader, %1886
  call void @unroll_loop(i32 114)
  %1840 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1841 = load %struct.bz_stream*, %struct.bz_stream** %1840, align 8
  %1842 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1841, i32 0, i32 1
  %1843 = load i32, i32* %1842, align 8
  %1844 = icmp eq i32 %1843, 0
  br i1 %1844, label %.loopexit327, label %1845

; <label>:1845:                                   ; preds = %.lr.ph412
  %1846 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1847 = load i32, i32* %1846, align 8
  %1848 = shl i32 %1847, 8
  %1849 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1850 = load %struct.bz_stream*, %struct.bz_stream** %1849, align 8
  %1851 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1850, i32 0, i32 0
  %1852 = load i8*, i8** %1851, align 8
  %1853 = load i8, i8* %1852, align 1
  %1854 = zext i8 %1853 to i32
  %1855 = or i32 %1848, %1854
  %1856 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1855, i32* %1856, align 8
  %1857 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1858 = load i32, i32* %1857, align 4
  %1859 = add nsw i32 %1858, 8
  store i32 %1859, i32* %1857, align 4
  %1860 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1861 = load %struct.bz_stream*, %struct.bz_stream** %1860, align 8
  %1862 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1861, i32 0, i32 0
  %1863 = load i8*, i8** %1862, align 8
  %1864 = getelementptr inbounds i8, i8* %1863, i32 1
  store i8* %1864, i8** %1862, align 8
  %1865 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1866 = load %struct.bz_stream*, %struct.bz_stream** %1865, align 8
  %1867 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1866, i32 0, i32 1
  %1868 = load i32, i32* %1867, align 8
  %1869 = add i32 %1868, -1
  store i32 %1869, i32* %1867, align 8
  %1870 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1871 = load %struct.bz_stream*, %struct.bz_stream** %1870, align 8
  %1872 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1871, i32 0, i32 2
  %1873 = load i32, i32* %1872, align 4
  %1874 = add i32 %1873, 1
  store i32 %1874, i32* %1872, align 4
  %1875 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1876 = load %struct.bz_stream*, %struct.bz_stream** %1875, align 8
  %1877 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1876, i32 0, i32 2
  %1878 = load i32, i32* %1877, align 4
  %1879 = icmp eq i32 %1878, 0
  br i1 %1879, label %1880, label %1886

; <label>:1880:                                   ; preds = %1845
  %1881 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1882 = load %struct.bz_stream*, %struct.bz_stream** %1881, align 8
  %1883 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1882, i32 0, i32 3
  %1884 = load i32, i32* %1883, align 8
  %1885 = add i32 %1884, 1
  store i32 %1885, i32* %1883, align 8
  br label %1886

; <label>:1886:                                   ; preds = %1880, %1845
  %1887 = load i32, i32* %1827, align 4
  %1888 = icmp sge i32 %1887, 5
  br i1 %1888, label %._crit_edge413.loopexit, label %.lr.ph412

; <label>:1889:                                   ; preds = %2030, %._crit_edge413
  %.2230 = phi i32 [ %.4232, %2030 ], [ %1836, %._crit_edge413 ]
  %.5111 = phi i32 [ %.7113, %2030 ], [ %.4110, %._crit_edge413 ]
  %.690 = phi i32 [ %.892, %2030 ], [ %.589, %._crit_edge413 ]
  %.768 = phi i32 [ %.970, %2030 ], [ %.667, %._crit_edge413 ]
  %.244 = phi i32 [ %.446, %2030 ], [ %.143, %._crit_edge413 ]
  %.1124 = phi i32 [ %.1326, %2030 ], [ %.1023, %._crit_edge413 ]
  %.1511 = phi i32 [ %2037, %2030 ], [ 0, %._crit_edge413 ]
  %1890 = icmp slt i32 %.1511, %.768
  br i1 %1890, label %1891, label %2038

; <label>:1891:                                   ; preds = %1889, %._crit_edge407
  %.3231 = phi i32 [ %.6234, %._crit_edge407 ], [ %.2230, %1889 ]
  %.6112 = phi i32 [ %.8114, %._crit_edge407 ], [ %.5111, %1889 ]
  %.791 = phi i32 [ %.993, %._crit_edge407 ], [ %.690, %1889 ]
  %.869 = phi i32 [ %.1071, %._crit_edge407 ], [ %.768, %1889 ]
  %.345 = phi i32 [ %.547, %._crit_edge407 ], [ %.244, %1889 ]
  %.1225 = phi i32 [ %.1427, %._crit_edge407 ], [ %.1124, %1889 ]
  %.16 = phi i32 [ %.18, %._crit_edge407 ], [ %.1511, %1889 ]
  %1892 = icmp slt i32 %.3231, 1
  %1893 = icmp sgt i32 %.3231, 20
  %or.cond1 = or i1 %1892, %1893
  br i1 %or.cond1, label %4045, label %1894

; <label>:1894:                                   ; preds = %1891, %33
  %.4232 = phi i32 [ %63, %33 ], [ %.3231, %1891 ]
  %.7113 = phi i32 [ %45, %33 ], [ %.6112, %1891 ]
  %.892 = phi i32 [ %43, %33 ], [ %.791, %1891 ]
  %.970 = phi i32 [ %41, %33 ], [ %.869, %1891 ]
  %.446 = phi i32 [ %39, %33 ], [ %.345, %1891 ]
  %.1326 = phi i32 [ %37, %33 ], [ %.1225, %1891 ]
  %.1712 = phi i32 [ %35, %33 ], [ %.16, %1891 ]
  %1895 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 34, i32* %1895, align 8
  %1896 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1897 = load i32, i32* %1896, align 4
  %1898 = icmp sge i32 %1897, 1
  br i1 %1898, label %._crit_edge410, label %.lr.ph409.preheader

.lr.ph409.preheader:                              ; preds = %1894
  br label %.lr.ph409

._crit_edge410.loopexit:                          ; preds = %1958
  br label %._crit_edge410

._crit_edge410:                                   ; preds = %._crit_edge410.loopexit, %1894
  %1899 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1900 = load i32, i32* %1899, align 8
  %1901 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1902 = load i32, i32* %1901, align 4
  %1903 = sub nsw i32 %1902, 1
  %1904 = lshr i32 %1900, %1903
  %1905 = and i32 %1904, 1
  %1906 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1907 = load i32, i32* %1906, align 4
  %1908 = sub nsw i32 %1907, 1
  store i32 %1908, i32* %1906, align 4
  %1909 = trunc i32 %1905 to i8
  %1910 = zext i8 %1909 to i32
  %1911 = icmp eq i32 %1910, 0
  br i1 %1911, label %2030, label %1961

.lr.ph409:                                        ; preds = %.lr.ph409.preheader, %1958
  call void @unroll_loop(i32 115)
  %1912 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1913 = load %struct.bz_stream*, %struct.bz_stream** %1912, align 8
  %1914 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1913, i32 0, i32 1
  %1915 = load i32, i32* %1914, align 8
  %1916 = icmp eq i32 %1915, 0
  br i1 %1916, label %.loopexit302, label %1917

; <label>:1917:                                   ; preds = %.lr.ph409
  %1918 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1919 = load i32, i32* %1918, align 8
  %1920 = shl i32 %1919, 8
  %1921 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1922 = load %struct.bz_stream*, %struct.bz_stream** %1921, align 8
  %1923 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1922, i32 0, i32 0
  %1924 = load i8*, i8** %1923, align 8
  %1925 = load i8, i8* %1924, align 1
  %1926 = zext i8 %1925 to i32
  %1927 = or i32 %1920, %1926
  %1928 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1927, i32* %1928, align 8
  %1929 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1930 = load i32, i32* %1929, align 4
  %1931 = add nsw i32 %1930, 8
  store i32 %1931, i32* %1929, align 4
  %1932 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1933 = load %struct.bz_stream*, %struct.bz_stream** %1932, align 8
  %1934 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1933, i32 0, i32 0
  %1935 = load i8*, i8** %1934, align 8
  %1936 = getelementptr inbounds i8, i8* %1935, i32 1
  store i8* %1936, i8** %1934, align 8
  %1937 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1938 = load %struct.bz_stream*, %struct.bz_stream** %1937, align 8
  %1939 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1938, i32 0, i32 1
  %1940 = load i32, i32* %1939, align 8
  %1941 = add i32 %1940, -1
  store i32 %1941, i32* %1939, align 8
  %1942 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1943 = load %struct.bz_stream*, %struct.bz_stream** %1942, align 8
  %1944 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1943, i32 0, i32 2
  %1945 = load i32, i32* %1944, align 4
  %1946 = add i32 %1945, 1
  store i32 %1946, i32* %1944, align 4
  %1947 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1948 = load %struct.bz_stream*, %struct.bz_stream** %1947, align 8
  %1949 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1948, i32 0, i32 2
  %1950 = load i32, i32* %1949, align 4
  %1951 = icmp eq i32 %1950, 0
  br i1 %1951, label %1952, label %1958

; <label>:1952:                                   ; preds = %1917
  %1953 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1954 = load %struct.bz_stream*, %struct.bz_stream** %1953, align 8
  %1955 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1954, i32 0, i32 3
  %1956 = load i32, i32* %1955, align 8
  %1957 = add i32 %1956, 1
  store i32 %1957, i32* %1955, align 8
  br label %1958

; <label>:1958:                                   ; preds = %1952, %1917
  %1959 = load i32, i32* %1896, align 4
  %1960 = icmp sge i32 %1959, 1
  br i1 %1960, label %._crit_edge410.loopexit, label %.lr.ph409

; <label>:1961:                                   ; preds = %._crit_edge410, %33
  %.5233 = phi i32 [ %63, %33 ], [ %.4232, %._crit_edge410 ]
  %.8114 = phi i32 [ %45, %33 ], [ %.7113, %._crit_edge410 ]
  %.993 = phi i32 [ %43, %33 ], [ %.892, %._crit_edge410 ]
  %.1071 = phi i32 [ %41, %33 ], [ %.970, %._crit_edge410 ]
  %.547 = phi i32 [ %39, %33 ], [ %.446, %._crit_edge410 ]
  %.1427 = phi i32 [ %37, %33 ], [ %.1326, %._crit_edge410 ]
  %.18 = phi i32 [ %35, %33 ], [ %.1712, %._crit_edge410 ]
  %1962 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 35, i32* %1962, align 8
  %1963 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1964 = load i32, i32* %1963, align 4
  %1965 = icmp sge i32 %1964, 1
  br i1 %1965, label %._crit_edge407, label %.lr.ph406.preheader

.lr.ph406.preheader:                              ; preds = %1961
  br label %.lr.ph406

._crit_edge407.loopexit:                          ; preds = %2027
  br label %._crit_edge407

._crit_edge407:                                   ; preds = %._crit_edge407.loopexit, %1961
  %1966 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1967 = load i32, i32* %1966, align 8
  %1968 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1969 = load i32, i32* %1968, align 4
  %1970 = sub nsw i32 %1969, 1
  %1971 = lshr i32 %1967, %1970
  %1972 = and i32 %1971, 1
  %1973 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1974 = load i32, i32* %1973, align 4
  %1975 = sub nsw i32 %1974, 1
  store i32 %1975, i32* %1973, align 4
  %1976 = trunc i32 %1972 to i8
  %1977 = zext i8 %1976 to i32
  %1978 = icmp eq i32 %1977, 0
  %1979 = add nsw i32 %.5233, 1
  %1980 = add nsw i32 %.5233, -1
  %.6234 = select i1 %1978, i32 %1979, i32 %1980
  br label %1891

.lr.ph406:                                        ; preds = %.lr.ph406.preheader, %2027
  call void @unroll_loop(i32 116)
  %1981 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1982 = load %struct.bz_stream*, %struct.bz_stream** %1981, align 8
  %1983 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1982, i32 0, i32 1
  %1984 = load i32, i32* %1983, align 8
  %1985 = icmp eq i32 %1984, 0
  br i1 %1985, label %.loopexit277, label %1986

; <label>:1986:                                   ; preds = %.lr.ph406
  %1987 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %1988 = load i32, i32* %1987, align 8
  %1989 = shl i32 %1988, 8
  %1990 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %1991 = load %struct.bz_stream*, %struct.bz_stream** %1990, align 8
  %1992 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %1991, i32 0, i32 0
  %1993 = load i8*, i8** %1992, align 8
  %1994 = load i8, i8* %1993, align 1
  %1995 = zext i8 %1994 to i32
  %1996 = or i32 %1989, %1995
  %1997 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %1996, i32* %1997, align 8
  %1998 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %1999 = load i32, i32* %1998, align 4
  %2000 = add nsw i32 %1999, 8
  store i32 %2000, i32* %1998, align 4
  %2001 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2002 = load %struct.bz_stream*, %struct.bz_stream** %2001, align 8
  %2003 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2002, i32 0, i32 0
  %2004 = load i8*, i8** %2003, align 8
  %2005 = getelementptr inbounds i8, i8* %2004, i32 1
  store i8* %2005, i8** %2003, align 8
  %2006 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2007 = load %struct.bz_stream*, %struct.bz_stream** %2006, align 8
  %2008 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2007, i32 0, i32 1
  %2009 = load i32, i32* %2008, align 8
  %2010 = add i32 %2009, -1
  store i32 %2010, i32* %2008, align 8
  %2011 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2012 = load %struct.bz_stream*, %struct.bz_stream** %2011, align 8
  %2013 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2012, i32 0, i32 2
  %2014 = load i32, i32* %2013, align 4
  %2015 = add i32 %2014, 1
  store i32 %2015, i32* %2013, align 4
  %2016 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2017 = load %struct.bz_stream*, %struct.bz_stream** %2016, align 8
  %2018 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2017, i32 0, i32 2
  %2019 = load i32, i32* %2018, align 4
  %2020 = icmp eq i32 %2019, 0
  br i1 %2020, label %2021, label %2027

; <label>:2021:                                   ; preds = %1986
  %2022 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2023 = load %struct.bz_stream*, %struct.bz_stream** %2022, align 8
  %2024 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2023, i32 0, i32 3
  %2025 = load i32, i32* %2024, align 8
  %2026 = add i32 %2025, 1
  store i32 %2026, i32* %2024, align 8
  br label %2027

; <label>:2027:                                   ; preds = %2021, %1986
  %2028 = load i32, i32* %1963, align 4
  %2029 = icmp sge i32 %2028, 1
  br i1 %2029, label %._crit_edge407.loopexit, label %.lr.ph406

; <label>:2030:                                   ; preds = %._crit_edge410
  %2031 = trunc i32 %.4232 to i8
  %2032 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 35
  %2033 = sext i32 %.446 to i64
  %2034 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2032, i64 0, i64 %2033
  %2035 = sext i32 %.1712 to i64
  %2036 = getelementptr inbounds [258 x i8], [258 x i8]* %2034, i64 0, i64 %2035
  store i8 %2031, i8* %2036, align 1
  %2037 = add nsw i32 %.1712, 1
  br label %1889

; <label>:2038:                                   ; preds = %1889
  %2039 = add nsw i32 %.244, 1
  br label %1823

; <label>:2040:                                   ; preds = %1823
  %2041 = icmp slt i32 0, %.488
  br i1 %2041, label %.lr.ph541, label %2090

.lr.ph541:                                        ; preds = %2040
  %2042 = add i32 %.488, -1
  %2043 = zext i32 %.566 to i64
  %2044 = zext i32 %.488 to i64
  br label %2045

; <label>:2045:                                   ; preds = %.lr.ph541, %._crit_edge532
  %indvars.iv544 = phi i64 [ 0, %.lr.ph541 ], [ %indvars.iv.next545, %._crit_edge532 ]
  call void @unroll_loop(i32 117)
  %2046 = icmp slt i32 0, %.566
  br i1 %2046, label %.lr.ph531.preheader, label %._crit_edge532

.lr.ph531.preheader:                              ; preds = %2045
  br label %.lr.ph531

.lr.ph531:                                        ; preds = %.lr.ph531.preheader, %2072
  %indvars.iv535 = phi i64 [ %indvars.iv.next536, %2072 ], [ 0, %.lr.ph531.preheader ]
  %.04529 = phi i32 [ %.15, %2072 ], [ 32, %.lr.ph531.preheader ]
  %.06528 = phi i32 [ %.17, %2072 ], [ 0, %.lr.ph531.preheader ]
  call void @unroll_loop(i32 118)
  %2047 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 35
  %2048 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2047, i64 0, i64 %indvars.iv544
  %2049 = getelementptr inbounds [258 x i8], [258 x i8]* %2048, i64 0, i64 %indvars.iv535
  %2050 = load i8, i8* %2049, align 1
  %2051 = zext i8 %2050 to i32
  %2052 = icmp sgt i32 %2051, %.06528
  br i1 %2052, label %2053, label %2059

; <label>:2053:                                   ; preds = %.lr.ph531
  %2054 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 35
  %2055 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2054, i64 0, i64 %indvars.iv544
  %2056 = getelementptr inbounds [258 x i8], [258 x i8]* %2055, i64 0, i64 %indvars.iv535
  %2057 = load i8, i8* %2056, align 1
  %2058 = zext i8 %2057 to i32
  br label %2059

; <label>:2059:                                   ; preds = %2053, %.lr.ph531
  %.17 = phi i32 [ %2058, %2053 ], [ %.06528, %.lr.ph531 ]
  %2060 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 35
  %2061 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2060, i64 0, i64 %indvars.iv544
  %2062 = getelementptr inbounds [258 x i8], [258 x i8]* %2061, i64 0, i64 %indvars.iv535
  %2063 = load i8, i8* %2062, align 1
  %2064 = zext i8 %2063 to i32
  %2065 = icmp slt i32 %2064, %.04529
  br i1 %2065, label %2066, label %2072

; <label>:2066:                                   ; preds = %2059
  %2067 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 35
  %2068 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2067, i64 0, i64 %indvars.iv544
  %2069 = getelementptr inbounds [258 x i8], [258 x i8]* %2068, i64 0, i64 %indvars.iv535
  %2070 = load i8, i8* %2069, align 1
  %2071 = zext i8 %2070 to i32
  br label %2072

; <label>:2072:                                   ; preds = %2059, %2066
  %.15 = phi i32 [ %2071, %2066 ], [ %.04529, %2059 ]
  %indvars.iv.next536 = add nuw nsw i64 %indvars.iv535, 1
  %exitcond1034 = icmp ne i64 %indvars.iv.next536, %2043
  br i1 %exitcond1034, label %.lr.ph531, label %._crit_edge532.loopexit

._crit_edge532.loopexit:                          ; preds = %2072
  %.06.lcssa.ph = phi i32 [ %.17, %2072 ]
  %.04.lcssa.ph = phi i32 [ %.15, %2072 ]
  br label %._crit_edge532

._crit_edge532:                                   ; preds = %._crit_edge532.loopexit, %2045
  %.06.lcssa = phi i32 [ 0, %2045 ], [ %.06.lcssa.ph, %._crit_edge532.loopexit ]
  %.04.lcssa = phi i32 [ 32, %2045 ], [ %.04.lcssa.ph, %._crit_edge532.loopexit ]
  %2073 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 36
  %2074 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2073, i64 0, i64 %indvars.iv544
  %2075 = getelementptr inbounds [258 x i32], [258 x i32]* %2074, i64 0, i64 0
  %2076 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 37
  %2077 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2076, i64 0, i64 %indvars.iv544
  %2078 = getelementptr inbounds [258 x i32], [258 x i32]* %2077, i64 0, i64 0
  %2079 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 38
  %2080 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2079, i64 0, i64 %indvars.iv544
  %2081 = getelementptr inbounds [258 x i32], [258 x i32]* %2080, i64 0, i64 0
  %2082 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 35
  %2083 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* %2082, i64 0, i64 %indvars.iv544
  %2084 = getelementptr inbounds [258 x i8], [258 x i8]* %2083, i64 0, i64 0
  call void @BZ2_hbCreateDecodeTables(i32* %2075, i32* %2078, i32* %2081, i8* %2084, i32 %.04.lcssa, i32 %.06.lcssa, i32 %.566)
  %2085 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 39
  %2086 = getelementptr inbounds [6 x i32], [6 x i32]* %2085, i64 0, i64 %indvars.iv544
  store i32 %.04.lcssa, i32* %2086, align 4
  %indvars.iv.next545 = add nuw nsw i64 %indvars.iv544, 1
  %exitcond1035 = icmp ne i64 %indvars.iv.next545, %2044
  br i1 %exitcond1035, label %2045, label %._crit_edge542

._crit_edge542:                                   ; preds = %._crit_edge532
  %2087 = zext i32 %2042 to i64
  %2088 = add i64 %2087, 1
  %2089 = trunc i64 %2088 to i32
  br label %2090

; <label>:2090:                                   ; preds = %._crit_edge542, %2040
  %.648.lcssa = phi i32 [ %2089, %._crit_edge542 ], [ 0, %2040 ]
  %2091 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 27
  %2092 = load i32, i32* %2091, align 8
  %2093 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %2094 = load i32, i32* %2093, align 8
  br label %2095

; <label>:2095:                                   ; preds = %2090, %2095
  %indvars.iv524 = phi i64 [ 0, %2090 ], [ %indvars.iv.next525, %2095 ]
  call void @unroll_loop(i32 119)
  %2096 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 16
  %2097 = getelementptr inbounds [256 x i32], [256 x i32]* %2096, i64 0, i64 %indvars.iv524
  store i32 0, i32* %2097, align 4
  %indvars.iv.next525 = add nuw nsw i64 %indvars.iv524, 1
  %exitcond526 = icmp ne i64 %indvars.iv.next525, 256
  br i1 %exitcond526, label %2095, label %2098

; <label>:2098:                                   ; preds = %2095
  %2099 = mul nsw i32 100000, %2094
  br label %2100

; <label>:2100:                                   ; preds = %2098, %2110
  %indvars.iv521 = phi i64 [ 15, %2098 ], [ %indvars.iv.next522, %2110 ]
  %indvars.iv519 = phi i64 [ 4095, %2098 ], [ %indvars.iv.next520, %2110 ]
  call void @unroll_loop(i32 120)
  br label %2101

; <label>:2101:                                   ; preds = %2100, %2101
  %indvars.iv515 = phi i64 [ %indvars.iv519, %2100 ], [ %indvars.iv.next516, %2101 ]
  %.0363513 = phi i32 [ 15, %2100 ], [ %2108, %2101 ]
  call void @unroll_loop(i32 121)
  %2102 = mul nuw nsw i64 %indvars.iv521, 16
  %2103 = trunc i64 %2102 to i32
  %2104 = add nuw nsw i32 %2103, %.0363513
  %2105 = trunc i32 %2104 to i8
  %2106 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2107 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2106, i64 0, i64 %indvars.iv515
  store i8 %2105, i8* %2107, align 1
  %indvars.iv.next516 = add nsw i64 %indvars.iv515, -1
  %2108 = add nsw i32 %.0363513, -1
  %2109 = icmp sge i32 %2108, 0
  br i1 %2109, label %2101, label %2110

; <label>:2110:                                   ; preds = %2101
  %2111 = add nsw i64 %indvars.iv519, -16
  %2112 = trunc i64 %2111 to i32
  %2113 = add nsw i32 %2112, 1
  %2114 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2115 = getelementptr inbounds [16 x i32], [16 x i32]* %2114, i64 0, i64 %indvars.iv521
  store i32 %2113, i32* %2115, align 4
  %indvars.iv.next522 = add nsw i64 %indvars.iv521, -1
  %2116 = icmp sge i64 %indvars.iv.next522, 0
  %indvars.iv.next520 = add nsw i64 %indvars.iv519, -16
  br i1 %2116, label %2100, label %2117

; <label>:2117:                                   ; preds = %2110
  %2118 = add nsw i32 %2092, 1
  %2119 = trunc i64 256 to i32
  %2120 = icmp eq i32 0, 0
  br i1 %2120, label %2121, label %2146

; <label>:2121:                                   ; preds = %2117
  %2122 = add nsw i32 -1, 1
  %2123 = icmp sge i32 %2122, %.3109
  br i1 %2123, label %4045, label %2124

; <label>:2124:                                   ; preds = %2121
  %2125 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 33
  %2126 = sext i32 %2122 to i64
  %2127 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2125, i64 0, i64 %2126
  %2128 = load i8, i8* %2127, align 1
  %2129 = zext i8 %2128 to i32
  %2130 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 39
  %2131 = sext i32 %2129 to i64
  %2132 = getelementptr inbounds [6 x i32], [6 x i32]* %2130, i64 0, i64 %2131
  %2133 = load i32, i32* %2132, align 4
  %2134 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 36
  %2135 = sext i32 %2129 to i64
  %2136 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2134, i64 0, i64 %2135
  %2137 = getelementptr inbounds [258 x i32], [258 x i32]* %2136, i64 0, i64 0
  %2138 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 38
  %2139 = sext i32 %2129 to i64
  %2140 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2138, i64 0, i64 %2139
  %2141 = getelementptr inbounds [258 x i32], [258 x i32]* %2140, i64 0, i64 0
  %2142 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 37
  %2143 = sext i32 %2129 to i64
  %2144 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2142, i64 0, i64 %2143
  %2145 = getelementptr inbounds [258 x i32], [258 x i32]* %2144, i64 0, i64 0
  br label %2146

; <label>:2146:                                   ; preds = %2124, %2117
  %.0342 = phi i32* [ %2141, %2124 ], [ %81, %2117 ]
  %.0327 = phi i32* [ %2145, %2124 ], [ %79, %2117 ]
  %.0312 = phi i32* [ %2137, %2124 ], [ %77, %2117 ]
  %.0297 = phi i32 [ %2133, %2124 ], [ %75, %2117 ]
  %.0282 = phi i32 [ %2129, %2124 ], [ %73, %2117 ]
  %.0154 = phi i32 [ 50, %2124 ], [ 0, %2117 ]
  %.0139 = phi i32 [ %2122, %2124 ], [ -1, %2117 ]
  %2147 = add nsw i32 %.0154, -1
  br label %2148

; <label>:2148:                                   ; preds = %33, %2146
  %.1343 = phi i32* [ %81, %33 ], [ %.0342, %2146 ]
  %.1328 = phi i32* [ %79, %33 ], [ %.0327, %2146 ]
  %.1313 = phi i32* [ %77, %33 ], [ %.0312, %2146 ]
  %.1298 = phi i32 [ %75, %33 ], [ %.0297, %2146 ]
  %.1283 = phi i32 [ %73, %33 ], [ %.0282, %2146 ]
  %.0248 = phi i32 [ %67, %33 ], [ %.0297, %2146 ]
  %.7235 = phi i32 [ %63, %33 ], [ %.0228, %2146 ]
  %.0190 = phi i32 [ %57, %33 ], [ 0, %2146 ]
  %.0178 = phi i32 [ %55, %33 ], [ %2099, %2146 ]
  %.1155 = phi i32 [ %51, %33 ], [ %2147, %2146 ]
  %.1140 = phi i32 [ %49, %33 ], [ %.0139, %2146 ]
  %.0127 = phi i32 [ %47, %33 ], [ %2118, %2146 ]
  %.9115 = phi i32 [ %45, %33 ], [ %.3109, %2146 ]
  %.1094 = phi i32 [ %43, %33 ], [ %.488, %2146 ]
  %.1172 = phi i32 [ %41, %33 ], [ %.566, %2146 ]
  %.749 = phi i32 [ %39, %33 ], [ %.648.lcssa, %2146 ]
  %.1528 = phi i32 [ %37, %33 ], [ %.922, %2146 ]
  %.21 = phi i32 [ %35, %33 ], [ %2119, %2146 ]
  %2149 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 36, i32* %2149, align 8
  %2150 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2151 = load i32, i32* %2150, align 4
  %2152 = icmp sge i32 %2151, %.0248
  br i1 %2152, label %._crit_edge512, label %.lr.ph511.preheader

.lr.ph511.preheader:                              ; preds = %2148
  br label %.lr.ph511

._crit_edge512.loopexit:                          ; preds = %2211
  br label %._crit_edge512

._crit_edge512:                                   ; preds = %._crit_edge512.loopexit, %2148
  %2153 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2154 = load i32, i32* %2153, align 8
  %2155 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2156 = load i32, i32* %2155, align 4
  %2157 = sub nsw i32 %2156, %.0248
  %2158 = lshr i32 %2154, %2157
  %2159 = shl i32 1, %.0248
  %2160 = sub nsw i32 %2159, 1
  %2161 = and i32 %2158, %2160
  %2162 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2163 = load i32, i32* %2162, align 4
  %2164 = sub nsw i32 %2163, %.0248
  store i32 %2164, i32* %2162, align 4
  br label %2214

.lr.ph511:                                        ; preds = %.lr.ph511.preheader, %2211
  call void @unroll_loop(i32 122)
  %2165 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2166 = load %struct.bz_stream*, %struct.bz_stream** %2165, align 8
  %2167 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2166, i32 0, i32 1
  %2168 = load i32, i32* %2167, align 8
  %2169 = icmp eq i32 %2168, 0
  br i1 %2169, label %.loopexit506, label %2170

; <label>:2170:                                   ; preds = %.lr.ph511
  %2171 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2172 = load i32, i32* %2171, align 8
  %2173 = shl i32 %2172, 8
  %2174 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2175 = load %struct.bz_stream*, %struct.bz_stream** %2174, align 8
  %2176 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2175, i32 0, i32 0
  %2177 = load i8*, i8** %2176, align 8
  %2178 = load i8, i8* %2177, align 1
  %2179 = zext i8 %2178 to i32
  %2180 = or i32 %2173, %2179
  %2181 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %2180, i32* %2181, align 8
  %2182 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2183 = load i32, i32* %2182, align 4
  %2184 = add nsw i32 %2183, 8
  store i32 %2184, i32* %2182, align 4
  %2185 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2186 = load %struct.bz_stream*, %struct.bz_stream** %2185, align 8
  %2187 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2186, i32 0, i32 0
  %2188 = load i8*, i8** %2187, align 8
  %2189 = getelementptr inbounds i8, i8* %2188, i32 1
  store i8* %2189, i8** %2187, align 8
  %2190 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2191 = load %struct.bz_stream*, %struct.bz_stream** %2190, align 8
  %2192 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2191, i32 0, i32 1
  %2193 = load i32, i32* %2192, align 8
  %2194 = add i32 %2193, -1
  store i32 %2194, i32* %2192, align 8
  %2195 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2196 = load %struct.bz_stream*, %struct.bz_stream** %2195, align 8
  %2197 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2196, i32 0, i32 2
  %2198 = load i32, i32* %2197, align 4
  %2199 = add i32 %2198, 1
  store i32 %2199, i32* %2197, align 4
  %2200 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2201 = load %struct.bz_stream*, %struct.bz_stream** %2200, align 8
  %2202 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2201, i32 0, i32 2
  %2203 = load i32, i32* %2202, align 4
  %2204 = icmp eq i32 %2203, 0
  br i1 %2204, label %2205, label %2211

; <label>:2205:                                   ; preds = %2170
  %2206 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2207 = load %struct.bz_stream*, %struct.bz_stream** %2206, align 8
  %2208 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2207, i32 0, i32 3
  %2209 = load i32, i32* %2208, align 8
  %2210 = add i32 %2209, 1
  store i32 %2210, i32* %2208, align 8
  br label %2211

; <label>:2211:                                   ; preds = %2205, %2170
  %2212 = load i32, i32* %2150, align 4
  %2213 = icmp sge i32 %2212, %.0248
  br i1 %2213, label %._crit_edge512.loopexit, label %.lr.ph511

; <label>:2214:                                   ; preds = %._crit_edge512, %._crit_edge509
  %.2344 = phi i32* [ %.3345, %._crit_edge509 ], [ %.1343, %._crit_edge512 ]
  %.2329 = phi i32* [ %.3330, %._crit_edge509 ], [ %.1328, %._crit_edge512 ]
  %.2314 = phi i32* [ %.3315, %._crit_edge509 ], [ %.1313, %._crit_edge512 ]
  %.2299 = phi i32 [ %.3300, %._crit_edge509 ], [ %.1298, %._crit_edge512 ]
  %.2284 = phi i32 [ %.3285, %._crit_edge509 ], [ %.1283, %._crit_edge512 ]
  %.0271 = phi i32 [ %2234, %._crit_edge509 ], [ %71, %._crit_edge512 ]
  %.0260 = phi i32 [ %2239, %._crit_edge509 ], [ %2161, %._crit_edge512 ]
  %.1249 = phi i32 [ %.2250, %._crit_edge509 ], [ %.0248, %._crit_edge512 ]
  %.8236 = phi i32 [ %.9237, %._crit_edge509 ], [ %.7235, %._crit_edge512 ]
  %.1191 = phi i32 [ %.2192, %._crit_edge509 ], [ %.0190, %._crit_edge512 ]
  %.1179 = phi i32 [ %.2180, %._crit_edge509 ], [ %.0178, %._crit_edge512 ]
  %.2156 = phi i32 [ %.3157, %._crit_edge509 ], [ %.1155, %._crit_edge512 ]
  %.2141 = phi i32 [ %.3142, %._crit_edge509 ], [ %.1140, %._crit_edge512 ]
  %.1128 = phi i32 [ %.2129, %._crit_edge509 ], [ %.0127, %._crit_edge512 ]
  %.10116 = phi i32 [ %.11117, %._crit_edge509 ], [ %.9115, %._crit_edge512 ]
  %.1195 = phi i32 [ %.1296, %._crit_edge509 ], [ %.1094, %._crit_edge512 ]
  %.1273 = phi i32 [ %.1374, %._crit_edge509 ], [ %.1172, %._crit_edge512 ]
  %.850 = phi i32 [ %.951, %._crit_edge509 ], [ %.749, %._crit_edge512 ]
  %.1629 = phi i32 [ %.1730, %._crit_edge509 ], [ %.1528, %._crit_edge512 ]
  %.22 = phi i32 [ %.23, %._crit_edge509 ], [ %.21, %._crit_edge512 ]
  %2215 = icmp sgt i32 %.1249, 20
  br i1 %2215, label %4045, label %2216

; <label>:2216:                                   ; preds = %2214
  %2217 = sext i32 %.1249 to i64
  %2218 = getelementptr inbounds i32, i32* %.2314, i64 %2217
  %2219 = load i32, i32* %2218, align 4
  %2220 = icmp sle i32 %.0260, %2219
  br i1 %2220, label %2289, label %2221

; <label>:2221:                                   ; preds = %2216
  %2222 = add nsw i32 %.1249, 1
  br label %2223

; <label>:2223:                                   ; preds = %33, %2221
  %.3345 = phi i32* [ %81, %33 ], [ %.2344, %2221 ]
  %.3330 = phi i32* [ %79, %33 ], [ %.2329, %2221 ]
  %.3315 = phi i32* [ %77, %33 ], [ %.2314, %2221 ]
  %.3300 = phi i32 [ %75, %33 ], [ %.2299, %2221 ]
  %.3285 = phi i32 [ %73, %33 ], [ %.2284, %2221 ]
  %.1272 = phi i32 [ %71, %33 ], [ %.0271, %2221 ]
  %.1261 = phi i32 [ %69, %33 ], [ %.0260, %2221 ]
  %.2250 = phi i32 [ %67, %33 ], [ %2222, %2221 ]
  %.9237 = phi i32 [ %63, %33 ], [ %.8236, %2221 ]
  %.2192 = phi i32 [ %57, %33 ], [ %.1191, %2221 ]
  %.2180 = phi i32 [ %55, %33 ], [ %.1179, %2221 ]
  %.3157 = phi i32 [ %51, %33 ], [ %.2156, %2221 ]
  %.3142 = phi i32 [ %49, %33 ], [ %.2141, %2221 ]
  %.2129 = phi i32 [ %47, %33 ], [ %.1128, %2221 ]
  %.11117 = phi i32 [ %45, %33 ], [ %.10116, %2221 ]
  %.1296 = phi i32 [ %43, %33 ], [ %.1195, %2221 ]
  %.1374 = phi i32 [ %41, %33 ], [ %.1273, %2221 ]
  %.951 = phi i32 [ %39, %33 ], [ %.850, %2221 ]
  %.1730 = phi i32 [ %37, %33 ], [ %.1629, %2221 ]
  %.23 = phi i32 [ %35, %33 ], [ %.22, %2221 ]
  %2224 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 37, i32* %2224, align 8
  %2225 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2226 = load i32, i32* %2225, align 4
  %2227 = icmp sge i32 %2226, 1
  br i1 %2227, label %._crit_edge509, label %.lr.ph508.preheader

.lr.ph508.preheader:                              ; preds = %2223
  br label %.lr.ph508

._crit_edge509.loopexit:                          ; preds = %2286
  br label %._crit_edge509

._crit_edge509:                                   ; preds = %._crit_edge509.loopexit, %2223
  %2228 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2229 = load i32, i32* %2228, align 8
  %2230 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2231 = load i32, i32* %2230, align 4
  %2232 = sub nsw i32 %2231, 1
  %2233 = lshr i32 %2229, %2232
  %2234 = and i32 %2233, 1
  %2235 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2236 = load i32, i32* %2235, align 4
  %2237 = sub nsw i32 %2236, 1
  store i32 %2237, i32* %2235, align 4
  %2238 = shl i32 %.1261, 1
  %2239 = or i32 %2238, %2234
  br label %2214

.lr.ph508:                                        ; preds = %.lr.ph508.preheader, %2286
  call void @unroll_loop(i32 123)
  %2240 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2241 = load %struct.bz_stream*, %struct.bz_stream** %2240, align 8
  %2242 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2241, i32 0, i32 1
  %2243 = load i32, i32* %2242, align 8
  %2244 = icmp eq i32 %2243, 0
  br i1 %2244, label %.loopexit481, label %2245

; <label>:2245:                                   ; preds = %.lr.ph508
  %2246 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2247 = load i32, i32* %2246, align 8
  %2248 = shl i32 %2247, 8
  %2249 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2250 = load %struct.bz_stream*, %struct.bz_stream** %2249, align 8
  %2251 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2250, i32 0, i32 0
  %2252 = load i8*, i8** %2251, align 8
  %2253 = load i8, i8* %2252, align 1
  %2254 = zext i8 %2253 to i32
  %2255 = or i32 %2248, %2254
  %2256 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %2255, i32* %2256, align 8
  %2257 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2258 = load i32, i32* %2257, align 4
  %2259 = add nsw i32 %2258, 8
  store i32 %2259, i32* %2257, align 4
  %2260 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2261 = load %struct.bz_stream*, %struct.bz_stream** %2260, align 8
  %2262 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2261, i32 0, i32 0
  %2263 = load i8*, i8** %2262, align 8
  %2264 = getelementptr inbounds i8, i8* %2263, i32 1
  store i8* %2264, i8** %2262, align 8
  %2265 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2266 = load %struct.bz_stream*, %struct.bz_stream** %2265, align 8
  %2267 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2266, i32 0, i32 1
  %2268 = load i32, i32* %2267, align 8
  %2269 = add i32 %2268, -1
  store i32 %2269, i32* %2267, align 8
  %2270 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2271 = load %struct.bz_stream*, %struct.bz_stream** %2270, align 8
  %2272 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2271, i32 0, i32 2
  %2273 = load i32, i32* %2272, align 4
  %2274 = add i32 %2273, 1
  store i32 %2274, i32* %2272, align 4
  %2275 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2276 = load %struct.bz_stream*, %struct.bz_stream** %2275, align 8
  %2277 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2276, i32 0, i32 2
  %2278 = load i32, i32* %2277, align 4
  %2279 = icmp eq i32 %2278, 0
  br i1 %2279, label %2280, label %2286

; <label>:2280:                                   ; preds = %2245
  %2281 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2282 = load %struct.bz_stream*, %struct.bz_stream** %2281, align 8
  %2283 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2282, i32 0, i32 3
  %2284 = load i32, i32* %2283, align 8
  %2285 = add i32 %2284, 1
  store i32 %2285, i32* %2283, align 8
  br label %2286

; <label>:2286:                                   ; preds = %2280, %2245
  %2287 = load i32, i32* %2225, align 4
  %2288 = icmp sge i32 %2287, 1
  br i1 %2288, label %._crit_edge509.loopexit, label %.lr.ph508

; <label>:2289:                                   ; preds = %2216
  %2290 = sext i32 %.1249 to i64
  %2291 = getelementptr inbounds i32, i32* %.2329, i64 %2290
  %2292 = load i32, i32* %2291, align 4
  %2293 = sub nsw i32 %.0260, %2292
  %2294 = icmp slt i32 %2293, 0
  br i1 %2294, label %4045, label %2295

; <label>:2295:                                   ; preds = %2289
  %2296 = sext i32 %.1249 to i64
  %2297 = getelementptr inbounds i32, i32* %.2329, i64 %2296
  %2298 = load i32, i32* %2297, align 4
  %2299 = sub nsw i32 %.0260, %2298
  %2300 = icmp sge i32 %2299, 258
  br i1 %2300, label %4045, label %2301

; <label>:2301:                                   ; preds = %2295
  %2302 = sext i32 %.1249 to i64
  %2303 = getelementptr inbounds i32, i32* %.2329, i64 %2302
  %2304 = load i32, i32* %2303, align 4
  %2305 = sub nsw i32 %.0260, %2304
  %2306 = sext i32 %2305 to i64
  %2307 = getelementptr inbounds i32, i32* %.2344, i64 %2306
  %2308 = load i32, i32* %2307, align 4
  br label %2309

; <label>:2309:                                   ; preds = %2301, %2565, %2947
  %.4346 = phi i32* [ %.12354, %2947 ], [ %.8350, %2565 ], [ %.2344, %2301 ]
  %.4331 = phi i32* [ %.12339, %2947 ], [ %.8335, %2565 ], [ %.2329, %2301 ]
  %.4316 = phi i32* [ %.12324, %2947 ], [ %.8320, %2565 ], [ %.2314, %2301 ]
  %.4301 = phi i32 [ %.12309, %2947 ], [ %.8305, %2565 ], [ %.2299, %2301 ]
  %.4286 = phi i32 [ %.12294, %2947 ], [ %.8290, %2565 ], [ %.2284, %2301 ]
  %.2273 = phi i32 [ %.8279, %2947 ], [ %.5276, %2565 ], [ %.0271, %2301 ]
  %.2262 = phi i32 [ %.8268, %2947 ], [ %.5265, %2565 ], [ %.0260, %2301 ]
  %.3251 = phi i32 [ %.9257, %2947 ], [ %.6254, %2565 ], [ %.1249, %2301 ]
  %.10238 = phi i32 [ %.16244, %2947 ], [ %.13241, %2565 ], [ %.8236, %2301 ]
  %.0219 = phi i32 [ %.6225, %2947 ], [ %.3222, %2565 ], [ %61, %2301 ]
  %.0205 = phi i32 [ %.11216, %2947 ], [ %.9214, %2565 ], [ %59, %2301 ]
  %.3193 = phi i32 [ %.12202, %2947 ], [ %.10200, %2565 ], [ %.1191, %2301 ]
  %.3181 = phi i32 [ %.9187, %2947 ], [ %.6184, %2565 ], [ %.1179, %2301 ]
  %.0169 = phi i32 [ %2954, %2947 ], [ %2509, %2565 ], [ %2308, %2301 ]
  %.4158 = phi i32 [ %.12166, %2947 ], [ %.8162, %2565 ], [ %.2156, %2301 ]
  %.4143 = phi i32 [ %.12151, %2947 ], [ %.8147, %2565 ], [ %.2141, %2301 ]
  %.3130 = phi i32 [ %.9136, %2947 ], [ %.6133, %2565 ], [ %.1128, %2301 ]
  %.12118 = phi i32 [ %.18124, %2947 ], [ %.15121, %2565 ], [ %.10116, %2301 ]
  %.1397 = phi i32 [ %.19103, %2947 ], [ %.16100, %2565 ], [ %.1195, %2301 ]
  %.1475 = phi i32 [ %.2081, %2947 ], [ %.1778, %2565 ], [ %.1273, %2301 ]
  %.1052 = phi i32 [ %.1658, %2947 ], [ %.1355, %2565 ], [ %.850, %2301 ]
  %.1831 = phi i32 [ %.2437, %2947 ], [ %.2134, %2565 ], [ %.1629, %2301 ]
  %.24 = phi i32 [ %.30, %2947 ], [ %.27, %2565 ], [ %.22, %2301 ]
  %2310 = icmp eq i32 %.0169, %.3130
  br i1 %2310, label %2955, label %2311

; <label>:2311:                                   ; preds = %2309
  %switch = icmp ult i32 %.0169, 2
  br i1 %switch, label %2312, label %2566

; <label>:2312:                                   ; preds = %2311, %2502
  %.5347 = phi i32* [ %.8350, %2502 ], [ %.4346, %2311 ]
  %.5332 = phi i32* [ %.8335, %2502 ], [ %.4331, %2311 ]
  %.5317 = phi i32* [ %.8320, %2502 ], [ %.4316, %2311 ]
  %.5302 = phi i32 [ %.8305, %2502 ], [ %.4301, %2311 ]
  %.5287 = phi i32 [ %.8290, %2502 ], [ %.4286, %2311 ]
  %.3274 = phi i32 [ %.5276, %2502 ], [ %.2273, %2311 ]
  %.3263 = phi i32 [ %.5265, %2502 ], [ %.2262, %2311 ]
  %.4252 = phi i32 [ %.6254, %2502 ], [ %.3251, %2311 ]
  %.11239 = phi i32 [ %.13241, %2502 ], [ %.10238, %2311 ]
  %.1220 = phi i32 [ %.3222, %2502 ], [ 1, %2311 ]
  %.1206 = phi i32 [ %.5210, %2502 ], [ -1, %2311 ]
  %.4194 = phi i32 [ %.6196, %2502 ], [ %.3193, %2311 ]
  %.4182 = phi i32 [ %.6184, %2502 ], [ %.3181, %2311 ]
  %.1170 = phi i32 [ %2509, %2502 ], [ %.0169, %2311 ]
  %.5159 = phi i32 [ %.8162, %2502 ], [ %.4158, %2311 ]
  %.5144 = phi i32 [ %.8147, %2502 ], [ %.4143, %2311 ]
  %.4131 = phi i32 [ %.6133, %2502 ], [ %.3130, %2311 ]
  %.13119 = phi i32 [ %.15121, %2502 ], [ %.12118, %2311 ]
  %.1498 = phi i32 [ %.16100, %2502 ], [ %.1397, %2311 ]
  %.1576 = phi i32 [ %.1778, %2502 ], [ %.1475, %2311 ]
  %.1153 = phi i32 [ %.1355, %2502 ], [ %.1052, %2311 ]
  %.1932 = phi i32 [ %.2134, %2502 ], [ %.1831, %2311 ]
  %.25 = phi i32 [ %.27, %2502 ], [ %.24, %2311 ]
  switch i32 %.1170, label %2319 [
    i32 0, label %2313
    i32 1, label %2316
  ]

; <label>:2313:                                   ; preds = %2312
  %2314 = mul nsw i32 1, %.1220
  %2315 = add nsw i32 %.1206, %2314
  br label %2319

; <label>:2316:                                   ; preds = %2312
  %2317 = mul nsw i32 2, %.1220
  %2318 = add nsw i32 %.1206, %2317
  br label %2319

; <label>:2319:                                   ; preds = %2316, %2312, %2313
  %.3208 = phi i32 [ %2315, %2313 ], [ %2318, %2316 ], [ %.1206, %2312 ]
  %2320 = mul nsw i32 %.1220, 2
  %2321 = icmp eq i32 %.5159, 0
  br i1 %2321, label %2322, label %2347

; <label>:2322:                                   ; preds = %2319
  %2323 = add nsw i32 %.5144, 1
  %2324 = icmp sge i32 %2323, %.13119
  br i1 %2324, label %4045, label %2325

; <label>:2325:                                   ; preds = %2322
  %2326 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 33
  %2327 = sext i32 %2323 to i64
  %2328 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2326, i64 0, i64 %2327
  %2329 = load i8, i8* %2328, align 1
  %2330 = zext i8 %2329 to i32
  %2331 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 39
  %2332 = sext i32 %2330 to i64
  %2333 = getelementptr inbounds [6 x i32], [6 x i32]* %2331, i64 0, i64 %2332
  %2334 = load i32, i32* %2333, align 4
  %2335 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 36
  %2336 = sext i32 %2330 to i64
  %2337 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2335, i64 0, i64 %2336
  %2338 = getelementptr inbounds [258 x i32], [258 x i32]* %2337, i64 0, i64 0
  %2339 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 38
  %2340 = sext i32 %2330 to i64
  %2341 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2339, i64 0, i64 %2340
  %2342 = getelementptr inbounds [258 x i32], [258 x i32]* %2341, i64 0, i64 0
  %2343 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 37
  %2344 = sext i32 %2330 to i64
  %2345 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2343, i64 0, i64 %2344
  %2346 = getelementptr inbounds [258 x i32], [258 x i32]* %2345, i64 0, i64 0
  br label %2347

; <label>:2347:                                   ; preds = %2325, %2319
  %.6348 = phi i32* [ %2342, %2325 ], [ %.5347, %2319 ]
  %.6333 = phi i32* [ %2346, %2325 ], [ %.5332, %2319 ]
  %.6318 = phi i32* [ %2338, %2325 ], [ %.5317, %2319 ]
  %.6303 = phi i32 [ %2334, %2325 ], [ %.5302, %2319 ]
  %.6288 = phi i32 [ %2330, %2325 ], [ %.5287, %2319 ]
  %.6160 = phi i32 [ 50, %2325 ], [ %.5159, %2319 ]
  %.6145 = phi i32 [ %2323, %2325 ], [ %.5144, %2319 ]
  %2348 = add nsw i32 %.6160, -1
  br label %2349

; <label>:2349:                                   ; preds = %33, %2347
  %.7349 = phi i32* [ %.6348, %2347 ], [ %81, %33 ]
  %.7334 = phi i32* [ %.6333, %2347 ], [ %79, %33 ]
  %.7319 = phi i32* [ %.6318, %2347 ], [ %77, %33 ]
  %.7304 = phi i32 [ %.6303, %2347 ], [ %75, %33 ]
  %.7289 = phi i32 [ %.6288, %2347 ], [ %73, %33 ]
  %.4275 = phi i32 [ %.3274, %2347 ], [ %71, %33 ]
  %.4264 = phi i32 [ %.3263, %2347 ], [ %69, %33 ]
  %.5253 = phi i32 [ %.6303, %2347 ], [ %67, %33 ]
  %.12240 = phi i32 [ %.11239, %2347 ], [ %63, %33 ]
  %.2221 = phi i32 [ %2320, %2347 ], [ %61, %33 ]
  %.4209 = phi i32 [ %.3208, %2347 ], [ %59, %33 ]
  %.5195 = phi i32 [ %.4194, %2347 ], [ %57, %33 ]
  %.5183 = phi i32 [ %.4182, %2347 ], [ %55, %33 ]
  %.2171 = phi i32 [ %.1170, %2347 ], [ %53, %33 ]
  %.7161 = phi i32 [ %2348, %2347 ], [ %51, %33 ]
  %.7146 = phi i32 [ %.6145, %2347 ], [ %49, %33 ]
  %.5132 = phi i32 [ %.4131, %2347 ], [ %47, %33 ]
  %.14120 = phi i32 [ %.13119, %2347 ], [ %45, %33 ]
  %.1599 = phi i32 [ %.1498, %2347 ], [ %43, %33 ]
  %.1677 = phi i32 [ %.1576, %2347 ], [ %41, %33 ]
  %.1254 = phi i32 [ %.1153, %2347 ], [ %39, %33 ]
  %.2033 = phi i32 [ %.1932, %2347 ], [ %37, %33 ]
  %.26 = phi i32 [ %.25, %2347 ], [ %35, %33 ]
  %2350 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 38, i32* %2350, align 8
  %2351 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2352 = load i32, i32* %2351, align 4
  %2353 = icmp sge i32 %2352, %.5253
  br i1 %2353, label %._crit_edge467, label %.lr.ph466.preheader

.lr.ph466.preheader:                              ; preds = %2349
  br label %.lr.ph466

._crit_edge467.loopexit:                          ; preds = %2412
  br label %._crit_edge467

._crit_edge467:                                   ; preds = %._crit_edge467.loopexit, %2349
  %2354 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2355 = load i32, i32* %2354, align 8
  %2356 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2357 = load i32, i32* %2356, align 4
  %2358 = sub nsw i32 %2357, %.5253
  %2359 = lshr i32 %2355, %2358
  %2360 = shl i32 1, %.5253
  %2361 = sub nsw i32 %2360, 1
  %2362 = and i32 %2359, %2361
  %2363 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2364 = load i32, i32* %2363, align 4
  %2365 = sub nsw i32 %2364, %.5253
  store i32 %2365, i32* %2363, align 4
  br label %2415

.lr.ph466:                                        ; preds = %.lr.ph466.preheader, %2412
  call void @unroll_loop(i32 124)
  %2366 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2367 = load %struct.bz_stream*, %struct.bz_stream** %2366, align 8
  %2368 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2367, i32 0, i32 1
  %2369 = load i32, i32* %2368, align 8
  %2370 = icmp eq i32 %2369, 0
  br i1 %2370, label %.loopexit404, label %2371

; <label>:2371:                                   ; preds = %.lr.ph466
  %2372 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2373 = load i32, i32* %2372, align 8
  %2374 = shl i32 %2373, 8
  %2375 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2376 = load %struct.bz_stream*, %struct.bz_stream** %2375, align 8
  %2377 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2376, i32 0, i32 0
  %2378 = load i8*, i8** %2377, align 8
  %2379 = load i8, i8* %2378, align 1
  %2380 = zext i8 %2379 to i32
  %2381 = or i32 %2374, %2380
  %2382 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %2381, i32* %2382, align 8
  %2383 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2384 = load i32, i32* %2383, align 4
  %2385 = add nsw i32 %2384, 8
  store i32 %2385, i32* %2383, align 4
  %2386 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2387 = load %struct.bz_stream*, %struct.bz_stream** %2386, align 8
  %2388 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2387, i32 0, i32 0
  %2389 = load i8*, i8** %2388, align 8
  %2390 = getelementptr inbounds i8, i8* %2389, i32 1
  store i8* %2390, i8** %2388, align 8
  %2391 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2392 = load %struct.bz_stream*, %struct.bz_stream** %2391, align 8
  %2393 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2392, i32 0, i32 1
  %2394 = load i32, i32* %2393, align 8
  %2395 = add i32 %2394, -1
  store i32 %2395, i32* %2393, align 8
  %2396 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2397 = load %struct.bz_stream*, %struct.bz_stream** %2396, align 8
  %2398 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2397, i32 0, i32 2
  %2399 = load i32, i32* %2398, align 4
  %2400 = add i32 %2399, 1
  store i32 %2400, i32* %2398, align 4
  %2401 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2402 = load %struct.bz_stream*, %struct.bz_stream** %2401, align 8
  %2403 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2402, i32 0, i32 2
  %2404 = load i32, i32* %2403, align 4
  %2405 = icmp eq i32 %2404, 0
  br i1 %2405, label %2406, label %2412

; <label>:2406:                                   ; preds = %2371
  %2407 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2408 = load %struct.bz_stream*, %struct.bz_stream** %2407, align 8
  %2409 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2408, i32 0, i32 3
  %2410 = load i32, i32* %2409, align 8
  %2411 = add i32 %2410, 1
  store i32 %2411, i32* %2409, align 8
  br label %2412

; <label>:2412:                                   ; preds = %2406, %2371
  %2413 = load i32, i32* %2351, align 4
  %2414 = icmp sge i32 %2413, %.5253
  br i1 %2414, label %._crit_edge467.loopexit, label %.lr.ph466

; <label>:2415:                                   ; preds = %._crit_edge467, %._crit_edge464
  %.8350 = phi i32* [ %.7349, %._crit_edge467 ], [ %.9351, %._crit_edge464 ]
  %.8335 = phi i32* [ %.7334, %._crit_edge467 ], [ %.9336, %._crit_edge464 ]
  %.8320 = phi i32* [ %.7319, %._crit_edge467 ], [ %.9321, %._crit_edge464 ]
  %.8305 = phi i32 [ %.7304, %._crit_edge467 ], [ %.9306, %._crit_edge464 ]
  %.8290 = phi i32 [ %.7289, %._crit_edge467 ], [ %.9291, %._crit_edge464 ]
  %.5276 = phi i32 [ %.4275, %._crit_edge467 ], [ %2435, %._crit_edge464 ]
  %.5265 = phi i32 [ %2362, %._crit_edge467 ], [ %2440, %._crit_edge464 ]
  %.6254 = phi i32 [ %.5253, %._crit_edge467 ], [ %.7255, %._crit_edge464 ]
  %.13241 = phi i32 [ %.12240, %._crit_edge467 ], [ %.14242, %._crit_edge464 ]
  %.3222 = phi i32 [ %.2221, %._crit_edge467 ], [ %.4223, %._crit_edge464 ]
  %.5210 = phi i32 [ %.4209, %._crit_edge467 ], [ %.6211, %._crit_edge464 ]
  %.6196 = phi i32 [ %.5195, %._crit_edge467 ], [ %.7197, %._crit_edge464 ]
  %.6184 = phi i32 [ %.5183, %._crit_edge467 ], [ %.7185, %._crit_edge464 ]
  %.3172 = phi i32 [ %.2171, %._crit_edge467 ], [ %.4173, %._crit_edge464 ]
  %.8162 = phi i32 [ %.7161, %._crit_edge467 ], [ %.9163, %._crit_edge464 ]
  %.8147 = phi i32 [ %.7146, %._crit_edge467 ], [ %.9148, %._crit_edge464 ]
  %.6133 = phi i32 [ %.5132, %._crit_edge467 ], [ %.7134, %._crit_edge464 ]
  %.15121 = phi i32 [ %.14120, %._crit_edge467 ], [ %.16122, %._crit_edge464 ]
  %.16100 = phi i32 [ %.1599, %._crit_edge467 ], [ %.17101, %._crit_edge464 ]
  %.1778 = phi i32 [ %.1677, %._crit_edge467 ], [ %.1879, %._crit_edge464 ]
  %.1355 = phi i32 [ %.1254, %._crit_edge467 ], [ %.1456, %._crit_edge464 ]
  %.2134 = phi i32 [ %.2033, %._crit_edge467 ], [ %.2235, %._crit_edge464 ]
  %.27 = phi i32 [ %.26, %._crit_edge467 ], [ %.28, %._crit_edge464 ]
  %2416 = icmp sgt i32 %.6254, 20
  br i1 %2416, label %4045, label %2417

; <label>:2417:                                   ; preds = %2415
  %2418 = sext i32 %.6254 to i64
  %2419 = getelementptr inbounds i32, i32* %.8320, i64 %2418
  %2420 = load i32, i32* %2419, align 4
  %2421 = icmp sle i32 %.5265, %2420
  br i1 %2421, label %2490, label %2422

; <label>:2422:                                   ; preds = %2417
  %2423 = add nsw i32 %.6254, 1
  br label %2424

; <label>:2424:                                   ; preds = %33, %2422
  %.9351 = phi i32* [ %.8350, %2422 ], [ %81, %33 ]
  %.9336 = phi i32* [ %.8335, %2422 ], [ %79, %33 ]
  %.9321 = phi i32* [ %.8320, %2422 ], [ %77, %33 ]
  %.9306 = phi i32 [ %.8305, %2422 ], [ %75, %33 ]
  %.9291 = phi i32 [ %.8290, %2422 ], [ %73, %33 ]
  %.6277 = phi i32 [ %.5276, %2422 ], [ %71, %33 ]
  %.6266 = phi i32 [ %.5265, %2422 ], [ %69, %33 ]
  %.7255 = phi i32 [ %2423, %2422 ], [ %67, %33 ]
  %.14242 = phi i32 [ %.13241, %2422 ], [ %63, %33 ]
  %.4223 = phi i32 [ %.3222, %2422 ], [ %61, %33 ]
  %.6211 = phi i32 [ %.5210, %2422 ], [ %59, %33 ]
  %.7197 = phi i32 [ %.6196, %2422 ], [ %57, %33 ]
  %.7185 = phi i32 [ %.6184, %2422 ], [ %55, %33 ]
  %.4173 = phi i32 [ %.3172, %2422 ], [ %53, %33 ]
  %.9163 = phi i32 [ %.8162, %2422 ], [ %51, %33 ]
  %.9148 = phi i32 [ %.8147, %2422 ], [ %49, %33 ]
  %.7134 = phi i32 [ %.6133, %2422 ], [ %47, %33 ]
  %.16122 = phi i32 [ %.15121, %2422 ], [ %45, %33 ]
  %.17101 = phi i32 [ %.16100, %2422 ], [ %43, %33 ]
  %.1879 = phi i32 [ %.1778, %2422 ], [ %41, %33 ]
  %.1456 = phi i32 [ %.1355, %2422 ], [ %39, %33 ]
  %.2235 = phi i32 [ %.2134, %2422 ], [ %37, %33 ]
  %.28 = phi i32 [ %.27, %2422 ], [ %35, %33 ]
  %2425 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 39, i32* %2425, align 8
  %2426 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2427 = load i32, i32* %2426, align 4
  %2428 = icmp sge i32 %2427, 1
  br i1 %2428, label %._crit_edge464, label %.lr.ph463.preheader

.lr.ph463.preheader:                              ; preds = %2424
  br label %.lr.ph463

._crit_edge464.loopexit:                          ; preds = %2487
  br label %._crit_edge464

._crit_edge464:                                   ; preds = %._crit_edge464.loopexit, %2424
  %2429 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2430 = load i32, i32* %2429, align 8
  %2431 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2432 = load i32, i32* %2431, align 4
  %2433 = sub nsw i32 %2432, 1
  %2434 = lshr i32 %2430, %2433
  %2435 = and i32 %2434, 1
  %2436 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2437 = load i32, i32* %2436, align 4
  %2438 = sub nsw i32 %2437, 1
  store i32 %2438, i32* %2436, align 4
  %2439 = shl i32 %.6266, 1
  %2440 = or i32 %2439, %2435
  br label %2415

.lr.ph463:                                        ; preds = %.lr.ph463.preheader, %2487
  call void @unroll_loop(i32 125)
  %2441 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2442 = load %struct.bz_stream*, %struct.bz_stream** %2441, align 8
  %2443 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2442, i32 0, i32 1
  %2444 = load i32, i32* %2443, align 8
  %2445 = icmp eq i32 %2444, 0
  br i1 %2445, label %.loopexit379, label %2446

; <label>:2446:                                   ; preds = %.lr.ph463
  %2447 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2448 = load i32, i32* %2447, align 8
  %2449 = shl i32 %2448, 8
  %2450 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2451 = load %struct.bz_stream*, %struct.bz_stream** %2450, align 8
  %2452 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2451, i32 0, i32 0
  %2453 = load i8*, i8** %2452, align 8
  %2454 = load i8, i8* %2453, align 1
  %2455 = zext i8 %2454 to i32
  %2456 = or i32 %2449, %2455
  %2457 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %2456, i32* %2457, align 8
  %2458 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2459 = load i32, i32* %2458, align 4
  %2460 = add nsw i32 %2459, 8
  store i32 %2460, i32* %2458, align 4
  %2461 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2462 = load %struct.bz_stream*, %struct.bz_stream** %2461, align 8
  %2463 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2462, i32 0, i32 0
  %2464 = load i8*, i8** %2463, align 8
  %2465 = getelementptr inbounds i8, i8* %2464, i32 1
  store i8* %2465, i8** %2463, align 8
  %2466 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2467 = load %struct.bz_stream*, %struct.bz_stream** %2466, align 8
  %2468 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2467, i32 0, i32 1
  %2469 = load i32, i32* %2468, align 8
  %2470 = add i32 %2469, -1
  store i32 %2470, i32* %2468, align 8
  %2471 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2472 = load %struct.bz_stream*, %struct.bz_stream** %2471, align 8
  %2473 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2472, i32 0, i32 2
  %2474 = load i32, i32* %2473, align 4
  %2475 = add i32 %2474, 1
  store i32 %2475, i32* %2473, align 4
  %2476 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2477 = load %struct.bz_stream*, %struct.bz_stream** %2476, align 8
  %2478 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2477, i32 0, i32 2
  %2479 = load i32, i32* %2478, align 4
  %2480 = icmp eq i32 %2479, 0
  br i1 %2480, label %2481, label %2487

; <label>:2481:                                   ; preds = %2446
  %2482 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2483 = load %struct.bz_stream*, %struct.bz_stream** %2482, align 8
  %2484 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2483, i32 0, i32 3
  %2485 = load i32, i32* %2484, align 8
  %2486 = add i32 %2485, 1
  store i32 %2486, i32* %2484, align 8
  br label %2487

; <label>:2487:                                   ; preds = %2481, %2446
  %2488 = load i32, i32* %2426, align 4
  %2489 = icmp sge i32 %2488, 1
  br i1 %2489, label %._crit_edge464.loopexit, label %.lr.ph463

; <label>:2490:                                   ; preds = %2417
  %2491 = sext i32 %.6254 to i64
  %2492 = getelementptr inbounds i32, i32* %.8335, i64 %2491
  %2493 = load i32, i32* %2492, align 4
  %2494 = sub nsw i32 %.5265, %2493
  %2495 = icmp slt i32 %2494, 0
  br i1 %2495, label %4045, label %2496

; <label>:2496:                                   ; preds = %2490
  %2497 = sext i32 %.6254 to i64
  %2498 = getelementptr inbounds i32, i32* %.8335, i64 %2497
  %2499 = load i32, i32* %2498, align 4
  %2500 = sub nsw i32 %.5265, %2499
  %2501 = icmp sge i32 %2500, 258
  br i1 %2501, label %4045, label %2502

; <label>:2502:                                   ; preds = %2496
  %2503 = sext i32 %.6254 to i64
  %2504 = getelementptr inbounds i32, i32* %.8335, i64 %2503
  %2505 = load i32, i32* %2504, align 4
  %2506 = sub nsw i32 %.5265, %2505
  %2507 = sext i32 %2506 to i64
  %2508 = getelementptr inbounds i32, i32* %.8350, i64 %2507
  %2509 = load i32, i32* %2508, align 4
  %2510 = icmp eq i32 %2509, 0
  %2511 = icmp eq i32 %2509, 1
  %2512 = select i1 %2510, i1 true, i1 %2511
  br i1 %2512, label %2312, label %2513

; <label>:2513:                                   ; preds = %2502
  %2514 = add nsw i32 %.5210, 1
  %2515 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 30
  %2516 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2517 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2518 = getelementptr inbounds [16 x i32], [16 x i32]* %2517, i64 0, i64 0
  %2519 = load i32, i32* %2518, align 4
  %2520 = sext i32 %2519 to i64
  %2521 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2516, i64 0, i64 %2520
  %2522 = load i8, i8* %2521, align 1
  %2523 = zext i8 %2522 to i64
  %2524 = getelementptr inbounds [256 x i8], [256 x i8]* %2515, i64 0, i64 %2523
  %2525 = load i8, i8* %2524, align 1
  %2526 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 16
  %2527 = zext i8 %2525 to i64
  %2528 = getelementptr inbounds [256 x i32], [256 x i32]* %2526, i64 0, i64 %2527
  %2529 = load i32, i32* %2528, align 4
  %2530 = add nsw i32 %2529, %2514
  store i32 %2530, i32* %2528, align 4
  %2531 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 10
  %2532 = load i8, i8* %2531, align 4
  %2533 = icmp ne i8 %2532, 0
  %2534 = icmp sgt i32 %2514, 0
  br i1 %2533, label %2535, label %2550

; <label>:2535:                                   ; preds = %2513
  br i1 %2534, label %.lr.ph444, label %2565

.lr.ph444:                                        ; preds = %2535
  %2536 = sext i32 %.6196 to i64
  %2537 = sext i32 %.6184 to i64
  br label %2538

; <label>:2538:                                   ; preds = %.lr.ph444, %2542
  %indvars.iv447 = phi i64 [ %2536, %.lr.ph444 ], [ %indvars.iv.next448, %2542 ]
  %.7212441 = phi i32 [ %2514, %.lr.ph444 ], [ %2547, %2542 ]
  call void @unroll_loop(i32 126)
  %2539 = icmp sge i64 %indvars.iv447, %2537
  br i1 %2539, label %2540, label %2542

; <label>:2540:                                   ; preds = %2538
  %.7212.lcssa369 = phi i32 [ %.7212441, %2538 ]
  %.8198.lcssa368.wide = phi i64 [ %indvars.iv447, %2538 ]
  %2541 = trunc i64 %.8198.lcssa368.wide to i32
  br label %4045

; <label>:2542:                                   ; preds = %2538
  %2543 = zext i8 %2525 to i16
  %2544 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %2545 = load i16*, i16** %2544, align 8
  %2546 = getelementptr inbounds i16, i16* %2545, i64 %indvars.iv447
  store i16 %2543, i16* %2546, align 2
  %indvars.iv.next448 = add nsw i64 %indvars.iv447, 1
  %2547 = add nsw i32 %.7212441, -1
  %2548 = icmp sgt i32 %2547, 0
  br i1 %2548, label %2538, label %._crit_edge445

._crit_edge445:                                   ; preds = %2542
  %split = phi i32 [ %2547, %2542 ]
  %split446.wide = phi i64 [ %indvars.iv.next448, %2542 ]
  %2549 = trunc i64 %split446.wide to i32
  br label %2565

; <label>:2550:                                   ; preds = %2513
  br i1 %2534, label %.lr.ph454, label %2565

.lr.ph454:                                        ; preds = %2550
  %2551 = sext i32 %.6196 to i64
  %2552 = sext i32 %.6184 to i64
  br label %2553

; <label>:2553:                                   ; preds = %.lr.ph454, %2557
  %indvars.iv458 = phi i64 [ %2551, %.lr.ph454 ], [ %indvars.iv.next459, %2557 ]
  %.8213451 = phi i32 [ %2514, %.lr.ph454 ], [ %2562, %2557 ]
  call void @unroll_loop(i32 127)
  %2554 = icmp sge i64 %indvars.iv458, %2552
  br i1 %2554, label %2555, label %2557

; <label>:2555:                                   ; preds = %2553
  %.8213.lcssa371 = phi i32 [ %.8213451, %2553 ]
  %.9199.lcssa370.wide = phi i64 [ %indvars.iv458, %2553 ]
  %2556 = trunc i64 %.9199.lcssa370.wide to i32
  br label %4045

; <label>:2557:                                   ; preds = %2553
  %2558 = zext i8 %2525 to i32
  %2559 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %2560 = load i32*, i32** %2559, align 8
  %2561 = getelementptr inbounds i32, i32* %2560, i64 %indvars.iv458
  store i32 %2558, i32* %2561, align 4
  %indvars.iv.next459 = add nsw i64 %indvars.iv458, 1
  %2562 = add nsw i32 %.8213451, -1
  %2563 = icmp sgt i32 %2562, 0
  br i1 %2563, label %2553, label %._crit_edge455

._crit_edge455:                                   ; preds = %2557
  %split456 = phi i32 [ %2562, %2557 ]
  %split457.wide = phi i64 [ %indvars.iv.next459, %2557 ]
  %2564 = trunc i64 %split457.wide to i32
  br label %2565

; <label>:2565:                                   ; preds = %2550, %._crit_edge455, %2535, %._crit_edge445
  %.9214 = phi i32 [ %split, %._crit_edge445 ], [ %2514, %2535 ], [ %split456, %._crit_edge455 ], [ %2514, %2550 ]
  %.10200 = phi i32 [ %2549, %._crit_edge445 ], [ %.6196, %2535 ], [ %2564, %._crit_edge455 ], [ %.6196, %2550 ]
  br label %2309

; <label>:2566:                                   ; preds = %2311
  %2567 = icmp sge i32 %.3193, %.3181
  br i1 %2567, label %4045, label %2568

; <label>:2568:                                   ; preds = %2566
  %2569 = sub nsw i32 %.0169, 1
  %2570 = icmp ult i32 %2569, 16
  br i1 %2570, label %2571, label %2646

; <label>:2571:                                   ; preds = %2568
  %2572 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2573 = getelementptr inbounds [16 x i32], [16 x i32]* %2572, i64 0, i64 0
  %2574 = load i32, i32* %2573, align 4
  %2575 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2576 = add i32 %2574, %2569
  %2577 = zext i32 %2576 to i64
  %2578 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2575, i64 0, i64 %2577
  %2579 = load i8, i8* %2578, align 1
  %2580 = icmp ugt i32 %2569, 3
  br i1 %2580, label %.lr.ph482, label %2624

.lr.ph482:                                        ; preds = %2571
  %2581 = add i32 %.0169, -5
  %2582 = lshr i32 %2581, 2
  br label %2583

; <label>:2583:                                   ; preds = %.lr.ph482, %2583
  %.01480 = phi i32 [ %2569, %.lr.ph482 ], [ %2620, %2583 ]
  call void @unroll_loop(i32 128)
  %2584 = add i32 %2574, %.01480
  %2585 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2586 = sub nsw i32 %2584, 1
  %2587 = sext i32 %2586 to i64
  %2588 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2585, i64 0, i64 %2587
  %2589 = load i8, i8* %2588, align 1
  %2590 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2591 = sext i32 %2584 to i64
  %2592 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2590, i64 0, i64 %2591
  store i8 %2589, i8* %2592, align 1
  %2593 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2594 = sub nsw i32 %2584, 2
  %2595 = sext i32 %2594 to i64
  %2596 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2593, i64 0, i64 %2595
  %2597 = load i8, i8* %2596, align 1
  %2598 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2599 = sub nsw i32 %2584, 1
  %2600 = sext i32 %2599 to i64
  %2601 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2598, i64 0, i64 %2600
  store i8 %2597, i8* %2601, align 1
  %2602 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2603 = sub nsw i32 %2584, 3
  %2604 = sext i32 %2603 to i64
  %2605 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2602, i64 0, i64 %2604
  %2606 = load i8, i8* %2605, align 1
  %2607 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2608 = sub nsw i32 %2584, 2
  %2609 = sext i32 %2608 to i64
  %2610 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2607, i64 0, i64 %2609
  store i8 %2606, i8* %2610, align 1
  %2611 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2612 = sub nsw i32 %2584, 4
  %2613 = sext i32 %2612 to i64
  %2614 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2611, i64 0, i64 %2613
  %2615 = load i8, i8* %2614, align 1
  %2616 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2617 = sub nsw i32 %2584, 3
  %2618 = sext i32 %2617 to i64
  %2619 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2616, i64 0, i64 %2618
  store i8 %2615, i8* %2619, align 1
  %2620 = sub i32 %.01480, 4
  %2621 = icmp ugt i32 %2620, 3
  br i1 %2621, label %2583, label %._crit_edge483

._crit_edge483:                                   ; preds = %2583
  %2622 = shl i32 %2582, 2
  %2623 = sub i32 %2581, %2622
  br label %2624

; <label>:2624:                                   ; preds = %._crit_edge483, %2571
  %.01.lcssa = phi i32 [ %2623, %._crit_edge483 ], [ %2569, %2571 ]
  %2625 = icmp ugt i32 %.01.lcssa, 0
  br i1 %2625, label %.lr.ph476, label %._crit_edge477

.lr.ph476:                                        ; preds = %2624
  %2626 = zext i32 %.01.lcssa to i64
  br label %2627

; <label>:2627:                                   ; preds = %.lr.ph476, %2627
  %indvars.iv478 = phi i64 [ %2626, %.lr.ph476 ], [ %indvars.iv.next479, %2627 ]
  call void @unroll_loop(i32 129)
  %2628 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2629 = trunc i64 %indvars.iv478 to i32
  %2630 = add i32 %2574, %2629
  %2631 = sub i32 %2630, 1
  %2632 = zext i32 %2631 to i64
  %2633 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2628, i64 0, i64 %2632
  %2634 = load i8, i8* %2633, align 1
  %2635 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2636 = trunc i64 %indvars.iv478 to i32
  %2637 = add i32 %2574, %2636
  %2638 = zext i32 %2637 to i64
  %2639 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2635, i64 0, i64 %2638
  store i8 %2634, i8* %2639, align 1
  %2640 = trunc i64 %indvars.iv478 to i32
  %2641 = add i32 %2640, -1
  %2642 = icmp ugt i32 %2641, 0
  %indvars.iv.next479 = add nsw i64 %indvars.iv478, -1
  br i1 %2642, label %2627, label %._crit_edge477.loopexit

._crit_edge477.loopexit:                          ; preds = %2627
  br label %._crit_edge477

._crit_edge477:                                   ; preds = %._crit_edge477.loopexit, %2624
  %2643 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2644 = sext i32 %2574 to i64
  %2645 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2643, i64 0, i64 %2644
  store i8 %2579, i8* %2645, align 1
  br label %2735

; <label>:2646:                                   ; preds = %2568
  %2647 = udiv i32 %2569, 16
  %2648 = urem i32 %2569, 16
  %2649 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2650 = sext i32 %2647 to i64
  %2651 = getelementptr inbounds [16 x i32], [16 x i32]* %2649, i64 0, i64 %2650
  %2652 = load i32, i32* %2651, align 4
  %2653 = add nsw i32 %2652, %2648
  %2654 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2655 = sext i32 %2653 to i64
  %2656 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2654, i64 0, i64 %2655
  %2657 = load i8, i8* %2656, align 1
  %2658 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2659 = sext i32 %2647 to i64
  %2660 = getelementptr inbounds [16 x i32], [16 x i32]* %2658, i64 0, i64 %2659
  %2661 = load i32, i32* %2660, align 4
  %2662 = icmp sgt i32 %2653, %2661
  br i1 %2662, label %.lr.ph503, label %._crit_edge504

.lr.ph503:                                        ; preds = %2646
  %2663 = add i32 %2652, %2648
  %2664 = sext i32 %2663 to i64
  br label %2665

; <label>:2665:                                   ; preds = %.lr.ph503, %2665
  %indvars.iv505 = phi i64 [ %2664, %.lr.ph503 ], [ %indvars.iv.next506, %2665 ]
  call void @unroll_loop(i32 130)
  %2666 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %indvars.iv.next506 = add nsw i64 %indvars.iv505, -1
  %2667 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2666, i64 0, i64 %indvars.iv.next506
  %2668 = load i8, i8* %2667, align 1
  %2669 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2670 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2669, i64 0, i64 %indvars.iv505
  store i8 %2668, i8* %2670, align 1
  %2671 = load i32, i32* %2660, align 4
  %2672 = sext i32 %2671 to i64
  %2673 = icmp sgt i64 %indvars.iv.next506, %2672
  br i1 %2673, label %2665, label %._crit_edge504.loopexit

._crit_edge504.loopexit:                          ; preds = %2665
  br label %._crit_edge504

._crit_edge504:                                   ; preds = %._crit_edge504.loopexit, %2646
  %2674 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2675 = sext i32 %2647 to i64
  %2676 = getelementptr inbounds [16 x i32], [16 x i32]* %2674, i64 0, i64 %2675
  %2677 = load i32, i32* %2676, align 4
  %2678 = add nsw i32 %2677, 1
  store i32 %2678, i32* %2676, align 4
  %2679 = icmp sgt i32 %2647, 0
  br i1 %2679, label %.lr.ph497.preheader, label %._crit_edge498

.lr.ph497.preheader:                              ; preds = %._crit_edge504
  br label %.lr.ph497

.lr.ph497:                                        ; preds = %.lr.ph497.preheader, %.lr.ph497
  %indvars.iv499 = phi i64 [ %indvars.iv.next500, %.lr.ph497 ], [ %2650, %.lr.ph497.preheader ]
  call void @unroll_loop(i32 131)
  %2680 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2681 = getelementptr inbounds [16 x i32], [16 x i32]* %2680, i64 0, i64 %indvars.iv499
  %2682 = load i32, i32* %2681, align 4
  %2683 = add nsw i32 %2682, -1
  store i32 %2683, i32* %2681, align 4
  %2684 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2685 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %indvars.iv.next500 = add nsw i64 %indvars.iv499, -1
  %2686 = getelementptr inbounds [16 x i32], [16 x i32]* %2685, i64 0, i64 %indvars.iv.next500
  %2687 = load i32, i32* %2686, align 4
  %2688 = add nsw i32 %2687, 16
  %2689 = sub nsw i32 %2688, 1
  %2690 = sext i32 %2689 to i64
  %2691 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2684, i64 0, i64 %2690
  %2692 = load i8, i8* %2691, align 1
  %2693 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2694 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2695 = getelementptr inbounds [16 x i32], [16 x i32]* %2694, i64 0, i64 %indvars.iv499
  %2696 = load i32, i32* %2695, align 4
  %2697 = sext i32 %2696 to i64
  %2698 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2693, i64 0, i64 %2697
  store i8 %2692, i8* %2698, align 1
  %2699 = icmp sgt i64 %indvars.iv.next500, 0
  br i1 %2699, label %.lr.ph497, label %._crit_edge498.loopexit

._crit_edge498.loopexit:                          ; preds = %.lr.ph497
  br label %._crit_edge498

._crit_edge498:                                   ; preds = %._crit_edge498.loopexit, %._crit_edge504
  %2700 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2701 = getelementptr inbounds [16 x i32], [16 x i32]* %2700, i64 0, i64 0
  %2702 = load i32, i32* %2701, align 4
  %2703 = add nsw i32 %2702, -1
  store i32 %2703, i32* %2701, align 4
  %2704 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2705 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2706 = getelementptr inbounds [16 x i32], [16 x i32]* %2705, i64 0, i64 0
  %2707 = load i32, i32* %2706, align 4
  %2708 = sext i32 %2707 to i64
  %2709 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2704, i64 0, i64 %2708
  store i8 %2657, i8* %2709, align 1
  %2710 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2711 = getelementptr inbounds [16 x i32], [16 x i32]* %2710, i64 0, i64 0
  %2712 = load i32, i32* %2711, align 4
  %2713 = icmp eq i32 %2712, 0
  br i1 %2713, label %.preheader479, label %2735

.preheader479:                                    ; preds = %._crit_edge498
  br label %2714

; <label>:2714:                                   ; preds = %.preheader479, %2728
  %indvars.iv493 = phi i64 [ %indvars.iv.next494, %2728 ], [ 15, %.preheader479 ]
  %indvars.iv491 = phi i64 [ %indvars.iv.next492, %2728 ], [ 4095, %.preheader479 ]
  call void @unroll_loop(i32 132)
  br label %2715

; <label>:2715:                                   ; preds = %2714, %2715
  %indvars.iv487 = phi i64 [ %indvars.iv491, %2714 ], [ %indvars.iv.next488, %2715 ]
  %.0359485 = phi i32 [ 15, %2714 ], [ %2726, %2715 ]
  call void @unroll_loop(i32 133)
  %2716 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2717 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2718 = getelementptr inbounds [16 x i32], [16 x i32]* %2717, i64 0, i64 %indvars.iv493
  %2719 = load i32, i32* %2718, align 4
  %2720 = add nsw i32 %2719, %.0359485
  %2721 = sext i32 %2720 to i64
  %2722 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2716, i64 0, i64 %2721
  %2723 = load i8, i8* %2722, align 1
  %2724 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 31
  %2725 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2724, i64 0, i64 %indvars.iv487
  store i8 %2723, i8* %2725, align 1
  %indvars.iv.next488 = add nsw i64 %indvars.iv487, -1
  %2726 = add nsw i32 %.0359485, -1
  %2727 = icmp sge i32 %2726, 0
  br i1 %2727, label %2715, label %2728

; <label>:2728:                                   ; preds = %2715
  %2729 = add nsw i64 %indvars.iv491, -16
  %2730 = trunc i64 %2729 to i32
  %2731 = add nsw i32 %2730, 1
  %2732 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 32
  %2733 = getelementptr inbounds [16 x i32], [16 x i32]* %2732, i64 0, i64 %indvars.iv493
  store i32 %2731, i32* %2733, align 4
  %indvars.iv.next494 = add nsw i64 %indvars.iv493, -1
  %2734 = icmp sge i64 %indvars.iv.next494, 0
  %indvars.iv.next492 = add nsw i64 %indvars.iv491, -16
  br i1 %2734, label %2714, label %.loopexit480

.loopexit480:                                     ; preds = %2728
  %.02.ph = phi i8 [ %2657, %2728 ]
  br label %2735

; <label>:2735:                                   ; preds = %.loopexit480, %._crit_edge498, %._crit_edge477
  %.02 = phi i8 [ %2579, %._crit_edge477 ], [ %2657, %._crit_edge498 ], [ %.02.ph, %.loopexit480 ]
  %2736 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 16
  %2737 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 30
  %2738 = zext i8 %.02 to i64
  %2739 = getelementptr inbounds [256 x i8], [256 x i8]* %2737, i64 0, i64 %2738
  %2740 = load i8, i8* %2739, align 1
  %2741 = zext i8 %2740 to i64
  %2742 = getelementptr inbounds [256 x i32], [256 x i32]* %2736, i64 0, i64 %2741
  %2743 = load i32, i32* %2742, align 4
  %2744 = add nsw i32 %2743, 1
  store i32 %2744, i32* %2742, align 4
  %2745 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 10
  %2746 = load i8, i8* %2745, align 4
  %2747 = icmp ne i8 %2746, 0
  %2748 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 30
  %2749 = zext i8 %.02 to i64
  %2750 = getelementptr inbounds [256 x i8], [256 x i8]* %2748, i64 0, i64 %2749
  %2751 = load i8, i8* %2750, align 1
  br i1 %2747, label %2752, label %2758

; <label>:2752:                                   ; preds = %2735
  %2753 = zext i8 %2751 to i16
  %2754 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %2755 = load i16*, i16** %2754, align 8
  %2756 = sext i32 %.3193 to i64
  %2757 = getelementptr inbounds i16, i16* %2755, i64 %2756
  store i16 %2753, i16* %2757, align 2
  br label %2764

; <label>:2758:                                   ; preds = %2735
  %2759 = zext i8 %2751 to i32
  %2760 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %2761 = load i32*, i32** %2760, align 8
  %2762 = sext i32 %.3193 to i64
  %2763 = getelementptr inbounds i32, i32* %2761, i64 %2762
  store i32 %2759, i32* %2763, align 4
  br label %2764

; <label>:2764:                                   ; preds = %2758, %2752
  %2765 = add nsw i32 %.3193, 1
  %2766 = icmp eq i32 %.4158, 0
  br i1 %2766, label %2767, label %2792

; <label>:2767:                                   ; preds = %2764
  %2768 = add nsw i32 %.4143, 1
  %2769 = icmp sge i32 %2768, %.12118
  br i1 %2769, label %4045, label %2770

; <label>:2770:                                   ; preds = %2767
  %2771 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 33
  %2772 = sext i32 %2768 to i64
  %2773 = getelementptr inbounds [18002 x i8], [18002 x i8]* %2771, i64 0, i64 %2772
  %2774 = load i8, i8* %2773, align 1
  %2775 = zext i8 %2774 to i32
  %2776 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 39
  %2777 = sext i32 %2775 to i64
  %2778 = getelementptr inbounds [6 x i32], [6 x i32]* %2776, i64 0, i64 %2777
  %2779 = load i32, i32* %2778, align 4
  %2780 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 36
  %2781 = sext i32 %2775 to i64
  %2782 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2780, i64 0, i64 %2781
  %2783 = getelementptr inbounds [258 x i32], [258 x i32]* %2782, i64 0, i64 0
  %2784 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 38
  %2785 = sext i32 %2775 to i64
  %2786 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2784, i64 0, i64 %2785
  %2787 = getelementptr inbounds [258 x i32], [258 x i32]* %2786, i64 0, i64 0
  %2788 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 37
  %2789 = sext i32 %2775 to i64
  %2790 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* %2788, i64 0, i64 %2789
  %2791 = getelementptr inbounds [258 x i32], [258 x i32]* %2790, i64 0, i64 0
  br label %2792

; <label>:2792:                                   ; preds = %2770, %2764
  %.10352 = phi i32* [ %2787, %2770 ], [ %.4346, %2764 ]
  %.10337 = phi i32* [ %2791, %2770 ], [ %.4331, %2764 ]
  %.10322 = phi i32* [ %2783, %2770 ], [ %.4316, %2764 ]
  %.10307 = phi i32 [ %2779, %2770 ], [ %.4301, %2764 ]
  %.10292 = phi i32 [ %2775, %2770 ], [ %.4286, %2764 ]
  %.10164 = phi i32 [ 50, %2770 ], [ %.4158, %2764 ]
  %.10149 = phi i32 [ %2768, %2770 ], [ %.4143, %2764 ]
  %2793 = add nsw i32 %.10164, -1
  br label %2794

; <label>:2794:                                   ; preds = %33, %2792
  %.11353 = phi i32* [ %.10352, %2792 ], [ %81, %33 ]
  %.11338 = phi i32* [ %.10337, %2792 ], [ %79, %33 ]
  %.11323 = phi i32* [ %.10322, %2792 ], [ %77, %33 ]
  %.11308 = phi i32 [ %.10307, %2792 ], [ %75, %33 ]
  %.11293 = phi i32 [ %.10292, %2792 ], [ %73, %33 ]
  %.7278 = phi i32 [ %.2273, %2792 ], [ %71, %33 ]
  %.7267 = phi i32 [ %.2262, %2792 ], [ %69, %33 ]
  %.8256 = phi i32 [ %.10307, %2792 ], [ %67, %33 ]
  %.15243 = phi i32 [ %.10238, %2792 ], [ %63, %33 ]
  %.5224 = phi i32 [ %.0219, %2792 ], [ %61, %33 ]
  %.10215 = phi i32 [ %.0205, %2792 ], [ %59, %33 ]
  %.11201 = phi i32 [ %2765, %2792 ], [ %57, %33 ]
  %.8186 = phi i32 [ %.3181, %2792 ], [ %55, %33 ]
  %.5174 = phi i32 [ %.0169, %2792 ], [ %53, %33 ]
  %.11165 = phi i32 [ %2793, %2792 ], [ %51, %33 ]
  %.11150 = phi i32 [ %.10149, %2792 ], [ %49, %33 ]
  %.8135 = phi i32 [ %.3130, %2792 ], [ %47, %33 ]
  %.17123 = phi i32 [ %.12118, %2792 ], [ %45, %33 ]
  %.18102 = phi i32 [ %.1397, %2792 ], [ %43, %33 ]
  %.1980 = phi i32 [ %.1475, %2792 ], [ %41, %33 ]
  %.1557 = phi i32 [ %.1052, %2792 ], [ %39, %33 ]
  %.2336 = phi i32 [ %.1831, %2792 ], [ %37, %33 ]
  %.29 = phi i32 [ %.24, %2792 ], [ %35, %33 ]
  %2795 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 40, i32* %2795, align 8
  %2796 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2797 = load i32, i32* %2796, align 4
  %2798 = icmp sge i32 %2797, %.8256
  br i1 %2798, label %._crit_edge473, label %.lr.ph472.preheader

.lr.ph472.preheader:                              ; preds = %2794
  br label %.lr.ph472

._crit_edge473.loopexit:                          ; preds = %2857
  br label %._crit_edge473

._crit_edge473:                                   ; preds = %._crit_edge473.loopexit, %2794
  %2799 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2800 = load i32, i32* %2799, align 8
  %2801 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2802 = load i32, i32* %2801, align 4
  %2803 = sub nsw i32 %2802, %.8256
  %2804 = lshr i32 %2800, %2803
  %2805 = shl i32 1, %.8256
  %2806 = sub nsw i32 %2805, 1
  %2807 = and i32 %2804, %2806
  %2808 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2809 = load i32, i32* %2808, align 4
  %2810 = sub nsw i32 %2809, %.8256
  store i32 %2810, i32* %2808, align 4
  br label %2860

.lr.ph472:                                        ; preds = %.lr.ph472.preheader, %2857
  call void @unroll_loop(i32 134)
  %2811 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2812 = load %struct.bz_stream*, %struct.bz_stream** %2811, align 8
  %2813 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2812, i32 0, i32 1
  %2814 = load i32, i32* %2813, align 8
  %2815 = icmp eq i32 %2814, 0
  br i1 %2815, label %.loopexit454, label %2816

; <label>:2816:                                   ; preds = %.lr.ph472
  %2817 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2818 = load i32, i32* %2817, align 8
  %2819 = shl i32 %2818, 8
  %2820 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2821 = load %struct.bz_stream*, %struct.bz_stream** %2820, align 8
  %2822 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2821, i32 0, i32 0
  %2823 = load i8*, i8** %2822, align 8
  %2824 = load i8, i8* %2823, align 1
  %2825 = zext i8 %2824 to i32
  %2826 = or i32 %2819, %2825
  %2827 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %2826, i32* %2827, align 8
  %2828 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2829 = load i32, i32* %2828, align 4
  %2830 = add nsw i32 %2829, 8
  store i32 %2830, i32* %2828, align 4
  %2831 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2832 = load %struct.bz_stream*, %struct.bz_stream** %2831, align 8
  %2833 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2832, i32 0, i32 0
  %2834 = load i8*, i8** %2833, align 8
  %2835 = getelementptr inbounds i8, i8* %2834, i32 1
  store i8* %2835, i8** %2833, align 8
  %2836 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2837 = load %struct.bz_stream*, %struct.bz_stream** %2836, align 8
  %2838 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2837, i32 0, i32 1
  %2839 = load i32, i32* %2838, align 8
  %2840 = add i32 %2839, -1
  store i32 %2840, i32* %2838, align 8
  %2841 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2842 = load %struct.bz_stream*, %struct.bz_stream** %2841, align 8
  %2843 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2842, i32 0, i32 2
  %2844 = load i32, i32* %2843, align 4
  %2845 = add i32 %2844, 1
  store i32 %2845, i32* %2843, align 4
  %2846 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2847 = load %struct.bz_stream*, %struct.bz_stream** %2846, align 8
  %2848 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2847, i32 0, i32 2
  %2849 = load i32, i32* %2848, align 4
  %2850 = icmp eq i32 %2849, 0
  br i1 %2850, label %2851, label %2857

; <label>:2851:                                   ; preds = %2816
  %2852 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2853 = load %struct.bz_stream*, %struct.bz_stream** %2852, align 8
  %2854 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2853, i32 0, i32 3
  %2855 = load i32, i32* %2854, align 8
  %2856 = add i32 %2855, 1
  store i32 %2856, i32* %2854, align 8
  br label %2857

; <label>:2857:                                   ; preds = %2851, %2816
  %2858 = load i32, i32* %2796, align 4
  %2859 = icmp sge i32 %2858, %.8256
  br i1 %2859, label %._crit_edge473.loopexit, label %.lr.ph472

; <label>:2860:                                   ; preds = %._crit_edge473, %._crit_edge470
  %.12354 = phi i32* [ %.13355, %._crit_edge470 ], [ %.11353, %._crit_edge473 ]
  %.12339 = phi i32* [ %.13340, %._crit_edge470 ], [ %.11338, %._crit_edge473 ]
  %.12324 = phi i32* [ %.13325, %._crit_edge470 ], [ %.11323, %._crit_edge473 ]
  %.12309 = phi i32 [ %.13310, %._crit_edge470 ], [ %.11308, %._crit_edge473 ]
  %.12294 = phi i32 [ %.13295, %._crit_edge470 ], [ %.11293, %._crit_edge473 ]
  %.8279 = phi i32 [ %2880, %._crit_edge470 ], [ %.7278, %._crit_edge473 ]
  %.8268 = phi i32 [ %2885, %._crit_edge470 ], [ %2807, %._crit_edge473 ]
  %.9257 = phi i32 [ %.10258, %._crit_edge470 ], [ %.8256, %._crit_edge473 ]
  %.16244 = phi i32 [ %.17245, %._crit_edge470 ], [ %.15243, %._crit_edge473 ]
  %.6225 = phi i32 [ %.7226, %._crit_edge470 ], [ %.5224, %._crit_edge473 ]
  %.11216 = phi i32 [ %.12217, %._crit_edge470 ], [ %.10215, %._crit_edge473 ]
  %.12202 = phi i32 [ %.13203, %._crit_edge470 ], [ %.11201, %._crit_edge473 ]
  %.9187 = phi i32 [ %.10188, %._crit_edge470 ], [ %.8186, %._crit_edge473 ]
  %.6175 = phi i32 [ %.7176, %._crit_edge470 ], [ %.5174, %._crit_edge473 ]
  %.12166 = phi i32 [ %.13167, %._crit_edge470 ], [ %.11165, %._crit_edge473 ]
  %.12151 = phi i32 [ %.13152, %._crit_edge470 ], [ %.11150, %._crit_edge473 ]
  %.9136 = phi i32 [ %.10137, %._crit_edge470 ], [ %.8135, %._crit_edge473 ]
  %.18124 = phi i32 [ %.19125, %._crit_edge470 ], [ %.17123, %._crit_edge473 ]
  %.19103 = phi i32 [ %.20104, %._crit_edge470 ], [ %.18102, %._crit_edge473 ]
  %.2081 = phi i32 [ %.2182, %._crit_edge470 ], [ %.1980, %._crit_edge473 ]
  %.1658 = phi i32 [ %.1759, %._crit_edge470 ], [ %.1557, %._crit_edge473 ]
  %.2437 = phi i32 [ %.2538, %._crit_edge470 ], [ %.2336, %._crit_edge473 ]
  %.30 = phi i32 [ %.31, %._crit_edge470 ], [ %.29, %._crit_edge473 ]
  %2861 = icmp sgt i32 %.9257, 20
  br i1 %2861, label %4045, label %2862

; <label>:2862:                                   ; preds = %2860
  %2863 = sext i32 %.9257 to i64
  %2864 = getelementptr inbounds i32, i32* %.12324, i64 %2863
  %2865 = load i32, i32* %2864, align 4
  %2866 = icmp sle i32 %.8268, %2865
  br i1 %2866, label %2935, label %2867

; <label>:2867:                                   ; preds = %2862
  %2868 = add nsw i32 %.9257, 1
  br label %2869

; <label>:2869:                                   ; preds = %33, %2867
  %.13355 = phi i32* [ %81, %33 ], [ %.12354, %2867 ]
  %.13340 = phi i32* [ %79, %33 ], [ %.12339, %2867 ]
  %.13325 = phi i32* [ %77, %33 ], [ %.12324, %2867 ]
  %.13310 = phi i32 [ %75, %33 ], [ %.12309, %2867 ]
  %.13295 = phi i32 [ %73, %33 ], [ %.12294, %2867 ]
  %.9280 = phi i32 [ %71, %33 ], [ %.8279, %2867 ]
  %.9269 = phi i32 [ %69, %33 ], [ %.8268, %2867 ]
  %.10258 = phi i32 [ %67, %33 ], [ %2868, %2867 ]
  %.17245 = phi i32 [ %63, %33 ], [ %.16244, %2867 ]
  %.7226 = phi i32 [ %61, %33 ], [ %.6225, %2867 ]
  %.12217 = phi i32 [ %59, %33 ], [ %.11216, %2867 ]
  %.13203 = phi i32 [ %57, %33 ], [ %.12202, %2867 ]
  %.10188 = phi i32 [ %55, %33 ], [ %.9187, %2867 ]
  %.7176 = phi i32 [ %53, %33 ], [ %.6175, %2867 ]
  %.13167 = phi i32 [ %51, %33 ], [ %.12166, %2867 ]
  %.13152 = phi i32 [ %49, %33 ], [ %.12151, %2867 ]
  %.10137 = phi i32 [ %47, %33 ], [ %.9136, %2867 ]
  %.19125 = phi i32 [ %45, %33 ], [ %.18124, %2867 ]
  %.20104 = phi i32 [ %43, %33 ], [ %.19103, %2867 ]
  %.2182 = phi i32 [ %41, %33 ], [ %.2081, %2867 ]
  %.1759 = phi i32 [ %39, %33 ], [ %.1658, %2867 ]
  %.2538 = phi i32 [ %37, %33 ], [ %.2437, %2867 ]
  %.31 = phi i32 [ %35, %33 ], [ %.30, %2867 ]
  %2870 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 41, i32* %2870, align 8
  %2871 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2872 = load i32, i32* %2871, align 4
  %2873 = icmp sge i32 %2872, 1
  br i1 %2873, label %._crit_edge470, label %.lr.ph469.preheader

.lr.ph469.preheader:                              ; preds = %2869
  br label %.lr.ph469

._crit_edge470.loopexit:                          ; preds = %2932
  br label %._crit_edge470

._crit_edge470:                                   ; preds = %._crit_edge470.loopexit, %2869
  %2874 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2875 = load i32, i32* %2874, align 8
  %2876 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2877 = load i32, i32* %2876, align 4
  %2878 = sub nsw i32 %2877, 1
  %2879 = lshr i32 %2875, %2878
  %2880 = and i32 %2879, 1
  %2881 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2882 = load i32, i32* %2881, align 4
  %2883 = sub nsw i32 %2882, 1
  store i32 %2883, i32* %2881, align 4
  %2884 = shl i32 %.9269, 1
  %2885 = or i32 %2884, %2880
  br label %2860

.lr.ph469:                                        ; preds = %.lr.ph469.preheader, %2932
  call void @unroll_loop(i32 135)
  %2886 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2887 = load %struct.bz_stream*, %struct.bz_stream** %2886, align 8
  %2888 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2887, i32 0, i32 1
  %2889 = load i32, i32* %2888, align 8
  %2890 = icmp eq i32 %2889, 0
  br i1 %2890, label %.loopexit429, label %2891

; <label>:2891:                                   ; preds = %.lr.ph469
  %2892 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %2893 = load i32, i32* %2892, align 8
  %2894 = shl i32 %2893, 8
  %2895 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2896 = load %struct.bz_stream*, %struct.bz_stream** %2895, align 8
  %2897 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2896, i32 0, i32 0
  %2898 = load i8*, i8** %2897, align 8
  %2899 = load i8, i8* %2898, align 1
  %2900 = zext i8 %2899 to i32
  %2901 = or i32 %2894, %2900
  %2902 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %2901, i32* %2902, align 8
  %2903 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %2904 = load i32, i32* %2903, align 4
  %2905 = add nsw i32 %2904, 8
  store i32 %2905, i32* %2903, align 4
  %2906 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2907 = load %struct.bz_stream*, %struct.bz_stream** %2906, align 8
  %2908 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2907, i32 0, i32 0
  %2909 = load i8*, i8** %2908, align 8
  %2910 = getelementptr inbounds i8, i8* %2909, i32 1
  store i8* %2910, i8** %2908, align 8
  %2911 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2912 = load %struct.bz_stream*, %struct.bz_stream** %2911, align 8
  %2913 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2912, i32 0, i32 1
  %2914 = load i32, i32* %2913, align 8
  %2915 = add i32 %2914, -1
  store i32 %2915, i32* %2913, align 8
  %2916 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2917 = load %struct.bz_stream*, %struct.bz_stream** %2916, align 8
  %2918 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2917, i32 0, i32 2
  %2919 = load i32, i32* %2918, align 4
  %2920 = add i32 %2919, 1
  store i32 %2920, i32* %2918, align 4
  %2921 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2922 = load %struct.bz_stream*, %struct.bz_stream** %2921, align 8
  %2923 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2922, i32 0, i32 2
  %2924 = load i32, i32* %2923, align 4
  %2925 = icmp eq i32 %2924, 0
  br i1 %2925, label %2926, label %2932

; <label>:2926:                                   ; preds = %2891
  %2927 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %2928 = load %struct.bz_stream*, %struct.bz_stream** %2927, align 8
  %2929 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %2928, i32 0, i32 3
  %2930 = load i32, i32* %2929, align 8
  %2931 = add i32 %2930, 1
  store i32 %2931, i32* %2929, align 8
  br label %2932

; <label>:2932:                                   ; preds = %2926, %2891
  %2933 = load i32, i32* %2871, align 4
  %2934 = icmp sge i32 %2933, 1
  br i1 %2934, label %._crit_edge470.loopexit, label %.lr.ph469

; <label>:2935:                                   ; preds = %2862
  %2936 = sext i32 %.9257 to i64
  %2937 = getelementptr inbounds i32, i32* %.12339, i64 %2936
  %2938 = load i32, i32* %2937, align 4
  %2939 = sub nsw i32 %.8268, %2938
  %2940 = icmp slt i32 %2939, 0
  br i1 %2940, label %4045, label %2941

; <label>:2941:                                   ; preds = %2935
  %2942 = sext i32 %.9257 to i64
  %2943 = getelementptr inbounds i32, i32* %.12339, i64 %2942
  %2944 = load i32, i32* %2943, align 4
  %2945 = sub nsw i32 %.8268, %2944
  %2946 = icmp sge i32 %2945, 258
  br i1 %2946, label %4045, label %2947

; <label>:2947:                                   ; preds = %2941
  %2948 = sext i32 %.9257 to i64
  %2949 = getelementptr inbounds i32, i32* %.12339, i64 %2948
  %2950 = load i32, i32* %2949, align 4
  %2951 = sub nsw i32 %.8268, %2950
  %2952 = sext i32 %2951 to i64
  %2953 = getelementptr inbounds i32, i32* %.12354, i64 %2952
  %2954 = load i32, i32* %2953, align 4
  br label %2309

; <label>:2955:                                   ; preds = %2309
  %2956 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %2957 = load i32, i32* %2956, align 8
  %2958 = icmp slt i32 %2957, 0
  br i1 %2958, label %4045, label %2959

; <label>:2959:                                   ; preds = %2955
  %2960 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %2961 = load i32, i32* %2960, align 8
  %2962 = icmp sge i32 %2961, %.3193
  br i1 %2962, label %4045, label %2963

; <label>:2963:                                   ; preds = %2959
  %2964 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %2965 = getelementptr inbounds [257 x i32], [257 x i32]* %2964, i64 0, i64 0
  store i32 0, i32* %2965, align 8
  br label %2966

; <label>:2966:                                   ; preds = %2963, %2966
  %indvars.iv438 = phi i64 [ 1, %2963 ], [ %indvars.iv.next439, %2966 ]
  call void @unroll_loop(i32 136)
  %2967 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 16
  %2968 = sub nuw nsw i64 %indvars.iv438, 1
  %2969 = getelementptr inbounds [256 x i32], [256 x i32]* %2967, i64 0, i64 %2968
  %2970 = load i32, i32* %2969, align 4
  %2971 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %2972 = getelementptr inbounds [257 x i32], [257 x i32]* %2971, i64 0, i64 %indvars.iv438
  store i32 %2970, i32* %2972, align 4
  %indvars.iv.next439 = add nuw nsw i64 %indvars.iv438, 1
  %exitcond440 = icmp ne i64 %indvars.iv.next439, 257
  br i1 %exitcond440, label %2966, label %.preheader378

.preheader378:                                    ; preds = %2966
  %indvars.iv434.ph = phi i64 [ 1, %2966 ]
  br label %2973

; <label>:2973:                                   ; preds = %.preheader378, %2973
  %indvars.iv434 = phi i64 [ %indvars.iv.next435, %2973 ], [ %indvars.iv434.ph, %.preheader378 ]
  call void @unroll_loop(i32 137)
  %2974 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %2975 = sub nuw nsw i64 %indvars.iv434, 1
  %2976 = getelementptr inbounds [257 x i32], [257 x i32]* %2974, i64 0, i64 %2975
  %2977 = load i32, i32* %2976, align 4
  %2978 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %2979 = getelementptr inbounds [257 x i32], [257 x i32]* %2978, i64 0, i64 %indvars.iv434
  %2980 = load i32, i32* %2979, align 4
  %2981 = add nsw i32 %2980, %2977
  store i32 %2981, i32* %2979, align 4
  %indvars.iv.next435 = add nuw nsw i64 %indvars.iv434, 1
  %exitcond436 = icmp ne i64 %indvars.iv.next435, 257
  br i1 %exitcond436, label %2973, label %.preheader352

.preheader352:                                    ; preds = %2973
  %indvars.iv431.ph = phi i64 [ 0, %2973 ]
  br label %2982

; <label>:2982:                                   ; preds = %.preheader352, %2993
  %indvars.iv431 = phi i64 [ %indvars.iv.next432, %2993 ], [ %indvars.iv431.ph, %.preheader352 ]
  call void @unroll_loop(i32 138)
  %2983 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %2984 = getelementptr inbounds [257 x i32], [257 x i32]* %2983, i64 0, i64 %indvars.iv431
  %2985 = load i32, i32* %2984, align 4
  %2986 = icmp slt i32 %2985, 0
  %2987 = trunc i64 %indvars.iv431 to i32
  br i1 %2986, label %.loopexit353, label %2988

; <label>:2988:                                   ; preds = %2982
  %2989 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %2990 = getelementptr inbounds [257 x i32], [257 x i32]* %2989, i64 0, i64 %indvars.iv431
  %2991 = load i32, i32* %2990, align 4
  %2992 = icmp sgt i32 %2991, %.3193
  br i1 %2992, label %.loopexit353, label %2993

; <label>:2993:                                   ; preds = %2988
  %indvars.iv.next432 = add nuw nsw i64 %indvars.iv431, 1
  %2994 = icmp ule i64 %indvars.iv.next432, 256
  br i1 %2994, label %2982, label %2995

; <label>:2995:                                   ; preds = %2993
  %2996 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 3
  store i32 0, i32* %2996, align 8
  %2997 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 2
  store i8 0, i8* %2997, align 4
  %2998 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 25
  store i32 -1, i32* %2998, align 8
  %2999 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 2, i32* %2999, align 8
  %3000 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 12
  %3001 = load i32, i32* %3000, align 4
  %3002 = icmp sge i32 %3001, 2
  br i1 %3002, label %3003, label %3007

; <label>:3003:                                   ; preds = %2995
  %3004 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %3005 = getelementptr [7 x i8], [7 x i8]* @.str.1.161, i32 0, i32 0
  %3006 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3004, i8* %3005)
  br label %3007

; <label>:3007:                                   ; preds = %3003, %2995
  %3008 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 10
  %3009 = load i8, i8* %3008, align 4
  %3010 = icmp ne i8 %3009, 0
  br i1 %3010, label %.preheader, label %3289

.preheader:                                       ; preds = %3007
  br label %3011

; <label>:3011:                                   ; preds = %.preheader, %3011
  %indvars.iv419 = phi i64 [ %indvars.iv.next420, %3011 ], [ 0, %.preheader ]
  call void @unroll_loop(i32 139)
  %3012 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %3013 = getelementptr inbounds [257 x i32], [257 x i32]* %3012, i64 0, i64 %indvars.iv419
  %3014 = load i32, i32* %3013, align 4
  %3015 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 19
  %3016 = getelementptr inbounds [257 x i32], [257 x i32]* %3015, i64 0, i64 %indvars.iv419
  store i32 %3014, i32* %3016, align 4
  %indvars.iv.next420 = add nuw nsw i64 %indvars.iv419, 1
  %exitcond421 = icmp ne i64 %indvars.iv.next420, 257
  br i1 %exitcond421, label %3011, label %3017

; <label>:3017:                                   ; preds = %3011
  %3018 = icmp slt i32 0, %.3193
  br i1 %3018, label %.lr.ph416.preheader, label %._crit_edge417

.lr.ph416.preheader:                              ; preds = %3017
  %3019 = zext i32 %.3193 to i64
  br label %.lr.ph416

.lr.ph416:                                        ; preds = %.lr.ph416.preheader, %3076
  %indvars.iv = phi i64 [ %indvars.iv.next, %3076 ], [ 0, %.lr.ph416.preheader ]
  call void @unroll_loop(i32 140)
  %3020 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %3021 = load i16*, i16** %3020, align 8
  %3022 = getelementptr inbounds i16, i16* %3021, i64 %indvars.iv
  %3023 = load i16, i16* %3022, align 2
  %3024 = trunc i16 %3023 to i8
  %3025 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 19
  %3026 = zext i8 %3024 to i64
  %3027 = getelementptr inbounds [257 x i32], [257 x i32]* %3025, i64 0, i64 %3026
  %3028 = load i32, i32* %3027, align 4
  %3029 = and i32 %3028, 65535
  %3030 = trunc i32 %3029 to i16
  %3031 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %3032 = load i16*, i16** %3031, align 8
  %3033 = getelementptr inbounds i16, i16* %3032, i64 %indvars.iv
  store i16 %3030, i16* %3033, align 2
  %3034 = trunc i64 %indvars.iv to i32
  %3035 = and i32 %3034, 1
  %3036 = icmp eq i32 %3035, 0
  %3037 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3038 = load i8*, i8** %3037, align 8
  %3039 = trunc i64 %indvars.iv to i32
  %3040 = ashr i32 %3039, 1
  %3041 = sext i32 %3040 to i64
  %3042 = getelementptr inbounds i8, i8* %3038, i64 %3041
  %3043 = load i8, i8* %3042, align 1
  %3044 = zext i8 %3043 to i32
  br i1 %3036, label %3045, label %3060

; <label>:3045:                                   ; preds = %.lr.ph416
  %3046 = and i32 %3044, 240
  %3047 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 19
  %3048 = zext i8 %3024 to i64
  %3049 = getelementptr inbounds [257 x i32], [257 x i32]* %3047, i64 0, i64 %3048
  %3050 = load i32, i32* %3049, align 4
  %3051 = ashr i32 %3050, 16
  %3052 = or i32 %3046, %3051
  %3053 = trunc i32 %3052 to i8
  %3054 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3055 = load i8*, i8** %3054, align 8
  %3056 = trunc i64 %indvars.iv to i32
  %3057 = ashr i32 %3056, 1
  %3058 = sext i32 %3057 to i64
  %3059 = getelementptr inbounds i8, i8* %3055, i64 %3058
  store i8 %3053, i8* %3059, align 1
  br label %3076

; <label>:3060:                                   ; preds = %.lr.ph416
  %3061 = and i32 %3044, 15
  %3062 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 19
  %3063 = zext i8 %3024 to i64
  %3064 = getelementptr inbounds [257 x i32], [257 x i32]* %3062, i64 0, i64 %3063
  %3065 = load i32, i32* %3064, align 4
  %3066 = ashr i32 %3065, 16
  %3067 = shl i32 %3066, 4
  %3068 = or i32 %3061, %3067
  %3069 = trunc i32 %3068 to i8
  %3070 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3071 = load i8*, i8** %3070, align 8
  %3072 = trunc i64 %indvars.iv to i32
  %3073 = ashr i32 %3072, 1
  %3074 = sext i32 %3073 to i64
  %3075 = getelementptr inbounds i8, i8* %3071, i64 %3074
  store i8 %3069, i8* %3075, align 1
  br label %3076

; <label>:3076:                                   ; preds = %3060, %3045
  %3077 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 19
  %3078 = zext i8 %3024 to i64
  %3079 = getelementptr inbounds [257 x i32], [257 x i32]* %3077, i64 0, i64 %3078
  %3080 = load i32, i32* %3079, align 4
  %3081 = add nsw i32 %3080, 1
  store i32 %3081, i32* %3079, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1033 = icmp ne i64 %indvars.iv.next, %3019
  br i1 %exitcond1033, label %.lr.ph416, label %._crit_edge417.loopexit

._crit_edge417.loopexit:                          ; preds = %3076
  br label %._crit_edge417

._crit_edge417:                                   ; preds = %._crit_edge417.loopexit, %3017
  %3082 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %3083 = load i32, i32* %3082, align 8
  %3084 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %3085 = load i16*, i16** %3084, align 8
  %3086 = sext i32 %3083 to i64
  %3087 = getelementptr inbounds i16, i16* %3085, i64 %3086
  %3088 = load i16, i16* %3087, align 2
  %3089 = zext i16 %3088 to i32
  %3090 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3091 = load i8*, i8** %3090, align 8
  %3092 = ashr i32 %3083, 1
  %3093 = sext i32 %3092 to i64
  %3094 = getelementptr inbounds i8, i8* %3091, i64 %3093
  %3095 = load i8, i8* %3094, align 1
  %3096 = zext i8 %3095 to i32
  %3097 = shl i32 %3083, 2
  %3098 = and i32 %3097, 4
  %3099 = lshr i32 %3096, %3098
  %3100 = and i32 %3099, 15
  %3101 = shl i32 %3100, 16
  %3102 = or i32 %3089, %3101
  %3103 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  br label %3104

; <label>:3104:                                   ; preds = %3160, %._crit_edge417
  %.2639 = phi i32 [ %3102, %._crit_edge417 ], [ %3123, %3160 ]
  %.37 = phi i32 [ %3083, %._crit_edge417 ], [ %.2639, %3160 ]
  call void @unroll_loop(i32 141)
  %3105 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %3106 = load i16*, i16** %3105, align 8
  %3107 = sext i32 %.2639 to i64
  %3108 = getelementptr inbounds i16, i16* %3106, i64 %3107
  %3109 = load i16, i16* %3108, align 2
  %3110 = zext i16 %3109 to i32
  %3111 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3112 = load i8*, i8** %3111, align 8
  %3113 = ashr i32 %.2639, 1
  %3114 = sext i32 %3113 to i64
  %3115 = getelementptr inbounds i8, i8* %3112, i64 %3114
  %3116 = load i8, i8* %3115, align 1
  %3117 = zext i8 %3116 to i32
  %3118 = shl i32 %.2639, 2
  %3119 = and i32 %3118, 4
  %3120 = lshr i32 %3117, %3119
  %3121 = and i32 %3120, 15
  %3122 = shl i32 %3121, 16
  %3123 = or i32 %3110, %3122
  %3124 = and i32 %.37, 65535
  %3125 = trunc i32 %3124 to i16
  %3126 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %3127 = load i16*, i16** %3126, align 8
  %3128 = sext i32 %.2639 to i64
  %3129 = getelementptr inbounds i16, i16* %3127, i64 %3128
  store i16 %3125, i16* %3129, align 2
  %3130 = and i32 %.2639, 1
  %3131 = icmp eq i32 %3130, 0
  %3132 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3133 = load i8*, i8** %3132, align 8
  %3134 = ashr i32 %.2639, 1
  %3135 = sext i32 %3134 to i64
  %3136 = getelementptr inbounds i8, i8* %3133, i64 %3135
  %3137 = load i8, i8* %3136, align 1
  %3138 = zext i8 %3137 to i32
  br i1 %3131, label %3139, label %3149

; <label>:3139:                                   ; preds = %3104
  %3140 = and i32 %3138, 240
  %3141 = ashr i32 %.37, 16
  %3142 = or i32 %3140, %3141
  %3143 = trunc i32 %3142 to i8
  %3144 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3145 = load i8*, i8** %3144, align 8
  %3146 = ashr i32 %.2639, 1
  %3147 = sext i32 %3146 to i64
  %3148 = getelementptr inbounds i8, i8* %3145, i64 %3147
  store i8 %3143, i8* %3148, align 1
  br label %3160

; <label>:3149:                                   ; preds = %3104
  %3150 = and i32 %3138, 15
  %3151 = ashr i32 %.37, 16
  %3152 = shl i32 %3151, 4
  %3153 = or i32 %3150, %3152
  %3154 = trunc i32 %3153 to i8
  %3155 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3156 = load i8*, i8** %3155, align 8
  %3157 = ashr i32 %.2639, 1
  %3158 = sext i32 %3157 to i64
  %3159 = getelementptr inbounds i8, i8* %3156, i64 %3158
  store i8 %3154, i8* %3159, align 1
  br label %3160

; <label>:3160:                                   ; preds = %3139, %3149
  %3161 = load i32, i32* %3103, align 8
  %3162 = icmp ne i32 %.2639, %3161
  br i1 %3162, label %3104, label %3163

; <label>:3163:                                   ; preds = %3160
  %.2639.lcssa = phi i32 [ %.2639, %3160 ]
  %.lcssa = phi i32 [ %3123, %3160 ]
  %3164 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %3165 = load i32, i32* %3164, align 8
  %3166 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %3165, i32* %3166, align 4
  %3167 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  store i32 0, i32* %3167, align 4
  %3168 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 4
  %3169 = load i8, i8* %3168, align 4
  %3170 = icmp ne i8 %3169, 0
  br i1 %3170, label %3171, label %3246

; <label>:3171:                                   ; preds = %3163
  %3172 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 0, i32* %3172, align 8
  %3173 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %3173, align 4
  %3174 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3175 = load i32, i32* %3174, align 4
  %3176 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %3177 = load i32, i32* %3176, align 8
  %3178 = mul i32 100000, %3177
  %3179 = icmp uge i32 %3175, %3178
  br i1 %3179, label %4070, label %3180

; <label>:3180:                                   ; preds = %3171
  %3181 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3182 = load i32, i32* %3181, align 4
  %3183 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %3184 = getelementptr inbounds [257 x i32], [257 x i32]* %3183, i32 0, i32 0
  %3185 = call i32 @BZ2_indexIntoF(i32 %3182, i32* %3184)
  %3186 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %3185, i32* %3186, align 8
  %3187 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %3188 = load i16*, i16** %3187, align 8
  %3189 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3190 = load i32, i32* %3189, align 4
  %3191 = zext i32 %3190 to i64
  %3192 = getelementptr inbounds i16, i16* %3188, i64 %3191
  %3193 = load i16, i16* %3192, align 2
  %3194 = zext i16 %3193 to i32
  %3195 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3196 = load i8*, i8** %3195, align 8
  %3197 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3198 = load i32, i32* %3197, align 4
  %3199 = lshr i32 %3198, 1
  %3200 = zext i32 %3199 to i64
  %3201 = getelementptr inbounds i8, i8* %3196, i64 %3200
  %3202 = load i8, i8* %3201, align 1
  %3203 = zext i8 %3202 to i32
  %3204 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3205 = load i32, i32* %3204, align 4
  %3206 = shl i32 %3205, 2
  %3207 = and i32 %3206, 4
  %3208 = lshr i32 %3203, %3207
  %3209 = and i32 %3208, 15
  %3210 = shl i32 %3209, 16
  %3211 = or i32 %3194, %3210
  %3212 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %3211, i32* %3212, align 4
  %3213 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %3214 = load i32, i32* %3213, align 4
  %3215 = add nsw i32 %3214, 1
  store i32 %3215, i32* %3213, align 4
  %3216 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %3217 = load i32, i32* %3216, align 8
  %3218 = icmp eq i32 %3217, 0
  br i1 %3218, label %3219, label %3234

; <label>:3219:                                   ; preds = %3180
  %3220 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %3221 = load i32, i32* %3220, align 4
  %3222 = sext i32 %3221 to i64
  %3223 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %3222
  %3224 = load i32, i32* %3223, align 4
  %3225 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %3224, i32* %3225, align 8
  %3226 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %3227 = load i32, i32* %3226, align 4
  %3228 = add nsw i32 %3227, 1
  store i32 %3228, i32* %3226, align 4
  %3229 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %3230 = load i32, i32* %3229, align 4
  %3231 = icmp eq i32 %3230, 512
  br i1 %3231, label %3232, label %3234

; <label>:3232:                                   ; preds = %3219
  %3233 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %3233, align 4
  br label %3234

; <label>:3234:                                   ; preds = %3219, %3232, %3180
  %3235 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %3236 = load i32, i32* %3235, align 8
  %3237 = add nsw i32 %3236, -1
  store i32 %3237, i32* %3235, align 8
  %3238 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %3239 = load i32, i32* %3238, align 8
  %3240 = icmp eq i32 %3239, 1
  %3241 = zext i1 %3240 to i64
  %3242 = select i1 %3240, i32 1, i32 0
  %3243 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %3244 = load i32, i32* %3243, align 8
  %3245 = xor i32 %3244, %3242
  store i32 %3245, i32* %3243, align 8
  br label %4045

; <label>:3246:                                   ; preds = %3163
  %3247 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3248 = load i32, i32* %3247, align 4
  %3249 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %3250 = load i32, i32* %3249, align 8
  %3251 = mul i32 100000, %3250
  %3252 = icmp uge i32 %3248, %3251
  br i1 %3252, label %4070, label %3253

; <label>:3253:                                   ; preds = %3246
  %3254 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3255 = load i32, i32* %3254, align 4
  %3256 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %3257 = getelementptr inbounds [257 x i32], [257 x i32]* %3256, i32 0, i32 0
  %3258 = call i32 @BZ2_indexIntoF(i32 %3255, i32* %3257)
  %3259 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %3258, i32* %3259, align 8
  %3260 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 21
  %3261 = load i16*, i16** %3260, align 8
  %3262 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3263 = load i32, i32* %3262, align 4
  %3264 = zext i32 %3263 to i64
  %3265 = getelementptr inbounds i16, i16* %3261, i64 %3264
  %3266 = load i16, i16* %3265, align 2
  %3267 = zext i16 %3266 to i32
  %3268 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 22
  %3269 = load i8*, i8** %3268, align 8
  %3270 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3271 = load i32, i32* %3270, align 4
  %3272 = lshr i32 %3271, 1
  %3273 = zext i32 %3272 to i64
  %3274 = getelementptr inbounds i8, i8* %3269, i64 %3273
  %3275 = load i8, i8* %3274, align 1
  %3276 = zext i8 %3275 to i32
  %3277 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3278 = load i32, i32* %3277, align 4
  %3279 = shl i32 %3278, 2
  %3280 = and i32 %3279, 4
  %3281 = lshr i32 %3276, %3280
  %3282 = and i32 %3281, 15
  %3283 = shl i32 %3282, 16
  %3284 = or i32 %3267, %3283
  %3285 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %3284, i32* %3285, align 4
  %3286 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %3287 = load i32, i32* %3286, align 4
  %3288 = add nsw i32 %3287, 1
  store i32 %3288, i32* %3286, align 4
  br label %4045

; <label>:3289:                                   ; preds = %3007
  %3290 = icmp slt i32 0, %.3193
  br i1 %3290, label %.lr.ph424, label %3320

.lr.ph424:                                        ; preds = %3289
  %3291 = add i32 %.3193, -1
  %3292 = zext i32 %.3193 to i64
  br label %3293

; <label>:3293:                                   ; preds = %.lr.ph424, %3293
  %indvars.iv426 = phi i64 [ 0, %.lr.ph424 ], [ %indvars.iv.next427, %3293 ]
  call void @unroll_loop(i32 142)
  %3294 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %3295 = load i32*, i32** %3294, align 8
  %3296 = getelementptr inbounds i32, i32* %3295, i64 %indvars.iv426
  %3297 = load i32, i32* %3296, align 4
  %3298 = and i32 %3297, 255
  %3299 = trunc i32 %3298 to i8
  %3300 = trunc i64 %indvars.iv426 to i32
  %3301 = shl i32 %3300, 8
  %3302 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %3303 = load i32*, i32** %3302, align 8
  %3304 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %3305 = zext i8 %3299 to i64
  %3306 = getelementptr inbounds [257 x i32], [257 x i32]* %3304, i64 0, i64 %3305
  %3307 = load i32, i32* %3306, align 4
  %3308 = sext i32 %3307 to i64
  %3309 = getelementptr inbounds i32, i32* %3303, i64 %3308
  %3310 = load i32, i32* %3309, align 4
  %3311 = or i32 %3310, %3301
  store i32 %3311, i32* %3309, align 4
  %3312 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 18
  %3313 = zext i8 %3299 to i64
  %3314 = getelementptr inbounds [257 x i32], [257 x i32]* %3312, i64 0, i64 %3313
  %3315 = load i32, i32* %3314, align 4
  %3316 = add nsw i32 %3315, 1
  store i32 %3316, i32* %3314, align 4
  %indvars.iv.next427 = add nuw nsw i64 %indvars.iv426, 1
  %exitcond = icmp ne i64 %indvars.iv.next427, %3292
  br i1 %exitcond, label %3293, label %._crit_edge425

._crit_edge425:                                   ; preds = %3293
  %3317 = zext i32 %3291 to i64
  %3318 = add i64 %3317, 1
  %3319 = trunc i64 %3318 to i32
  br label %3320

; <label>:3320:                                   ; preds = %._crit_edge425, %3289
  %.38.lcssa = phi i32 [ %3319, %._crit_edge425 ], [ 0, %3289 ]
  %3321 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %3322 = load i32*, i32** %3321, align 8
  %3323 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 13
  %3324 = load i32, i32* %3323, align 8
  %3325 = sext i32 %3324 to i64
  %3326 = getelementptr inbounds i32, i32* %3322, i64 %3325
  %3327 = load i32, i32* %3326, align 4
  %3328 = lshr i32 %3327, 8
  %3329 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %3328, i32* %3329, align 4
  %3330 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  store i32 0, i32* %3330, align 4
  %3331 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 4
  %3332 = load i8, i8* %3331, align 4
  %3333 = icmp ne i8 %3332, 0
  br i1 %3333, label %3334, label %3394

; <label>:3334:                                   ; preds = %3320
  %3335 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 0, i32* %3335, align 8
  %3336 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %3336, align 4
  %3337 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3338 = load i32, i32* %3337, align 4
  %3339 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %3340 = load i32, i32* %3339, align 8
  %3341 = mul i32 100000, %3340
  %3342 = icmp uge i32 %3338, %3341
  br i1 %3342, label %4070, label %3343

; <label>:3343:                                   ; preds = %3334
  %3344 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %3345 = load i32*, i32** %3344, align 8
  %3346 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3347 = load i32, i32* %3346, align 4
  %3348 = zext i32 %3347 to i64
  %3349 = getelementptr inbounds i32, i32* %3345, i64 %3348
  %3350 = load i32, i32* %3349, align 4
  %3351 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %3350, i32* %3351, align 4
  %3352 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3353 = load i32, i32* %3352, align 4
  %3354 = and i32 %3353, 255
  %3355 = trunc i32 %3354 to i8
  %3356 = zext i8 %3355 to i32
  %3357 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %3356, i32* %3357, align 8
  %3358 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3359 = load i32, i32* %3358, align 4
  %3360 = lshr i32 %3359, 8
  store i32 %3360, i32* %3358, align 4
  %3361 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %3362 = load i32, i32* %3361, align 4
  %3363 = add nsw i32 %3362, 1
  store i32 %3363, i32* %3361, align 4
  %3364 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %3365 = load i32, i32* %3364, align 8
  %3366 = icmp eq i32 %3365, 0
  br i1 %3366, label %3367, label %3382

; <label>:3367:                                   ; preds = %3343
  %3368 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %3369 = load i32, i32* %3368, align 4
  %3370 = sext i32 %3369 to i64
  %3371 = getelementptr inbounds [512 x i32], [512 x i32]* @BZ2_rNums, i64 0, i64 %3370
  %3372 = load i32, i32* %3371, align 4
  %3373 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  store i32 %3372, i32* %3373, align 8
  %3374 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %3375 = load i32, i32* %3374, align 4
  %3376 = add nsw i32 %3375, 1
  store i32 %3376, i32* %3374, align 4
  %3377 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  %3378 = load i32, i32* %3377, align 4
  %3379 = icmp eq i32 %3378, 512
  br i1 %3379, label %3380, label %3382

; <label>:3380:                                   ; preds = %3367
  %3381 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 6
  store i32 0, i32* %3381, align 4
  br label %3382

; <label>:3382:                                   ; preds = %3367, %3380, %3343
  %3383 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %3384 = load i32, i32* %3383, align 8
  %3385 = add nsw i32 %3384, -1
  store i32 %3385, i32* %3383, align 8
  %3386 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 5
  %3387 = load i32, i32* %3386, align 8
  %3388 = icmp eq i32 %3387, 1
  %3389 = zext i1 %3388 to i64
  %3390 = select i1 %3388, i32 1, i32 0
  %3391 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  %3392 = load i32, i32* %3391, align 8
  %3393 = xor i32 %3392, %3390
  store i32 %3393, i32* %3391, align 8
  br label %4045

; <label>:3394:                                   ; preds = %3320
  %3395 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3396 = load i32, i32* %3395, align 4
  %3397 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 9
  %3398 = load i32, i32* %3397, align 8
  %3399 = mul i32 100000, %3398
  %3400 = icmp uge i32 %3396, %3399
  br i1 %3400, label %4070, label %3401

; <label>:3401:                                   ; preds = %3394
  %3402 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 20
  %3403 = load i32*, i32** %3402, align 8
  %3404 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3405 = load i32, i32* %3404, align 4
  %3406 = zext i32 %3405 to i64
  %3407 = getelementptr inbounds i32, i32* %3403, i64 %3406
  %3408 = load i32, i32* %3407, align 4
  %3409 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  store i32 %3408, i32* %3409, align 4
  %3410 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3411 = load i32, i32* %3410, align 4
  %3412 = and i32 %3411, 255
  %3413 = trunc i32 %3412 to i8
  %3414 = zext i8 %3413 to i32
  %3415 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 15
  store i32 %3414, i32* %3415, align 8
  %3416 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 14
  %3417 = load i32, i32* %3416, align 4
  %3418 = lshr i32 %3417, 8
  store i32 %3418, i32* %3416, align 4
  %3419 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 17
  %3420 = load i32, i32* %3419, align 4
  %3421 = add nsw i32 %3420, 1
  store i32 %3421, i32* %3419, align 4
  br label %4045

; <label>:3422:                                   ; preds = %._crit_edge616, %33
  %3423 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 42, i32* %3423, align 8
  %3424 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3425 = load i32, i32* %3424, align 4
  %3426 = icmp sge i32 %3425, 8
  br i1 %3426, label %._crit_edge395, label %.lr.ph394.preheader

.lr.ph394.preheader:                              ; preds = %3422
  br label %.lr.ph394

._crit_edge395.loopexit:                          ; preds = %3486
  br label %._crit_edge395

._crit_edge395:                                   ; preds = %._crit_edge395.loopexit, %3422
  %3427 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3428 = load i32, i32* %3427, align 8
  %3429 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3430 = load i32, i32* %3429, align 4
  %3431 = sub nsw i32 %3430, 8
  %3432 = lshr i32 %3428, %3431
  %3433 = and i32 %3432, 255
  %3434 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3435 = load i32, i32* %3434, align 4
  %3436 = sub nsw i32 %3435, 8
  store i32 %3436, i32* %3434, align 4
  %3437 = trunc i32 %3433 to i8
  %3438 = zext i8 %3437 to i32
  %3439 = icmp ne i32 %3438, 114
  br i1 %3439, label %4045, label %3489

.lr.ph394:                                        ; preds = %.lr.ph394.preheader, %3486
  call void @unroll_loop(i32 143)
  %3440 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3441 = load %struct.bz_stream*, %struct.bz_stream** %3440, align 8
  %3442 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3441, i32 0, i32 1
  %3443 = load i32, i32* %3442, align 8
  %3444 = icmp eq i32 %3443, 0
  br i1 %3444, label %.loopexit177, label %3445

; <label>:3445:                                   ; preds = %.lr.ph394
  %3446 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3447 = load i32, i32* %3446, align 8
  %3448 = shl i32 %3447, 8
  %3449 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3450 = load %struct.bz_stream*, %struct.bz_stream** %3449, align 8
  %3451 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3450, i32 0, i32 0
  %3452 = load i8*, i8** %3451, align 8
  %3453 = load i8, i8* %3452, align 1
  %3454 = zext i8 %3453 to i32
  %3455 = or i32 %3448, %3454
  %3456 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3455, i32* %3456, align 8
  %3457 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3458 = load i32, i32* %3457, align 4
  %3459 = add nsw i32 %3458, 8
  store i32 %3459, i32* %3457, align 4
  %3460 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3461 = load %struct.bz_stream*, %struct.bz_stream** %3460, align 8
  %3462 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3461, i32 0, i32 0
  %3463 = load i8*, i8** %3462, align 8
  %3464 = getelementptr inbounds i8, i8* %3463, i32 1
  store i8* %3464, i8** %3462, align 8
  %3465 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3466 = load %struct.bz_stream*, %struct.bz_stream** %3465, align 8
  %3467 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3466, i32 0, i32 1
  %3468 = load i32, i32* %3467, align 8
  %3469 = add i32 %3468, -1
  store i32 %3469, i32* %3467, align 8
  %3470 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3471 = load %struct.bz_stream*, %struct.bz_stream** %3470, align 8
  %3472 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3471, i32 0, i32 2
  %3473 = load i32, i32* %3472, align 4
  %3474 = add i32 %3473, 1
  store i32 %3474, i32* %3472, align 4
  %3475 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3476 = load %struct.bz_stream*, %struct.bz_stream** %3475, align 8
  %3477 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3476, i32 0, i32 2
  %3478 = load i32, i32* %3477, align 4
  %3479 = icmp eq i32 %3478, 0
  br i1 %3479, label %3480, label %3486

; <label>:3480:                                   ; preds = %3445
  %3481 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3482 = load %struct.bz_stream*, %struct.bz_stream** %3481, align 8
  %3483 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3482, i32 0, i32 3
  %3484 = load i32, i32* %3483, align 8
  %3485 = add i32 %3484, 1
  store i32 %3485, i32* %3483, align 8
  br label %3486

; <label>:3486:                                   ; preds = %3480, %3445
  %3487 = load i32, i32* %3424, align 4
  %3488 = icmp sge i32 %3487, 8
  br i1 %3488, label %._crit_edge395.loopexit, label %.lr.ph394

; <label>:3489:                                   ; preds = %._crit_edge395, %33
  %3490 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 43, i32* %3490, align 8
  %3491 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3492 = load i32, i32* %3491, align 4
  %3493 = icmp sge i32 %3492, 8
  br i1 %3493, label %._crit_edge392, label %.lr.ph391.preheader

.lr.ph391.preheader:                              ; preds = %3489
  br label %.lr.ph391

._crit_edge392.loopexit:                          ; preds = %3553
  br label %._crit_edge392

._crit_edge392:                                   ; preds = %._crit_edge392.loopexit, %3489
  %3494 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3495 = load i32, i32* %3494, align 8
  %3496 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3497 = load i32, i32* %3496, align 4
  %3498 = sub nsw i32 %3497, 8
  %3499 = lshr i32 %3495, %3498
  %3500 = and i32 %3499, 255
  %3501 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3502 = load i32, i32* %3501, align 4
  %3503 = sub nsw i32 %3502, 8
  store i32 %3503, i32* %3501, align 4
  %3504 = trunc i32 %3500 to i8
  %3505 = zext i8 %3504 to i32
  %3506 = icmp ne i32 %3505, 69
  br i1 %3506, label %4045, label %3556

.lr.ph391:                                        ; preds = %.lr.ph391.preheader, %3553
  call void @unroll_loop(i32 144)
  %3507 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3508 = load %struct.bz_stream*, %struct.bz_stream** %3507, align 8
  %3509 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3508, i32 0, i32 1
  %3510 = load i32, i32* %3509, align 8
  %3511 = icmp eq i32 %3510, 0
  br i1 %3511, label %.loopexit152, label %3512

; <label>:3512:                                   ; preds = %.lr.ph391
  %3513 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3514 = load i32, i32* %3513, align 8
  %3515 = shl i32 %3514, 8
  %3516 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3517 = load %struct.bz_stream*, %struct.bz_stream** %3516, align 8
  %3518 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3517, i32 0, i32 0
  %3519 = load i8*, i8** %3518, align 8
  %3520 = load i8, i8* %3519, align 1
  %3521 = zext i8 %3520 to i32
  %3522 = or i32 %3515, %3521
  %3523 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3522, i32* %3523, align 8
  %3524 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3525 = load i32, i32* %3524, align 4
  %3526 = add nsw i32 %3525, 8
  store i32 %3526, i32* %3524, align 4
  %3527 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3528 = load %struct.bz_stream*, %struct.bz_stream** %3527, align 8
  %3529 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3528, i32 0, i32 0
  %3530 = load i8*, i8** %3529, align 8
  %3531 = getelementptr inbounds i8, i8* %3530, i32 1
  store i8* %3531, i8** %3529, align 8
  %3532 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3533 = load %struct.bz_stream*, %struct.bz_stream** %3532, align 8
  %3534 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3533, i32 0, i32 1
  %3535 = load i32, i32* %3534, align 8
  %3536 = add i32 %3535, -1
  store i32 %3536, i32* %3534, align 8
  %3537 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3538 = load %struct.bz_stream*, %struct.bz_stream** %3537, align 8
  %3539 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3538, i32 0, i32 2
  %3540 = load i32, i32* %3539, align 4
  %3541 = add i32 %3540, 1
  store i32 %3541, i32* %3539, align 4
  %3542 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3543 = load %struct.bz_stream*, %struct.bz_stream** %3542, align 8
  %3544 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3543, i32 0, i32 2
  %3545 = load i32, i32* %3544, align 4
  %3546 = icmp eq i32 %3545, 0
  br i1 %3546, label %3547, label %3553

; <label>:3547:                                   ; preds = %3512
  %3548 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3549 = load %struct.bz_stream*, %struct.bz_stream** %3548, align 8
  %3550 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3549, i32 0, i32 3
  %3551 = load i32, i32* %3550, align 8
  %3552 = add i32 %3551, 1
  store i32 %3552, i32* %3550, align 8
  br label %3553

; <label>:3553:                                   ; preds = %3547, %3512
  %3554 = load i32, i32* %3491, align 4
  %3555 = icmp sge i32 %3554, 8
  br i1 %3555, label %._crit_edge392.loopexit, label %.lr.ph391

; <label>:3556:                                   ; preds = %._crit_edge392, %33
  %3557 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 44, i32* %3557, align 8
  %3558 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3559 = load i32, i32* %3558, align 4
  %3560 = icmp sge i32 %3559, 8
  br i1 %3560, label %._crit_edge389, label %.lr.ph388.preheader

.lr.ph388.preheader:                              ; preds = %3556
  br label %.lr.ph388

._crit_edge389.loopexit:                          ; preds = %3620
  br label %._crit_edge389

._crit_edge389:                                   ; preds = %._crit_edge389.loopexit, %3556
  %3561 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3562 = load i32, i32* %3561, align 8
  %3563 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3564 = load i32, i32* %3563, align 4
  %3565 = sub nsw i32 %3564, 8
  %3566 = lshr i32 %3562, %3565
  %3567 = and i32 %3566, 255
  %3568 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3569 = load i32, i32* %3568, align 4
  %3570 = sub nsw i32 %3569, 8
  store i32 %3570, i32* %3568, align 4
  %3571 = trunc i32 %3567 to i8
  %3572 = zext i8 %3571 to i32
  %3573 = icmp ne i32 %3572, 56
  br i1 %3573, label %4045, label %3623

.lr.ph388:                                        ; preds = %.lr.ph388.preheader, %3620
  call void @unroll_loop(i32 145)
  %3574 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3575 = load %struct.bz_stream*, %struct.bz_stream** %3574, align 8
  %3576 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3575, i32 0, i32 1
  %3577 = load i32, i32* %3576, align 8
  %3578 = icmp eq i32 %3577, 0
  br i1 %3578, label %.loopexit127, label %3579

; <label>:3579:                                   ; preds = %.lr.ph388
  %3580 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3581 = load i32, i32* %3580, align 8
  %3582 = shl i32 %3581, 8
  %3583 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3584 = load %struct.bz_stream*, %struct.bz_stream** %3583, align 8
  %3585 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3584, i32 0, i32 0
  %3586 = load i8*, i8** %3585, align 8
  %3587 = load i8, i8* %3586, align 1
  %3588 = zext i8 %3587 to i32
  %3589 = or i32 %3582, %3588
  %3590 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3589, i32* %3590, align 8
  %3591 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3592 = load i32, i32* %3591, align 4
  %3593 = add nsw i32 %3592, 8
  store i32 %3593, i32* %3591, align 4
  %3594 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3595 = load %struct.bz_stream*, %struct.bz_stream** %3594, align 8
  %3596 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3595, i32 0, i32 0
  %3597 = load i8*, i8** %3596, align 8
  %3598 = getelementptr inbounds i8, i8* %3597, i32 1
  store i8* %3598, i8** %3596, align 8
  %3599 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3600 = load %struct.bz_stream*, %struct.bz_stream** %3599, align 8
  %3601 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3600, i32 0, i32 1
  %3602 = load i32, i32* %3601, align 8
  %3603 = add i32 %3602, -1
  store i32 %3603, i32* %3601, align 8
  %3604 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3605 = load %struct.bz_stream*, %struct.bz_stream** %3604, align 8
  %3606 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3605, i32 0, i32 2
  %3607 = load i32, i32* %3606, align 4
  %3608 = add i32 %3607, 1
  store i32 %3608, i32* %3606, align 4
  %3609 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3610 = load %struct.bz_stream*, %struct.bz_stream** %3609, align 8
  %3611 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3610, i32 0, i32 2
  %3612 = load i32, i32* %3611, align 4
  %3613 = icmp eq i32 %3612, 0
  br i1 %3613, label %3614, label %3620

; <label>:3614:                                   ; preds = %3579
  %3615 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3616 = load %struct.bz_stream*, %struct.bz_stream** %3615, align 8
  %3617 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3616, i32 0, i32 3
  %3618 = load i32, i32* %3617, align 8
  %3619 = add i32 %3618, 1
  store i32 %3619, i32* %3617, align 8
  br label %3620

; <label>:3620:                                   ; preds = %3614, %3579
  %3621 = load i32, i32* %3558, align 4
  %3622 = icmp sge i32 %3621, 8
  br i1 %3622, label %._crit_edge389.loopexit, label %.lr.ph388

; <label>:3623:                                   ; preds = %._crit_edge389, %33
  %3624 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 45, i32* %3624, align 8
  %3625 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3626 = load i32, i32* %3625, align 4
  %3627 = icmp sge i32 %3626, 8
  br i1 %3627, label %._crit_edge386, label %.lr.ph385.preheader

.lr.ph385.preheader:                              ; preds = %3623
  br label %.lr.ph385

._crit_edge386.loopexit:                          ; preds = %3687
  br label %._crit_edge386

._crit_edge386:                                   ; preds = %._crit_edge386.loopexit, %3623
  %3628 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3629 = load i32, i32* %3628, align 8
  %3630 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3631 = load i32, i32* %3630, align 4
  %3632 = sub nsw i32 %3631, 8
  %3633 = lshr i32 %3629, %3632
  %3634 = and i32 %3633, 255
  %3635 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3636 = load i32, i32* %3635, align 4
  %3637 = sub nsw i32 %3636, 8
  store i32 %3637, i32* %3635, align 4
  %3638 = trunc i32 %3634 to i8
  %3639 = zext i8 %3638 to i32
  %3640 = icmp ne i32 %3639, 80
  br i1 %3640, label %4045, label %3690

.lr.ph385:                                        ; preds = %.lr.ph385.preheader, %3687
  call void @unroll_loop(i32 146)
  %3641 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3642 = load %struct.bz_stream*, %struct.bz_stream** %3641, align 8
  %3643 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3642, i32 0, i32 1
  %3644 = load i32, i32* %3643, align 8
  %3645 = icmp eq i32 %3644, 0
  br i1 %3645, label %.loopexit102, label %3646

; <label>:3646:                                   ; preds = %.lr.ph385
  %3647 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3648 = load i32, i32* %3647, align 8
  %3649 = shl i32 %3648, 8
  %3650 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3651 = load %struct.bz_stream*, %struct.bz_stream** %3650, align 8
  %3652 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3651, i32 0, i32 0
  %3653 = load i8*, i8** %3652, align 8
  %3654 = load i8, i8* %3653, align 1
  %3655 = zext i8 %3654 to i32
  %3656 = or i32 %3649, %3655
  %3657 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3656, i32* %3657, align 8
  %3658 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3659 = load i32, i32* %3658, align 4
  %3660 = add nsw i32 %3659, 8
  store i32 %3660, i32* %3658, align 4
  %3661 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3662 = load %struct.bz_stream*, %struct.bz_stream** %3661, align 8
  %3663 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3662, i32 0, i32 0
  %3664 = load i8*, i8** %3663, align 8
  %3665 = getelementptr inbounds i8, i8* %3664, i32 1
  store i8* %3665, i8** %3663, align 8
  %3666 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3667 = load %struct.bz_stream*, %struct.bz_stream** %3666, align 8
  %3668 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3667, i32 0, i32 1
  %3669 = load i32, i32* %3668, align 8
  %3670 = add i32 %3669, -1
  store i32 %3670, i32* %3668, align 8
  %3671 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3672 = load %struct.bz_stream*, %struct.bz_stream** %3671, align 8
  %3673 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3672, i32 0, i32 2
  %3674 = load i32, i32* %3673, align 4
  %3675 = add i32 %3674, 1
  store i32 %3675, i32* %3673, align 4
  %3676 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3677 = load %struct.bz_stream*, %struct.bz_stream** %3676, align 8
  %3678 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3677, i32 0, i32 2
  %3679 = load i32, i32* %3678, align 4
  %3680 = icmp eq i32 %3679, 0
  br i1 %3680, label %3681, label %3687

; <label>:3681:                                   ; preds = %3646
  %3682 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3683 = load %struct.bz_stream*, %struct.bz_stream** %3682, align 8
  %3684 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3683, i32 0, i32 3
  %3685 = load i32, i32* %3684, align 8
  %3686 = add i32 %3685, 1
  store i32 %3686, i32* %3684, align 8
  br label %3687

; <label>:3687:                                   ; preds = %3681, %3646
  %3688 = load i32, i32* %3625, align 4
  %3689 = icmp sge i32 %3688, 8
  br i1 %3689, label %._crit_edge386.loopexit, label %.lr.ph385

; <label>:3690:                                   ; preds = %._crit_edge386, %33
  %3691 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 46, i32* %3691, align 8
  %3692 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3693 = load i32, i32* %3692, align 4
  %3694 = icmp sge i32 %3693, 8
  br i1 %3694, label %._crit_edge383, label %.lr.ph382.preheader

.lr.ph382.preheader:                              ; preds = %3690
  br label %.lr.ph382

._crit_edge383.loopexit:                          ; preds = %3754
  br label %._crit_edge383

._crit_edge383:                                   ; preds = %._crit_edge383.loopexit, %3690
  %3695 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3696 = load i32, i32* %3695, align 8
  %3697 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3698 = load i32, i32* %3697, align 4
  %3699 = sub nsw i32 %3698, 8
  %3700 = lshr i32 %3696, %3699
  %3701 = and i32 %3700, 255
  %3702 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3703 = load i32, i32* %3702, align 4
  %3704 = sub nsw i32 %3703, 8
  store i32 %3704, i32* %3702, align 4
  %3705 = trunc i32 %3701 to i8
  %3706 = zext i8 %3705 to i32
  %3707 = icmp ne i32 %3706, 144
  br i1 %3707, label %4045, label %3757

.lr.ph382:                                        ; preds = %.lr.ph382.preheader, %3754
  call void @unroll_loop(i32 147)
  %3708 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3709 = load %struct.bz_stream*, %struct.bz_stream** %3708, align 8
  %3710 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3709, i32 0, i32 1
  %3711 = load i32, i32* %3710, align 8
  %3712 = icmp eq i32 %3711, 0
  br i1 %3712, label %.loopexit77, label %3713

; <label>:3713:                                   ; preds = %.lr.ph382
  %3714 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3715 = load i32, i32* %3714, align 8
  %3716 = shl i32 %3715, 8
  %3717 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3718 = load %struct.bz_stream*, %struct.bz_stream** %3717, align 8
  %3719 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3718, i32 0, i32 0
  %3720 = load i8*, i8** %3719, align 8
  %3721 = load i8, i8* %3720, align 1
  %3722 = zext i8 %3721 to i32
  %3723 = or i32 %3716, %3722
  %3724 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3723, i32* %3724, align 8
  %3725 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3726 = load i32, i32* %3725, align 4
  %3727 = add nsw i32 %3726, 8
  store i32 %3727, i32* %3725, align 4
  %3728 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3729 = load %struct.bz_stream*, %struct.bz_stream** %3728, align 8
  %3730 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3729, i32 0, i32 0
  %3731 = load i8*, i8** %3730, align 8
  %3732 = getelementptr inbounds i8, i8* %3731, i32 1
  store i8* %3732, i8** %3730, align 8
  %3733 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3734 = load %struct.bz_stream*, %struct.bz_stream** %3733, align 8
  %3735 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3734, i32 0, i32 1
  %3736 = load i32, i32* %3735, align 8
  %3737 = add i32 %3736, -1
  store i32 %3737, i32* %3735, align 8
  %3738 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3739 = load %struct.bz_stream*, %struct.bz_stream** %3738, align 8
  %3740 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3739, i32 0, i32 2
  %3741 = load i32, i32* %3740, align 4
  %3742 = add i32 %3741, 1
  store i32 %3742, i32* %3740, align 4
  %3743 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3744 = load %struct.bz_stream*, %struct.bz_stream** %3743, align 8
  %3745 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3744, i32 0, i32 2
  %3746 = load i32, i32* %3745, align 4
  %3747 = icmp eq i32 %3746, 0
  br i1 %3747, label %3748, label %3754

; <label>:3748:                                   ; preds = %3713
  %3749 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3750 = load %struct.bz_stream*, %struct.bz_stream** %3749, align 8
  %3751 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3750, i32 0, i32 3
  %3752 = load i32, i32* %3751, align 8
  %3753 = add i32 %3752, 1
  store i32 %3753, i32* %3751, align 8
  br label %3754

; <label>:3754:                                   ; preds = %3748, %3713
  %3755 = load i32, i32* %3692, align 4
  %3756 = icmp sge i32 %3755, 8
  br i1 %3756, label %._crit_edge383.loopexit, label %.lr.ph382

; <label>:3757:                                   ; preds = %._crit_edge383
  %3758 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  store i32 0, i32* %3758, align 4
  br label %3759

; <label>:3759:                                   ; preds = %33, %3757
  %3760 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 47, i32* %3760, align 8
  %3761 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3762 = load i32, i32* %3761, align 4
  %3763 = icmp sge i32 %3762, 8
  br i1 %3763, label %._crit_edge380, label %.lr.ph379.preheader

.lr.ph379.preheader:                              ; preds = %3759
  br label %.lr.ph379

._crit_edge380.loopexit:                          ; preds = %3827
  br label %._crit_edge380

._crit_edge380:                                   ; preds = %._crit_edge380.loopexit, %3759
  %3764 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3765 = load i32, i32* %3764, align 8
  %3766 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3767 = load i32, i32* %3766, align 4
  %3768 = sub nsw i32 %3767, 8
  %3769 = lshr i32 %3765, %3768
  %3770 = and i32 %3769, 255
  %3771 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3772 = load i32, i32* %3771, align 4
  %3773 = sub nsw i32 %3772, 8
  store i32 %3773, i32* %3771, align 4
  %3774 = trunc i32 %3770 to i8
  %3775 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  %3776 = load i32, i32* %3775, align 4
  %3777 = shl i32 %3776, 8
  %3778 = zext i8 %3774 to i32
  %3779 = or i32 %3777, %3778
  %3780 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  store i32 %3779, i32* %3780, align 4
  br label %3830

.lr.ph379:                                        ; preds = %.lr.ph379.preheader, %3827
  call void @unroll_loop(i32 148)
  %3781 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3782 = load %struct.bz_stream*, %struct.bz_stream** %3781, align 8
  %3783 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3782, i32 0, i32 1
  %3784 = load i32, i32* %3783, align 8
  %3785 = icmp eq i32 %3784, 0
  br i1 %3785, label %.loopexit52, label %3786

; <label>:3786:                                   ; preds = %.lr.ph379
  %3787 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3788 = load i32, i32* %3787, align 8
  %3789 = shl i32 %3788, 8
  %3790 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3791 = load %struct.bz_stream*, %struct.bz_stream** %3790, align 8
  %3792 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3791, i32 0, i32 0
  %3793 = load i8*, i8** %3792, align 8
  %3794 = load i8, i8* %3793, align 1
  %3795 = zext i8 %3794 to i32
  %3796 = or i32 %3789, %3795
  %3797 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3796, i32* %3797, align 8
  %3798 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3799 = load i32, i32* %3798, align 4
  %3800 = add nsw i32 %3799, 8
  store i32 %3800, i32* %3798, align 4
  %3801 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3802 = load %struct.bz_stream*, %struct.bz_stream** %3801, align 8
  %3803 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3802, i32 0, i32 0
  %3804 = load i8*, i8** %3803, align 8
  %3805 = getelementptr inbounds i8, i8* %3804, i32 1
  store i8* %3805, i8** %3803, align 8
  %3806 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3807 = load %struct.bz_stream*, %struct.bz_stream** %3806, align 8
  %3808 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3807, i32 0, i32 1
  %3809 = load i32, i32* %3808, align 8
  %3810 = add i32 %3809, -1
  store i32 %3810, i32* %3808, align 8
  %3811 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3812 = load %struct.bz_stream*, %struct.bz_stream** %3811, align 8
  %3813 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3812, i32 0, i32 2
  %3814 = load i32, i32* %3813, align 4
  %3815 = add i32 %3814, 1
  store i32 %3815, i32* %3813, align 4
  %3816 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3817 = load %struct.bz_stream*, %struct.bz_stream** %3816, align 8
  %3818 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3817, i32 0, i32 2
  %3819 = load i32, i32* %3818, align 4
  %3820 = icmp eq i32 %3819, 0
  br i1 %3820, label %3821, label %3827

; <label>:3821:                                   ; preds = %3786
  %3822 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3823 = load %struct.bz_stream*, %struct.bz_stream** %3822, align 8
  %3824 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3823, i32 0, i32 3
  %3825 = load i32, i32* %3824, align 8
  %3826 = add i32 %3825, 1
  store i32 %3826, i32* %3824, align 8
  br label %3827

; <label>:3827:                                   ; preds = %3821, %3786
  %3828 = load i32, i32* %3761, align 4
  %3829 = icmp sge i32 %3828, 8
  br i1 %3829, label %._crit_edge380.loopexit, label %.lr.ph379

; <label>:3830:                                   ; preds = %33, %._crit_edge380
  %3831 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 48, i32* %3831, align 8
  %3832 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3833 = load i32, i32* %3832, align 4
  %3834 = icmp sge i32 %3833, 8
  br i1 %3834, label %._crit_edge377, label %.lr.ph376.preheader

.lr.ph376.preheader:                              ; preds = %3830
  br label %.lr.ph376

._crit_edge377.loopexit:                          ; preds = %3898
  br label %._crit_edge377

._crit_edge377:                                   ; preds = %._crit_edge377.loopexit, %3830
  %3835 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3836 = load i32, i32* %3835, align 8
  %3837 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3838 = load i32, i32* %3837, align 4
  %3839 = sub nsw i32 %3838, 8
  %3840 = lshr i32 %3836, %3839
  %3841 = and i32 %3840, 255
  %3842 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3843 = load i32, i32* %3842, align 4
  %3844 = sub nsw i32 %3843, 8
  store i32 %3844, i32* %3842, align 4
  %3845 = trunc i32 %3841 to i8
  %3846 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  %3847 = load i32, i32* %3846, align 4
  %3848 = shl i32 %3847, 8
  %3849 = zext i8 %3845 to i32
  %3850 = or i32 %3848, %3849
  %3851 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  store i32 %3850, i32* %3851, align 4
  br label %3901

.lr.ph376:                                        ; preds = %.lr.ph376.preheader, %3898
  call void @unroll_loop(i32 149)
  %3852 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3853 = load %struct.bz_stream*, %struct.bz_stream** %3852, align 8
  %3854 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3853, i32 0, i32 1
  %3855 = load i32, i32* %3854, align 8
  %3856 = icmp eq i32 %3855, 0
  br i1 %3856, label %.loopexit27, label %3857

; <label>:3857:                                   ; preds = %.lr.ph376
  %3858 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3859 = load i32, i32* %3858, align 8
  %3860 = shl i32 %3859, 8
  %3861 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3862 = load %struct.bz_stream*, %struct.bz_stream** %3861, align 8
  %3863 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3862, i32 0, i32 0
  %3864 = load i8*, i8** %3863, align 8
  %3865 = load i8, i8* %3864, align 1
  %3866 = zext i8 %3865 to i32
  %3867 = or i32 %3860, %3866
  %3868 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3867, i32* %3868, align 8
  %3869 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3870 = load i32, i32* %3869, align 4
  %3871 = add nsw i32 %3870, 8
  store i32 %3871, i32* %3869, align 4
  %3872 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3873 = load %struct.bz_stream*, %struct.bz_stream** %3872, align 8
  %3874 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3873, i32 0, i32 0
  %3875 = load i8*, i8** %3874, align 8
  %3876 = getelementptr inbounds i8, i8* %3875, i32 1
  store i8* %3876, i8** %3874, align 8
  %3877 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3878 = load %struct.bz_stream*, %struct.bz_stream** %3877, align 8
  %3879 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3878, i32 0, i32 1
  %3880 = load i32, i32* %3879, align 8
  %3881 = add i32 %3880, -1
  store i32 %3881, i32* %3879, align 8
  %3882 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3883 = load %struct.bz_stream*, %struct.bz_stream** %3882, align 8
  %3884 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3883, i32 0, i32 2
  %3885 = load i32, i32* %3884, align 4
  %3886 = add i32 %3885, 1
  store i32 %3886, i32* %3884, align 4
  %3887 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3888 = load %struct.bz_stream*, %struct.bz_stream** %3887, align 8
  %3889 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3888, i32 0, i32 2
  %3890 = load i32, i32* %3889, align 4
  %3891 = icmp eq i32 %3890, 0
  br i1 %3891, label %3892, label %3898

; <label>:3892:                                   ; preds = %3857
  %3893 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3894 = load %struct.bz_stream*, %struct.bz_stream** %3893, align 8
  %3895 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3894, i32 0, i32 3
  %3896 = load i32, i32* %3895, align 8
  %3897 = add i32 %3896, 1
  store i32 %3897, i32* %3895, align 8
  br label %3898

; <label>:3898:                                   ; preds = %3892, %3857
  %3899 = load i32, i32* %3832, align 4
  %3900 = icmp sge i32 %3899, 8
  br i1 %3900, label %._crit_edge377.loopexit, label %.lr.ph376

; <label>:3901:                                   ; preds = %33, %._crit_edge377
  %3902 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 49, i32* %3902, align 8
  %3903 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3904 = load i32, i32* %3903, align 4
  %3905 = icmp sge i32 %3904, 8
  br i1 %3905, label %._crit_edge374, label %.lr.ph373.preheader

.lr.ph373.preheader:                              ; preds = %3901
  br label %.lr.ph373

._crit_edge374.loopexit:                          ; preds = %3969
  br label %._crit_edge374

._crit_edge374:                                   ; preds = %._crit_edge374.loopexit, %3901
  %3906 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3907 = load i32, i32* %3906, align 8
  %3908 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3909 = load i32, i32* %3908, align 4
  %3910 = sub nsw i32 %3909, 8
  %3911 = lshr i32 %3907, %3910
  %3912 = and i32 %3911, 255
  %3913 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3914 = load i32, i32* %3913, align 4
  %3915 = sub nsw i32 %3914, 8
  store i32 %3915, i32* %3913, align 4
  %3916 = trunc i32 %3912 to i8
  %3917 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  %3918 = load i32, i32* %3917, align 4
  %3919 = shl i32 %3918, 8
  %3920 = zext i8 %3916 to i32
  %3921 = or i32 %3919, %3920
  %3922 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  store i32 %3921, i32* %3922, align 4
  br label %3972

.lr.ph373:                                        ; preds = %.lr.ph373.preheader, %3969
  call void @unroll_loop(i32 150)
  %3923 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3924 = load %struct.bz_stream*, %struct.bz_stream** %3923, align 8
  %3925 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3924, i32 0, i32 1
  %3926 = load i32, i32* %3925, align 8
  %3927 = icmp eq i32 %3926, 0
  br i1 %3927, label %.loopexit2, label %3928

; <label>:3928:                                   ; preds = %.lr.ph373
  %3929 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3930 = load i32, i32* %3929, align 8
  %3931 = shl i32 %3930, 8
  %3932 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3933 = load %struct.bz_stream*, %struct.bz_stream** %3932, align 8
  %3934 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3933, i32 0, i32 0
  %3935 = load i8*, i8** %3934, align 8
  %3936 = load i8, i8* %3935, align 1
  %3937 = zext i8 %3936 to i32
  %3938 = or i32 %3931, %3937
  %3939 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %3938, i32* %3939, align 8
  %3940 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3941 = load i32, i32* %3940, align 4
  %3942 = add nsw i32 %3941, 8
  store i32 %3942, i32* %3940, align 4
  %3943 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3944 = load %struct.bz_stream*, %struct.bz_stream** %3943, align 8
  %3945 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3944, i32 0, i32 0
  %3946 = load i8*, i8** %3945, align 8
  %3947 = getelementptr inbounds i8, i8* %3946, i32 1
  store i8* %3947, i8** %3945, align 8
  %3948 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3949 = load %struct.bz_stream*, %struct.bz_stream** %3948, align 8
  %3950 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3949, i32 0, i32 1
  %3951 = load i32, i32* %3950, align 8
  %3952 = add i32 %3951, -1
  store i32 %3952, i32* %3950, align 8
  %3953 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3954 = load %struct.bz_stream*, %struct.bz_stream** %3953, align 8
  %3955 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3954, i32 0, i32 2
  %3956 = load i32, i32* %3955, align 4
  %3957 = add i32 %3956, 1
  store i32 %3957, i32* %3955, align 4
  %3958 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3959 = load %struct.bz_stream*, %struct.bz_stream** %3958, align 8
  %3960 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3959, i32 0, i32 2
  %3961 = load i32, i32* %3960, align 4
  %3962 = icmp eq i32 %3961, 0
  br i1 %3962, label %3963, label %3969

; <label>:3963:                                   ; preds = %3928
  %3964 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3965 = load %struct.bz_stream*, %struct.bz_stream** %3964, align 8
  %3966 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3965, i32 0, i32 3
  %3967 = load i32, i32* %3966, align 8
  %3968 = add i32 %3967, 1
  store i32 %3968, i32* %3966, align 8
  br label %3969

; <label>:3969:                                   ; preds = %3963, %3928
  %3970 = load i32, i32* %3903, align 4
  %3971 = icmp sge i32 %3970, 8
  br i1 %3971, label %._crit_edge374.loopexit, label %.lr.ph373

; <label>:3972:                                   ; preds = %33, %._crit_edge374
  %3973 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 50, i32* %3973, align 8
  %3974 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3975 = load i32, i32* %3974, align 4
  %3976 = icmp sge i32 %3975, 8
  br i1 %3976, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %3972
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %4041
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3972
  %3977 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %3978 = load i32, i32* %3977, align 8
  %3979 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3980 = load i32, i32* %3979, align 4
  %3981 = sub nsw i32 %3980, 8
  %3982 = lshr i32 %3978, %3981
  %3983 = and i32 %3982, 255
  %3984 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %3985 = load i32, i32* %3984, align 4
  %3986 = sub nsw i32 %3985, 8
  store i32 %3986, i32* %3984, align 4
  %3987 = trunc i32 %3983 to i8
  %3988 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  %3989 = load i32, i32* %3988, align 4
  %3990 = shl i32 %3989, 8
  %3991 = zext i8 %3987 to i32
  %3992 = or i32 %3990, %3991
  %3993 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 24
  store i32 %3992, i32* %3993, align 4
  %3994 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 1
  store i32 1, i32* %3994, align 8
  br label %4045

.lr.ph:                                           ; preds = %.lr.ph.preheader, %4041
  call void @unroll_loop(i32 151)
  %3995 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %3996 = load %struct.bz_stream*, %struct.bz_stream** %3995, align 8
  %3997 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %3996, i32 0, i32 1
  %3998 = load i32, i32* %3997, align 8
  %3999 = icmp eq i32 %3998, 0
  br i1 %3999, label %.loopexit, label %4000

; <label>:4000:                                   ; preds = %.lr.ph
  %4001 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  %4002 = load i32, i32* %4001, align 8
  %4003 = shl i32 %4002, 8
  %4004 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %4005 = load %struct.bz_stream*, %struct.bz_stream** %4004, align 8
  %4006 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4005, i32 0, i32 0
  %4007 = load i8*, i8** %4006, align 8
  %4008 = load i8, i8* %4007, align 1
  %4009 = zext i8 %4008 to i32
  %4010 = or i32 %4003, %4009
  %4011 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 7
  store i32 %4010, i32* %4011, align 8
  %4012 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 8
  %4013 = load i32, i32* %4012, align 4
  %4014 = add nsw i32 %4013, 8
  store i32 %4014, i32* %4012, align 4
  %4015 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %4016 = load %struct.bz_stream*, %struct.bz_stream** %4015, align 8
  %4017 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4016, i32 0, i32 0
  %4018 = load i8*, i8** %4017, align 8
  %4019 = getelementptr inbounds i8, i8* %4018, i32 1
  store i8* %4019, i8** %4017, align 8
  %4020 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %4021 = load %struct.bz_stream*, %struct.bz_stream** %4020, align 8
  %4022 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4021, i32 0, i32 1
  %4023 = load i32, i32* %4022, align 8
  %4024 = add i32 %4023, -1
  store i32 %4024, i32* %4022, align 8
  %4025 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %4026 = load %struct.bz_stream*, %struct.bz_stream** %4025, align 8
  %4027 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4026, i32 0, i32 2
  %4028 = load i32, i32* %4027, align 4
  %4029 = add i32 %4028, 1
  store i32 %4029, i32* %4027, align 4
  %4030 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %4031 = load %struct.bz_stream*, %struct.bz_stream** %4030, align 8
  %4032 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4031, i32 0, i32 2
  %4033 = load i32, i32* %4032, align 4
  %4034 = icmp eq i32 %4033, 0
  br i1 %4034, label %4035, label %4041

; <label>:4035:                                   ; preds = %4000
  %4036 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 0
  %4037 = load %struct.bz_stream*, %struct.bz_stream** %4036, align 8
  %4038 = getelementptr inbounds %struct.bz_stream, %struct.bz_stream* %4037, i32 0, i32 3
  %4039 = load i32, i32* %4038, align 8
  %4040 = add i32 %4039, 1
  store i32 %4040, i32* %4038, align 8
  br label %4041

; <label>:4041:                                   ; preds = %4035, %4000
  %4042 = load i32, i32* %3974, align 4
  %4043 = icmp sge i32 %4042, 8
  br i1 %4043, label %._crit_edge.loopexit, label %.lr.ph

; <label>:4044:                                   ; preds = %33
  call void @BZ2_bz__AssertH__fail(i32 4001)
  call void @BZ2_bz__AssertH__fail(i32 4002)
  br label %4045

.loopexit:                                        ; preds = %.lr.ph
  %.14356.ph = phi i32* [ %81, %.lr.ph ]
  %.14341.ph = phi i32* [ %79, %.lr.ph ]
  %.14326.ph = phi i32* [ %77, %.lr.ph ]
  %.14311.ph = phi i32 [ %75, %.lr.ph ]
  %.14296.ph = phi i32 [ %73, %.lr.ph ]
  %.10281.ph = phi i32 [ %71, %.lr.ph ]
  %.10270.ph = phi i32 [ %69, %.lr.ph ]
  %.11259.ph = phi i32 [ %67, %.lr.ph ]
  %.18246.ph = phi i32 [ %63, %.lr.ph ]
  %.8227.ph = phi i32 [ %61, %.lr.ph ]
  %.13218.ph = phi i32 [ %59, %.lr.ph ]
  %.14204.ph = phi i32 [ %57, %.lr.ph ]
  %.11189.ph = phi i32 [ %55, %.lr.ph ]
  %.8177.ph = phi i32 [ %53, %.lr.ph ]
  %.14168.ph = phi i32 [ %51, %.lr.ph ]
  %.14153.ph = phi i32 [ %49, %.lr.ph ]
  %.11138.ph = phi i32 [ %47, %.lr.ph ]
  %.20126.ph = phi i32 [ %45, %.lr.ph ]
  %.21105.ph = phi i32 [ %43, %.lr.ph ]
  %.2283.ph = phi i32 [ %41, %.lr.ph ]
  %.1860.ph = phi i32 [ %39, %.lr.ph ]
  %.2841.ph = phi i32 [ %37, %.lr.ph ]
  %.40.ph = phi i32 [ %35, %.lr.ph ]
  %.03.ph = phi i32 [ 0, %.lr.ph ]
  br label %4045

.loopexit2:                                       ; preds = %.lr.ph373
  %.14356.ph3 = phi i32* [ %81, %.lr.ph373 ]
  %.14341.ph4 = phi i32* [ %79, %.lr.ph373 ]
  %.14326.ph5 = phi i32* [ %77, %.lr.ph373 ]
  %.14311.ph6 = phi i32 [ %75, %.lr.ph373 ]
  %.14296.ph7 = phi i32 [ %73, %.lr.ph373 ]
  %.10281.ph8 = phi i32 [ %71, %.lr.ph373 ]
  %.10270.ph9 = phi i32 [ %69, %.lr.ph373 ]
  %.11259.ph10 = phi i32 [ %67, %.lr.ph373 ]
  %.18246.ph11 = phi i32 [ %63, %.lr.ph373 ]
  %.8227.ph12 = phi i32 [ %61, %.lr.ph373 ]
  %.13218.ph13 = phi i32 [ %59, %.lr.ph373 ]
  %.14204.ph14 = phi i32 [ %57, %.lr.ph373 ]
  %.11189.ph15 = phi i32 [ %55, %.lr.ph373 ]
  %.8177.ph16 = phi i32 [ %53, %.lr.ph373 ]
  %.14168.ph17 = phi i32 [ %51, %.lr.ph373 ]
  %.14153.ph18 = phi i32 [ %49, %.lr.ph373 ]
  %.11138.ph19 = phi i32 [ %47, %.lr.ph373 ]
  %.20126.ph20 = phi i32 [ %45, %.lr.ph373 ]
  %.21105.ph21 = phi i32 [ %43, %.lr.ph373 ]
  %.2283.ph22 = phi i32 [ %41, %.lr.ph373 ]
  %.1860.ph23 = phi i32 [ %39, %.lr.ph373 ]
  %.2841.ph24 = phi i32 [ %37, %.lr.ph373 ]
  %.40.ph25 = phi i32 [ %35, %.lr.ph373 ]
  %.03.ph26 = phi i32 [ 0, %.lr.ph373 ]
  br label %4045

.loopexit27:                                      ; preds = %.lr.ph376
  %.14356.ph28 = phi i32* [ %81, %.lr.ph376 ]
  %.14341.ph29 = phi i32* [ %79, %.lr.ph376 ]
  %.14326.ph30 = phi i32* [ %77, %.lr.ph376 ]
  %.14311.ph31 = phi i32 [ %75, %.lr.ph376 ]
  %.14296.ph32 = phi i32 [ %73, %.lr.ph376 ]
  %.10281.ph33 = phi i32 [ %71, %.lr.ph376 ]
  %.10270.ph34 = phi i32 [ %69, %.lr.ph376 ]
  %.11259.ph35 = phi i32 [ %67, %.lr.ph376 ]
  %.18246.ph36 = phi i32 [ %63, %.lr.ph376 ]
  %.8227.ph37 = phi i32 [ %61, %.lr.ph376 ]
  %.13218.ph38 = phi i32 [ %59, %.lr.ph376 ]
  %.14204.ph39 = phi i32 [ %57, %.lr.ph376 ]
  %.11189.ph40 = phi i32 [ %55, %.lr.ph376 ]
  %.8177.ph41 = phi i32 [ %53, %.lr.ph376 ]
  %.14168.ph42 = phi i32 [ %51, %.lr.ph376 ]
  %.14153.ph43 = phi i32 [ %49, %.lr.ph376 ]
  %.11138.ph44 = phi i32 [ %47, %.lr.ph376 ]
  %.20126.ph45 = phi i32 [ %45, %.lr.ph376 ]
  %.21105.ph46 = phi i32 [ %43, %.lr.ph376 ]
  %.2283.ph47 = phi i32 [ %41, %.lr.ph376 ]
  %.1860.ph48 = phi i32 [ %39, %.lr.ph376 ]
  %.2841.ph49 = phi i32 [ %37, %.lr.ph376 ]
  %.40.ph50 = phi i32 [ %35, %.lr.ph376 ]
  %.03.ph51 = phi i32 [ 0, %.lr.ph376 ]
  br label %4045

.loopexit52:                                      ; preds = %.lr.ph379
  %.14356.ph53 = phi i32* [ %81, %.lr.ph379 ]
  %.14341.ph54 = phi i32* [ %79, %.lr.ph379 ]
  %.14326.ph55 = phi i32* [ %77, %.lr.ph379 ]
  %.14311.ph56 = phi i32 [ %75, %.lr.ph379 ]
  %.14296.ph57 = phi i32 [ %73, %.lr.ph379 ]
  %.10281.ph58 = phi i32 [ %71, %.lr.ph379 ]
  %.10270.ph59 = phi i32 [ %69, %.lr.ph379 ]
  %.11259.ph60 = phi i32 [ %67, %.lr.ph379 ]
  %.18246.ph61 = phi i32 [ %63, %.lr.ph379 ]
  %.8227.ph62 = phi i32 [ %61, %.lr.ph379 ]
  %.13218.ph63 = phi i32 [ %59, %.lr.ph379 ]
  %.14204.ph64 = phi i32 [ %57, %.lr.ph379 ]
  %.11189.ph65 = phi i32 [ %55, %.lr.ph379 ]
  %.8177.ph66 = phi i32 [ %53, %.lr.ph379 ]
  %.14168.ph67 = phi i32 [ %51, %.lr.ph379 ]
  %.14153.ph68 = phi i32 [ %49, %.lr.ph379 ]
  %.11138.ph69 = phi i32 [ %47, %.lr.ph379 ]
  %.20126.ph70 = phi i32 [ %45, %.lr.ph379 ]
  %.21105.ph71 = phi i32 [ %43, %.lr.ph379 ]
  %.2283.ph72 = phi i32 [ %41, %.lr.ph379 ]
  %.1860.ph73 = phi i32 [ %39, %.lr.ph379 ]
  %.2841.ph74 = phi i32 [ %37, %.lr.ph379 ]
  %.40.ph75 = phi i32 [ %35, %.lr.ph379 ]
  %.03.ph76 = phi i32 [ 0, %.lr.ph379 ]
  br label %4045

.loopexit77:                                      ; preds = %.lr.ph382
  %.14356.ph78 = phi i32* [ %81, %.lr.ph382 ]
  %.14341.ph79 = phi i32* [ %79, %.lr.ph382 ]
  %.14326.ph80 = phi i32* [ %77, %.lr.ph382 ]
  %.14311.ph81 = phi i32 [ %75, %.lr.ph382 ]
  %.14296.ph82 = phi i32 [ %73, %.lr.ph382 ]
  %.10281.ph83 = phi i32 [ %71, %.lr.ph382 ]
  %.10270.ph84 = phi i32 [ %69, %.lr.ph382 ]
  %.11259.ph85 = phi i32 [ %67, %.lr.ph382 ]
  %.18246.ph86 = phi i32 [ %63, %.lr.ph382 ]
  %.8227.ph87 = phi i32 [ %61, %.lr.ph382 ]
  %.13218.ph88 = phi i32 [ %59, %.lr.ph382 ]
  %.14204.ph89 = phi i32 [ %57, %.lr.ph382 ]
  %.11189.ph90 = phi i32 [ %55, %.lr.ph382 ]
  %.8177.ph91 = phi i32 [ %53, %.lr.ph382 ]
  %.14168.ph92 = phi i32 [ %51, %.lr.ph382 ]
  %.14153.ph93 = phi i32 [ %49, %.lr.ph382 ]
  %.11138.ph94 = phi i32 [ %47, %.lr.ph382 ]
  %.20126.ph95 = phi i32 [ %45, %.lr.ph382 ]
  %.21105.ph96 = phi i32 [ %43, %.lr.ph382 ]
  %.2283.ph97 = phi i32 [ %41, %.lr.ph382 ]
  %.1860.ph98 = phi i32 [ %39, %.lr.ph382 ]
  %.2841.ph99 = phi i32 [ %37, %.lr.ph382 ]
  %.40.ph100 = phi i32 [ %35, %.lr.ph382 ]
  %.03.ph101 = phi i32 [ 0, %.lr.ph382 ]
  br label %4045

.loopexit102:                                     ; preds = %.lr.ph385
  %.14356.ph103 = phi i32* [ %81, %.lr.ph385 ]
  %.14341.ph104 = phi i32* [ %79, %.lr.ph385 ]
  %.14326.ph105 = phi i32* [ %77, %.lr.ph385 ]
  %.14311.ph106 = phi i32 [ %75, %.lr.ph385 ]
  %.14296.ph107 = phi i32 [ %73, %.lr.ph385 ]
  %.10281.ph108 = phi i32 [ %71, %.lr.ph385 ]
  %.10270.ph109 = phi i32 [ %69, %.lr.ph385 ]
  %.11259.ph110 = phi i32 [ %67, %.lr.ph385 ]
  %.18246.ph111 = phi i32 [ %63, %.lr.ph385 ]
  %.8227.ph112 = phi i32 [ %61, %.lr.ph385 ]
  %.13218.ph113 = phi i32 [ %59, %.lr.ph385 ]
  %.14204.ph114 = phi i32 [ %57, %.lr.ph385 ]
  %.11189.ph115 = phi i32 [ %55, %.lr.ph385 ]
  %.8177.ph116 = phi i32 [ %53, %.lr.ph385 ]
  %.14168.ph117 = phi i32 [ %51, %.lr.ph385 ]
  %.14153.ph118 = phi i32 [ %49, %.lr.ph385 ]
  %.11138.ph119 = phi i32 [ %47, %.lr.ph385 ]
  %.20126.ph120 = phi i32 [ %45, %.lr.ph385 ]
  %.21105.ph121 = phi i32 [ %43, %.lr.ph385 ]
  %.2283.ph122 = phi i32 [ %41, %.lr.ph385 ]
  %.1860.ph123 = phi i32 [ %39, %.lr.ph385 ]
  %.2841.ph124 = phi i32 [ %37, %.lr.ph385 ]
  %.40.ph125 = phi i32 [ %35, %.lr.ph385 ]
  %.03.ph126 = phi i32 [ 0, %.lr.ph385 ]
  br label %4045

.loopexit127:                                     ; preds = %.lr.ph388
  %.14356.ph128 = phi i32* [ %81, %.lr.ph388 ]
  %.14341.ph129 = phi i32* [ %79, %.lr.ph388 ]
  %.14326.ph130 = phi i32* [ %77, %.lr.ph388 ]
  %.14311.ph131 = phi i32 [ %75, %.lr.ph388 ]
  %.14296.ph132 = phi i32 [ %73, %.lr.ph388 ]
  %.10281.ph133 = phi i32 [ %71, %.lr.ph388 ]
  %.10270.ph134 = phi i32 [ %69, %.lr.ph388 ]
  %.11259.ph135 = phi i32 [ %67, %.lr.ph388 ]
  %.18246.ph136 = phi i32 [ %63, %.lr.ph388 ]
  %.8227.ph137 = phi i32 [ %61, %.lr.ph388 ]
  %.13218.ph138 = phi i32 [ %59, %.lr.ph388 ]
  %.14204.ph139 = phi i32 [ %57, %.lr.ph388 ]
  %.11189.ph140 = phi i32 [ %55, %.lr.ph388 ]
  %.8177.ph141 = phi i32 [ %53, %.lr.ph388 ]
  %.14168.ph142 = phi i32 [ %51, %.lr.ph388 ]
  %.14153.ph143 = phi i32 [ %49, %.lr.ph388 ]
  %.11138.ph144 = phi i32 [ %47, %.lr.ph388 ]
  %.20126.ph145 = phi i32 [ %45, %.lr.ph388 ]
  %.21105.ph146 = phi i32 [ %43, %.lr.ph388 ]
  %.2283.ph147 = phi i32 [ %41, %.lr.ph388 ]
  %.1860.ph148 = phi i32 [ %39, %.lr.ph388 ]
  %.2841.ph149 = phi i32 [ %37, %.lr.ph388 ]
  %.40.ph150 = phi i32 [ %35, %.lr.ph388 ]
  %.03.ph151 = phi i32 [ 0, %.lr.ph388 ]
  br label %4045

.loopexit152:                                     ; preds = %.lr.ph391
  %.14356.ph153 = phi i32* [ %81, %.lr.ph391 ]
  %.14341.ph154 = phi i32* [ %79, %.lr.ph391 ]
  %.14326.ph155 = phi i32* [ %77, %.lr.ph391 ]
  %.14311.ph156 = phi i32 [ %75, %.lr.ph391 ]
  %.14296.ph157 = phi i32 [ %73, %.lr.ph391 ]
  %.10281.ph158 = phi i32 [ %71, %.lr.ph391 ]
  %.10270.ph159 = phi i32 [ %69, %.lr.ph391 ]
  %.11259.ph160 = phi i32 [ %67, %.lr.ph391 ]
  %.18246.ph161 = phi i32 [ %63, %.lr.ph391 ]
  %.8227.ph162 = phi i32 [ %61, %.lr.ph391 ]
  %.13218.ph163 = phi i32 [ %59, %.lr.ph391 ]
  %.14204.ph164 = phi i32 [ %57, %.lr.ph391 ]
  %.11189.ph165 = phi i32 [ %55, %.lr.ph391 ]
  %.8177.ph166 = phi i32 [ %53, %.lr.ph391 ]
  %.14168.ph167 = phi i32 [ %51, %.lr.ph391 ]
  %.14153.ph168 = phi i32 [ %49, %.lr.ph391 ]
  %.11138.ph169 = phi i32 [ %47, %.lr.ph391 ]
  %.20126.ph170 = phi i32 [ %45, %.lr.ph391 ]
  %.21105.ph171 = phi i32 [ %43, %.lr.ph391 ]
  %.2283.ph172 = phi i32 [ %41, %.lr.ph391 ]
  %.1860.ph173 = phi i32 [ %39, %.lr.ph391 ]
  %.2841.ph174 = phi i32 [ %37, %.lr.ph391 ]
  %.40.ph175 = phi i32 [ %35, %.lr.ph391 ]
  %.03.ph176 = phi i32 [ 0, %.lr.ph391 ]
  br label %4045

.loopexit177:                                     ; preds = %.lr.ph394
  %.14356.ph178 = phi i32* [ %81, %.lr.ph394 ]
  %.14341.ph179 = phi i32* [ %79, %.lr.ph394 ]
  %.14326.ph180 = phi i32* [ %77, %.lr.ph394 ]
  %.14311.ph181 = phi i32 [ %75, %.lr.ph394 ]
  %.14296.ph182 = phi i32 [ %73, %.lr.ph394 ]
  %.10281.ph183 = phi i32 [ %71, %.lr.ph394 ]
  %.10270.ph184 = phi i32 [ %69, %.lr.ph394 ]
  %.11259.ph185 = phi i32 [ %67, %.lr.ph394 ]
  %.18246.ph186 = phi i32 [ %63, %.lr.ph394 ]
  %.8227.ph187 = phi i32 [ %61, %.lr.ph394 ]
  %.13218.ph188 = phi i32 [ %59, %.lr.ph394 ]
  %.14204.ph189 = phi i32 [ %57, %.lr.ph394 ]
  %.11189.ph190 = phi i32 [ %55, %.lr.ph394 ]
  %.8177.ph191 = phi i32 [ %53, %.lr.ph394 ]
  %.14168.ph192 = phi i32 [ %51, %.lr.ph394 ]
  %.14153.ph193 = phi i32 [ %49, %.lr.ph394 ]
  %.11138.ph194 = phi i32 [ %47, %.lr.ph394 ]
  %.20126.ph195 = phi i32 [ %45, %.lr.ph394 ]
  %.21105.ph196 = phi i32 [ %43, %.lr.ph394 ]
  %.2283.ph197 = phi i32 [ %41, %.lr.ph394 ]
  %.1860.ph198 = phi i32 [ %39, %.lr.ph394 ]
  %.2841.ph199 = phi i32 [ %37, %.lr.ph394 ]
  %.40.ph200 = phi i32 [ %35, %.lr.ph394 ]
  %.03.ph201 = phi i32 [ 0, %.lr.ph394 ]
  br label %4045

.loopexit202:                                     ; preds = %.lr.ph397
  %.14356.ph203 = phi i32* [ %81, %.lr.ph397 ]
  %.14341.ph204 = phi i32* [ %79, %.lr.ph397 ]
  %.14326.ph205 = phi i32* [ %77, %.lr.ph397 ]
  %.14311.ph206 = phi i32 [ %75, %.lr.ph397 ]
  %.14296.ph207 = phi i32 [ %73, %.lr.ph397 ]
  %.10281.ph208 = phi i32 [ %71, %.lr.ph397 ]
  %.10270.ph209 = phi i32 [ %69, %.lr.ph397 ]
  %.11259.ph210 = phi i32 [ %67, %.lr.ph397 ]
  %.18246.ph211 = phi i32 [ %63, %.lr.ph397 ]
  %.8227.ph212 = phi i32 [ %61, %.lr.ph397 ]
  %.13218.ph213 = phi i32 [ %59, %.lr.ph397 ]
  %.14204.ph214 = phi i32 [ %57, %.lr.ph397 ]
  %.11189.ph215 = phi i32 [ %55, %.lr.ph397 ]
  %.8177.ph216 = phi i32 [ %53, %.lr.ph397 ]
  %.14168.ph217 = phi i32 [ %51, %.lr.ph397 ]
  %.14153.ph218 = phi i32 [ %49, %.lr.ph397 ]
  %.11138.ph219 = phi i32 [ %47, %.lr.ph397 ]
  %.20126.ph220 = phi i32 [ %45, %.lr.ph397 ]
  %.21105.ph221 = phi i32 [ %43, %.lr.ph397 ]
  %.2283.ph222 = phi i32 [ %41, %.lr.ph397 ]
  %.1860.ph223 = phi i32 [ %39, %.lr.ph397 ]
  %.2841.ph224 = phi i32 [ %37, %.lr.ph397 ]
  %.40.ph225 = phi i32 [ %.110, %.lr.ph397 ]
  %.03.ph226 = phi i32 [ 0, %.lr.ph397 ]
  br label %4045

.loopexit227:                                     ; preds = %.lr.ph400
  %.14356.ph228 = phi i32* [ %81, %.lr.ph400 ]
  %.14341.ph229 = phi i32* [ %79, %.lr.ph400 ]
  %.14326.ph230 = phi i32* [ %77, %.lr.ph400 ]
  %.14311.ph231 = phi i32 [ %75, %.lr.ph400 ]
  %.14296.ph232 = phi i32 [ %73, %.lr.ph400 ]
  %.10281.ph233 = phi i32 [ %71, %.lr.ph400 ]
  %.10270.ph234 = phi i32 [ %69, %.lr.ph400 ]
  %.11259.ph235 = phi i32 [ %67, %.lr.ph400 ]
  %.18246.ph236 = phi i32 [ %63, %.lr.ph400 ]
  %.8227.ph237 = phi i32 [ %61, %.lr.ph400 ]
  %.13218.ph238 = phi i32 [ %59, %.lr.ph400 ]
  %.14204.ph239 = phi i32 [ %57, %.lr.ph400 ]
  %.11189.ph240 = phi i32 [ %55, %.lr.ph400 ]
  %.8177.ph241 = phi i32 [ %53, %.lr.ph400 ]
  %.14168.ph242 = phi i32 [ %51, %.lr.ph400 ]
  %.14153.ph243 = phi i32 [ %49, %.lr.ph400 ]
  %.11138.ph244 = phi i32 [ %47, %.lr.ph400 ]
  %.20126.ph245 = phi i32 [ %45, %.lr.ph400 ]
  %.21105.ph246 = phi i32 [ %43, %.lr.ph400 ]
  %.2283.ph247 = phi i32 [ %41, %.lr.ph400 ]
  %.1860.ph248 = phi i32 [ %39, %.lr.ph400 ]
  %.2841.ph249 = phi i32 [ %.215, %.lr.ph400 ]
  %.40.ph250 = phi i32 [ %.5, %.lr.ph400 ]
  %.03.ph251 = phi i32 [ 0, %.lr.ph400 ]
  br label %4045

.loopexit252:                                     ; preds = %.lr.ph403
  %.14356.ph253 = phi i32* [ %81, %.lr.ph403 ]
  %.14341.ph254 = phi i32* [ %79, %.lr.ph403 ]
  %.14326.ph255 = phi i32* [ %77, %.lr.ph403 ]
  %.14311.ph256 = phi i32 [ %75, %.lr.ph403 ]
  %.14296.ph257 = phi i32 [ %73, %.lr.ph403 ]
  %.10281.ph258 = phi i32 [ %71, %.lr.ph403 ]
  %.10270.ph259 = phi i32 [ %69, %.lr.ph403 ]
  %.11259.ph260 = phi i32 [ %67, %.lr.ph403 ]
  %.18246.ph261 = phi i32 [ %63, %.lr.ph403 ]
  %.8227.ph262 = phi i32 [ %61, %.lr.ph403 ]
  %.13218.ph263 = phi i32 [ %59, %.lr.ph403 ]
  %.14204.ph264 = phi i32 [ %57, %.lr.ph403 ]
  %.11189.ph265 = phi i32 [ %55, %.lr.ph403 ]
  %.8177.ph266 = phi i32 [ %53, %.lr.ph403 ]
  %.14168.ph267 = phi i32 [ %51, %.lr.ph403 ]
  %.14153.ph268 = phi i32 [ %49, %.lr.ph403 ]
  %.11138.ph269 = phi i32 [ %47, %.lr.ph403 ]
  %.20126.ph270 = phi i32 [ %.2108, %.lr.ph403 ]
  %.21105.ph271 = phi i32 [ %.387, %.lr.ph403 ]
  %.2283.ph272 = phi i32 [ %.465, %.lr.ph403 ]
  %.1860.ph273 = phi i32 [ %39, %.lr.ph403 ]
  %.2841.ph274 = phi i32 [ %.821, %.lr.ph403 ]
  %.40.ph275 = phi i32 [ %.11, %.lr.ph403 ]
  %.03.ph276 = phi i32 [ 0, %.lr.ph403 ]
  br label %4045

.loopexit277:                                     ; preds = %.lr.ph406
  %.14356.ph278 = phi i32* [ %81, %.lr.ph406 ]
  %.14341.ph279 = phi i32* [ %79, %.lr.ph406 ]
  %.14326.ph280 = phi i32* [ %77, %.lr.ph406 ]
  %.14311.ph281 = phi i32 [ %75, %.lr.ph406 ]
  %.14296.ph282 = phi i32 [ %73, %.lr.ph406 ]
  %.10281.ph283 = phi i32 [ %71, %.lr.ph406 ]
  %.10270.ph284 = phi i32 [ %69, %.lr.ph406 ]
  %.11259.ph285 = phi i32 [ %67, %.lr.ph406 ]
  %.18246.ph286 = phi i32 [ %.5233, %.lr.ph406 ]
  %.8227.ph287 = phi i32 [ %61, %.lr.ph406 ]
  %.13218.ph288 = phi i32 [ %59, %.lr.ph406 ]
  %.14204.ph289 = phi i32 [ %57, %.lr.ph406 ]
  %.11189.ph290 = phi i32 [ %55, %.lr.ph406 ]
  %.8177.ph291 = phi i32 [ %53, %.lr.ph406 ]
  %.14168.ph292 = phi i32 [ %51, %.lr.ph406 ]
  %.14153.ph293 = phi i32 [ %49, %.lr.ph406 ]
  %.11138.ph294 = phi i32 [ %47, %.lr.ph406 ]
  %.20126.ph295 = phi i32 [ %.8114, %.lr.ph406 ]
  %.21105.ph296 = phi i32 [ %.993, %.lr.ph406 ]
  %.2283.ph297 = phi i32 [ %.1071, %.lr.ph406 ]
  %.1860.ph298 = phi i32 [ %.547, %.lr.ph406 ]
  %.2841.ph299 = phi i32 [ %.1427, %.lr.ph406 ]
  %.40.ph300 = phi i32 [ %.18, %.lr.ph406 ]
  %.03.ph301 = phi i32 [ 0, %.lr.ph406 ]
  br label %4045

.loopexit302:                                     ; preds = %.lr.ph409
  %.14356.ph303 = phi i32* [ %81, %.lr.ph409 ]
  %.14341.ph304 = phi i32* [ %79, %.lr.ph409 ]
  %.14326.ph305 = phi i32* [ %77, %.lr.ph409 ]
  %.14311.ph306 = phi i32 [ %75, %.lr.ph409 ]
  %.14296.ph307 = phi i32 [ %73, %.lr.ph409 ]
  %.10281.ph308 = phi i32 [ %71, %.lr.ph409 ]
  %.10270.ph309 = phi i32 [ %69, %.lr.ph409 ]
  %.11259.ph310 = phi i32 [ %67, %.lr.ph409 ]
  %.18246.ph311 = phi i32 [ %.4232, %.lr.ph409 ]
  %.8227.ph312 = phi i32 [ %61, %.lr.ph409 ]
  %.13218.ph313 = phi i32 [ %59, %.lr.ph409 ]
  %.14204.ph314 = phi i32 [ %57, %.lr.ph409 ]
  %.11189.ph315 = phi i32 [ %55, %.lr.ph409 ]
  %.8177.ph316 = phi i32 [ %53, %.lr.ph409 ]
  %.14168.ph317 = phi i32 [ %51, %.lr.ph409 ]
  %.14153.ph318 = phi i32 [ %49, %.lr.ph409 ]
  %.11138.ph319 = phi i32 [ %47, %.lr.ph409 ]
  %.20126.ph320 = phi i32 [ %.7113, %.lr.ph409 ]
  %.21105.ph321 = phi i32 [ %.892, %.lr.ph409 ]
  %.2283.ph322 = phi i32 [ %.970, %.lr.ph409 ]
  %.1860.ph323 = phi i32 [ %.446, %.lr.ph409 ]
  %.2841.ph324 = phi i32 [ %.1326, %.lr.ph409 ]
  %.40.ph325 = phi i32 [ %.1712, %.lr.ph409 ]
  %.03.ph326 = phi i32 [ 0, %.lr.ph409 ]
  br label %4045

.loopexit327:                                     ; preds = %.lr.ph412
  %.14356.ph328 = phi i32* [ %81, %.lr.ph412 ]
  %.14341.ph329 = phi i32* [ %79, %.lr.ph412 ]
  %.14326.ph330 = phi i32* [ %77, %.lr.ph412 ]
  %.14311.ph331 = phi i32 [ %75, %.lr.ph412 ]
  %.14296.ph332 = phi i32 [ %73, %.lr.ph412 ]
  %.10281.ph333 = phi i32 [ %71, %.lr.ph412 ]
  %.10270.ph334 = phi i32 [ %69, %.lr.ph412 ]
  %.11259.ph335 = phi i32 [ %67, %.lr.ph412 ]
  %.18246.ph336 = phi i32 [ %.1229, %.lr.ph412 ]
  %.8227.ph337 = phi i32 [ %61, %.lr.ph412 ]
  %.13218.ph338 = phi i32 [ %59, %.lr.ph412 ]
  %.14204.ph339 = phi i32 [ %57, %.lr.ph412 ]
  %.11189.ph340 = phi i32 [ %55, %.lr.ph412 ]
  %.8177.ph341 = phi i32 [ %53, %.lr.ph412 ]
  %.14168.ph342 = phi i32 [ %51, %.lr.ph412 ]
  %.14153.ph343 = phi i32 [ %49, %.lr.ph412 ]
  %.11138.ph344 = phi i32 [ %47, %.lr.ph412 ]
  %.20126.ph345 = phi i32 [ %.4110, %.lr.ph412 ]
  %.21105.ph346 = phi i32 [ %.589, %.lr.ph412 ]
  %.2283.ph347 = phi i32 [ %.667, %.lr.ph412 ]
  %.1860.ph348 = phi i32 [ %.143, %.lr.ph412 ]
  %.2841.ph349 = phi i32 [ %.1023, %.lr.ph412 ]
  %.40.ph350 = phi i32 [ %.14, %.lr.ph412 ]
  %.03.ph351 = phi i32 [ 0, %.lr.ph412 ]
  br label %4045

.loopexit353:                                     ; preds = %2988, %2982
  %.14356.ph354 = phi i32* [ %.4346, %2982 ], [ %.4346, %2988 ]
  %.14341.ph355 = phi i32* [ %.4331, %2982 ], [ %.4331, %2988 ]
  %.14326.ph356 = phi i32* [ %.4316, %2982 ], [ %.4316, %2988 ]
  %.14311.ph357 = phi i32 [ %.4301, %2982 ], [ %.4301, %2988 ]
  %.14296.ph358 = phi i32 [ %.4286, %2982 ], [ %.4286, %2988 ]
  %.10281.ph359 = phi i32 [ %.2273, %2982 ], [ %.2273, %2988 ]
  %.10270.ph360 = phi i32 [ %.2262, %2982 ], [ %.2262, %2988 ]
  %.11259.ph361 = phi i32 [ %.3251, %2982 ], [ %.3251, %2988 ]
  %.18246.ph362 = phi i32 [ %.10238, %2982 ], [ %.10238, %2988 ]
  %.8227.ph363 = phi i32 [ %.0219, %2982 ], [ %.0219, %2988 ]
  %.13218.ph364 = phi i32 [ %.0205, %2982 ], [ %.0205, %2988 ]
  %.14204.ph365 = phi i32 [ %.3193, %2982 ], [ %.3193, %2988 ]
  %.11189.ph366 = phi i32 [ %.3181, %2982 ], [ %.3181, %2988 ]
  %.8177.ph367 = phi i32 [ %.0169, %2982 ], [ %.0169, %2988 ]
  %.14168.ph368 = phi i32 [ %.4158, %2982 ], [ %.4158, %2988 ]
  %.14153.ph369 = phi i32 [ %.4143, %2982 ], [ %.4143, %2988 ]
  %.11138.ph370 = phi i32 [ %.3130, %2982 ], [ %.3130, %2988 ]
  %.20126.ph371 = phi i32 [ %.12118, %2982 ], [ %.12118, %2988 ]
  %.21105.ph372 = phi i32 [ %.1397, %2982 ], [ %.1397, %2988 ]
  %.2283.ph373 = phi i32 [ %.1475, %2982 ], [ %.1475, %2988 ]
  %.1860.ph374 = phi i32 [ %.1052, %2982 ], [ %.1052, %2988 ]
  %.2841.ph375 = phi i32 [ %.1831, %2982 ], [ %.1831, %2988 ]
  %.40.ph376 = phi i32 [ %2987, %2982 ], [ %2987, %2988 ]
  %.03.ph377 = phi i32 [ -4, %2982 ], [ -4, %2988 ]
  br label %4045

.loopexit379:                                     ; preds = %.lr.ph463
  %.14356.ph380 = phi i32* [ %.9351, %.lr.ph463 ]
  %.14341.ph381 = phi i32* [ %.9336, %.lr.ph463 ]
  %.14326.ph382 = phi i32* [ %.9321, %.lr.ph463 ]
  %.14311.ph383 = phi i32 [ %.9306, %.lr.ph463 ]
  %.14296.ph384 = phi i32 [ %.9291, %.lr.ph463 ]
  %.10281.ph385 = phi i32 [ %.6277, %.lr.ph463 ]
  %.10270.ph386 = phi i32 [ %.6266, %.lr.ph463 ]
  %.11259.ph387 = phi i32 [ %.7255, %.lr.ph463 ]
  %.18246.ph388 = phi i32 [ %.14242, %.lr.ph463 ]
  %.8227.ph389 = phi i32 [ %.4223, %.lr.ph463 ]
  %.13218.ph390 = phi i32 [ %.6211, %.lr.ph463 ]
  %.14204.ph391 = phi i32 [ %.7197, %.lr.ph463 ]
  %.11189.ph392 = phi i32 [ %.7185, %.lr.ph463 ]
  %.8177.ph393 = phi i32 [ %.4173, %.lr.ph463 ]
  %.14168.ph394 = phi i32 [ %.9163, %.lr.ph463 ]
  %.14153.ph395 = phi i32 [ %.9148, %.lr.ph463 ]
  %.11138.ph396 = phi i32 [ %.7134, %.lr.ph463 ]
  %.20126.ph397 = phi i32 [ %.16122, %.lr.ph463 ]
  %.21105.ph398 = phi i32 [ %.17101, %.lr.ph463 ]
  %.2283.ph399 = phi i32 [ %.1879, %.lr.ph463 ]
  %.1860.ph400 = phi i32 [ %.1456, %.lr.ph463 ]
  %.2841.ph401 = phi i32 [ %.2235, %.lr.ph463 ]
  %.40.ph402 = phi i32 [ %.28, %.lr.ph463 ]
  %.03.ph403 = phi i32 [ 0, %.lr.ph463 ]
  br label %4045

.loopexit404:                                     ; preds = %.lr.ph466
  %.14356.ph405 = phi i32* [ %.7349, %.lr.ph466 ]
  %.14341.ph406 = phi i32* [ %.7334, %.lr.ph466 ]
  %.14326.ph407 = phi i32* [ %.7319, %.lr.ph466 ]
  %.14311.ph408 = phi i32 [ %.7304, %.lr.ph466 ]
  %.14296.ph409 = phi i32 [ %.7289, %.lr.ph466 ]
  %.10281.ph410 = phi i32 [ %.4275, %.lr.ph466 ]
  %.10270.ph411 = phi i32 [ %.4264, %.lr.ph466 ]
  %.11259.ph412 = phi i32 [ %.5253, %.lr.ph466 ]
  %.18246.ph413 = phi i32 [ %.12240, %.lr.ph466 ]
  %.8227.ph414 = phi i32 [ %.2221, %.lr.ph466 ]
  %.13218.ph415 = phi i32 [ %.4209, %.lr.ph466 ]
  %.14204.ph416 = phi i32 [ %.5195, %.lr.ph466 ]
  %.11189.ph417 = phi i32 [ %.5183, %.lr.ph466 ]
  %.8177.ph418 = phi i32 [ %.2171, %.lr.ph466 ]
  %.14168.ph419 = phi i32 [ %.7161, %.lr.ph466 ]
  %.14153.ph420 = phi i32 [ %.7146, %.lr.ph466 ]
  %.11138.ph421 = phi i32 [ %.5132, %.lr.ph466 ]
  %.20126.ph422 = phi i32 [ %.14120, %.lr.ph466 ]
  %.21105.ph423 = phi i32 [ %.1599, %.lr.ph466 ]
  %.2283.ph424 = phi i32 [ %.1677, %.lr.ph466 ]
  %.1860.ph425 = phi i32 [ %.1254, %.lr.ph466 ]
  %.2841.ph426 = phi i32 [ %.2033, %.lr.ph466 ]
  %.40.ph427 = phi i32 [ %.26, %.lr.ph466 ]
  %.03.ph428 = phi i32 [ 0, %.lr.ph466 ]
  br label %4045

.loopexit429:                                     ; preds = %.lr.ph469
  %.14356.ph430 = phi i32* [ %.13355, %.lr.ph469 ]
  %.14341.ph431 = phi i32* [ %.13340, %.lr.ph469 ]
  %.14326.ph432 = phi i32* [ %.13325, %.lr.ph469 ]
  %.14311.ph433 = phi i32 [ %.13310, %.lr.ph469 ]
  %.14296.ph434 = phi i32 [ %.13295, %.lr.ph469 ]
  %.10281.ph435 = phi i32 [ %.9280, %.lr.ph469 ]
  %.10270.ph436 = phi i32 [ %.9269, %.lr.ph469 ]
  %.11259.ph437 = phi i32 [ %.10258, %.lr.ph469 ]
  %.18246.ph438 = phi i32 [ %.17245, %.lr.ph469 ]
  %.8227.ph439 = phi i32 [ %.7226, %.lr.ph469 ]
  %.13218.ph440 = phi i32 [ %.12217, %.lr.ph469 ]
  %.14204.ph441 = phi i32 [ %.13203, %.lr.ph469 ]
  %.11189.ph442 = phi i32 [ %.10188, %.lr.ph469 ]
  %.8177.ph443 = phi i32 [ %.7176, %.lr.ph469 ]
  %.14168.ph444 = phi i32 [ %.13167, %.lr.ph469 ]
  %.14153.ph445 = phi i32 [ %.13152, %.lr.ph469 ]
  %.11138.ph446 = phi i32 [ %.10137, %.lr.ph469 ]
  %.20126.ph447 = phi i32 [ %.19125, %.lr.ph469 ]
  %.21105.ph448 = phi i32 [ %.20104, %.lr.ph469 ]
  %.2283.ph449 = phi i32 [ %.2182, %.lr.ph469 ]
  %.1860.ph450 = phi i32 [ %.1759, %.lr.ph469 ]
  %.2841.ph451 = phi i32 [ %.2538, %.lr.ph469 ]
  %.40.ph452 = phi i32 [ %.31, %.lr.ph469 ]
  %.03.ph453 = phi i32 [ 0, %.lr.ph469 ]
  br label %4045

.loopexit454:                                     ; preds = %.lr.ph472
  %.14356.ph455 = phi i32* [ %.11353, %.lr.ph472 ]
  %.14341.ph456 = phi i32* [ %.11338, %.lr.ph472 ]
  %.14326.ph457 = phi i32* [ %.11323, %.lr.ph472 ]
  %.14311.ph458 = phi i32 [ %.11308, %.lr.ph472 ]
  %.14296.ph459 = phi i32 [ %.11293, %.lr.ph472 ]
  %.10281.ph460 = phi i32 [ %.7278, %.lr.ph472 ]
  %.10270.ph461 = phi i32 [ %.7267, %.lr.ph472 ]
  %.11259.ph462 = phi i32 [ %.8256, %.lr.ph472 ]
  %.18246.ph463 = phi i32 [ %.15243, %.lr.ph472 ]
  %.8227.ph464 = phi i32 [ %.5224, %.lr.ph472 ]
  %.13218.ph465 = phi i32 [ %.10215, %.lr.ph472 ]
  %.14204.ph466 = phi i32 [ %.11201, %.lr.ph472 ]
  %.11189.ph467 = phi i32 [ %.8186, %.lr.ph472 ]
  %.8177.ph468 = phi i32 [ %.5174, %.lr.ph472 ]
  %.14168.ph469 = phi i32 [ %.11165, %.lr.ph472 ]
  %.14153.ph470 = phi i32 [ %.11150, %.lr.ph472 ]
  %.11138.ph471 = phi i32 [ %.8135, %.lr.ph472 ]
  %.20126.ph472 = phi i32 [ %.17123, %.lr.ph472 ]
  %.21105.ph473 = phi i32 [ %.18102, %.lr.ph472 ]
  %.2283.ph474 = phi i32 [ %.1980, %.lr.ph472 ]
  %.1860.ph475 = phi i32 [ %.1557, %.lr.ph472 ]
  %.2841.ph476 = phi i32 [ %.2336, %.lr.ph472 ]
  %.40.ph477 = phi i32 [ %.29, %.lr.ph472 ]
  %.03.ph478 = phi i32 [ 0, %.lr.ph472 ]
  br label %4045

.loopexit481:                                     ; preds = %.lr.ph508
  %.14356.ph482 = phi i32* [ %.3345, %.lr.ph508 ]
  %.14341.ph483 = phi i32* [ %.3330, %.lr.ph508 ]
  %.14326.ph484 = phi i32* [ %.3315, %.lr.ph508 ]
  %.14311.ph485 = phi i32 [ %.3300, %.lr.ph508 ]
  %.14296.ph486 = phi i32 [ %.3285, %.lr.ph508 ]
  %.10281.ph487 = phi i32 [ %.1272, %.lr.ph508 ]
  %.10270.ph488 = phi i32 [ %.1261, %.lr.ph508 ]
  %.11259.ph489 = phi i32 [ %.2250, %.lr.ph508 ]
  %.18246.ph490 = phi i32 [ %.9237, %.lr.ph508 ]
  %.8227.ph491 = phi i32 [ %61, %.lr.ph508 ]
  %.13218.ph492 = phi i32 [ %59, %.lr.ph508 ]
  %.14204.ph493 = phi i32 [ %.2192, %.lr.ph508 ]
  %.11189.ph494 = phi i32 [ %.2180, %.lr.ph508 ]
  %.8177.ph495 = phi i32 [ %53, %.lr.ph508 ]
  %.14168.ph496 = phi i32 [ %.3157, %.lr.ph508 ]
  %.14153.ph497 = phi i32 [ %.3142, %.lr.ph508 ]
  %.11138.ph498 = phi i32 [ %.2129, %.lr.ph508 ]
  %.20126.ph499 = phi i32 [ %.11117, %.lr.ph508 ]
  %.21105.ph500 = phi i32 [ %.1296, %.lr.ph508 ]
  %.2283.ph501 = phi i32 [ %.1374, %.lr.ph508 ]
  %.1860.ph502 = phi i32 [ %.951, %.lr.ph508 ]
  %.2841.ph503 = phi i32 [ %.1730, %.lr.ph508 ]
  %.40.ph504 = phi i32 [ %.23, %.lr.ph508 ]
  %.03.ph505 = phi i32 [ 0, %.lr.ph508 ]
  br label %4045

.loopexit506:                                     ; preds = %.lr.ph511
  %.14356.ph507 = phi i32* [ %.1343, %.lr.ph511 ]
  %.14341.ph508 = phi i32* [ %.1328, %.lr.ph511 ]
  %.14326.ph509 = phi i32* [ %.1313, %.lr.ph511 ]
  %.14311.ph510 = phi i32 [ %.1298, %.lr.ph511 ]
  %.14296.ph511 = phi i32 [ %.1283, %.lr.ph511 ]
  %.10281.ph512 = phi i32 [ %71, %.lr.ph511 ]
  %.10270.ph513 = phi i32 [ %69, %.lr.ph511 ]
  %.11259.ph514 = phi i32 [ %.0248, %.lr.ph511 ]
  %.18246.ph515 = phi i32 [ %.7235, %.lr.ph511 ]
  %.8227.ph516 = phi i32 [ %61, %.lr.ph511 ]
  %.13218.ph517 = phi i32 [ %59, %.lr.ph511 ]
  %.14204.ph518 = phi i32 [ %.0190, %.lr.ph511 ]
  %.11189.ph519 = phi i32 [ %.0178, %.lr.ph511 ]
  %.8177.ph520 = phi i32 [ %53, %.lr.ph511 ]
  %.14168.ph521 = phi i32 [ %.1155, %.lr.ph511 ]
  %.14153.ph522 = phi i32 [ %.1140, %.lr.ph511 ]
  %.11138.ph523 = phi i32 [ %.0127, %.lr.ph511 ]
  %.20126.ph524 = phi i32 [ %.9115, %.lr.ph511 ]
  %.21105.ph525 = phi i32 [ %.1094, %.lr.ph511 ]
  %.2283.ph526 = phi i32 [ %.1172, %.lr.ph511 ]
  %.1860.ph527 = phi i32 [ %.749, %.lr.ph511 ]
  %.2841.ph528 = phi i32 [ %.1528, %.lr.ph511 ]
  %.40.ph529 = phi i32 [ %.21, %.lr.ph511 ]
  %.03.ph530 = phi i32 [ 0, %.lr.ph511 ]
  br label %4045

.loopexit531:                                     ; preds = %.lr.ph566
  %.14356.ph532 = phi i32* [ %81, %.lr.ph566 ]
  %.14341.ph533 = phi i32* [ %79, %.lr.ph566 ]
  %.14326.ph534 = phi i32* [ %77, %.lr.ph566 ]
  %.14311.ph535 = phi i32 [ %75, %.lr.ph566 ]
  %.14296.ph536 = phi i32 [ %73, %.lr.ph566 ]
  %.10281.ph537 = phi i32 [ %71, %.lr.ph566 ]
  %.10270.ph538 = phi i32 [ %69, %.lr.ph566 ]
  %.11259.ph539 = phi i32 [ %67, %.lr.ph566 ]
  %.18246.ph540 = phi i32 [ %63, %.lr.ph566 ]
  %.8227.ph541 = phi i32 [ %61, %.lr.ph566 ]
  %.13218.ph542 = phi i32 [ %59, %.lr.ph566 ]
  %.14204.ph543 = phi i32 [ %57, %.lr.ph566 ]
  %.11189.ph544 = phi i32 [ %55, %.lr.ph566 ]
  %.8177.ph545 = phi i32 [ %53, %.lr.ph566 ]
  %.14168.ph546 = phi i32 [ %51, %.lr.ph566 ]
  %.14153.ph547 = phi i32 [ %49, %.lr.ph566 ]
  %.11138.ph548 = phi i32 [ %47, %.lr.ph566 ]
  %.20126.ph549 = phi i32 [ %45, %.lr.ph566 ]
  %.21105.ph550 = phi i32 [ %.084, %.lr.ph566 ]
  %.2283.ph551 = phi i32 [ %.162, %.lr.ph566 ]
  %.1860.ph552 = phi i32 [ %39, %.lr.ph566 ]
  %.2841.ph553 = phi i32 [ %.518, %.lr.ph566 ]
  %.40.ph554 = phi i32 [ %.8, %.lr.ph566 ]
  %.03.ph555 = phi i32 [ 0, %.lr.ph566 ]
  br label %4045

.loopexit556:                                     ; preds = %.lr.ph569
  %.14356.ph557 = phi i32* [ %81, %.lr.ph569 ]
  %.14341.ph558 = phi i32* [ %79, %.lr.ph569 ]
  %.14326.ph559 = phi i32* [ %77, %.lr.ph569 ]
  %.14311.ph560 = phi i32 [ %75, %.lr.ph569 ]
  %.14296.ph561 = phi i32 [ %73, %.lr.ph569 ]
  %.10281.ph562 = phi i32 [ %71, %.lr.ph569 ]
  %.10270.ph563 = phi i32 [ %69, %.lr.ph569 ]
  %.11259.ph564 = phi i32 [ %67, %.lr.ph569 ]
  %.18246.ph565 = phi i32 [ %63, %.lr.ph569 ]
  %.8227.ph566 = phi i32 [ %61, %.lr.ph569 ]
  %.13218.ph567 = phi i32 [ %59, %.lr.ph569 ]
  %.14204.ph568 = phi i32 [ %57, %.lr.ph569 ]
  %.11189.ph569 = phi i32 [ %55, %.lr.ph569 ]
  %.8177.ph570 = phi i32 [ %53, %.lr.ph569 ]
  %.14168.ph571 = phi i32 [ %51, %.lr.ph569 ]
  %.14153.ph572 = phi i32 [ %49, %.lr.ph569 ]
  %.11138.ph573 = phi i32 [ %47, %.lr.ph569 ]
  %.20126.ph574 = phi i32 [ %45, %.lr.ph569 ]
  %.21105.ph575 = phi i32 [ %43, %.lr.ph569 ]
  %.2283.ph576 = phi i32 [ %.061, %.lr.ph569 ]
  %.1860.ph577 = phi i32 [ %39, %.lr.ph569 ]
  %.2841.ph578 = phi i32 [ %.417, %.lr.ph569 ]
  %.40.ph579 = phi i32 [ %.7, %.lr.ph569 ]
  %.03.ph580 = phi i32 [ 0, %.lr.ph569 ]
  br label %4045

.loopexit583:                                     ; preds = %.lr.ph576
  %.14356.ph584 = phi i32* [ %81, %.lr.ph576 ]
  %.14341.ph585 = phi i32* [ %79, %.lr.ph576 ]
  %.14326.ph586 = phi i32* [ %77, %.lr.ph576 ]
  %.14311.ph587 = phi i32 [ %75, %.lr.ph576 ]
  %.14296.ph588 = phi i32 [ %73, %.lr.ph576 ]
  %.10281.ph589 = phi i32 [ %71, %.lr.ph576 ]
  %.10270.ph590 = phi i32 [ %69, %.lr.ph576 ]
  %.11259.ph591 = phi i32 [ %67, %.lr.ph576 ]
  %.18246.ph592 = phi i32 [ %63, %.lr.ph576 ]
  %.8227.ph593 = phi i32 [ %61, %.lr.ph576 ]
  %.13218.ph594 = phi i32 [ %59, %.lr.ph576 ]
  %.14204.ph595 = phi i32 [ %57, %.lr.ph576 ]
  %.11189.ph596 = phi i32 [ %55, %.lr.ph576 ]
  %.8177.ph597 = phi i32 [ %53, %.lr.ph576 ]
  %.14168.ph598 = phi i32 [ %51, %.lr.ph576 ]
  %.14153.ph599 = phi i32 [ %49, %.lr.ph576 ]
  %.11138.ph600 = phi i32 [ %47, %.lr.ph576 ]
  %.20126.ph601 = phi i32 [ %45, %.lr.ph576 ]
  %.21105.ph602 = phi i32 [ %43, %.lr.ph576 ]
  %.2283.ph603 = phi i32 [ %41, %.lr.ph576 ]
  %.1860.ph604 = phi i32 [ %39, %.lr.ph576 ]
  %.2841.ph605 = phi i32 [ %37, %.lr.ph576 ]
  %.40.ph606 = phi i32 [ %35, %.lr.ph576 ]
  %.03.ph607 = phi i32 [ 0, %.lr.ph576 ]
  br label %4045

.loopexit608:                                     ; preds = %.lr.ph579
  %.14356.ph609 = phi i32* [ %81, %.lr.ph579 ]
  %.14341.ph610 = phi i32* [ %79, %.lr.ph579 ]
  %.14326.ph611 = phi i32* [ %77, %.lr.ph579 ]
  %.14311.ph612 = phi i32 [ %75, %.lr.ph579 ]
  %.14296.ph613 = phi i32 [ %73, %.lr.ph579 ]
  %.10281.ph614 = phi i32 [ %71, %.lr.ph579 ]
  %.10270.ph615 = phi i32 [ %69, %.lr.ph579 ]
  %.11259.ph616 = phi i32 [ %67, %.lr.ph579 ]
  %.18246.ph617 = phi i32 [ %63, %.lr.ph579 ]
  %.8227.ph618 = phi i32 [ %61, %.lr.ph579 ]
  %.13218.ph619 = phi i32 [ %59, %.lr.ph579 ]
  %.14204.ph620 = phi i32 [ %57, %.lr.ph579 ]
  %.11189.ph621 = phi i32 [ %55, %.lr.ph579 ]
  %.8177.ph622 = phi i32 [ %53, %.lr.ph579 ]
  %.14168.ph623 = phi i32 [ %51, %.lr.ph579 ]
  %.14153.ph624 = phi i32 [ %49, %.lr.ph579 ]
  %.11138.ph625 = phi i32 [ %47, %.lr.ph579 ]
  %.20126.ph626 = phi i32 [ %45, %.lr.ph579 ]
  %.21105.ph627 = phi i32 [ %43, %.lr.ph579 ]
  %.2283.ph628 = phi i32 [ %41, %.lr.ph579 ]
  %.1860.ph629 = phi i32 [ %39, %.lr.ph579 ]
  %.2841.ph630 = phi i32 [ %37, %.lr.ph579 ]
  %.40.ph631 = phi i32 [ %35, %.lr.ph579 ]
  %.03.ph632 = phi i32 [ 0, %.lr.ph579 ]
  br label %4045

.loopexit633:                                     ; preds = %.lr.ph582
  %.14356.ph634 = phi i32* [ %81, %.lr.ph582 ]
  %.14341.ph635 = phi i32* [ %79, %.lr.ph582 ]
  %.14326.ph636 = phi i32* [ %77, %.lr.ph582 ]
  %.14311.ph637 = phi i32 [ %75, %.lr.ph582 ]
  %.14296.ph638 = phi i32 [ %73, %.lr.ph582 ]
  %.10281.ph639 = phi i32 [ %71, %.lr.ph582 ]
  %.10270.ph640 = phi i32 [ %69, %.lr.ph582 ]
  %.11259.ph641 = phi i32 [ %67, %.lr.ph582 ]
  %.18246.ph642 = phi i32 [ %63, %.lr.ph582 ]
  %.8227.ph643 = phi i32 [ %61, %.lr.ph582 ]
  %.13218.ph644 = phi i32 [ %59, %.lr.ph582 ]
  %.14204.ph645 = phi i32 [ %57, %.lr.ph582 ]
  %.11189.ph646 = phi i32 [ %55, %.lr.ph582 ]
  %.8177.ph647 = phi i32 [ %53, %.lr.ph582 ]
  %.14168.ph648 = phi i32 [ %51, %.lr.ph582 ]
  %.14153.ph649 = phi i32 [ %49, %.lr.ph582 ]
  %.11138.ph650 = phi i32 [ %47, %.lr.ph582 ]
  %.20126.ph651 = phi i32 [ %45, %.lr.ph582 ]
  %.21105.ph652 = phi i32 [ %43, %.lr.ph582 ]
  %.2283.ph653 = phi i32 [ %41, %.lr.ph582 ]
  %.1860.ph654 = phi i32 [ %39, %.lr.ph582 ]
  %.2841.ph655 = phi i32 [ %37, %.lr.ph582 ]
  %.40.ph656 = phi i32 [ %35, %.lr.ph582 ]
  %.03.ph657 = phi i32 [ 0, %.lr.ph582 ]
  br label %4045

.loopexit658:                                     ; preds = %.lr.ph585
  %.14356.ph659 = phi i32* [ %81, %.lr.ph585 ]
  %.14341.ph660 = phi i32* [ %79, %.lr.ph585 ]
  %.14326.ph661 = phi i32* [ %77, %.lr.ph585 ]
  %.14311.ph662 = phi i32 [ %75, %.lr.ph585 ]
  %.14296.ph663 = phi i32 [ %73, %.lr.ph585 ]
  %.10281.ph664 = phi i32 [ %71, %.lr.ph585 ]
  %.10270.ph665 = phi i32 [ %69, %.lr.ph585 ]
  %.11259.ph666 = phi i32 [ %67, %.lr.ph585 ]
  %.18246.ph667 = phi i32 [ %63, %.lr.ph585 ]
  %.8227.ph668 = phi i32 [ %61, %.lr.ph585 ]
  %.13218.ph669 = phi i32 [ %59, %.lr.ph585 ]
  %.14204.ph670 = phi i32 [ %57, %.lr.ph585 ]
  %.11189.ph671 = phi i32 [ %55, %.lr.ph585 ]
  %.8177.ph672 = phi i32 [ %53, %.lr.ph585 ]
  %.14168.ph673 = phi i32 [ %51, %.lr.ph585 ]
  %.14153.ph674 = phi i32 [ %49, %.lr.ph585 ]
  %.11138.ph675 = phi i32 [ %47, %.lr.ph585 ]
  %.20126.ph676 = phi i32 [ %45, %.lr.ph585 ]
  %.21105.ph677 = phi i32 [ %43, %.lr.ph585 ]
  %.2283.ph678 = phi i32 [ %41, %.lr.ph585 ]
  %.1860.ph679 = phi i32 [ %39, %.lr.ph585 ]
  %.2841.ph680 = phi i32 [ %37, %.lr.ph585 ]
  %.40.ph681 = phi i32 [ %35, %.lr.ph585 ]
  %.03.ph682 = phi i32 [ 0, %.lr.ph585 ]
  br label %4045

.loopexit683:                                     ; preds = %.lr.ph588
  %.14356.ph684 = phi i32* [ %81, %.lr.ph588 ]
  %.14341.ph685 = phi i32* [ %79, %.lr.ph588 ]
  %.14326.ph686 = phi i32* [ %77, %.lr.ph588 ]
  %.14311.ph687 = phi i32 [ %75, %.lr.ph588 ]
  %.14296.ph688 = phi i32 [ %73, %.lr.ph588 ]
  %.10281.ph689 = phi i32 [ %71, %.lr.ph588 ]
  %.10270.ph690 = phi i32 [ %69, %.lr.ph588 ]
  %.11259.ph691 = phi i32 [ %67, %.lr.ph588 ]
  %.18246.ph692 = phi i32 [ %63, %.lr.ph588 ]
  %.8227.ph693 = phi i32 [ %61, %.lr.ph588 ]
  %.13218.ph694 = phi i32 [ %59, %.lr.ph588 ]
  %.14204.ph695 = phi i32 [ %57, %.lr.ph588 ]
  %.11189.ph696 = phi i32 [ %55, %.lr.ph588 ]
  %.8177.ph697 = phi i32 [ %53, %.lr.ph588 ]
  %.14168.ph698 = phi i32 [ %51, %.lr.ph588 ]
  %.14153.ph699 = phi i32 [ %49, %.lr.ph588 ]
  %.11138.ph700 = phi i32 [ %47, %.lr.ph588 ]
  %.20126.ph701 = phi i32 [ %45, %.lr.ph588 ]
  %.21105.ph702 = phi i32 [ %43, %.lr.ph588 ]
  %.2283.ph703 = phi i32 [ %41, %.lr.ph588 ]
  %.1860.ph704 = phi i32 [ %39, %.lr.ph588 ]
  %.2841.ph705 = phi i32 [ %37, %.lr.ph588 ]
  %.40.ph706 = phi i32 [ %35, %.lr.ph588 ]
  %.03.ph707 = phi i32 [ 0, %.lr.ph588 ]
  br label %4045

.loopexit708:                                     ; preds = %.lr.ph591
  %.14356.ph709 = phi i32* [ %81, %.lr.ph591 ]
  %.14341.ph710 = phi i32* [ %79, %.lr.ph591 ]
  %.14326.ph711 = phi i32* [ %77, %.lr.ph591 ]
  %.14311.ph712 = phi i32 [ %75, %.lr.ph591 ]
  %.14296.ph713 = phi i32 [ %73, %.lr.ph591 ]
  %.10281.ph714 = phi i32 [ %71, %.lr.ph591 ]
  %.10270.ph715 = phi i32 [ %69, %.lr.ph591 ]
  %.11259.ph716 = phi i32 [ %67, %.lr.ph591 ]
  %.18246.ph717 = phi i32 [ %63, %.lr.ph591 ]
  %.8227.ph718 = phi i32 [ %61, %.lr.ph591 ]
  %.13218.ph719 = phi i32 [ %59, %.lr.ph591 ]
  %.14204.ph720 = phi i32 [ %57, %.lr.ph591 ]
  %.11189.ph721 = phi i32 [ %55, %.lr.ph591 ]
  %.8177.ph722 = phi i32 [ %53, %.lr.ph591 ]
  %.14168.ph723 = phi i32 [ %51, %.lr.ph591 ]
  %.14153.ph724 = phi i32 [ %49, %.lr.ph591 ]
  %.11138.ph725 = phi i32 [ %47, %.lr.ph591 ]
  %.20126.ph726 = phi i32 [ %45, %.lr.ph591 ]
  %.21105.ph727 = phi i32 [ %43, %.lr.ph591 ]
  %.2283.ph728 = phi i32 [ %41, %.lr.ph591 ]
  %.1860.ph729 = phi i32 [ %39, %.lr.ph591 ]
  %.2841.ph730 = phi i32 [ %37, %.lr.ph591 ]
  %.40.ph731 = phi i32 [ %35, %.lr.ph591 ]
  %.03.ph732 = phi i32 [ 0, %.lr.ph591 ]
  br label %4045

.loopexit733:                                     ; preds = %.lr.ph594
  %.14356.ph734 = phi i32* [ %81, %.lr.ph594 ]
  %.14341.ph735 = phi i32* [ %79, %.lr.ph594 ]
  %.14326.ph736 = phi i32* [ %77, %.lr.ph594 ]
  %.14311.ph737 = phi i32 [ %75, %.lr.ph594 ]
  %.14296.ph738 = phi i32 [ %73, %.lr.ph594 ]
  %.10281.ph739 = phi i32 [ %71, %.lr.ph594 ]
  %.10270.ph740 = phi i32 [ %69, %.lr.ph594 ]
  %.11259.ph741 = phi i32 [ %67, %.lr.ph594 ]
  %.18246.ph742 = phi i32 [ %63, %.lr.ph594 ]
  %.8227.ph743 = phi i32 [ %61, %.lr.ph594 ]
  %.13218.ph744 = phi i32 [ %59, %.lr.ph594 ]
  %.14204.ph745 = phi i32 [ %57, %.lr.ph594 ]
  %.11189.ph746 = phi i32 [ %55, %.lr.ph594 ]
  %.8177.ph747 = phi i32 [ %53, %.lr.ph594 ]
  %.14168.ph748 = phi i32 [ %51, %.lr.ph594 ]
  %.14153.ph749 = phi i32 [ %49, %.lr.ph594 ]
  %.11138.ph750 = phi i32 [ %47, %.lr.ph594 ]
  %.20126.ph751 = phi i32 [ %45, %.lr.ph594 ]
  %.21105.ph752 = phi i32 [ %43, %.lr.ph594 ]
  %.2283.ph753 = phi i32 [ %41, %.lr.ph594 ]
  %.1860.ph754 = phi i32 [ %39, %.lr.ph594 ]
  %.2841.ph755 = phi i32 [ %37, %.lr.ph594 ]
  %.40.ph756 = phi i32 [ %35, %.lr.ph594 ]
  %.03.ph757 = phi i32 [ 0, %.lr.ph594 ]
  br label %4045

.loopexit758:                                     ; preds = %.lr.ph597
  %.14356.ph759 = phi i32* [ %81, %.lr.ph597 ]
  %.14341.ph760 = phi i32* [ %79, %.lr.ph597 ]
  %.14326.ph761 = phi i32* [ %77, %.lr.ph597 ]
  %.14311.ph762 = phi i32 [ %75, %.lr.ph597 ]
  %.14296.ph763 = phi i32 [ %73, %.lr.ph597 ]
  %.10281.ph764 = phi i32 [ %71, %.lr.ph597 ]
  %.10270.ph765 = phi i32 [ %69, %.lr.ph597 ]
  %.11259.ph766 = phi i32 [ %67, %.lr.ph597 ]
  %.18246.ph767 = phi i32 [ %63, %.lr.ph597 ]
  %.8227.ph768 = phi i32 [ %61, %.lr.ph597 ]
  %.13218.ph769 = phi i32 [ %59, %.lr.ph597 ]
  %.14204.ph770 = phi i32 [ %57, %.lr.ph597 ]
  %.11189.ph771 = phi i32 [ %55, %.lr.ph597 ]
  %.8177.ph772 = phi i32 [ %53, %.lr.ph597 ]
  %.14168.ph773 = phi i32 [ %51, %.lr.ph597 ]
  %.14153.ph774 = phi i32 [ %49, %.lr.ph597 ]
  %.11138.ph775 = phi i32 [ %47, %.lr.ph597 ]
  %.20126.ph776 = phi i32 [ %45, %.lr.ph597 ]
  %.21105.ph777 = phi i32 [ %43, %.lr.ph597 ]
  %.2283.ph778 = phi i32 [ %41, %.lr.ph597 ]
  %.1860.ph779 = phi i32 [ %39, %.lr.ph597 ]
  %.2841.ph780 = phi i32 [ %37, %.lr.ph597 ]
  %.40.ph781 = phi i32 [ %35, %.lr.ph597 ]
  %.03.ph782 = phi i32 [ 0, %.lr.ph597 ]
  br label %4045

.loopexit783:                                     ; preds = %.lr.ph600
  %.14356.ph784 = phi i32* [ %81, %.lr.ph600 ]
  %.14341.ph785 = phi i32* [ %79, %.lr.ph600 ]
  %.14326.ph786 = phi i32* [ %77, %.lr.ph600 ]
  %.14311.ph787 = phi i32 [ %75, %.lr.ph600 ]
  %.14296.ph788 = phi i32 [ %73, %.lr.ph600 ]
  %.10281.ph789 = phi i32 [ %71, %.lr.ph600 ]
  %.10270.ph790 = phi i32 [ %69, %.lr.ph600 ]
  %.11259.ph791 = phi i32 [ %67, %.lr.ph600 ]
  %.18246.ph792 = phi i32 [ %63, %.lr.ph600 ]
  %.8227.ph793 = phi i32 [ %61, %.lr.ph600 ]
  %.13218.ph794 = phi i32 [ %59, %.lr.ph600 ]
  %.14204.ph795 = phi i32 [ %57, %.lr.ph600 ]
  %.11189.ph796 = phi i32 [ %55, %.lr.ph600 ]
  %.8177.ph797 = phi i32 [ %53, %.lr.ph600 ]
  %.14168.ph798 = phi i32 [ %51, %.lr.ph600 ]
  %.14153.ph799 = phi i32 [ %49, %.lr.ph600 ]
  %.11138.ph800 = phi i32 [ %47, %.lr.ph600 ]
  %.20126.ph801 = phi i32 [ %45, %.lr.ph600 ]
  %.21105.ph802 = phi i32 [ %43, %.lr.ph600 ]
  %.2283.ph803 = phi i32 [ %41, %.lr.ph600 ]
  %.1860.ph804 = phi i32 [ %39, %.lr.ph600 ]
  %.2841.ph805 = phi i32 [ %37, %.lr.ph600 ]
  %.40.ph806 = phi i32 [ %35, %.lr.ph600 ]
  %.03.ph807 = phi i32 [ 0, %.lr.ph600 ]
  br label %4045

.loopexit808:                                     ; preds = %.lr.ph603
  %.14356.ph809 = phi i32* [ %81, %.lr.ph603 ]
  %.14341.ph810 = phi i32* [ %79, %.lr.ph603 ]
  %.14326.ph811 = phi i32* [ %77, %.lr.ph603 ]
  %.14311.ph812 = phi i32 [ %75, %.lr.ph603 ]
  %.14296.ph813 = phi i32 [ %73, %.lr.ph603 ]
  %.10281.ph814 = phi i32 [ %71, %.lr.ph603 ]
  %.10270.ph815 = phi i32 [ %69, %.lr.ph603 ]
  %.11259.ph816 = phi i32 [ %67, %.lr.ph603 ]
  %.18246.ph817 = phi i32 [ %63, %.lr.ph603 ]
  %.8227.ph818 = phi i32 [ %61, %.lr.ph603 ]
  %.13218.ph819 = phi i32 [ %59, %.lr.ph603 ]
  %.14204.ph820 = phi i32 [ %57, %.lr.ph603 ]
  %.11189.ph821 = phi i32 [ %55, %.lr.ph603 ]
  %.8177.ph822 = phi i32 [ %53, %.lr.ph603 ]
  %.14168.ph823 = phi i32 [ %51, %.lr.ph603 ]
  %.14153.ph824 = phi i32 [ %49, %.lr.ph603 ]
  %.11138.ph825 = phi i32 [ %47, %.lr.ph603 ]
  %.20126.ph826 = phi i32 [ %45, %.lr.ph603 ]
  %.21105.ph827 = phi i32 [ %43, %.lr.ph603 ]
  %.2283.ph828 = phi i32 [ %41, %.lr.ph603 ]
  %.1860.ph829 = phi i32 [ %39, %.lr.ph603 ]
  %.2841.ph830 = phi i32 [ %37, %.lr.ph603 ]
  %.40.ph831 = phi i32 [ %35, %.lr.ph603 ]
  %.03.ph832 = phi i32 [ 0, %.lr.ph603 ]
  br label %4045

.loopexit833:                                     ; preds = %.lr.ph606
  %.14356.ph834 = phi i32* [ %81, %.lr.ph606 ]
  %.14341.ph835 = phi i32* [ %79, %.lr.ph606 ]
  %.14326.ph836 = phi i32* [ %77, %.lr.ph606 ]
  %.14311.ph837 = phi i32 [ %75, %.lr.ph606 ]
  %.14296.ph838 = phi i32 [ %73, %.lr.ph606 ]
  %.10281.ph839 = phi i32 [ %71, %.lr.ph606 ]
  %.10270.ph840 = phi i32 [ %69, %.lr.ph606 ]
  %.11259.ph841 = phi i32 [ %67, %.lr.ph606 ]
  %.18246.ph842 = phi i32 [ %63, %.lr.ph606 ]
  %.8227.ph843 = phi i32 [ %61, %.lr.ph606 ]
  %.13218.ph844 = phi i32 [ %59, %.lr.ph606 ]
  %.14204.ph845 = phi i32 [ %57, %.lr.ph606 ]
  %.11189.ph846 = phi i32 [ %55, %.lr.ph606 ]
  %.8177.ph847 = phi i32 [ %53, %.lr.ph606 ]
  %.14168.ph848 = phi i32 [ %51, %.lr.ph606 ]
  %.14153.ph849 = phi i32 [ %49, %.lr.ph606 ]
  %.11138.ph850 = phi i32 [ %47, %.lr.ph606 ]
  %.20126.ph851 = phi i32 [ %45, %.lr.ph606 ]
  %.21105.ph852 = phi i32 [ %43, %.lr.ph606 ]
  %.2283.ph853 = phi i32 [ %41, %.lr.ph606 ]
  %.1860.ph854 = phi i32 [ %39, %.lr.ph606 ]
  %.2841.ph855 = phi i32 [ %37, %.lr.ph606 ]
  %.40.ph856 = phi i32 [ %35, %.lr.ph606 ]
  %.03.ph857 = phi i32 [ 0, %.lr.ph606 ]
  br label %4045

.loopexit858:                                     ; preds = %.lr.ph609
  %.14356.ph859 = phi i32* [ %81, %.lr.ph609 ]
  %.14341.ph860 = phi i32* [ %79, %.lr.ph609 ]
  %.14326.ph861 = phi i32* [ %77, %.lr.ph609 ]
  %.14311.ph862 = phi i32 [ %75, %.lr.ph609 ]
  %.14296.ph863 = phi i32 [ %73, %.lr.ph609 ]
  %.10281.ph864 = phi i32 [ %71, %.lr.ph609 ]
  %.10270.ph865 = phi i32 [ %69, %.lr.ph609 ]
  %.11259.ph866 = phi i32 [ %67, %.lr.ph609 ]
  %.18246.ph867 = phi i32 [ %63, %.lr.ph609 ]
  %.8227.ph868 = phi i32 [ %61, %.lr.ph609 ]
  %.13218.ph869 = phi i32 [ %59, %.lr.ph609 ]
  %.14204.ph870 = phi i32 [ %57, %.lr.ph609 ]
  %.11189.ph871 = phi i32 [ %55, %.lr.ph609 ]
  %.8177.ph872 = phi i32 [ %53, %.lr.ph609 ]
  %.14168.ph873 = phi i32 [ %51, %.lr.ph609 ]
  %.14153.ph874 = phi i32 [ %49, %.lr.ph609 ]
  %.11138.ph875 = phi i32 [ %47, %.lr.ph609 ]
  %.20126.ph876 = phi i32 [ %45, %.lr.ph609 ]
  %.21105.ph877 = phi i32 [ %43, %.lr.ph609 ]
  %.2283.ph878 = phi i32 [ %41, %.lr.ph609 ]
  %.1860.ph879 = phi i32 [ %39, %.lr.ph609 ]
  %.2841.ph880 = phi i32 [ %37, %.lr.ph609 ]
  %.40.ph881 = phi i32 [ %35, %.lr.ph609 ]
  %.03.ph882 = phi i32 [ 0, %.lr.ph609 ]
  br label %4045

.loopexit883:                                     ; preds = %.lr.ph612
  %.14356.ph884 = phi i32* [ %81, %.lr.ph612 ]
  %.14341.ph885 = phi i32* [ %79, %.lr.ph612 ]
  %.14326.ph886 = phi i32* [ %77, %.lr.ph612 ]
  %.14311.ph887 = phi i32 [ %75, %.lr.ph612 ]
  %.14296.ph888 = phi i32 [ %73, %.lr.ph612 ]
  %.10281.ph889 = phi i32 [ %71, %.lr.ph612 ]
  %.10270.ph890 = phi i32 [ %69, %.lr.ph612 ]
  %.11259.ph891 = phi i32 [ %67, %.lr.ph612 ]
  %.18246.ph892 = phi i32 [ %63, %.lr.ph612 ]
  %.8227.ph893 = phi i32 [ %61, %.lr.ph612 ]
  %.13218.ph894 = phi i32 [ %59, %.lr.ph612 ]
  %.14204.ph895 = phi i32 [ %57, %.lr.ph612 ]
  %.11189.ph896 = phi i32 [ %55, %.lr.ph612 ]
  %.8177.ph897 = phi i32 [ %53, %.lr.ph612 ]
  %.14168.ph898 = phi i32 [ %51, %.lr.ph612 ]
  %.14153.ph899 = phi i32 [ %49, %.lr.ph612 ]
  %.11138.ph900 = phi i32 [ %47, %.lr.ph612 ]
  %.20126.ph901 = phi i32 [ %45, %.lr.ph612 ]
  %.21105.ph902 = phi i32 [ %43, %.lr.ph612 ]
  %.2283.ph903 = phi i32 [ %41, %.lr.ph612 ]
  %.1860.ph904 = phi i32 [ %39, %.lr.ph612 ]
  %.2841.ph905 = phi i32 [ %37, %.lr.ph612 ]
  %.40.ph906 = phi i32 [ %35, %.lr.ph612 ]
  %.03.ph907 = phi i32 [ 0, %.lr.ph612 ]
  br label %4045

.loopexit908:                                     ; preds = %.lr.ph615
  %.14356.ph909 = phi i32* [ %81, %.lr.ph615 ]
  %.14341.ph910 = phi i32* [ %79, %.lr.ph615 ]
  %.14326.ph911 = phi i32* [ %77, %.lr.ph615 ]
  %.14311.ph912 = phi i32 [ %75, %.lr.ph615 ]
  %.14296.ph913 = phi i32 [ %73, %.lr.ph615 ]
  %.10281.ph914 = phi i32 [ %71, %.lr.ph615 ]
  %.10270.ph915 = phi i32 [ %69, %.lr.ph615 ]
  %.11259.ph916 = phi i32 [ %67, %.lr.ph615 ]
  %.18246.ph917 = phi i32 [ %63, %.lr.ph615 ]
  %.8227.ph918 = phi i32 [ %61, %.lr.ph615 ]
  %.13218.ph919 = phi i32 [ %59, %.lr.ph615 ]
  %.14204.ph920 = phi i32 [ %57, %.lr.ph615 ]
  %.11189.ph921 = phi i32 [ %55, %.lr.ph615 ]
  %.8177.ph922 = phi i32 [ %53, %.lr.ph615 ]
  %.14168.ph923 = phi i32 [ %51, %.lr.ph615 ]
  %.14153.ph924 = phi i32 [ %49, %.lr.ph615 ]
  %.11138.ph925 = phi i32 [ %47, %.lr.ph615 ]
  %.20126.ph926 = phi i32 [ %45, %.lr.ph615 ]
  %.21105.ph927 = phi i32 [ %43, %.lr.ph615 ]
  %.2283.ph928 = phi i32 [ %41, %.lr.ph615 ]
  %.1860.ph929 = phi i32 [ %39, %.lr.ph615 ]
  %.2841.ph930 = phi i32 [ %37, %.lr.ph615 ]
  %.40.ph931 = phi i32 [ %35, %.lr.ph615 ]
  %.03.ph932 = phi i32 [ 0, %.lr.ph615 ]
  br label %4045

.loopexit933:                                     ; preds = %.lr.ph618
  %.14356.ph934 = phi i32* [ %81, %.lr.ph618 ]
  %.14341.ph935 = phi i32* [ %79, %.lr.ph618 ]
  %.14326.ph936 = phi i32* [ %77, %.lr.ph618 ]
  %.14311.ph937 = phi i32 [ %75, %.lr.ph618 ]
  %.14296.ph938 = phi i32 [ %73, %.lr.ph618 ]
  %.10281.ph939 = phi i32 [ %71, %.lr.ph618 ]
  %.10270.ph940 = phi i32 [ %69, %.lr.ph618 ]
  %.11259.ph941 = phi i32 [ %67, %.lr.ph618 ]
  %.18246.ph942 = phi i32 [ %63, %.lr.ph618 ]
  %.8227.ph943 = phi i32 [ %61, %.lr.ph618 ]
  %.13218.ph944 = phi i32 [ %59, %.lr.ph618 ]
  %.14204.ph945 = phi i32 [ %57, %.lr.ph618 ]
  %.11189.ph946 = phi i32 [ %55, %.lr.ph618 ]
  %.8177.ph947 = phi i32 [ %53, %.lr.ph618 ]
  %.14168.ph948 = phi i32 [ %51, %.lr.ph618 ]
  %.14153.ph949 = phi i32 [ %49, %.lr.ph618 ]
  %.11138.ph950 = phi i32 [ %47, %.lr.ph618 ]
  %.20126.ph951 = phi i32 [ %45, %.lr.ph618 ]
  %.21105.ph952 = phi i32 [ %43, %.lr.ph618 ]
  %.2283.ph953 = phi i32 [ %41, %.lr.ph618 ]
  %.1860.ph954 = phi i32 [ %39, %.lr.ph618 ]
  %.2841.ph955 = phi i32 [ %37, %.lr.ph618 ]
  %.40.ph956 = phi i32 [ %35, %.lr.ph618 ]
  %.03.ph957 = phi i32 [ 0, %.lr.ph618 ]
  br label %4045

.loopexit958:                                     ; preds = %.lr.ph621
  %.14356.ph959 = phi i32* [ %81, %.lr.ph621 ]
  %.14341.ph960 = phi i32* [ %79, %.lr.ph621 ]
  %.14326.ph961 = phi i32* [ %77, %.lr.ph621 ]
  %.14311.ph962 = phi i32 [ %75, %.lr.ph621 ]
  %.14296.ph963 = phi i32 [ %73, %.lr.ph621 ]
  %.10281.ph964 = phi i32 [ %71, %.lr.ph621 ]
  %.10270.ph965 = phi i32 [ %69, %.lr.ph621 ]
  %.11259.ph966 = phi i32 [ %67, %.lr.ph621 ]
  %.18246.ph967 = phi i32 [ %63, %.lr.ph621 ]
  %.8227.ph968 = phi i32 [ %61, %.lr.ph621 ]
  %.13218.ph969 = phi i32 [ %59, %.lr.ph621 ]
  %.14204.ph970 = phi i32 [ %57, %.lr.ph621 ]
  %.11189.ph971 = phi i32 [ %55, %.lr.ph621 ]
  %.8177.ph972 = phi i32 [ %53, %.lr.ph621 ]
  %.14168.ph973 = phi i32 [ %51, %.lr.ph621 ]
  %.14153.ph974 = phi i32 [ %49, %.lr.ph621 ]
  %.11138.ph975 = phi i32 [ %47, %.lr.ph621 ]
  %.20126.ph976 = phi i32 [ %45, %.lr.ph621 ]
  %.21105.ph977 = phi i32 [ %43, %.lr.ph621 ]
  %.2283.ph978 = phi i32 [ %41, %.lr.ph621 ]
  %.1860.ph979 = phi i32 [ %39, %.lr.ph621 ]
  %.2841.ph980 = phi i32 [ %37, %.lr.ph621 ]
  %.40.ph981 = phi i32 [ %35, %.lr.ph621 ]
  %.03.ph982 = phi i32 [ 0, %.lr.ph621 ]
  br label %4045

.loopexit983:                                     ; preds = %.lr.ph624
  %.14356.ph984 = phi i32* [ %81, %.lr.ph624 ]
  %.14341.ph985 = phi i32* [ %79, %.lr.ph624 ]
  %.14326.ph986 = phi i32* [ %77, %.lr.ph624 ]
  %.14311.ph987 = phi i32 [ %75, %.lr.ph624 ]
  %.14296.ph988 = phi i32 [ %73, %.lr.ph624 ]
  %.10281.ph989 = phi i32 [ %71, %.lr.ph624 ]
  %.10270.ph990 = phi i32 [ %69, %.lr.ph624 ]
  %.11259.ph991 = phi i32 [ %67, %.lr.ph624 ]
  %.18246.ph992 = phi i32 [ %63, %.lr.ph624 ]
  %.8227.ph993 = phi i32 [ %61, %.lr.ph624 ]
  %.13218.ph994 = phi i32 [ %59, %.lr.ph624 ]
  %.14204.ph995 = phi i32 [ %57, %.lr.ph624 ]
  %.11189.ph996 = phi i32 [ %55, %.lr.ph624 ]
  %.8177.ph997 = phi i32 [ %53, %.lr.ph624 ]
  %.14168.ph998 = phi i32 [ %51, %.lr.ph624 ]
  %.14153.ph999 = phi i32 [ %49, %.lr.ph624 ]
  %.11138.ph1000 = phi i32 [ %47, %.lr.ph624 ]
  %.20126.ph1001 = phi i32 [ %45, %.lr.ph624 ]
  %.21105.ph1002 = phi i32 [ %43, %.lr.ph624 ]
  %.2283.ph1003 = phi i32 [ %41, %.lr.ph624 ]
  %.1860.ph1004 = phi i32 [ %39, %.lr.ph624 ]
  %.2841.ph1005 = phi i32 [ %37, %.lr.ph624 ]
  %.40.ph1006 = phi i32 [ %35, %.lr.ph624 ]
  %.03.ph1007 = phi i32 [ 0, %.lr.ph624 ]
  br label %4045

.loopexit1008:                                    ; preds = %.lr.ph627
  %.14356.ph1009 = phi i32* [ %81, %.lr.ph627 ]
  %.14341.ph1010 = phi i32* [ %79, %.lr.ph627 ]
  %.14326.ph1011 = phi i32* [ %77, %.lr.ph627 ]
  %.14311.ph1012 = phi i32 [ %75, %.lr.ph627 ]
  %.14296.ph1013 = phi i32 [ %73, %.lr.ph627 ]
  %.10281.ph1014 = phi i32 [ %71, %.lr.ph627 ]
  %.10270.ph1015 = phi i32 [ %69, %.lr.ph627 ]
  %.11259.ph1016 = phi i32 [ %67, %.lr.ph627 ]
  %.18246.ph1017 = phi i32 [ %63, %.lr.ph627 ]
  %.8227.ph1018 = phi i32 [ %61, %.lr.ph627 ]
  %.13218.ph1019 = phi i32 [ %59, %.lr.ph627 ]
  %.14204.ph1020 = phi i32 [ %57, %.lr.ph627 ]
  %.11189.ph1021 = phi i32 [ %55, %.lr.ph627 ]
  %.8177.ph1022 = phi i32 [ %53, %.lr.ph627 ]
  %.14168.ph1023 = phi i32 [ %51, %.lr.ph627 ]
  %.14153.ph1024 = phi i32 [ %49, %.lr.ph627 ]
  %.11138.ph1025 = phi i32 [ %47, %.lr.ph627 ]
  %.20126.ph1026 = phi i32 [ %45, %.lr.ph627 ]
  %.21105.ph1027 = phi i32 [ %43, %.lr.ph627 ]
  %.2283.ph1028 = phi i32 [ %41, %.lr.ph627 ]
  %.1860.ph1029 = phi i32 [ %39, %.lr.ph627 ]
  %.2841.ph1030 = phi i32 [ %37, %.lr.ph627 ]
  %.40.ph1031 = phi i32 [ %35, %.lr.ph627 ]
  %.03.ph1032 = phi i32 [ 0, %.lr.ph627 ]
  br label %4045

; <label>:4045:                                   ; preds = %.loopexit1008, %.loopexit983, %.loopexit958, %.loopexit933, %.loopexit908, %.loopexit883, %.loopexit858, %.loopexit833, %.loopexit808, %.loopexit783, %.loopexit758, %.loopexit733, %.loopexit708, %.loopexit683, %.loopexit658, %.loopexit633, %.loopexit608, %.loopexit583, %.loopexit556, %.loopexit531, %.loopexit506, %.loopexit481, %.loopexit454, %.loopexit429, %.loopexit404, %.loopexit379, %.loopexit353, %.loopexit327, %.loopexit302, %.loopexit277, %.loopexit252, %.loopexit227, %.loopexit202, %.loopexit177, %.loopexit152, %.loopexit127, %.loopexit102, %.loopexit77, %.loopexit52, %.loopexit27, %.loopexit2, %.loopexit, %._crit_edge383, %._crit_edge386, %._crit_edge389, %._crit_edge392, %._crit_edge395, %3253, %3234, %3401, %3382, %2955, %2959, %2935, %2941, %2860, %2767, %2566, %2490, %2496, %2415, %2322, %2289, %2295, %2214, %2121, %1891, %1778, %._crit_edge567, %._crit_edge570, %1569, %1395, %._crit_edge577, %._crit_edge601, %._crit_edge604, %._crit_edge607, %._crit_edge610, %._crit_edge613, %475, %399, %372, %395, %._crit_edge619, %353, %._crit_edge622, %._crit_edge625, %._crit_edge628, %4044, %._crit_edge, %2555, %2540
  %.14356 = phi i32* [ %81, %4044 ], [ %81, %._crit_edge ], [ %.8350, %2540 ], [ %.8350, %2555 ], [ %81, %._crit_edge628 ], [ %81, %._crit_edge625 ], [ %81, %._crit_edge622 ], [ %81, %353 ], [ %81, %._crit_edge619 ], [ %81, %395 ], [ %81, %372 ], [ %81, %399 ], [ %81, %475 ], [ %81, %._crit_edge613 ], [ %81, %._crit_edge610 ], [ %81, %._crit_edge607 ], [ %81, %._crit_edge604 ], [ %81, %._crit_edge601 ], [ %81, %._crit_edge577 ], [ %81, %1395 ], [ %81, %1569 ], [ %81, %._crit_edge570 ], [ %81, %._crit_edge567 ], [ %81, %1778 ], [ %81, %1891 ], [ %81, %2121 ], [ %.2344, %2214 ], [ %.2344, %2295 ], [ %.2344, %2289 ], [ %.5347, %2322 ], [ %.8350, %2415 ], [ %.8350, %2496 ], [ %.8350, %2490 ], [ %.4346, %2566 ], [ %.4346, %2767 ], [ %.12354, %2860 ], [ %.12354, %2941 ], [ %.12354, %2935 ], [ %.4346, %2959 ], [ %.4346, %2955 ], [ %.4346, %3382 ], [ %.4346, %3401 ], [ %.4346, %3234 ], [ %.4346, %3253 ], [ %81, %._crit_edge395 ], [ %81, %._crit_edge392 ], [ %81, %._crit_edge389 ], [ %81, %._crit_edge386 ], [ %81, %._crit_edge383 ], [ %.14356.ph, %.loopexit ], [ %.14356.ph3, %.loopexit2 ], [ %.14356.ph28, %.loopexit27 ], [ %.14356.ph53, %.loopexit52 ], [ %.14356.ph78, %.loopexit77 ], [ %.14356.ph103, %.loopexit102 ], [ %.14356.ph128, %.loopexit127 ], [ %.14356.ph153, %.loopexit152 ], [ %.14356.ph178, %.loopexit177 ], [ %.14356.ph203, %.loopexit202 ], [ %.14356.ph228, %.loopexit227 ], [ %.14356.ph253, %.loopexit252 ], [ %.14356.ph278, %.loopexit277 ], [ %.14356.ph303, %.loopexit302 ], [ %.14356.ph328, %.loopexit327 ], [ %.14356.ph354, %.loopexit353 ], [ %.14356.ph380, %.loopexit379 ], [ %.14356.ph405, %.loopexit404 ], [ %.14356.ph430, %.loopexit429 ], [ %.14356.ph455, %.loopexit454 ], [ %.14356.ph482, %.loopexit481 ], [ %.14356.ph507, %.loopexit506 ], [ %.14356.ph532, %.loopexit531 ], [ %.14356.ph557, %.loopexit556 ], [ %.14356.ph584, %.loopexit583 ], [ %.14356.ph609, %.loopexit608 ], [ %.14356.ph634, %.loopexit633 ], [ %.14356.ph659, %.loopexit658 ], [ %.14356.ph684, %.loopexit683 ], [ %.14356.ph709, %.loopexit708 ], [ %.14356.ph734, %.loopexit733 ], [ %.14356.ph759, %.loopexit758 ], [ %.14356.ph784, %.loopexit783 ], [ %.14356.ph809, %.loopexit808 ], [ %.14356.ph834, %.loopexit833 ], [ %.14356.ph859, %.loopexit858 ], [ %.14356.ph884, %.loopexit883 ], [ %.14356.ph909, %.loopexit908 ], [ %.14356.ph934, %.loopexit933 ], [ %.14356.ph959, %.loopexit958 ], [ %.14356.ph984, %.loopexit983 ], [ %.14356.ph1009, %.loopexit1008 ]
  %.14341 = phi i32* [ %79, %4044 ], [ %79, %._crit_edge ], [ %.8335, %2540 ], [ %.8335, %2555 ], [ %79, %._crit_edge628 ], [ %79, %._crit_edge625 ], [ %79, %._crit_edge622 ], [ %79, %353 ], [ %79, %._crit_edge619 ], [ %79, %395 ], [ %79, %372 ], [ %79, %399 ], [ %79, %475 ], [ %79, %._crit_edge613 ], [ %79, %._crit_edge610 ], [ %79, %._crit_edge607 ], [ %79, %._crit_edge604 ], [ %79, %._crit_edge601 ], [ %79, %._crit_edge577 ], [ %79, %1395 ], [ %79, %1569 ], [ %79, %._crit_edge570 ], [ %79, %._crit_edge567 ], [ %79, %1778 ], [ %79, %1891 ], [ %79, %2121 ], [ %.2329, %2214 ], [ %.2329, %2295 ], [ %.2329, %2289 ], [ %.5332, %2322 ], [ %.8335, %2415 ], [ %.8335, %2496 ], [ %.8335, %2490 ], [ %.4331, %2566 ], [ %.4331, %2767 ], [ %.12339, %2860 ], [ %.12339, %2941 ], [ %.12339, %2935 ], [ %.4331, %2959 ], [ %.4331, %2955 ], [ %.4331, %3382 ], [ %.4331, %3401 ], [ %.4331, %3234 ], [ %.4331, %3253 ], [ %79, %._crit_edge395 ], [ %79, %._crit_edge392 ], [ %79, %._crit_edge389 ], [ %79, %._crit_edge386 ], [ %79, %._crit_edge383 ], [ %.14341.ph, %.loopexit ], [ %.14341.ph4, %.loopexit2 ], [ %.14341.ph29, %.loopexit27 ], [ %.14341.ph54, %.loopexit52 ], [ %.14341.ph79, %.loopexit77 ], [ %.14341.ph104, %.loopexit102 ], [ %.14341.ph129, %.loopexit127 ], [ %.14341.ph154, %.loopexit152 ], [ %.14341.ph179, %.loopexit177 ], [ %.14341.ph204, %.loopexit202 ], [ %.14341.ph229, %.loopexit227 ], [ %.14341.ph254, %.loopexit252 ], [ %.14341.ph279, %.loopexit277 ], [ %.14341.ph304, %.loopexit302 ], [ %.14341.ph329, %.loopexit327 ], [ %.14341.ph355, %.loopexit353 ], [ %.14341.ph381, %.loopexit379 ], [ %.14341.ph406, %.loopexit404 ], [ %.14341.ph431, %.loopexit429 ], [ %.14341.ph456, %.loopexit454 ], [ %.14341.ph483, %.loopexit481 ], [ %.14341.ph508, %.loopexit506 ], [ %.14341.ph533, %.loopexit531 ], [ %.14341.ph558, %.loopexit556 ], [ %.14341.ph585, %.loopexit583 ], [ %.14341.ph610, %.loopexit608 ], [ %.14341.ph635, %.loopexit633 ], [ %.14341.ph660, %.loopexit658 ], [ %.14341.ph685, %.loopexit683 ], [ %.14341.ph710, %.loopexit708 ], [ %.14341.ph735, %.loopexit733 ], [ %.14341.ph760, %.loopexit758 ], [ %.14341.ph785, %.loopexit783 ], [ %.14341.ph810, %.loopexit808 ], [ %.14341.ph835, %.loopexit833 ], [ %.14341.ph860, %.loopexit858 ], [ %.14341.ph885, %.loopexit883 ], [ %.14341.ph910, %.loopexit908 ], [ %.14341.ph935, %.loopexit933 ], [ %.14341.ph960, %.loopexit958 ], [ %.14341.ph985, %.loopexit983 ], [ %.14341.ph1010, %.loopexit1008 ]
  %.14326 = phi i32* [ %77, %4044 ], [ %77, %._crit_edge ], [ %.8320, %2540 ], [ %.8320, %2555 ], [ %77, %._crit_edge628 ], [ %77, %._crit_edge625 ], [ %77, %._crit_edge622 ], [ %77, %353 ], [ %77, %._crit_edge619 ], [ %77, %395 ], [ %77, %372 ], [ %77, %399 ], [ %77, %475 ], [ %77, %._crit_edge613 ], [ %77, %._crit_edge610 ], [ %77, %._crit_edge607 ], [ %77, %._crit_edge604 ], [ %77, %._crit_edge601 ], [ %77, %._crit_edge577 ], [ %77, %1395 ], [ %77, %1569 ], [ %77, %._crit_edge570 ], [ %77, %._crit_edge567 ], [ %77, %1778 ], [ %77, %1891 ], [ %77, %2121 ], [ %.2314, %2214 ], [ %.2314, %2295 ], [ %.2314, %2289 ], [ %.5317, %2322 ], [ %.8320, %2415 ], [ %.8320, %2496 ], [ %.8320, %2490 ], [ %.4316, %2566 ], [ %.4316, %2767 ], [ %.12324, %2860 ], [ %.12324, %2941 ], [ %.12324, %2935 ], [ %.4316, %2959 ], [ %.4316, %2955 ], [ %.4316, %3382 ], [ %.4316, %3401 ], [ %.4316, %3234 ], [ %.4316, %3253 ], [ %77, %._crit_edge395 ], [ %77, %._crit_edge392 ], [ %77, %._crit_edge389 ], [ %77, %._crit_edge386 ], [ %77, %._crit_edge383 ], [ %.14326.ph, %.loopexit ], [ %.14326.ph5, %.loopexit2 ], [ %.14326.ph30, %.loopexit27 ], [ %.14326.ph55, %.loopexit52 ], [ %.14326.ph80, %.loopexit77 ], [ %.14326.ph105, %.loopexit102 ], [ %.14326.ph130, %.loopexit127 ], [ %.14326.ph155, %.loopexit152 ], [ %.14326.ph180, %.loopexit177 ], [ %.14326.ph205, %.loopexit202 ], [ %.14326.ph230, %.loopexit227 ], [ %.14326.ph255, %.loopexit252 ], [ %.14326.ph280, %.loopexit277 ], [ %.14326.ph305, %.loopexit302 ], [ %.14326.ph330, %.loopexit327 ], [ %.14326.ph356, %.loopexit353 ], [ %.14326.ph382, %.loopexit379 ], [ %.14326.ph407, %.loopexit404 ], [ %.14326.ph432, %.loopexit429 ], [ %.14326.ph457, %.loopexit454 ], [ %.14326.ph484, %.loopexit481 ], [ %.14326.ph509, %.loopexit506 ], [ %.14326.ph534, %.loopexit531 ], [ %.14326.ph559, %.loopexit556 ], [ %.14326.ph586, %.loopexit583 ], [ %.14326.ph611, %.loopexit608 ], [ %.14326.ph636, %.loopexit633 ], [ %.14326.ph661, %.loopexit658 ], [ %.14326.ph686, %.loopexit683 ], [ %.14326.ph711, %.loopexit708 ], [ %.14326.ph736, %.loopexit733 ], [ %.14326.ph761, %.loopexit758 ], [ %.14326.ph786, %.loopexit783 ], [ %.14326.ph811, %.loopexit808 ], [ %.14326.ph836, %.loopexit833 ], [ %.14326.ph861, %.loopexit858 ], [ %.14326.ph886, %.loopexit883 ], [ %.14326.ph911, %.loopexit908 ], [ %.14326.ph936, %.loopexit933 ], [ %.14326.ph961, %.loopexit958 ], [ %.14326.ph986, %.loopexit983 ], [ %.14326.ph1011, %.loopexit1008 ]
  %.14311 = phi i32 [ %75, %4044 ], [ %75, %._crit_edge ], [ %.8305, %2540 ], [ %.8305, %2555 ], [ %75, %._crit_edge628 ], [ %75, %._crit_edge625 ], [ %75, %._crit_edge622 ], [ %75, %353 ], [ %75, %._crit_edge619 ], [ %75, %395 ], [ %75, %372 ], [ %75, %399 ], [ %75, %475 ], [ %75, %._crit_edge613 ], [ %75, %._crit_edge610 ], [ %75, %._crit_edge607 ], [ %75, %._crit_edge604 ], [ %75, %._crit_edge601 ], [ %75, %._crit_edge577 ], [ %75, %1395 ], [ %75, %1569 ], [ %75, %._crit_edge570 ], [ %75, %._crit_edge567 ], [ %75, %1778 ], [ %75, %1891 ], [ %75, %2121 ], [ %.2299, %2214 ], [ %.2299, %2295 ], [ %.2299, %2289 ], [ %.5302, %2322 ], [ %.8305, %2415 ], [ %.8305, %2496 ], [ %.8305, %2490 ], [ %.4301, %2566 ], [ %.4301, %2767 ], [ %.12309, %2860 ], [ %.12309, %2941 ], [ %.12309, %2935 ], [ %.4301, %2959 ], [ %.4301, %2955 ], [ %.4301, %3382 ], [ %.4301, %3401 ], [ %.4301, %3234 ], [ %.4301, %3253 ], [ %75, %._crit_edge395 ], [ %75, %._crit_edge392 ], [ %75, %._crit_edge389 ], [ %75, %._crit_edge386 ], [ %75, %._crit_edge383 ], [ %.14311.ph, %.loopexit ], [ %.14311.ph6, %.loopexit2 ], [ %.14311.ph31, %.loopexit27 ], [ %.14311.ph56, %.loopexit52 ], [ %.14311.ph81, %.loopexit77 ], [ %.14311.ph106, %.loopexit102 ], [ %.14311.ph131, %.loopexit127 ], [ %.14311.ph156, %.loopexit152 ], [ %.14311.ph181, %.loopexit177 ], [ %.14311.ph206, %.loopexit202 ], [ %.14311.ph231, %.loopexit227 ], [ %.14311.ph256, %.loopexit252 ], [ %.14311.ph281, %.loopexit277 ], [ %.14311.ph306, %.loopexit302 ], [ %.14311.ph331, %.loopexit327 ], [ %.14311.ph357, %.loopexit353 ], [ %.14311.ph383, %.loopexit379 ], [ %.14311.ph408, %.loopexit404 ], [ %.14311.ph433, %.loopexit429 ], [ %.14311.ph458, %.loopexit454 ], [ %.14311.ph485, %.loopexit481 ], [ %.14311.ph510, %.loopexit506 ], [ %.14311.ph535, %.loopexit531 ], [ %.14311.ph560, %.loopexit556 ], [ %.14311.ph587, %.loopexit583 ], [ %.14311.ph612, %.loopexit608 ], [ %.14311.ph637, %.loopexit633 ], [ %.14311.ph662, %.loopexit658 ], [ %.14311.ph687, %.loopexit683 ], [ %.14311.ph712, %.loopexit708 ], [ %.14311.ph737, %.loopexit733 ], [ %.14311.ph762, %.loopexit758 ], [ %.14311.ph787, %.loopexit783 ], [ %.14311.ph812, %.loopexit808 ], [ %.14311.ph837, %.loopexit833 ], [ %.14311.ph862, %.loopexit858 ], [ %.14311.ph887, %.loopexit883 ], [ %.14311.ph912, %.loopexit908 ], [ %.14311.ph937, %.loopexit933 ], [ %.14311.ph962, %.loopexit958 ], [ %.14311.ph987, %.loopexit983 ], [ %.14311.ph1012, %.loopexit1008 ]
  %.14296 = phi i32 [ %73, %4044 ], [ %73, %._crit_edge ], [ %.8290, %2540 ], [ %.8290, %2555 ], [ %73, %._crit_edge628 ], [ %73, %._crit_edge625 ], [ %73, %._crit_edge622 ], [ %73, %353 ], [ %73, %._crit_edge619 ], [ %73, %395 ], [ %73, %372 ], [ %73, %399 ], [ %73, %475 ], [ %73, %._crit_edge613 ], [ %73, %._crit_edge610 ], [ %73, %._crit_edge607 ], [ %73, %._crit_edge604 ], [ %73, %._crit_edge601 ], [ %73, %._crit_edge577 ], [ %73, %1395 ], [ %73, %1569 ], [ %73, %._crit_edge570 ], [ %73, %._crit_edge567 ], [ %73, %1778 ], [ %73, %1891 ], [ %73, %2121 ], [ %.2284, %2214 ], [ %.2284, %2295 ], [ %.2284, %2289 ], [ %.5287, %2322 ], [ %.8290, %2415 ], [ %.8290, %2496 ], [ %.8290, %2490 ], [ %.4286, %2566 ], [ %.4286, %2767 ], [ %.12294, %2860 ], [ %.12294, %2941 ], [ %.12294, %2935 ], [ %.4286, %2959 ], [ %.4286, %2955 ], [ %.4286, %3382 ], [ %.4286, %3401 ], [ %.4286, %3234 ], [ %.4286, %3253 ], [ %73, %._crit_edge395 ], [ %73, %._crit_edge392 ], [ %73, %._crit_edge389 ], [ %73, %._crit_edge386 ], [ %73, %._crit_edge383 ], [ %.14296.ph, %.loopexit ], [ %.14296.ph7, %.loopexit2 ], [ %.14296.ph32, %.loopexit27 ], [ %.14296.ph57, %.loopexit52 ], [ %.14296.ph82, %.loopexit77 ], [ %.14296.ph107, %.loopexit102 ], [ %.14296.ph132, %.loopexit127 ], [ %.14296.ph157, %.loopexit152 ], [ %.14296.ph182, %.loopexit177 ], [ %.14296.ph207, %.loopexit202 ], [ %.14296.ph232, %.loopexit227 ], [ %.14296.ph257, %.loopexit252 ], [ %.14296.ph282, %.loopexit277 ], [ %.14296.ph307, %.loopexit302 ], [ %.14296.ph332, %.loopexit327 ], [ %.14296.ph358, %.loopexit353 ], [ %.14296.ph384, %.loopexit379 ], [ %.14296.ph409, %.loopexit404 ], [ %.14296.ph434, %.loopexit429 ], [ %.14296.ph459, %.loopexit454 ], [ %.14296.ph486, %.loopexit481 ], [ %.14296.ph511, %.loopexit506 ], [ %.14296.ph536, %.loopexit531 ], [ %.14296.ph561, %.loopexit556 ], [ %.14296.ph588, %.loopexit583 ], [ %.14296.ph613, %.loopexit608 ], [ %.14296.ph638, %.loopexit633 ], [ %.14296.ph663, %.loopexit658 ], [ %.14296.ph688, %.loopexit683 ], [ %.14296.ph713, %.loopexit708 ], [ %.14296.ph738, %.loopexit733 ], [ %.14296.ph763, %.loopexit758 ], [ %.14296.ph788, %.loopexit783 ], [ %.14296.ph813, %.loopexit808 ], [ %.14296.ph838, %.loopexit833 ], [ %.14296.ph863, %.loopexit858 ], [ %.14296.ph888, %.loopexit883 ], [ %.14296.ph913, %.loopexit908 ], [ %.14296.ph938, %.loopexit933 ], [ %.14296.ph963, %.loopexit958 ], [ %.14296.ph988, %.loopexit983 ], [ %.14296.ph1013, %.loopexit1008 ]
  %.10281 = phi i32 [ %71, %4044 ], [ %71, %._crit_edge ], [ %.5276, %2540 ], [ %.5276, %2555 ], [ %71, %._crit_edge628 ], [ %71, %._crit_edge625 ], [ %71, %._crit_edge622 ], [ %71, %353 ], [ %71, %._crit_edge619 ], [ %71, %395 ], [ %71, %372 ], [ %71, %399 ], [ %71, %475 ], [ %71, %._crit_edge613 ], [ %71, %._crit_edge610 ], [ %71, %._crit_edge607 ], [ %71, %._crit_edge604 ], [ %71, %._crit_edge601 ], [ %71, %._crit_edge577 ], [ %71, %1395 ], [ %71, %1569 ], [ %71, %._crit_edge570 ], [ %71, %._crit_edge567 ], [ %71, %1778 ], [ %71, %1891 ], [ %71, %2121 ], [ %.0271, %2214 ], [ %.0271, %2295 ], [ %.0271, %2289 ], [ %.3274, %2322 ], [ %.5276, %2415 ], [ %.5276, %2496 ], [ %.5276, %2490 ], [ %.2273, %2566 ], [ %.2273, %2767 ], [ %.8279, %2860 ], [ %.8279, %2941 ], [ %.8279, %2935 ], [ %.2273, %2959 ], [ %.2273, %2955 ], [ %.2273, %3382 ], [ %.2273, %3401 ], [ %.2273, %3234 ], [ %.2273, %3253 ], [ %71, %._crit_edge395 ], [ %71, %._crit_edge392 ], [ %71, %._crit_edge389 ], [ %71, %._crit_edge386 ], [ %71, %._crit_edge383 ], [ %.10281.ph, %.loopexit ], [ %.10281.ph8, %.loopexit2 ], [ %.10281.ph33, %.loopexit27 ], [ %.10281.ph58, %.loopexit52 ], [ %.10281.ph83, %.loopexit77 ], [ %.10281.ph108, %.loopexit102 ], [ %.10281.ph133, %.loopexit127 ], [ %.10281.ph158, %.loopexit152 ], [ %.10281.ph183, %.loopexit177 ], [ %.10281.ph208, %.loopexit202 ], [ %.10281.ph233, %.loopexit227 ], [ %.10281.ph258, %.loopexit252 ], [ %.10281.ph283, %.loopexit277 ], [ %.10281.ph308, %.loopexit302 ], [ %.10281.ph333, %.loopexit327 ], [ %.10281.ph359, %.loopexit353 ], [ %.10281.ph385, %.loopexit379 ], [ %.10281.ph410, %.loopexit404 ], [ %.10281.ph435, %.loopexit429 ], [ %.10281.ph460, %.loopexit454 ], [ %.10281.ph487, %.loopexit481 ], [ %.10281.ph512, %.loopexit506 ], [ %.10281.ph537, %.loopexit531 ], [ %.10281.ph562, %.loopexit556 ], [ %.10281.ph589, %.loopexit583 ], [ %.10281.ph614, %.loopexit608 ], [ %.10281.ph639, %.loopexit633 ], [ %.10281.ph664, %.loopexit658 ], [ %.10281.ph689, %.loopexit683 ], [ %.10281.ph714, %.loopexit708 ], [ %.10281.ph739, %.loopexit733 ], [ %.10281.ph764, %.loopexit758 ], [ %.10281.ph789, %.loopexit783 ], [ %.10281.ph814, %.loopexit808 ], [ %.10281.ph839, %.loopexit833 ], [ %.10281.ph864, %.loopexit858 ], [ %.10281.ph889, %.loopexit883 ], [ %.10281.ph914, %.loopexit908 ], [ %.10281.ph939, %.loopexit933 ], [ %.10281.ph964, %.loopexit958 ], [ %.10281.ph989, %.loopexit983 ], [ %.10281.ph1014, %.loopexit1008 ]
  %.10270 = phi i32 [ %69, %4044 ], [ %69, %._crit_edge ], [ %.5265, %2540 ], [ %.5265, %2555 ], [ %69, %._crit_edge628 ], [ %69, %._crit_edge625 ], [ %69, %._crit_edge622 ], [ %69, %353 ], [ %69, %._crit_edge619 ], [ %69, %395 ], [ %69, %372 ], [ %69, %399 ], [ %69, %475 ], [ %69, %._crit_edge613 ], [ %69, %._crit_edge610 ], [ %69, %._crit_edge607 ], [ %69, %._crit_edge604 ], [ %69, %._crit_edge601 ], [ %69, %._crit_edge577 ], [ %69, %1395 ], [ %69, %1569 ], [ %69, %._crit_edge570 ], [ %69, %._crit_edge567 ], [ %69, %1778 ], [ %69, %1891 ], [ %69, %2121 ], [ %.0260, %2214 ], [ %.0260, %2295 ], [ %.0260, %2289 ], [ %.3263, %2322 ], [ %.5265, %2415 ], [ %.5265, %2496 ], [ %.5265, %2490 ], [ %.2262, %2566 ], [ %.2262, %2767 ], [ %.8268, %2860 ], [ %.8268, %2941 ], [ %.8268, %2935 ], [ %.2262, %2959 ], [ %.2262, %2955 ], [ %.2262, %3382 ], [ %.2262, %3401 ], [ %.2262, %3234 ], [ %.2262, %3253 ], [ %69, %._crit_edge395 ], [ %69, %._crit_edge392 ], [ %69, %._crit_edge389 ], [ %69, %._crit_edge386 ], [ %69, %._crit_edge383 ], [ %.10270.ph, %.loopexit ], [ %.10270.ph9, %.loopexit2 ], [ %.10270.ph34, %.loopexit27 ], [ %.10270.ph59, %.loopexit52 ], [ %.10270.ph84, %.loopexit77 ], [ %.10270.ph109, %.loopexit102 ], [ %.10270.ph134, %.loopexit127 ], [ %.10270.ph159, %.loopexit152 ], [ %.10270.ph184, %.loopexit177 ], [ %.10270.ph209, %.loopexit202 ], [ %.10270.ph234, %.loopexit227 ], [ %.10270.ph259, %.loopexit252 ], [ %.10270.ph284, %.loopexit277 ], [ %.10270.ph309, %.loopexit302 ], [ %.10270.ph334, %.loopexit327 ], [ %.10270.ph360, %.loopexit353 ], [ %.10270.ph386, %.loopexit379 ], [ %.10270.ph411, %.loopexit404 ], [ %.10270.ph436, %.loopexit429 ], [ %.10270.ph461, %.loopexit454 ], [ %.10270.ph488, %.loopexit481 ], [ %.10270.ph513, %.loopexit506 ], [ %.10270.ph538, %.loopexit531 ], [ %.10270.ph563, %.loopexit556 ], [ %.10270.ph590, %.loopexit583 ], [ %.10270.ph615, %.loopexit608 ], [ %.10270.ph640, %.loopexit633 ], [ %.10270.ph665, %.loopexit658 ], [ %.10270.ph690, %.loopexit683 ], [ %.10270.ph715, %.loopexit708 ], [ %.10270.ph740, %.loopexit733 ], [ %.10270.ph765, %.loopexit758 ], [ %.10270.ph790, %.loopexit783 ], [ %.10270.ph815, %.loopexit808 ], [ %.10270.ph840, %.loopexit833 ], [ %.10270.ph865, %.loopexit858 ], [ %.10270.ph890, %.loopexit883 ], [ %.10270.ph915, %.loopexit908 ], [ %.10270.ph940, %.loopexit933 ], [ %.10270.ph965, %.loopexit958 ], [ %.10270.ph990, %.loopexit983 ], [ %.10270.ph1015, %.loopexit1008 ]
  %.11259 = phi i32 [ %67, %4044 ], [ %67, %._crit_edge ], [ %.6254, %2540 ], [ %.6254, %2555 ], [ %67, %._crit_edge628 ], [ %67, %._crit_edge625 ], [ %67, %._crit_edge622 ], [ %67, %353 ], [ %67, %._crit_edge619 ], [ %67, %395 ], [ %67, %372 ], [ %67, %399 ], [ %67, %475 ], [ %67, %._crit_edge613 ], [ %67, %._crit_edge610 ], [ %67, %._crit_edge607 ], [ %67, %._crit_edge604 ], [ %67, %._crit_edge601 ], [ %67, %._crit_edge577 ], [ %67, %1395 ], [ %67, %1569 ], [ %67, %._crit_edge570 ], [ %67, %._crit_edge567 ], [ %67, %1778 ], [ %67, %1891 ], [ %67, %2121 ], [ %.1249, %2214 ], [ %.1249, %2295 ], [ %.1249, %2289 ], [ %.4252, %2322 ], [ %.6254, %2415 ], [ %.6254, %2496 ], [ %.6254, %2490 ], [ %.3251, %2566 ], [ %.3251, %2767 ], [ %.9257, %2860 ], [ %.9257, %2941 ], [ %.9257, %2935 ], [ %.3251, %2959 ], [ %.3251, %2955 ], [ %.3251, %3382 ], [ %.3251, %3401 ], [ %.3251, %3234 ], [ %.3251, %3253 ], [ %67, %._crit_edge395 ], [ %67, %._crit_edge392 ], [ %67, %._crit_edge389 ], [ %67, %._crit_edge386 ], [ %67, %._crit_edge383 ], [ %.11259.ph, %.loopexit ], [ %.11259.ph10, %.loopexit2 ], [ %.11259.ph35, %.loopexit27 ], [ %.11259.ph60, %.loopexit52 ], [ %.11259.ph85, %.loopexit77 ], [ %.11259.ph110, %.loopexit102 ], [ %.11259.ph135, %.loopexit127 ], [ %.11259.ph160, %.loopexit152 ], [ %.11259.ph185, %.loopexit177 ], [ %.11259.ph210, %.loopexit202 ], [ %.11259.ph235, %.loopexit227 ], [ %.11259.ph260, %.loopexit252 ], [ %.11259.ph285, %.loopexit277 ], [ %.11259.ph310, %.loopexit302 ], [ %.11259.ph335, %.loopexit327 ], [ %.11259.ph361, %.loopexit353 ], [ %.11259.ph387, %.loopexit379 ], [ %.11259.ph412, %.loopexit404 ], [ %.11259.ph437, %.loopexit429 ], [ %.11259.ph462, %.loopexit454 ], [ %.11259.ph489, %.loopexit481 ], [ %.11259.ph514, %.loopexit506 ], [ %.11259.ph539, %.loopexit531 ], [ %.11259.ph564, %.loopexit556 ], [ %.11259.ph591, %.loopexit583 ], [ %.11259.ph616, %.loopexit608 ], [ %.11259.ph641, %.loopexit633 ], [ %.11259.ph666, %.loopexit658 ], [ %.11259.ph691, %.loopexit683 ], [ %.11259.ph716, %.loopexit708 ], [ %.11259.ph741, %.loopexit733 ], [ %.11259.ph766, %.loopexit758 ], [ %.11259.ph791, %.loopexit783 ], [ %.11259.ph816, %.loopexit808 ], [ %.11259.ph841, %.loopexit833 ], [ %.11259.ph866, %.loopexit858 ], [ %.11259.ph891, %.loopexit883 ], [ %.11259.ph916, %.loopexit908 ], [ %.11259.ph941, %.loopexit933 ], [ %.11259.ph966, %.loopexit958 ], [ %.11259.ph991, %.loopexit983 ], [ %.11259.ph1016, %.loopexit1008 ]
  %.18246 = phi i32 [ %63, %4044 ], [ %63, %._crit_edge ], [ %.13241, %2540 ], [ %.13241, %2555 ], [ %63, %._crit_edge628 ], [ %63, %._crit_edge625 ], [ %63, %._crit_edge622 ], [ %63, %353 ], [ %63, %._crit_edge619 ], [ %63, %395 ], [ %63, %372 ], [ %63, %399 ], [ %63, %475 ], [ %63, %._crit_edge613 ], [ %63, %._crit_edge610 ], [ %63, %._crit_edge607 ], [ %63, %._crit_edge604 ], [ %63, %._crit_edge601 ], [ %63, %._crit_edge577 ], [ %63, %1395 ], [ %63, %1569 ], [ %63, %._crit_edge570 ], [ %63, %._crit_edge567 ], [ %63, %1778 ], [ %.3231, %1891 ], [ %.0228, %2121 ], [ %.8236, %2214 ], [ %.8236, %2295 ], [ %.8236, %2289 ], [ %.11239, %2322 ], [ %.13241, %2415 ], [ %.13241, %2496 ], [ %.13241, %2490 ], [ %.10238, %2566 ], [ %.10238, %2767 ], [ %.16244, %2860 ], [ %.16244, %2941 ], [ %.16244, %2935 ], [ %.10238, %2959 ], [ %.10238, %2955 ], [ %.10238, %3382 ], [ %.10238, %3401 ], [ %.10238, %3234 ], [ %.10238, %3253 ], [ %63, %._crit_edge395 ], [ %63, %._crit_edge392 ], [ %63, %._crit_edge389 ], [ %63, %._crit_edge386 ], [ %63, %._crit_edge383 ], [ %.18246.ph, %.loopexit ], [ %.18246.ph11, %.loopexit2 ], [ %.18246.ph36, %.loopexit27 ], [ %.18246.ph61, %.loopexit52 ], [ %.18246.ph86, %.loopexit77 ], [ %.18246.ph111, %.loopexit102 ], [ %.18246.ph136, %.loopexit127 ], [ %.18246.ph161, %.loopexit152 ], [ %.18246.ph186, %.loopexit177 ], [ %.18246.ph211, %.loopexit202 ], [ %.18246.ph236, %.loopexit227 ], [ %.18246.ph261, %.loopexit252 ], [ %.18246.ph286, %.loopexit277 ], [ %.18246.ph311, %.loopexit302 ], [ %.18246.ph336, %.loopexit327 ], [ %.18246.ph362, %.loopexit353 ], [ %.18246.ph388, %.loopexit379 ], [ %.18246.ph413, %.loopexit404 ], [ %.18246.ph438, %.loopexit429 ], [ %.18246.ph463, %.loopexit454 ], [ %.18246.ph490, %.loopexit481 ], [ %.18246.ph515, %.loopexit506 ], [ %.18246.ph540, %.loopexit531 ], [ %.18246.ph565, %.loopexit556 ], [ %.18246.ph592, %.loopexit583 ], [ %.18246.ph617, %.loopexit608 ], [ %.18246.ph642, %.loopexit633 ], [ %.18246.ph667, %.loopexit658 ], [ %.18246.ph692, %.loopexit683 ], [ %.18246.ph717, %.loopexit708 ], [ %.18246.ph742, %.loopexit733 ], [ %.18246.ph767, %.loopexit758 ], [ %.18246.ph792, %.loopexit783 ], [ %.18246.ph817, %.loopexit808 ], [ %.18246.ph842, %.loopexit833 ], [ %.18246.ph867, %.loopexit858 ], [ %.18246.ph892, %.loopexit883 ], [ %.18246.ph917, %.loopexit908 ], [ %.18246.ph942, %.loopexit933 ], [ %.18246.ph967, %.loopexit958 ], [ %.18246.ph992, %.loopexit983 ], [ %.18246.ph1017, %.loopexit1008 ]
  %.8227 = phi i32 [ %61, %4044 ], [ %61, %._crit_edge ], [ %.3222, %2540 ], [ %.3222, %2555 ], [ %61, %._crit_edge628 ], [ %61, %._crit_edge625 ], [ %61, %._crit_edge622 ], [ %61, %353 ], [ %61, %._crit_edge619 ], [ %61, %395 ], [ %61, %372 ], [ %61, %399 ], [ %61, %475 ], [ %61, %._crit_edge613 ], [ %61, %._crit_edge610 ], [ %61, %._crit_edge607 ], [ %61, %._crit_edge604 ], [ %61, %._crit_edge601 ], [ %61, %._crit_edge577 ], [ %61, %1395 ], [ %61, %1569 ], [ %61, %._crit_edge570 ], [ %61, %._crit_edge567 ], [ %61, %1778 ], [ %61, %1891 ], [ %61, %2121 ], [ %61, %2214 ], [ %61, %2295 ], [ %61, %2289 ], [ %2320, %2322 ], [ %.3222, %2415 ], [ %.3222, %2496 ], [ %.3222, %2490 ], [ %.0219, %2566 ], [ %.0219, %2767 ], [ %.6225, %2860 ], [ %.6225, %2941 ], [ %.6225, %2935 ], [ %.0219, %2959 ], [ %.0219, %2955 ], [ %.0219, %3382 ], [ %.0219, %3401 ], [ %.0219, %3234 ], [ %.0219, %3253 ], [ %61, %._crit_edge395 ], [ %61, %._crit_edge392 ], [ %61, %._crit_edge389 ], [ %61, %._crit_edge386 ], [ %61, %._crit_edge383 ], [ %.8227.ph, %.loopexit ], [ %.8227.ph12, %.loopexit2 ], [ %.8227.ph37, %.loopexit27 ], [ %.8227.ph62, %.loopexit52 ], [ %.8227.ph87, %.loopexit77 ], [ %.8227.ph112, %.loopexit102 ], [ %.8227.ph137, %.loopexit127 ], [ %.8227.ph162, %.loopexit152 ], [ %.8227.ph187, %.loopexit177 ], [ %.8227.ph212, %.loopexit202 ], [ %.8227.ph237, %.loopexit227 ], [ %.8227.ph262, %.loopexit252 ], [ %.8227.ph287, %.loopexit277 ], [ %.8227.ph312, %.loopexit302 ], [ %.8227.ph337, %.loopexit327 ], [ %.8227.ph363, %.loopexit353 ], [ %.8227.ph389, %.loopexit379 ], [ %.8227.ph414, %.loopexit404 ], [ %.8227.ph439, %.loopexit429 ], [ %.8227.ph464, %.loopexit454 ], [ %.8227.ph491, %.loopexit481 ], [ %.8227.ph516, %.loopexit506 ], [ %.8227.ph541, %.loopexit531 ], [ %.8227.ph566, %.loopexit556 ], [ %.8227.ph593, %.loopexit583 ], [ %.8227.ph618, %.loopexit608 ], [ %.8227.ph643, %.loopexit633 ], [ %.8227.ph668, %.loopexit658 ], [ %.8227.ph693, %.loopexit683 ], [ %.8227.ph718, %.loopexit708 ], [ %.8227.ph743, %.loopexit733 ], [ %.8227.ph768, %.loopexit758 ], [ %.8227.ph793, %.loopexit783 ], [ %.8227.ph818, %.loopexit808 ], [ %.8227.ph843, %.loopexit833 ], [ %.8227.ph868, %.loopexit858 ], [ %.8227.ph893, %.loopexit883 ], [ %.8227.ph918, %.loopexit908 ], [ %.8227.ph943, %.loopexit933 ], [ %.8227.ph968, %.loopexit958 ], [ %.8227.ph993, %.loopexit983 ], [ %.8227.ph1018, %.loopexit1008 ]
  %.13218 = phi i32 [ %59, %4044 ], [ %59, %._crit_edge ], [ %.7212.lcssa369, %2540 ], [ %.8213.lcssa371, %2555 ], [ %59, %._crit_edge628 ], [ %59, %._crit_edge625 ], [ %59, %._crit_edge622 ], [ %59, %353 ], [ %59, %._crit_edge619 ], [ %59, %395 ], [ %59, %372 ], [ %59, %399 ], [ %59, %475 ], [ %59, %._crit_edge613 ], [ %59, %._crit_edge610 ], [ %59, %._crit_edge607 ], [ %59, %._crit_edge604 ], [ %59, %._crit_edge601 ], [ %59, %._crit_edge577 ], [ %59, %1395 ], [ %59, %1569 ], [ %59, %._crit_edge570 ], [ %59, %._crit_edge567 ], [ %59, %1778 ], [ %59, %1891 ], [ %59, %2121 ], [ %59, %2214 ], [ %59, %2295 ], [ %59, %2289 ], [ %.3208, %2322 ], [ %.5210, %2415 ], [ %.5210, %2496 ], [ %.5210, %2490 ], [ %.0205, %2566 ], [ %.0205, %2767 ], [ %.11216, %2860 ], [ %.11216, %2941 ], [ %.11216, %2935 ], [ %.0205, %2959 ], [ %.0205, %2955 ], [ %.0205, %3382 ], [ %.0205, %3401 ], [ %.0205, %3234 ], [ %.0205, %3253 ], [ %59, %._crit_edge395 ], [ %59, %._crit_edge392 ], [ %59, %._crit_edge389 ], [ %59, %._crit_edge386 ], [ %59, %._crit_edge383 ], [ %.13218.ph, %.loopexit ], [ %.13218.ph13, %.loopexit2 ], [ %.13218.ph38, %.loopexit27 ], [ %.13218.ph63, %.loopexit52 ], [ %.13218.ph88, %.loopexit77 ], [ %.13218.ph113, %.loopexit102 ], [ %.13218.ph138, %.loopexit127 ], [ %.13218.ph163, %.loopexit152 ], [ %.13218.ph188, %.loopexit177 ], [ %.13218.ph213, %.loopexit202 ], [ %.13218.ph238, %.loopexit227 ], [ %.13218.ph263, %.loopexit252 ], [ %.13218.ph288, %.loopexit277 ], [ %.13218.ph313, %.loopexit302 ], [ %.13218.ph338, %.loopexit327 ], [ %.13218.ph364, %.loopexit353 ], [ %.13218.ph390, %.loopexit379 ], [ %.13218.ph415, %.loopexit404 ], [ %.13218.ph440, %.loopexit429 ], [ %.13218.ph465, %.loopexit454 ], [ %.13218.ph492, %.loopexit481 ], [ %.13218.ph517, %.loopexit506 ], [ %.13218.ph542, %.loopexit531 ], [ %.13218.ph567, %.loopexit556 ], [ %.13218.ph594, %.loopexit583 ], [ %.13218.ph619, %.loopexit608 ], [ %.13218.ph644, %.loopexit633 ], [ %.13218.ph669, %.loopexit658 ], [ %.13218.ph694, %.loopexit683 ], [ %.13218.ph719, %.loopexit708 ], [ %.13218.ph744, %.loopexit733 ], [ %.13218.ph769, %.loopexit758 ], [ %.13218.ph794, %.loopexit783 ], [ %.13218.ph819, %.loopexit808 ], [ %.13218.ph844, %.loopexit833 ], [ %.13218.ph869, %.loopexit858 ], [ %.13218.ph894, %.loopexit883 ], [ %.13218.ph919, %.loopexit908 ], [ %.13218.ph944, %.loopexit933 ], [ %.13218.ph969, %.loopexit958 ], [ %.13218.ph994, %.loopexit983 ], [ %.13218.ph1019, %.loopexit1008 ]
  %.14204 = phi i32 [ %57, %4044 ], [ %57, %._crit_edge ], [ %2541, %2540 ], [ %2556, %2555 ], [ %57, %._crit_edge628 ], [ %57, %._crit_edge625 ], [ %57, %._crit_edge622 ], [ %57, %353 ], [ %57, %._crit_edge619 ], [ %57, %395 ], [ %57, %372 ], [ %57, %399 ], [ %57, %475 ], [ %57, %._crit_edge613 ], [ %57, %._crit_edge610 ], [ %57, %._crit_edge607 ], [ %57, %._crit_edge604 ], [ %57, %._crit_edge601 ], [ %57, %._crit_edge577 ], [ %57, %1395 ], [ %57, %1569 ], [ %57, %._crit_edge570 ], [ %57, %._crit_edge567 ], [ %57, %1778 ], [ %57, %1891 ], [ 0, %2121 ], [ %.1191, %2214 ], [ %.1191, %2295 ], [ %.1191, %2289 ], [ %.4194, %2322 ], [ %.6196, %2415 ], [ %.6196, %2496 ], [ %.6196, %2490 ], [ %.3193, %2566 ], [ %2765, %2767 ], [ %.12202, %2860 ], [ %.12202, %2941 ], [ %.12202, %2935 ], [ %.3193, %2959 ], [ %.3193, %2955 ], [ %.3193, %3382 ], [ %.3193, %3401 ], [ %.3193, %3234 ], [ %.3193, %3253 ], [ %57, %._crit_edge395 ], [ %57, %._crit_edge392 ], [ %57, %._crit_edge389 ], [ %57, %._crit_edge386 ], [ %57, %._crit_edge383 ], [ %.14204.ph, %.loopexit ], [ %.14204.ph14, %.loopexit2 ], [ %.14204.ph39, %.loopexit27 ], [ %.14204.ph64, %.loopexit52 ], [ %.14204.ph89, %.loopexit77 ], [ %.14204.ph114, %.loopexit102 ], [ %.14204.ph139, %.loopexit127 ], [ %.14204.ph164, %.loopexit152 ], [ %.14204.ph189, %.loopexit177 ], [ %.14204.ph214, %.loopexit202 ], [ %.14204.ph239, %.loopexit227 ], [ %.14204.ph264, %.loopexit252 ], [ %.14204.ph289, %.loopexit277 ], [ %.14204.ph314, %.loopexit302 ], [ %.14204.ph339, %.loopexit327 ], [ %.14204.ph365, %.loopexit353 ], [ %.14204.ph391, %.loopexit379 ], [ %.14204.ph416, %.loopexit404 ], [ %.14204.ph441, %.loopexit429 ], [ %.14204.ph466, %.loopexit454 ], [ %.14204.ph493, %.loopexit481 ], [ %.14204.ph518, %.loopexit506 ], [ %.14204.ph543, %.loopexit531 ], [ %.14204.ph568, %.loopexit556 ], [ %.14204.ph595, %.loopexit583 ], [ %.14204.ph620, %.loopexit608 ], [ %.14204.ph645, %.loopexit633 ], [ %.14204.ph670, %.loopexit658 ], [ %.14204.ph695, %.loopexit683 ], [ %.14204.ph720, %.loopexit708 ], [ %.14204.ph745, %.loopexit733 ], [ %.14204.ph770, %.loopexit758 ], [ %.14204.ph795, %.loopexit783 ], [ %.14204.ph820, %.loopexit808 ], [ %.14204.ph845, %.loopexit833 ], [ %.14204.ph870, %.loopexit858 ], [ %.14204.ph895, %.loopexit883 ], [ %.14204.ph920, %.loopexit908 ], [ %.14204.ph945, %.loopexit933 ], [ %.14204.ph970, %.loopexit958 ], [ %.14204.ph995, %.loopexit983 ], [ %.14204.ph1020, %.loopexit1008 ]
  %.11189 = phi i32 [ %55, %4044 ], [ %55, %._crit_edge ], [ %.6184, %2540 ], [ %.6184, %2555 ], [ %55, %._crit_edge628 ], [ %55, %._crit_edge625 ], [ %55, %._crit_edge622 ], [ %55, %353 ], [ %55, %._crit_edge619 ], [ %55, %395 ], [ %55, %372 ], [ %55, %399 ], [ %55, %475 ], [ %55, %._crit_edge613 ], [ %55, %._crit_edge610 ], [ %55, %._crit_edge607 ], [ %55, %._crit_edge604 ], [ %55, %._crit_edge601 ], [ %55, %._crit_edge577 ], [ %55, %1395 ], [ %55, %1569 ], [ %55, %._crit_edge570 ], [ %55, %._crit_edge567 ], [ %55, %1778 ], [ %55, %1891 ], [ %2099, %2121 ], [ %.1179, %2214 ], [ %.1179, %2295 ], [ %.1179, %2289 ], [ %.4182, %2322 ], [ %.6184, %2415 ], [ %.6184, %2496 ], [ %.6184, %2490 ], [ %.3181, %2566 ], [ %.3181, %2767 ], [ %.9187, %2860 ], [ %.9187, %2941 ], [ %.9187, %2935 ], [ %.3181, %2959 ], [ %.3181, %2955 ], [ %.3181, %3382 ], [ %.3181, %3401 ], [ %.3181, %3234 ], [ %.3181, %3253 ], [ %55, %._crit_edge395 ], [ %55, %._crit_edge392 ], [ %55, %._crit_edge389 ], [ %55, %._crit_edge386 ], [ %55, %._crit_edge383 ], [ %.11189.ph, %.loopexit ], [ %.11189.ph15, %.loopexit2 ], [ %.11189.ph40, %.loopexit27 ], [ %.11189.ph65, %.loopexit52 ], [ %.11189.ph90, %.loopexit77 ], [ %.11189.ph115, %.loopexit102 ], [ %.11189.ph140, %.loopexit127 ], [ %.11189.ph165, %.loopexit152 ], [ %.11189.ph190, %.loopexit177 ], [ %.11189.ph215, %.loopexit202 ], [ %.11189.ph240, %.loopexit227 ], [ %.11189.ph265, %.loopexit252 ], [ %.11189.ph290, %.loopexit277 ], [ %.11189.ph315, %.loopexit302 ], [ %.11189.ph340, %.loopexit327 ], [ %.11189.ph366, %.loopexit353 ], [ %.11189.ph392, %.loopexit379 ], [ %.11189.ph417, %.loopexit404 ], [ %.11189.ph442, %.loopexit429 ], [ %.11189.ph467, %.loopexit454 ], [ %.11189.ph494, %.loopexit481 ], [ %.11189.ph519, %.loopexit506 ], [ %.11189.ph544, %.loopexit531 ], [ %.11189.ph569, %.loopexit556 ], [ %.11189.ph596, %.loopexit583 ], [ %.11189.ph621, %.loopexit608 ], [ %.11189.ph646, %.loopexit633 ], [ %.11189.ph671, %.loopexit658 ], [ %.11189.ph696, %.loopexit683 ], [ %.11189.ph721, %.loopexit708 ], [ %.11189.ph746, %.loopexit733 ], [ %.11189.ph771, %.loopexit758 ], [ %.11189.ph796, %.loopexit783 ], [ %.11189.ph821, %.loopexit808 ], [ %.11189.ph846, %.loopexit833 ], [ %.11189.ph871, %.loopexit858 ], [ %.11189.ph896, %.loopexit883 ], [ %.11189.ph921, %.loopexit908 ], [ %.11189.ph946, %.loopexit933 ], [ %.11189.ph971, %.loopexit958 ], [ %.11189.ph996, %.loopexit983 ], [ %.11189.ph1021, %.loopexit1008 ]
  %.8177 = phi i32 [ %53, %4044 ], [ %53, %._crit_edge ], [ %2509, %2540 ], [ %2509, %2555 ], [ %53, %._crit_edge628 ], [ %53, %._crit_edge625 ], [ %53, %._crit_edge622 ], [ %53, %353 ], [ %53, %._crit_edge619 ], [ %53, %395 ], [ %53, %372 ], [ %53, %399 ], [ %53, %475 ], [ %53, %._crit_edge613 ], [ %53, %._crit_edge610 ], [ %53, %._crit_edge607 ], [ %53, %._crit_edge604 ], [ %53, %._crit_edge601 ], [ %53, %._crit_edge577 ], [ %53, %1395 ], [ %53, %1569 ], [ %53, %._crit_edge570 ], [ %53, %._crit_edge567 ], [ %53, %1778 ], [ %53, %1891 ], [ %53, %2121 ], [ %53, %2214 ], [ %53, %2295 ], [ %53, %2289 ], [ %.1170, %2322 ], [ %.3172, %2415 ], [ %.3172, %2496 ], [ %.3172, %2490 ], [ %.0169, %2566 ], [ %.0169, %2767 ], [ %.6175, %2860 ], [ %.6175, %2941 ], [ %.6175, %2935 ], [ %.0169, %2959 ], [ %.0169, %2955 ], [ %.0169, %3382 ], [ %.0169, %3401 ], [ %.0169, %3234 ], [ %.0169, %3253 ], [ %53, %._crit_edge395 ], [ %53, %._crit_edge392 ], [ %53, %._crit_edge389 ], [ %53, %._crit_edge386 ], [ %53, %._crit_edge383 ], [ %.8177.ph, %.loopexit ], [ %.8177.ph16, %.loopexit2 ], [ %.8177.ph41, %.loopexit27 ], [ %.8177.ph66, %.loopexit52 ], [ %.8177.ph91, %.loopexit77 ], [ %.8177.ph116, %.loopexit102 ], [ %.8177.ph141, %.loopexit127 ], [ %.8177.ph166, %.loopexit152 ], [ %.8177.ph191, %.loopexit177 ], [ %.8177.ph216, %.loopexit202 ], [ %.8177.ph241, %.loopexit227 ], [ %.8177.ph266, %.loopexit252 ], [ %.8177.ph291, %.loopexit277 ], [ %.8177.ph316, %.loopexit302 ], [ %.8177.ph341, %.loopexit327 ], [ %.8177.ph367, %.loopexit353 ], [ %.8177.ph393, %.loopexit379 ], [ %.8177.ph418, %.loopexit404 ], [ %.8177.ph443, %.loopexit429 ], [ %.8177.ph468, %.loopexit454 ], [ %.8177.ph495, %.loopexit481 ], [ %.8177.ph520, %.loopexit506 ], [ %.8177.ph545, %.loopexit531 ], [ %.8177.ph570, %.loopexit556 ], [ %.8177.ph597, %.loopexit583 ], [ %.8177.ph622, %.loopexit608 ], [ %.8177.ph647, %.loopexit633 ], [ %.8177.ph672, %.loopexit658 ], [ %.8177.ph697, %.loopexit683 ], [ %.8177.ph722, %.loopexit708 ], [ %.8177.ph747, %.loopexit733 ], [ %.8177.ph772, %.loopexit758 ], [ %.8177.ph797, %.loopexit783 ], [ %.8177.ph822, %.loopexit808 ], [ %.8177.ph847, %.loopexit833 ], [ %.8177.ph872, %.loopexit858 ], [ %.8177.ph897, %.loopexit883 ], [ %.8177.ph922, %.loopexit908 ], [ %.8177.ph947, %.loopexit933 ], [ %.8177.ph972, %.loopexit958 ], [ %.8177.ph997, %.loopexit983 ], [ %.8177.ph1022, %.loopexit1008 ]
  %.14168 = phi i32 [ %51, %4044 ], [ %51, %._crit_edge ], [ %.8162, %2540 ], [ %.8162, %2555 ], [ %51, %._crit_edge628 ], [ %51, %._crit_edge625 ], [ %51, %._crit_edge622 ], [ %51, %353 ], [ %51, %._crit_edge619 ], [ %51, %395 ], [ %51, %372 ], [ %51, %399 ], [ %51, %475 ], [ %51, %._crit_edge613 ], [ %51, %._crit_edge610 ], [ %51, %._crit_edge607 ], [ %51, %._crit_edge604 ], [ %51, %._crit_edge601 ], [ %51, %._crit_edge577 ], [ %51, %1395 ], [ %51, %1569 ], [ %51, %._crit_edge570 ], [ %51, %._crit_edge567 ], [ %51, %1778 ], [ %51, %1891 ], [ 0, %2121 ], [ %.2156, %2214 ], [ %.2156, %2295 ], [ %.2156, %2289 ], [ %.5159, %2322 ], [ %.8162, %2415 ], [ %.8162, %2496 ], [ %.8162, %2490 ], [ %.4158, %2566 ], [ %.4158, %2767 ], [ %.12166, %2860 ], [ %.12166, %2941 ], [ %.12166, %2935 ], [ %.4158, %2959 ], [ %.4158, %2955 ], [ %.4158, %3382 ], [ %.4158, %3401 ], [ %.4158, %3234 ], [ %.4158, %3253 ], [ %51, %._crit_edge395 ], [ %51, %._crit_edge392 ], [ %51, %._crit_edge389 ], [ %51, %._crit_edge386 ], [ %51, %._crit_edge383 ], [ %.14168.ph, %.loopexit ], [ %.14168.ph17, %.loopexit2 ], [ %.14168.ph42, %.loopexit27 ], [ %.14168.ph67, %.loopexit52 ], [ %.14168.ph92, %.loopexit77 ], [ %.14168.ph117, %.loopexit102 ], [ %.14168.ph142, %.loopexit127 ], [ %.14168.ph167, %.loopexit152 ], [ %.14168.ph192, %.loopexit177 ], [ %.14168.ph217, %.loopexit202 ], [ %.14168.ph242, %.loopexit227 ], [ %.14168.ph267, %.loopexit252 ], [ %.14168.ph292, %.loopexit277 ], [ %.14168.ph317, %.loopexit302 ], [ %.14168.ph342, %.loopexit327 ], [ %.14168.ph368, %.loopexit353 ], [ %.14168.ph394, %.loopexit379 ], [ %.14168.ph419, %.loopexit404 ], [ %.14168.ph444, %.loopexit429 ], [ %.14168.ph469, %.loopexit454 ], [ %.14168.ph496, %.loopexit481 ], [ %.14168.ph521, %.loopexit506 ], [ %.14168.ph546, %.loopexit531 ], [ %.14168.ph571, %.loopexit556 ], [ %.14168.ph598, %.loopexit583 ], [ %.14168.ph623, %.loopexit608 ], [ %.14168.ph648, %.loopexit633 ], [ %.14168.ph673, %.loopexit658 ], [ %.14168.ph698, %.loopexit683 ], [ %.14168.ph723, %.loopexit708 ], [ %.14168.ph748, %.loopexit733 ], [ %.14168.ph773, %.loopexit758 ], [ %.14168.ph798, %.loopexit783 ], [ %.14168.ph823, %.loopexit808 ], [ %.14168.ph848, %.loopexit833 ], [ %.14168.ph873, %.loopexit858 ], [ %.14168.ph898, %.loopexit883 ], [ %.14168.ph923, %.loopexit908 ], [ %.14168.ph948, %.loopexit933 ], [ %.14168.ph973, %.loopexit958 ], [ %.14168.ph998, %.loopexit983 ], [ %.14168.ph1023, %.loopexit1008 ]
  %.14153 = phi i32 [ %49, %4044 ], [ %49, %._crit_edge ], [ %.8147, %2540 ], [ %.8147, %2555 ], [ %49, %._crit_edge628 ], [ %49, %._crit_edge625 ], [ %49, %._crit_edge622 ], [ %49, %353 ], [ %49, %._crit_edge619 ], [ %49, %395 ], [ %49, %372 ], [ %49, %399 ], [ %49, %475 ], [ %49, %._crit_edge613 ], [ %49, %._crit_edge610 ], [ %49, %._crit_edge607 ], [ %49, %._crit_edge604 ], [ %49, %._crit_edge601 ], [ %49, %._crit_edge577 ], [ %49, %1395 ], [ %49, %1569 ], [ %49, %._crit_edge570 ], [ %49, %._crit_edge567 ], [ %49, %1778 ], [ %49, %1891 ], [ %2122, %2121 ], [ %.2141, %2214 ], [ %.2141, %2295 ], [ %.2141, %2289 ], [ %2323, %2322 ], [ %.8147, %2415 ], [ %.8147, %2496 ], [ %.8147, %2490 ], [ %.4143, %2566 ], [ %2768, %2767 ], [ %.12151, %2860 ], [ %.12151, %2941 ], [ %.12151, %2935 ], [ %.4143, %2959 ], [ %.4143, %2955 ], [ %.4143, %3382 ], [ %.4143, %3401 ], [ %.4143, %3234 ], [ %.4143, %3253 ], [ %49, %._crit_edge395 ], [ %49, %._crit_edge392 ], [ %49, %._crit_edge389 ], [ %49, %._crit_edge386 ], [ %49, %._crit_edge383 ], [ %.14153.ph, %.loopexit ], [ %.14153.ph18, %.loopexit2 ], [ %.14153.ph43, %.loopexit27 ], [ %.14153.ph68, %.loopexit52 ], [ %.14153.ph93, %.loopexit77 ], [ %.14153.ph118, %.loopexit102 ], [ %.14153.ph143, %.loopexit127 ], [ %.14153.ph168, %.loopexit152 ], [ %.14153.ph193, %.loopexit177 ], [ %.14153.ph218, %.loopexit202 ], [ %.14153.ph243, %.loopexit227 ], [ %.14153.ph268, %.loopexit252 ], [ %.14153.ph293, %.loopexit277 ], [ %.14153.ph318, %.loopexit302 ], [ %.14153.ph343, %.loopexit327 ], [ %.14153.ph369, %.loopexit353 ], [ %.14153.ph395, %.loopexit379 ], [ %.14153.ph420, %.loopexit404 ], [ %.14153.ph445, %.loopexit429 ], [ %.14153.ph470, %.loopexit454 ], [ %.14153.ph497, %.loopexit481 ], [ %.14153.ph522, %.loopexit506 ], [ %.14153.ph547, %.loopexit531 ], [ %.14153.ph572, %.loopexit556 ], [ %.14153.ph599, %.loopexit583 ], [ %.14153.ph624, %.loopexit608 ], [ %.14153.ph649, %.loopexit633 ], [ %.14153.ph674, %.loopexit658 ], [ %.14153.ph699, %.loopexit683 ], [ %.14153.ph724, %.loopexit708 ], [ %.14153.ph749, %.loopexit733 ], [ %.14153.ph774, %.loopexit758 ], [ %.14153.ph799, %.loopexit783 ], [ %.14153.ph824, %.loopexit808 ], [ %.14153.ph849, %.loopexit833 ], [ %.14153.ph874, %.loopexit858 ], [ %.14153.ph899, %.loopexit883 ], [ %.14153.ph924, %.loopexit908 ], [ %.14153.ph949, %.loopexit933 ], [ %.14153.ph974, %.loopexit958 ], [ %.14153.ph999, %.loopexit983 ], [ %.14153.ph1024, %.loopexit1008 ]
  %.11138 = phi i32 [ %47, %4044 ], [ %47, %._crit_edge ], [ %.6133, %2540 ], [ %.6133, %2555 ], [ %47, %._crit_edge628 ], [ %47, %._crit_edge625 ], [ %47, %._crit_edge622 ], [ %47, %353 ], [ %47, %._crit_edge619 ], [ %47, %395 ], [ %47, %372 ], [ %47, %399 ], [ %47, %475 ], [ %47, %._crit_edge613 ], [ %47, %._crit_edge610 ], [ %47, %._crit_edge607 ], [ %47, %._crit_edge604 ], [ %47, %._crit_edge601 ], [ %47, %._crit_edge577 ], [ %47, %1395 ], [ %47, %1569 ], [ %47, %._crit_edge570 ], [ %47, %._crit_edge567 ], [ %47, %1778 ], [ %47, %1891 ], [ %2118, %2121 ], [ %.1128, %2214 ], [ %.1128, %2295 ], [ %.1128, %2289 ], [ %.4131, %2322 ], [ %.6133, %2415 ], [ %.6133, %2496 ], [ %.6133, %2490 ], [ %.3130, %2566 ], [ %.3130, %2767 ], [ %.9136, %2860 ], [ %.9136, %2941 ], [ %.9136, %2935 ], [ %.3130, %2959 ], [ %.3130, %2955 ], [ %.3130, %3382 ], [ %.3130, %3401 ], [ %.3130, %3234 ], [ %.3130, %3253 ], [ %47, %._crit_edge395 ], [ %47, %._crit_edge392 ], [ %47, %._crit_edge389 ], [ %47, %._crit_edge386 ], [ %47, %._crit_edge383 ], [ %.11138.ph, %.loopexit ], [ %.11138.ph19, %.loopexit2 ], [ %.11138.ph44, %.loopexit27 ], [ %.11138.ph69, %.loopexit52 ], [ %.11138.ph94, %.loopexit77 ], [ %.11138.ph119, %.loopexit102 ], [ %.11138.ph144, %.loopexit127 ], [ %.11138.ph169, %.loopexit152 ], [ %.11138.ph194, %.loopexit177 ], [ %.11138.ph219, %.loopexit202 ], [ %.11138.ph244, %.loopexit227 ], [ %.11138.ph269, %.loopexit252 ], [ %.11138.ph294, %.loopexit277 ], [ %.11138.ph319, %.loopexit302 ], [ %.11138.ph344, %.loopexit327 ], [ %.11138.ph370, %.loopexit353 ], [ %.11138.ph396, %.loopexit379 ], [ %.11138.ph421, %.loopexit404 ], [ %.11138.ph446, %.loopexit429 ], [ %.11138.ph471, %.loopexit454 ], [ %.11138.ph498, %.loopexit481 ], [ %.11138.ph523, %.loopexit506 ], [ %.11138.ph548, %.loopexit531 ], [ %.11138.ph573, %.loopexit556 ], [ %.11138.ph600, %.loopexit583 ], [ %.11138.ph625, %.loopexit608 ], [ %.11138.ph650, %.loopexit633 ], [ %.11138.ph675, %.loopexit658 ], [ %.11138.ph700, %.loopexit683 ], [ %.11138.ph725, %.loopexit708 ], [ %.11138.ph750, %.loopexit733 ], [ %.11138.ph775, %.loopexit758 ], [ %.11138.ph800, %.loopexit783 ], [ %.11138.ph825, %.loopexit808 ], [ %.11138.ph850, %.loopexit833 ], [ %.11138.ph875, %.loopexit858 ], [ %.11138.ph900, %.loopexit883 ], [ %.11138.ph925, %.loopexit908 ], [ %.11138.ph950, %.loopexit933 ], [ %.11138.ph975, %.loopexit958 ], [ %.11138.ph1000, %.loopexit983 ], [ %.11138.ph1025, %.loopexit1008 ]
  %.20126 = phi i32 [ %45, %4044 ], [ %45, %._crit_edge ], [ %.15121, %2540 ], [ %.15121, %2555 ], [ %45, %._crit_edge628 ], [ %45, %._crit_edge625 ], [ %45, %._crit_edge622 ], [ %45, %353 ], [ %45, %._crit_edge619 ], [ %45, %395 ], [ %45, %372 ], [ %45, %399 ], [ %45, %475 ], [ %45, %._crit_edge613 ], [ %45, %._crit_edge610 ], [ %45, %._crit_edge607 ], [ %45, %._crit_edge604 ], [ %45, %._crit_edge601 ], [ %45, %._crit_edge577 ], [ %45, %1395 ], [ %45, %1569 ], [ %45, %._crit_edge570 ], [ %1654, %._crit_edge567 ], [ %.2108, %1778 ], [ %.6112, %1891 ], [ %.3109, %2121 ], [ %.10116, %2214 ], [ %.10116, %2295 ], [ %.10116, %2289 ], [ %.13119, %2322 ], [ %.15121, %2415 ], [ %.15121, %2496 ], [ %.15121, %2490 ], [ %.12118, %2566 ], [ %.12118, %2767 ], [ %.18124, %2860 ], [ %.18124, %2941 ], [ %.18124, %2935 ], [ %.12118, %2959 ], [ %.12118, %2955 ], [ %.12118, %3382 ], [ %.12118, %3401 ], [ %.12118, %3234 ], [ %.12118, %3253 ], [ %45, %._crit_edge395 ], [ %45, %._crit_edge392 ], [ %45, %._crit_edge389 ], [ %45, %._crit_edge386 ], [ %45, %._crit_edge383 ], [ %.20126.ph, %.loopexit ], [ %.20126.ph20, %.loopexit2 ], [ %.20126.ph45, %.loopexit27 ], [ %.20126.ph70, %.loopexit52 ], [ %.20126.ph95, %.loopexit77 ], [ %.20126.ph120, %.loopexit102 ], [ %.20126.ph145, %.loopexit127 ], [ %.20126.ph170, %.loopexit152 ], [ %.20126.ph195, %.loopexit177 ], [ %.20126.ph220, %.loopexit202 ], [ %.20126.ph245, %.loopexit227 ], [ %.20126.ph270, %.loopexit252 ], [ %.20126.ph295, %.loopexit277 ], [ %.20126.ph320, %.loopexit302 ], [ %.20126.ph345, %.loopexit327 ], [ %.20126.ph371, %.loopexit353 ], [ %.20126.ph397, %.loopexit379 ], [ %.20126.ph422, %.loopexit404 ], [ %.20126.ph447, %.loopexit429 ], [ %.20126.ph472, %.loopexit454 ], [ %.20126.ph499, %.loopexit481 ], [ %.20126.ph524, %.loopexit506 ], [ %.20126.ph549, %.loopexit531 ], [ %.20126.ph574, %.loopexit556 ], [ %.20126.ph601, %.loopexit583 ], [ %.20126.ph626, %.loopexit608 ], [ %.20126.ph651, %.loopexit633 ], [ %.20126.ph676, %.loopexit658 ], [ %.20126.ph701, %.loopexit683 ], [ %.20126.ph726, %.loopexit708 ], [ %.20126.ph751, %.loopexit733 ], [ %.20126.ph776, %.loopexit758 ], [ %.20126.ph801, %.loopexit783 ], [ %.20126.ph826, %.loopexit808 ], [ %.20126.ph851, %.loopexit833 ], [ %.20126.ph876, %.loopexit858 ], [ %.20126.ph901, %.loopexit883 ], [ %.20126.ph926, %.loopexit908 ], [ %.20126.ph951, %.loopexit933 ], [ %.20126.ph976, %.loopexit958 ], [ %.20126.ph1001, %.loopexit983 ], [ %.20126.ph1026, %.loopexit1008 ]
  %.21105 = phi i32 [ %43, %4044 ], [ %43, %._crit_edge ], [ %.16100, %2540 ], [ %.16100, %2555 ], [ %43, %._crit_edge628 ], [ %43, %._crit_edge625 ], [ %43, %._crit_edge622 ], [ %43, %353 ], [ %43, %._crit_edge619 ], [ %43, %395 ], [ %43, %372 ], [ %43, %399 ], [ %43, %475 ], [ %43, %._crit_edge613 ], [ %43, %._crit_edge610 ], [ %43, %._crit_edge607 ], [ %43, %._crit_edge604 ], [ %43, %._crit_edge601 ], [ %43, %._crit_edge577 ], [ %43, %1395 ], [ %43, %1569 ], [ %1588, %._crit_edge570 ], [ %.084, %._crit_edge567 ], [ %.387, %1778 ], [ %.791, %1891 ], [ %.488, %2121 ], [ %.1195, %2214 ], [ %.1195, %2295 ], [ %.1195, %2289 ], [ %.1498, %2322 ], [ %.16100, %2415 ], [ %.16100, %2496 ], [ %.16100, %2490 ], [ %.1397, %2566 ], [ %.1397, %2767 ], [ %.19103, %2860 ], [ %.19103, %2941 ], [ %.19103, %2935 ], [ %.1397, %2959 ], [ %.1397, %2955 ], [ %.1397, %3382 ], [ %.1397, %3401 ], [ %.1397, %3234 ], [ %.1397, %3253 ], [ %43, %._crit_edge395 ], [ %43, %._crit_edge392 ], [ %43, %._crit_edge389 ], [ %43, %._crit_edge386 ], [ %43, %._crit_edge383 ], [ %.21105.ph, %.loopexit ], [ %.21105.ph21, %.loopexit2 ], [ %.21105.ph46, %.loopexit27 ], [ %.21105.ph71, %.loopexit52 ], [ %.21105.ph96, %.loopexit77 ], [ %.21105.ph121, %.loopexit102 ], [ %.21105.ph146, %.loopexit127 ], [ %.21105.ph171, %.loopexit152 ], [ %.21105.ph196, %.loopexit177 ], [ %.21105.ph221, %.loopexit202 ], [ %.21105.ph246, %.loopexit227 ], [ %.21105.ph271, %.loopexit252 ], [ %.21105.ph296, %.loopexit277 ], [ %.21105.ph321, %.loopexit302 ], [ %.21105.ph346, %.loopexit327 ], [ %.21105.ph372, %.loopexit353 ], [ %.21105.ph398, %.loopexit379 ], [ %.21105.ph423, %.loopexit404 ], [ %.21105.ph448, %.loopexit429 ], [ %.21105.ph473, %.loopexit454 ], [ %.21105.ph500, %.loopexit481 ], [ %.21105.ph525, %.loopexit506 ], [ %.21105.ph550, %.loopexit531 ], [ %.21105.ph575, %.loopexit556 ], [ %.21105.ph602, %.loopexit583 ], [ %.21105.ph627, %.loopexit608 ], [ %.21105.ph652, %.loopexit633 ], [ %.21105.ph677, %.loopexit658 ], [ %.21105.ph702, %.loopexit683 ], [ %.21105.ph727, %.loopexit708 ], [ %.21105.ph752, %.loopexit733 ], [ %.21105.ph777, %.loopexit758 ], [ %.21105.ph802, %.loopexit783 ], [ %.21105.ph827, %.loopexit808 ], [ %.21105.ph852, %.loopexit833 ], [ %.21105.ph877, %.loopexit858 ], [ %.21105.ph902, %.loopexit883 ], [ %.21105.ph927, %.loopexit908 ], [ %.21105.ph952, %.loopexit933 ], [ %.21105.ph977, %.loopexit958 ], [ %.21105.ph1002, %.loopexit983 ], [ %.21105.ph1027, %.loopexit1008 ]
  %.2283 = phi i32 [ %41, %4044 ], [ %41, %._crit_edge ], [ %.1778, %2540 ], [ %.1778, %2555 ], [ %41, %._crit_edge628 ], [ %41, %._crit_edge625 ], [ %41, %._crit_edge622 ], [ %41, %353 ], [ %41, %._crit_edge619 ], [ %41, %395 ], [ %41, %372 ], [ %41, %399 ], [ %41, %475 ], [ %41, %._crit_edge613 ], [ %41, %._crit_edge610 ], [ %41, %._crit_edge607 ], [ %41, %._crit_edge604 ], [ %41, %._crit_edge601 ], [ %41, %._crit_edge577 ], [ %41, %1395 ], [ %41, %1569 ], [ %.061, %._crit_edge570 ], [ %.162, %._crit_edge567 ], [ %.465, %1778 ], [ %.869, %1891 ], [ %.566, %2121 ], [ %.1273, %2214 ], [ %.1273, %2295 ], [ %.1273, %2289 ], [ %.1576, %2322 ], [ %.1778, %2415 ], [ %.1778, %2496 ], [ %.1778, %2490 ], [ %.1475, %2566 ], [ %.1475, %2767 ], [ %.2081, %2860 ], [ %.2081, %2941 ], [ %.2081, %2935 ], [ %.1475, %2959 ], [ %.1475, %2955 ], [ %.1475, %3382 ], [ %.1475, %3401 ], [ %.1475, %3234 ], [ %.1475, %3253 ], [ %41, %._crit_edge395 ], [ %41, %._crit_edge392 ], [ %41, %._crit_edge389 ], [ %41, %._crit_edge386 ], [ %41, %._crit_edge383 ], [ %.2283.ph, %.loopexit ], [ %.2283.ph22, %.loopexit2 ], [ %.2283.ph47, %.loopexit27 ], [ %.2283.ph72, %.loopexit52 ], [ %.2283.ph97, %.loopexit77 ], [ %.2283.ph122, %.loopexit102 ], [ %.2283.ph147, %.loopexit127 ], [ %.2283.ph172, %.loopexit152 ], [ %.2283.ph197, %.loopexit177 ], [ %.2283.ph222, %.loopexit202 ], [ %.2283.ph247, %.loopexit227 ], [ %.2283.ph272, %.loopexit252 ], [ %.2283.ph297, %.loopexit277 ], [ %.2283.ph322, %.loopexit302 ], [ %.2283.ph347, %.loopexit327 ], [ %.2283.ph373, %.loopexit353 ], [ %.2283.ph399, %.loopexit379 ], [ %.2283.ph424, %.loopexit404 ], [ %.2283.ph449, %.loopexit429 ], [ %.2283.ph474, %.loopexit454 ], [ %.2283.ph501, %.loopexit481 ], [ %.2283.ph526, %.loopexit506 ], [ %.2283.ph551, %.loopexit531 ], [ %.2283.ph576, %.loopexit556 ], [ %.2283.ph603, %.loopexit583 ], [ %.2283.ph628, %.loopexit608 ], [ %.2283.ph653, %.loopexit633 ], [ %.2283.ph678, %.loopexit658 ], [ %.2283.ph703, %.loopexit683 ], [ %.2283.ph728, %.loopexit708 ], [ %.2283.ph753, %.loopexit733 ], [ %.2283.ph778, %.loopexit758 ], [ %.2283.ph803, %.loopexit783 ], [ %.2283.ph828, %.loopexit808 ], [ %.2283.ph853, %.loopexit833 ], [ %.2283.ph878, %.loopexit858 ], [ %.2283.ph903, %.loopexit883 ], [ %.2283.ph928, %.loopexit908 ], [ %.2283.ph953, %.loopexit933 ], [ %.2283.ph978, %.loopexit958 ], [ %.2283.ph1003, %.loopexit983 ], [ %.2283.ph1028, %.loopexit1008 ]
  %.1860 = phi i32 [ %39, %4044 ], [ %39, %._crit_edge ], [ %.1355, %2540 ], [ %.1355, %2555 ], [ %39, %._crit_edge628 ], [ %39, %._crit_edge625 ], [ %39, %._crit_edge622 ], [ %39, %353 ], [ %39, %._crit_edge619 ], [ %39, %395 ], [ %39, %372 ], [ %39, %399 ], [ %39, %475 ], [ %39, %._crit_edge613 ], [ %39, %._crit_edge610 ], [ %39, %._crit_edge607 ], [ %39, %._crit_edge604 ], [ %39, %._crit_edge601 ], [ %39, %._crit_edge577 ], [ %39, %1395 ], [ %39, %1569 ], [ %39, %._crit_edge570 ], [ %39, %._crit_edge567 ], [ %39, %1778 ], [ %.345, %1891 ], [ %.648.lcssa, %2121 ], [ %.850, %2214 ], [ %.850, %2295 ], [ %.850, %2289 ], [ %.1153, %2322 ], [ %.1355, %2415 ], [ %.1355, %2496 ], [ %.1355, %2490 ], [ %.1052, %2566 ], [ %.1052, %2767 ], [ %.1658, %2860 ], [ %.1658, %2941 ], [ %.1658, %2935 ], [ %.1052, %2959 ], [ %.1052, %2955 ], [ %.1052, %3382 ], [ %.1052, %3401 ], [ %.1052, %3234 ], [ %.1052, %3253 ], [ %39, %._crit_edge395 ], [ %39, %._crit_edge392 ], [ %39, %._crit_edge389 ], [ %39, %._crit_edge386 ], [ %39, %._crit_edge383 ], [ %.1860.ph, %.loopexit ], [ %.1860.ph23, %.loopexit2 ], [ %.1860.ph48, %.loopexit27 ], [ %.1860.ph73, %.loopexit52 ], [ %.1860.ph98, %.loopexit77 ], [ %.1860.ph123, %.loopexit102 ], [ %.1860.ph148, %.loopexit127 ], [ %.1860.ph173, %.loopexit152 ], [ %.1860.ph198, %.loopexit177 ], [ %.1860.ph223, %.loopexit202 ], [ %.1860.ph248, %.loopexit227 ], [ %.1860.ph273, %.loopexit252 ], [ %.1860.ph298, %.loopexit277 ], [ %.1860.ph323, %.loopexit302 ], [ %.1860.ph348, %.loopexit327 ], [ %.1860.ph374, %.loopexit353 ], [ %.1860.ph400, %.loopexit379 ], [ %.1860.ph425, %.loopexit404 ], [ %.1860.ph450, %.loopexit429 ], [ %.1860.ph475, %.loopexit454 ], [ %.1860.ph502, %.loopexit481 ], [ %.1860.ph527, %.loopexit506 ], [ %.1860.ph552, %.loopexit531 ], [ %.1860.ph577, %.loopexit556 ], [ %.1860.ph604, %.loopexit583 ], [ %.1860.ph629, %.loopexit608 ], [ %.1860.ph654, %.loopexit633 ], [ %.1860.ph679, %.loopexit658 ], [ %.1860.ph704, %.loopexit683 ], [ %.1860.ph729, %.loopexit708 ], [ %.1860.ph754, %.loopexit733 ], [ %.1860.ph779, %.loopexit758 ], [ %.1860.ph804, %.loopexit783 ], [ %.1860.ph829, %.loopexit808 ], [ %.1860.ph854, %.loopexit833 ], [ %.1860.ph879, %.loopexit858 ], [ %.1860.ph904, %.loopexit883 ], [ %.1860.ph929, %.loopexit908 ], [ %.1860.ph954, %.loopexit933 ], [ %.1860.ph979, %.loopexit958 ], [ %.1860.ph1004, %.loopexit983 ], [ %.1860.ph1029, %.loopexit1008 ]
  %.2841 = phi i32 [ %37, %4044 ], [ %37, %._crit_edge ], [ %.2134, %2540 ], [ %.2134, %2555 ], [ %37, %._crit_edge628 ], [ %37, %._crit_edge625 ], [ %37, %._crit_edge622 ], [ %37, %353 ], [ %37, %._crit_edge619 ], [ %37, %395 ], [ %37, %372 ], [ %37, %399 ], [ %37, %475 ], [ %37, %._crit_edge613 ], [ %37, %._crit_edge610 ], [ %37, %._crit_edge607 ], [ %37, %._crit_edge604 ], [ %37, %._crit_edge601 ], [ %37, %._crit_edge577 ], [ %37, %1395 ], [ %.013, %1569 ], [ %.417, %._crit_edge570 ], [ %.518, %._crit_edge567 ], [ %1779, %1778 ], [ %.1225, %1891 ], [ %.922, %2121 ], [ %.1629, %2214 ], [ %.1629, %2295 ], [ %.1629, %2289 ], [ %.1932, %2322 ], [ %.2134, %2415 ], [ %.2134, %2496 ], [ %.2134, %2490 ], [ %.1831, %2566 ], [ %.1831, %2767 ], [ %.2437, %2860 ], [ %.2437, %2941 ], [ %.2437, %2935 ], [ %.1831, %2959 ], [ %.1831, %2955 ], [ %.lcssa, %3253 ], [ %.lcssa, %3234 ], [ %.1831, %3401 ], [ %.1831, %3382 ], [ %37, %._crit_edge395 ], [ %37, %._crit_edge392 ], [ %37, %._crit_edge389 ], [ %37, %._crit_edge386 ], [ %37, %._crit_edge383 ], [ %.2841.ph, %.loopexit ], [ %.2841.ph24, %.loopexit2 ], [ %.2841.ph49, %.loopexit27 ], [ %.2841.ph74, %.loopexit52 ], [ %.2841.ph99, %.loopexit77 ], [ %.2841.ph124, %.loopexit102 ], [ %.2841.ph149, %.loopexit127 ], [ %.2841.ph174, %.loopexit152 ], [ %.2841.ph199, %.loopexit177 ], [ %.2841.ph224, %.loopexit202 ], [ %.2841.ph249, %.loopexit227 ], [ %.2841.ph274, %.loopexit252 ], [ %.2841.ph299, %.loopexit277 ], [ %.2841.ph324, %.loopexit302 ], [ %.2841.ph349, %.loopexit327 ], [ %.2841.ph375, %.loopexit353 ], [ %.2841.ph401, %.loopexit379 ], [ %.2841.ph426, %.loopexit404 ], [ %.2841.ph451, %.loopexit429 ], [ %.2841.ph476, %.loopexit454 ], [ %.2841.ph503, %.loopexit481 ], [ %.2841.ph528, %.loopexit506 ], [ %.2841.ph553, %.loopexit531 ], [ %.2841.ph578, %.loopexit556 ], [ %.2841.ph605, %.loopexit583 ], [ %.2841.ph630, %.loopexit608 ], [ %.2841.ph655, %.loopexit633 ], [ %.2841.ph680, %.loopexit658 ], [ %.2841.ph705, %.loopexit683 ], [ %.2841.ph730, %.loopexit708 ], [ %.2841.ph755, %.loopexit733 ], [ %.2841.ph780, %.loopexit758 ], [ %.2841.ph805, %.loopexit783 ], [ %.2841.ph830, %.loopexit808 ], [ %.2841.ph855, %.loopexit833 ], [ %.2841.ph880, %.loopexit858 ], [ %.2841.ph905, %.loopexit883 ], [ %.2841.ph930, %.loopexit908 ], [ %.2841.ph955, %.loopexit933 ], [ %.2841.ph980, %.loopexit958 ], [ %.2841.ph1005, %.loopexit983 ], [ %.2841.ph1030, %.loopexit1008 ]
  %.40 = phi i32 [ %35, %4044 ], [ %35, %._crit_edge ], [ %.27, %2540 ], [ %.27, %2555 ], [ %35, %._crit_edge628 ], [ %35, %._crit_edge625 ], [ %35, %._crit_edge622 ], [ %35, %353 ], [ %35, %._crit_edge619 ], [ %35, %395 ], [ %35, %372 ], [ %35, %399 ], [ %35, %475 ], [ %35, %._crit_edge613 ], [ %35, %._crit_edge610 ], [ %35, %._crit_edge607 ], [ %35, %._crit_edge604 ], [ %35, %._crit_edge601 ], [ %35, %._crit_edge577 ], [ %35, %1395 ], [ %.3, %1569 ], [ %.7, %._crit_edge570 ], [ %.8, %._crit_edge567 ], [ %.11, %1778 ], [ %.16, %1891 ], [ %2119, %2121 ], [ %.22, %2214 ], [ %.22, %2295 ], [ %.22, %2289 ], [ %.25, %2322 ], [ %.27, %2415 ], [ %.27, %2496 ], [ %.27, %2490 ], [ %.24, %2566 ], [ %.24, %2767 ], [ %.30, %2860 ], [ %.30, %2941 ], [ %.30, %2935 ], [ %.24, %2959 ], [ %.24, %2955 ], [ %.2639.lcssa, %3253 ], [ %.2639.lcssa, %3234 ], [ %.38.lcssa, %3401 ], [ %.38.lcssa, %3382 ], [ %35, %._crit_edge395 ], [ %35, %._crit_edge392 ], [ %35, %._crit_edge389 ], [ %35, %._crit_edge386 ], [ %35, %._crit_edge383 ], [ %.40.ph, %.loopexit ], [ %.40.ph25, %.loopexit2 ], [ %.40.ph50, %.loopexit27 ], [ %.40.ph75, %.loopexit52 ], [ %.40.ph100, %.loopexit77 ], [ %.40.ph125, %.loopexit102 ], [ %.40.ph150, %.loopexit127 ], [ %.40.ph175, %.loopexit152 ], [ %.40.ph200, %.loopexit177 ], [ %.40.ph225, %.loopexit202 ], [ %.40.ph250, %.loopexit227 ], [ %.40.ph275, %.loopexit252 ], [ %.40.ph300, %.loopexit277 ], [ %.40.ph325, %.loopexit302 ], [ %.40.ph350, %.loopexit327 ], [ %.40.ph376, %.loopexit353 ], [ %.40.ph402, %.loopexit379 ], [ %.40.ph427, %.loopexit404 ], [ %.40.ph452, %.loopexit429 ], [ %.40.ph477, %.loopexit454 ], [ %.40.ph504, %.loopexit481 ], [ %.40.ph529, %.loopexit506 ], [ %.40.ph554, %.loopexit531 ], [ %.40.ph579, %.loopexit556 ], [ %.40.ph606, %.loopexit583 ], [ %.40.ph631, %.loopexit608 ], [ %.40.ph656, %.loopexit633 ], [ %.40.ph681, %.loopexit658 ], [ %.40.ph706, %.loopexit683 ], [ %.40.ph731, %.loopexit708 ], [ %.40.ph756, %.loopexit733 ], [ %.40.ph781, %.loopexit758 ], [ %.40.ph806, %.loopexit783 ], [ %.40.ph831, %.loopexit808 ], [ %.40.ph856, %.loopexit833 ], [ %.40.ph881, %.loopexit858 ], [ %.40.ph906, %.loopexit883 ], [ %.40.ph931, %.loopexit908 ], [ %.40.ph956, %.loopexit933 ], [ %.40.ph981, %.loopexit958 ], [ %.40.ph1006, %.loopexit983 ], [ %.40.ph1031, %.loopexit1008 ]
  %.03 = phi i32 [ 0, %4044 ], [ 4, %._crit_edge ], [ -4, %2540 ], [ -4, %2555 ], [ -5, %._crit_edge628 ], [ -5, %._crit_edge625 ], [ -5, %._crit_edge622 ], [ -5, %353 ], [ -5, %._crit_edge619 ], [ -3, %395 ], [ -3, %372 ], [ -3, %399 ], [ -4, %475 ], [ -4, %._crit_edge613 ], [ -4, %._crit_edge610 ], [ -4, %._crit_edge607 ], [ -4, %._crit_edge604 ], [ -4, %._crit_edge601 ], [ -4, %._crit_edge577 ], [ -4, %1395 ], [ -4, %1569 ], [ -4, %._crit_edge570 ], [ -4, %._crit_edge567 ], [ -4, %1778 ], [ -4, %1891 ], [ -4, %2121 ], [ -4, %2214 ], [ -4, %2295 ], [ -4, %2289 ], [ -4, %2322 ], [ -4, %2415 ], [ -4, %2496 ], [ -4, %2490 ], [ -4, %2566 ], [ -4, %2767 ], [ -4, %2860 ], [ -4, %2941 ], [ -4, %2935 ], [ -4, %2959 ], [ -4, %2955 ], [ 0, %3382 ], [ 0, %3401 ], [ 0, %3234 ], [ 0, %3253 ], [ -4, %._crit_edge395 ], [ -4, %._crit_edge392 ], [ -4, %._crit_edge389 ], [ -4, %._crit_edge386 ], [ -4, %._crit_edge383 ], [ %.03.ph, %.loopexit ], [ %.03.ph26, %.loopexit2 ], [ %.03.ph51, %.loopexit27 ], [ %.03.ph76, %.loopexit52 ], [ %.03.ph101, %.loopexit77 ], [ %.03.ph126, %.loopexit102 ], [ %.03.ph151, %.loopexit127 ], [ %.03.ph176, %.loopexit152 ], [ %.03.ph201, %.loopexit177 ], [ %.03.ph226, %.loopexit202 ], [ %.03.ph251, %.loopexit227 ], [ %.03.ph276, %.loopexit252 ], [ %.03.ph301, %.loopexit277 ], [ %.03.ph326, %.loopexit302 ], [ %.03.ph351, %.loopexit327 ], [ %.03.ph377, %.loopexit353 ], [ %.03.ph403, %.loopexit379 ], [ %.03.ph428, %.loopexit404 ], [ %.03.ph453, %.loopexit429 ], [ %.03.ph478, %.loopexit454 ], [ %.03.ph505, %.loopexit481 ], [ %.03.ph530, %.loopexit506 ], [ %.03.ph555, %.loopexit531 ], [ %.03.ph580, %.loopexit556 ], [ %.03.ph607, %.loopexit583 ], [ %.03.ph632, %.loopexit608 ], [ %.03.ph657, %.loopexit633 ], [ %.03.ph682, %.loopexit658 ], [ %.03.ph707, %.loopexit683 ], [ %.03.ph732, %.loopexit708 ], [ %.03.ph757, %.loopexit733 ], [ %.03.ph782, %.loopexit758 ], [ %.03.ph807, %.loopexit783 ], [ %.03.ph832, %.loopexit808 ], [ %.03.ph857, %.loopexit833 ], [ %.03.ph882, %.loopexit858 ], [ %.03.ph907, %.loopexit883 ], [ %.03.ph932, %.loopexit908 ], [ %.03.ph957, %.loopexit933 ], [ %.03.ph982, %.loopexit958 ], [ %.03.ph1007, %.loopexit983 ], [ %.03.ph1032, %.loopexit1008 ]
  %4046 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 40
  store i32 %.40, i32* %4046, align 4
  %4047 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 41
  store i32 %.2841, i32* %4047, align 8
  %4048 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 42
  store i32 %.1860, i32* %4048, align 4
  %4049 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 43
  store i32 %.2283, i32* %4049, align 8
  %4050 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 44
  store i32 %.21105, i32* %4050, align 4
  %4051 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 45
  store i32 %.20126, i32* %4051, align 8
  %4052 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 46
  store i32 %.11138, i32* %4052, align 4
  %4053 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 47
  store i32 %.14153, i32* %4053, align 8
  %4054 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 48
  store i32 %.14168, i32* %4054, align 4
  %4055 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 49
  store i32 %.8177, i32* %4055, align 8
  %4056 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 50
  store i32 %.11189, i32* %4056, align 4
  %4057 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 51
  store i32 %.14204, i32* %4057, align 8
  %4058 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 52
  store i32 %.13218, i32* %4058, align 4
  %4059 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 53
  store i32 %.8227, i32* %4059, align 8
  %4060 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 54
  store i32 %.18246, i32* %4060, align 4
  %4061 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 55
  store i32 %65, i32* %4061, align 8
  %4062 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 56
  store i32 %.11259, i32* %4062, align 4
  %4063 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 57
  store i32 %.10270, i32* %4063, align 8
  %4064 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 58
  store i32 %.10281, i32* %4064, align 4
  %4065 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 59
  store i32 %.14296, i32* %4065, align 8
  %4066 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 60
  store i32 %.14311, i32* %4066, align 4
  %4067 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 61
  store i32* %.14326, i32** %4067, align 8
  %4068 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 62
  store i32* %.14341, i32** %4068, align 8
  %4069 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 63
  store i32* %.14356, i32** %4069, align 8
  br label %4070

; <label>:4070:                                   ; preds = %3394, %3334, %3246, %3171, %4045
  %.0 = phi i32 [ %.03, %4045 ], [ 1, %3171 ], [ 1, %3246 ], [ 1, %3334 ], [ 1, %3394 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @makeMaps_d(%struct.DState*) #0 {
  %2 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 27
  store i32 0, i32* %2, align 8
  br label %3

; <label>:3:                                      ; preds = %1, %18
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %18 ]
  %.01 = phi i32 [ 0, %1 ], [ %19, %18 ]
  call void @unroll_loop(i32 86)
  %4 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 28
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %indvars.iv
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  br i1 %7, label %8, label %18

; <label>:8:                                      ; preds = %3
  %9 = trunc i32 %.01 to i8
  %10 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 30
  %11 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 27
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [256 x i8], [256 x i8]* %10, i64 0, i64 %13
  store i8 %9, i8* %14, align 1
  %15 = getelementptr inbounds %struct.DState, %struct.DState* %0, i32 0, i32 27
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  br label %18

; <label>:18:                                     ; preds = %3, %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %19 = add nuw nsw i32 %.01, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %3, label %20

; <label>:20:                                     ; preds = %18
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_blockSort(%struct.EState*) #0 {
  %2 = alloca i32, align 4, !track !64
  %3 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 8
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 9
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 6
  %8 = load i32*, i32** %7, align 8
  %9 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 28
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 12
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %10, 10000
  br i1 %15, label %16, label %21

; <label>:16:                                     ; preds = %1
  %17 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 4
  %18 = load i32*, i32** %17, align 8
  %19 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 5
  %20 = load i32*, i32** %19, align 8
  call void @fallbackSort(i32* %18, i32* %20, i32* %8, i32 %10, i32 %12)
  br label %62

; <label>:21:                                     ; preds = %1
  %22 = add nsw i32 %10, 34
  %23 = and i32 %22, 1
  %24 = icmp ne i32 %23, 0
  %25 = add nsw i32 %22, 1
  %spec.select = select i1 %24, i32 %25, i32 %22
  %26 = sext i32 %spec.select to i64
  %27 = getelementptr inbounds i8, i8* %6, i64 %26
  %28 = bitcast i8* %27 to i16*
  %29 = icmp slt i32 %14, 1
  %.01 = select i1 %29, i32 1, i32 %14
  %30 = icmp sgt i32 %.01, 100
  %spec.select1 = select i1 %30, i32 100, i32 %.01
  %31 = sub nsw i32 %spec.select1, 1
  %32 = sdiv i32 %31, 3
  %33 = mul nsw i32 %10, %32
  store i32 %33, i32* %2, align 4
  call void @mainSort(i32* %4, i8* %6, i16* %28, i32* %8, i32 %10, i32 %12, i32* %2)
  %34 = icmp sge i32 %12, 3
  br i1 %34, label %35, label %48

; <label>:35:                                     ; preds = %21
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %37 = load i32, i32* %2, align 4
  %38 = sub nsw i32 %33, %37
  %39 = load i32, i32* %2, align 4
  %40 = sub nsw i32 %33, %39
  %41 = sitofp i32 %40 to float
  %42 = icmp eq i32 %10, 0
  %. = select i1 %42, i32 1, i32 %10
  %43 = sitofp i32 %. to float
  %44 = fdiv float %41, %43
  %45 = fpext float %44 to double
  %46 = getelementptr [38 x i8], [38 x i8]* @.str.164, i32 0, i32 0
  %47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* %46, i32 %38, i32 %10, double %45)
  br label %48

; <label>:48:                                     ; preds = %35, %21
  %49 = load i32, i32* %2, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %62

; <label>:51:                                     ; preds = %48
  %52 = icmp sge i32 %12, 2
  br i1 %52, label %53, label %57

; <label>:53:                                     ; preds = %51
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %55 = getelementptr [54 x i8], [54 x i8]* @.str.1.165, i32 0, i32 0
  %56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* %55)
  br label %57

; <label>:57:                                     ; preds = %53, %51
  %58 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 4
  %59 = load i32*, i32** %58, align 8
  %60 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 5
  %61 = load i32*, i32** %60, align 8
  call void @fallbackSort(i32* %59, i32* %61, i32* %8, i32 %10, i32 %12)
  br label %62

; <label>:62:                                     ; preds = %48, %57, %16
  %63 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 7
  store i32 -1, i32* %63, align 8
  %64 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 17
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 0, %65
  br i1 %66, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %62
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %73
  %indvars.iv = phi i64 [ %indvars.iv.next, %73 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 154)
  %67 = getelementptr inbounds i32, i32* %4, i64 %indvars.iv
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %73

; <label>:70:                                     ; preds = %.lr.ph
  %.1.lcssa3.wide = phi i64 [ %indvars.iv, %.lr.ph ]
  %71 = trunc i64 %.1.lcssa3.wide to i32
  %72 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 7
  store i32 %71, i32* %72, align 8
  br label %.loopexit

; <label>:73:                                     ; preds = %.lr.ph
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %74 = load i32, i32* %64, align 4
  %75 = sext i32 %74 to i64
  %76 = icmp slt i64 %indvars.iv.next, %75
  br i1 %76, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %73
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %62, %70
  %77 = getelementptr inbounds %struct.EState, %struct.EState* %0, i32 0, i32 7
  %78 = load i32, i32* %77, align 8
  %79 = icmp ne i32 %78, -1
  br i1 %79, label %81, label %80

; <label>:80:                                     ; preds = %.loopexit
  call void @BZ2_bz__AssertH__fail(i32 1003)
  br label %81

; <label>:81:                                     ; preds = %80, %.loopexit
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @fallbackSort(i32*, i32*, i32*, i32, i32) #0 {
  %6 = alloca [257 x i32], align 16, !track !65
  %7 = alloca [256 x i32], align 16, !track !66
  %8 = bitcast i32* %1 to i8*
  %9 = icmp sge i32 %4, 4
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %5
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = getelementptr [28 x i8], [28 x i8]* @.str.2.167, i32 0, i32 0
  %13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* %12)
  br label %14

; <label>:14:                                     ; preds = %10, %5
  br label %15

; <label>:15:                                     ; preds = %14, %15
  %indvars.iv81 = phi i64 [ 0, %14 ], [ %indvars.iv.next82, %15 ]
  call void @unroll_loop(i32 156)
  %16 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %indvars.iv81
  store i32 0, i32* %16, align 4
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %exitcond83 = icmp ne i64 %indvars.iv.next82, 257
  br i1 %exitcond83, label %15, label %17

; <label>:17:                                     ; preds = %15
  %18 = icmp slt i32 0, %3
  br i1 %18, label %.lr.ph74.preheader, label %._crit_edge75

.lr.ph74.preheader:                               ; preds = %17
  %19 = zext i32 %3 to i64
  br label %.lr.ph74

.lr.ph74:                                         ; preds = %.lr.ph74.preheader, %.lr.ph74
  %indvars.iv76 = phi i64 [ %indvars.iv.next77, %.lr.ph74 ], [ 0, %.lr.ph74.preheader ]
  call void @unroll_loop(i32 157)
  %20 = getelementptr inbounds i8, i8* %8, i64 %indvars.iv76
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %23, align 4
  %indvars.iv.next77 = add nuw nsw i64 %indvars.iv76, 1
  %exitcond12 = icmp ne i64 %indvars.iv.next77, %19
  br i1 %exitcond12, label %.lr.ph74, label %._crit_edge75.loopexit

._crit_edge75.loopexit:                           ; preds = %.lr.ph74
  br label %._crit_edge75

._crit_edge75:                                    ; preds = %._crit_edge75.loopexit, %17
  br label %26

; <label>:26:                                     ; preds = %._crit_edge75, %26
  %indvars.iv69 = phi i64 [ 0, %._crit_edge75 ], [ %indvars.iv.next70, %26 ]
  call void @unroll_loop(i32 158)
  %27 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %indvars.iv69
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 %indvars.iv69
  store i32 %28, i32* %29, align 4
  %indvars.iv.next70 = add nuw nsw i64 %indvars.iv69, 1
  %exitcond71 = icmp ne i64 %indvars.iv.next70, 256
  br i1 %exitcond71, label %26, label %.preheader8

.preheader8:                                      ; preds = %26
  %indvars.iv65.ph = phi i64 [ 1, %26 ]
  br label %30

; <label>:30:                                     ; preds = %.preheader8, %30
  %indvars.iv65 = phi i64 [ %indvars.iv.next66, %30 ], [ %indvars.iv65.ph, %.preheader8 ]
  call void @unroll_loop(i32 159)
  %31 = sub nuw nsw i64 %indvars.iv65, 1
  %32 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %indvars.iv65
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %35, %33
  store i32 %36, i32* %34, align 4
  %indvars.iv.next66 = add nuw nsw i64 %indvars.iv65, 1
  %exitcond67 = icmp ne i64 %indvars.iv.next66, 257
  br i1 %exitcond67, label %30, label %37

; <label>:37:                                     ; preds = %30
  %38 = icmp slt i32 0, %3
  br i1 %38, label %.lr.ph58.preheader, label %._crit_edge59

.lr.ph58.preheader:                               ; preds = %37
  %39 = zext i32 %3 to i64
  br label %.lr.ph58

.lr.ph58:                                         ; preds = %.lr.ph58.preheader, %.lr.ph58
  %indvars.iv60 = phi i64 [ %indvars.iv.next61, %.lr.ph58 ], [ 0, %.lr.ph58.preheader ]
  call void @unroll_loop(i32 160)
  %40 = getelementptr inbounds i8, i8* %8, i64 %indvars.iv60
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sub nsw i32 %45, 1
  %47 = sext i32 %42 to i64
  %48 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %47
  store i32 %46, i32* %48, align 4
  %49 = sext i32 %46 to i64
  %50 = getelementptr inbounds i32, i32* %0, i64 %49
  %51 = trunc i64 %indvars.iv60 to i32
  store i32 %51, i32* %50, align 4
  %indvars.iv.next61 = add nuw nsw i64 %indvars.iv60, 1
  %exitcond11 = icmp ne i64 %indvars.iv.next61, %39
  br i1 %exitcond11, label %.lr.ph58, label %._crit_edge59.loopexit

._crit_edge59.loopexit:                           ; preds = %.lr.ph58
  br label %._crit_edge59

._crit_edge59:                                    ; preds = %._crit_edge59.loopexit, %37
  %52 = sdiv i32 %3, 32
  %53 = add nsw i32 2, %52
  %54 = icmp slt i32 0, %53
  br i1 %54, label %.lr.ph50.preheader, label %._crit_edge51

.lr.ph50.preheader:                               ; preds = %._crit_edge59
  %55 = zext i32 %53 to i64
  br label %.lr.ph50

.lr.ph50:                                         ; preds = %.lr.ph50.preheader, %.lr.ph50
  %indvars.iv52 = phi i64 [ %indvars.iv.next53, %.lr.ph50 ], [ 0, %.lr.ph50.preheader ]
  call void @unroll_loop(i32 161)
  %56 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv52
  store i32 0, i32* %56, align 4
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond10 = icmp ne i64 %indvars.iv.next53, %55
  br i1 %exitcond10, label %.lr.ph50, label %._crit_edge51.loopexit

._crit_edge51.loopexit:                           ; preds = %.lr.ph50
  br label %._crit_edge51

._crit_edge51:                                    ; preds = %._crit_edge51.loopexit, %._crit_edge59
  br label %57

; <label>:57:                                     ; preds = %._crit_edge51, %57
  %indvars.iv45 = phi i64 [ 0, %._crit_edge51 ], [ %indvars.iv.next46, %57 ]
  call void @unroll_loop(i32 162)
  %58 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %indvars.iv45
  %59 = load i32, i32* %58, align 4
  %60 = and i32 %59, 31
  %61 = shl i32 1, %60
  %62 = getelementptr inbounds [257 x i32], [257 x i32]* %6, i64 0, i64 %indvars.iv45
  %63 = load i32, i32* %62, align 4
  %64 = ashr i32 %63, 5
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %2, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = or i32 %67, %61
  store i32 %68, i32* %66, align 4
  %indvars.iv.next46 = add nuw nsw i64 %indvars.iv45, 1
  %exitcond47 = icmp ne i64 %indvars.iv.next46, 256
  br i1 %exitcond47, label %57, label %.preheader7

.preheader7:                                      ; preds = %57
  %.71842.ph = phi i32 [ 0, %57 ]
  br label %69

; <label>:69:                                     ; preds = %.preheader7, %69
  %.71842 = phi i32 [ %95, %69 ], [ %.71842.ph, %.preheader7 ]
  call void @unroll_loop(i32 163)
  %70 = mul nuw nsw i32 2, %.71842
  %71 = add nsw i32 %3, %70
  %72 = and i32 %71, 31
  %73 = shl i32 1, %72
  %74 = mul nuw nsw i32 2, %.71842
  %75 = add nsw i32 %3, %74
  %76 = ashr i32 %75, 5
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %2, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = or i32 %79, %73
  store i32 %80, i32* %78, align 4
  %81 = mul nuw nsw i32 2, %.71842
  %82 = add nsw i32 %3, %81
  %83 = add nsw i32 %82, 1
  %84 = and i32 %83, 31
  %85 = shl i32 1, %84
  %86 = xor i32 %85, -1
  %87 = mul nuw nsw i32 2, %.71842
  %88 = add nsw i32 %3, %87
  %89 = add nsw i32 %88, 1
  %90 = ashr i32 %89, 5
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, i32* %2, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = and i32 %93, %86
  store i32 %94, i32* %92, align 4
  %95 = add nuw nsw i32 %.71842, 1
  %exitcond43 = icmp ne i32 %95, 32
  br i1 %exitcond43, label %69, label %.preheader6

.preheader6:                                      ; preds = %69
  %.010.ph = phi i32 [ 1, %69 ]
  %96 = zext i32 %3 to i64
  br label %97

; <label>:97:                                     ; preds = %.preheader6, %241
  %.010 = phi i32 [ %242, %241 ], [ %.010.ph, %.preheader6 ]
  call void @unroll_loop(i32 164)
  %98 = icmp sge i32 %4, 4
  br i1 %98, label %99, label %103

; <label>:99:                                     ; preds = %97
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %101 = getelementptr [23 x i8], [23 x i8]* @.str.3.170, i32 0, i32 0
  %102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* %101, i32 %.010)
  br label %103

; <label>:103:                                    ; preds = %99, %97
  %104 = icmp slt i32 0, %3
  br i1 %104, label %.lr.ph29.preheader, label %._crit_edge30

.lr.ph29.preheader:                               ; preds = %103
  br label %.lr.ph29

.lr.ph29:                                         ; preds = %.lr.ph29.preheader, %.lr.ph29
  %indvars.iv31 = phi i64 [ %indvars.iv.next32, %.lr.ph29 ], [ 0, %.lr.ph29.preheader ]
  %.0627 = phi i32 [ %spec.select, %.lr.ph29 ], [ 0, %.lr.ph29.preheader ]
  call void @unroll_loop(i32 165)
  %105 = trunc i64 %indvars.iv31 to i32
  %106 = ashr i32 %105, 5
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, i32* %2, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = trunc i64 %indvars.iv31 to i32
  %111 = and i32 %110, 31
  %112 = shl i32 1, %111
  %113 = and i32 %109, %112
  %114 = icmp ne i32 %113, 0
  %115 = trunc i64 %indvars.iv31 to i32
  %spec.select = select i1 %114, i32 %115, i32 %.0627
  %116 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv31
  %117 = load i32, i32* %116, align 4
  %118 = sub i32 %117, %.010
  %119 = icmp slt i32 %118, 0
  %120 = add nsw i32 %118, %3
  %.04 = select i1 %119, i32 %120, i32 %118
  %121 = sext i32 %.04 to i64
  %122 = getelementptr inbounds i32, i32* %1, i64 %121
  store i32 %spec.select, i32* %122, align 4
  %indvars.iv.next32 = add nuw nsw i64 %indvars.iv31, 1
  %exitcond = icmp ne i64 %indvars.iv.next32, %96
  br i1 %exitcond, label %.lr.ph29, label %._crit_edge30.loopexit

._crit_edge30.loopexit:                           ; preds = %.lr.ph29
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %103
  br label %123

; <label>:123:                                    ; preds = %._crit_edge30, %._crit_edge39
  %.03 = phi i32 [ -1, %._crit_edge30 ], [ %206, %._crit_edge39 ]
  %.0 = phi i32 [ 0, %._crit_edge30 ], [ %.1, %._crit_edge39 ]
  call void @unroll_loop(i32 166)
  %124 = add nsw i32 %.03, 1
  br label %125

; <label>:125:                                    ; preds = %125, %123
  %.15 = phi i32 [ %124, %123 ], [ %136, %125 ]
  call void @unroll_loop(i32 167)
  %126 = ashr i32 %.15, 5
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %2, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = and i32 %.15, 31
  %131 = shl i32 1, %130
  %132 = and i32 %129, %131
  %133 = icmp ne i32 %132, 0
  %134 = icmp ne i32 %130, 0
  %135 = select i1 %133, i1 %134, i1 false
  %136 = add nsw i32 %.15, 1
  br i1 %135, label %125, label %137

; <label>:137:                                    ; preds = %125
  %.15.lcssa = phi i32 [ %.15, %125 ]
  %138 = ashr i32 %.15.lcssa, 5
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i32, i32* %2, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = and i32 %.15.lcssa, 31
  %143 = shl i32 1, %142
  %144 = and i32 %141, %143
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %.preheader5, label %163

.preheader5:                                      ; preds = %137
  br label %146

; <label>:146:                                    ; preds = %.preheader5, %146
  %.2 = phi i32 [ %152, %146 ], [ %.15.lcssa, %.preheader5 ]
  call void @unroll_loop(i32 168)
  %147 = ashr i32 %.2, 5
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i32, i32* %2, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, -1
  %152 = add nsw i32 %.2, 32
  br i1 %151, label %146, label %.preheader3

.preheader3:                                      ; preds = %146
  %.3.ph = phi i32 [ %.2, %146 ]
  br label %153

; <label>:153:                                    ; preds = %.preheader3, %153
  %.3 = phi i32 [ %162, %153 ], [ %.3.ph, %.preheader3 ]
  call void @unroll_loop(i32 169)
  %154 = ashr i32 %.3, 5
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i32, i32* %2, i64 %155
  %157 = load i32, i32* %156, align 4
  %158 = and i32 %.3, 31
  %159 = shl i32 1, %158
  %160 = and i32 %157, %159
  %161 = icmp ne i32 %160, 0
  %162 = add nsw i32 %.3, 1
  br i1 %161, label %153, label %.loopexit4

.loopexit4:                                       ; preds = %153
  %.4.ph = phi i32 [ %.3, %153 ]
  br label %163

; <label>:163:                                    ; preds = %.loopexit4, %137
  %.4 = phi i32 [ %.15.lcssa, %137 ], [ %.4.ph, %.loopexit4 ]
  %164 = sub nsw i32 %.4, 1
  %165 = icmp sge i32 %164, %3
  br i1 %165, label %235, label %.preheader2

.preheader2:                                      ; preds = %163
  br label %166

; <label>:166:                                    ; preds = %.preheader2, %166
  %.5 = phi i32 [ %177, %166 ], [ %.4, %.preheader2 ]
  call void @unroll_loop(i32 170)
  %167 = ashr i32 %.5, 5
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i32, i32* %2, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = and i32 %.5, 31
  %172 = shl i32 1, %171
  %173 = and i32 %170, %172
  %174 = icmp ne i32 %173, 0
  %175 = icmp ne i32 %171, 0
  %176 = select i1 %174, i1 false, i1 %175
  %177 = add nsw i32 %.5, 1
  br i1 %176, label %166, label %178

; <label>:178:                                    ; preds = %166
  %.5.lcssa = phi i32 [ %.5, %166 ]
  %179 = ashr i32 %.5.lcssa, 5
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i32, i32* %2, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = and i32 %.5.lcssa, 31
  %184 = shl i32 1, %183
  %185 = and i32 %182, %184
  %186 = icmp ne i32 %185, 0
  br i1 %186, label %205, label %.preheader1

.preheader1:                                      ; preds = %178
  br label %187

; <label>:187:                                    ; preds = %.preheader1, %187
  %.6 = phi i32 [ %193, %187 ], [ %.5.lcssa, %.preheader1 ]
  call void @unroll_loop(i32 171)
  %188 = ashr i32 %.6, 5
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32, i32* %2, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 0
  %193 = add nsw i32 %.6, 32
  br i1 %192, label %187, label %.preheader

.preheader:                                       ; preds = %187
  %.7.ph = phi i32 [ %.6, %187 ]
  br label %194

; <label>:194:                                    ; preds = %.preheader, %194
  %.7 = phi i32 [ %204, %194 ], [ %.7.ph, %.preheader ]
  call void @unroll_loop(i32 172)
  %195 = ashr i32 %.7, 5
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i32, i32* %2, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = and i32 %.7, 31
  %200 = shl i32 1, %199
  %201 = and i32 %198, %200
  %202 = icmp ne i32 %201, 0
  %203 = xor i1 %202, true
  %204 = add nsw i32 %.7, 1
  br i1 %203, label %194, label %.loopexit

.loopexit:                                        ; preds = %194
  %.8.ph = phi i32 [ %.7, %194 ]
  br label %205

; <label>:205:                                    ; preds = %.loopexit, %178
  %.8 = phi i32 [ %.5.lcssa, %178 ], [ %.8.ph, %.loopexit ]
  %206 = sub nsw i32 %.8, 1
  %207 = icmp sge i32 %206, %3
  br i1 %207, label %235, label %208

; <label>:208:                                    ; preds = %205
  %209 = icmp sgt i32 %206, %164
  br i1 %209, label %.lr.ph38, label %._crit_edge39

.lr.ph38:                                         ; preds = %208
  %210 = sub nsw i32 %206, %164
  %211 = add nsw i32 %210, 1
  %212 = add nsw i32 %.0, %211
  call void @fallbackQSort3(i32* %0, i32* %1, i32 %164, i32 %206)
  %213 = add i32 %.4, -1
  %214 = sext i32 %213 to i64
  %215 = sext i32 %206 to i64
  br label %216

; <label>:216:                                    ; preds = %.lr.ph38, %233
  %indvars.iv40 = phi i64 [ %214, %.lr.ph38 ], [ %indvars.iv.next41, %233 ]
  %.0136 = phi i32 [ -1, %.lr.ph38 ], [ %.12, %233 ]
  call void @unroll_loop(i32 173)
  %217 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv40
  %218 = load i32, i32* %217, align 4
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds i32, i32* %1, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = icmp ne i32 %.0136, %221
  br i1 %222, label %223, label %233

; <label>:223:                                    ; preds = %216
  %224 = trunc i64 %indvars.iv40 to i32
  %225 = and i32 %224, 31
  %226 = shl i32 1, %225
  %227 = trunc i64 %indvars.iv40 to i32
  %228 = ashr i32 %227, 5
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i32, i32* %2, i64 %229
  %231 = load i32, i32* %230, align 4
  %232 = or i32 %231, %226
  store i32 %232, i32* %230, align 4
  br label %233

; <label>:233:                                    ; preds = %216, %223
  %.12 = phi i32 [ %221, %223 ], [ %.0136, %216 ]
  %indvars.iv.next41 = add nsw i64 %indvars.iv40, 1
  %234 = icmp sle i64 %indvars.iv.next41, %215
  br i1 %234, label %216, label %._crit_edge39.loopexit

._crit_edge39.loopexit:                           ; preds = %233
  %.1.ph = phi i32 [ %212, %233 ]
  br label %._crit_edge39

._crit_edge39:                                    ; preds = %._crit_edge39.loopexit, %208
  %.1 = phi i32 [ %.0, %208 ], [ %.1.ph, %._crit_edge39.loopexit ]
  br label %123

; <label>:235:                                    ; preds = %205, %163
  %.021 = phi i32 [ %.0, %163 ], [ %.0, %205 ]
  %236 = icmp sge i32 %4, 4
  br i1 %236, label %237, label %241

; <label>:237:                                    ; preds = %235
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %239 = getelementptr [24 x i8], [24 x i8]* @.str.4.171, i32 0, i32 0
  %240 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %238, i8* %239, i32 %.021)
  br label %241

; <label>:241:                                    ; preds = %237, %235
  %242 = mul nuw nsw i32 %.010, 2
  %243 = icmp sgt i32 %242, %3
  %244 = icmp eq i32 %.021, 0
  %or.cond = or i1 %243, %244
  br i1 %or.cond, label %245, label %97

; <label>:245:                                    ; preds = %241
  %246 = icmp sge i32 %4, 4
  br i1 %246, label %247, label %251

; <label>:247:                                    ; preds = %245
  %248 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %249 = getelementptr [34 x i8], [34 x i8]* @.str.5.172, i32 0, i32 0
  %250 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %248, i8* %249)
  br label %251

; <label>:251:                                    ; preds = %247, %245
  %252 = icmp slt i32 0, %3
  br i1 %252, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %251
  %253 = zext i32 %3 to i64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %259
  %indvars.iv24 = phi i64 [ %indvars.iv.next25, %259 ], [ 0, %.lr.ph.preheader ]
  %.2823 = phi i32 [ %260, %259 ], [ 0, %.lr.ph.preheader ]
  call void @unroll_loop(i32 174)
  %254 = sext i32 %.2823 to i64
  br label %255

; <label>:255:                                    ; preds = %255, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %255 ], [ %254, %.lr.ph ]
  call void @unroll_loop(i32 175)
  %256 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 %indvars.iv
  %257 = load i32, i32* %256, align 4
  %258 = icmp eq i32 %257, 0
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %258, label %255, label %259

; <label>:259:                                    ; preds = %255
  %.39.lcssa.wide = phi i64 [ %indvars.iv, %255 ]
  %260 = trunc i64 %.39.lcssa.wide to i32
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 0, i64 %261
  %263 = load i32, i32* %262, align 4
  %264 = add nsw i32 %263, -1
  store i32 %264, i32* %262, align 4
  %265 = trunc i32 %260 to i8
  %266 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv24
  %267 = load i32, i32* %266, align 4
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %8, i64 %268
  store i8 %265, i8* %269, align 1
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 1
  %exitcond9 = icmp ne i64 %indvars.iv.next25, %253
  br i1 %exitcond9, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %259
  %.28.lcssa.ph = phi i32 [ %260, %259 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %251
  %.28.lcssa = phi i32 [ 0, %251 ], [ %.28.lcssa.ph, %._crit_edge.loopexit ]
  %270 = icmp slt i32 %.28.lcssa, 256
  br i1 %270, label %272, label %271

; <label>:271:                                    ; preds = %._crit_edge
  call void @BZ2_bz__AssertH__fail(i32 1005)
  br label %272

; <label>:272:                                    ; preds = %271, %._crit_edge
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @mainSort(i32*, i8*, i16*, i32*, i32, i32, i32*) #0 {
  %8 = alloca [256 x i32], align 16
  %9 = alloca [256 x i8], align 16
  %10 = alloca [256 x i32], align 16, !track !67
  %11 = alloca [256 x i32], align 16, !track !68
  %12 = icmp sge i32 %5, 4
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %7
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %15 = getelementptr [34 x i8], [34 x i8]* @.str.6.166, i32 0, i32 0
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* %15)
  br label %17

; <label>:17:                                     ; preds = %13, %7
  br label %18

; <label>:18:                                     ; preds = %17, %18
  %indvars.iv101 = phi i64 [ 65536, %17 ], [ %indvars.iv.next102, %18 ]
  call void @unroll_loop(i32 177)
  %19 = getelementptr inbounds i32, i32* %3, i64 %indvars.iv101
  store i32 0, i32* %19, align 4
  %indvars.iv.next102 = add nsw i64 %indvars.iv101, -1
  %20 = icmp sge i64 %indvars.iv.next102, 0
  br i1 %20, label %18, label %21

; <label>:21:                                     ; preds = %18
  %22 = getelementptr inbounds i8, i8* %1, i64 0
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl i32 %24, 8
  %26 = sub nsw i32 %4, 1
  %27 = icmp sge i32 %26, 3
  br i1 %27, label %.lr.ph97, label %91

.lr.ph97:                                         ; preds = %21
  %28 = add i32 %4, -4
  %29 = lshr i32 %28, 2
  %30 = add i32 %4, -1
  %31 = sext i32 %30 to i64
  br label %32

; <label>:32:                                     ; preds = %.lr.ph97, %32
  %indvars.iv6 = phi i64 [ %31, %.lr.ph97 ], [ %indvars.iv.next7, %32 ]
  %.0895 = phi i32 [ %25, %.lr.ph97 ], [ %82, %32 ]
  call void @unroll_loop(i32 178)
  %33 = getelementptr inbounds i16, i16* %2, i64 %indvars.iv6
  store i16 0, i16* %33, align 2
  %34 = ashr i32 %.0895, 8
  %35 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv6
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = zext i16 %37 to i32
  %39 = shl i32 %38, 8
  %40 = or i32 %34, %39
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %3, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %42, align 4
  %45 = sub nsw i64 %indvars.iv6, 1
  %46 = getelementptr inbounds i16, i16* %2, i64 %45
  store i16 0, i16* %46, align 2
  %47 = ashr i32 %40, 8
  %48 = sub nsw i64 %indvars.iv6, 1
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i16
  %52 = zext i16 %51 to i32
  %53 = shl i32 %52, 8
  %54 = or i32 %47, %53
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %3, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = add i32 %57, 1
  store i32 %58, i32* %56, align 4
  %59 = sub nsw i64 %indvars.iv6, 2
  %60 = getelementptr inbounds i16, i16* %2, i64 %59
  store i16 0, i16* %60, align 2
  %61 = ashr i32 %54, 8
  %62 = sub nsw i64 %indvars.iv6, 2
  %63 = getelementptr inbounds i8, i8* %1, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i16
  %66 = zext i16 %65 to i32
  %67 = shl i32 %66, 8
  %68 = or i32 %61, %67
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %3, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %70, align 4
  %73 = sub nsw i64 %indvars.iv6, 3
  %74 = getelementptr inbounds i16, i16* %2, i64 %73
  store i16 0, i16* %74, align 2
  %75 = ashr i32 %68, 8
  %76 = sub nsw i64 %indvars.iv6, 3
  %77 = getelementptr inbounds i8, i8* %1, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i16
  %80 = zext i16 %79 to i32
  %81 = shl i32 %80, 8
  %82 = or i32 %75, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %3, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %84, align 4
  %indvars.iv.next7 = add nsw i64 %indvars.iv6, -4
  %87 = icmp sge i64 %indvars.iv.next7, 3
  br i1 %87, label %32, label %._crit_edge98

._crit_edge98:                                    ; preds = %32
  %split99 = phi i32 [ %82, %32 ]
  %88 = shl i32 %29, 2
  %89 = add i32 %4, -5
  %90 = sub i32 %89, %88
  br label %91

; <label>:91:                                     ; preds = %._crit_edge98, %21
  %.114.lcssa = phi i32 [ %90, %._crit_edge98 ], [ %26, %21 ]
  %.08.lcssa = phi i32 [ %split99, %._crit_edge98 ], [ %25, %21 ]
  %92 = icmp sge i32 %.114.lcssa, 0
  br i1 %92, label %.lr.ph90, label %._crit_edge91

.lr.ph90:                                         ; preds = %91
  %93 = sext i32 %.114.lcssa to i64
  br label %94

; <label>:94:                                     ; preds = %.lr.ph90, %94
  %indvars.iv92 = phi i64 [ %93, %.lr.ph90 ], [ %indvars.iv.next93, %94 ]
  %.1988 = phi i32 [ %.08.lcssa, %.lr.ph90 ], [ %102, %94 ]
  call void @unroll_loop(i32 179)
  %95 = getelementptr inbounds i16, i16* %2, i64 %indvars.iv92
  store i16 0, i16* %95, align 2
  %96 = ashr i32 %.1988, 8
  %97 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv92
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i16
  %100 = zext i16 %99 to i32
  %101 = shl i32 %100, 8
  %102 = or i32 %96, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %3, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %104, align 4
  %indvars.iv.next93 = add nsw i64 %indvars.iv92, -1
  %107 = icmp sge i64 %indvars.iv.next93, 0
  br i1 %107, label %94, label %._crit_edge91.loopexit

._crit_edge91.loopexit:                           ; preds = %94
  br label %._crit_edge91

._crit_edge91:                                    ; preds = %._crit_edge91.loopexit, %91
  %108 = sext i32 %4 to i64
  %109 = sext i32 %4 to i64
  br label %110

; <label>:110:                                    ; preds = %._crit_edge91, %110
  %indvars.iv84 = phi i64 [ 0, %._crit_edge91 ], [ %indvars.iv.next85, %110 ]
  call void @unroll_loop(i32 180)
  %111 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv84
  %112 = load i8, i8* %111, align 1
  %113 = add nsw i64 %109, %indvars.iv84
  %114 = getelementptr inbounds i8, i8* %1, i64 %113
  store i8 %112, i8* %114, align 1
  %115 = add nsw i64 %108, %indvars.iv84
  %116 = getelementptr inbounds i16, i16* %2, i64 %115
  store i16 0, i16* %116, align 2
  %indvars.iv.next85 = add nuw nsw i64 %indvars.iv84, 1
  %exitcond86 = icmp ne i64 %indvars.iv.next85, 34
  br i1 %exitcond86, label %110, label %117

; <label>:117:                                    ; preds = %110
  %118 = icmp sge i32 %5, 4
  br i1 %118, label %119, label %123

; <label>:119:                                    ; preds = %117
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %121 = getelementptr [28 x i8], [28 x i8]* @.str.2.167, i32 0, i32 0
  %122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* %121)
  br label %123

; <label>:123:                                    ; preds = %119, %117
  br label %124

; <label>:124:                                    ; preds = %123, %124
  %indvars.iv80 = phi i64 [ 1, %123 ], [ %indvars.iv.next81, %124 ]
  call void @unroll_loop(i32 181)
  %125 = sub nuw nsw i64 %indvars.iv80, 1
  %126 = getelementptr inbounds i32, i32* %3, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds i32, i32* %3, i64 %indvars.iv80
  %129 = load i32, i32* %128, align 4
  %130 = add i32 %129, %127
  store i32 %130, i32* %128, align 4
  %indvars.iv.next81 = add nuw nsw i64 %indvars.iv80, 1
  %exitcond82 = icmp ne i64 %indvars.iv.next81, 65537
  br i1 %exitcond82, label %124, label %131

; <label>:131:                                    ; preds = %124
  %132 = getelementptr inbounds i8, i8* %1, i64 0
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = shl i32 %134, 8
  %136 = trunc i32 %135 to i16
  %137 = sub nsw i32 %4, 1
  %138 = icmp sge i32 %137, 3
  br i1 %138, label %.lr.ph76, label %222

.lr.ph76:                                         ; preds = %131
  %139 = add i32 %4, -4
  %140 = lshr i32 %139, 2
  %141 = add i32 %4, -1
  %142 = sext i32 %141 to i64
  br label %143

; <label>:143:                                    ; preds = %.lr.ph76, %143
  %indvars.iv4 = phi i64 [ %142, %.lr.ph76 ], [ %indvars.iv.next5, %143 ]
  %.0274 = phi i16 [ %136, %.lr.ph76 ], [ %207, %143 ]
  call void @unroll_loop(i32 182)
  %144 = zext i16 %.0274 to i32
  %145 = ashr i32 %144, 8
  %146 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv4
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = shl i32 %148, 8
  %150 = or i32 %145, %149
  %151 = trunc i32 %150 to i16
  %152 = zext i16 %151 to i64
  %153 = getelementptr inbounds i32, i32* %3, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = sub i32 %154, 1
  %156 = zext i16 %151 to i64
  %157 = getelementptr inbounds i32, i32* %3, i64 %156
  store i32 %155, i32* %157, align 4
  %158 = sext i32 %155 to i64
  %159 = getelementptr inbounds i32, i32* %0, i64 %158
  %160 = trunc i64 %indvars.iv4 to i32
  store i32 %160, i32* %159, align 4
  %161 = zext i16 %151 to i32
  %162 = ashr i32 %161, 8
  %163 = sub nsw i64 %indvars.iv4, 1
  %164 = getelementptr inbounds i8, i8* %1, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = shl i32 %166, 8
  %168 = or i32 %162, %167
  %169 = trunc i32 %168 to i16
  %170 = zext i16 %169 to i64
  %171 = getelementptr inbounds i32, i32* %3, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = sub i32 %172, 1
  %174 = zext i16 %169 to i64
  %175 = getelementptr inbounds i32, i32* %3, i64 %174
  store i32 %173, i32* %175, align 4
  %176 = sub nsw i64 %indvars.iv4, 1
  %177 = sext i32 %173 to i64
  %178 = getelementptr inbounds i32, i32* %0, i64 %177
  %179 = trunc i64 %176 to i32
  store i32 %179, i32* %178, align 4
  %180 = zext i16 %169 to i32
  %181 = ashr i32 %180, 8
  %182 = sub nsw i64 %indvars.iv4, 2
  %183 = getelementptr inbounds i8, i8* %1, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = shl i32 %185, 8
  %187 = or i32 %181, %186
  %188 = trunc i32 %187 to i16
  %189 = zext i16 %188 to i64
  %190 = getelementptr inbounds i32, i32* %3, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = sub i32 %191, 1
  %193 = zext i16 %188 to i64
  %194 = getelementptr inbounds i32, i32* %3, i64 %193
  store i32 %192, i32* %194, align 4
  %195 = sub nsw i64 %indvars.iv4, 2
  %196 = sext i32 %192 to i64
  %197 = getelementptr inbounds i32, i32* %0, i64 %196
  %198 = trunc i64 %195 to i32
  store i32 %198, i32* %197, align 4
  %199 = zext i16 %188 to i32
  %200 = ashr i32 %199, 8
  %201 = sub nsw i64 %indvars.iv4, 3
  %202 = getelementptr inbounds i8, i8* %1, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = shl i32 %204, 8
  %206 = or i32 %200, %205
  %207 = trunc i32 %206 to i16
  %208 = zext i16 %207 to i64
  %209 = getelementptr inbounds i32, i32* %3, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = sub i32 %210, 1
  %212 = zext i16 %207 to i64
  %213 = getelementptr inbounds i32, i32* %3, i64 %212
  store i32 %211, i32* %213, align 4
  %214 = sub nsw i64 %indvars.iv4, 3
  %215 = sext i32 %211 to i64
  %216 = getelementptr inbounds i32, i32* %0, i64 %215
  %217 = trunc i64 %214 to i32
  store i32 %217, i32* %216, align 4
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, -4
  %218 = icmp sge i64 %indvars.iv.next5, 3
  br i1 %218, label %143, label %._crit_edge77

._crit_edge77:                                    ; preds = %143
  %split78 = phi i16 [ %207, %143 ]
  %219 = shl i32 %140, 2
  %220 = add i32 %4, -5
  %221 = sub i32 %220, %219
  br label %222

; <label>:222:                                    ; preds = %._crit_edge77, %131
  %.518.lcssa = phi i32 [ %221, %._crit_edge77 ], [ %137, %131 ]
  %.02.lcssa = phi i16 [ %split78, %._crit_edge77 ], [ %136, %131 ]
  %223 = icmp sge i32 %.518.lcssa, 0
  br i1 %223, label %.lr.ph69, label %._crit_edge70

.lr.ph69:                                         ; preds = %222
  %224 = sext i32 %.518.lcssa to i64
  br label %225

; <label>:225:                                    ; preds = %.lr.ph69, %225
  %indvars.iv71 = phi i64 [ %224, %.lr.ph69 ], [ %indvars.iv.next72, %225 ]
  %.1367 = phi i16 [ %.02.lcssa, %.lr.ph69 ], [ %233, %225 ]
  call void @unroll_loop(i32 183)
  %226 = zext i16 %.1367 to i32
  %227 = ashr i32 %226, 8
  %228 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv71
  %229 = load i8, i8* %228, align 1
  %230 = zext i8 %229 to i32
  %231 = shl i32 %230, 8
  %232 = or i32 %227, %231
  %233 = trunc i32 %232 to i16
  %234 = zext i16 %233 to i64
  %235 = getelementptr inbounds i32, i32* %3, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = sub i32 %236, 1
  %238 = zext i16 %233 to i64
  %239 = getelementptr inbounds i32, i32* %3, i64 %238
  store i32 %237, i32* %239, align 4
  %240 = sext i32 %237 to i64
  %241 = getelementptr inbounds i32, i32* %0, i64 %240
  %242 = trunc i64 %indvars.iv71 to i32
  store i32 %242, i32* %241, align 4
  %indvars.iv.next72 = add nsw i64 %indvars.iv71, -1
  %243 = icmp sge i64 %indvars.iv.next72, 0
  br i1 %243, label %225, label %._crit_edge70.loopexit

._crit_edge70.loopexit:                           ; preds = %225
  br label %._crit_edge70

._crit_edge70:                                    ; preds = %._crit_edge70.loopexit, %222
  br label %244

; <label>:244:                                    ; preds = %._crit_edge70, %244
  %indvars.iv63 = phi i64 [ 0, %._crit_edge70 ], [ %indvars.iv.next64, %244 ]
  %245 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %indvars.iv63
  store i8 0, i8* %245, align 1
  %246 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %indvars.iv63
  %247 = trunc i64 %indvars.iv63 to i32
  store i32 %247, i32* %246, align 4
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1
  %exitcond65 = icmp ne i64 %indvars.iv.next64, 256
  br i1 %exitcond65, label %244, label %.preheader3

.preheader3:                                      ; preds = %244
  %.01.ph = phi i32 [ 1, %244 ]
  br label %248

; <label>:248:                                    ; preds = %.preheader3, %248
  %.01 = phi i32 [ %250, %248 ], [ %.01.ph, %.preheader3 ]
  %249 = mul nsw i32 3, %.01
  %250 = add nsw i32 %249, 1
  %251 = icmp sle i32 %250, 256
  br i1 %251, label %248, label %.preheader2

.preheader2:                                      ; preds = %248
  %.1.ph = phi i32 [ 364, %248 ]
  br label %252

; <label>:252:                                    ; preds = %.preheader2, %._crit_edge58
  %.1 = phi i32 [ %253, %._crit_edge58 ], [ %.1.ph, %.preheader2 ]
  %253 = sdiv i32 %.1, 3
  %254 = icmp sle i32 %253, 255
  br i1 %254, label %.lr.ph57, label %._crit_edge58

.lr.ph57:                                         ; preds = %252
  %255 = sext i32 %253 to i64
  br label %256

; <label>:256:                                    ; preds = %.lr.ph57, %300
  %indvars.iv59 = phi i64 [ %255, %.lr.ph57 ], [ %indvars.iv.next60, %300 ]
  %257 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %indvars.iv59
  %258 = load i32, i32* %257, align 4
  %259 = trunc i64 %indvars.iv59 to i32
  br label %260

; <label>:260:                                    ; preds = %290, %256
  %.210 = phi i32 [ %259, %256 ], [ %297, %290 ]
  call void @unroll_loop(i32 184)
  %261 = sub nsw i32 %.210, %253
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = add nsw i32 %264, 1
  %266 = shl i32 %265, 8
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds i32, i32* %3, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = sub nsw i32 %.210, %253
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = shl i32 %273, 8
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i32, i32* %3, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = sub i32 %269, %277
  %279 = add nsw i32 %258, 1
  %280 = shl i32 %279, 8
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i32, i32* %3, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = shl i32 %258, 8
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i32, i32* %3, i64 %285
  %287 = load i32, i32* %286, align 4
  %288 = sub i32 %283, %287
  %289 = icmp ugt i32 %278, %288
  br i1 %289, label %290, label %300

; <label>:290:                                    ; preds = %260
  %291 = sub nsw i32 %.210, %253
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = sext i32 %.210 to i64
  %296 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %295
  store i32 %294, i32* %296, align 4
  %297 = sub nsw i32 %.210, %253
  %298 = sub nsw i32 %253, 1
  %299 = icmp sle i32 %297, %298
  br i1 %299, label %300, label %260

; <label>:300:                                    ; preds = %260, %290
  %.311 = phi i32 [ %297, %290 ], [ %.210, %260 ]
  %301 = sext i32 %.311 to i64
  %302 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %301
  store i32 %258, i32* %302, align 4
  %indvars.iv.next60 = add nsw i64 %indvars.iv59, 1
  %exitcond61 = icmp ne i64 %indvars.iv.next60, 256
  br i1 %exitcond61, label %256, label %._crit_edge58.loopexit

._crit_edge58.loopexit:                           ; preds = %300
  br label %._crit_edge58

._crit_edge58:                                    ; preds = %._crit_edge58.loopexit, %252
  %303 = icmp ne i32 %253, 1
  br i1 %303, label %252, label %.preheader

.preheader:                                       ; preds = %._crit_edge58
  %indvars.iv53.ph = phi i64 [ 0, %._crit_edge58 ]
  %.0452.ph = phi i32 [ 0, %._crit_edge58 ]
  br label %304

; <label>:304:                                    ; preds = %.preheader, %520
  %indvars.iv53 = phi i64 [ %indvars.iv.next54, %520 ], [ %indvars.iv53.ph, %.preheader ]
  %.0452 = phi i32 [ %.15.lcssa, %520 ], [ %.0452.ph, %.preheader ]
  call void @unroll_loop(i32 185)
  %305 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 0, i64 %indvars.iv53
  %306 = load i32, i32* %305, align 4
  %307 = zext i32 %306 to i64
  br label %308

; <label>:308:                                    ; preds = %304, %347
  %indvars.iv = phi i64 [ 0, %304 ], [ %indvars.iv.next, %347 ]
  %.1528 = phi i32 [ %.0452, %304 ], [ %.4, %347 ]
  call void @unroll_loop(i32 186)
  %309 = icmp ne i64 %indvars.iv, %307
  br i1 %309, label %310, label %347

; <label>:310:                                    ; preds = %308
  %311 = shl i32 %306, 8
  %312 = sext i32 %311 to i64
  %313 = add nuw nsw i64 %312, %indvars.iv
  %314 = getelementptr inbounds i32, i32* %3, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = and i32 %315, 2097152
  %317 = icmp ne i32 %316, 0
  br i1 %317, label %343, label %318

; <label>:318:                                    ; preds = %310
  %319 = getelementptr inbounds i32, i32* %3, i64 %313
  %320 = load i32, i32* %319, align 4
  %321 = and i32 %320, -2097153
  %322 = add nsw i64 %313, 1
  %323 = getelementptr inbounds i32, i32* %3, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = and i32 %324, -2097153
  %326 = sub i32 %325, 1
  %327 = icmp sgt i32 %326, %321
  br i1 %327, label %328, label %343

; <label>:328:                                    ; preds = %318
  %329 = icmp sge i32 %5, 4
  br i1 %329, label %330, label %337

; <label>:330:                                    ; preds = %328
  %331 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %332 = sub nsw i32 %326, %321
  %333 = add nsw i32 %332, 1
  %334 = trunc i64 %indvars.iv to i32
  %335 = getelementptr [48 x i8], [48 x i8]* @.str.7.168, i32 0, i32 0
  %336 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %331, i8* %335, i32 %306, i32 %334, i32 %.1528, i32 %333)
  br label %337

; <label>:337:                                    ; preds = %330, %328
  call void @mainQSort3(i32* %0, i8* %1, i16* %2, i32 %4, i32 %321, i32 %326, i32 2, i32* %6)
  %338 = sub nsw i32 %326, %321
  %339 = add nsw i32 %338, 1
  %340 = add nsw i32 %.1528, %339
  %341 = load i32, i32* %6, align 4
  %342 = icmp slt i32 %341, 0
  br i1 %342, label %.loopexit, label %343

; <label>:343:                                    ; preds = %318, %337, %310
  %.3 = phi i32 [ %.1528, %310 ], [ %.1528, %318 ], [ %340, %337 ]
  %344 = getelementptr inbounds i32, i32* %3, i64 %313
  %345 = load i32, i32* %344, align 4
  %346 = or i32 %345, 2097152
  store i32 %346, i32* %344, align 4
  br label %347

; <label>:347:                                    ; preds = %308, %343
  %.4 = phi i32 [ %.3, %343 ], [ %.1528, %308 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %348 = icmp ule i64 %indvars.iv.next, 255
  br i1 %348, label %308, label %349

; <label>:349:                                    ; preds = %347
  %.15.lcssa = phi i32 [ %.4, %347 ]
  %350 = sext i32 %306 to i64
  %351 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %350
  %352 = load i8, i8* %351, align 1
  %353 = icmp ne i8 %352, 0
  br i1 %353, label %354, label %355

; <label>:354:                                    ; preds = %349
  call void @BZ2_bz__AssertH__fail(i32 1006)
  br label %355

; <label>:355:                                    ; preds = %354, %349
  %356 = sext i32 %306 to i64
  %357 = sext i32 %306 to i64
  br label %358

; <label>:358:                                    ; preds = %355, %358
  %indvars.iv30 = phi i64 [ 0, %355 ], [ %indvars.iv.next31, %358 ]
  call void @unroll_loop(i32 187)
  %359 = shl i64 %indvars.iv30, 8
  %360 = add nsw i64 %359, %357
  %361 = getelementptr inbounds i32, i32* %3, i64 %360
  %362 = load i32, i32* %361, align 4
  %363 = and i32 %362, -2097153
  %364 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %indvars.iv30
  store i32 %363, i32* %364, align 4
  %365 = shl i64 %indvars.iv30, 8
  %366 = add nsw i64 %365, %356
  %367 = add nsw i64 %366, 1
  %368 = getelementptr inbounds i32, i32* %3, i64 %367
  %369 = load i32, i32* %368, align 4
  %370 = and i32 %369, -2097153
  %371 = sub i32 %370, 1
  %372 = getelementptr inbounds [256 x i32], [256 x i32]* %11, i64 0, i64 %indvars.iv30
  store i32 %371, i32* %372, align 4
  %indvars.iv.next31 = add nuw nsw i64 %indvars.iv30, 1
  %exitcond = icmp ne i64 %indvars.iv.next31, 256
  br i1 %exitcond, label %358, label %373

; <label>:373:                                    ; preds = %358
  %374 = shl i32 %306, 8
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i32, i32* %3, i64 %375
  %377 = load i32, i32* %376, align 4
  %378 = and i32 %377, -2097153
  %379 = sext i32 %306 to i64
  %380 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %379
  %381 = load i32, i32* %380, align 4
  %382 = icmp slt i32 %378, %381
  br i1 %382, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %373
  %383 = sext i32 %378 to i64
  br label %384

; <label>:384:                                    ; preds = %.lr.ph, %404
  %indvars.iv33 = phi i64 [ %383, %.lr.ph ], [ %indvars.iv.next34, %404 ]
  call void @unroll_loop(i32 188)
  %385 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv33
  %386 = load i32, i32* %385, align 4
  %387 = sub i32 %386, 1
  %388 = icmp slt i32 %387, 0
  %389 = add nsw i32 %387, %4
  %spec.select = select i1 %388, i32 %389, i32 %387
  %390 = sext i32 %spec.select to i64
  %391 = getelementptr inbounds i8, i8* %1, i64 %390
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i64
  %394 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %393
  %395 = load i8, i8* %394, align 1
  %396 = icmp ne i8 %395, 0
  br i1 %396, label %404, label %397

; <label>:397:                                    ; preds = %384
  %398 = zext i8 %392 to i64
  %399 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %398
  %400 = load i32, i32* %399, align 4
  %401 = add nsw i32 %400, 1
  store i32 %401, i32* %399, align 4
  %402 = sext i32 %400 to i64
  %403 = getelementptr inbounds i32, i32* %0, i64 %402
  store i32 %spec.select, i32* %403, align 4
  br label %404

; <label>:404:                                    ; preds = %384, %397
  %indvars.iv.next34 = add nsw i64 %indvars.iv33, 1
  %405 = load i32, i32* %380, align 4
  %406 = sext i32 %405 to i64
  %407 = icmp slt i64 %indvars.iv.next34, %406
  br i1 %407, label %384, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %404
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %373
  %408 = add nsw i32 %306, 1
  %409 = shl i32 %408, 8
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds i32, i32* %3, i64 %410
  %412 = load i32, i32* %411, align 4
  %413 = and i32 %412, -2097153
  %414 = sub i32 %413, 1
  %415 = sext i32 %306 to i64
  %416 = getelementptr inbounds [256 x i32], [256 x i32]* %11, i64 0, i64 %415
  %417 = load i32, i32* %416, align 4
  %418 = icmp sgt i32 %414, %417
  br i1 %418, label %.lr.ph37, label %._crit_edge38

.lr.ph37:                                         ; preds = %._crit_edge
  %419 = sext i32 %414 to i64
  br label %420

; <label>:420:                                    ; preds = %.lr.ph37, %440
  %indvars.iv39 = phi i64 [ %419, %.lr.ph37 ], [ %indvars.iv.next40, %440 ]
  call void @unroll_loop(i32 189)
  %421 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv39
  %422 = load i32, i32* %421, align 4
  %423 = sub i32 %422, 1
  %424 = icmp slt i32 %423, 0
  %425 = add nsw i32 %423, %4
  %spec.select1 = select i1 %424, i32 %425, i32 %423
  %426 = sext i32 %spec.select1 to i64
  %427 = getelementptr inbounds i8, i8* %1, i64 %426
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i64
  %430 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %429
  %431 = load i8, i8* %430, align 1
  %432 = icmp ne i8 %431, 0
  br i1 %432, label %440, label %433

; <label>:433:                                    ; preds = %420
  %434 = zext i8 %428 to i64
  %435 = getelementptr inbounds [256 x i32], [256 x i32]* %11, i64 0, i64 %434
  %436 = load i32, i32* %435, align 4
  %437 = add nsw i32 %436, -1
  store i32 %437, i32* %435, align 4
  %438 = sext i32 %436 to i64
  %439 = getelementptr inbounds i32, i32* %0, i64 %438
  store i32 %spec.select1, i32* %439, align 4
  br label %440

; <label>:440:                                    ; preds = %420, %433
  %indvars.iv.next40 = add i64 %indvars.iv39, -1
  %441 = load i32, i32* %416, align 4
  %442 = sext i32 %441 to i64
  %443 = icmp sgt i64 %indvars.iv.next40, %442
  br i1 %443, label %420, label %._crit_edge38.loopexit

._crit_edge38.loopexit:                           ; preds = %440
  br label %._crit_edge38

._crit_edge38:                                    ; preds = %._crit_edge38.loopexit, %._crit_edge
  %444 = sext i32 %306 to i64
  %445 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %444
  %446 = load i32, i32* %445, align 4
  %447 = sub nsw i32 %446, 1
  %448 = sext i32 %306 to i64
  %449 = getelementptr inbounds [256 x i32], [256 x i32]* %11, i64 0, i64 %448
  %450 = load i32, i32* %449, align 4
  %451 = icmp eq i32 %447, %450
  br i1 %451, label %464, label %452

; <label>:452:                                    ; preds = %._crit_edge38
  %453 = sext i32 %306 to i64
  %454 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %453
  %455 = load i32, i32* %454, align 4
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %457, label %463

; <label>:457:                                    ; preds = %452
  %458 = sext i32 %306 to i64
  %459 = getelementptr inbounds [256 x i32], [256 x i32]* %11, i64 0, i64 %458
  %460 = load i32, i32* %459, align 4
  %461 = sub nsw i32 %4, 1
  %462 = icmp eq i32 %460, %461
  br i1 %462, label %464, label %463

; <label>:463:                                    ; preds = %457, %452
  call void @BZ2_bz__AssertH__fail(i32 1007)
  br label %464

; <label>:464:                                    ; preds = %463, %457, %._crit_edge38
  %465 = sext i32 %306 to i64
  br label %466

; <label>:466:                                    ; preds = %464, %466
  %indvars.iv42 = phi i64 [ 0, %464 ], [ %indvars.iv.next43, %466 ]
  call void @unroll_loop(i32 190)
  %467 = shl i64 %indvars.iv42, 8
  %468 = add nsw i64 %467, %465
  %469 = getelementptr inbounds i32, i32* %3, i64 %468
  %470 = load i32, i32* %469, align 4
  %471 = or i32 %470, 2097152
  store i32 %471, i32* %469, align 4
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %exitcond44 = icmp ne i64 %indvars.iv.next43, 256
  br i1 %exitcond44, label %466, label %472

; <label>:472:                                    ; preds = %466
  %473 = sext i32 %306 to i64
  %474 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %473
  store i8 1, i8* %474, align 1
  %475 = icmp ult i64 %indvars.iv53, 255
  br i1 %475, label %476, label %520

; <label>:476:                                    ; preds = %472
  %477 = shl i32 %306, 8
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds i32, i32* %3, i64 %478
  %480 = load i32, i32* %479, align 4
  %481 = and i32 %480, -2097153
  %482 = add nsw i32 %306, 1
  %483 = shl i32 %482, 8
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds i32, i32* %3, i64 %484
  %486 = load i32, i32* %485, align 4
  %487 = and i32 %486, -2097153
  %488 = sub i32 %487, %481
  br label %489

; <label>:489:                                    ; preds = %489, %476
  %.0 = phi i32 [ 0, %476 ], [ %492, %489 ]
  call void @unroll_loop(i32 191)
  %490 = ashr i32 %488, %.0
  %491 = icmp sgt i32 %490, 65534
  %492 = add nuw nsw i32 %.0, 1
  br i1 %491, label %489, label %493

; <label>:493:                                    ; preds = %489
  %.0.lcssa = phi i32 [ %.0, %489 ]
  %494 = sub nsw i32 %488, 1
  %495 = icmp sge i32 %494, 0
  br i1 %495, label %.lr.ph47, label %._crit_edge48

.lr.ph47:                                         ; preds = %493
  %496 = add i32 %487, -1
  %497 = sub i32 %496, %481
  %498 = sext i32 %497 to i64
  %499 = sext i32 %481 to i64
  br label %500

; <label>:500:                                    ; preds = %.lr.ph47, %514
  %indvars.iv49 = phi i64 [ %498, %.lr.ph47 ], [ %indvars.iv.next50, %514 ]
  call void @unroll_loop(i32 192)
  %501 = add nsw i64 %499, %indvars.iv49
  %502 = getelementptr inbounds i32, i32* %0, i64 %501
  %503 = load i32, i32* %502, align 4
  %504 = trunc i64 %indvars.iv49 to i32
  %505 = ashr i32 %504, %.0.lcssa
  %506 = trunc i32 %505 to i16
  %507 = sext i32 %503 to i64
  %508 = getelementptr inbounds i16, i16* %2, i64 %507
  store i16 %506, i16* %508, align 2
  %509 = icmp slt i32 %503, 34
  br i1 %509, label %510, label %514

; <label>:510:                                    ; preds = %500
  %511 = add nsw i32 %503, %4
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds i16, i16* %2, i64 %512
  store i16 %506, i16* %513, align 2
  br label %514

; <label>:514:                                    ; preds = %500, %510
  %indvars.iv.next50 = add nsw i64 %indvars.iv49, -1
  %515 = icmp sge i64 %indvars.iv.next50, 0
  br i1 %515, label %500, label %._crit_edge48.loopexit

._crit_edge48.loopexit:                           ; preds = %514
  br label %._crit_edge48

._crit_edge48:                                    ; preds = %._crit_edge48.loopexit, %493
  %516 = sub nsw i32 %488, 1
  %517 = ashr i32 %516, %.0.lcssa
  %518 = icmp sle i32 %517, 65535
  br i1 %518, label %520, label %519

; <label>:519:                                    ; preds = %._crit_edge48
  call void @BZ2_bz__AssertH__fail(i32 1002)
  br label %520

; <label>:520:                                    ; preds = %472, %519, %._crit_edge48
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %521 = icmp ule i64 %indvars.iv.next54, 255
  br i1 %521, label %304, label %522

; <label>:522:                                    ; preds = %520
  %.04.lcssa = phi i32 [ %.15.lcssa, %520 ]
  %523 = icmp sge i32 %5, 4
  br i1 %523, label %524, label %529

; <label>:524:                                    ; preds = %522
  %525 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %526 = sub nsw i32 %4, %.04.lcssa
  %527 = getelementptr [44 x i8], [44 x i8]* @.str.8.169, i32 0, i32 0
  %528 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %525, i8* %527, i32 %4, i32 %.04.lcssa, i32 %526)
  br label %529

.loopexit:                                        ; preds = %337
  br label %529

; <label>:529:                                    ; preds = %.loopexit, %524, %522
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @mainQSort3(i32*, i8*, i16*, i32, i32, i32, i32, i32*) #0 {
  %9 = alloca [100 x i32], align 16
  %10 = alloca [100 x i32], align 16
  %11 = alloca [100 x i32], align 16
  %12 = alloca [3 x i32], align 4
  %13 = alloca [3 x i32], align 4
  %14 = alloca [3 x i32], align 4
  %15 = sext i32 0 to i64
  %16 = getelementptr inbounds [100 x i32], [100 x i32]* %9, i64 0, i64 %15
  store i32 %4, i32* %16, align 4
  %17 = sext i32 0 to i64
  %18 = getelementptr inbounds [100 x i32], [100 x i32]* %10, i64 0, i64 %17
  store i32 %5, i32* %18, align 4
  %19 = sext i32 0 to i64
  %20 = getelementptr inbounds [100 x i32], [100 x i32]* %11, i64 0, i64 %19
  store i32 %6, i32* %20, align 4
  %21 = add nsw i32 0, 1
  br label %22

; <label>:22:                                     ; preds = %8, %.backedge
  %.0681 = phi i32 [ %21, %8 ], [ %.06.be, %.backedge ]
  call void @unroll_loop(i32 194)
  %23 = icmp slt i32 %.0681, 98
  br i1 %23, label %25, label %24

; <label>:24:                                     ; preds = %22
  call void @BZ2_bz__AssertH__fail(i32 1001)
  br label %25

; <label>:25:                                     ; preds = %24, %22
  %26 = add nsw i32 %.0681, -1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [100 x i32], [100 x i32]* %9, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %26 to i64
  %31 = getelementptr inbounds [100 x i32], [100 x i32]* %10, i64 0, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %26 to i64
  %34 = getelementptr inbounds [100 x i32], [100 x i32]* %11, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = sub nsw i32 %32, %29
  %37 = icmp slt i32 %36, 20
  %38 = icmp sgt i32 %35, 14
  %or.cond = or i1 %37, %38
  br i1 %or.cond, label %39, label %43

; <label>:39:                                     ; preds = %25
  call void @mainSimpleSort(i32* %0, i8* %1, i16* %2, i32 %3, i32 %29, i32 %32, i32 %35, i32* %7)
  %40 = load i32, i32* %7, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %.loopexit, label %.backedge

.backedge:                                        ; preds = %39, %156, %326
  %.06.be = phi i32 [ %164, %156 ], [ %365, %326 ], [ %26, %39 ]
  %42 = icmp sgt i32 %.06.be, 0
  br i1 %42, label %22, label %.loopexit

; <label>:43:                                     ; preds = %25
  %44 = sext i32 %29 to i64
  %45 = getelementptr inbounds i32, i32* %0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = add i32 %46, %35
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = sext i32 %32 to i64
  %52 = getelementptr inbounds i32, i32* %0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %53, %35
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = add nsw i32 %29, %32
  %59 = ashr i32 %58, 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %0, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = add i32 %62, %35
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %1, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = call zeroext i8 @mmed3(i8 zeroext %50, i8 zeroext %57, i8 zeroext %66)
  %68 = zext i8 %67 to i32
  br label %69

; <label>:69:                                     ; preds = %43, %141
  %.012 = phi i32 [ %32, %43 ], [ %.11321, %141 ]
  %.010 = phi i32 [ %29, %43 ], [ %.11117, %141 ]
  %.08 = phi i32 [ %32, %43 ], [ %153, %141 ]
  %.07 = phi i32 [ %29, %43 ], [ %152, %141 ]
  call void @unroll_loop(i32 195)
  %70 = sext i32 %.08 to i64
  %71 = icmp sgt i32 %.07, %.08
  br i1 %71, label %.outer28._crit_edge, label %.lr.ph.lr.ph

.lr.ph.lr.ph:                                     ; preds = %69
  %72 = sext i32 %.010 to i64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.lr.ph, %.outer28
  %indvars.iv43 = phi i64 [ %72, %.lr.ph.lr.ph ], [ %indvars.iv.next44, %.outer28 ]
  %.1.ph40 = phi i32 [ %.07, %.lr.ph.lr.ph ], [ %96, %.outer28 ]
  call void @unroll_loop(i32 176)
  %73 = sext i32 %.1.ph40 to i64
  br label %77

.outer28..outer28._crit_edge_crit_edge:           ; preds = %.outer28
  %split41.wide = phi i64 [ %indvars.iv.next44, %.outer28 ]
  %split42 = phi i32 [ %96, %.outer28 ]
  %74 = trunc i64 %split41.wide to i32
  br label %.outer28._crit_edge

._crit_edge:                                      ; preds = %103
  %split37.wide = phi i64 [ %indvars.iv43, %103 ]
  %split38.wide = phi i64 [ %indvars.iv.next, %103 ]
  %75 = trunc i64 %split37.wide to i32
  %76 = trunc i64 %split38.wide to i32
  br label %.outer28._crit_edge

; <label>:77:                                     ; preds = %.lr.ph, %103
  %indvars.iv = phi i64 [ %73, %.lr.ph ], [ %indvars.iv.next, %103 ]
  call void @unroll_loop(i32 196)
  %78 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv
  %79 = load i32, i32* %78, align 4
  %80 = add i32 %79, %35
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %1, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = sub nsw i32 %84, %68
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %.outer28, label %98

.outer28:                                         ; preds = %77
  %.1.lcssa30.wide = phi i64 [ %indvars.iv, %77 ]
  %87 = trunc i64 %.1.lcssa30.wide to i32
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i32, i32* %0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv43
  %92 = load i32, i32* %91, align 4
  %93 = sext i32 %87 to i64
  %94 = getelementptr inbounds i32, i32* %0, i64 %93
  store i32 %92, i32* %94, align 4
  %95 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv43
  store i32 %90, i32* %95, align 4
  %indvars.iv.next44 = add i64 %indvars.iv43, 1
  %96 = add nsw i32 %87, 1
  %97 = icmp sgt i32 %96, %.08
  br i1 %97, label %.outer28..outer28._crit_edge_crit_edge, label %.lr.ph

; <label>:98:                                     ; preds = %77
  %99 = icmp sgt i32 %85, 0
  br i1 %99, label %100, label %103

; <label>:100:                                    ; preds = %98
  %.111.lcssa16.wide = phi i64 [ %indvars.iv43, %98 ]
  %.1.lcssa14.wide = phi i64 [ %indvars.iv, %98 ]
  %101 = trunc i64 %.111.lcssa16.wide to i32
  %102 = trunc i64 %.1.lcssa14.wide to i32
  br label %.outer28._crit_edge

; <label>:103:                                    ; preds = %98
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %104 = icmp sgt i64 %indvars.iv.next, %70
  br i1 %104, label %._crit_edge, label %77

.outer28._crit_edge:                              ; preds = %._crit_edge, %.outer28..outer28._crit_edge_crit_edge, %69, %100
  %.11117 = phi i32 [ %101, %100 ], [ %75, %._crit_edge ], [ %74, %.outer28..outer28._crit_edge_crit_edge ], [ %.010, %69 ]
  %.115 = phi i32 [ %102, %100 ], [ %76, %._crit_edge ], [ %split42, %.outer28..outer28._crit_edge_crit_edge ], [ %.07, %69 ]
  %105 = sext i32 %.115 to i64
  %106 = icmp sgt i32 %.115, %.08
  br i1 %106, label %.outer._crit_edge, label %.lr.ph46.lr.ph

.lr.ph46.lr.ph:                                   ; preds = %.outer28._crit_edge
  %107 = sext i32 %.012 to i64
  br label %.lr.ph46

.lr.ph46:                                         ; preds = %.lr.ph46.lr.ph, %.outer
  %indvars.iv58 = phi i64 [ %107, %.lr.ph46.lr.ph ], [ %indvars.iv.next59, %.outer ]
  %.19.ph55 = phi i32 [ %.08, %.lr.ph46.lr.ph ], [ %131, %.outer ]
  call void @unroll_loop(i32 153)
  %108 = sext i32 %.19.ph55 to i64
  br label %112

.outer..outer._crit_edge_crit_edge:               ; preds = %.outer
  %split56.wide = phi i64 [ %indvars.iv.next59, %.outer ]
  %split57 = phi i32 [ %131, %.outer ]
  %109 = trunc i64 %split56.wide to i32
  br label %.outer._crit_edge

._crit_edge49:                                    ; preds = %138
  %split50.wide = phi i64 [ %indvars.iv58, %138 ]
  %split51.wide = phi i64 [ %indvars.iv.next53, %138 ]
  %110 = trunc i64 %split50.wide to i32
  %111 = trunc i64 %split51.wide to i32
  br label %.outer._crit_edge

; <label>:112:                                    ; preds = %.lr.ph46, %138
  %indvars.iv52 = phi i64 [ %108, %.lr.ph46 ], [ %indvars.iv.next53, %138 ]
  call void @unroll_loop(i32 197)
  %113 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv52
  %114 = load i32, i32* %113, align 4
  %115 = add i32 %114, %35
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %1, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = sub nsw i32 %119, %68
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %.outer, label %133

.outer:                                           ; preds = %112
  %.19.lcssa23.wide = phi i64 [ %indvars.iv52, %112 ]
  %122 = trunc i64 %.19.lcssa23.wide to i32
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i32, i32* %0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv58
  %127 = load i32, i32* %126, align 4
  %128 = sext i32 %122 to i64
  %129 = getelementptr inbounds i32, i32* %0, i64 %128
  store i32 %127, i32* %129, align 4
  %130 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv58
  store i32 %125, i32* %130, align 4
  %indvars.iv.next59 = add i64 %indvars.iv58, -1
  %131 = add nsw i32 %122, -1
  %132 = icmp sgt i32 %.115, %131
  br i1 %132, label %.outer..outer._crit_edge_crit_edge, label %.lr.ph46

; <label>:133:                                    ; preds = %112
  %134 = icmp slt i32 %120, 0
  br i1 %134, label %135, label %138

; <label>:135:                                    ; preds = %133
  %.113.lcssa20.wide = phi i64 [ %indvars.iv58, %133 ]
  %.19.lcssa18.wide = phi i64 [ %indvars.iv52, %133 ]
  %136 = trunc i64 %.113.lcssa20.wide to i32
  %137 = trunc i64 %.19.lcssa18.wide to i32
  br label %.outer._crit_edge

; <label>:138:                                    ; preds = %133
  %indvars.iv.next53 = add nsw i64 %indvars.iv52, -1
  %139 = icmp sgt i64 %105, %indvars.iv.next53
  br i1 %139, label %._crit_edge49, label %112

.outer._crit_edge:                                ; preds = %._crit_edge49, %.outer..outer._crit_edge_crit_edge, %.outer28._crit_edge, %135
  %.11321 = phi i32 [ %136, %135 ], [ %110, %._crit_edge49 ], [ %109, %.outer..outer._crit_edge_crit_edge ], [ %.012, %.outer28._crit_edge ]
  %.1919 = phi i32 [ %137, %135 ], [ %111, %._crit_edge49 ], [ %split57, %.outer..outer._crit_edge_crit_edge ], [ %.08, %.outer28._crit_edge ]
  %140 = icmp sgt i32 %.115, %.1919
  br i1 %140, label %154, label %141

; <label>:141:                                    ; preds = %.outer._crit_edge
  %142 = sext i32 %.115 to i64
  %143 = getelementptr inbounds i32, i32* %0, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = sext i32 %.1919 to i64
  %146 = getelementptr inbounds i32, i32* %0, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %.115 to i64
  %149 = getelementptr inbounds i32, i32* %0, i64 %148
  store i32 %147, i32* %149, align 4
  %150 = sext i32 %.1919 to i64
  %151 = getelementptr inbounds i32, i32* %0, i64 %150
  store i32 %144, i32* %151, align 4
  %152 = add nsw i32 %.115, 1
  %153 = add nsw i32 %.1919, -1
  br label %69

; <label>:154:                                    ; preds = %.outer._crit_edge
  %.11321.lcssa = phi i32 [ %.11321, %.outer._crit_edge ]
  %.1919.lcssa = phi i32 [ %.1919, %.outer._crit_edge ]
  %.11117.lcssa = phi i32 [ %.11117, %.outer._crit_edge ]
  %.115.lcssa = phi i32 [ %.115, %.outer._crit_edge ]
  %155 = icmp slt i32 %.11321.lcssa, %.11117.lcssa
  br i1 %155, label %156, label %165

; <label>:156:                                    ; preds = %154
  %157 = sext i32 %26 to i64
  %158 = getelementptr inbounds [100 x i32], [100 x i32]* %9, i64 0, i64 %157
  store i32 %29, i32* %158, align 4
  %159 = sext i32 %26 to i64
  %160 = getelementptr inbounds [100 x i32], [100 x i32]* %10, i64 0, i64 %159
  store i32 %32, i32* %160, align 4
  %161 = add nsw i32 %35, 1
  %162 = sext i32 %26 to i64
  %163 = getelementptr inbounds [100 x i32], [100 x i32]* %11, i64 0, i64 %162
  store i32 %161, i32* %163, align 4
  %164 = add nsw i32 %26, 1
  br label %.backedge

; <label>:165:                                    ; preds = %154
  %166 = sub nsw i32 %.11117.lcssa, %29
  %167 = sub nsw i32 %.115.lcssa, %.11117.lcssa
  %168 = icmp slt i32 %166, %167
  %169 = sub nsw i32 %.11117.lcssa, %29
  %170 = sub nsw i32 %.115.lcssa, %.11117.lcssa
  %171 = select i1 %168, i32 %169, i32 %170
  %172 = icmp sgt i32 %171, 0
  br i1 %172, label %.lr.ph64, label %._crit_edge65

.lr.ph64:                                         ; preds = %165
  %173 = add i32 %.115.lcssa, 1
  %174 = add i32 %.11117.lcssa, -1
  %175 = sub i32 %174, %.115.lcssa
  %176 = add i32 %29, -1
  %177 = sub i32 %176, %.11117.lcssa
  %178 = icmp sgt i32 %175, %177
  %smax = select i1 %178, i32 %175, i32 %177
  %179 = add i32 %173, %smax
  %180 = sext i32 %179 to i64
  %181 = sext i32 %29 to i64
  br label %182

; <label>:182:                                    ; preds = %.lr.ph64, %182
  %indvars.iv68 = phi i64 [ %181, %.lr.ph64 ], [ %indvars.iv.next69, %182 ]
  %indvars.iv66 = phi i64 [ %180, %.lr.ph64 ], [ %indvars.iv.next67, %182 ]
  %.0362 = phi i32 [ %171, %.lr.ph64 ], [ %189, %182 ]
  call void @unroll_loop(i32 198)
  %183 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv68
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv66
  %186 = load i32, i32* %185, align 4
  %187 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv68
  store i32 %186, i32* %187, align 4
  %188 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv66
  store i32 %184, i32* %188, align 4
  %indvars.iv.next69 = add nsw i64 %indvars.iv68, 1
  %indvars.iv.next67 = add nsw i64 %indvars.iv66, 1
  %189 = add nsw i32 %.0362, -1
  %190 = icmp sgt i32 %189, 0
  br i1 %190, label %182, label %._crit_edge65.loopexit

._crit_edge65.loopexit:                           ; preds = %182
  br label %._crit_edge65

._crit_edge65:                                    ; preds = %._crit_edge65.loopexit, %165
  %191 = sub nsw i32 %32, %.11321.lcssa
  %192 = sub nsw i32 %.11321.lcssa, %.1919.lcssa
  %193 = icmp slt i32 %191, %192
  %194 = sub nsw i32 %32, %.11321.lcssa
  %195 = sub nsw i32 %.11321.lcssa, %.1919.lcssa
  %196 = select i1 %193, i32 %194, i32 %195
  %197 = icmp sgt i32 %196, 0
  br i1 %197, label %.lr.ph74, label %._crit_edge75

.lr.ph74:                                         ; preds = %._crit_edge65
  %198 = add i32 %32, 2
  %199 = add i32 %.11321.lcssa, -1
  %200 = sub i32 %199, %32
  %201 = add i32 %.1919.lcssa, -1
  %202 = sub i32 %201, %.11321.lcssa
  %203 = icmp sgt i32 %200, %202
  %smax76 = select i1 %203, i32 %200, i32 %202
  %204 = add i32 %198, %smax76
  %205 = sext i32 %204 to i64
  %206 = sext i32 %.115.lcssa to i64
  br label %207

; <label>:207:                                    ; preds = %.lr.ph74, %207
  %indvars.iv79 = phi i64 [ %206, %.lr.ph74 ], [ %indvars.iv.next80, %207 ]
  %indvars.iv77 = phi i64 [ %205, %.lr.ph74 ], [ %indvars.iv.next78, %207 ]
  %.072 = phi i32 [ %196, %.lr.ph74 ], [ %214, %207 ]
  call void @unroll_loop(i32 199)
  %208 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv79
  %209 = load i32, i32* %208, align 4
  %210 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv77
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv79
  store i32 %211, i32* %212, align 4
  %213 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv77
  store i32 %209, i32* %213, align 4
  %indvars.iv.next80 = add nsw i64 %indvars.iv79, 1
  %indvars.iv.next78 = add nsw i64 %indvars.iv77, 1
  %214 = add nsw i32 %.072, -1
  %215 = icmp sgt i32 %214, 0
  br i1 %215, label %207, label %._crit_edge75.loopexit

._crit_edge75.loopexit:                           ; preds = %207
  br label %._crit_edge75

._crit_edge75:                                    ; preds = %._crit_edge75.loopexit, %._crit_edge65
  %216 = add nsw i32 %29, %.115.lcssa
  %217 = sub nsw i32 %216, %.11117.lcssa
  %218 = sub nsw i32 %217, 1
  %219 = sub nsw i32 %.11321.lcssa, %.1919.lcssa
  %220 = sub nsw i32 %32, %219
  %221 = add nsw i32 %220, 1
  %222 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  store i32 %29, i32* %222, align 4
  %223 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  store i32 %218, i32* %223, align 4
  %224 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  store i32 %35, i32* %224, align 4
  %225 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  store i32 %221, i32* %225, align 4
  %226 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  store i32 %32, i32* %226, align 4
  %227 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  store i32 %35, i32* %227, align 4
  %228 = add nsw i32 %218, 1
  %229 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 2
  store i32 %228, i32* %229, align 4
  %230 = sub nsw i32 %221, 1
  %231 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 2
  store i32 %230, i32* %231, align 4
  %232 = add nsw i32 %35, 1
  %233 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 2
  store i32 %232, i32* %233, align 4
  %234 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  %235 = load i32, i32* %234, align 4
  %236 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  %237 = load i32, i32* %236, align 4
  %238 = sub nsw i32 %235, %237
  %239 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  %242 = load i32, i32* %241, align 4
  %243 = sub nsw i32 %240, %242
  %244 = icmp slt i32 %238, %243
  br i1 %244, label %245, label %264

; <label>:245:                                    ; preds = %._crit_edge75
  %246 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  store i32 %249, i32* %250, align 4
  %251 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  store i32 %247, i32* %251, align 4
  %252 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  %253 = load i32, i32* %252, align 4
  %254 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  %255 = load i32, i32* %254, align 4
  %256 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  store i32 %255, i32* %256, align 4
  %257 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  store i32 %253, i32* %257, align 4
  %258 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  %259 = load i32, i32* %258, align 4
  %260 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  store i32 %261, i32* %262, align 4
  %263 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  store i32 %259, i32* %263, align 4
  br label %264

; <label>:264:                                    ; preds = %245, %._crit_edge75
  %265 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  %268 = load i32, i32* %267, align 4
  %269 = sub nsw i32 %266, %268
  %270 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 2
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 2
  %273 = load i32, i32* %272, align 4
  %274 = sub nsw i32 %271, %273
  %275 = icmp slt i32 %269, %274
  br i1 %275, label %276, label %295

; <label>:276:                                    ; preds = %264
  %277 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 2
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  store i32 %280, i32* %281, align 4
  %282 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 2
  store i32 %278, i32* %282, align 4
  %283 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  %284 = load i32, i32* %283, align 4
  %285 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 2
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  store i32 %286, i32* %287, align 4
  %288 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 2
  store i32 %284, i32* %288, align 4
  %289 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  %290 = load i32, i32* %289, align 4
  %291 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 2
  %292 = load i32, i32* %291, align 4
  %293 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  store i32 %292, i32* %293, align 4
  %294 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 2
  store i32 %290, i32* %294, align 4
  br label %295

; <label>:295:                                    ; preds = %276, %264
  %296 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  %297 = load i32, i32* %296, align 4
  %298 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  %299 = load i32, i32* %298, align 4
  %300 = sub nsw i32 %297, %299
  %301 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  %302 = load i32, i32* %301, align 4
  %303 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  %304 = load i32, i32* %303, align 4
  %305 = sub nsw i32 %302, %304
  %306 = icmp slt i32 %300, %305
  br i1 %306, label %307, label %326

; <label>:307:                                    ; preds = %295
  %308 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  %309 = load i32, i32* %308, align 4
  %310 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  %311 = load i32, i32* %310, align 4
  %312 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  store i32 %311, i32* %312, align 4
  %313 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  store i32 %309, i32* %313, align 4
  %314 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  %315 = load i32, i32* %314, align 4
  %316 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  %317 = load i32, i32* %316, align 4
  %318 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  store i32 %317, i32* %318, align 4
  %319 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  store i32 %315, i32* %319, align 4
  %320 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  %321 = load i32, i32* %320, align 4
  %322 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  %323 = load i32, i32* %322, align 4
  %324 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  store i32 %323, i32* %324, align 4
  %325 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  store i32 %321, i32* %325, align 4
  br label %326

; <label>:326:                                    ; preds = %307, %295
  %327 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 0
  %328 = load i32, i32* %327, align 4
  %329 = sext i32 %26 to i64
  %330 = getelementptr inbounds [100 x i32], [100 x i32]* %9, i64 0, i64 %329
  store i32 %328, i32* %330, align 4
  %331 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  %332 = load i32, i32* %331, align 4
  %333 = sext i32 %26 to i64
  %334 = getelementptr inbounds [100 x i32], [100 x i32]* %10, i64 0, i64 %333
  store i32 %332, i32* %334, align 4
  %335 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  %336 = load i32, i32* %335, align 4
  %337 = sext i32 %26 to i64
  %338 = getelementptr inbounds [100 x i32], [100 x i32]* %11, i64 0, i64 %337
  store i32 %336, i32* %338, align 4
  %339 = add nsw i32 %26, 1
  %340 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 1
  %341 = load i32, i32* %340, align 4
  %342 = sext i32 %339 to i64
  %343 = getelementptr inbounds [100 x i32], [100 x i32]* %9, i64 0, i64 %342
  store i32 %341, i32* %343, align 4
  %344 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  %345 = load i32, i32* %344, align 4
  %346 = sext i32 %339 to i64
  %347 = getelementptr inbounds [100 x i32], [100 x i32]* %10, i64 0, i64 %346
  store i32 %345, i32* %347, align 4
  %348 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  %349 = load i32, i32* %348, align 4
  %350 = sext i32 %339 to i64
  %351 = getelementptr inbounds [100 x i32], [100 x i32]* %11, i64 0, i64 %350
  store i32 %349, i32* %351, align 4
  %352 = add nsw i32 %339, 1
  %353 = getelementptr inbounds [3 x i32], [3 x i32]* %12, i64 0, i64 2
  %354 = load i32, i32* %353, align 4
  %355 = sext i32 %352 to i64
  %356 = getelementptr inbounds [100 x i32], [100 x i32]* %9, i64 0, i64 %355
  store i32 %354, i32* %356, align 4
  %357 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 2
  %358 = load i32, i32* %357, align 4
  %359 = sext i32 %352 to i64
  %360 = getelementptr inbounds [100 x i32], [100 x i32]* %10, i64 0, i64 %359
  store i32 %358, i32* %360, align 4
  %361 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 2
  %362 = load i32, i32* %361, align 4
  %363 = sext i32 %352 to i64
  %364 = getelementptr inbounds [100 x i32], [100 x i32]* %11, i64 0, i64 %363
  store i32 %362, i32* %364, align 4
  %365 = add nsw i32 %352, 1
  br label %.backedge

.loopexit:                                        ; preds = %.backedge, %39
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @mainSimpleSort(i32*, i8*, i16*, i32, i32, i32, i32, i32*) #0 {
  %9 = sub nsw i32 %5, %4
  %10 = add nsw i32 %9, 1
  %11 = icmp slt i32 %10, 2
  br i1 %11, label %.loopexit8, label %.preheader

.preheader:                                       ; preds = %8
  br label %12

; <label>:12:                                     ; preds = %.preheader, %12
  %indvars.iv21 = phi i64 [ %indvars.iv.next22, %12 ], [ 0, %.preheader ]
  %13 = getelementptr inbounds [14 x i32], [14 x i32]* @incs, i64 0, i64 %indvars.iv21
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, %10
  %indvars.iv.next22 = add nuw i64 %indvars.iv21, 1
  br i1 %15, label %12, label %16

; <label>:16:                                     ; preds = %12
  %.0.lcssa.wide = phi i64 [ %indvars.iv21, %12 ]
  %17 = trunc i64 %.0.lcssa.wide to i32
  %18 = add nsw i32 %17, -1
  %19 = icmp sge i32 %18, 0
  br i1 %19, label %.lr.ph20, label %.loopexit8

.lr.ph20:                                         ; preds = %16
  %20 = zext i32 %17 to i64
  %21 = add i64 %20, -1
  br label %22

; <label>:22:                                     ; preds = %.lr.ph20, %._crit_edge
  %indvars.iv = phi i64 [ %21, %.lr.ph20 ], [ %indvars.iv.next, %._crit_edge ]
  %23 = getelementptr inbounds [14 x i32], [14 x i32]* @incs, i64 0, i64 %indvars.iv
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %4, %24
  %26 = icmp sgt i32 %25, %5
  br i1 %26, label %._crit_edge, label %.lr.ph17.preheader

.lr.ph17.preheader:                               ; preds = %22
  br label %.lr.ph17

; <label>:27:                                     ; preds = %.loopexit
  %28 = icmp sgt i32 %128, %5
  br i1 %28, label %._crit_edge.loopexit, label %.lr.ph17

.lr.ph17:                                         ; preds = %.lr.ph17.preheader, %27
  %.0316 = phi i32 [ %128, %27 ], [ %25, %.lr.ph17.preheader ]
  call void @unroll_loop(i32 200)
  %29 = sext i32 %.0316 to i64
  %30 = getelementptr inbounds i32, i32* %0, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = sub nsw i32 %.0316, %24
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, i32* %0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, %6
  %37 = add i32 %31, %6
  %38 = call zeroext i8 @mainGtU(i32 %36, i32 %37, i8* %1, i16* %2, i32 %3, i32* %7)
  %39 = icmp ne i8 %38, 0
  br i1 %39, label %.lr.ph.preheader, label %.loopexit7

.lr.ph.preheader:                                 ; preds = %.lr.ph17
  br label %.lr.ph

; <label>:40:                                     ; preds = %.lr.ph
  %41 = sub nsw i32 %54, %24
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i32, i32* %0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = add i32 %44, %6
  %46 = call zeroext i8 @mainGtU(i32 %45, i32 %37, i8* %1, i16* %2, i32 %3, i32* %7)
  %47 = icmp ne i8 %46, 0
  br i1 %47, label %.lr.ph, label %.loopexit7.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %40
  %.019 = phi i32 [ %54, %40 ], [ %.0316, %.lr.ph.preheader ]
  call void @unroll_loop(i32 201)
  %48 = sub nsw i32 %.019, %24
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %0, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = sext i32 %.019 to i64
  %53 = getelementptr inbounds i32, i32* %0, i64 %52
  store i32 %51, i32* %53, align 4
  %54 = sub nsw i32 %.019, %24
  %55 = add nsw i32 %4, %24
  %56 = sub nsw i32 %55, 1
  %57 = icmp sle i32 %54, %56
  br i1 %57, label %.loopexit7.loopexit, label %40

.loopexit7.loopexit:                              ; preds = %.lr.ph, %40
  %.12.ph = phi i32 [ %54, %40 ], [ %54, %.lr.ph ]
  br label %.loopexit7

.loopexit7:                                       ; preds = %.loopexit7.loopexit, %.lr.ph17
  %.12 = phi i32 [ %.0316, %.lr.ph17 ], [ %.12.ph, %.loopexit7.loopexit ]
  %58 = sext i32 %.12 to i64
  %59 = getelementptr inbounds i32, i32* %0, i64 %58
  store i32 %31, i32* %59, align 4
  %60 = add nsw i32 %.0316, 1
  %61 = icmp sgt i32 %60, %5
  br i1 %61, label %._crit_edge.loopexit, label %62

; <label>:62:                                     ; preds = %.loopexit7
  %63 = sext i32 %60 to i64
  %64 = getelementptr inbounds i32, i32* %0, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = sub nsw i32 %60, %24
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, i32* %0, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = add i32 %69, %6
  %71 = add i32 %65, %6
  %72 = call zeroext i8 @mainGtU(i32 %70, i32 %71, i8* %1, i16* %2, i32 %3, i32* %7)
  %73 = icmp ne i8 %72, 0
  br i1 %73, label %.lr.ph11.preheader, label %.loopexit6

.lr.ph11.preheader:                               ; preds = %62
  br label %.lr.ph11

; <label>:74:                                     ; preds = %.lr.ph11
  %75 = sub nsw i32 %88, %24
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, i32* %0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = add i32 %78, %6
  %80 = call zeroext i8 @mainGtU(i32 %79, i32 %71, i8* %1, i16* %2, i32 %3, i32* %7)
  %81 = icmp ne i8 %80, 0
  br i1 %81, label %.lr.ph11, label %.loopexit6.loopexit

.lr.ph11:                                         ; preds = %.lr.ph11.preheader, %74
  %.210 = phi i32 [ %88, %74 ], [ %60, %.lr.ph11.preheader ]
  call void @unroll_loop(i32 202)
  %82 = sub nsw i32 %.210, %24
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %.210 to i64
  %87 = getelementptr inbounds i32, i32* %0, i64 %86
  store i32 %85, i32* %87, align 4
  %88 = sub nsw i32 %.210, %24
  %89 = add nsw i32 %4, %24
  %90 = sub nsw i32 %89, 1
  %91 = icmp sle i32 %88, %90
  br i1 %91, label %.loopexit6.loopexit, label %74

.loopexit6.loopexit:                              ; preds = %.lr.ph11, %74
  %.3.ph = phi i32 [ %88, %74 ], [ %88, %.lr.ph11 ]
  br label %.loopexit6

.loopexit6:                                       ; preds = %.loopexit6.loopexit, %62
  %.3 = phi i32 [ %60, %62 ], [ %.3.ph, %.loopexit6.loopexit ]
  %92 = sext i32 %.3 to i64
  %93 = getelementptr inbounds i32, i32* %0, i64 %92
  store i32 %65, i32* %93, align 4
  %94 = add nsw i32 %60, 1
  %95 = icmp sgt i32 %94, %5
  br i1 %95, label %._crit_edge.loopexit, label %96

; <label>:96:                                     ; preds = %.loopexit6
  %97 = sext i32 %94 to i64
  %98 = getelementptr inbounds i32, i32* %0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = sub nsw i32 %94, %24
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i32, i32* %0, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = add i32 %103, %6
  %105 = add i32 %99, %6
  %106 = call zeroext i8 @mainGtU(i32 %104, i32 %105, i8* %1, i16* %2, i32 %3, i32* %7)
  %107 = icmp ne i8 %106, 0
  br i1 %107, label %.lr.ph14.preheader, label %.loopexit

.lr.ph14.preheader:                               ; preds = %96
  br label %.lr.ph14

; <label>:108:                                    ; preds = %.lr.ph14
  %109 = sub nsw i32 %122, %24
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %112, %6
  %114 = call zeroext i8 @mainGtU(i32 %113, i32 %105, i8* %1, i16* %2, i32 %3, i32* %7)
  %115 = icmp ne i8 %114, 0
  br i1 %115, label %.lr.ph14, label %.loopexit.loopexit

.lr.ph14:                                         ; preds = %.lr.ph14.preheader, %108
  %.413 = phi i32 [ %122, %108 ], [ %94, %.lr.ph14.preheader ]
  call void @unroll_loop(i32 203)
  %116 = sub nsw i32 %.413, %24
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i32, i32* %0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = sext i32 %.413 to i64
  %121 = getelementptr inbounds i32, i32* %0, i64 %120
  store i32 %119, i32* %121, align 4
  %122 = sub nsw i32 %.413, %24
  %123 = add nsw i32 %4, %24
  %124 = sub nsw i32 %123, 1
  %125 = icmp sle i32 %122, %124
  br i1 %125, label %.loopexit.loopexit, label %108

.loopexit.loopexit:                               ; preds = %.lr.ph14, %108
  %.5.ph = phi i32 [ %122, %108 ], [ %122, %.lr.ph14 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %96
  %.5 = phi i32 [ %94, %96 ], [ %.5.ph, %.loopexit.loopexit ]
  %126 = sext i32 %.5 to i64
  %127 = getelementptr inbounds i32, i32* %0, i64 %126
  store i32 %99, i32* %127, align 4
  %128 = add nsw i32 %94, 1
  %129 = load i32, i32* %7, align 4
  %130 = icmp slt i32 %129, 0
  br i1 %130, label %.loopexit8.loopexit, label %27

._crit_edge.loopexit:                             ; preds = %.loopexit6, %.loopexit7, %27
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %22
  %indvars.iv.next = add i64 %indvars.iv, -1
  %131 = icmp sge i64 %indvars.iv.next, 0
  br i1 %131, label %22, label %.loopexit8.loopexit1

.loopexit8.loopexit:                              ; preds = %.loopexit
  br label %.loopexit8

.loopexit8.loopexit1:                             ; preds = %._crit_edge
  br label %.loopexit8

.loopexit8:                                       ; preds = %.loopexit8.loopexit1, %.loopexit8.loopexit, %16, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mmed3(i8 zeroext, i8 zeroext, i8 zeroext) #0 {
  %4 = zext i8 %0 to i32
  %5 = zext i8 %1 to i32
  %6 = icmp sgt i32 %4, %5
  %spec.select = select i1 %6, i8 %0, i8 %1
  %spec.select1 = select i1 %6, i8 %1, i8 %0
  %7 = zext i8 %spec.select to i32
  %8 = zext i8 %2 to i32
  %9 = icmp sgt i32 %7, %8
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %3
  %11 = zext i8 %spec.select1 to i32
  %12 = zext i8 %2 to i32
  %13 = icmp sgt i32 %11, %12
  %spec.select2 = select i1 %13, i8 %spec.select1, i8 %2
  br label %14

; <label>:14:                                     ; preds = %10, %3
  %.2 = phi i8 [ %spec.select2, %10 ], [ %spec.select, %3 ]
  ret i8 %.2
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mainGtU(i32, i32, i8*, i16*, i32, i32*) #0 {
  %7 = zext i32 %0 to i64
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds i8, i8* %2, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %9 to i32
  %14 = zext i8 %12 to i32
  %15 = icmp ne i32 %13, %14
  br i1 %15, label %16, label %22

; <label>:16:                                     ; preds = %6
  %17 = zext i8 %9 to i32
  %18 = zext i8 %12 to i32
  %19 = icmp sgt i32 %17, %18
  %20 = zext i1 %19 to i32
  %21 = trunc i32 %20 to i8
  br label %505

; <label>:22:                                     ; preds = %6
  %23 = add i32 %0, 1
  %24 = add i32 %1, 1
  %25 = zext i32 %23 to i64
  %26 = getelementptr inbounds i8, i8* %2, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i32 %24 to i64
  %29 = getelementptr inbounds i8, i8* %2, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %27 to i32
  %32 = zext i8 %30 to i32
  %33 = icmp ne i32 %31, %32
  br i1 %33, label %34, label %40

; <label>:34:                                     ; preds = %22
  %35 = zext i8 %27 to i32
  %36 = zext i8 %30 to i32
  %37 = icmp sgt i32 %35, %36
  %38 = zext i1 %37 to i32
  %39 = trunc i32 %38 to i8
  br label %505

; <label>:40:                                     ; preds = %22
  %41 = add i32 %23, 1
  %42 = add i32 %24, 1
  %43 = zext i32 %41 to i64
  %44 = getelementptr inbounds i8, i8* %2, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = zext i32 %42 to i64
  %47 = getelementptr inbounds i8, i8* %2, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %45 to i32
  %50 = zext i8 %48 to i32
  %51 = icmp ne i32 %49, %50
  br i1 %51, label %52, label %58

; <label>:52:                                     ; preds = %40
  %53 = zext i8 %45 to i32
  %54 = zext i8 %48 to i32
  %55 = icmp sgt i32 %53, %54
  %56 = zext i1 %55 to i32
  %57 = trunc i32 %56 to i8
  br label %505

; <label>:58:                                     ; preds = %40
  %59 = add i32 %41, 1
  %60 = add i32 %42, 1
  %61 = zext i32 %59 to i64
  %62 = getelementptr inbounds i8, i8* %2, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i32 %60 to i64
  %65 = getelementptr inbounds i8, i8* %2, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %63 to i32
  %68 = zext i8 %66 to i32
  %69 = icmp ne i32 %67, %68
  br i1 %69, label %70, label %76

; <label>:70:                                     ; preds = %58
  %71 = zext i8 %63 to i32
  %72 = zext i8 %66 to i32
  %73 = icmp sgt i32 %71, %72
  %74 = zext i1 %73 to i32
  %75 = trunc i32 %74 to i8
  br label %505

; <label>:76:                                     ; preds = %58
  %77 = add i32 %59, 1
  %78 = add i32 %60, 1
  %79 = zext i32 %77 to i64
  %80 = getelementptr inbounds i8, i8* %2, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i32 %78 to i64
  %83 = getelementptr inbounds i8, i8* %2, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %81 to i32
  %86 = zext i8 %84 to i32
  %87 = icmp ne i32 %85, %86
  br i1 %87, label %88, label %94

; <label>:88:                                     ; preds = %76
  %89 = zext i8 %81 to i32
  %90 = zext i8 %84 to i32
  %91 = icmp sgt i32 %89, %90
  %92 = zext i1 %91 to i32
  %93 = trunc i32 %92 to i8
  br label %505

; <label>:94:                                     ; preds = %76
  %95 = add i32 %77, 1
  %96 = add i32 %78, 1
  %97 = zext i32 %95 to i64
  %98 = getelementptr inbounds i8, i8* %2, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i32 %96 to i64
  %101 = getelementptr inbounds i8, i8* %2, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %99 to i32
  %104 = zext i8 %102 to i32
  %105 = icmp ne i32 %103, %104
  br i1 %105, label %106, label %112

; <label>:106:                                    ; preds = %94
  %107 = zext i8 %99 to i32
  %108 = zext i8 %102 to i32
  %109 = icmp sgt i32 %107, %108
  %110 = zext i1 %109 to i32
  %111 = trunc i32 %110 to i8
  br label %505

; <label>:112:                                    ; preds = %94
  %113 = add i32 %95, 1
  %114 = add i32 %96, 1
  %115 = zext i32 %113 to i64
  %116 = getelementptr inbounds i8, i8* %2, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i32 %114 to i64
  %119 = getelementptr inbounds i8, i8* %2, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %117 to i32
  %122 = zext i8 %120 to i32
  %123 = icmp ne i32 %121, %122
  br i1 %123, label %124, label %130

; <label>:124:                                    ; preds = %112
  %125 = zext i8 %117 to i32
  %126 = zext i8 %120 to i32
  %127 = icmp sgt i32 %125, %126
  %128 = zext i1 %127 to i32
  %129 = trunc i32 %128 to i8
  br label %505

; <label>:130:                                    ; preds = %112
  %131 = add i32 %113, 1
  %132 = add i32 %114, 1
  %133 = zext i32 %131 to i64
  %134 = getelementptr inbounds i8, i8* %2, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i32 %132 to i64
  %137 = getelementptr inbounds i8, i8* %2, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %135 to i32
  %140 = zext i8 %138 to i32
  %141 = icmp ne i32 %139, %140
  br i1 %141, label %142, label %148

; <label>:142:                                    ; preds = %130
  %143 = zext i8 %135 to i32
  %144 = zext i8 %138 to i32
  %145 = icmp sgt i32 %143, %144
  %146 = zext i1 %145 to i32
  %147 = trunc i32 %146 to i8
  br label %505

; <label>:148:                                    ; preds = %130
  %149 = add i32 %131, 1
  %150 = add i32 %132, 1
  %151 = zext i32 %149 to i64
  %152 = getelementptr inbounds i8, i8* %2, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i32 %150 to i64
  %155 = getelementptr inbounds i8, i8* %2, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %153 to i32
  %158 = zext i8 %156 to i32
  %159 = icmp ne i32 %157, %158
  br i1 %159, label %160, label %166

; <label>:160:                                    ; preds = %148
  %161 = zext i8 %153 to i32
  %162 = zext i8 %156 to i32
  %163 = icmp sgt i32 %161, %162
  %164 = zext i1 %163 to i32
  %165 = trunc i32 %164 to i8
  br label %505

; <label>:166:                                    ; preds = %148
  %167 = add i32 %149, 1
  %168 = add i32 %150, 1
  %169 = zext i32 %167 to i64
  %170 = getelementptr inbounds i8, i8* %2, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i32 %168 to i64
  %173 = getelementptr inbounds i8, i8* %2, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %171 to i32
  %176 = zext i8 %174 to i32
  %177 = icmp ne i32 %175, %176
  br i1 %177, label %178, label %184

; <label>:178:                                    ; preds = %166
  %179 = zext i8 %171 to i32
  %180 = zext i8 %174 to i32
  %181 = icmp sgt i32 %179, %180
  %182 = zext i1 %181 to i32
  %183 = trunc i32 %182 to i8
  br label %505

; <label>:184:                                    ; preds = %166
  %185 = add i32 %167, 1
  %186 = add i32 %168, 1
  %187 = zext i32 %185 to i64
  %188 = getelementptr inbounds i8, i8* %2, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i32 %186 to i64
  %191 = getelementptr inbounds i8, i8* %2, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %189 to i32
  %194 = zext i8 %192 to i32
  %195 = icmp ne i32 %193, %194
  br i1 %195, label %196, label %202

; <label>:196:                                    ; preds = %184
  %197 = zext i8 %189 to i32
  %198 = zext i8 %192 to i32
  %199 = icmp sgt i32 %197, %198
  %200 = zext i1 %199 to i32
  %201 = trunc i32 %200 to i8
  br label %505

; <label>:202:                                    ; preds = %184
  %203 = add i32 %185, 1
  %204 = add i32 %186, 1
  %205 = zext i32 %203 to i64
  %206 = getelementptr inbounds i8, i8* %2, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = zext i32 %204 to i64
  %209 = getelementptr inbounds i8, i8* %2, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %207 to i32
  %212 = zext i8 %210 to i32
  %213 = icmp ne i32 %211, %212
  br i1 %213, label %214, label %220

; <label>:214:                                    ; preds = %202
  %215 = zext i8 %207 to i32
  %216 = zext i8 %210 to i32
  %217 = icmp sgt i32 %215, %216
  %218 = zext i1 %217 to i32
  %219 = trunc i32 %218 to i8
  br label %505

; <label>:220:                                    ; preds = %202
  %221 = add i32 %203, 1
  %222 = add i32 %204, 1
  %223 = add i32 %4, 8
  br label %224

; <label>:224:                                    ; preds = %494, %220
  %.04 = phi i32 [ %223, %220 ], [ %501, %494 ]
  %.02 = phi i32 [ %222, %220 ], [ %.13, %494 ]
  %.01 = phi i32 [ %221, %220 ], [ %spec.select, %494 ]
  call void @unroll_loop(i32 204)
  %225 = zext i32 %.01 to i64
  %226 = getelementptr inbounds i8, i8* %2, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i32 %.02 to i64
  %229 = getelementptr inbounds i8, i8* %2, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %227 to i32
  %232 = zext i8 %230 to i32
  %233 = icmp ne i32 %231, %232
  br i1 %233, label %234, label %240

; <label>:234:                                    ; preds = %224
  %.lcssa21 = phi i8 [ %227, %224 ]
  %.lcssa = phi i8 [ %230, %224 ]
  %235 = zext i8 %.lcssa21 to i32
  %236 = zext i8 %.lcssa to i32
  %237 = icmp sgt i32 %235, %236
  %238 = zext i1 %237 to i32
  %239 = trunc i32 %238 to i8
  br label %505

; <label>:240:                                    ; preds = %224
  %241 = zext i32 %.01 to i64
  %242 = getelementptr inbounds i16, i16* %3, i64 %241
  %243 = load i16, i16* %242, align 2
  %244 = zext i32 %.02 to i64
  %245 = getelementptr inbounds i16, i16* %3, i64 %244
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %243 to i32
  %248 = zext i16 %246 to i32
  %249 = icmp ne i32 %247, %248
  br i1 %249, label %250, label %256

; <label>:250:                                    ; preds = %240
  %.lcssa54 = phi i16 [ %243, %240 ]
  %.lcssa38 = phi i16 [ %246, %240 ]
  %251 = zext i16 %.lcssa54 to i32
  %252 = zext i16 %.lcssa38 to i32
  %253 = icmp sgt i32 %251, %252
  %254 = zext i1 %253 to i32
  %255 = trunc i32 %254 to i8
  br label %505

; <label>:256:                                    ; preds = %240
  %257 = add i32 %.01, 1
  %258 = add i32 %.02, 1
  %259 = zext i32 %257 to i64
  %260 = getelementptr inbounds i8, i8* %2, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = zext i32 %258 to i64
  %263 = getelementptr inbounds i8, i8* %2, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %261 to i32
  %266 = zext i8 %264 to i32
  %267 = icmp ne i32 %265, %266
  br i1 %267, label %268, label %274

; <label>:268:                                    ; preds = %256
  %.lcssa85 = phi i8 [ %261, %256 ]
  %.lcssa70 = phi i8 [ %264, %256 ]
  %269 = zext i8 %.lcssa85 to i32
  %270 = zext i8 %.lcssa70 to i32
  %271 = icmp sgt i32 %269, %270
  %272 = zext i1 %271 to i32
  %273 = trunc i32 %272 to i8
  br label %505

; <label>:274:                                    ; preds = %256
  %275 = zext i32 %257 to i64
  %276 = getelementptr inbounds i16, i16* %3, i64 %275
  %277 = load i16, i16* %276, align 2
  %278 = zext i32 %258 to i64
  %279 = getelementptr inbounds i16, i16* %3, i64 %278
  %280 = load i16, i16* %279, align 2
  %281 = zext i16 %277 to i32
  %282 = zext i16 %280 to i32
  %283 = icmp ne i32 %281, %282
  br i1 %283, label %284, label %290

; <label>:284:                                    ; preds = %274
  %.lcssa114 = phi i16 [ %277, %274 ]
  %.lcssa100 = phi i16 [ %280, %274 ]
  %285 = zext i16 %.lcssa114 to i32
  %286 = zext i16 %.lcssa100 to i32
  %287 = icmp sgt i32 %285, %286
  %288 = zext i1 %287 to i32
  %289 = trunc i32 %288 to i8
  br label %505

; <label>:290:                                    ; preds = %274
  %291 = add i32 %257, 1
  %292 = add i32 %258, 1
  %293 = zext i32 %291 to i64
  %294 = getelementptr inbounds i8, i8* %2, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = zext i32 %292 to i64
  %297 = getelementptr inbounds i8, i8* %2, i64 %296
  %298 = load i8, i8* %297, align 1
  %299 = zext i8 %295 to i32
  %300 = zext i8 %298 to i32
  %301 = icmp ne i32 %299, %300
  br i1 %301, label %302, label %308

; <label>:302:                                    ; preds = %290
  %.lcssa141 = phi i8 [ %295, %290 ]
  %.lcssa128 = phi i8 [ %298, %290 ]
  %303 = zext i8 %.lcssa141 to i32
  %304 = zext i8 %.lcssa128 to i32
  %305 = icmp sgt i32 %303, %304
  %306 = zext i1 %305 to i32
  %307 = trunc i32 %306 to i8
  br label %505

; <label>:308:                                    ; preds = %290
  %309 = zext i32 %291 to i64
  %310 = getelementptr inbounds i16, i16* %3, i64 %309
  %311 = load i16, i16* %310, align 2
  %312 = zext i32 %292 to i64
  %313 = getelementptr inbounds i16, i16* %3, i64 %312
  %314 = load i16, i16* %313, align 2
  %315 = zext i16 %311 to i32
  %316 = zext i16 %314 to i32
  %317 = icmp ne i32 %315, %316
  br i1 %317, label %318, label %324

; <label>:318:                                    ; preds = %308
  %.lcssa166 = phi i16 [ %311, %308 ]
  %.lcssa154 = phi i16 [ %314, %308 ]
  %319 = zext i16 %.lcssa166 to i32
  %320 = zext i16 %.lcssa154 to i32
  %321 = icmp sgt i32 %319, %320
  %322 = zext i1 %321 to i32
  %323 = trunc i32 %322 to i8
  br label %505

; <label>:324:                                    ; preds = %308
  %325 = add i32 %291, 1
  %326 = add i32 %292, 1
  %327 = zext i32 %325 to i64
  %328 = getelementptr inbounds i8, i8* %2, i64 %327
  %329 = load i8, i8* %328, align 1
  %330 = zext i32 %326 to i64
  %331 = getelementptr inbounds i8, i8* %2, i64 %330
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %329 to i32
  %334 = zext i8 %332 to i32
  %335 = icmp ne i32 %333, %334
  br i1 %335, label %336, label %342

; <label>:336:                                    ; preds = %324
  %.lcssa189 = phi i8 [ %329, %324 ]
  %.lcssa178 = phi i8 [ %332, %324 ]
  %337 = zext i8 %.lcssa189 to i32
  %338 = zext i8 %.lcssa178 to i32
  %339 = icmp sgt i32 %337, %338
  %340 = zext i1 %339 to i32
  %341 = trunc i32 %340 to i8
  br label %505

; <label>:342:                                    ; preds = %324
  %343 = zext i32 %325 to i64
  %344 = getelementptr inbounds i16, i16* %3, i64 %343
  %345 = load i16, i16* %344, align 2
  %346 = zext i32 %326 to i64
  %347 = getelementptr inbounds i16, i16* %3, i64 %346
  %348 = load i16, i16* %347, align 2
  %349 = zext i16 %345 to i32
  %350 = zext i16 %348 to i32
  %351 = icmp ne i32 %349, %350
  br i1 %351, label %352, label %358

; <label>:352:                                    ; preds = %342
  %.lcssa210 = phi i16 [ %345, %342 ]
  %.lcssa200 = phi i16 [ %348, %342 ]
  %353 = zext i16 %.lcssa210 to i32
  %354 = zext i16 %.lcssa200 to i32
  %355 = icmp sgt i32 %353, %354
  %356 = zext i1 %355 to i32
  %357 = trunc i32 %356 to i8
  br label %505

; <label>:358:                                    ; preds = %342
  %359 = add i32 %325, 1
  %360 = add i32 %326, 1
  %361 = zext i32 %359 to i64
  %362 = getelementptr inbounds i8, i8* %2, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i32 %360 to i64
  %365 = getelementptr inbounds i8, i8* %2, i64 %364
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %363 to i32
  %368 = zext i8 %366 to i32
  %369 = icmp ne i32 %367, %368
  br i1 %369, label %370, label %376

; <label>:370:                                    ; preds = %358
  %.lcssa229 = phi i8 [ %363, %358 ]
  %.lcssa220 = phi i8 [ %366, %358 ]
  %371 = zext i8 %.lcssa229 to i32
  %372 = zext i8 %.lcssa220 to i32
  %373 = icmp sgt i32 %371, %372
  %374 = zext i1 %373 to i32
  %375 = trunc i32 %374 to i8
  br label %505

; <label>:376:                                    ; preds = %358
  %377 = zext i32 %359 to i64
  %378 = getelementptr inbounds i16, i16* %3, i64 %377
  %379 = load i16, i16* %378, align 2
  %380 = zext i32 %360 to i64
  %381 = getelementptr inbounds i16, i16* %3, i64 %380
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %379 to i32
  %384 = zext i16 %382 to i32
  %385 = icmp ne i32 %383, %384
  br i1 %385, label %386, label %392

; <label>:386:                                    ; preds = %376
  %.lcssa246 = phi i16 [ %379, %376 ]
  %.lcssa238 = phi i16 [ %382, %376 ]
  %387 = zext i16 %.lcssa246 to i32
  %388 = zext i16 %.lcssa238 to i32
  %389 = icmp sgt i32 %387, %388
  %390 = zext i1 %389 to i32
  %391 = trunc i32 %390 to i8
  br label %505

; <label>:392:                                    ; preds = %376
  %393 = add i32 %359, 1
  %394 = add i32 %360, 1
  %395 = zext i32 %393 to i64
  %396 = getelementptr inbounds i8, i8* %2, i64 %395
  %397 = load i8, i8* %396, align 1
  %398 = zext i32 %394 to i64
  %399 = getelementptr inbounds i8, i8* %2, i64 %398
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %397 to i32
  %402 = zext i8 %400 to i32
  %403 = icmp ne i32 %401, %402
  br i1 %403, label %404, label %410

; <label>:404:                                    ; preds = %392
  %.lcssa261 = phi i8 [ %397, %392 ]
  %.lcssa254 = phi i8 [ %400, %392 ]
  %405 = zext i8 %.lcssa261 to i32
  %406 = zext i8 %.lcssa254 to i32
  %407 = icmp sgt i32 %405, %406
  %408 = zext i1 %407 to i32
  %409 = trunc i32 %408 to i8
  br label %505

; <label>:410:                                    ; preds = %392
  %411 = zext i32 %393 to i64
  %412 = getelementptr inbounds i16, i16* %3, i64 %411
  %413 = load i16, i16* %412, align 2
  %414 = zext i32 %394 to i64
  %415 = getelementptr inbounds i16, i16* %3, i64 %414
  %416 = load i16, i16* %415, align 2
  %417 = zext i16 %413 to i32
  %418 = zext i16 %416 to i32
  %419 = icmp ne i32 %417, %418
  br i1 %419, label %420, label %426

; <label>:420:                                    ; preds = %410
  %.lcssa274 = phi i16 [ %413, %410 ]
  %.lcssa268 = phi i16 [ %416, %410 ]
  %421 = zext i16 %.lcssa274 to i32
  %422 = zext i16 %.lcssa268 to i32
  %423 = icmp sgt i32 %421, %422
  %424 = zext i1 %423 to i32
  %425 = trunc i32 %424 to i8
  br label %505

; <label>:426:                                    ; preds = %410
  %427 = add i32 %393, 1
  %428 = add i32 %394, 1
  %429 = zext i32 %427 to i64
  %430 = getelementptr inbounds i8, i8* %2, i64 %429
  %431 = load i8, i8* %430, align 1
  %432 = zext i32 %428 to i64
  %433 = getelementptr inbounds i8, i8* %2, i64 %432
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %431 to i32
  %436 = zext i8 %434 to i32
  %437 = icmp ne i32 %435, %436
  br i1 %437, label %438, label %444

; <label>:438:                                    ; preds = %426
  %.lcssa285 = phi i8 [ %431, %426 ]
  %.lcssa280 = phi i8 [ %434, %426 ]
  %439 = zext i8 %.lcssa285 to i32
  %440 = zext i8 %.lcssa280 to i32
  %441 = icmp sgt i32 %439, %440
  %442 = zext i1 %441 to i32
  %443 = trunc i32 %442 to i8
  br label %505

; <label>:444:                                    ; preds = %426
  %445 = zext i32 %427 to i64
  %446 = getelementptr inbounds i16, i16* %3, i64 %445
  %447 = load i16, i16* %446, align 2
  %448 = zext i32 %428 to i64
  %449 = getelementptr inbounds i16, i16* %3, i64 %448
  %450 = load i16, i16* %449, align 2
  %451 = zext i16 %447 to i32
  %452 = zext i16 %450 to i32
  %453 = icmp ne i32 %451, %452
  br i1 %453, label %454, label %460

; <label>:454:                                    ; preds = %444
  %.lcssa294 = phi i16 [ %447, %444 ]
  %.lcssa290 = phi i16 [ %450, %444 ]
  %455 = zext i16 %.lcssa294 to i32
  %456 = zext i16 %.lcssa290 to i32
  %457 = icmp sgt i32 %455, %456
  %458 = zext i1 %457 to i32
  %459 = trunc i32 %458 to i8
  br label %505

; <label>:460:                                    ; preds = %444
  %461 = add i32 %427, 1
  %462 = add i32 %428, 1
  %463 = zext i32 %461 to i64
  %464 = getelementptr inbounds i8, i8* %2, i64 %463
  %465 = load i8, i8* %464, align 1
  %466 = zext i32 %462 to i64
  %467 = getelementptr inbounds i8, i8* %2, i64 %466
  %468 = load i8, i8* %467, align 1
  %469 = zext i8 %465 to i32
  %470 = zext i8 %468 to i32
  %471 = icmp ne i32 %469, %470
  br i1 %471, label %472, label %478

; <label>:472:                                    ; preds = %460
  %.lcssa301 = phi i8 [ %465, %460 ]
  %.lcssa298 = phi i8 [ %468, %460 ]
  %473 = zext i8 %.lcssa301 to i32
  %474 = zext i8 %.lcssa298 to i32
  %475 = icmp sgt i32 %473, %474
  %476 = zext i1 %475 to i32
  %477 = trunc i32 %476 to i8
  br label %505

; <label>:478:                                    ; preds = %460
  %479 = zext i32 %461 to i64
  %480 = getelementptr inbounds i16, i16* %3, i64 %479
  %481 = load i16, i16* %480, align 2
  %482 = zext i32 %462 to i64
  %483 = getelementptr inbounds i16, i16* %3, i64 %482
  %484 = load i16, i16* %483, align 2
  %485 = zext i16 %481 to i32
  %486 = zext i16 %484 to i32
  %487 = icmp ne i32 %485, %486
  br i1 %487, label %488, label %494

; <label>:488:                                    ; preds = %478
  %.lcssa306 = phi i16 [ %481, %478 ]
  %.lcssa304 = phi i16 [ %484, %478 ]
  %489 = zext i16 %.lcssa306 to i32
  %490 = zext i16 %.lcssa304 to i32
  %491 = icmp sgt i32 %489, %490
  %492 = zext i1 %491 to i32
  %493 = trunc i32 %492 to i8
  br label %505

; <label>:494:                                    ; preds = %478
  %495 = add i32 %461, 1
  %496 = add i32 %462, 1
  %497 = icmp uge i32 %495, %4
  %498 = sub i32 %495, %4
  %spec.select = select i1 %497, i32 %498, i32 %495
  %499 = icmp uge i32 %496, %4
  %500 = sub i32 %496, %4
  %.13 = select i1 %499, i32 %500, i32 %496
  %501 = sub nsw i32 %.04, 8
  %502 = load i32, i32* %5, align 4
  %503 = add nsw i32 %502, -1
  store i32 %503, i32* %5, align 4
  %504 = icmp sge i32 %501, 0
  br i1 %504, label %224, label %.loopexit

.loopexit:                                        ; preds = %494
  %.0.ph = phi i8 [ 0, %494 ]
  br label %505

; <label>:505:                                    ; preds = %.loopexit, %488, %472, %454, %438, %420, %404, %386, %370, %352, %336, %318, %302, %284, %268, %250, %234, %214, %196, %178, %160, %142, %124, %106, %88, %70, %52, %34, %16
  %.0 = phi i8 [ %21, %16 ], [ %39, %34 ], [ %57, %52 ], [ %75, %70 ], [ %93, %88 ], [ %111, %106 ], [ %129, %124 ], [ %147, %142 ], [ %165, %160 ], [ %183, %178 ], [ %201, %196 ], [ %219, %214 ], [ %239, %234 ], [ %255, %250 ], [ %273, %268 ], [ %289, %284 ], [ %307, %302 ], [ %323, %318 ], [ %341, %336 ], [ %357, %352 ], [ %375, %370 ], [ %391, %386 ], [ %409, %404 ], [ %425, %420 ], [ %443, %438 ], [ %459, %454 ], [ %477, %472 ], [ %493, %488 ], [ %.0.ph, %.loopexit ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @fallbackQSort3(i32*, i32*, i32, i32) #0 {
  %5 = alloca [100 x i32], align 16
  %6 = alloca [100 x i32], align 16
  %7 = sext i32 0 to i64
  %8 = getelementptr inbounds [100 x i32], [100 x i32]* %5, i64 0, i64 %7
  store i32 %2, i32* %8, align 4
  %9 = sext i32 0 to i64
  %10 = getelementptr inbounds [100 x i32], [100 x i32]* %6, i64 0, i64 %9
  store i32 %3, i32* %10, align 4
  %11 = add nsw i32 0, 1
  br label %.lr.ph

.lr.ph:                                           ; preds = %4, %.outer39.backedge
  %.011.ph95 = phi i32 [ %11, %4 ], [ %.011.ph.be, %.outer39.backedge ]
  %.017.ph94 = phi i32 [ 0, %4 ], [ %29, %.outer39.backedge ]
  call void @unroll_loop(i32 152)
  %12 = sext i32 %.011.ph95 to i64
  br label %13

; <label>:13:                                     ; preds = %.lr.ph, %23
  %indvars.iv = phi i64 [ %12, %.lr.ph ], [ %indvars.iv.next, %23 ]
  call void @unroll_loop(i32 205)
  %14 = icmp slt i64 %indvars.iv, 99
  br i1 %14, label %16, label %15

; <label>:15:                                     ; preds = %13
  call void @BZ2_bz__AssertH__fail(i32 1004)
  br label %16

; <label>:16:                                     ; preds = %15, %13
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %17 = getelementptr inbounds [100 x i32], [100 x i32]* %5, i64 0, i64 %indvars.iv.next
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds [100 x i32], [100 x i32]* %6, i64 0, i64 %indvars.iv.next
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 %20, %18
  %22 = icmp slt i32 %21, 10
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %16
  call void @fallbackSimpleSort(i32* %0, i32* %1, i32 %18, i32 %20)
  %24 = icmp sgt i64 %indvars.iv.next, 0
  br i1 %24, label %13, label %.outer39._crit_edge.loopexit

; <label>:25:                                     ; preds = %16
  %.lcssa42.wide = phi i64 [ %indvars.iv.next, %16 ]
  %.lcssa41 = phi i32 [ %18, %16 ]
  %.lcssa = phi i32 [ %20, %16 ]
  %26 = trunc i64 %.lcssa42.wide to i32
  %27 = mul nuw i32 %.017.ph94, 7621
  %28 = add i32 %27, 1
  %29 = urem i32 %28, 32768
  %30 = urem i32 %29, 3
  switch i32 %30, label %47 [
    i32 0, label %31
    i32 1, label %38
  ]

; <label>:31:                                     ; preds = %25
  %32 = sext i32 %.lcssa41 to i64
  %33 = getelementptr inbounds i32, i32* %0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i32, i32* %1, i64 %35
  %37 = load i32, i32* %36, align 4
  br label %54

; <label>:38:                                     ; preds = %25
  %39 = add nsw i32 %.lcssa41, %.lcssa
  %40 = ashr i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %1, i64 %44
  %46 = load i32, i32* %45, align 4
  br label %54

; <label>:47:                                     ; preds = %25
  %48 = sext i32 %.lcssa to i64
  %49 = getelementptr inbounds i32, i32* %0, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %1, i64 %51
  %53 = load i32, i32* %52, align 4
  br label %54

; <label>:54:                                     ; preds = %38, %47, %31
  %.116 = phi i32 [ %37, %31 ], [ %46, %38 ], [ %53, %47 ]
  br label %55

; <label>:55:                                     ; preds = %54, %123
  %.09 = phi i32 [ %.lcssa, %54 ], [ %.11025, %123 ]
  %.07 = phi i32 [ %.lcssa41, %54 ], [ %.1821, %123 ]
  %.05 = phi i32 [ %.lcssa, %54 ], [ %135, %123 ]
  %.04 = phi i32 [ %.lcssa41, %54 ], [ %134, %123 ]
  call void @unroll_loop(i32 206)
  %56 = sext i32 %.05 to i64
  %57 = icmp sgt i32 %.04, %.05
  br i1 %57, label %.outer32._crit_edge, label %.lr.ph45.lr.ph

.lr.ph45.lr.ph:                                   ; preds = %55
  %58 = sext i32 %.07 to i64
  br label %.lr.ph45

.lr.ph45:                                         ; preds = %.lr.ph45.lr.ph, %.outer32
  %indvars.iv56 = phi i64 [ %58, %.lr.ph45.lr.ph ], [ %indvars.iv.next57, %.outer32 ]
  %.1.ph53 = phi i32 [ %.04, %.lr.ph45.lr.ph ], [ %80, %.outer32 ]
  call void @unroll_loop(i32 193)
  %59 = sext i32 %.1.ph53 to i64
  br label %63

.outer32..outer32._crit_edge_crit_edge:           ; preds = %.outer32
  %split54.wide = phi i64 [ %indvars.iv.next57, %.outer32 ]
  %split55 = phi i32 [ %80, %.outer32 ]
  %60 = trunc i64 %split54.wide to i32
  br label %.outer32._crit_edge

._crit_edge47:                                    ; preds = %87
  %split48.wide = phi i64 [ %indvars.iv56, %87 ]
  %split49.wide = phi i64 [ %indvars.iv.next51, %87 ]
  %61 = trunc i64 %split48.wide to i32
  %62 = trunc i64 %split49.wide to i32
  br label %.outer32._crit_edge

; <label>:63:                                     ; preds = %.lr.ph45, %87
  %indvars.iv50 = phi i64 [ %59, %.lr.ph45 ], [ %indvars.iv.next51, %87 ]
  call void @unroll_loop(i32 207)
  %64 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv50
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %1, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = sub nsw i32 %68, %.116
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %.outer32, label %82

.outer32:                                         ; preds = %63
  %.1.lcssa34.wide = phi i64 [ %indvars.iv50, %63 ]
  %71 = trunc i64 %.1.lcssa34.wide to i32
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %0, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv56
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %71 to i64
  %78 = getelementptr inbounds i32, i32* %0, i64 %77
  store i32 %76, i32* %78, align 4
  %79 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv56
  store i32 %74, i32* %79, align 4
  %indvars.iv.next57 = add i64 %indvars.iv56, 1
  %80 = add nsw i32 %71, 1
  %81 = icmp sgt i32 %80, %.05
  br i1 %81, label %.outer32..outer32._crit_edge_crit_edge, label %.lr.ph45

; <label>:82:                                     ; preds = %63
  %83 = icmp sgt i32 %69, 0
  br i1 %83, label %84, label %87

; <label>:84:                                     ; preds = %82
  %.18.lcssa20.wide = phi i64 [ %indvars.iv56, %82 ]
  %.1.lcssa18.wide = phi i64 [ %indvars.iv50, %82 ]
  %85 = trunc i64 %.18.lcssa20.wide to i32
  %86 = trunc i64 %.1.lcssa18.wide to i32
  br label %.outer32._crit_edge

; <label>:87:                                     ; preds = %82
  %indvars.iv.next51 = add nsw i64 %indvars.iv50, 1
  %88 = icmp sgt i64 %indvars.iv.next51, %56
  br i1 %88, label %._crit_edge47, label %63

.outer32._crit_edge:                              ; preds = %._crit_edge47, %.outer32..outer32._crit_edge_crit_edge, %55, %84
  %.1821 = phi i32 [ %85, %84 ], [ %61, %._crit_edge47 ], [ %60, %.outer32..outer32._crit_edge_crit_edge ], [ %.07, %55 ]
  %.119 = phi i32 [ %86, %84 ], [ %62, %._crit_edge47 ], [ %split55, %.outer32..outer32._crit_edge_crit_edge ], [ %.04, %55 ]
  %89 = sext i32 %.119 to i64
  %90 = icmp sgt i32 %.119, %.05
  br i1 %90, label %.outer._crit_edge, label %.lr.ph59.lr.ph

.lr.ph59.lr.ph:                                   ; preds = %.outer32._crit_edge
  %91 = sext i32 %.09 to i64
  br label %.lr.ph59

.lr.ph59:                                         ; preds = %.lr.ph59.lr.ph, %.outer
  %indvars.iv71 = phi i64 [ %91, %.lr.ph59.lr.ph ], [ %indvars.iv.next72, %.outer ]
  %.16.ph68 = phi i32 [ %.05, %.lr.ph59.lr.ph ], [ %113, %.outer ]
  call void @unroll_loop(i32 155)
  %92 = sext i32 %.16.ph68 to i64
  br label %96

.outer..outer._crit_edge_crit_edge:               ; preds = %.outer
  %split69.wide = phi i64 [ %indvars.iv.next72, %.outer ]
  %split70 = phi i32 [ %113, %.outer ]
  %93 = trunc i64 %split69.wide to i32
  br label %.outer._crit_edge

._crit_edge62:                                    ; preds = %120
  %split63.wide = phi i64 [ %indvars.iv71, %120 ]
  %split64.wide = phi i64 [ %indvars.iv.next66, %120 ]
  %94 = trunc i64 %split63.wide to i32
  %95 = trunc i64 %split64.wide to i32
  br label %.outer._crit_edge

; <label>:96:                                     ; preds = %.lr.ph59, %120
  %indvars.iv65 = phi i64 [ %92, %.lr.ph59 ], [ %indvars.iv.next66, %120 ]
  call void @unroll_loop(i32 208)
  %97 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv65
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %1, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = sub nsw i32 %101, %.116
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %.outer, label %115

.outer:                                           ; preds = %96
  %.16.lcssa27.wide = phi i64 [ %indvars.iv65, %96 ]
  %104 = trunc i64 %.16.lcssa27.wide to i32
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i32, i32* %0, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv71
  %109 = load i32, i32* %108, align 4
  %110 = sext i32 %104 to i64
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  store i32 %109, i32* %111, align 4
  %112 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv71
  store i32 %107, i32* %112, align 4
  %indvars.iv.next72 = add i64 %indvars.iv71, -1
  %113 = add nsw i32 %104, -1
  %114 = icmp sgt i32 %.119, %113
  br i1 %114, label %.outer..outer._crit_edge_crit_edge, label %.lr.ph59

; <label>:115:                                    ; preds = %96
  %116 = icmp slt i32 %102, 0
  br i1 %116, label %117, label %120

; <label>:117:                                    ; preds = %115
  %.110.lcssa24.wide = phi i64 [ %indvars.iv71, %115 ]
  %.16.lcssa22.wide = phi i64 [ %indvars.iv65, %115 ]
  %118 = trunc i64 %.110.lcssa24.wide to i32
  %119 = trunc i64 %.16.lcssa22.wide to i32
  br label %.outer._crit_edge

; <label>:120:                                    ; preds = %115
  %indvars.iv.next66 = add nsw i64 %indvars.iv65, -1
  %121 = icmp sgt i64 %89, %indvars.iv.next66
  br i1 %121, label %._crit_edge62, label %96

.outer._crit_edge:                                ; preds = %._crit_edge62, %.outer..outer._crit_edge_crit_edge, %.outer32._crit_edge, %117
  %.11025 = phi i32 [ %118, %117 ], [ %94, %._crit_edge62 ], [ %93, %.outer..outer._crit_edge_crit_edge ], [ %.09, %.outer32._crit_edge ]
  %.1623 = phi i32 [ %119, %117 ], [ %95, %._crit_edge62 ], [ %split70, %.outer..outer._crit_edge_crit_edge ], [ %.05, %.outer32._crit_edge ]
  %122 = icmp sgt i32 %.119, %.1623
  br i1 %122, label %136, label %123

; <label>:123:                                    ; preds = %.outer._crit_edge
  %124 = sext i32 %.119 to i64
  %125 = getelementptr inbounds i32, i32* %0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = sext i32 %.1623 to i64
  %128 = getelementptr inbounds i32, i32* %0, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = sext i32 %.119 to i64
  %131 = getelementptr inbounds i32, i32* %0, i64 %130
  store i32 %129, i32* %131, align 4
  %132 = sext i32 %.1623 to i64
  %133 = getelementptr inbounds i32, i32* %0, i64 %132
  store i32 %126, i32* %133, align 4
  %134 = add nsw i32 %.119, 1
  %135 = add nsw i32 %.1623, -1
  br label %55

; <label>:136:                                    ; preds = %.outer._crit_edge
  %.11025.lcssa = phi i32 [ %.11025, %.outer._crit_edge ]
  %.1623.lcssa = phi i32 [ %.1623, %.outer._crit_edge ]
  %.1821.lcssa = phi i32 [ %.1821, %.outer._crit_edge ]
  %.119.lcssa = phi i32 [ %.119, %.outer._crit_edge ]
  %137 = icmp slt i32 %.11025.lcssa, %.1821.lcssa
  br i1 %137, label %.outer39.backedge, label %139

.outer39.backedge:                                ; preds = %201, %210, %136
  %.011.ph.be = phi i32 [ %26, %136 ], [ %209, %201 ], [ %218, %210 ]
  %138 = icmp sgt i32 %.011.ph.be, 0
  br i1 %138, label %.lr.ph, label %.outer39._crit_edge.loopexit1

; <label>:139:                                    ; preds = %136
  %140 = sub nsw i32 %.1821.lcssa, %.lcssa41
  %141 = sub nsw i32 %.119.lcssa, %.1821.lcssa
  %142 = icmp slt i32 %140, %141
  %143 = sub nsw i32 %.1821.lcssa, %.lcssa41
  %144 = sub nsw i32 %.119.lcssa, %.1821.lcssa
  %145 = select i1 %142, i32 %143, i32 %144
  %146 = icmp sgt i32 %145, 0
  br i1 %146, label %.lr.ph77, label %._crit_edge78

.lr.ph77:                                         ; preds = %139
  %147 = add i32 %.119.lcssa, 1
  %148 = add i32 %.lcssa41, -1
  %149 = sub i32 %148, %.1821.lcssa
  %150 = add i32 %.1821.lcssa, -1
  %151 = sub i32 %150, %.119.lcssa
  %152 = icmp sgt i32 %149, %151
  %smax = select i1 %152, i32 %149, i32 %151
  %153 = add i32 %147, %smax
  %154 = sext i32 %153 to i64
  %155 = sext i32 %.lcssa41 to i64
  br label %156

; <label>:156:                                    ; preds = %.lr.ph77, %156
  %indvars.iv81 = phi i64 [ %155, %.lr.ph77 ], [ %indvars.iv.next82, %156 ]
  %indvars.iv79 = phi i64 [ %154, %.lr.ph77 ], [ %indvars.iv.next80, %156 ]
  %.0375 = phi i32 [ %145, %.lr.ph77 ], [ %163, %156 ]
  call void @unroll_loop(i32 209)
  %157 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv81
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv79
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv81
  store i32 %160, i32* %161, align 4
  %162 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv79
  store i32 %158, i32* %162, align 4
  %indvars.iv.next82 = add nsw i64 %indvars.iv81, 1
  %indvars.iv.next80 = add nsw i64 %indvars.iv79, 1
  %163 = add nsw i32 %.0375, -1
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %156, label %._crit_edge78.loopexit

._crit_edge78.loopexit:                           ; preds = %156
  br label %._crit_edge78

._crit_edge78:                                    ; preds = %._crit_edge78.loopexit, %139
  %165 = sub nsw i32 %.lcssa, %.11025.lcssa
  %166 = sub nsw i32 %.11025.lcssa, %.1623.lcssa
  %167 = icmp slt i32 %165, %166
  %168 = sub nsw i32 %.lcssa, %.11025.lcssa
  %169 = sub nsw i32 %.11025.lcssa, %.1623.lcssa
  %170 = select i1 %167, i32 %168, i32 %169
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %.lr.ph87, label %._crit_edge88

.lr.ph87:                                         ; preds = %._crit_edge78
  %172 = add i32 %.lcssa, 2
  %173 = add i32 %.11025.lcssa, -1
  %174 = sub i32 %173, %.lcssa
  %175 = add i32 %.1623.lcssa, -1
  %176 = sub i32 %175, %.11025.lcssa
  %177 = icmp sgt i32 %174, %176
  %smax89 = select i1 %177, i32 %174, i32 %176
  %178 = add i32 %172, %smax89
  %179 = sext i32 %178 to i64
  %180 = sext i32 %.119.lcssa to i64
  br label %181

; <label>:181:                                    ; preds = %.lr.ph87, %181
  %indvars.iv92 = phi i64 [ %180, %.lr.ph87 ], [ %indvars.iv.next93, %181 ]
  %indvars.iv90 = phi i64 [ %179, %.lr.ph87 ], [ %indvars.iv.next91, %181 ]
  %.085 = phi i32 [ %170, %.lr.ph87 ], [ %188, %181 ]
  call void @unroll_loop(i32 210)
  %182 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv92
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv90
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv92
  store i32 %185, i32* %186, align 4
  %187 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv90
  store i32 %183, i32* %187, align 4
  %indvars.iv.next93 = add nsw i64 %indvars.iv92, 1
  %indvars.iv.next91 = add nsw i64 %indvars.iv90, 1
  %188 = add nsw i32 %.085, -1
  %189 = icmp sgt i32 %188, 0
  br i1 %189, label %181, label %._crit_edge88.loopexit

._crit_edge88.loopexit:                           ; preds = %181
  br label %._crit_edge88

._crit_edge88:                                    ; preds = %._crit_edge88.loopexit, %._crit_edge78
  %190 = add nsw i32 %.lcssa41, %.119.lcssa
  %191 = sub nsw i32 %190, %.1821.lcssa
  %192 = sub nsw i32 %191, 1
  %193 = sub nsw i32 %.11025.lcssa, %.1623.lcssa
  %194 = sub nsw i32 %.lcssa, %193
  %195 = add nsw i32 %194, 1
  %196 = sub nsw i32 %192, %.lcssa41
  %197 = sub nsw i32 %.lcssa, %195
  %198 = icmp sgt i32 %196, %197
  %199 = sext i32 %26 to i64
  %200 = getelementptr inbounds [100 x i32], [100 x i32]* %5, i64 0, i64 %199
  br i1 %198, label %201, label %210

; <label>:201:                                    ; preds = %._crit_edge88
  store i32 %.lcssa41, i32* %200, align 4
  %202 = sext i32 %26 to i64
  %203 = getelementptr inbounds [100 x i32], [100 x i32]* %6, i64 0, i64 %202
  store i32 %192, i32* %203, align 4
  %204 = add nsw i32 %26, 1
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [100 x i32], [100 x i32]* %5, i64 0, i64 %205
  store i32 %195, i32* %206, align 4
  %207 = sext i32 %204 to i64
  %208 = getelementptr inbounds [100 x i32], [100 x i32]* %6, i64 0, i64 %207
  store i32 %.lcssa, i32* %208, align 4
  %209 = add nsw i32 %204, 1
  br label %.outer39.backedge

; <label>:210:                                    ; preds = %._crit_edge88
  store i32 %195, i32* %200, align 4
  %211 = sext i32 %26 to i64
  %212 = getelementptr inbounds [100 x i32], [100 x i32]* %6, i64 0, i64 %211
  store i32 %.lcssa, i32* %212, align 4
  %213 = add nsw i32 %26, 1
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds [100 x i32], [100 x i32]* %5, i64 0, i64 %214
  store i32 %.lcssa41, i32* %215, align 4
  %216 = sext i32 %213 to i64
  %217 = getelementptr inbounds [100 x i32], [100 x i32]* %6, i64 0, i64 %216
  store i32 %192, i32* %217, align 4
  %218 = add nsw i32 %213, 1
  br label %.outer39.backedge

.outer39._crit_edge.loopexit:                     ; preds = %23
  br label %.outer39._crit_edge

.outer39._crit_edge.loopexit1:                    ; preds = %.outer39.backedge
  br label %.outer39._crit_edge

.outer39._crit_edge:                              ; preds = %.outer39._crit_edge.loopexit1, %.outer39._crit_edge.loopexit
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @fallbackSimpleSort(i32*, i32*, i32, i32) #0 {
  %5 = icmp eq i32 %2, %3
  br i1 %5, label %.loopexit, label %6

; <label>:6:                                      ; preds = %4
  %7 = sub nsw i32 %3, %2
  %8 = icmp sgt i32 %7, 3
  br i1 %8, label %9, label %._crit_edge

; <label>:9:                                      ; preds = %6
  %10 = sub nsw i32 %3, 4
  %11 = sext i32 %3 to i64
  %12 = sext i32 %3 to i64
  %13 = icmp sge i32 %10, %2
  br i1 %13, label %.lr.ph14, label %._crit_edge

.lr.ph14:                                         ; preds = %9
  %14 = add i32 %3, -4
  %15 = sext i32 %14 to i64
  %16 = sext i32 %2 to i64
  br label %17

; <label>:17:                                     ; preds = %.lr.ph14, %.critedge
  %indvars.iv15 = phi i64 [ %15, %.lr.ph14 ], [ %indvars.iv.next16, %.critedge ]
  %18 = phi i64 [ %12, %.lr.ph14 ], [ %42, %.critedge ]
  %indvars.iv812 = phi i32 [ %3, %.lr.ph14 ], [ %indvars.iv.next9, %.critedge ]
  call void @unroll_loop(i32 211)
  %19 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv15
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %1, i64 %21
  %23 = load i32, i32* %22, align 4
  call void @unroll_loop(i32 212)
  %24 = icmp sle i64 %18, %11
  br i1 %24, label %.lr.ph9, label %.critedge

.lr.ph9:                                          ; preds = %17
  br label %25

; <label>:25:                                     ; preds = %.lr.ph9, %32
  %indvars.iv107 = phi i64 [ %18, %.lr.ph9 ], [ %indvars.iv.next11, %32 ]
  %26 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv107
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32* %1, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = icmp ugt i32 %23, %30
  br i1 %31, label %32, label %..critedge_crit_edge11

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv107
  %34 = load i32, i32* %33, align 4
  %35 = sub nsw i64 %indvars.iv107, 4
  %36 = getelementptr inbounds i32, i32* %0, i64 %35
  store i32 %34, i32* %36, align 4
  %indvars.iv.next11 = add nsw i64 %indvars.iv107, 4
  call void @unroll_loop(i32 212)
  %37 = icmp sle i64 %indvars.iv.next11, %11
  br i1 %37, label %25, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %32
  %split10 = phi i64 [ %indvars.iv.next11, %32 ]
  br label %.critedge

..critedge_crit_edge11:                           ; preds = %25
  %split12 = phi i64 [ %indvars.iv107, %25 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge11, %..critedge_crit_edge, %17
  %.0.lcssa.wide = phi i64 [ %split12, %..critedge_crit_edge11 ], [ %split10, %..critedge_crit_edge ], [ %18, %17 ]
  %38 = trunc i64 %.0.lcssa.wide to i32
  %39 = sub nsw i32 %38, 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %0, i64 %40
  store i32 %20, i32* %41, align 4
  %indvars.iv.next16 = add nsw i64 %indvars.iv15, -1
  %indvars.iv.next9 = add i32 %indvars.iv812, -1
  %42 = sext i32 %indvars.iv.next9 to i64
  %43 = icmp sge i64 %indvars.iv.next16, %16
  br i1 %43, label %17, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.critedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9, %6
  %44 = sub nsw i32 %3, 1
  %45 = sext i32 %3 to i64
  %46 = sext i32 %3 to i64
  %47 = icmp sge i32 %44, %2
  br i1 %47, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %._crit_edge
  %48 = add i32 %3, -1
  %49 = sext i32 %48 to i64
  %50 = sext i32 %2 to i64
  br label %51

; <label>:51:                                     ; preds = %.lr.ph, %.critedge1
  %indvars.iv = phi i64 [ %49, %.lr.ph ], [ %indvars.iv.next7, %.critedge1 ]
  %52 = phi i64 [ %46, %.lr.ph ], [ %76, %.critedge1 ]
  %indvars.iv5 = phi i32 [ %3, %.lr.ph ], [ %indvars.iv.next, %.critedge1 ]
  call void @unroll_loop(i32 213)
  %53 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %1, i64 %55
  %57 = load i32, i32* %56, align 4
  call void @unroll_loop(i32 214)
  %58 = icmp sle i64 %52, %45
  br i1 %58, label %.lr.ph4, label %.critedge1

.lr.ph4:                                          ; preds = %51
  br label %59

; <label>:59:                                     ; preds = %.lr.ph4, %66
  %indvars.iv32 = phi i64 [ %52, %.lr.ph4 ], [ %indvars.iv.next4, %66 ]
  %60 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv32
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %1, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp ugt i32 %57, %64
  br i1 %65, label %66, label %..critedge1_crit_edge5

; <label>:66:                                     ; preds = %59
  %67 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv32
  %68 = load i32, i32* %67, align 4
  %69 = sub nsw i64 %indvars.iv32, 1
  %70 = getelementptr inbounds i32, i32* %0, i64 %69
  store i32 %68, i32* %70, align 4
  %indvars.iv.next4 = add nsw i64 %indvars.iv32, 1
  call void @unroll_loop(i32 214)
  %71 = icmp sle i64 %indvars.iv.next4, %45
  br i1 %71, label %59, label %..critedge1_crit_edge

..critedge1_crit_edge:                            ; preds = %66
  %split = phi i64 [ %indvars.iv.next4, %66 ]
  br label %.critedge1

..critedge1_crit_edge5:                           ; preds = %59
  %split6 = phi i64 [ %indvars.iv32, %59 ]
  br label %.critedge1

.critedge1:                                       ; preds = %..critedge1_crit_edge5, %..critedge1_crit_edge, %51
  %.1.lcssa.wide = phi i64 [ %split6, %..critedge1_crit_edge5 ], [ %split, %..critedge1_crit_edge ], [ %52, %51 ]
  %72 = trunc i64 %.1.lcssa.wide to i32
  %73 = sub nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %0, i64 %74
  store i32 %54, i32* %75, align 4
  %indvars.iv.next7 = add nsw i64 %indvars.iv, -1
  %indvars.iv.next = add i32 %indvars.iv5, -1
  %76 = sext i32 %indvars.iv.next to i64
  %77 = icmp sge i64 %indvars.iv.next7, %50
  br i1 %77, label %51, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.critedge1
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %._crit_edge, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_hbMakeCodeLengths(i8*, i32*, i32, i32) #0 {
  %5 = alloca [260 x i32], align 16
  %6 = alloca [516 x i32], align 16, !track !69
  %7 = alloca [516 x i32], align 16
  %8 = icmp slt i32 0, %2
  br i1 %8, label %.lr.ph78.preheader, label %._crit_edge79

.lr.ph78.preheader:                               ; preds = %4
  %9 = zext i32 %2 to i64
  br label %.lr.ph78

.lr.ph78:                                         ; preds = %.lr.ph78.preheader, %16
  %indvars.iv80 = phi i64 [ %indvars.iv.next81, %16 ], [ 0, %.lr.ph78.preheader ]
  call void @unroll_loop(i32 215)
  %10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv80
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %.lr.ph78
  %14 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv80
  %15 = load i32, i32* %14, align 4
  br label %16

; <label>:16:                                     ; preds = %.lr.ph78, %13
  %17 = phi i32 [ %15, %13 ], [ 1, %.lr.ph78 ]
  %18 = shl i32 %17, 8
  %indvars.iv.next81 = add nuw nsw i64 %indvars.iv80, 1
  %19 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %indvars.iv.next81
  store i32 %18, i32* %19, align 4
  %exitcond5 = icmp ne i64 %indvars.iv.next81, %9
  br i1 %exitcond5, label %.lr.ph78, label %._crit_edge79.loopexit

._crit_edge79.loopexit:                           ; preds = %16
  br label %._crit_edge79

._crit_edge79:                                    ; preds = %._crit_edge79.loopexit, %4
  %20 = add i32 %2, -1
  %21 = zext i32 %20 to i64
  %22 = add i64 %21, 1
  %23 = sext i32 %2 to i64
  %24 = add i64 %23, 1
  %25 = add i32 %2, 1
  %26 = zext i32 %2 to i64
  %27 = zext i32 %25 to i64
  %28 = zext i32 %25 to i64
  br label %29

; <label>:29:                                     ; preds = %._crit_edge79, %._crit_edge71
  call void @unroll_loop(i32 216)
  %30 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 0
  store i32 0, i32* %30, align 16
  %31 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 0
  store i32 0, i32* %31, align 16
  %32 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 0
  store i32 -2, i32* %32, align 16
  %33 = icmp sle i32 1, %2
  br i1 %33, label %.lr.ph22.preheader, label %73

.lr.ph22.preheader:                               ; preds = %29
  br label %.lr.ph22

.lr.ph22:                                         ; preds = %.lr.ph22.preheader, %._crit_edge
  %indvars.iv25 = phi i64 [ %indvars.iv.next26, %._crit_edge ], [ 1, %.lr.ph22.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge ], [ 0, %.lr.ph22.preheader ]
  call void @unroll_loop(i32 217)
  %34 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 %indvars.iv25
  store i32 -1, i32* %34, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %35 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %indvars.iv.next
  %36 = trunc i64 %indvars.iv25 to i32
  store i32 %36, i32* %35, align 4
  %37 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %indvars.iv.next
  %38 = load i32, i32* %37, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = trunc i64 %indvars.iv.next to i32
  %43 = ashr i32 %42, 1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %41, %49
  %51 = trunc i64 %indvars.iv.next to i32
  br i1 %50, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph22
  %52 = trunc i64 %indvars.iv.next to i32
  br label %53

; <label>:53:                                     ; preds = %.lr.ph, %53
  %.0718 = phi i32 [ %52, %.lr.ph ], [ %60, %53 ]
  call void @unroll_loop(i32 218)
  %54 = ashr i32 %.0718, 1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %.0718 to i64
  %59 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %58
  store i32 %57, i32* %59, align 4
  %60 = ashr i32 %.0718, 1
  %61 = load i32, i32* %40, align 4
  %62 = ashr i32 %60, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = icmp slt i32 %61, %68
  br i1 %69, label %53, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %53
  %.07.lcssa.ph = phi i32 [ %60, %53 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph22
  %.07.lcssa = phi i32 [ %51, %.lr.ph22 ], [ %.07.lcssa.ph, %._crit_edge.loopexit ]
  %70 = sext i32 %.07.lcssa to i64
  %71 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %70
  store i32 %38, i32* %71, align 4
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1
  %exitcond3 = icmp ne i64 %indvars.iv.next, %26
  br i1 %exitcond3, label %.lr.ph22, label %._crit_edge23

._crit_edge23:                                    ; preds = %._crit_edge
  %72 = trunc i64 %22 to i32
  br label %73

; <label>:73:                                     ; preds = %._crit_edge23, %29
  %.05.lcssa = phi i32 [ %72, %._crit_edge23 ], [ 0, %29 ]
  %74 = icmp slt i32 %.05.lcssa, 260
  br i1 %74, label %76, label %75

; <label>:75:                                     ; preds = %73
  call void @BZ2_bz__AssertH__fail(i32 2001)
  br label %76

; <label>:76:                                     ; preds = %75, %73
  %77 = icmp sgt i32 %.05.lcssa, 1
  br i1 %77, label %.lr.ph45, label %263

.lr.ph45:                                         ; preds = %76
  %78 = sext i32 %.05.lcssa to i64
  %79 = add i32 %.05.lcssa, -2
  br label %80

; <label>:80:                                     ; preds = %.lr.ph45, %._crit_edge40
  %indvars.iv50 = phi i64 [ %78, %.lr.ph45 ], [ %indvars.iv.next51, %._crit_edge40 ]
  %indvars.iv48 = phi i64 [ %23, %.lr.ph45 ], [ %indvars.iv.next49, %._crit_edge40 ]
  call void @unroll_loop(i32 219)
  %81 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 1
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %indvars.iv50
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 1
  store i32 %84, i32* %85, align 4
  %indvars.iv.next51 = add nsw i64 %indvars.iv50, -1
  %86 = sext i32 1 to i64
  %87 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = icmp sgt i64 2, %indvars.iv.next51
  br i1 %89, label %._crit_edge30, label %.lr.ph29.preheader

.lr.ph29.preheader:                               ; preds = %80
  br label %.lr.ph29

.lr.ph29:                                         ; preds = %.lr.ph29.preheader, %120
  %90 = phi i32 [ %126, %120 ], [ 2, %.lr.ph29.preheader ]
  %.0627 = phi i32 [ %.03, %120 ], [ 1, %.lr.ph29.preheader ]
  call void @unroll_loop(i32 220)
  %91 = sext i32 %90 to i64
  %92 = icmp slt i64 %91, %indvars.iv.next51
  br i1 %92, label %93, label %109

; <label>:93:                                     ; preds = %.lr.ph29
  %94 = add nuw nsw i32 %90, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %90 to i64
  %102 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = icmp slt i32 %100, %106
  %108 = add nuw nsw i32 %90, 1
  %spec.select = select i1 %107, i32 %108, i32 %90
  br label %109

; <label>:109:                                    ; preds = %93, %.lr.ph29
  %.03 = phi i32 [ %90, %.lr.ph29 ], [ %spec.select, %93 ]
  %110 = sext i32 %88 to i64
  %111 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = sext i32 %.03 to i64
  %114 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp slt i32 %112, %118
  br i1 %119, label %._crit_edge30.loopexit, label %120

; <label>:120:                                    ; preds = %109
  %121 = sext i32 %.03 to i64
  %122 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = sext i32 %.0627 to i64
  %125 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %124
  store i32 %123, i32* %125, align 4
  %126 = shl i32 %.03, 1
  %127 = sext i32 %126 to i64
  %128 = icmp sgt i64 %127, %indvars.iv.next51
  br i1 %128, label %._crit_edge30.loopexit, label %.lr.ph29

._crit_edge30.loopexit:                           ; preds = %120, %109
  %.0615.ph = phi i32 [ %.0627, %109 ], [ %.03, %120 ]
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %80
  %.0615 = phi i32 [ 1, %80 ], [ %.0615.ph, %._crit_edge30.loopexit ]
  %129 = sext i32 %.0615 to i64
  %130 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %129
  store i32 %88, i32* %130, align 4
  %131 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 1
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %indvars.iv.next51
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 1
  store i32 %134, i32* %135, align 4
  %136 = add nsw i64 %indvars.iv.next51, -1
  %137 = sext i32 1 to i64
  %138 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = icmp sgt i64 2, %136
  br i1 %140, label %._crit_edge35, label %.lr.ph34.preheader

.lr.ph34.preheader:                               ; preds = %._crit_edge30
  br label %.lr.ph34

.lr.ph34:                                         ; preds = %.lr.ph34.preheader, %171
  %141 = phi i32 [ %177, %171 ], [ 2, %.lr.ph34.preheader ]
  %.0232 = phi i32 [ %.01, %171 ], [ 1, %.lr.ph34.preheader ]
  call void @unroll_loop(i32 221)
  %142 = sext i32 %141 to i64
  %143 = icmp slt i64 %142, %136
  br i1 %143, label %144, label %160

; <label>:144:                                    ; preds = %.lr.ph34
  %145 = add nuw nsw i32 %141, 1
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = sext i32 %141 to i64
  %153 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %155
  %157 = load i32, i32* %156, align 4
  %158 = icmp slt i32 %151, %157
  %159 = add nuw nsw i32 %141, 1
  %spec.select1 = select i1 %158, i32 %159, i32 %141
  br label %160

; <label>:160:                                    ; preds = %144, %.lr.ph34
  %.01 = phi i32 [ %141, %.lr.ph34 ], [ %spec.select1, %144 ]
  %161 = sext i32 %139 to i64
  %162 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = sext i32 %.01 to i64
  %165 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = icmp slt i32 %163, %169
  br i1 %170, label %._crit_edge35.loopexit, label %171

; <label>:171:                                    ; preds = %160
  %172 = sext i32 %.01 to i64
  %173 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = sext i32 %.0232 to i64
  %176 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %175
  store i32 %174, i32* %176, align 4
  %177 = shl i32 %.01, 1
  %178 = sext i32 %177 to i64
  %179 = icmp sgt i64 %178, %136
  br i1 %179, label %._crit_edge35.loopexit, label %.lr.ph34

._crit_edge35.loopexit:                           ; preds = %171, %160
  %.0217.ph = phi i32 [ %.0232, %160 ], [ %.01, %171 ]
  br label %._crit_edge35

._crit_edge35:                                    ; preds = %._crit_edge35.loopexit, %._crit_edge30
  %.0217 = phi i32 [ 1, %._crit_edge30 ], [ %.0217.ph, %._crit_edge35.loopexit ]
  %180 = sext i32 %.0217 to i64
  %181 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %180
  store i32 %139, i32* %181, align 4
  %indvars.iv.next49 = add nsw i64 %indvars.iv48, 1
  %182 = sext i32 %132 to i64
  %183 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 %182
  %184 = trunc i64 %indvars.iv.next49 to i32
  store i32 %184, i32* %183, align 4
  %185 = sext i32 %82 to i64
  %186 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 %185
  %187 = trunc i64 %indvars.iv.next49 to i32
  store i32 %187, i32* %186, align 4
  %188 = sext i32 %82 to i64
  %189 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %188
  %190 = load i32, i32* %189, align 4
  %191 = and i32 %190, -256
  %192 = sext i32 %132 to i64
  %193 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = and i32 %194, -256
  %196 = add i32 %191, %195
  %197 = sext i32 %82 to i64
  %198 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %197
  %199 = load i32, i32* %198, align 4
  %200 = and i32 %199, 255
  %201 = sext i32 %132 to i64
  %202 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = and i32 %203, 255
  %205 = icmp sgt i32 %200, %204
  br i1 %205, label %206, label %211

; <label>:206:                                    ; preds = %._crit_edge35
  %207 = sext i32 %82 to i64
  %208 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = and i32 %209, 255
  br label %216

; <label>:211:                                    ; preds = %._crit_edge35
  %212 = sext i32 %132 to i64
  %213 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = and i32 %214, 255
  br label %216

; <label>:216:                                    ; preds = %211, %206
  %217 = phi i32 [ %210, %206 ], [ %215, %211 ]
  %218 = add nsw i32 1, %217
  %219 = or i32 %196, %218
  %220 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %indvars.iv.next49
  store i32 %219, i32* %220, align 4
  %221 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 %indvars.iv.next49
  store i32 -1, i32* %221, align 4
  %222 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %indvars.iv.next51
  %223 = trunc i64 %indvars.iv.next49 to i32
  store i32 %223, i32* %222, align 4
  %224 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %indvars.iv.next51
  %225 = load i32, i32* %224, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = trunc i64 %indvars.iv.next51 to i32
  %230 = ashr i32 %229, 1
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %231
  %233 = load i32, i32* %232, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = icmp slt i32 %228, %236
  %238 = trunc i64 %indvars.iv.next51 to i32
  br i1 %237, label %.lr.ph39, label %._crit_edge40

.lr.ph39:                                         ; preds = %216
  %239 = trunc i64 %indvars.iv.next51 to i32
  br label %240

; <label>:240:                                    ; preds = %.lr.ph39, %240
  %.037 = phi i32 [ %239, %.lr.ph39 ], [ %247, %240 ]
  call void @unroll_loop(i32 222)
  %241 = ashr i32 %.037, 1
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = sext i32 %.037 to i64
  %246 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %245
  store i32 %244, i32* %246, align 4
  %247 = ashr i32 %.037, 1
  %248 = load i32, i32* %227, align 4
  %249 = ashr i32 %247, 1
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %250
  %252 = load i32, i32* %251, align 4
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = icmp slt i32 %248, %255
  br i1 %256, label %240, label %._crit_edge40.loopexit

._crit_edge40.loopexit:                           ; preds = %240
  %.0.lcssa.ph = phi i32 [ %247, %240 ]
  br label %._crit_edge40

._crit_edge40:                                    ; preds = %._crit_edge40.loopexit, %216
  %.0.lcssa = phi i32 [ %238, %216 ], [ %.0.lcssa.ph, %._crit_edge40.loopexit ]
  %257 = sext i32 %.0.lcssa to i64
  %258 = getelementptr inbounds [260 x i32], [260 x i32]* %5, i64 0, i64 %257
  store i32 %225, i32* %258, align 4
  %259 = icmp sgt i64 %indvars.iv.next51, 1
  br i1 %259, label %80, label %._crit_edge46

._crit_edge46:                                    ; preds = %._crit_edge40
  %260 = zext i32 %79 to i64
  %261 = add i64 %24, %260
  %262 = trunc i64 %261 to i32
  br label %263

; <label>:263:                                    ; preds = %._crit_edge46, %76
  %.04.lcssa = phi i32 [ %262, %._crit_edge46 ], [ %2, %76 ]
  %264 = icmp slt i32 %.04.lcssa, 516
  br i1 %264, label %266, label %265

; <label>:265:                                    ; preds = %263
  call void @BZ2_bz__AssertH__fail(i32 2002)
  br label %266

; <label>:266:                                    ; preds = %265, %263
  %267 = icmp sle i32 1, %2
  br i1 %267, label %.lr.ph61.preheader, label %._crit_edge62

.lr.ph61.preheader:                               ; preds = %266
  br label %.lr.ph61

.lr.ph61:                                         ; preds = %.lr.ph61.preheader, %._crit_edge56
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %._crit_edge56 ], [ 1, %.lr.ph61.preheader ]
  %.01258 = phi i8 [ %spec.select2, %._crit_edge56 ], [ 0, %.lr.ph61.preheader ]
  call void @unroll_loop(i32 223)
  %268 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 %indvars.iv64
  %269 = load i32, i32* %268, align 4
  %270 = icmp sge i32 %269, 0
  br i1 %270, label %.lr.ph55, label %._crit_edge56

.lr.ph55:                                         ; preds = %.lr.ph61
  %271 = trunc i64 %indvars.iv64 to i32
  br label %272

; <label>:272:                                    ; preds = %.lr.ph55, %272
  %.01053 = phi i32 [ 0, %.lr.ph55 ], [ %276, %272 ]
  %.01152 = phi i32 [ %271, %.lr.ph55 ], [ %275, %272 ]
  %273 = sext i32 %.01152 to i64
  %274 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 %273
  %275 = load i32, i32* %274, align 4
  %276 = add nuw nsw i32 %.01053, 1
  %277 = sext i32 %275 to i64
  %278 = getelementptr inbounds [516 x i32], [516 x i32]* %7, i64 0, i64 %277
  %279 = load i32, i32* %278, align 4
  %280 = icmp sge i32 %279, 0
  br i1 %280, label %272, label %._crit_edge56.loopexit

._crit_edge56.loopexit:                           ; preds = %272
  %.010.lcssa.ph = phi i32 [ %276, %272 ]
  br label %._crit_edge56

._crit_edge56:                                    ; preds = %._crit_edge56.loopexit, %.lr.ph61
  %.010.lcssa = phi i32 [ 0, %.lr.ph61 ], [ %.010.lcssa.ph, %._crit_edge56.loopexit ]
  %281 = trunc i32 %.010.lcssa to i8
  %282 = sub nuw nsw i64 %indvars.iv64, 1
  %283 = getelementptr inbounds i8, i8* %0, i64 %282
  store i8 %281, i8* %283, align 1
  %284 = icmp sgt i32 %.010.lcssa, %3
  %spec.select2 = select i1 %284, i8 1, i8 %.01258
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1
  %exitcond = icmp ne i64 %indvars.iv.next65, %27
  br i1 %exitcond, label %.lr.ph61, label %._crit_edge62.loopexit

._crit_edge62.loopexit:                           ; preds = %._crit_edge56
  %.012.lcssa.ph = phi i8 [ %spec.select2, %._crit_edge56 ]
  br label %._crit_edge62

._crit_edge62:                                    ; preds = %._crit_edge62.loopexit, %266
  %.012.lcssa = phi i8 [ 0, %266 ], [ %.012.lcssa.ph, %._crit_edge62.loopexit ]
  %285 = icmp ne i8 %.012.lcssa, 0
  br i1 %285, label %286, label %295

; <label>:286:                                    ; preds = %._crit_edge62
  %287 = icmp sle i32 1, %2
  br i1 %287, label %.lr.ph70.preheader, label %._crit_edge71

.lr.ph70.preheader:                               ; preds = %286
  br label %.lr.ph70

.lr.ph70:                                         ; preds = %.lr.ph70.preheader, %.lr.ph70
  %indvars.iv72 = phi i64 [ %indvars.iv.next73, %.lr.ph70 ], [ 1, %.lr.ph70.preheader ]
  call void @unroll_loop(i32 224)
  %288 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %indvars.iv72
  %289 = load i32, i32* %288, align 4
  %290 = ashr i32 %289, 8
  %291 = sdiv i32 %290, 2
  %292 = add nsw i32 1, %291
  %293 = shl i32 %292, 8
  %294 = getelementptr inbounds [516 x i32], [516 x i32]* %6, i64 0, i64 %indvars.iv72
  store i32 %293, i32* %294, align 4
  %indvars.iv.next73 = add nuw nsw i64 %indvars.iv72, 1
  %exitcond4 = icmp ne i64 %indvars.iv.next73, %28
  br i1 %exitcond4, label %.lr.ph70, label %._crit_edge71.loopexit

._crit_edge71.loopexit:                           ; preds = %.lr.ph70
  br label %._crit_edge71

._crit_edge71:                                    ; preds = %._crit_edge71.loopexit, %286
  br label %29

; <label>:295:                                    ; preds = %._crit_edge62
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_hbAssignCodes(i32*, i8*, i32, i32, i32) #0 {
  %6 = icmp sle i32 %2, %3
  br i1 %6, label %.lr.ph8.preheader, label %._crit_edge9

.lr.ph8.preheader:                                ; preds = %5
  %7 = zext i32 %4 to i64
  br label %.lr.ph8

.lr.ph8:                                          ; preds = %.lr.ph8.preheader, %._crit_edge
  %.016 = phi i32 [ %17, %._crit_edge ], [ 0, %.lr.ph8.preheader ]
  %.025 = phi i32 [ %18, %._crit_edge ], [ %2, %.lr.ph8.preheader ]
  %8 = icmp slt i32 0, %4
  br i1 %8, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.lr.ph8
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %16
  %indvars.iv = phi i64 [ %indvars.iv.next, %16 ], [ 0, %.lr.ph.preheader ]
  %.13 = phi i32 [ %.2, %16 ], [ %.016, %.lr.ph.preheader ]
  call void @unroll_loop(i32 225)
  %9 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = icmp eq i32 %11, %.025
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %.lr.ph
  %14 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv
  store i32 %.13, i32* %14, align 4
  %15 = add nsw i32 %.13, 1
  br label %16

; <label>:16:                                     ; preds = %.lr.ph, %13
  %.2 = phi i32 [ %15, %13 ], [ %.13, %.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %7
  br i1 %exitcond1, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %16
  %.1.lcssa.ph = phi i32 [ %.2, %16 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph8
  %.1.lcssa = phi i32 [ %.016, %.lr.ph8 ], [ %.1.lcssa.ph, %._crit_edge.loopexit ]
  %17 = shl i32 %.1.lcssa, 1
  %18 = add nsw i32 %.025, 1
  %19 = icmp sle i32 %18, %3
  br i1 %19, label %.lr.ph8, label %._crit_edge9.loopexit

._crit_edge9.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge9.loopexit, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BZ2_hbCreateDecodeTables(i32*, i32*, i32*, i8*, i32, i32, i32) #0 {
  %8 = icmp sle i32 %4, %5
  br i1 %8, label %.lr.ph44.preheader, label %._crit_edge45

.lr.ph44.preheader:                               ; preds = %7
  %9 = zext i32 %6 to i64
  br label %.lr.ph44

.lr.ph44:                                         ; preds = %.lr.ph44.preheader, %._crit_edge36
  %.0242 = phi i32 [ %21, %._crit_edge36 ], [ %4, %.lr.ph44.preheader ]
  %.0341 = phi i32 [ %.14.lcssa, %._crit_edge36 ], [ 0, %.lr.ph44.preheader ]
  %10 = icmp slt i32 0, %6
  br i1 %10, label %.lr.ph35.preheader, label %._crit_edge36

.lr.ph35.preheader:                               ; preds = %.lr.ph44
  br label %.lr.ph35

.lr.ph35:                                         ; preds = %.lr.ph35.preheader, %20
  %indvars.iv37 = phi i64 [ %indvars.iv.next38, %20 ], [ 0, %.lr.ph35.preheader ]
  %.1432 = phi i32 [ %.25, %20 ], [ %.0341, %.lr.ph35.preheader ]
  call void @unroll_loop(i32 226)
  %11 = getelementptr inbounds i8, i8* %3, i64 %indvars.iv37
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, %.0242
  br i1 %14, label %15, label %20

; <label>:15:                                     ; preds = %.lr.ph35
  %16 = sext i32 %.1432 to i64
  %17 = getelementptr inbounds i32, i32* %2, i64 %16
  %18 = trunc i64 %indvars.iv37 to i32
  store i32 %18, i32* %17, align 4
  %19 = add nsw i32 %.1432, 1
  br label %20

; <label>:20:                                     ; preds = %.lr.ph35, %15
  %.25 = phi i32 [ %19, %15 ], [ %.1432, %.lr.ph35 ]
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
  %exitcond4 = icmp ne i64 %indvars.iv.next38, %9
  br i1 %exitcond4, label %.lr.ph35, label %._crit_edge36.loopexit

._crit_edge36.loopexit:                           ; preds = %20
  %.14.lcssa.ph = phi i32 [ %.25, %20 ]
  br label %._crit_edge36

._crit_edge36:                                    ; preds = %._crit_edge36.loopexit, %.lr.ph44
  %.14.lcssa = phi i32 [ %.0341, %.lr.ph44 ], [ %.14.lcssa.ph, %._crit_edge36.loopexit ]
  %21 = add nsw i32 %.0242, 1
  %22 = icmp sle i32 %21, %5
  br i1 %22, label %.lr.ph44, label %._crit_edge45.loopexit

._crit_edge45.loopexit:                           ; preds = %._crit_edge36
  br label %._crit_edge45

._crit_edge45:                                    ; preds = %._crit_edge45.loopexit, %7
  br label %23

; <label>:23:                                     ; preds = %._crit_edge45, %23
  %indvars.iv29 = phi i64 [ 0, %._crit_edge45 ], [ %indvars.iv.next30, %23 ]
  call void @unroll_loop(i32 227)
  %24 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv29
  store i32 0, i32* %24, align 4
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %exitcond31 = icmp ne i64 %indvars.iv.next30, 23
  br i1 %exitcond31, label %23, label %25

; <label>:25:                                     ; preds = %23
  %26 = icmp slt i32 0, %6
  br i1 %26, label %.lr.ph23.preheader, label %._crit_edge24

.lr.ph23.preheader:                               ; preds = %25
  %27 = zext i32 %6 to i64
  br label %.lr.ph23

.lr.ph23:                                         ; preds = %.lr.ph23.preheader, %.lr.ph23
  %indvars.iv25 = phi i64 [ %indvars.iv.next26, %.lr.ph23 ], [ 0, %.lr.ph23.preheader ]
  call void @unroll_loop(i32 228)
  %28 = getelementptr inbounds i8, i8* %3, i64 %indvars.iv25
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %1, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %33, align 4
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1
  %exitcond3 = icmp ne i64 %indvars.iv.next26, %27
  br i1 %exitcond3, label %.lr.ph23, label %._crit_edge24.loopexit

._crit_edge24.loopexit:                           ; preds = %.lr.ph23
  br label %._crit_edge24

._crit_edge24:                                    ; preds = %._crit_edge24.loopexit, %25
  br label %36

; <label>:36:                                     ; preds = %._crit_edge24, %36
  %indvars.iv18 = phi i64 [ 1, %._crit_edge24 ], [ %indvars.iv.next19, %36 ]
  call void @unroll_loop(i32 229)
  %37 = sub nuw nsw i64 %indvars.iv18, 1
  %38 = getelementptr inbounds i32, i32* %1, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv18
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %41, %39
  store i32 %42, i32* %40, align 4
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %exitcond20 = icmp ne i64 %indvars.iv.next19, 23
  br i1 %exitcond20, label %36, label %.preheader

.preheader:                                       ; preds = %36
  %indvars.iv15.ph = phi i64 [ 0, %36 ]
  br label %43

; <label>:43:                                     ; preds = %.preheader, %43
  %indvars.iv15 = phi i64 [ %indvars.iv.next16, %43 ], [ %indvars.iv15.ph, %.preheader ]
  call void @unroll_loop(i32 230)
  %44 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv15
  store i32 0, i32* %44, align 4
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %exitcond = icmp ne i64 %indvars.iv.next16, 23
  br i1 %exitcond, label %43, label %45

; <label>:45:                                     ; preds = %43
  %46 = icmp sle i32 %4, %5
  br i1 %46, label %.lr.ph10, label %._crit_edge11

.lr.ph10:                                         ; preds = %45
  %47 = sext i32 %4 to i64
  %48 = sext i32 %5 to i64
  %49 = add i64 %48, 1
  br label %50

; <label>:50:                                     ; preds = %.lr.ph10, %50
  %indvars.iv12 = phi i64 [ %47, %.lr.ph10 ], [ %indvars.iv.next13, %50 ]
  %.08 = phi i32 [ 0, %.lr.ph10 ], [ %59, %50 ]
  call void @unroll_loop(i32 231)
  %indvars.iv.next13 = add nsw i64 %indvars.iv12, 1
  %51 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next13
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv12
  %54 = load i32, i32* %53, align 4
  %55 = sub nsw i32 %52, %54
  %56 = add nsw i32 %.08, %55
  %57 = sub nsw i32 %56, 1
  %58 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv12
  store i32 %57, i32* %58, align 4
  %59 = shl i32 %56, 1
  %exitcond2 = icmp ne i64 %indvars.iv.next13, %49
  br i1 %exitcond2, label %50, label %._crit_edge11.loopexit

._crit_edge11.loopexit:                           ; preds = %50
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %._crit_edge11.loopexit, %45
  %60 = add nsw i32 %4, 1
  %61 = icmp sle i32 %60, %5
  br i1 %61, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %._crit_edge11
  %62 = add i32 %4, 1
  %63 = sext i32 %62 to i64
  %64 = sext i32 %5 to i64
  %65 = add i64 %64, 1
  br label %66

; <label>:66:                                     ; preds = %.lr.ph, %66
  %indvars.iv = phi i64 [ %63, %.lr.ph ], [ %indvars.iv.next, %66 ]
  call void @unroll_loop(i32 232)
  %67 = sub nsw i64 %indvars.iv, 1
  %68 = getelementptr inbounds i32, i32* %0, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = add nsw i32 %69, 1
  %71 = shl i32 %70, 1
  %72 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %73 = load i32, i32* %72, align 4
  %74 = sub nsw i32 %71, %73
  %75 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  store i32 %74, i32* %75, align 4
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %65
  br i1 %exitcond1, label %66, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %66
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge11
  ret void
}

declare void @unroll_loop(i32)

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "track_func"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn nounwind }
attributes #12 = { noreturn }
attributes #13 = { nounwind readnone }

!llvm.ident = !{!7, !7, !7, !7, !7, !7, !7, !7}
!llvm.module.flags = !{!8}

!0 = !{i64 13}
!1 = !{i64 17}
!2 = !{i64 44}
!3 = !{i64 43}
!4 = !{i64 14}
!5 = !{i64 3}
!6 = !{i64 0}
!7 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{i64 2}
!10 = !{!"1"}
!11 = !{i64 39}
!12 = !{i64 38}
!13 = !{i64 37}
!14 = !{i64 36}
!15 = !{i64 35}
!16 = !{i64 34}
!17 = !{i64 28}
!18 = !{i64 33}
!19 = !{i64 19}
!20 = !{i64 31}
!21 = !{i64 29}
!22 = !{i64 27}
!23 = !{i64 30}
!24 = !{i64 45}
!25 = !{i64 32}
!26 = !{i64 65}
!27 = !{i64 25}
!28 = !{i64 64}
!29 = !{i64 55}
!30 = !{i64 63}
!31 = !{i64 62}
!32 = !{i64 1}
!33 = !{i64 61}
!34 = !{i64 60}
!35 = !{i64 18}
!36 = !{i64 59}
!37 = !{i64 58}
!38 = !{i64 57}
!39 = !{i64 56}
!40 = !{i64 66}
!41 = !{i64 54}
!42 = !{i64 20}
!43 = !{i64 53}
!44 = !{i64 52}
!45 = !{i64 22}
!46 = !{i64 26}
!47 = !{i64 51}
!48 = !{i64 50}
!49 = !{i64 23}
!50 = !{i64 24}
!51 = !{i64 49}
!52 = !{i64 48}
!53 = !{i64 47}
!54 = !{i64 46}
!55 = !{i64 21}
!56 = !{i64 7}
!57 = !{i64 6}
!58 = !{i64 4}
!59 = !{i64 8}
!60 = !{i64 40}
!61 = !{i64 41}
!62 = !{i64 15}
!63 = !{i64 42}
!64 = !{i64 9}
!65 = !{i64 10}
!66 = !{i64 16}
!67 = !{i64 12}
!68 = !{i64 11}
!69 = !{i64 5}
